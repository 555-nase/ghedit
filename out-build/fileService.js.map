{"version":3,"file":"fileService.js","sourceRoot":"","sources":["../src/fileService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\n// This is a port of vs/editor/workbench/services/files/electron-browser/fileService.ts with\n// Electron and Node dependencies removed/replaced.\n\nimport nls = require('vs/nls');\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport paths = require('vs/base/common/paths');\n// TODO: import encoding = require('vs/base/node/encoding');\nimport errors = require('vs/base/common/errors');\nimport strings = require('vs/base/common/strings');\nimport uri from 'vs/base/common/uri';\nimport timer = require('vs/base/common/timer');\nimport {IFileService, IFilesConfiguration, IResolveFileOptions, IFileStat, IContent, IImportResult, IResolveContentOptions, IUpdateContentOptions} from 'vs/platform/files/common/files';\nimport {FileService as GitHubFileService, IFileServiceOptions, IEncodingOverride} from 'githubFileService';\nimport {IConfigurationService, IConfigurationServiceEvent, ConfigurationServiceEventTypes} from 'vs/platform/configuration/common/configuration';\nimport {IEventService} from 'vs/platform/event/common/event';\nimport {IWorkspaceContextService} from 'vs/platform/workspace/common/workspace';\nimport {Github} from 'github';\n\n// TODO: import {shell} from 'electron';\n\n// TODO: Use vs/base/node/encoding replacement.\nconst encoding = {\n\t UTF8: 'utf8'\n};\n\nexport class FileService implements IFileService {\n\n\tpublic serviceId = IFileService;\n\n\tprivate raw: IFileService;\n\n\tprivate configurationChangeListenerUnbind: () => void;\n\n\tconstructor(\n\t\tprivate configurationService: IConfigurationService,\n\t\tprivate eventService: IEventService,\n\t\tprivate contextService: IWorkspaceContextService,\n\t\tprivate githubService: Github\n\t) {\n\t\tconst configuration = this.configurationService.getConfiguration<IFilesConfiguration>();\n\n\t\t// adjust encodings (TODO@Ben knowledge on settings location ('.vscode') is hardcoded)\n\t\tlet encodingOverride: IEncodingOverride[] = [];\n\t\tencodingOverride.push({ resource: uri.file(this.contextService.getConfiguration().env.appSettingsHome), encoding: encoding.UTF8 });\n\t\tif (this.contextService.getWorkspace()) {\n\t\t\tencodingOverride.push({ resource: uri.file(paths.join(this.contextService.getWorkspace().resource.fsPath, '.vscode')), encoding: encoding.UTF8 });\n\t\t}\n\n\t\tlet watcherIgnoredPatterns: string[] = [];\n\t\tif (configuration.files && configuration.files.watcherExclude) {\n\t\t\twatcherIgnoredPatterns = Object.keys(configuration.files.watcherExclude).filter(k => !!configuration.files.watcherExclude[k]);\n\t\t}\n\n\t\t// build config\n\t\tlet fileServiceConfig: IFileServiceOptions = {\n\t\t\terrorLogger: (msg: string) => errors.onUnexpectedError(msg),\n\t\t\tencoding: configuration.files && configuration.files.encoding,\n\t\t\tencodingOverride: encodingOverride,\n\t\t\twatcherIgnoredPatterns: watcherIgnoredPatterns,\n\t\t\tverboseLogging: this.contextService.getConfiguration().env.verboseLogging\n\t\t};\n\n\t\t// create service\n\t\tlet workspace = this.contextService.getWorkspace();\n\t\tthis.raw = new GitHubFileService(workspace ? workspace.resource.fsPath : void 0, fileServiceConfig, this.eventService, this.githubService);\n\n\t\t// Listeners\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\n\t\t// Config Changes\n\t\tthis.configurationChangeListenerUnbind = this.configurationService.addListener(ConfigurationServiceEventTypes.UPDATED, (e: IConfigurationServiceEvent) => this.onConfigurationChange(e.config));\n\t}\n\n\tprivate onConfigurationChange(configuration: IFilesConfiguration): void {\n\t\tthis.updateOptions(configuration.files);\n\t}\n\n\tpublic updateOptions(options: any): void {\n\t\tthis.raw.updateOptions(options);\n\t}\n\n\tpublic resolveFile(resource: uri, options?: IResolveFileOptions): TPromise<IFileStat> {\n\t\treturn this.raw.resolveFile(resource, options);\n\t}\n\n\tpublic resolveContent(resource: uri, options?: IResolveContentOptions): TPromise<IContent> {\n\t\tlet contentId = resource.toString();\n\t\tlet timerEvent = timer.start(timer.Topic.WORKBENCH, strings.format('Load {0}', contentId));\n\n\t\treturn this.raw.resolveContent(resource, options).then((result) => {\n\t\t\ttimerEvent.stop();\n\n\t\t\treturn result;\n\t\t});\n\t}\n\n\tpublic resolveContents(resources: uri[]): TPromise<IContent[]> {\n\t\treturn this.raw.resolveContents(resources);\n\t}\n\n\tpublic updateContent(resource: uri, value: string, options?: IUpdateContentOptions): TPromise<IFileStat> {\n\t\tlet timerEvent = timer.start(timer.Topic.WORKBENCH, strings.format('Save {0}', resource.toString()));\n\n\t\treturn this.raw.updateContent(resource, value, options).then((result) => {\n\t\t\ttimerEvent.stop();\n\n\t\t\treturn result;\n\t\t}, (error) => {\n\t\t\ttimerEvent.stop();\n\n\t\t\treturn TPromise.wrapError(error);\n\t\t});\n\t}\n\n\tpublic moveFile(source: uri, target: uri, overwrite?: boolean): TPromise<IFileStat> {\n\t\treturn this.raw.moveFile(source, target, overwrite);\n\t}\n\n\tpublic copyFile(source: uri, target: uri, overwrite?: boolean): TPromise<IFileStat> {\n\t\treturn this.raw.copyFile(source, target, overwrite);\n\t}\n\n\tpublic createFile(resource: uri, content?: string): TPromise<IFileStat> {\n\t\treturn this.raw.createFile(resource, content);\n\t}\n\n\tpublic createFolder(resource: uri): TPromise<IFileStat> {\n\t\treturn this.raw.createFolder(resource);\n\t}\n\n\tpublic rename(resource: uri, newName: string): TPromise<IFileStat> {\n\t\treturn this.raw.rename(resource, newName);\n\t}\n\n\tpublic del(resource: uri, useTrash?: boolean): TPromise<void> {\n\t\tif (useTrash) {\n\t\t\treturn this.doMoveItemToTrash(resource);\n\t\t}\n\n\t\treturn this.raw.del(resource);\n\t}\n\n\tprivate doMoveItemToTrash(resource: uri): TPromise<void> {\n\t\tlet workspace = this.contextService.getWorkspace();\n\t\tif (!workspace) {\n\t\t\treturn TPromise.wrapError<void>('Need a workspace to use this');\n\t\t}\n\n\t\tlet absolutePath = resource.fsPath;\n\n// TODO:\t\tlet result = shell.moveItemToTrash(absolutePath);\n\t\tconsole.log('shell.moveItemToTrash not implemented');\n\t\tlet result = null;\n\t\tif (!result) {\n\t\t\treturn TPromise.wrapError<void>(new Error(nls.localize('trashFailed', \"Failed to move '{0}' to the trash\", paths.basename(absolutePath))));\n\t\t}\n\n\t\treturn TPromise.as(null);\n\t}\n\n\tpublic importFile(source: uri, targetFolder: uri): TPromise<IImportResult> {\n\t\treturn this.raw.importFile(source, targetFolder).then((result) => {\n\t\t\treturn <IImportResult>{\n\t\t\t\tisNew: result && result.isNew,\n\t\t\t\tstat: result && result.stat\n\t\t\t};\n\t\t});\n\t}\n\n\tpublic watchFileChanges(resource: uri): void {\n\t\tif (!resource) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (resource.scheme !== 'file') {\n\t\t\treturn; // only support files\n\t\t}\n\n\t\t// return early if the resource is inside the workspace for which we have another watcher in place\n\t\tif (this.contextService.isInsideWorkspace(resource)) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.raw.watchFileChanges(resource);\n\t}\n\n\tpublic unwatchFileChanges(resource: uri): void;\n\tpublic unwatchFileChanges(path: string): void;\n\tpublic unwatchFileChanges(arg1: any): void {\n\t\tthis.raw.unwatchFileChanges(arg1);\n\t}\n\n\tpublic dispose(): void {\n\n\t\t// Listeners\n\t\tif (this.configurationChangeListenerUnbind) {\n\t\t\tthis.configurationChangeListenerUnbind();\n\t\t\tthis.configurationChangeListenerUnbind = null;\n\t\t}\n\n\t\t// Dispose service\n\t\tthis.raw.dispose();\n\t}\n}"]}