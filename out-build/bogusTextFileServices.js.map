{"version":3,"file":"bogusTextFileServices.js","sourceRoot":"","sources":["../src/bogusTextFileServices.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\n// This is a port of vs/workench/parts/files/electron-browser/textFileServices.js with Electron\n// and Node dependencies removed/replaced.\n\nimport nls = require('vs/nls');\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport paths = require('vs/base/common/paths');\nimport strings = require('vs/base/common/strings');\nimport {isWindows} from 'vs/base/common/platform';\nimport URI from 'vs/base/common/uri';\nimport {UntitledEditorModel} from 'vs/workbench/common/editor/untitledEditorModel';\nimport {IEventService} from 'vs/platform/event/common/event';\nimport {TextFileService as AbstractTextFileService} from 'vs/workbench/parts/files/browser/textFileServices';\nimport {CACHE, TextFileEditorModel} from 'vs/workbench/parts/files/common/editors/textFileEditorModel';\nimport {ITextFileOperationResult, ConfirmResult, AutoSaveMode} from 'vs/workbench/parts/files/common/files';\nimport {IUntitledEditorService} from 'vs/workbench/services/untitled/common/untitledEditorService';\nimport {IFileService} from 'vs/platform/files/common/files';\nimport {BinaryEditorModel} from 'vs/workbench/common/editor/binaryEditorModel';\nimport {IInstantiationService} from 'vs/platform/instantiation/common/instantiation';\nimport {IWorkspaceContextService} from 'vs/workbench/services/workspace/common/contextService';\nimport {ILifecycleService} from 'vs/platform/lifecycle/common/lifecycle';\nimport {ITelemetryService} from 'vs/platform/telemetry/common/telemetry';\nimport {IConfigurationService} from 'vs/platform/configuration/common/configuration';\nimport {IModeService} from 'vs/editor/common/services/modeService';\nimport {IWorkbenchEditorService} from 'vs/workbench/services/editor/common/editorService';\nimport {IWindowService} from 'windowService';\n\nexport class TextFileService extends AbstractTextFileService {\n\n\tconstructor(\n\t\t@IWorkspaceContextService contextService: IWorkspaceContextService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IFileService private fileService: IFileService,\n\t\t@IUntitledEditorService private untitledEditorService: IUntitledEditorService,\n\t\t@ILifecycleService lifecycleService: ILifecycleService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IEventService eventService: IEventService,\n\t\t@IModeService private modeService: IModeService,\n\t\t@IWorkbenchEditorService private editorService: IWorkbenchEditorService,\n\t\t@IWindowService private windowService: IWindowService\n\t) {\n\t\tsuper(contextService, instantiationService, configurationService, telemetryService, lifecycleService, eventService);\n\n\t\tthis.init();\n\t}\n\n\tpublic beforeShutdown(): boolean | TPromise<boolean> {\n\t\tsuper.beforeShutdown();\n\n\t\t// Dirty files need treatment on shutdown\n\t\tif (this.getDirty().length) {\n\n\t\t\t// If auto save is enabled, save all files and then check again for dirty files\n\t\t\tif (this.getAutoSaveMode() !== AutoSaveMode.OFF) {\n\t\t\t\treturn this.saveAll(false /* files only */).then(() => {\n\t\t\t\t\tif (this.getDirty().length) {\n\t\t\t\t\t\treturn this.confirmBeforeShutdown(); // we still have dirty files around, so confirm normally\n\t\t\t\t\t}\n\n\t\t\t\t\treturn false; // all good, no veto\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Otherwise just confirm what to do\n\t\t\treturn this.confirmBeforeShutdown();\n\t\t}\n\n\t\treturn false; // no veto\n\t}\n\n\tprivate confirmBeforeShutdown(): boolean | TPromise<boolean> {\n\t\tlet confirm = this.confirmSave();\n\n\t\t// Save\n\t\tif (confirm === ConfirmResult.SAVE) {\n\t\t\treturn this.saveAll(true /* includeUntitled */).then((result) => {\n\t\t\t\tif (result.results.some((r) => !r.success)) {\n\t\t\t\t\treturn true; // veto if some saves failed\n\t\t\t\t}\n\n\t\t\t\treturn false; // no veto\n\t\t\t});\n\t\t}\n\n\t\t// Don't Save\n\t\telse if (confirm === ConfirmResult.DONT_SAVE) {\n\t\t\treturn false; // no veto\n\t\t}\n\n\t\t// Cancel\n\t\telse if (confirm === ConfirmResult.CANCEL) {\n\t\t\treturn true; // veto\n\t\t}\n\t}\n\n\tpublic revertAll(resources?: URI[], force?: boolean): TPromise<ITextFileOperationResult> {\n\n\t\t// Revert files\n\t\treturn super.revertAll(resources, force).then((r) => {\n\n\t\t\t// Revert untitled\n\t\t\tlet untitledInputs = this.untitledEditorService.getAll(resources);\n\t\t\tuntitledInputs.forEach((input) => {\n\t\t\t\tif (input) {\n\t\t\t\t\tinput.dispose();\n\n\t\t\t\t\tr.results.push({\n\t\t\t\t\t\tsource: input.getResource(),\n\t\t\t\t\t\tsuccess: true\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn r;\n\t\t});\n\t}\n\n\tpublic getDirty(resources?: URI[]): URI[] {\n\n\t\t// Collect files\n\t\tlet dirty = super.getDirty(resources);\n\n\t\t// Add untitled ones\n\t\tif (!resources) {\n\t\t\tdirty.push(...this.untitledEditorService.getDirty());\n\t\t} else {\n\t\t\tlet dirtyUntitled = resources.map(r => this.untitledEditorService.get(r)).filter(u => u && u.isDirty()).map(u => u.getResource());\n\t\t\tdirty.push(...dirtyUntitled);\n\t\t}\n\n\t\treturn dirty;\n\t}\n\n\tpublic isDirty(resource?: URI): boolean {\n\t\tif (super.isDirty(resource)) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn this.untitledEditorService.getDirty().some((dirty) => !resource || dirty.toString() === resource.toString());\n\t}\n\n\tpublic confirmSave(resources?: URI[]): ConfirmResult {\n\t\tif (!!this.contextService.getConfiguration().env.extensionDevelopmentPath) {\n\t\t\treturn ConfirmResult.DONT_SAVE; // no veto when we are in extension dev mode because we cannot assum we run interactive (e.g. tests)\n\t\t}\n\n\t\tlet resourcesToConfirm = this.getDirty(resources);\n\t\tif (resourcesToConfirm.length === 0) {\n\t\t\treturn ConfirmResult.DONT_SAVE;\n\t\t}\n\n\t\tlet message = [\n\t\t\tresourcesToConfirm.length === 1 ? nls.localize('saveChangesMessage', \"Do you want to save the changes you made to {0}?\", paths.basename(resourcesToConfirm[0].fsPath)) : nls.localize('saveChangesMessages', \"Do you want to save the changes to the following files?\")\n\t\t];\n\n\t\tif (resourcesToConfirm.length > 1) {\n\t\t\tmessage.push('');\n\t\t\tmessage.push(...resourcesToConfirm.map((r) => paths.basename(r.fsPath)));\n\t\t\tmessage.push('');\n\t\t}\n\n\t\t// Button order\n\t\t// Windows: Save | Don't Save | Cancel\n\t\t// Mac/Linux: Save | Cancel | Don't\n\n\t\tconst save = { label: resourcesToConfirm.length > 1 ? this.mnemonicLabel(nls.localize({ key: 'saveAll', comment: ['&& denotes a mnemonic'] }, \"&&Save All\")) : this.mnemonicLabel(nls.localize({ key: 'save', comment: ['&& denotes a mnemonic'] }, \"&&Save\")), result: ConfirmResult.SAVE };\n\t\tconst dontSave = { label: this.mnemonicLabel(nls.localize({ key: 'dontSave', comment: ['&& denotes a mnemonic'] }, \"Do&&n't Save\")), result: ConfirmResult.DONT_SAVE };\n\t\tconst cancel = { label: nls.localize('cancel', \"Cancel\"), result: ConfirmResult.CANCEL };\n\n\t\tconst buttons = [save];\n\t\tif (isWindows) {\n\t\t\tbuttons.push(dontSave, cancel);\n\t\t} else {\n\t\t\tbuttons.push(cancel, dontSave);\n\t\t}\n\n\t\tlet opts: Electron.Dialog.ShowMessageBoxOptions = {\n\t\t\ttitle: this.contextService.getConfiguration().env.appName,\n\t\t\tmessage: message.join('\\n'),\n\t\t\ttype: 'warning',\n\t\t\tdetail: nls.localize('saveChangesDetail', \"Your changes will be lost if you don't save them.\"),\n\t\t\tbuttons: buttons.map(b => b.label),\n\t\t\tnoLink: true,\n\t\t\tcancelId: buttons.indexOf(cancel)\n\t\t};\n\n\t\tconst choice = this.windowService.getWindow().showMessageBox(opts);\n\n\t\treturn buttons[choice].result;\n\t}\n\n\tprivate mnemonicLabel(label: string): string {\n\t\tif (!isWindows) {\n\t\t\treturn label.replace(/&&/g, ''); // no mnemonic support on mac/linux in buttons yet\n\t\t}\n\n\t\treturn label.replace(/&&/g, '&');\n\t}\n\n\tpublic saveAll(includeUntitled?: boolean): TPromise<ITextFileOperationResult>;\n\tpublic saveAll(resources: URI[]): TPromise<ITextFileOperationResult>;\n\tpublic saveAll(arg1?: any): TPromise<ITextFileOperationResult> {\n\n\t\t// get all dirty\n\t\tlet toSave: URI[] = [];\n\t\tif (Array.isArray(arg1)) {\n\t\t\ttoSave = this.getDirty(arg1);\n\t\t} else {\n\t\t\ttoSave = this.getDirty();\n\t\t}\n\n\t\t// split up between files and untitled\n\t\tlet filesToSave: URI[] = [];\n\t\tlet untitledToSave: URI[] = [];\n\t\ttoSave.forEach((s) => {\n\t\t\tif (s.scheme === 'file') {\n\t\t\t\tfilesToSave.push(s);\n\t\t\t} else if ((Array.isArray(arg1) || arg1 === true /* includeUntitled */) && s.scheme === 'untitled') {\n\t\t\t\tuntitledToSave.push(s);\n\t\t\t}\n\t\t});\n\n\t\treturn this.doSaveAll(filesToSave, untitledToSave);\n\t}\n\n\tprivate doSaveAll(fileResources: URI[], untitledResources: URI[]): TPromise<ITextFileOperationResult> {\n\n\t\t// Preflight for untitled to handle cancellation from the dialog\n\t\tlet targetsForUntitled: URI[] = [];\n\t\tfor (let i = 0; i < untitledResources.length; i++) {\n\t\t\tlet untitled = this.untitledEditorService.get(untitledResources[i]);\n\t\t\tif (untitled) {\n\t\t\t\tlet targetPath: string;\n\n\t\t\t\t// Untitled with associated file path don't need to prompt\n\t\t\t\tif (this.untitledEditorService.hasAssociatedFilePath(untitled.getResource())) {\n\t\t\t\t\ttargetPath = untitled.getResource().fsPath;\n\t\t\t\t}\n\n\t\t\t\t// Otherwise ask user\n\t\t\t\telse {\n\t\t\t\t\ttargetPath = this.promptForPathSync(this.suggestFileName(untitledResources[i]));\n\t\t\t\t\tif (!targetPath) {\n\t\t\t\t\t\treturn TPromise.as({\n\t\t\t\t\t\t\tresults: [...fileResources, ...untitledResources].map((r) => {\n\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\tsource: r\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttargetsForUntitled.push(URI.file(targetPath));\n\t\t\t}\n\t\t}\n\n\t\t// Handle files\n\t\treturn super.saveAll(fileResources).then((result) => {\n\n\t\t\t// Handle untitled\n\t\t\tlet untitledSaveAsPromises: TPromise<void>[] = [];\n\t\t\ttargetsForUntitled.forEach((target, index) => {\n\t\t\t\tlet untitledSaveAsPromise = this.saveAs(untitledResources[index], target).then((uri) => {\n\t\t\t\t\tresult.results.push({\n\t\t\t\t\t\tsource: untitledResources[index],\n\t\t\t\t\t\ttarget: uri,\n\t\t\t\t\t\tsuccess: !!uri\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\t\tuntitledSaveAsPromises.push(untitledSaveAsPromise);\n\t\t\t});\n\n\t\t\treturn TPromise.join(untitledSaveAsPromises).then(() => {\n\t\t\t\treturn result;\n\t\t\t});\n\t\t});\n\t}\n\n\tpublic saveAs(resource: URI, target?: URI): TPromise<URI> {\n\n\t\t// Get to target resource\n\t\tlet targetPromise: TPromise<URI>;\n\t\tif (target) {\n\t\t\ttargetPromise = TPromise.as(target);\n\t\t} else {\n\t\t\tlet dialogPath = resource.fsPath;\n\t\t\tif (resource.scheme === 'untitled') {\n\t\t\t\tdialogPath = this.suggestFileName(resource);\n\t\t\t}\n\n\t\t\ttargetPromise = this.promptForPathAsync(dialogPath).then((path) => path ? URI.file(path) : null);\n\t\t}\n\n\t\treturn targetPromise.then((target) => {\n\t\t\tif (!target) {\n\t\t\t\treturn null; // user canceled\n\t\t\t}\n\n\t\t\t// Just save if target is same as models own resource\n\t\t\tif (resource.toString() === target.toString()) {\n\t\t\t\treturn this.save(resource).then(() => resource);\n\t\t\t}\n\n\t\t\t// Do it\n\t\t\treturn this.doSaveAs(resource, target);\n\t\t});\n\t}\n\n\tprivate doSaveAs(resource: URI, target?: URI): TPromise<URI> {\n\n\t\t// Retrieve text model from provided resource if any\n\t\tlet modelPromise: TPromise<TextFileEditorModel | UntitledEditorModel> = TPromise.as(null);\n\t\tif (resource.scheme === 'file') {\n\t\t\tmodelPromise = TPromise.as(CACHE.get(resource));\n\t\t} else if (resource.scheme === 'untitled') {\n\t\t\tlet untitled = this.untitledEditorService.get(resource);\n\t\t\tif (untitled) {\n\t\t\t\tmodelPromise = untitled.resolve();\n\t\t\t}\n\t\t}\n\n\t\treturn modelPromise.then((model) => {\n\n\t\t\t// We have a model: Use it (can be null e.g. if this file is binary and not a text file or was never opened before)\n\t\t\tif (model) {\n\t\t\t\treturn this.doSaveTextFileAs(model, resource, target);\n\t\t\t}\n\n\t\t\t// Otherwise we can only copy\n\t\t\treturn this.fileService.copyFile(resource, target);\n\t\t}).then(() => {\n\n\t\t\t// Add target to working files because this is an operation that indicates activity\n\t\t\tthis.getWorkingFilesModel().addEntry(target);\n\n\t\t\t// Revert the source\n\t\t\treturn this.revert(resource).then(() => {\n\n\t\t\t\t// Done: return target\n\t\t\t\treturn target;\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate doSaveTextFileAs(sourceModel: TextFileEditorModel | UntitledEditorModel, resource: URI, target: URI): TPromise<void> {\n\t\t// create the target file empty if it does not exist already\n\t\treturn this.fileService.resolveFile(target).then(stat => stat, () => null).then(stat => stat ||  this.fileService.createFile(target)).then(stat => {\n\t\t\t// resolve a model for the file (which can be binary if the file is not a text file)\n\t\t\treturn this.editorService.resolveEditorModel({ resource: target }).then((targetModel: TextFileEditorModel) => {\n\t\t\t\t// binary model: delete the file and run the operation again\n\t\t\t\tif (targetModel instanceof BinaryEditorModel) {\n\t\t\t\t\treturn this.fileService.del(target).then(() => this.doSaveTextFileAs(sourceModel, resource, target));\n\t\t\t\t}\n\n\t\t\t\t// text model: take over encoding and model value from source model\n\t\t\t\ttargetModel.updatePreferredEncoding(sourceModel.getEncoding());\n\t\t\t\ttargetModel.textEditorModel.setValue(sourceModel.getValue());\n\n\t\t\t\t// save model\n\t\t\t\treturn targetModel.save();\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate suggestFileName(untitledResource: URI): string {\n\t\tlet workspace = this.contextService.getWorkspace();\n\t\tif (workspace) {\n\t\t\treturn URI.file(paths.join(workspace.resource.fsPath, this.untitledEditorService.get(untitledResource).suggestFileName())).fsPath;\n\t\t}\n\n\t\treturn this.untitledEditorService.get(untitledResource).suggestFileName();\n\t}\n\n\tprivate promptForPathAsync(defaultPath?: string): TPromise<string> {\n\t\treturn new TPromise<string>((c, e) => {\n\t\t\tthis.windowService.getWindow().showSaveDialog(this.getSaveDialogOptions(defaultPath ? paths.normalize(defaultPath, true) : void 0), (path) => {\n\t\t\t\tc(path);\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate promptForPathSync(defaultPath?: string): string {\n\t\treturn this.windowService.getWindow().showSaveDialog(this.getSaveDialogOptions(defaultPath ? paths.normalize(defaultPath, true) : void 0));\n\t}\n\n\tprivate getSaveDialogOptions(defaultPath?: string): Electron.Dialog.SaveDialogOptions {\n\t\tlet options: Electron.Dialog.SaveDialogOptions = {\n\t\t\tdefaultPath: defaultPath\n\t\t};\n\n\t\t// Filters are working flaky in Electron and there are bugs. On Windows they are working\n\t\t// somewhat but we see issues:\n\t\t// - https://github.com/atom/electron/issues/3556\n\t\t// - https://github.com/Microsoft/vscode/issues/451\n\t\t// - Bug on Windows: When \"All Files\" is picked, the path gets an extra \".*\"\n\t\t// Until these issues are resolved, we disable the dialog file extension filtering.\n\t\tlet disable = true; // Simply using if (true) flags the code afterwards as not reachable.\n\t\tif (disable) {\n\t\t\treturn options;\n\t\t}\n\n\t\tinterface IFilter { name: string; extensions: string[]; }\n\n\t\t// Build the file filter by using our known languages\n\t\tlet ext: string = paths.extname(defaultPath);\n\t\tlet matchingFilter: IFilter;\n\t\tlet filters: IFilter[] = this.modeService.getRegisteredLanguageNames().map(languageName => {\n\t\t\tlet extensions = this.modeService.getExtensions(languageName);\n\t\t\tif (!extensions || !extensions.length) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tlet filter: IFilter = { name: languageName, extensions: extensions.map(e => strings.trim(e, '.')) };\n\n\t\t\tif (ext && extensions.indexOf(ext) >= 0) {\n\t\t\t\tmatchingFilter = filter;\n\n\t\t\t\treturn null; // matching filter will be added last to the top\n\t\t\t}\n\n\t\t\treturn filter;\n\t\t}).filter(f => !!f);\n\n\t\t// Filters are a bit weird on Windows, based on having a match or not:\n\t\t// Match: we put the matching filter first so that it shows up selected and the all files last\n\t\t// No match: we put the all files filter first\n\t\tlet allFilesFilter = { name: nls.localize('allFiles', \"All Files\"), extensions: ['*'] };\n\t\tif (matchingFilter) {\n\t\t\tfilters.unshift(matchingFilter);\n\t\t\tfilters.push(allFilesFilter);\n\t\t} else {\n\t\t\tfilters.unshift(allFilesFilter);\n\t\t}\n\n\t\toptions.filters = filters;\n\n\t\treturn options;\n\t}\n}"]}