{"version":3,"file":"windowService.js","sourceRoot":"","sources":["../src/windowService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;IAEhG,YAAY,CAAC;IAMb,sDAAsD;IAEtD,uDAAuD;IACvD,IAAM,QAAQ,GAAG,GAAG,CAAC;IAEV,sBAAc,GAAG,+BAAe,CAAiB,eAAe,CAAC,CAAC;IAE7E;QAAA;QAgBA,CAAC;QAfO,oCAAc,GAArB,UAAsB,OAA0C,EAAE,QAAqC;YACtG;;;;;;cAME;YACF,MAAM,CAAC,eAAe,CAAC;QACxB,CAAC;QAEM,oCAAc,GAArB,UAAsB,OAA8C;YACrE,0DAA0D;YACxD,MAAM,CAAC,CAAC,CAAC;QACV,CAAC;QACF,kBAAC;IAAD,CAAC,AAhBD,IAgBC;IAhBY,mBAAW,cAgBvB,CAAA;IAyBD;QAOC;YANO,cAAS,GAAG,sBAAc,CAAC;YAOjC,IAAI,CAAC,YAAY,GAAG,IAAI,eAAO,EAAc,CAAC;YAC9C,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;YAEzB,IAAI,CAAC,iBAAiB,EAAE,CAAC;QAC1B,CAAC;QAEO,yCAAiB,GAAzB;YACC;;;;cAIE;QACH,CAAC;QAED,sBAAW,sCAAW;iBAAtB;gBACC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC;YAChC,CAAC;;;WAAA;QAEM,mCAAW,GAAlB;YACC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;QACtB,CAAC;QAEM,iCAAS,GAAhB;YACC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC;QACjB,CAAC;QAEM,sCAAc,GAArB,UAAsB,GAAgB;YACrC,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QAChB,CAAC;QAEM,iCAAS,GAAhB,UAAiB,CAAa,EAAE,MAAe;YAC9C;;;;;cAKE;QACH,CAAC;QACF,oBAAC;IAAD,CAAC,AA9CD,IA8CC;IA9CY,qBAAa,gBA8CzB,CAAA","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\n//import {ElectronWindow} from 'vs/workbench/electron-browser/window';\nimport {createDecorator, ServiceIdentifier} from 'vs/platform/instantiation/common/instantiation';\nimport Event, {Emitter} from 'vs/base/common/event';\n\n//import {ipcRenderer as ipc, remote} from 'electron';\n\n// TODO: const windowId = remote.getCurrentWindow().id;\nconst windowId = 666;\n\nexport var IWindowService = createDecorator<IWindowService>('windowService');\n\nexport class BogusWindow {\n\tpublic showSaveDialog(options: Electron.Dialog.SaveDialogOptions, callback?: (fileName: string) => void): string {\n\t\t/* TODO:\n\t\tif (callback) {\n\t\t\treturn dialog.showSaveDialog(this.win, options, callback);\n\t\t}\n\n\t\treturn dialog.showSaveDialog(this.win, options); // https://github.com/atom/electron/issues/4936\n\t\t*/\n\t\treturn 'unimplemented';\n\t}\n\n\tpublic showMessageBox(options: Electron.Dialog.ShowMessageBoxOptions): number {\n// TODO:\t\treturn dialog.showMessageBox(this.win, options);\n\t\treturn 0;\n\t}\n}\n\nexport interface IWindowServices {\n\twindowService?: IWindowService;\n}\n\nexport interface IBroadcast {\n\tchannel: string;\n\tpayload: any;\n}\n\nexport interface IWindowService {\n\tserviceId: ServiceIdentifier<any>;\n\n\tgetWindowId(): number;\n\n\tgetWindow(): BogusWindow;\n\n\tregisterWindow(win: BogusWindow): void;\n\n\tbroadcast(b: IBroadcast, target?: string): void;\n\n\tonBroadcast: Event<IBroadcast>;\n}\n\nexport class WindowService implements IWindowService {\n\tpublic serviceId = IWindowService;\n\n\tprivate win: BogusWindow;\n\tprivate windowId: number;\n\tprivate _onBroadcast: Emitter<IBroadcast>;\n\n\tconstructor() {\n\t\tthis._onBroadcast = new Emitter<IBroadcast>();\n\t\tthis.windowId = windowId;\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\t/* TODO:\n\t\tipc.on('vscode:broadcast', (event, b: IBroadcast) => {\n\t\t\tthis._onBroadcast.fire(b);\n\t\t});\n\t\t*/\n\t}\n\n\tpublic get onBroadcast(): Event<IBroadcast> {\n\t\treturn this._onBroadcast.event;\n\t}\n\n\tpublic getWindowId(): number {\n\t\treturn this.windowId;\n\t}\n\n\tpublic getWindow(): BogusWindow {\n\t\treturn this.win;\n\t}\n\n\tpublic registerWindow(win: BogusWindow): void {\n\t\tthis.win = win;\n\t}\n\n\tpublic broadcast(b: IBroadcast, target?: string): void {\n\t\t/* TODO:\n\t\tipc.send('vscode:broadcast', this.getWindowId(), target, {\n\t\t\tchannel: b.channel,\n\t\t\tpayload: b.payload\n\t\t});\n\t\t*/\n\t}\n}"]}