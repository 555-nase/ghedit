{"version":3,"file":"github.js","sourceRoot":"","sources":["../src/github.js"],"names":[],"mappings":"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","sourcesContent":["/*!\n * @overview  Github.js\n *\n * @copyright (c) 2013 Michael Aufreiter, Development Seed\n *            Github.js is freely distributable.\n *\n * @license   Licensed under BSD-3-Clause-Clear\n *\n *            For all details and documentation:\n *            http://substance.io/michael/github\n */\n'use strict';\n\n(function (root, factory) {\n   /* istanbul ignore next */\n   if (typeof define === 'function' && define.amd) {\n      define(\n         [\n            'es6-promise',\n            'base-64',\n            'utf8',\n            'axios'\n         ],\n         function (Promise, Base64, Utf8, axios) {\n            return (root.Github = factory(Promise, Base64, Utf8, axios));\n         }\n      );\n   } else if (typeof module === 'object' && module.exports) {\n      module.exports = factory(require('es6-promise'), require('base-64'), require('utf8'), require('axios'));\n   } else {\n      root.Github = factory(root.Promise, root.base64, root.utf8, root.axios);\n   }\n}(this, function(Promise, Base64, Utf8, axios) { // jshint ignore:line\n   function b64encode(string) {\n      return Base64.encode(Utf8.encode(string));\n   }\n\n   if (Promise.polyfill) {\n      Promise.polyfill();\n   }\n\n   // Initial Setup\n   // -------------\n\n   var Github = function (options) {\n      options = options || {};\n\n      var API_URL = options.apiUrl || 'https://api.github.com';\n\n      // HTTP Request Abstraction\n      // =======\n      //\n      // I'm not proud of this and neither should you be if you were responsible for the XMLHttpRequest spec.\n\n      var _request = Github._request = function _request(method, path, data, cb, raw) {\n         function getURL() {\n            var url = path.indexOf('//') >= 0 ? path : API_URL + path;\n\n            url += ((/\\?/).test(url) ? '&' : '?');\n\n            if (data && typeof data === 'object' && ['GET', 'HEAD', 'DELETE'].indexOf(method) > -1) {\n               for(var param in data) {\n                  if (data.hasOwnProperty(param)) {\n                     url += '&' + encodeURIComponent(param) + '=' + encodeURIComponent(data[param]);\n                  }\n               }\n            }\n\n            return url.replace(/(&timestamp=\\d+)/, '') +\n               (typeof window !== 'undefined' ? '&timestamp=' + new Date().getTime() : '');\n         }\n\n         var config = {\n            headers: {\n               Accept: raw ? 'application/vnd.github.v3.raw+json' : 'application/vnd.github.v3+json',\n               'Content-Type': 'application/json;charset=UTF-8'\n            },\n            method: method,\n            data: data ? data : {},\n            url: getURL()\n         };\n\n         if ((options.token) || (options.username && options.password)) {\n            config.headers.Authorization = options.token ?\n            'token ' + options.token :\n            'Basic ' + b64encode(options.username + ':' + options.password);\n         }\n\n         return axios(config)\n            .then(function (response) {\n               cb(\n                  null,\n                  response.data || true,\n                  response.request\n               );\n            }, function (response) {\n               if (response.status === 304) {\n                  cb(\n                     null,\n                     response.data || true,\n                     response.request\n                  );\n               } else {\n                  cb({\n                     path: path,\n                     request: response.request,\n                     error: response.status\n                  });\n               }\n            });\n      };\n\n      var _requestAllPages = Github._requestAllPages = function _requestAllPages(path, cb) {\n         var results = [];\n\n         (function iterate() {\n            _request('GET', path, null, function (err, res, xhr) {\n               if (err) {\n                  return cb(err);\n               }\n\n               if (!(res instanceof Array)) {\n                  res = [res];\n               }\n\n               results.push.apply(results, res);\n\n               var next = (xhr.getResponseHeader('link') || '')\n                  .split(',')\n                  .filter(function(link) {\n                     return /rel=\"next\"/.test(link);\n                  })\n                  .map(function(link) {\n                     return (/<(.*)>/.exec(link) || [])[1];\n                  })\n                  .pop();\n\n               if (!next) {\n                  cb(err, results, xhr);\n               } else {\n                  path = next;\n                  iterate();\n               }\n            });\n         })();\n      };\n\n      // User API\n      // =======\n\n      Github.User = function () {\n         this.repos = function (options, cb) {\n            if (typeof options === 'function') {\n               cb = options;\n               options = {};\n            }\n\n            options = options || {};\n\n            var url = '/user/repos';\n            var params = [];\n\n            params.push('type=' + encodeURIComponent(options.type || 'all'));\n            params.push('sort=' + encodeURIComponent(options.sort || 'updated'));\n            params.push('per_page=' + encodeURIComponent(options.per_page || '100')); // jscs:ignore\n\n            if (options.page) {\n               params.push('page=' + encodeURIComponent(options.page));\n            }\n\n            url += '?' + params.join('&');\n\n            _requestAllPages(url, cb);\n         };\n\n         // List user organizations\n         // -------\n\n         this.orgs = function (cb) {\n            _request('GET', '/user/orgs', null, cb);\n         };\n\n         // List authenticated user's gists\n         // -------\n\n         this.gists = function (cb) {\n            _request('GET', '/gists', null, cb);\n         };\n\n         // List authenticated user's unread notifications\n         // -------\n\n         this.notifications = function (options, cb) {\n            if (typeof options === 'function') {\n               cb = options;\n               options = {};\n            }\n\n            options = options || {};\n            var url = '/notifications';\n            var params = [];\n\n            if (options.all) {\n               params.push('all=true');\n            }\n\n            if (options.participating) {\n               params.push('participating=true');\n            }\n\n            if (options.since) {\n               var since = options.since;\n\n               if (since.constructor === Date) {\n                  since = since.toISOString();\n               }\n\n               params.push('since=' + encodeURIComponent(since));\n            }\n\n            if (options.before) {\n               var before = options.before;\n\n               if (before.constructor === Date) {\n                  before = before.toISOString();\n               }\n\n               params.push('before=' + encodeURIComponent(before));\n            }\n\n            if (options.page) {\n               params.push('page=' + encodeURIComponent(options.page));\n            }\n\n            if (params.length > 0) {\n               url += '?' + params.join('&');\n            }\n\n            _request('GET', url, null, cb);\n         };\n\n         // Show user information\n         // -------\n\n         this.show = function (username, cb) {\n            var command = username ? '/users/' + username : '/user';\n\n            _request('GET', command, null, cb);\n         };\n\n         // List user repositories\n         // -------\n\n         this.userRepos = function (username, options, cb) {\n            if (typeof options === 'function') {\n               cb = options;\n               options = {};\n            }\n\n            var url = '/users/' + username + '/repos';\n            var params = [];\n\n            params.push('type=' + encodeURIComponent(options.type || 'all'));\n            params.push('sort=' + encodeURIComponent(options.sort || 'updated'));\n            params.push('per_page=' + encodeURIComponent(options.per_page || '100')); // jscs:ignore\n\n            if (options.page) {\n               params.push('page=' + encodeURIComponent(options.page));\n            }\n\n            url += '?' + params.join('&');\n\n            _requestAllPages(url, cb);\n         };\n\n         // List user starred repositories\n         // -------\n\n         this.userStarred = function (username, cb) {\n            // Github does not always honor the 1000 limit so we want to iterate over the data set.\n            _requestAllPages('/users/' + username + '/starred?type=all&per_page=100', cb);\n         };\n\n         // List a user's gists\n         // -------\n\n         this.userGists = function (username, cb) {\n            _request('GET', '/users/' + username + '/gists', null, cb);\n         };\n\n         // List organization repositories\n         // -------\n\n         this.orgRepos = function (orgname, cb) {\n            // Github does not always honor the 1000 limit so we want to iterate over the data set.\n            _requestAllPages('/orgs/' + orgname + '/repos?type=all&&page_num=1000&sort=updated&direction=desc', cb);\n         };\n\n         // Follow user\n         // -------\n\n         this.follow = function (username, cb) {\n            _request('PUT', '/user/following/' + username, null, cb);\n         };\n\n         // Unfollow user\n         // -------\n\n         this.unfollow = function (username, cb) {\n            _request('DELETE', '/user/following/' + username, null, cb);\n         };\n\n         // Create a repo\n         // -------\n         this.createRepo = function (options, cb) {\n            _request('POST', '/user/repos', options, cb);\n         };\n      };\n\n      Github.Organization = function () {\n         // Create an Organization repo\n         // -------\n         this.createRepo = function (options, cb) {\n            _request('POST', '/orgs/' + options.orgname + '/repos', options, cb);\n         };\n      };\n\n      // Repository API\n      // =======\n\n      Github.Repository = function (options) {\n         var repo = options.name;\n         var user = options.user;\n         var fullname = options.fullname;\n\n         var that = this;\n         var repoPath;\n\n         if (fullname) {\n            repoPath = '/repos/' + fullname;\n         } else {\n            repoPath = '/repos/' + user + '/' + repo;\n         }\n\n         var currentTree = {\n            branch: null,\n            sha: null\n         };\n\n         // Uses the cache if branch has not been changed\n         // -------\n\n         function updateTree(branch, cb) {\n            if (branch === currentTree.branch && currentTree.sha) {\n               return cb(null, currentTree.sha);\n            }\n\n            that.getRef('heads/' + branch, function (err, sha) {\n               currentTree.branch = branch;\n               currentTree.sha = sha;\n               cb(err, sha);\n            });\n         }\n\n         // Get a particular reference\n         // -------\n\n         this.getRef = function (ref, cb) {\n            _request('GET', repoPath + '/git/refs/' + ref, null, function (err, res, xhr) {\n               if (err) {\n                  return cb(err);\n               }\n\n               cb(null, res.object.sha, xhr);\n            });\n         };\n\n         // Create a new reference\n         // --------\n         //\n         // {\n         //   \"ref\": \"refs/heads/my-new-branch-name\",\n         //   \"sha\": \"827efc6d56897b048c772eb4087f854f46256132\"\n         // }\n\n         this.createRef = function (options, cb) {\n            _request('POST', repoPath + '/git/refs', options, cb);\n         };\n\n         // Delete a reference\n         // --------\n         //\n         // Repo.deleteRef('heads/gh-pages')\n         // repo.deleteRef('tags/v1.0')\n\n         this.deleteRef = function (ref, cb) {\n            _request('DELETE', repoPath + '/git/refs/' + ref, options, cb);\n         };\n\n         // Delete a repo\n         // --------\n\n         this.deleteRepo = function (cb) {\n            _request('DELETE', repoPath, options, cb);\n         };\n\n         // List all tags of a repository\n         // -------\n\n         this.listTags = function (cb) {\n            _request('GET', repoPath + '/tags', null, cb);\n         };\n\n         // List all pull requests of a respository\n         // -------\n\n         this.listPulls = function (options, cb) {\n            options = options || {};\n            var url = repoPath + '/pulls';\n            var params = [];\n\n            if (typeof options === 'string') {\n               // Backward compatibility\n               params.push('state=' + options);\n            } else {\n               if (options.state) {\n                  params.push('state=' + encodeURIComponent(options.state));\n               }\n\n               if (options.head) {\n                  params.push('head=' + encodeURIComponent(options.head));\n               }\n\n               if (options.base) {\n                  params.push('base=' + encodeURIComponent(options.base));\n               }\n\n               if (options.sort) {\n                  params.push('sort=' + encodeURIComponent(options.sort));\n               }\n\n               if (options.direction) {\n                  params.push('direction=' + encodeURIComponent(options.direction));\n               }\n\n               if (options.page) {\n                  params.push('page=' + options.page);\n               }\n\n               if (options.per_page) {\n                  params.push('per_page=' + options.per_page);\n               }\n            }\n\n            if (params.length > 0) {\n               url += '?' + params.join('&');\n            }\n\n            _request('GET', url, null, cb);\n         };\n\n         // Gets details for a specific pull request\n         // -------\n\n         this.getPull = function (number, cb) {\n            _request('GET', repoPath + '/pulls/' + number, null, cb);\n         };\n\n         // Retrieve the changes made between base and head\n         // -------\n\n         this.compare = function (base, head, cb) {\n            _request('GET', repoPath + '/compare/' + base + '...' + head, null, cb);\n         };\n\n         // List all branches of a repository\n         // -------\n\n         this.listBranches = function (cb) {\n            _request('GET', repoPath + '/git/refs/heads', null, function (err, heads, xhr) {\n               if (err) {\n                  return cb(err);\n               }\n\n               heads = heads.map(function (head) {\n                  return head.ref.replace(/^refs\\/heads\\//, '');\n               });\n\n               cb(null, heads, xhr);\n            });\n         };\n\n         // Retrieve the contents of a blob\n         // -------\n\n         this.getBlob = function (sha, cb) {\n            _request('GET', repoPath + '/git/blobs/' + sha, null, cb, 'raw');\n         };\n\n         // For a given file path, get the corresponding sha (blob for files, tree for dirs)\n         // -------\n\n         this.getCommit = function (branch, sha, cb) {\n            _request('GET', repoPath + '/git/commits/' + sha, null, cb);\n         };\n\n         // For a given file path, get the corresponding sha (blob for files, tree for dirs)\n         // -------\n\n         this.getSha = function (branch, path, cb) {\n            if (!path || path === '') {\n               return that.getRef('heads/' + branch, cb);\n            }\n\n            _request('GET', repoPath + '/contents/' + path + (branch ? '?ref=' + branch : ''),\n               null, function (err, pathContent, xhr) {\n                  if (err) {\n                     return cb(err);\n                  }\n\n                  cb(null, pathContent.sha, xhr);\n               });\n         };\n\n         // Get the statuses for a particular SHA\n         // -------\n\n         this.getStatuses = function (sha, cb) {\n            _request('GET', repoPath + '/statuses/' + sha, null, cb);\n         };\n\n         // Retrieve the tree a commit points to\n         // -------\n\n         this.getTree = function (tree, cb) {\n            _request('GET', repoPath + '/git/trees/' + tree, null, function (err, res, xhr) {\n               if (err) {\n                  return cb(err);\n               }\n\n               cb(null, res.tree, xhr);\n            });\n         };\n\n         // Post a new blob object, getting a blob SHA back\n         // -------\n\n         this.postBlob = function (content, cb) {\n            if (typeof content === 'string') {\n               content = {\n                  content: content,\n                  encoding: 'utf-8'\n               };\n            } else {\n               content = {\n                  content: b64encode(content),\n                  encoding: 'base64'\n               };\n            }\n\n            _request('POST', repoPath + '/git/blobs', content, function (err, res, xhr) {\n               if (err) {\n                  return cb(err);\n               }\n\n               cb(null, res.sha, xhr);\n            });\n         };\n\n         // Update an existing tree adding a new blob object getting a tree SHA back\n         // -------\n\n         this.updateTree = function (baseTree, path, blob, cb) {\n            var data = {\n               base_tree: baseTree,\n               tree: [\n                  {\n                     path: path,\n                     mode: '100644',\n                     type: 'blob',\n                     sha: blob\n                  }\n               ]\n            };\n\n            _request('POST', repoPath + '/git/trees', data, function (err, res, xhr) {\n               if (err) {\n                  return cb(err);\n               }\n\n               cb(null, res.sha, xhr);\n            });\n         };\n\n         // Post a new tree object having a file path pointer replaced\n         // with a new blob SHA getting a tree SHA back\n         // -------\n\n         this.postTree = function (tree, cb) {\n            _request('POST', repoPath + '/git/trees', {\n               tree: tree\n            }, function (err, res, xhr) {\n               if (err) {\n                  return cb(err);\n               }\n\n               cb(null, res.sha, xhr);\n            });\n         };\n\n         // Create a new commit object with the current commit SHA as the parent\n         // and the new tree SHA, getting a commit SHA back\n         // -------\n\n         this.commit = function (parent, tree, message, cb) {\n            var user = new Github.User();\n\n            user.show(null, function (err, userData) {\n               if (err) {\n                  return cb(err);\n               }\n\n               var data = {\n                  message: message,\n                  author: {\n                     name: options.user,\n                     email: userData.email\n                  },\n                  parents: [\n                     parent\n                  ],\n                  tree: tree\n               };\n\n               _request('POST', repoPath + '/git/commits', data, function (err, res, xhr) {\n                  if (err) {\n                     return cb(err);\n                  }\n\n                  currentTree.sha = res.sha; // Update latest commit\n\n                  cb(null, res.sha, xhr);\n               });\n            });\n         };\n\n         // Update the reference of your head to point to the new commit SHA\n         // -------\n\n         this.updateHead = function (head, commit, cb) {\n            _request('PATCH', repoPath + '/git/refs/heads/' + head, {\n               sha: commit\n            }, cb);\n         };\n\n         // Show repository information\n         // -------\n\n         this.show = function (cb) {\n            _request('GET', repoPath, null, cb);\n         };\n\n         // Show repository contributors\n         // -------\n\n         this.contributors = function (cb, retry) {\n            retry = retry || 1000;\n            var that = this;\n\n            _request('GET', repoPath + '/stats/contributors', null, function (err, data, xhr) {\n               if (err) {\n                  return cb(err);\n               }\n\n               if (xhr.status === 202) {\n                  setTimeout(\n                     function () {\n                        that.contributors(cb, retry);\n                     },\n                     retry\n                  );\n               } else {\n                  cb(err, data, xhr);\n               }\n            });\n         };\n\n         // Show repository collaborators\n         // -------\n\n         this.collaborators = function (cb) {\n            _request('GET', repoPath + '/collaborators', null, cb);\n         };\n\n         // Check whether user is a collaborator on the repository\n         // -------\n\n         this.isCollaborator = function (username, cb) {\n            _request('GET', repoPath + '/collaborators/' + username, null, cb);\n         };\n\n         // Get contents\n         // --------\n\n         this.contents = function (ref, path, cb) {\n            path = encodeURI(path);\n            _request('GET', repoPath + '/contents' + (path ? '/' + path : ''), {\n               ref: ref\n            }, cb);\n         };\n\n         // Fork repository\n         // -------\n\n         this.fork = function (cb) {\n            _request('POST', repoPath + '/forks', null, cb);\n         };\n\n         // List forks\n         // --------\n\n         this.listForks = function (cb) {\n            _request('GET', repoPath + '/forks', null, cb);\n         };\n\n         // Branch repository\n         // --------\n\n         this.branch = function (oldBranch, newBranch, cb) {\n            if (arguments.length === 2 && typeof arguments[1] === 'function') {\n               cb = newBranch;\n               newBranch = oldBranch;\n               oldBranch = 'master';\n            }\n\n            this.getRef('heads/' + oldBranch, function (err, ref) {\n               if (err && cb) {\n                  return cb(err);\n               }\n\n               that.createRef({\n                  ref: 'refs/heads/' + newBranch,\n                  sha: ref\n               }, cb);\n            });\n         };\n\n         // Create pull request\n         // --------\n\n         this.createPullRequest = function (options, cb) {\n            _request('POST', repoPath + '/pulls', options, cb);\n         };\n\n         // List hooks\n         // --------\n\n         this.listHooks = function (cb) {\n            _request('GET', repoPath + '/hooks', null, cb);\n         };\n\n         // Get a hook\n         // --------\n\n         this.getHook = function (id, cb) {\n            _request('GET', repoPath + '/hooks/' + id, null, cb);\n         };\n\n         // Create a hook\n         // --------\n\n         this.createHook = function (options, cb) {\n            _request('POST', repoPath + '/hooks', options, cb);\n         };\n\n         // Edit a hook\n         // --------\n\n         this.editHook = function (id, options, cb) {\n            _request('PATCH', repoPath + '/hooks/' + id, options, cb);\n         };\n\n         // Delete a hook\n         // --------\n\n         this.deleteHook = function (id, cb) {\n            _request('DELETE', repoPath + '/hooks/' + id, null, cb);\n         };\n\n         // Read file at given path\n         // -------\n\n         this.read = function (branch, path, cb) {\n            _request('GET', repoPath + '/contents/' + encodeURI(path) + (branch ? '?ref=' + branch : ''),\n               null, cb, true);\n         };\n\n         // Remove a file\n         // -------\n\n         this.remove = function (branch, path, cb) {\n            that.getSha(branch, path, function (err, sha) {\n               if (err) {\n                  return cb(err);\n               }\n\n               _request('DELETE', repoPath + '/contents/' + path, {\n                  message: path + ' is removed',\n                  sha: sha,\n                  branch: branch\n               }, cb);\n            });\n         };\n\n         // Alias for repo.remove for backwards comapt.\n         // -------\n         this.delete = this.remove;\n\n         // Move a file to a new location\n         // -------\n\n         this.move = function (branch, path, newPath, cb) {\n            updateTree(branch, function (err, latestCommit) {\n               that.getTree(latestCommit + '?recursive=true', function (err, tree) {\n                  // Update Tree\n                  tree.forEach(function (ref) {\n                     if (ref.path === path) {\n                        ref.path = newPath;\n                     }\n\n                     if (ref.type === 'tree') {\n                        delete ref.sha;\n                     }\n                  });\n\n                  that.postTree(tree, function (err, rootTree) {\n                     that.commit(latestCommit, rootTree, 'Deleted ' + path, function (err, commit) {\n                        that.updateHead(branch, commit, cb);\n                     });\n                  });\n               });\n            });\n         };\n\n         // Write file contents to a given branch and path\n         // -------\n\n         this.write = function (branch, path, content, message, options, cb) {\n            if (typeof options === 'function') {\n               cb = options;\n               options = {};\n            }\n\n            that.getSha(branch, encodeURI(path), function (err, sha) {\n               var writeOptions = {\n                  message: message,\n                  content: typeof options.encode === 'undefined' || options.encode ? b64encode(content) : content,\n                  branch: branch,\n                  committer: options && options.committer ? options.committer : undefined,\n                  author: options && options.author ? options.author : undefined\n               };\n\n               // If no error, we set the sha to overwrite an existing file\n               if (!(err && err.error !== 404)) {\n                  writeOptions.sha = sha;\n               }\n\n               _request('PUT', repoPath + '/contents/' + encodeURI(path), writeOptions, cb);\n            });\n         };\n\n         // List commits on a repository. Takes an object of optional parameters:\n         // sha: SHA or branch to start listing commits from\n         // path: Only commits containing this file path will be returned\n         // author: Only commits by this author will be returned. Its value can be the GitHub login or the email address\n         // since: ISO 8601 date - only commits after this date will be returned\n         // until: ISO 8601 date - only commits before this date will be returned\n         // -------\n\n         this.getCommits = function (options, cb) {\n            options = options || {};\n            var url = repoPath + '/commits';\n            var params = [];\n\n            if (options.sha) {\n               params.push('sha=' + encodeURIComponent(options.sha));\n            }\n\n            if (options.path) {\n               params.push('path=' + encodeURIComponent(options.path));\n            }\n\n            if (options.author) {\n               params.push('author=' + encodeURIComponent(options.author));\n            }\n\n            if (options.since) {\n               var since = options.since;\n\n               if (since.constructor === Date) {\n                  since = since.toISOString();\n               }\n\n               params.push('since=' + encodeURIComponent(since));\n            }\n\n            if (options.until) {\n               var until = options.until;\n\n               if (until.constructor === Date) {\n                  until = until.toISOString();\n               }\n\n               params.push('until=' + encodeURIComponent(until));\n            }\n\n            if (options.page) {\n               params.push('page=' + options.page);\n            }\n\n            if (options.perpage) {\n               params.push('per_page=' + options.perpage);\n            }\n\n            if (params.length > 0) {\n               url += '?' + params.join('&');\n            }\n\n            _request('GET', url, null, cb);\n         };\n\n         // Check if a repository is starred.\n         // --------\n\n         this.isStarred = function(owner, repository, cb) {\n            _request('GET', '/user/starred/' + owner + '/' + repository, null, cb);\n         };\n\n         // Star a repository.\n         // --------\n\n         this.star = function(owner, repository, cb) {\n            _request('PUT', '/user/starred/' + owner + '/' + repository, null, cb);\n         };\n\n         // Unstar a repository.\n         // --------\n\n         this.unstar = function(owner, repository, cb) {\n            _request('DELETE', '/user/starred/' + owner + '/' + repository, null, cb);\n         };\n\n         // Create a new release\n         // --------\n\n         this.createRelease = function(options, cb) {\n            _request('POST', repoPath + '/releases', options, cb);\n         };\n\n         // Edit a release\n         // --------\n\n         this.editRelease = function(id, options, cb) {\n            _request('PATCH', repoPath + '/releases/' + id, options, cb);\n         };\n\n         // Get a single release\n         // --------\n\n         this.getRelease = function(id, cb) {\n            _request('GET', repoPath + '/releases/' + id, null, cb);\n         };\n\n         // Remove a release\n         // --------\n\n         this.deleteRelease = function(id, cb) {\n            _request('DELETE', repoPath + '/releases/' + id, null, cb);\n         };\n      };\n\n      // Gists API\n      // =======\n\n      Github.Gist = function (options) {\n         var id = options.id;\n         var gistPath = '/gists/' + id;\n\n         // Read the gist\n         // --------\n\n         this.read = function (cb) {\n            _request('GET', gistPath, null, cb);\n         };\n\n         // Create the gist\n         // --------\n         // {\n         //  \"description\": \"the description for this gist\",\n         //    \"public\": true,\n         //    \"files\": {\n         //      \"file1.txt\": {\n         //        \"content\": \"String file contents\"\n         //      }\n         //    }\n         // }\n\n         this.create = function (options, cb) {\n            _request('POST', '/gists', options, cb);\n         };\n\n         // Delete the gist\n         // --------\n\n         this.delete = function (cb) {\n            _request('DELETE', gistPath, null, cb);\n         };\n\n         // Fork a gist\n         // --------\n\n         this.fork = function (cb) {\n            _request('POST', gistPath + '/fork', null, cb);\n         };\n\n         // Update a gist with the new stuff\n         // --------\n\n         this.update = function (options, cb) {\n            _request('PATCH', gistPath, options, cb);\n         };\n\n         // Star a gist\n         // --------\n\n         this.star = function (cb) {\n            _request('PUT', gistPath + '/star', null, cb);\n         };\n\n         // Untar a gist\n         // --------\n\n         this.unstar = function (cb) {\n            _request('DELETE', gistPath + '/star', null, cb);\n         };\n\n         // Check if a gist is starred\n         // --------\n\n         this.isStarred = function (cb) {\n            _request('GET', gistPath + '/star', null, cb);\n         };\n      };\n\n      // Issues API\n      // ==========\n\n      Github.Issue = function (options) {\n         var path = '/repos/' + options.user + '/' + options.repo + '/issues';\n\n         this.create = function(options, cb) {\n            _request('POST', path, options, cb);\n         };\n\n         this.list = function (options, cb) {\n            var query = [];\n\n            for(var key in options) {\n               if (options.hasOwnProperty(key)) {\n                  query.push(encodeURIComponent(key) + '=' + encodeURIComponent(options[key]));\n               }\n            }\n\n            _requestAllPages(path + '?' + query.join('&'), cb);\n         };\n\n         this.comment = function (issue, comment, cb) {\n            _request('POST', issue.comments_url, {\n               body: comment\n            }, cb);\n         };\n\n         this.edit = function (issue, options, cb) {\n            _request('PATCH', path + '/' + issue, options, cb);\n         };\n\n         this.get = function (issue, cb) {\n            _request('GET', path + '/' + issue, null, cb);\n         };\n      };\n\n      // Search API\n      // ==========\n\n      Github.Search = function (options) {\n         var path = '/search/';\n         var query = '?q=' + options.query;\n\n         this.repositories = function (options, cb) {\n            _request('GET', path + 'repositories' + query, options, cb);\n         };\n\n         this.code = function (options, cb) {\n            _request('GET', path + 'code' + query, options, cb);\n         };\n\n         this.issues = function (options, cb) {\n            _request('GET', path + 'issues' + query, options, cb);\n         };\n\n         this.users = function (options, cb) {\n            _request('GET', path + 'users' + query, options, cb);\n         };\n      };\n\n      // Rate Limit API\n      // ==========\n\n      Github.RateLimit = function() {\n         this.getRateLimit = function(cb) {\n            _request('GET', '/rate_limit', null, cb);\n         };\n      };\n\n      return Github;\n   };\n\n   // Top Level API\n   // -------\n\n   Github.getIssues = function (user, repo) {\n      return new Github.Issue({\n         user: user,\n         repo: repo\n      });\n   };\n\n   Github.getRepo = function (user, repo) {\n      if (!repo) {\n         return new Github.Repository({\n            fullname: user\n         });\n      } else {\n         return new Github.Repository({\n            user: user,\n            name: repo\n         });\n      }\n   };\n\n   Github.getUser = function () {\n      return new Github.User();\n   };\n\n   Github.getOrg = function () {\n      return new Github.Organization();\n   };\n\n   Github.getGist = function (id) {\n      return new Github.Gist({\n         id: id\n      });\n   };\n\n   Github.getSearch = function (query) {\n      return new Github.Search({\n         query: query\n      });\n   };\n\n   Github.getRateLimit = function() {\n      return new Github.RateLimit();\n   };\n\n   return Github;\n}));"]}