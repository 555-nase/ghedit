{"version":3,"file":"vs/languages/sass/common/parser/sassScanner.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/languages/sass/common/parser/sassScanner.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport scanner = require('vs/languages/css/common/parser/cssScanner');\n\nconst _FSL = '/'.charCodeAt(0);\nconst _NWL = '\\n'.charCodeAt(0);\nconst _CAR = '\\r'.charCodeAt(0);\nconst _LFD = '\\f'.charCodeAt(0);\n\nconst _DLR = '$'.charCodeAt(0);\nconst _HSH = '#'.charCodeAt(0);\nconst _CUL = '{'.charCodeAt(0);\nconst _EQS = '='.charCodeAt(0);\nconst _BNG = '!'.charCodeAt(0);\nconst _LAN = '<'.charCodeAt(0);\nconst _RAN = '>'.charCodeAt(0);\nconst _DOT = '.'.charCodeAt(0);\n\nlet customTokenValue = scanner.TokenType.CustomToken;\n\nexport const VariableName = customTokenValue++;\nexport const InterpolationFunction: scanner.TokenType = customTokenValue++;\nexport const Default: scanner.TokenType = customTokenValue++;\nexport const EqualsOperator: scanner.TokenType = customTokenValue++;\nexport const NotEqualsOperator: scanner.TokenType = customTokenValue++;\nexport const GreaterEqualsOperator: scanner.TokenType = customTokenValue++;\nexport const SmallerEqualsOperator: scanner.TokenType = customTokenValue++;\nexport const Ellipsis: scanner.TokenType = customTokenValue++;\n\nexport class SassScanner extends scanner.Scanner {\n\n\tpublic scan(): scanner.IToken {\n\n\t\t// processes all whitespaces and comments\n\t\tconst triviaToken = this.trivia();\n\t\tif (triviaToken !== null) {\n\t\t\treturn triviaToken;\n\t\t}\n\n\t\tconst offset = this.stream.pos();\n\n\t\t// sass variable\n\t\tif (this.stream.advanceIfChar(_DLR)) {\n\t\t\tconst content = [ '$' ];\n\t\t\tif (this.ident(content)) {\n\t\t\t\treturn this.finishToken(offset, VariableName, content.join(''));\n\t\t\t} else {\n\t\t\t\tthis.stream.goBackTo(offset);\n\t\t\t}\n\t\t}\n\n\t\t// Sass: interpolation function #{..})\n\t\tif (this.stream.advanceIfChars([_HSH, _CUL])) {\n\t\t\treturn this.finishToken(offset, InterpolationFunction);\n\t\t}\n\n\t\t// operator ==\n\t\tif (this.stream.advanceIfChars([_EQS, _EQS])) {\n\t\t\treturn this.finishToken(offset, EqualsOperator);\n\t\t}\n\n\t\t// operator !=\n\t\tif (this.stream.advanceIfChars([_BNG, _EQS])) {\n\t\t\treturn this.finishToken(offset, NotEqualsOperator);\n\t\t}\n\n\t\t// operators <, <=\n\t\tif (this.stream.advanceIfChar(_LAN)) {\n\t\t\tif (this.stream.advanceIfChar(_EQS)) {\n\t\t\t\treturn this.finishToken(offset, SmallerEqualsOperator);\n\t\t\t}\n\t\t\treturn this.finishToken(offset, scanner.TokenType.Delim);\n\t\t}\n\n\t\t// ooperators >, >=\n\t\tif (this.stream.advanceIfChar(_RAN)) {\n\t\t\tif (this.stream.advanceIfChar(_EQS)) {\n\t\t\t\treturn this.finishToken(offset, GreaterEqualsOperator);\n\t\t\t}\n\t\t\treturn this.finishToken(offset, scanner.TokenType.Delim);\n\t\t}\n\n\t\t// ellipis\n\t\tif (this.stream.advanceIfChars([_DOT, _DOT, _DOT])) {\n\t\t\treturn this.finishToken(offset, Ellipsis);\n\t\t}\n\n\t\treturn super.scan();\n\t}\n\n\tprotected comment():boolean {\n\t\tif (super.comment()) {\n\t\t\treturn true;\n\t\t}\n\t\tif (this.stream.advanceIfChars([_FSL, _FSL])) {\n\t\t\tthis.stream.advanceWhileChar((ch:number) => {\n\t\t\t\tswitch(ch) {\n\t\t\t\t\tcase _NWL:\n\t\t\t\t\tcase _CAR:\n\t\t\t\t\tcase _LFD:\n\t\t\t\t\t\treturn false;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n}"]}