{"version":3,"sources":["vs/languages/sass/common/services/intelliSense.ts"],"names":[],"mappings":";;;;;;IAAA;;;oGAGgG;IAChG,YAAY,CAAC;IAQb;QAAsC,oCAA+B;QAwGpE;YACC,kBAAM,GAAG,CAAC,CAAC;QACZ,CAAC;QAEO,kDAAuB,GAA/B,UAAgC,SAA2C,EAAE,MAA2B;YACvG,IAAI,eAAe,GAAG,UAAC,KAAa,EAAE,EAAU,IAAK,OAAA,EAAE,GAAG,MAAM,GAAG,CAAC,gBAAgB,CAAC,gBAAgB,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC,GAAG,IAAI,EAAlE,CAAkE,CAAC;YACxH,SAAS,CAAC,OAAO,CAAC,UAAC,CAAC;gBACnB,MAAM,CAAC,IAAI,CAAC;oBACX,KAAK,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;oBAC5C,SAAS,EAAE,CAAC,CAAC,IAAI;oBACjB,kBAAkB,EAAE,CAAC,CAAC,IAAI;oBAC1B,WAAW,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,gBAAgB,EAAE,eAAe,CAAC;oBAC9D,IAAI,EAAE,UAAU;iBAChB,CAAC,CAAC;YACJ,CAAC,CAAC,CAAC;YACH,MAAM,CAAC,MAAM,CAAC;QACf,CAAC;QAEM,oDAAyB,GAAhC,UAAiC,OAAsB,EAAE,MAA0B;YAClF,IAAI,CAAC,uBAAuB,CAAC,gBAAgB,CAAC,aAAa,EAAE,MAAM,CAAC,CAAC;YACrE,MAAM,CAAC,gBAAK,CAAC,yBAAyB,YAAC,OAAO,EAAE,MAAM,CAAC,CAAC;QACzD,CAAC;QAEM,2CAAgB,GAAvB,UAAwB,MAA0B;YACjD,IAAI,CAAC,uBAAuB,CAAC,gBAAgB,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC;YACpE,MAAM,CAAC,gBAAK,CAAC,gBAAgB,YAAC,MAAM,CAAC,CAAC;QACvC,CAAC;QAES,4CAAiB,GAA3B,UAA4B,KAA2B,EAAE,MAA2B;YACnF,IAAI,CAAC,uBAAuB,CAAC,gBAAgB,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;YACtE,MAAM,CAAC,gBAAK,CAAC,iBAAiB,YAAC,KAAK,EAAE,MAAM,CAAC,CAAC;QAC/C,CAAC;QAEM,+DAAoC,GAA3C,UAA4C,MAA2B;YACtE,IAAI,CAAC,yBAAyB,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;YAC7C,MAAM,CAAC,gBAAK,CAAC,oCAAoC,YAAC,MAAM,CAAC,CAAC;QAC3D,CAAC;QA1Ic,iCAAgB,GAA+B;YAC7D,MAAM,EAAE,GAAG;YACX,QAAQ,EAAE,GAAG;YACb,OAAO,EAAE,GAAG;YACZ,QAAQ,EAAE,KAAK;YACf,QAAQ,EAAE,QAAQ;YAClB,SAAS,EAAE,KAAK;YAChB,MAAM,EAAE,GAAG;YACX,aAAa,EAAE,IAAI;YACnB,YAAY,EAAE,IAAI;YAClB,UAAU,EAAE,GAAG;YACf,SAAS,EAAE,GAAG;YACd,SAAS,EAAE,IAAI;YACf,YAAY,EAAE,KAAK;YACnB,SAAS,EAAE,GAAG;YACd,QAAQ,EAAE,GAAG;SACb,CAAC;QAEa,+BAAc,GAAG;YAC/B,EAAE,IAAI,EAAE,aAAa,EAAE,IAAI,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAkB,EAAE,IAAoC,CAAC,EAAE;YACrG,EAAE,IAAI,EAAE,eAAe,EAAE,IAAI,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAoB,EAAE,IAAsC,CAAC,EAAE;YAC3G,EAAE,IAAI,EAAE,cAAc,EAAE,IAAI,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAmB,EAAE,IAAqC,CAAC,EAAE;YACxG,EAAE,IAAI,EAAE,gCAAgC,EAAE,IAAI,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAkB,EAAE,IAA4B,CAAC,EAAE;YAChH,EAAE,IAAI,EAAE,aAAa,EAAE,IAAI,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAkB,EAAE,IAAoC,CAAC,EAAE;YACrG,EAAE,IAAI,EAAE,oBAAoB,EAAE,IAAI,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAyB,EAAE,IAA2C,CAAC,EAAE;YAC1H,EAAE,IAAI,EAAE,mBAAmB,EAAE,IAAI,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAwB,EAAE,IAA0C,CAAC,EAAE;YACvH,EAAE,IAAI,EAAE,8BAA8B,EAAE,IAAI,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAyB,EAAE,IAA6B,CAAC,EAAE;YACtH,EAAE,IAAI,EAAE,0BAA0B,EAAE,IAAI,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAsB,EAAE,IAAwB,CAAC,EAAE;YAC1G,EAAE,IAAI,EAAE,yBAAyB,EAAE,IAAI,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAqB,EAAE,IAAuB,CAAC,EAAE;YACvG,EAAE,IAAI,EAAE,2BAA2B,EAAE,IAAI,EAAE,GAAG,CAAC,QAAQ,CAAC,EAAuB,EAAE,IAA+B,CAAC,EAAE;YACnH,EAAE,IAAI,EAAE,6BAA6B,EAAE,IAAI,EAAE,GAAG,CAAC,QAAQ,CAAC,EAAyB,EAAE,IAA+B,CAAC,EAAE;YACvH,EAAE,IAAI,EAAE,mBAAmB,EAAE,IAAI,EAAE,GAAG,CAAC,QAAQ,CAAC,EAAwB,EAAE,IAAgC,CAAC,EAAE;YAC7G,EAAE,IAAI,EAAE,oBAAoB,EAAE,IAAI,EAAE,GAAG,CAAC,QAAQ,CAAC,EAAyB,EAAE,IAAoC,CAAC,EAAE;YACnH,EAAE,IAAI,EAAE,gBAAgB,EAAE,IAAI,EAAE,GAAG,CAAC,QAAQ,CAAC,EAAqB,EAAE,IAAiC,CAAC,EAAE;YACxG,EAAE,IAAI,EAAE,eAAe,EAAE,IAAI,EAAE,GAAG,CAAC,QAAQ,CAAC,EAAoB,EAAE,IAAwC,CAAC,EAAE;YAC7G,EAAE,IAAI,EAAE,iBAAiB,EAAE,IAAI,EAAE,gDAAgD,EAAE;YACnF,EAAE,IAAI,EAAE,sBAAsB,EAAE,IAAI,EAAE,GAAG,CAAC,QAAQ,CAAC,EAAmB,EAAE,IAA0C,CAAC,EAAE;YACrH,EAAE,IAAI,EAAE,0BAA0B,EAAE,IAAI,EAAE,GAAG,CAAC,QAAQ,CAAC,EAAsB,EAAE,IAA4B,CAAC,EAAE;YAC9G,EAAE,IAAI,EAAE,0BAA0B,EAAE,IAAI,EAAE,GAAG,CAAC,QAAQ,CAAC,EAAsB,EAAE,IAA4B,CAAC,EAAE;YAC9G,EAAE,IAAI,EAAE,6DAA6D,EAAE,IAAI,EAAE,GAAG,CAAC,QAAQ,CAAC,EAA6B,EAAE,IAAiC,CAAC,EAAE;YAC7J,EAAE,IAAI,EAAE,gGAAgG,EAAE,IAAI,EAAE,GAAG,CAAC,QAAQ,CAAC,EAA2B,EAAE,IAA2D,CAAC,EAAE;YACxN,EAAE,IAAI,EAAE,uFAAuF,EAAE,IAAI,EAAE,GAAG,CAAC,QAAQ,CAAC,EAA0B,EAAE,IAAmD,CAAC,EAAE;YACtM,EAAE,IAAI,EAAE,gGAAgG,EAAE,IAAI,EAAE,GAAG,CAAC,QAAQ,CAAC,EAA2B,EAAE,IAA4C,CAAC,EAAE;YACzM,EAAE,IAAI,EAAE,oBAAoB,EAAE,IAAI,EAAE,GAAG,CAAC,QAAQ,CAAC,EAAyB,EAAE,IAA4D,CAAC,EAAE;SAC3I,CAAC;QAEa,8BAAa,GAAG;YAC9B,EAAE,IAAI,EAAE,4BAA4B,EAAE,IAAI,EAAE,GAAG,CAAC,QAAQ,CAAC,EAA4B,EAAE,IAAiF,CAAC,EAAE;YAC3K,EAAE,IAAI,EAAE,8BAA8B,EAAE,IAAI,EAAE,GAAG,CAAC,QAAQ,CAAC,EAA8B,EAAE,IAA6D,CAAC,EAAE;YAC3J,EAAE,IAAI,EAAE,kDAAkD,EAAE,IAAI,EAAE,GAAG,CAAC,QAAQ,CAAC,EAA8B,EAAE,IAAoD,CAAC,EAAE;YACtK,EAAE,IAAI,EAAE,sDAAsD,EAAE,IAAI,EAAE,GAAG,CAAC,QAAQ,CAAC,EAA+B,EAAE,IAAwD,CAAC,EAAE;YAC/K,EAAE,IAAI,EAAE,wCAAwC,EAAE,IAAI,EAAE,GAAG,CAAC,QAAQ,CAAC,EAA6B,EAAE,IAAoF,CAAC,EAAE;YAC3L,EAAE,IAAI,EAAE,gCAAgC,EAAE,IAAI,EAAE,GAAG,CAAC,QAAQ,CAAC,EAA+B,EAAE,IAA+E,CAAC,EAAE;YAChL,EAAE,IAAI,EAAE,6BAA6B,EAAE,IAAI,EAAE,GAAG,CAAC,QAAQ,CAAC,EAA+B,EAAE,IAAiE,CAAC,EAAE;YAC/J,EAAE,IAAI,EAAE,2BAA2B,EAAE,IAAI,EAAE,GAAG,CAAC,QAAQ,CAAC,EAA6B,EAAE,IAAkD,CAAC,EAAE;SAC5I,CAAC;QAEa,6BAAY,GAAG;YAC7B,EAAE,IAAI,EAAE,kBAAkB,EAAE,IAAI,EAAE,GAAG,CAAC,QAAQ,CAAC,EAAsB,EAAE,IAA+B,CAAC,EAAE;YACzG,EAAE,IAAI,EAAE,gBAAgB,EAAE,IAAI,EAAE,GAAG,CAAC,QAAQ,CAAC,EAAoB,EAAE,IAA0B,CAAC,EAAE;YAChG,EAAE,IAAI,EAAE,qBAAqB,EAAE,IAAI,EAAE,GAAG,CAAC,QAAQ,CAAC,EAAyB,EAAE,IAA+C,CAAC,EAAE;YAC/H,EAAE,IAAI,EAAE,sCAAsC,EAAE,IAAI,EAAE,GAAG,CAAC,QAAQ,CAAC,EAAyB,EAAE,IAAyC,CAAC,EAAE;YAC1I,EAAE,IAAI,EAAE,gCAAgC,EAAE,IAAI,EAAE,GAAG,CAAC,QAAQ,CAAC,EAAwB,EAAE,IAAoE,CAAC,EAAE;YAC9J,EAAE,IAAI,EAAE,0CAA0C,EAAE,IAAI,EAAE,GAAG,CAAC,QAAQ,CAAC,EAAwB,EAAE,IAAoC,CAAC,EAAE;YACxI,EAAE,IAAI,EAAE,wBAAwB,EAAE,IAAI,EAAE,GAAG,CAAC,QAAQ,CAAC,EAA4B,EAAE,IAAkC,CAAC,EAAE;YACxH,EAAE,IAAI,EAAE,wBAAwB,EAAE,IAAI,EAAE,GAAG,CAAC,QAAQ,CAAC,EAA4B,EAAE,IAAkC,CAAC,EAAE;YACxH,EAAE,IAAI,EAAE,qBAAqB,EAAE,IAAI,EAAE,GAAG,CAAC,QAAQ,CAAC,EAAyB,EAAE,IAA6C,CAAC,EAAE;YAC7H,EAAE,IAAI,EAAE,gBAAgB,EAAE,IAAI,EAAE,GAAG,CAAC,QAAQ,CAAC,EAAoB,EAAE,IAA8C,CAAC,EAAE;YACpH,EAAE,IAAI,EAAE,eAAe,EAAE,IAAI,EAAE,GAAG,CAAC,QAAQ,CAAC,EAAmB,EAAE,IAA8C,CAAC,EAAE;YAClH,EAAE,IAAI,EAAE,gBAAgB,EAAE,IAAI,EAAE,GAAG,CAAC,QAAQ,CAAC,EAAoB,EAAE,IAAoD,CAAC,EAAE;YAC1H,EAAE,IAAI,EAAE,cAAc,EAAE,IAAI,EAAE,GAAG,CAAC,QAAQ,CAAC,EAAkB,EAAE,IAAyC,CAAC,EAAE;YAC3G,EAAE,IAAI,EAAE,eAAe,EAAE,IAAI,EAAE,GAAG,CAAC,QAAQ,CAAC,EAAkB,EAAE,IAAuC,CAAC,EAAE;YAC1G,EAAE,IAAI,EAAE,eAAe,EAAE,IAAI,EAAE,GAAG,CAAC,QAAQ,CAAC,EAAkB,EAAE,IAAuC,CAAC,EAAE;YAC1G,EAAE,IAAI,EAAE,kBAAkB,EAAE,IAAI,EAAE,GAAG,CAAC,QAAQ,CAAC,EAAqB,EAAE,IAA0B,CAAC,EAAE;YACnG,EAAE,IAAI,EAAE,eAAe,EAAE,IAAI,EAAE,GAAG,CAAC,QAAQ,CAAC,EAAqB,EAAE,IAA+B,CAAC,EAAE;YACrG,EAAE,IAAI,EAAE,gBAAgB,EAAE,IAAI,EAAE,GAAG,CAAC,QAAQ,CAAC,EAAkB,EAAE,IAAoC,CAAC,EAAE;YACxG,EAAE,IAAI,EAAE,4BAA4B,EAAE,IAAI,EAAE,GAAG,CAAC,QAAQ,CAAC,EAAsB,EAAE,IAAkC,CAAC,EAAE;YACtH,EAAE,IAAI,EAAE,oCAAoC,EAAE,IAAI,EAAE,GAAG,CAAC,QAAQ,CAAC,EAAmB,EAAE,IAAoC,CAAC,EAAE;YAC7H,EAAE,IAAI,EAAE,oCAAoC,EAAE,IAAI,EAAE,GAAG,CAAC,QAAQ,CAAC,EAAqB,EAAE,IAAgD,CAAC,EAAE;YAC3I,EAAE,IAAI,EAAE,aAAa,EAAE,IAAI,EAAE,GAAG,CAAC,QAAQ,CAAC,EAAkB,EAAE,IAA6D,CAAC,EAAE;YAC9H,EAAE,IAAI,EAAE,sBAAsB,EAAE,IAAI,EAAE,GAAG,CAAC,QAAQ,CAAC,EAAoB,EAAE,IAAgD,CAAC,EAAE;YAC5H,EAAE,IAAI,EAAE,uBAAuB,EAAE,IAAI,EAAE,GAAG,CAAC,QAAQ,CAAC,EAA6B,EAAE,IAAkC,CAAC,EAAE;YACxH,EAAE,IAAI,EAAE,qBAAqB,EAAE,IAAI,EAAE,GAAG,CAAC,QAAQ,CAAC,EAAsB,EAAE,IAAyD,CAAC,EAAE;YACtI,EAAE,IAAI,EAAE,yBAAyB,EAAE,IAAI,EAAE,GAAG,CAAC,QAAQ,CAAC,EAAwB,EAAE,IAA0C,CAAC,EAAE;YAC7H,EAAE,IAAI,EAAE,yBAAyB,EAAE,IAAI,EAAE,GAAG,CAAC,QAAQ,CAAC,EAAyB,EAAE,IAAsC,CAAC,EAAE;YAC1H,EAAE,IAAI,EAAE,gBAAgB,EAAE,IAAI,EAAE,GAAG,CAAC,QAAQ,CAAC,EAAuB,EAAE,IAAsC,CAAC,EAAE;YAC/G,EAAE,IAAI,EAAE,kBAAkB,EAAE,IAAI,EAAE,GAAG,CAAC,QAAQ,CAAC,EAAyB,EAAE,IAAwC,CAAC,EAAE;YACrH,EAAE,IAAI,EAAE,yBAAyB,EAAE,IAAI,EAAE,GAAG,CAAC,QAAQ,CAAC,EAA0B,EAAE,IAAgE,CAAC,EAAE;YACrJ,EAAE,IAAI,EAAE,iBAAiB,EAAE,IAAI,EAAE,GAAG,CAAC,QAAQ,CAAC,EAAuB,EAAE,IAA0E,CAAC,EAAE;YACpJ,EAAE,IAAI,EAAE,0BAA0B,EAAE,IAAI,EAAE,GAAG,CAAC,QAAQ,CAAC,EAA6B,EAAE,IAA+D,CAAC,EAAE;YACxJ,EAAE,IAAI,EAAE,wBAAwB,EAAE,IAAI,EAAE,GAAG,CAAC,QAAQ,CAAC,EAA8B,EAAE,IAA6E,CAAC,EAAE;YACrK,EAAE,IAAI,EAAE,+BAA+B,EAAE,IAAI,EAAE,GAAG,CAAC,QAAQ,CAAC,EAAqC,EAAE,IAA4E,CAAC,EAAE;YAClL,EAAE,IAAI,EAAE,wBAAwB,EAAE,IAAI,EAAE,GAAG,CAAC,QAAQ,CAAC,EAA8B,EAAE,IAAwD,CAAC,EAAE;YAChJ,EAAE,IAAI,EAAE,qBAAqB,EAAE,IAAI,EAAE,GAAG,CAAC,QAAQ,CAAC,EAA2B,EAAE,IAAqD,CAAC,EAAE;YACvI,EAAE,IAAI,EAAE,iBAAiB,EAAE,IAAI,EAAE,GAAG,CAAC,QAAQ,CAAC,EAAsB,EAAE,IAAkF,CAAC,EAAE;YAC3J,EAAE,IAAI,EAAE,iBAAiB,EAAE,IAAI,EAAE,GAAG,CAAC,QAAQ,CAAC,EAAsB,EAAE,IAA8B,CAAC,EAAE;YACvG,EAAE,IAAI,EAAE,eAAe,EAAE,IAAI,EAAE,GAAG,CAAC,QAAQ,CAAC,EAAmB,EAAE,IAA+C,CAAC,EAAE;YACnH,EAAE,IAAI,EAAE,mBAAmB,EAAE,IAAI,EAAE,GAAG,CAAC,QAAQ,CAAC,EAAuB,EAAE,IAAqC,CAAC,EAAE;YACjH,EAAE,IAAI,EAAE,gCAAgC,EAAE,IAAI,EAAE,GAAG,CAAC,QAAQ,CAAC,EAAyB,EAAE,IAAoE,CAAC,EAAE;YAC/J,EAAE,IAAI,EAAE,qBAAqB,EAAE,IAAI,EAAE,GAAG,CAAC,QAAQ,CAAC,EAAmB,EAAE,IAAoC,CAAC,EAAE;SAC9G,CAAC;QAwCH,uBAAC;IAAD,CA9IA,AA8IC,CA9IqC,eAAe,CAAC,eAAe,GA8IpE;IA9IY,wBAAgB,mBA8I5B,CAAA","file":"vs/languages/sass/common/services/intelliSense.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport languageFacts = require('vs/languages/css/common/services/languageFacts');\nimport Modes = require('vs/editor/common/modes');\nimport cssIntellisense = require('vs/languages/css/common/services/intelliSense');\nimport nls = require('vs/nls');\nimport nodes = require('vs/languages/css/common/parser/cssNodes');\n\nexport class SASSIntellisense extends cssIntellisense.CSSIntellisense {\n\n\tprivate static variableDefaults: { [key: string]: string; } = {\n\t\t'$red': '1',\n\t\t'$green': '2',\n\t\t'$blue': '3',\n\t\t'$alpha': '1.0',\n\t\t'$color': '$color',\n\t\t'$weight': '0.5',\n\t\t'$hue': '0',\n\t\t'$saturation': '0%',\n\t\t'$lightness': '0%',\n\t\t'$degrees': '0',\n\t\t'$amount': '0',\n\t\t'$string': '\"\"',\n\t\t'$substring': '\"s\"',\n\t\t'$number': '0',\n\t\t'$limit': '1'\n\t};\n\n\tprivate static colorProposals = [\n\t\t{ func: 'red($color)', desc: nls.localize('sass.builtin.red', 'Gets the red component of a color.') },\n\t\t{ func: 'green($color)', desc: nls.localize('sass.builtin.green', 'Gets the green component of a color.') },\n\t\t{ func: 'blue($color)', desc: nls.localize('sass.builtin.blue', 'Gets the blue component of a color.') },\n\t\t{ func: 'mix($color, $color, [$weight])', desc: nls.localize('sass.builtin.mix', 'Mixes two colors together.') },\n\t\t{ func: 'hue($color)', desc: nls.localize('sass.builtin.hue', 'Gets the hue component of a color.') },\n\t\t{ func: 'saturation($color)', desc: nls.localize('sass.builtin.saturation', 'Gets the saturation component of a color.') },\n\t\t{ func: 'lightness($color)', desc: nls.localize('sass.builtin.lightness', 'Gets the lightness component of a color.') },\n\t\t{ func: 'adjust-hue($color, $degrees)', desc: nls.localize('sass.builtin.adjust-hue', 'Changes the hue of a color.') },\n\t\t{ func: 'lighten($color, $amount)', desc: nls.localize('sass.builtin.lighten', 'Makes a color lighter.') },\n\t\t{ func: 'darken($color, $amount)', desc: nls.localize('sass.builtin.darken', 'Makes a color darker.') },\n\t\t{ func: 'saturate($color, $amount)', desc: nls.localize('sass.builtin.saturate', 'Makes a color more saturated.') },\n\t\t{ func: 'desaturate($color, $amount)', desc: nls.localize('sass.builtin.desaturate', 'Makes a color less saturated.') },\n\t\t{ func: 'grayscale($color)', desc: nls.localize('sass.builtin.grayscale', 'Converts a color to grayscale.') },\n\t\t{ func: 'complement($color)', desc: nls.localize('sass.builtin.complement', 'Returns the complement of a color.') },\n\t\t{ func: 'invert($color)', desc: nls.localize('sass.builtin.invert', 'Returns the inverse of a color.') },\n\t\t{ func: 'alpha($color)', desc: nls.localize('sass.builtin.alpha', 'Gets the opacity component of a color.') },\n\t\t{ func: 'opacity($color)', desc: 'Gets the alpha component (opacity) of a color.' },\n\t\t{ func: 'rgba($color, $alpha)', desc: nls.localize('sass.builtin.rgba', 'Changes the alpha component for a color.') },\n\t\t{ func: 'opacify($color, $amount)', desc: nls.localize('sass.builtin.opacify', 'Makes a color more opaque.') },\n\t\t{ func: 'fade-in($color, $amount)', desc: nls.localize('sass.builtin.fade-in', 'Makes a color more opaque.') },\n\t\t{ func: 'transparentize($color, $amount) / fade-out($color, $amount)', desc: nls.localize('sass.builtin.transparentize', 'Makes a color more transparent.') },\n\t\t{ func: 'adjust-color($color, [$red], [$green], [$blue], [$hue], [$saturation], [$lightness], [$alpha])', desc: nls.localize('sass.builtin.adjust-color', 'Increases or decreases one or more components of a color.') },\n\t\t{ func: 'scale-color($color, [$red], [$green], [$blue], [$saturation], [$lightness], [$alpha])', desc: nls.localize('sass.builtin.scale-color', 'Fluidly scales one or more properties of a color.') },\n\t\t{ func: 'change-color($color, [$red], [$green], [$blue], [$hue], [$saturation], [$lightness], [$alpha])', desc: nls.localize('sass.builtin.change-color', 'Changes one or more properties of a color.') },\n\t\t{ func: 'ie-hex-str($color)', desc: nls.localize('sass.builtin.ie-hex-str', 'Converts a color into the format understood by IE filters.') }\n\t];\n\n\tprivate static selectorFuncs = [\n\t\t{ func: 'selector-nest($selectors…)', desc: nls.localize('sass.builtin.selector-nest', 'Nests selector beneath one another like they would be nested in the stylesheet.') },\n\t\t{ func: 'selector-append($selectors…)', desc: nls.localize('sass.builtin.selector-append', 'Appends selectors to one another without spaces in between.') },\n\t\t{ func: 'selector-extend($selector, $extendee, $extender)', desc: nls.localize('sass.builtin.selector-extend', 'Extends $extendee with $extender within $selector.') },\n\t\t{ func: 'selector-replace($selector, $original, $replacement)', desc: nls.localize('sass.builtin.selector-replace', 'Replaces $original with $replacement within $selector.') },\n\t\t{ func: 'selector-unify($selector1, $selector2)', desc: nls.localize('sass.builtin.selector-unify', 'Unifies two selectors to produce a selector that matches elements matched by both.') },\n\t\t{ func: 'is-superselector($super, $sub)', desc: nls.localize('sass.builtin.is-superselector', 'Returns whether $super matches all the elements $sub does, and possibly more.') },\n\t\t{ func: 'simple-selectors($selector)', desc: nls.localize('sass.builtin.simple-selectors', 'Returns the simple selectors that comprise a compound selector.') },\n\t\t{ func: 'selector-parse($selector)', desc: nls.localize('sass.builtin.selector-parse', 'Parses a selector into the format returned by &.') }\n\t];\n\n\tprivate static builtInFuncs = [\n\t\t{ func: 'unquote($string)', desc: nls.localize('sass.builtin.unquote', 'Removes quotes from a string.') },\n\t\t{ func: 'quote($string)', desc: nls.localize('sass.builtin.quote', 'Adds quotes to a string.') },\n\t\t{ func: 'str-length($string)', desc: nls.localize('sass.builtin.str-length', 'Returns the number of characters in a string.') },\n\t\t{ func: 'str-insert($string, $insert, $index)', desc: nls.localize('sass.builtin.str-insert', 'Inserts $insert into $string at $index.') },\n\t\t{ func: 'str-index($string, $substring)', desc: nls.localize('sass.builtin.str-index', 'Returns the index of the first occurance of $substring in $string.') },\n\t\t{ func: 'str-slice($string, $start-at, [$end-at])', desc: nls.localize('sass.builtin.str-slice', 'Extracts a substring from $string.') },\n\t\t{ func: 'to-upper-case($string)', desc: nls.localize('sass.builtin.to-upper-case', 'Converts a string to upper case.') },\n\t\t{ func: 'to-lower-case($string)', desc: nls.localize('sass.builtin.to-lower-case', 'Converts a string to lower case.') },\n\t\t{ func: 'percentage($number)', desc: nls.localize('sass.builtin.percentage', 'Converts a unitless number to a percentage.') },\n\t\t{ func: 'round($number)', desc: nls.localize('sass.builtin.round', 'Rounds a number to the nearest whole number.') },\n\t\t{ func: 'ceil($number)', desc: nls.localize('sass.builtin.ceil', 'Rounds a number up to the next whole number.') },\n\t\t{ func: 'floor($number)', desc: nls.localize('sass.builtin.floor', 'Rounds a number down to the previous whole number.') },\n\t\t{ func: 'abs($number)', desc: nls.localize('sass.builtin.abs', 'Returns the absolute value of a number.') },\n\t\t{ func: 'min($numbers)', desc: nls.localize('sass.builtin.min', 'Finds the minimum of several numbers.') },\n\t\t{ func: 'max($numbers)', desc: nls.localize('sass.builtin.max', 'Finds the maximum of several numbers.') },\n\t\t{ func: 'random([$limit])', desc: nls.localize('sass.builtin.random', 'Returns a random number.') },\n\t\t{ func: 'length($list)', desc: nls.localize('sass.builtin.length', 'Returns the length of a list.') },\n\t\t{ func: 'nth($list, $n)', desc: nls.localize('sass.builtin.nth', 'Returns a specific item in a list.') },\n\t\t{ func: 'set-nth($list, $n, $value)', desc: nls.localize('sass.builtin.set-nth', 'Replaces the nth item in a list.') },\n\t\t{ func: 'join($list1, $list2, [$separator])', desc: nls.localize('sass.builtin.join', 'Joins together two lists into one.') },\n\t\t{ func: 'append($list1, $val, [$separator])', desc: nls.localize('sass.builtin.append', 'Appends a single value onto the end of a list.') },\n\t\t{ func: 'zip($lists)', desc: nls.localize('sass.builtin.zip', 'Combines several lists into a single multidimensional list.') },\n\t\t{ func: 'index($list, $value)', desc: nls.localize('sass.builtin.index', 'Returns the position of a value within a list.') },\n\t\t{ func: 'list-separator(#list)', desc: nls.localize('sass.builtin.list-separator', 'Returns the separator of a list.') },\n\t\t{ func: 'map-get($map, $key)', desc: nls.localize('sass.builtin.map-get', 'Returns the value in a map associated with a given key.') },\n\t\t{ func: 'map-merge($map1, $map2)', desc: nls.localize('sass.builtin.map-merge', 'Merges two maps together into a new map.') },\n\t\t{ func: 'map-remove($map, $keys)', desc: nls.localize('sass.builtin.map-remove', 'Returns a new map with keys removed.') },\n\t\t{ func: 'map-keys($map)', desc: nls.localize('sass.builtin.map-keys', 'Returns a list of all keys in a map.') },\n\t\t{ func: 'map-values($map)', desc: nls.localize('sass.builtin.map-values', 'Returns a list of all values in a map.') },\n\t\t{ func: 'map-has-key($map, $key)', desc: nls.localize('sass.builtin.map-has-key', 'Returns whether a map has a value associated with a given key.') },\n\t\t{ func: 'keywords($args)', desc: nls.localize('sass.builtin.keywords', 'Returns the keywords passed to a function that takes variable arguments.') },\n\t\t{ func: 'feature-exists($feature)', desc: nls.localize('sass.builtin.feature-exists', 'Returns whether a feature exists in the current Sass runtime.') },\n\t\t{ func: 'variable-exists($name)', desc: nls.localize('sass.builtin.variable-exists', 'Returns whether a variable with the given name exists in the current scope.') },\n\t\t{ func: 'global-variable-exists($name)', desc: nls.localize('sass.builtin.global-variable-exists', 'Returns whether a variable with the given name exists in the global scope.') },\n\t\t{ func: 'function-exists($name)', desc: nls.localize('sass.builtin.function-exists', 'Returns whether a function with the given name exists.') },\n\t\t{ func: 'mixin-exists($name)', desc: nls.localize('sass.builtin.mixin-exists', 'Returns whether a mixin with the given name exists.') },\n\t\t{ func: 'inspect($value)', desc: nls.localize('sass.builtin.inspect', 'Returns the string representation of a value as it would be represented in Sass.') },\n\t\t{ func: 'type-of($value)', desc: nls.localize('sass.builtin.type-of', 'Returns the type of a value.') },\n\t\t{ func: 'unit($number)', desc: nls.localize('sass.builtin.unit', 'Returns the unit(s) associated with a number.') },\n\t\t{ func: 'unitless($number)', desc: nls.localize('sass.builtin.unitless', 'Returns whether a number has units.') },\n\t\t{ func: 'comparable($number1, $number2)', desc: nls.localize('sass.builtin.comparable', 'Returns whether two numbers can be added, subtracted, or compared.') },\n\t\t{ func: 'call($name, $args…)', desc: nls.localize('sass.builtin.call', 'Dynamically calls a Sass function.') }\n\t];\n\n\tconstructor() {\n\t\tsuper('$');\n\t}\n\n\tprivate createFunctionProposals(proposals: {func: string; desc: string; }[], result: Modes.ISuggestion[]): Modes.ISuggestion[] {\n\t\tvar replaceFunction = (match: string, p1: string) => p1 + ': {{' + (SASSIntellisense.variableDefaults[p1] || '') + '}}';\n\t\tproposals.forEach((p) => {\n\t\t\tresult.push({\n\t\t\t\tlabel: p.func.substr(0, p.func.indexOf('(')),\n\t\t\t\ttypeLabel: p.func,\n\t\t\t\tdocumentationLabel: p.desc,\n\t\t\t\tcodeSnippet: p.func.replace(/\\[?(\\$\\w+)\\]?/g, replaceFunction),\n\t\t\t\ttype: 'function'\n\t\t\t});\n\t\t});\n\t\treturn result;\n\t}\n\n\tpublic getCompletionsForSelector(ruleSet: nodes.RuleSet, result:Modes.ISuggestion[]): Modes.ISuggestion[] {\n\t\tthis.createFunctionProposals(SASSIntellisense.selectorFuncs, result);\n\t\treturn super.getCompletionsForSelector(ruleSet, result);\n\t}\n\n\tpublic getTermProposals(result:Modes.ISuggestion[]):Modes.ISuggestion[] {\n\t\tthis.createFunctionProposals(SASSIntellisense.builtInFuncs, result);\n\t\treturn super.getTermProposals(result);\n\t}\n\n\tprotected getColorProposals(entry: languageFacts.IEntry, result: Modes.ISuggestion[]): Modes.ISuggestion[] {\n\t\tthis.createFunctionProposals(SASSIntellisense.colorProposals, result);\n\t\treturn super.getColorProposals(entry, result);\n\t}\n\n\tpublic getCompletionsForDeclarationProperty(result: Modes.ISuggestion[]): Modes.ISuggestion[]{\n\t\tthis.getCompletionsForSelector(null, result);\n\t\treturn super.getCompletionsForDeclarationProperty(result);\n\t}\n\n}\n\n"]}