{"version":3,"file":"vs/languages/sass/test/common/sass-worker.test.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/languages/sass/test/common/sass-worker.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport assert = require('assert');\nimport mm = require('vs/editor/common/model/mirrorModel');\nimport sassWorker = require('vs/languages/sass/common/sassWorker');\nimport URI from 'vs/base/common/uri';\nimport ResourceService = require('vs/editor/common/services/resourceServiceImpl');\nimport EditorCommon = require('vs/editor/common/editorCommon');\nimport Modes = require('vs/editor/common/modes');\nimport WinJS = require('vs/base/common/winjs.base');\nimport servicesUtil2 = require('vs/editor/test/common/servicesTestUtils');\nimport modesUtil = require('vs/editor/test/common/modesTestUtils');\n\nsuite('SASS - Worker', () => {\n\n\tvar mockSASSWorkerEnv = function (url:URI, content: string) : { worker: sassWorker.SassWorker; model: mm.MirrorModel } {\n\t\tvar resourceService = new ResourceService.ResourceService();\n\t\tvar model = mm.createTestMirrorModelFromString(content, modesUtil.createMockMode('mock.mode.id', /(#?-?\\d*\\.\\d\\w*%?)|([$@#!]?[\\w-?]+%?)|[$@#!]/g), url);\n\t\tresourceService.insert(url, model);\n\n\t\tlet services = servicesUtil2.createMockEditorWorkerServices({\n\t\t\tresourceService: resourceService,\n\t\t});\n\n\t\tvar worker = new sassWorker.SassWorker('mock.mode.id', services.resourceService, services.markerService);\n\t\treturn { worker: worker, model: model };\n\t};\n\n\tvar testSuggestionsFor = function(value:string, stringBefore:string):WinJS.TPromise<Modes.ISuggestResult> {\n\t\tvar url = URI.parse('test://1');\n\t\tvar env = mockSASSWorkerEnv(url, value);\n\n\t\tvar idx = stringBefore ? value.indexOf(stringBefore) + stringBefore.length : 0;\n\t\tvar position = env.model.getPositionFromOffset(idx);\n\t\treturn env.worker.suggest(url, position).then(result => result[0]);\n\t};\n\n\tvar testValueSetFor = function(value:string, selection:string, selectionLength: number, up: boolean):WinJS.TPromise<Modes.IInplaceReplaceSupportResult> {\n\t\tvar url = URI.parse('test://1');\n\t\tvar env = mockSASSWorkerEnv(url, value);\n\n\t\tvar pos = env.model.getPositionFromOffset(value.indexOf(selection));\n\t\tvar range = { startLineNumber: pos.lineNumber, startColumn: pos.column, endLineNumber: pos.lineNumber, endColumn: pos.column + selectionLength };\n\n\t\treturn env.worker.navigateValueSet(url, range, up);\n\t};\n\n\tvar testOccurrences = function(value:string, tokenBefore:string):WinJS.TPromise<{ occurrences: Modes.IOccurence[]; model: mm.MirrorModel }> {\n\t\tvar url = URI.parse('test://1');\n\t\tvar env = mockSASSWorkerEnv(url, value);\n\n\t\tvar pos = env.model.getPositionFromOffset(value.indexOf(tokenBefore) + tokenBefore.length);\n\n\t\treturn env.worker.findOccurrences(url, pos).then((occurrences) => { return { occurrences: occurrences, model: env.model}; });\n\t};\n\n\tvar assertSuggestion= function(completion:Modes.ISuggestResult, label:string, type?:string) {\n\t\tvar proposalsFound = completion.suggestions.filter(function(suggestion: Modes.ISuggestion) {\n\t\t\treturn suggestion.label === label && (!type || suggestion.type === type);\n\t\t});\n\t\tif (proposalsFound.length != 1) {\n\t\t\tassert.fail(\"Suggestion not found: \" + label + \", has \" + completion.suggestions.map(s => s.label).join(', '));\n\t\t}\n\t};\n\n\tvar assertReplaceResult= function(result:Modes.IInplaceReplaceSupportResult, expected:string) {\n\t\tassert.equal(result.value, expected);\n\t};\n\n\tvar assertOccurrences= function(occurrences: Modes.IOccurence[], model: mm.MirrorModel , expectedNumber:number, expectedContent:string) {\n\t\tassert.equal(occurrences.length, expectedNumber);\n\t\toccurrences.forEach((occurrence) => {\n\t\t\tassert.equal(model.getValueInRange(occurrence.range), expectedContent);\n\t\t});\n\t};\n\n\ttest('Intellisense Sass', function(testDone):any {\n\t\tWinJS.Promise.join([\n\t\t\ttestSuggestionsFor('$i: 0; body { width: ', 'width: ').then((completion) => {\n\t\t\t\tassert.equal(completion.currentWord, '');\n\t\t\t\tassertSuggestion(completion, '$i');\n\t\t\t}),\n\n\t\t\ttestSuggestionsFor('@for $i from 1 to 3 { $', '{ $').then((completion) => {\n\t\t\t\tassert.equal(completion.currentWord, '$');\n\t\t\t\tassertSuggestion(completion, '$i');\n\t\t\t}),\n\n\t\t\ttestSuggestionsFor('@for $i from 1 through 3 { .item-#{$i} { width: 2em * $i; } }', '.item-#{').then((completion) => {\n\t\t\t\tassert.equal(completion.currentWord, '');\n\t\t\t\tassertSuggestion(completion, '$i');\n\t\t\t}),\n\t\t\ttestSuggestionsFor('.foo { background-color: d', 'background-color: d').then((completion) => {\n\t\t\t\tassert.equal(completion.currentWord, 'd');\n\t\t\t\tassertSuggestion(completion, 'darken');\n\t\t\t\tassertSuggestion(completion, 'desaturate');\n\t\t\t}),\n\t\t\ttestSuggestionsFor('@function foo($x, $y) { @return $x + $y; } .foo { background-color: f', 'background-color: f').then((completion) => {\n\t\t\t\tassert.equal(completion.currentWord, 'f');\n\t\t\t\tassertSuggestion(completion, 'foo');\n\t\t\t}),\n\n\t\t\ttestSuggestionsFor('.foo { di span { } ', 'di').then((completion) => {\n\t\t\t\tassert.equal(completion.currentWord, 'di');\n\t\t\t\tassertSuggestion(completion, 'display');\n\t\t\t\tassertSuggestion(completion, 'div');\n\t\t\t}),\n\t\t\ttestSuggestionsFor('.foo { .', '{ .').then((completion) => {\n\t\t\t\tassert.equal(completion.currentWord, '');\n\t\t\t\tassertSuggestion(completion, '.foo');\n\t\t\t}),\n\t\t\t// issue #250\n\t\t\ttestSuggestionsFor('.foo { display: block;', 'block;').then((completion) => {\n\t\t\t\tassert.equal(completion.currentWord, '');\n\t\t\t\tassert.equal(0, completion.suggestions.length);\n\t\t\t})\n\t\t]).done(() => testDone(), (errors:any[]) => {\n\t\t\ttestDone(errors.reduce((e1, e2) => e1 || e2));\n\t\t});\n\t});\n\n\ttest('Sass Value sets', function(testDone): any {\n\t\tWinJS.Promise.join([\n\t\t\ttestValueSetFor('@mixin foo { display: inline }', 'inline', 6, false).then((result) => {\n\t\t\t\tassertReplaceResult(result, 'flex');\n\t\t\t}),\n\t\t\ttestValueSetFor('@mixin foo($i) { display: flex }', 'flex', 7, true).then((result) => {\n\t\t\t\tassertReplaceResult(result, 'inline');\n\t\t\t}),\n\t\t\ttestValueSetFor('.foo { .bar { display: inline } }', 'inline', 0, false).then((result) => {\n\t\t\t\tassertReplaceResult(result, 'flex');\n\t\t\t}),\n\t\t\ttestValueSetFor('@mixin foo { display: inline }', 'line', 0, false).then((result) => {\n\t\t\t\tassertReplaceResult(result, 'flex');\n\t\t\t}),\n\n\t\t\ttestValueSetFor('@mixin foo { display: inline }', 'display', 0, false).then((result) => {\n\t\t\t\tassert.ok(!result);\n\t\t\t})\n\t\t]).done(() => testDone(), (errors:any[]) => {\n\t\t\ttestDone(errors.reduce((e1, e2) => e1 || e2));\n\t\t});\n\t});\n\n\ttest('Sass Occurrences', function(testDone): any {\n\t\tWinJS.Promise.join([\n\t\t\ttestOccurrences('@mixin /*here*/foo { display: inline } foo { @include foo; }', '/*here*/').then((result) =>  {\n\t\t\t\tassertOccurrences(result.occurrences, result.model, 2, 'foo');\n\t\t\t}),\n\n\t\t\ttestOccurrences('@mixin foo { display: inline } foo { @include /*here*/foo; }', '/*here*/').then((result) =>  {\n\t\t\t\tassertOccurrences(result.occurrences, result.model, 2, 'foo');\n\t\t\t}),\n\n\t\t\ttestOccurrences('@mixin foo { display: inline } /*here*/foo { @include foo; }', '/*here*/').then((result) =>  {\n\t\t\t\tassertOccurrences(result.occurrences, result.model, 1, 'foo');\n\t\t\t}),\n\n\t\t\ttestOccurrences('@function /*here*/foo($i) { @return $i*$i; } #foo { width: foo(2); }', '/*here*/').then((result) =>  {\n\t\t\t\tassertOccurrences(result.occurrences, result.model, 2, 'foo');\n\t\t\t}),\n\n\t\t\ttestOccurrences('@function foo($i) { @return $i*$i; } #foo { width: /*here*/foo(2); }', '/*here*/').then((result) =>  {\n\t\t\t\tassertOccurrences(result.occurrences, result.model, 2, 'foo');\n\t\t\t}),\n\t\t]).done(() => testDone(), (errors:any[]) => {\n\t\t\ttestDone(errors.reduce((e1, e2) => e1 || e2));\n\t\t});\n\t});\n\n\n});\n"]}