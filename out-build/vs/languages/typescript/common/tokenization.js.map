{"version":3,"file":"vs/languages/typescript/common/tokenization.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/languages/typescript/common/tokenization.ts"],"names":[],"mappings":";IAAA;;;oGAGgG;IAChG,YAAY,CAAC;IAOb,WAAY,QAAQ;QACnB,mDAAU,CAAA;QACV,qDAAW,CAAA;IACZ,CAAC,EAHW,gBAAQ,KAAR,gBAAQ,QAGnB;IAHD,IAAY,QAAQ,GAAR,gBAGX,CAAA;IAED,mCAA0C,IAAgB,EAAE,QAAiB;QAE5E,IAAI,UAAU,GAAG,EAAE,CAAC,gBAAgB,EAAE,EACrC,gBAAgB,GAAG,QAAQ,KAAK,QAAQ,CAAC,UAAU,GAAG,kBAAkB,GAAG,kBAAkB,EAC7F,cAAc,GAAG,QAAQ,KAAK,QAAQ,CAAC,UAAU,GAAG,gBAAgB,GAAG,gBAAgB,CAAC;QAEzF,MAAM,CAAC;YACN,4BAA4B,EAAE,KAAK;YACnC,eAAe,EAAE,cAAM,OAAA,IAAI,KAAK,CAAC,IAAI,EAAE,IAAI,EAAE,QAAQ,EAAE,EAAE,CAAC,cAAc,CAAC,IAAI,EAAE,KAAK,CAAC,EAA9D,CAA8D;YACrF,QAAQ,EAAE,UAAC,IAAI,EAAE,KAAK,EAAE,WAAY,EAAE,YAAa,IAAK,OAAA,QAAQ,CAAC,gBAAgB,EAAE,cAAc,EAAE,UAAU,EAAU,KAAK,EAAE,IAAI,EAAE,WAAW,EAAE,YAAY,CAAC,EAAtG,CAAsG;SAC9J,CAAC;IACH,CAAC;IAXe,iCAAyB,4BAWxC,CAAA;IAED;QASC,eAAY,IAAiB,EAAE,KAAmB,EAAE,QAAiB,EAAE,QAA2B,EAAE,cAAuB;YAC1H,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;YAClB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;YACpB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;YACzB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;YACzB,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;QACtC,CAAC;QAEM,qBAAK,GAAZ;YACC,MAAM,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,EAAE,6BAAa,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;QACvH,CAAC;QAEM,sBAAM,GAAb,UAAc,KAAkB;YAC/B,EAAE,CAAA,CAAC,KAAK,KAAK,IAAI,CAAC,CAAC,CAAC;gBACnB,MAAM,CAAC,IAAI,CAAC;YACb,CAAC;YACD,EAAE,CAAA,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,CAAC;gBACxC,MAAM,CAAC,KAAK,CAAC;YACd,CAAC;YACD,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,KAAc,KAAM,CAAC,QAAQ,CAAC,CAAC,CAAC;gBAChD,MAAM,CAAC,KAAK,CAAC;YACd,CAAC;YACD,EAAE,CAAA,CAAC,IAAI,CAAC,cAAc,KAAc,KAAM,CAAC,cAAc,CAAC,CAAC,CAAC;gBAC3D,MAAM,CAAC,KAAK,CAAC;YACd,CAAC;YACD,MAAM,CAAC,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,EAAW,KAAM,CAAC,MAAM,CAAC,CAAC;QACtE,CAAC;QAEM,uBAAO,GAAd;YACC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;QACnB,CAAC;QAEM,wBAAQ,GAAf,UAAgB,MAAU;YACzB,MAAM,IAAI,KAAK,EAAE,CAAC;QACnB,CAAC;QAEM,4BAAY,GAAnB;YACC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;QACpB,CAAC;QAEM,4BAAY,GAAnB,UAAoB,KAAkB;YACrC,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACrB,CAAC;QACF,YAAC;IAAD,CAAC,AApDD,IAoDC;IAED,kBAAkB,gBAAyC,EAAE,cAAuC,EACnG,UAAyB,EAAE,KAAY,EAAE,IAAY,EAAE,WAAuB,EAAE,YAAqB;QAA9C,2BAAuB,GAAvB,eAAuB;QAE9E,yCAAyC;QACzC,IAAI,GAAG,GAAG;YACT,MAAM,EAAkB,EAAE;YAC1B,gBAAgB,EAAE,WAAW,GAAG,IAAI,CAAC,MAAM;YAC3C,QAAQ,EAAE,IAAI,KAAK,CAAC,KAAK,CAAC,OAAO,EAAE,EAAE,KAAK,CAAC,YAAY,EAAE,EAAE,KAAK,CAAC,QAAQ,EAAE,EAAE,CAAC,cAAc,CAAC,IAAI,EAAE,KAAK,CAAC;YACzG,eAAe,EAAE,CAAC,EAAE,UAAU,EAAE,WAAW,EAAE,IAAI,EAAE,KAAK,CAAC,OAAO,EAAE,EAAE,CAAC;SACrE,CAAC;QAEF,kBAAkB,UAAiB,EAAE,IAAW;YAC/C,EAAE,CAAA,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,KAAK,CAAC,IAAI,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,CAAC,CAAC;gBAC/E,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,QAAQ,CAAC,KAAK,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC,CAAC;YACvD,CAAC;QACF,CAAC;QAED,IAAI,YAAY,GAAG,KAAK,CAAC,QAAQ,KAAK,QAAQ,CAAC,UAAU,CAAC;QAE1D,kCAAkC;QAClC,EAAE,CAAC,CAAC,CAAC,YAAY,IAAI,YAAY,CAAC,KAAK,EAAE,WAAW,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC;YACvE,MAAM,CAAC,GAAG,CAAC;QACZ,CAAC;QAED,IAAI,MAAM,GAAG,UAAU,CAAC,yBAAyB,CAAC,IAAI,EAAE,KAAK,CAAC,QAAQ,EAAE,IAAI,CAAC,EAC5E,MAAM,GAAG,CAAC,CAAC;QAEZ,GAAG,CAAC,QAAQ,CAAC,QAAQ,GAAG,MAAM,CAAC,aAAa,CAAC;QAC7C,GAAG,CAAC,QAAQ,CAAC,cAAc,GAAG,MAAM,CAAC,aAAa,KAAK,EAAE,CAAC,cAAc,CAAC,wBAAwB,IAAI,CAAC,KAAK,CAAC,cAAc,IAAI,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAEtJ,GAAG,CAAC,CAAc,UAAc,EAAd,KAAA,MAAM,CAAC,OAAO,EAAd,cAAc,EAAd,IAAc,CAAC;YAA5B,IAAI,KAAK,SAAA;YAEb,IAAI,IAAY,CAAC;YAEjB,EAAE,CAAC,CAAC,KAAK,CAAC,cAAc,KAAK,EAAE,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC;gBACxD,wCAAwC;gBACxC,IAAI,EAAE,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;gBACjC,IAAI,GAAG,gBAAgB,CAAC,EAAE,CAAC,IAAI,cAAc,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;gBACpE,QAAQ,CAAC,MAAM,GAAG,WAAW,EAAE,IAAI,CAAC,CAAC;YAEtC,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,cAAc,KAAK,EAAE,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC;gBAC3D,sDAAsD;gBACtD,EAAE,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,cAAc,IAAI,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;oBAC3F,QAAQ,CAAC,MAAM,GAAG,WAAW,EAAE,YAAY,GAAG,gBAAgB,GAAG,gBAAgB,CAAC,CAAC;gBACpF,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACP,QAAQ,CAAC,MAAM,GAAG,WAAW,EAAE,YAAY,GAAG,YAAY,GAAG,YAAY,CAAC,CAAC;gBAC5E,CAAC;YACF,CAAC;YAAC,IAAI,CAAC,CAAC;gBACP,kBAAkB;gBAClB,QAAQ,CAAC,MAAM,GAAG,WAAW,EAC5B,cAAc,CAAC,KAAK,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC,CAAC;YAC9C,CAAC;YAED,MAAM,IAAI,KAAK,CAAC,MAAM,CAAC;SACvB;QAED,MAAM,CAAC,GAAG,CAAC;IACZ,CAAC;IAMD,IAAI,kBAAkB,GAA2B,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IACrE,kBAAkB,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,GAAG,0BAA0B,CAAC;IACnE,kBAAkB,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,GAAG,0BAA0B,CAAC;IACnE,kBAAkB,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,GAAG,sBAAsB,CAAC;IAC/D,kBAAkB,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,GAAG,sBAAsB,CAAC;IAC/D,kBAAkB,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,GAAG,oBAAoB,CAAC;IAC7D,kBAAkB,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,GAAG,oBAAoB,CAAC;IAE7D,IAAI,gBAAgB,GAA2B,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IACnE,gBAAgB,CAAC,EAAE,CAAC,UAAU,CAAC,UAAU,CAAC,GAAG,eAAe,CAAC;IAC7D,gBAAgB,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,CAAC,GAAG,YAAY,CAAC;IACvD,gBAAgB,CAAC,EAAE,CAAC,UAAU,CAAC,QAAQ,CAAC,GAAG,cAAc,CAAC;IAC1D,gBAAgB,CAAC,EAAE,CAAC,UAAU,CAAC,WAAW,CAAC,GAAG,cAAc,CAAC;IAC7D,gBAAgB,CAAC,EAAE,CAAC,UAAU,CAAC,aAAa,CAAC,GAAG,WAAW,CAAC;IAC5D,gBAAgB,CAAC,EAAE,CAAC,UAAU,CAAC,aAAa,CAAC,GAAG,WAAW,CAAC;IAC5D,gBAAgB,CAAC,EAAE,CAAC,UAAU,CAAC,aAAa,CAAC,GAAG,WAAW,CAAC;IAE5D,IAAI,kBAAkB,GAA2B,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IACrE,kBAAkB,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,GAAG,0BAA0B,CAAC;IACnE,kBAAkB,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,GAAG,0BAA0B,CAAC;IACnE,kBAAkB,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,GAAG,sBAAsB,CAAC;IAC/D,kBAAkB,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,GAAG,sBAAsB,CAAC;IAC/D,kBAAkB,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,GAAG,oBAAoB,CAAC;IAC7D,kBAAkB,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,GAAG,oBAAoB,CAAC;IAE7D,IAAI,gBAAgB,GAA2B,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IACnE,gBAAgB,CAAC,EAAE,CAAC,UAAU,CAAC,UAAU,CAAC,GAAG,eAAe,CAAC;IAC7D,gBAAgB,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,CAAC,GAAG,YAAY,CAAC;IACvD,gBAAgB,CAAC,EAAE,CAAC,UAAU,CAAC,QAAQ,CAAC,GAAG,cAAc,CAAC;IAC1D,gBAAgB,CAAC,EAAE,CAAC,UAAU,CAAC,WAAW,CAAC,GAAG,cAAc,CAAC;IAC7D,gBAAgB,CAAC,EAAE,CAAC,UAAU,CAAC,aAAa,CAAC,GAAG,WAAW,CAAC;IAC5D,gBAAgB,CAAC,EAAE,CAAC,UAAU,CAAC,aAAa,CAAC,GAAG,WAAW,CAAC;IAC5D,gBAAgB,CAAC,EAAE,CAAC,UAAU,CAAC,aAAa,CAAC,GAAG,WAAW,CAAC;IAG5D,sBAAsB,KAAY,EAAE,WAAmB,EAAE,IAAY,EAAE,QAAoD;QAC1H,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YAC9B,QAAQ,CAAC,WAAW,EAAE,iBAAiB,CAAC,CAAC;YACzC,MAAM,CAAC,IAAI,CAAC;QACb,CAAC;IACF,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport Modes = require('vs/editor/common/modes');\nimport supports = require('vs/editor/common/modes/supports');\nimport ts = require('vs/languages/typescript/common/lib/typescriptServices');\nimport {AbstractState} from 'vs/editor/common/modes/abstractState';\n\nexport enum Language {\n\tTypeScript,\n\tEcmaScript5\n}\n\nexport function createTokenizationSupport(mode:Modes.IMode, language:Language):Modes.ITokenizationSupport {\n\n\tvar classifier = ts.createClassifier(),\n\t\tbracketTypeTable = language === Language.TypeScript ? tsBracketTypeTable : jsBracketTypeTable,\n\t\ttokenTypeTable = language === Language.TypeScript ? tsTokenTypeTable : jsTokenTypeTable;\n\n\treturn {\n\t\tshouldGenerateEmbeddedModels: false,\n\t\tgetInitialState: () => new State(mode, null, language, ts.EndOfLineState.None, false),\n\t\ttokenize: (line, state, offsetDelta?, stopAtOffset?) => tokenize(bracketTypeTable, tokenTypeTable, classifier, <State> state, line, offsetDelta, stopAtOffset)\n\t};\n}\n\nclass State implements Modes.IState {\n\n\tprivate _mode: Modes.IMode;\n\tprivate _state: Modes.IState;\n\n\tpublic language: Language;\n\tpublic eolState: ts.EndOfLineState;\n\tpublic inJsDocComment: boolean;\n\n\tconstructor(mode: Modes.IMode, state: Modes.IState, language:Language, eolState: ts.EndOfLineState, inJsDocComment: boolean) {\n\t\tthis._mode = mode;\n\t\tthis._state = state;\n\t\tthis.language = language;\n\t\tthis.eolState = eolState;\n\t\tthis.inJsDocComment = inJsDocComment;\n\t}\n\n\tpublic clone(): State {\n\t\treturn new State(this._mode, AbstractState.safeClone(this._state), this.language, this.eolState, this.inJsDocComment);\n\t}\n\n\tpublic equals(other:Modes.IState):boolean {\n\t\tif(other === this) {\n\t\t\treturn true;\n\t\t}\n\t\tif(!other || !(other instanceof State)) {\n\t\t\treturn false;\n\t\t}\n\t\tif (this.eolState !== (<State> other).eolState) {\n\t\t\treturn false;\n\t\t}\n\t\tif(this.inJsDocComment !== (<State> other).inJsDocComment) {\n\t\t\treturn false;\n\t\t}\n\t\treturn AbstractState.safeEquals(this._state, (<State> other)._state);\n\t}\n\n\tpublic getMode():Modes.IMode {\n\t\treturn this._mode;\n\t}\n\n\tpublic tokenize(stream:any):Modes.ITokenizationResult {\n\t\tthrow new Error();\n\t}\n\n\tpublic getStateData():Modes.IState {\n\t\treturn this._state;\n\t}\n\n\tpublic setStateData(state:Modes.IState):void {\n\t\tthis._state = state;\n\t}\n}\n\nfunction tokenize(bracketTypeTable: { [i: number]: string }, tokenTypeTable: { [i: number]: string },\n\tclassifier: ts.Classifier, state: State, text: string, offsetDelta: number = 0, stopAtOffset?: number): Modes.ILineTokens {\n\n\t// Create result early and fill in tokens\n\tvar ret = {\n\t\ttokens: <Modes.IToken[]>[],\n\t\tactualStopOffset: offsetDelta + text.length,\n\t\tendState: new State(state.getMode(), state.getStateData(), state.language, ts.EndOfLineState.None, false),\n\t\tmodeTransitions: [{ startIndex: offsetDelta, mode: state.getMode() }],\n\t};\n\n\tfunction appendFn(startIndex:number, type:string):void {\n\t\tif(ret.tokens.length === 0 || ret.tokens[ret.tokens.length - 1].type !== type) {\n\t\t\tret.tokens.push(new supports.Token(startIndex, type));\n\t\t}\n\t}\n\n\tvar isTypeScript = state.language === Language.TypeScript;\n\n\t// shebang statement, #! /bin/node\n\tif (!isTypeScript && checkSheBang(state, offsetDelta, text, appendFn)) {\n\t\treturn ret;\n\t}\n\n\tvar result = classifier.getClassificationsForLine(text, state.eolState, true),\n\t\toffset = 0;\n\n\tret.endState.eolState = result.finalLexState;\n\tret.endState.inJsDocComment = result.finalLexState === ts.EndOfLineState.InMultiLineCommentTrivia && (state.inJsDocComment || /\\/\\*\\*.*$/.test(text));\n\n\tfor (let entry of result.entries) {\n\n\t\tvar type: string;\n\n\t\tif (entry.classification === ts.TokenClass.Punctuation) {\n\t\t\t// punctions: check for brackets: (){}[]\n\t\t\tvar ch = text.charCodeAt(offset);\n\t\t\ttype = bracketTypeTable[ch] || tokenTypeTable[entry.classification];\n\t\t\tappendFn(offset + offsetDelta, type);\n\n\t\t} else if (entry.classification === ts.TokenClass.Comment) {\n\t\t\t// comments: check for JSDoc, block, and line comments\n\t\t\tif (ret.endState.inJsDocComment || /\\/\\*\\*.*\\*\\//.test(text.substr(offset, entry.length))) {\n\t\t\t\tappendFn(offset + offsetDelta, isTypeScript ? 'comment.doc.ts' : 'comment.doc.js');\n\t\t\t} else {\n\t\t\t\tappendFn(offset + offsetDelta, isTypeScript ? 'comment.ts' : 'comment.js');\n\t\t\t}\n\t\t} else {\n\t\t\t// everything else\n\t\t\tappendFn(offset + offsetDelta,\n\t\t\t\ttokenTypeTable[entry.classification] || '');\n\t\t}\n\n\t\toffset += entry.length;\n\t}\n\n\treturn ret;\n}\n\ninterface INumberStringDictionary {\n\t[idx: number]: string;\n}\n\nvar tsBracketTypeTable:INumberStringDictionary = Object.create(null);\ntsBracketTypeTable['('.charCodeAt(0)] = 'delimiter.parenthesis.ts';\ntsBracketTypeTable[')'.charCodeAt(0)] = 'delimiter.parenthesis.ts';\ntsBracketTypeTable['{'.charCodeAt(0)] = 'delimiter.bracket.ts';\ntsBracketTypeTable['}'.charCodeAt(0)] = 'delimiter.bracket.ts';\ntsBracketTypeTable['['.charCodeAt(0)] = 'delimiter.array.ts';\ntsBracketTypeTable[']'.charCodeAt(0)] = 'delimiter.array.ts';\n\nvar tsTokenTypeTable:INumberStringDictionary = Object.create(null);\ntsTokenTypeTable[ts.TokenClass.Identifier] = 'identifier.ts';\ntsTokenTypeTable[ts.TokenClass.Keyword] = 'keyword.ts';\ntsTokenTypeTable[ts.TokenClass.Operator] = 'delimiter.ts';\ntsTokenTypeTable[ts.TokenClass.Punctuation] = 'delimiter.ts';\ntsTokenTypeTable[ts.TokenClass.NumberLiteral] = 'number.ts';\ntsTokenTypeTable[ts.TokenClass.RegExpLiteral] = 'regexp.ts';\ntsTokenTypeTable[ts.TokenClass.StringLiteral] = 'string.ts';\n\nvar jsBracketTypeTable:INumberStringDictionary = Object.create(null);\njsBracketTypeTable['('.charCodeAt(0)] = 'delimiter.parenthesis.js';\njsBracketTypeTable[')'.charCodeAt(0)] = 'delimiter.parenthesis.js';\njsBracketTypeTable['{'.charCodeAt(0)] = 'delimiter.bracket.js';\njsBracketTypeTable['}'.charCodeAt(0)] = 'delimiter.bracket.js';\njsBracketTypeTable['['.charCodeAt(0)] = 'delimiter.array.js';\njsBracketTypeTable[']'.charCodeAt(0)] = 'delimiter.array.js';\n\nvar jsTokenTypeTable:INumberStringDictionary = Object.create(null);\njsTokenTypeTable[ts.TokenClass.Identifier] = 'identifier.js';\njsTokenTypeTable[ts.TokenClass.Keyword] = 'keyword.js';\njsTokenTypeTable[ts.TokenClass.Operator] = 'delimiter.js';\njsTokenTypeTable[ts.TokenClass.Punctuation] = 'delimiter.js';\njsTokenTypeTable[ts.TokenClass.NumberLiteral] = 'number.js';\njsTokenTypeTable[ts.TokenClass.RegExpLiteral] = 'regexp.js';\njsTokenTypeTable[ts.TokenClass.StringLiteral] = 'string.js';\n\n\nfunction checkSheBang(state: State, deltaOffset: number, line: string, appendFn: (startIndex: number, type: string) => void): boolean {\n\tif (line.indexOf('#!') === 0) {\n\t\tappendFn(deltaOffset, 'comment.shebang');\n\t\treturn true;\n\t}\n}\n"]}