{"version":3,"file":"vs/languages/typescript/common/mode.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/languages/typescript/common/mode.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport * as modes from 'vs/editor/common/modes';\nimport * as lifecycle from 'vs/base/common/lifecycle';\nimport {createTokenizationSupport, Language} from 'vs/languages/typescript/common/tokenization';\nimport {createWordRegExp} from 'vs/editor/common/modes/abstractMode';\nimport {RichEditSupport, IRichEditConfiguration} from 'vs/editor/common/modes/supports/richEditSupport';\nimport {IModelService} from 'vs/editor/common/services/modelService';\nimport {IModeService} from 'vs/editor/common/services/modeService';\nimport {IMarkerService} from 'vs/platform/markers/common/markers';\nimport {LanguageServiceDefaults, typeScriptDefaults, javaScriptDefaults, LanguageServiceMode} from './typescript';\nimport {register} from './languageFeatures';\nimport {ServicesAccessor} from 'vs/platform/instantiation/common/instantiation';\nimport * as workerManager from 'vs/languages/typescript/common/workerManager';\n\nfunction setupMode(modelService:IModelService, markerService:IMarkerService, modeService:IModeService, defaults:LanguageServiceDefaults, modeId:string, language:Language): void {\n\n\tlet disposables: lifecycle.IDisposable[] = [];\n\n\tconst client = <LanguageServiceMode & lifecycle.IDisposable>workerManager.create(defaults, modelService);\n\tdisposables.push(client);\n\n\tconst registration = register(\n\t\tmodelService,\n\t\tmarkerService,\n\t\tmodeId,\n\t\tdefaults,\n\t\t(first, ...more) => client.getLanguageServiceWorker(...[first].concat(more))\n\t);\n\tdisposables.push(registration);\n\n\tdisposables.push(modeService.registerRichEditSupport(modeId, richEditConfiguration));\n\n\tdisposables.push(modeService.registerTokenizationSupport(modeId, (mode) => {\n\t\treturn createTokenizationSupport(mode, language);\n\t}));\n}\n\nconst richEditConfiguration:IRichEditConfiguration = {\n\twordPattern: createWordRegExp('$'),\n\n\tcomments: {\n\t\tlineComment: '//',\n\t\tblockComment: ['/*', '*/']\n\t},\n\n\tbrackets: [\n\t\t['{', '}'],\n\t\t['[', ']'],\n\t\t['(', ')']\n\t],\n\n\tonEnterRules: [\n\t\t{\n\t\t\t// e.g. /** | */\n\t\t\tbeforeText: /^\\s*\\/\\*\\*(?!\\/)([^\\*]|\\*(?!\\/))*$/,\n\t\t\tafterText: /^\\s*\\*\\/$/,\n\t\t\taction: { indentAction: modes.IndentAction.IndentOutdent, appendText: ' * ' }\n\t\t},\n\t\t{\n\t\t\t// e.g. /** ...|\n\t\t\tbeforeText: /^\\s*\\/\\*\\*(?!\\/)([^\\*]|\\*(?!\\/))*$/,\n\t\t\taction: { indentAction: modes.IndentAction.None, appendText: ' * ' }\n\t\t},\n\t\t{\n\t\t\t// e.g.  * ...|\n\t\t\tbeforeText: /^(\\t|(\\ \\ ))*\\ \\*(\\ ([^\\*]|\\*(?!\\/))*)?$/,\n\t\t\taction: { indentAction: modes.IndentAction.None, appendText: '* ' }\n\t\t},\n\t\t{\n\t\t\t// e.g.  */|\n\t\t\tbeforeText: /^(\\t|(\\ \\ ))*\\ \\*\\/\\s*$/,\n\t\t\taction: { indentAction: modes.IndentAction.None, removeText: 1 }\n\t\t}\n\t],\n\n\t__electricCharacterSupport: {\n\t\tdocComment: {scope:'comment.doc', open:'/**', lineStart:' * ', close:' */'}\n\t},\n\n\t__characterPairSupport: {\n\t\tautoClosingPairs: [\n\t\t\t{ open: '{', close: '}' },\n\t\t\t{ open: '[', close: ']' },\n\t\t\t{ open: '(', close: ')' },\n\t\t\t{ open: '\"', close: '\"', notIn: ['string'] },\n\t\t\t{ open: '\\'', close: '\\'', notIn: ['string', 'comment'] },\n\t\t\t{ open: '`', close: '`' }\n\t\t]\n\t}\n};\n\nexport function createRichEditSupport(modeId:string): RichEditSupport {\n\treturn new RichEditSupport(modeId, null, richEditConfiguration);\n}\n\nlet isActivated = false;\nexport function activate(ctx:ServicesAccessor): void {\n\tif (isActivated) {\n\t\treturn;\n\t}\n\tisActivated = true;\n\n\tlet modelService = ctx.get(IModelService);\n\tlet markerService = ctx.get(IMarkerService);\n\tlet modeService = ctx.get(IModeService);\n\n\tsetupMode(\n\t\tmodelService,\n\t\tmarkerService,\n\t\tmodeService,\n\t\ttypeScriptDefaults,\n\t\t'typescript',\n\t\tLanguage.TypeScript\n\t);\n\n\tsetupMode(\n\t\tmodelService,\n\t\tmarkerService,\n\t\tmodeService,\n\t\tjavaScriptDefaults,\n\t\t'javascript',\n\t\tLanguage.EcmaScript5\n\t);\n}\n"]}