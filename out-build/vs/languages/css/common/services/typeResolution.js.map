{"version":3,"file":"vs/languages/css/common/services/typeResolution.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/languages/css/common/services/typeResolution.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport URI from 'vs/base/common/uri';\nimport nodes = require('vs/languages/css/common/parser/cssNodes');\nimport service = require('vs/languages/css/common/services/cssLanguageService');\nimport languageFacts = require('vs/languages/css/common/services/languageFacts');\n\nexport enum Type {\n\tUrl,\n\tPercentage,\n\tLength,\n\tNumber,\n\tTime,\n\tAngle,\n\tColor,\n\n\tIdentifier,\n\tEnum,\n\tUnknown\n}\n\nexport interface IType {\n\tisSimpleType():boolean;\n}\n\nexport class SimpleType implements IType {\n\n\tconstructor(public type:Type) {\n\t\t// empty\n\t}\n\n\tpublic isSimpleType():boolean {\n\t\treturn true;\n\t}\n\n\tpublic static Color = new SimpleType(Type.Color);\n\tpublic static Identifier = new SimpleType(Type.Identifier);\n\tpublic static Url = new SimpleType(Type.Url);\n\tpublic static Unknown = new SimpleType(Type.Unknown);\n}\n\nexport class MultiType implements IType {\n\n\tconstructor(public types:IType[]) {\n\t\t// empty\n\t}\n\n\tpublic isSimpleType():boolean {\n\t\treturn false;\n\t}\n}\n\nexport function typeAtPosition(service:service.ILanguageService, resource:URI, offset:number):IType {\n\n\treturn null;\n}\n\nexport function typeFromNode(node:nodes.Node):IType {\n\n\tif(!node) {\n\t\treturn SimpleType.Unknown;\n\t}\n\n\tswitch(node.type) {\n\t\tcase nodes.NodeType.Expression: return typeFromExpression(<nodes.Expression> node);\n\t\tcase nodes.NodeType.BinaryExpression: return typeFromBinaryExpression(<nodes.BinaryExpression> node);\n\t\tcase nodes.NodeType.Term: return typeFromTerm(<nodes.Term> node);\n\t\tcase nodes.NodeType.Function: return typeFromFunction(<nodes.Function> node);\n\t\tcase nodes.NodeType.NumericValue: return typeFromNumeric(<nodes.NumericValue> node);\n\t\tcase nodes.NodeType.HexColorValue: return SimpleType.Color;\n\t\tcase nodes.NodeType.Identifier: return typeFromLiteral(node);\n\t\tcase nodes.NodeType.FunctionArgument: return typeFromFunctionArgument(<nodes.FunctionArgument> node);\n\t}\n\n\treturn SimpleType.Unknown;\n}\n\nfunction typeFromExpression(node:nodes.Expression):IType {\n\tvar types:IType[] = node.getChildren().map((node) => {\n\t\treturn typeFromNode(node);\n\t});\n\tif(types.length === 0) {\n\t\treturn SimpleType.Unknown;\n\t} else if(types.length === 1) {\n\t\treturn types[0];\n\t} else {\n\t\treturn new MultiType(types);\n\t}\n}\n\nfunction typeFromBinaryExpression(node:nodes.BinaryExpression):IType {\n\tif(node.getRight()) {\n\t\treturn new MultiType([typeFromNode(node.getLeft()), typeFromNode(node.getRight())]);\n\t} else {\n\t\treturn typeFromNode(node.getLeft());\n\t}\n}\n\nfunction typeFromTerm(node:nodes.Term):IType {\n\tif(!node.getExpression()) {\n\t\treturn SimpleType.Unknown;\n\t} else {\n\t\treturn typeFromNode(node.getExpression());\n\t}\n}\n\nfunction typeFromFunctionArgument(node:nodes.FunctionArgument):IType {\n\tif(!node.getValue()) {\n\t\treturn SimpleType.Unknown;\n\t} else {\n\t\treturn typeFromNode(node.getValue());\n\t}\n}\n\nfunction typeFromFunction(node:nodes.Function):IType {\n\n\tswitch(node.getName()) {\n\t\tcase 'rgb':\n\t\tcase 'rgba':\n\t\tcase 'hsl':\n\t\tcase 'hsla':\n\t\t\treturn SimpleType.Color;\n\t\tcase 'url':\n\t\t\treturn SimpleType.Url;\n\t}\n\tvar types:IType[] = node.getArguments().getChildren().map((node) => {\n\t\treturn typeFromNode(node);\n\t});\n\tif(types.length === 0) {\n\t\treturn SimpleType.Unknown;\n\t} else if(types.length === 1) {\n\t\treturn types[0];\n\t} else {\n\t\treturn new MultiType(types);\n\t}\n}\n\nfunction typeFromNumeric(node:nodes.NumericValue):IType {\n\n\treturn new SimpleType((function(){\n\t\tvar value = node.getValue();\n\t\tswitch(value.unit) {\n\t\t\tcase '%':\n\t\t\t\treturn Type.Percentage;\n\t\t\tcase 'px':\n\t\t\tcase 'cm':\n\t\t\tcase 'mm':\n\t\t\tcase 'in':\n\t\t\tcase 'pt':\n\t\t\tcase 'pc':\n\t\t\t\treturn Type.Length;\n\t\t\tcase 's':\n\t\t\tcase 'ms':\n\t\t\t\treturn Type.Time;\n\t\t\tcase 'deg':\n\t\t\tcase 'rad':\n\t\t\tcase 'grad':\n\t\t\t\treturn Type.Angle;\n\t\t}\n\n\t\treturn Type.Number;\n\t}()));\n}\n\nfunction isColor(name:string):boolean {\n\treturn !!languageFacts.colors[name];\n}\n\nfunction typeFromLiteral(node:nodes.Node):IType {\n\tif(isColor(node.getText())) {\n\t\treturn SimpleType.Color;\n\t} else {\n\t\treturn SimpleType.Identifier;\n\t}\n}"]}