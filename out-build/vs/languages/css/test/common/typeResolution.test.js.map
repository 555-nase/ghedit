{"version":3,"file":"vs/languages/css/test/common/typeResolution.test.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/languages/css/test/common/typeResolution.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport assert = require('assert');\nimport nodes = require('vs/languages/css/common/parser/cssNodes');\nimport typeResolution = require('vs/languages/css/common/services/typeResolution');\nimport _parser = require('vs/languages/css/common/parser/cssParser');\n\nsuite('CSS - types', () => {\n\n\tfunction assertTypes(input:string, parser: _parser.Parser, f: ()=>nodes.Node, simple:boolean):void {\n\t\tvar node= parser.internalParse(input, f);\n\t\tvar type = typeResolution.typeFromNode(node);\n\t\tassert.equal(type.isSimpleType(), simple);\n\t}\n\n\ttest('simple types [term]', function() {\n\n\t\tvar parser = new _parser.Parser();\n\n\t\tassertTypes('3', parser, parser._parseTerm.bind(parser), true);\n\t\tassertTypes('3px', parser, parser._parseTerm.bind(parser), true);\n\t\tassertTypes('3pt', parser, parser._parseTerm.bind(parser), true);\n\t\tassertTypes('3mm', parser, parser._parseTerm.bind(parser), true);\n\t\tassertTypes('3in', parser, parser._parseTerm.bind(parser), true);\n\t\tassertTypes('3somedimension', parser, parser._parseTerm.bind(parser), true);\n\t\tassertTypes('3s', parser, parser._parseTerm.bind(parser), true);\n\t\tassertTypes('3ms', parser, parser._parseTerm.bind(parser), true);\n\n\t\tassertTypes('green', parser, parser._parseTerm.bind(parser), true);\n\t\tassertTypes('\"string\"', parser, parser._parseTerm.bind(parser), true);\n\t\tassertTypes('url(\"foo/bar\")', parser, parser._parseTerm.bind(parser), true);\n\t\tassertTypes('url(foo/bar)', parser, parser._parseTerm.bind(parser), true);\n\n\t\tassertTypes('rgba()', parser, parser._parseTerm.bind(parser), true);\n\t\tassertTypes('rgb()', parser, parser._parseTerm.bind(parser), true);\n\t\tassertTypes('hsl()', parser, parser._parseTerm.bind(parser), true);\n\t\tassertTypes('hsla()', parser, parser._parseTerm.bind(parser), true);\n\n\t\tassertTypes('somefunction()', parser, parser._parseTerm.bind(parser), true);\n\t\tassertTypes('calc()', parser, parser._parseTerm.bind(parser), true);\n\n\t\tassertTypes('calc(3px)', parser, parser._parseTerm.bind(parser), true);\n\t\tassertTypes('calc(3in)', parser, parser._parseTerm.bind(parser), true);\n\t});\n\n\ttest('multi types [expression]', function() {\n\n\t\tvar parser = new _parser.Parser();\n\t\tassertTypes('green', parser, parser._parseExpr.bind(parser), true);\n\t\tassertTypes('calc(3in, 3pc)', parser, parser._parseExpr.bind(parser), false);\n\t\tassertTypes('calc(3in 3pc)', parser, parser._parseExpr.bind(parser), false);\n\t\tassertTypes('3in 3pc', parser, parser._parseExpr.bind(parser), false);\n\t\tassertTypes('3in, 3pc', parser, parser._parseExpr.bind(parser), false);\n\t\tassertTypes('thin solid green', parser, parser._parseExpr.bind(parser), false);\n\t});\n});"]}