{"version":3,"file":"vs/languages/css/test/common/nodes.test.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/languages/css/test/common/nodes.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport assert = require('assert');\nimport nodes = require('vs/languages/css/common/parser/cssNodes');\nimport _parser = require('vs/languages/css/common/parser/cssParser');\n\nexport class PrintingVisitor implements nodes.IVisitor {\n\n\tpublic tree: string[] = [];\n\n\tpublic visitNode(node:nodes.Node):boolean {\n\t\tthis.tree.push(nodes.NodeType[node.type].toLowerCase());\n\t\treturn true;\n\t}\n}\n\nexport function assertNodes(fn:(input:string)=>nodes.Node, input:string, expected:string):void {\n\n\tvar node = fn(input),\n\t\tvisitor = new PrintingVisitor();\n\n\tnode.accept(visitor);\n\n\tvar actual = visitor.tree.join(',') + ',',\n\t\tsegments = expected.split(','),\n\t\toldIndex:number = undefined,\n\t\tindex = -1;\n\n\twhile(segments.length > 0) {\n\t\tvar segment = segments.shift();\n\t\tif(segment === '...') {\n\t\t\tcontinue;\n\t\t}\n\t\tindex = actual.indexOf(segment + ',', oldIndex);\n\t\tif(index <= oldIndex) {\n\t\t\tassert.ok(false, segment + ' NOT found in ' + actual);\n\t\t}\n\t\toldIndex = index + segment.length;\n\t}\n\n\tassert.ok(true);\n}\n\nsuite('CSS - Nodes', () => {\n\n\ttest('Nodes - Test Node', function() {\n\n\t\tvar node = new nodes.Node();\n\t\tassert.equal(node.offset, -1);\n\t\tassert.equal(node.length, -1);\n\t\tassert.equal(node.parent, null);\n\t\tassert.equal(node.getChildren().length, 0);\n\n\t\tvar c = 0;\n\t\tnode.accept((n:nodes.Node) => {\n\t\t\tassert.ok(n === node);\n\t\t\tc += 1;\n\t\t\treturn true;\n\t\t});\n\t\tassert.equal(c, 1);\n\n\t\tvar child = new nodes.Node();\n\t\tnode.adoptChild(child);\n\n\t\tc = 0;\n\t\tvar expects = [node, child];\n\t\tnode.accept((n:nodes.Node) => {\n\t\t\tassert.ok(n === expects[c]);\n\t\t\tc += 1;\n\t\t\treturn true;\n\t\t});\n\t\tassert.equal(c, 2);\n\t});\n\n\ttest('Nodes - Test Adopting', function() {\n\n\t\tvar child = new nodes.Node();\n\t\tvar p1 = new nodes.Node();\n\t\tvar p2 = new nodes.Node();\n\n\t\tassert.ok(child.parent === null);\n\t\tassert.equal(p1.getChildren().length, 0);\n\t\tassert.equal(p2.getChildren().length, 0);\n\n\t\tp1.adoptChild(child);\n\t\tassert.ok(child.parent === p1);\n\t\tassert.equal(p1.getChildren().length, 1);\n\t\tassert.equal(p2.getChildren().length, 0);\n\n\t\tp2.adoptChild(child);\n\t\tassert.ok(child.parent === p2);\n\t\tassert.equal(p1.getChildren().length, 0);\n\t\tassert.equal(p2.getChildren().length, 1);\n\t});\n\n\tfunction ruleset(input:string):nodes.RuleSet{\n\t\tvar parser = new _parser.Parser();\n\t\tvar node = parser.internalParse(input, parser._parseRuleset);\n\t\treturn node;\n\t}\n\n\ttest('nodes - RuleSet', function() {\n\t\tassertNodes(ruleset, 'selector { prop: value }', 'ruleset,...,selector,...,declaration,...,property,...,expression');\n\t\tassertNodes(ruleset, 'selector { prop; }', 'ruleset,...,selector,...,selector');\n\t});\n\n\ttest('nodes - Keyframe', function() {\n\t\tfunction fn(input:string):nodes.Node {\n\t\t\tvar parser = new _parser.Parser();\n\t\t\tvar node = parser.internalParse(input, parser._parseKeyframe);\n\t\t\treturn node;\n\t\t};\n\t\tassertNodes(fn, '@keyframes name { from { top: 0px} to { top: 100px } }', 'keyframe,identifier,keyframeselector,declaration,keyframeselector,declaration');\n\t});\n});"]}