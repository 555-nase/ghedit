{"version":3,"file":"vs/languages/css/test/common/symbols.test.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/languages/css/test/common/symbols.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport assert = require('assert');\nimport symbols = require('vs/languages/css/common/parser/cssSymbols');\nimport nodes = require('vs/languages/css/common/parser/cssNodes');\nimport parser = require('vs/languages/css/common/parser/cssParser');\nimport occurrences = require('vs/languages/css/common/services/occurrences');\nimport workerTests = require('./css-worker.test');\n\nexport function assertScopesAndSymbols(p: parser.Parser, input:string, expected:string):void {\n\tvar global = createScope(p, input);\n\tassert.equal(scopeToString(global), expected);\n}\n\nexport function assertOccurrences(p: parser.Parser, input:string, marker:string, expectedMatches:number, expectedWrites:number, type: nodes.ReferenceType):void {\n\tvar stylesheet =  p.parseStylesheet(workerTests.mockMirrorModel(input));\n\tassertNoErrors(stylesheet);\n\n\tvar index = input.indexOf(marker) + marker.length;\n\n\tvar os = occurrences.findOccurrences(stylesheet, index);\n\tassert.equal(os.length, expectedMatches);\n\n\tassert.equal(os[0].type, type);\n\n\tvar nWrites = 0;\n\tfor (var index = 0; index < os.length; index++) {\n\t\tif (os[index].kind === 'write') {\n\t\t\tnWrites++;\n\t\t}\n\t}\n\tassert.equal(nWrites, expectedWrites);\n}\n\n\nexport function assertSymbolsInScope(p: parser.Parser, input:string, offset:number, ...selections:{name:string;type:nodes.ReferenceType}[]):void {\n\n\tvar global = createScope(p, input);\n\n\tvar scope = global.findScope(offset);\n\n\tvar getErrorMessage = function(name: string) {\n\t\tvar all = 'symbol ' + name + ' not found. In scope: ';\n\t\tscope.getSymbols().forEach((sym) => { all += (sym.name + ' '); });\n\t\treturn all;\n\t};\n\n\tfor (var i = 0; i < selections.length; i++) {\n\t\tvar selection =  selections[i];\n\t\tvar sym = scope.getSymbol(selection.name, selection.type);\n\t\tassert.ok(!!sym, getErrorMessage(selection.name));\n\t}\n}\n\nexport function assertScopeBuilding(p: parser.Parser, input:string, ...scopes:{offset:number; length:number;}[]):void {\n\n\tvar global = createScope(p, input);\n\n\tfunction assertChildren(scope:symbols.Scope):void {\n\n\t\tscope.children.forEach((scope) => {\n\n\t\t\t// check bounds\n\t\t\tvar expected = scopes.shift();\n\t\t\tassert.equal(scope.offset, expected.offset);\n\t\t\tassert.equal(scope.length, expected.length);\n\n\t\t\t// recursive descent\n\t\t\tassertChildren(scope);\n\t\t});\n\t}\n\n\tassertChildren(global);\n\n\tassert.equal(scopes.length, 0, 'remainig scopes: ' + scopes.join());\n}\n\nfunction scopeToString(scope: symbols.Scope): string {\n\tvar str = '';\n\tvar symbols = scope.getSymbols();\n\tfor (var index = 0; index < symbols.length; index++) {\n\t\tif (str.length > 0) {\n\t\t\tstr += ',';\n\t\t}\n\t\tstr += symbols[index].name;\n\t}\n\tvar scopes = scope.children;\n\tfor (var index = 0; index < scopes.length; index++) {\n\t\tif (str.length > 0) {\n\t\t\tstr += ',';\n\t\t}\n\t\tstr += ('[' + scopeToString(scopes[index]) + ']');\n\t}\n\treturn str;\n}\n\nfunction assertNoErrors(node: nodes.Node) : void {\n\tvar markers = nodes.ParseErrorCollector.entries(node);\n\tif (markers.length > 0) {\n\t\tassert.ok(false, 'node has errors: ' + markers[0].getMessage() + ', offset: ' +  markers[0].getNode().offset);\n\t}\n}\n\nfunction createScope(p: parser.Parser, input:string) : symbols.Scope {\n\tvar styleSheet = p.parseStylesheet(workerTests.mockMirrorModel(input)),\n\t\tglobal = new symbols.GlobalScope(),\n\t\tbuilder = new symbols.ScopeBuilder(global);\n\n\tassertNoErrors(styleSheet);\n\tstyleSheet.accept(builder);\n\treturn global;\n}\n\nsuite('CSS - symbols', () => {\n\n\ttest('scope creation', function() {\n\n\t\tvar global = new symbols.GlobalScope(),\n\t\t\tchild1 = new symbols.Scope(10, 5),\n\t\t\tchild2 = new symbols.Scope(15, 5);\n\n\t\tglobal.addChild(child1);\n\t\tglobal.addChild(child2);\n\n\t\tassert.equal(global.children.length, 2);\n\t\tassert.ok(child1.parent === global);\n\t\tassert.ok(child2.parent === global);\n\n\t\t// find children\n\t\tassert.ok(global.findScope(-1) === null);\n\t\tassert.ok(global.findScope(0) === global);\n\t\tassert.ok(global.findScope(10) === child1);\n\t\tassert.ok(global.findScope(14) === child1);\n\t\tassert.ok(global.findScope(15) === child2);\n\t\tassert.ok(global.findScope(19) === child2);\n\t\tassert.ok(global.findScope(19).parent === global);\n\t});\n\n\ttest('scope building', function() {\n\t\tvar p = new parser.Parser();\n\t\tassertScopeBuilding(p, '.class {}', { offset: 7, length: 2});\n\t\tassertScopeBuilding(p, '.class {} .class {}', { offset: 7, length: 2 }, { offset: 17, length: 2 });\n\t});\n\n\ttest('symbols in scopes', function() {\n\t\tvar p = new parser.Parser();\n\t\tassertSymbolsInScope(p, '@keyframes animation {};', 0, {name:'animation', type:nodes.ReferenceType.Keyframe});\n\t\tassertSymbolsInScope(p, ' .class1 {} .class2 {}', 0, {name:'.class1', type:nodes.ReferenceType.Rule}, {name:'.class2', type:nodes.ReferenceType.Rule});\n\t});\n\n\ttest('scopes and symbols', function() {\n\t\tvar p = new parser.Parser();\n\t\tassertScopesAndSymbols(p, '.class {}', '.class,[]');\n\t\tassertScopesAndSymbols(p, '@keyframes animation {}; .class {}', 'animation,.class,[],[]');\n\t\tassertScopesAndSymbols(p, '@page :pseudo-class { margin:2in; }', '[]');\n\t\tassertScopesAndSymbols(p, '@media print { body { font-size: 10pt } }', '[body,[]]');\n\t\tassertScopesAndSymbols(p, '@-moz-keyframes identifier { 0% { top: 0; } 50% { top: 30px; left: 20px; }}', 'identifier,[[],[]]');\n\t\tassertScopesAndSymbols(p, '@font-face { font-family: \"Bitstream Vera Serif Bold\"; }', '[]');\n\t});\n\n\ttest('mark occurrences', function() {\n\t\tvar p = new parser.Parser();\n\t\tassertOccurrences(p, '@keyframes id {}; #main { animation: /**/id 4s linear 0s infinite alternate; }', '/**/', 2, 1, nodes.ReferenceType.Keyframe);\n\t\tassertOccurrences(p, '@keyframes id {}; #main { animation-name: /**/id; foo: id;}', '/**/', 2, 1, nodes.ReferenceType.Keyframe);\n\t});\n});"]}