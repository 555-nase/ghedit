{"version":3,"file":"vs/languages/json/common/features/jsonFormatter.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/languages/json/common/features/jsonFormatter.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport Json = require('vs/base/common/json');\nimport EditorCommon = require('vs/editor/common/editorCommon');\nimport Modes = require('vs/editor/common/modes');\n\nexport function format(model: EditorCommon.IMirrorModel, range: EditorCommon.IRange, options: Modes.IFormattingOptions): EditorCommon.ISingleEditOperation[] {\n\tvar initialIndentLevel: number;\n\tvar value: string;\n\tvar rangeOffset: number;\n\tif (range) {\n\t\trange = { startLineNumber: range.startLineNumber, startColumn: 1, endLineNumber: range.endLineNumber, endColumn: model.getLineMaxColumn(range.endLineNumber) }; // extend to full range\n\t\tinitialIndentLevel = computeIndentLevel(model.getLineContent(range.startLineNumber), options);\n\t\tvalue = model.getValueInRange(range);\n\t\trangeOffset = model.getOffsetFromPosition({ lineNumber: range.startLineNumber, column: range.startColumn });\n\t} else {\n\t\trange = model.getFullModelRange();\n\t\tinitialIndentLevel = 0;\n\t\tvalue = model.getValue();\n\t\trangeOffset = 0;\n\t}\n\n\tvar lineBreak = false;\n\tvar indentLevel = 0;\n\tvar indentValue: string;\n\tif (options.insertSpaces) {\n\t\tindentValue = repeat(' ', options.tabSize);\n\t} else {\n\t\tindentValue = '\\t';\n\t}\n\n\tvar scanner = Json.createScanner(value, false);\n\n\tfunction newLineAndIndent(): string {\n\t\treturn model.getEOL() + repeat(indentValue, initialIndentLevel + indentLevel);\n\t}\n\tfunction scanNext(): Json.SyntaxKind {\n\t\tvar token = scanner.scan();\n\t\tlineBreak = false;\n\t\twhile (token === Json.SyntaxKind.Trivia || token === Json.SyntaxKind.LineBreakTrivia) {\n\t\t\tlineBreak = lineBreak || (token === Json.SyntaxKind.LineBreakTrivia);\n\t\t\ttoken = scanner.scan();\n\t\t}\n\t\treturn token;\n\t}\n\tvar editOperations: EditorCommon.ISingleEditOperation[] = [];\n\tfunction addEdit(text: string, range: EditorCommon.IRange) {\n\t\tif (model.getValueInRange(range) !== text) {\n\t\t\teditOperations.push({ range: range, text: text });\n\t\t}\n\t}\n\n\tvar firstToken = scanNext();\n\tif (firstToken !== Json.SyntaxKind.EOF) {\n\t\tvar firstTokenStart = model.getPositionFromOffset(scanner.getTokenOffset() + rangeOffset);\n\t\tvar initialIndent = repeat(indentValue, initialIndentLevel);\n\t\taddEdit(initialIndent, { startLineNumber: range.startLineNumber, startColumn: range.startColumn, endLineNumber: firstTokenStart.lineNumber, endColumn: firstTokenStart.column });\n\t}\n\n\twhile (firstToken !== Json.SyntaxKind.EOF) {\n\t\tvar firstTokenEnd = model.getPositionFromOffset(scanner.getTokenOffset() + scanner.getTokenLength() + rangeOffset);\n\t\tvar secondToken = scanNext();\n\n\t\twhile (!lineBreak && (secondToken === Json.SyntaxKind.LineCommentTrivia || secondToken === Json.SyntaxKind.BlockCommentTrivia)) {\n\t\t\t// comments on the same line: keep them on the same line, but ignore them otherwise\n\t\t\tvar commentTokenStart = model.getPositionFromOffset(scanner.getTokenOffset() + rangeOffset);\n\t\t\taddEdit(' ', { startLineNumber: firstTokenEnd.lineNumber, startColumn: firstTokenEnd.column, endLineNumber: commentTokenStart.lineNumber, endColumn: commentTokenStart.column });\n\t\t\tfirstTokenEnd = model.getPositionFromOffset(scanner.getTokenOffset() + scanner.getTokenLength() + rangeOffset);\n\t\t\tsecondToken = scanNext();\n\t\t}\n\t\tvar replaceContent = '';\n\t\tif (secondToken === Json.SyntaxKind.CloseBraceToken) {\n\t\t\tif (firstToken !== Json.SyntaxKind.OpenBraceToken) {\n\t\t\t\tindentLevel--;\n\t\t\t\treplaceContent = newLineAndIndent();\n\t\t\t}\n\t\t} else if (secondToken === Json.SyntaxKind.CloseBracketToken) {\n\t\t\tif (firstToken !== Json.SyntaxKind.OpenBracketToken) {\n\t\t\t\tindentLevel--;\n\t\t\t\treplaceContent = newLineAndIndent();\n\t\t\t}\n\t\t} else {\n\t\t\tswitch (firstToken) {\n\t\t\t\tcase Json.SyntaxKind.OpenBracketToken:\n\t\t\t\tcase Json.SyntaxKind.OpenBraceToken:\n\t\t\t\t\tindentLevel++;\n\t\t\t\t\treplaceContent = newLineAndIndent();\n\t\t\t\t\tbreak;\n\t\t\t\tcase Json.SyntaxKind.CommaToken:\n\t\t\t\tcase Json.SyntaxKind.LineCommentTrivia:\n\t\t\t\t\treplaceContent = newLineAndIndent();\n\t\t\t\t\tbreak;\n\t\t\t\tcase Json.SyntaxKind.BlockCommentTrivia:\n\t\t\t\t\tif (lineBreak) {\n\t\t\t\t\t\treplaceContent = newLineAndIndent();\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// symbol following comment on the same line: keep on same line, separate with ' '\n\t\t\t\t\t\treplaceContent = ' ';\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase Json.SyntaxKind.ColonToken:\n\t\t\t\t\treplaceContent = ' ';\n\t\t\t\t\tbreak;\n\t\t\t\tcase Json.SyntaxKind.NullKeyword:\n\t\t\t\tcase Json.SyntaxKind.TrueKeyword:\n\t\t\t\tcase Json.SyntaxKind.FalseKeyword:\n\t\t\t\tcase Json.SyntaxKind.NumericLiteral:\n\t\t\t\t\tif (secondToken === Json.SyntaxKind.NullKeyword || secondToken === Json.SyntaxKind.FalseKeyword || secondToken === Json.SyntaxKind.NumericLiteral) {\n\t\t\t\t\t\treplaceContent = ' ';\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (lineBreak && (secondToken === Json.SyntaxKind.LineCommentTrivia || secondToken === Json.SyntaxKind.BlockCommentTrivia)) {\n\t\t\t\treplaceContent = newLineAndIndent();\n\t\t\t}\n\n\t\t}\n\t\tvar secondTokenStart = model.getPositionFromOffset(scanner.getTokenOffset() + rangeOffset);\n\t\taddEdit(replaceContent, { startLineNumber: firstTokenEnd.lineNumber, startColumn: firstTokenEnd.column, endLineNumber: secondTokenStart.lineNumber, endColumn: secondTokenStart.column });\n\t\tfirstToken = secondToken;\n\t}\n\treturn editOperations;\n}\n\nfunction repeat(s:string, count: number): string {\n\tvar result = '';\n\tfor (var i = 0; i < count; i++) {\n\t\tresult += s;\n\t}\n\treturn result;\n}\n\nfunction computeIndentLevel(line: string, options: Modes.IFormattingOptions): number {\n\tvar i = 0;\n\tvar nChars = 0;\n\tvar tabSize = options.tabSize || 4;\n\twhile (i < line.length) {\n\t\tvar ch = line.charAt(i);\n\t\tif (ch === ' ') {\n\t\t\tnChars++;\n\t\t} else if (ch === '\\t') {\n\t\t\tnChars += tabSize;\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\treturn Math.floor(nChars / tabSize);\n}"]}