{"version":3,"sources":["vs/languages/json/common/contributions/globPatternContribution.ts"],"names":[],"mappings":"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","file":"vs/languages/json/common/contributions/globPatternContribution.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport HtmlContent = require('vs/base/common/htmlContent');\nimport Strings = require('vs/base/common/strings');\nimport Modes = require('vs/editor/common/modes');\nimport WinJS = require('vs/base/common/winjs.base');\nimport nls = require('vs/nls');\nimport JSONWorker = require('vs/languages/json/common/jsonWorker');\nimport URI from 'vs/base/common/uri';\nimport {JSONLocation} from 'vs/languages/json/common/parser/jsonLocation';\n\nvar globProperties:Modes.ISuggestion[] = [\n\t{ type: 'value', label: nls.localize('fileLabel', \"Files by Extension\"), codeSnippet: '\"**/*.{{extension}}\": true', documentationLabel: nls.localize('fileDescription', \"Match all files of a specific file extension.\")},\n\t{ type: 'value', label: nls.localize('filesLabel', \"Files with Multiple Extensions\"), codeSnippet: '\"**/*.{ext1,ext2,ext3}\": true', documentationLabel: nls.localize('filesDescription', \"Match all files with any of the file extensions.\")},\n\t{ type: 'value', label: nls.localize('derivedLabel', \"Files with Siblings by Name\"), codeSnippet: '\"**/*.{{source-extension}}\": { \"when\": \"$(basename).{{target-extension}}\" }', documentationLabel: nls.localize('derivedDescription', \"Match files that have siblings with the same name but a different extension.\")},\n\t{ type: 'value', label: nls.localize('topFolderLabel', \"Folder by Name (Top Level)\"), codeSnippet: '\"{{name}}\": true', documentationLabel: nls.localize('topFolderDescription', \"Match a top level folder with a specific name.\")},\n\t{ type: 'value', label: nls.localize('topFoldersLabel', \"Folders with Multiple Names (Top Level)\"), codeSnippet: '\"{folder1,folder2,folder3}\": true', documentationLabel: nls.localize('topFoldersDescription', \"Match multiple top level folders.\")},\n\t{ type: 'value', label: nls.localize('folderLabel', \"Folder by Name (Any Location)\"), codeSnippet: '\"**/{{name}}\": true', documentationLabel: nls.localize('folderDescription', \"Match a folder with a specific name in any location.\")},\n];\n\nvar globValues:Modes.ISuggestion[] = [\n\t{ type: 'value', label: nls.localize('trueLabel', \"True\"), codeSnippet: 'true', documentationLabel: nls.localize('trueDescription', \"Enable the pattern.\")},\n\t{ type: 'value', label: nls.localize('falseLabel', \"False\"), codeSnippet: 'false', documentationLabel: nls.localize('falseDescription', \"Disable the pattern.\")},\n\t{ type: 'value', label: nls.localize('derivedLabel', \"Files with Siblings by Name\"), codeSnippet: '{ \"when\": \"$(basename).{{extension}}\" }', documentationLabel: nls.localize('siblingsDescription', \"Match files that have siblings with the same name but a different extension.\")}\n];\n\nexport class GlobPatternContribution implements JSONWorker.IJSONWorkerContribution {\n\n\tconstructor() {\n\t}\n\n\tprivate isSettingsFile(resource: URI): boolean {\n\t\tvar path = resource.path;\n\t\treturn Strings.endsWith(path, '/settings.json');\n\t}\n\n\tpublic collectDefaultSuggestions(resource: URI, result: JSONWorker.ISuggestionsCollector): WinJS.Promise {\n\t\treturn null;\n\t}\n\n\tpublic collectPropertySuggestions(resource: URI, location: JSONLocation, currentWord: string, addValue: boolean, isLast:boolean, result: JSONWorker.ISuggestionsCollector) : WinJS.Promise {\n\t\tif (this.isSettingsFile(resource) && (location.matches(['files.exclude']) || location.matches(['search.exclude']))) {\n\n\t\t\tglobProperties.forEach((e) => result.add(e));\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tpublic collectValueSuggestions(resource: URI, location: JSONLocation, currentKey: string, result: JSONWorker.ISuggestionsCollector): WinJS.Promise {\n\t\tif (this.isSettingsFile(resource) && (location.matches(['files.exclude']) || location.matches(['search.exclude']))) {\n\n\t\t\tglobValues.forEach((e) => result.add(e));\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tpublic getInfoContribution(resource: URI, location: JSONLocation): WinJS.TPromise<HtmlContent.IHTMLContentElement[]> {\n\t\treturn null;\n\t}\n}"]}