{"version":3,"file":"vs/languages/less/test/common/scanner.test.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/languages/less/test/common/scanner.test.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;IAEhG,YAAY,CAAC;IAMb,2BAA2B,MAAc,EAAE,GAAW,EAAE,MAAc,EAAE,IAAY,EAAE,IAAuB;QAC5G,IAAI,IAAI,GAAG,IAAI,WAAW,CAAC,WAAW,EAAE,CAAC;QACzC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;QACvB,IAAI,KAAK,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC;QACxB,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;QAC7B,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;QACnC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QAC/B,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IAChC,CAAC;IAGD,KAAK,CAAC,gBAAgB,EAAE;QAEvB,IAAI,CAAC,yBAAyB,EAAE;YAC/B,iBAAiB,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,OAAO,CAAC,SAAS,CAAC,oBAAoB,CAAC,CAAC;YAC1E,iBAAiB,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,OAAO,CAAC,SAAS,CAAC,oBAAoB,CAAC,CAAC;YAC5E,iBAAiB,CAAC,kBAAkB,EAAE,EAAE,EAAE,CAAC,EAAE,kBAAkB,EAAE,OAAO,CAAC,SAAS,CAAC,iBAAiB,CAAC,CAAC;YACtG,iBAAiB,CAAC,mBAAmB,EAAE,EAAE,EAAE,CAAC,EAAE,mBAAmB,EAAE,OAAO,CAAC,SAAS,CAAC,iBAAiB,CAAC,CAAC;QACzG,CAAC,CAAC,CAAC;QAEH,4BAA4B;QAC5B,IAAI,CAAC,8BAA8B,EAAE;YACpC,iBAAiB,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;YACzD,iBAAiB,CAAC,0BAA0B,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;YAChF,iBAAiB,CAAC,2BAA2B,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;YACjF,iBAAiB,CAAC,iBAAiB,EAAE,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;YAC1E,iBAAiB,CAAC,4CAA4C,EAAE,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;QACtG,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport assert = require('assert');\nimport scanner = require('vs/languages/css/common/parser/cssScanner');\nimport lessScanner = require('vs/languages/less/common/parser/lessScanner');\n\nfunction assertSingleToken(source: string, len: number, offset: number, text: string, type: scanner.TokenType):void {\n\tvar scan = new lessScanner.LessScanner();\n\tscan.setSource(source);\n\tvar token = scan.scan();\n\tassert.equal(token.len, len);\n\tassert.equal(token.offset, offset);\n\tassert.equal(token.text, text);\n\tassert.equal(token.type, type);\n}\n\n\nsuite('LESS - Scanner', () => {\n\n\ttest('Test Escaped JavaScript', function() {\n\t\tassertSingleToken('`', 1, 0, '`', scanner.TokenType.BadEscapedJavaScript);\n\t\tassertSingleToken('`a', 2, 0, '`a', scanner.TokenType.BadEscapedJavaScript);\n\t\tassertSingleToken('`var a = \"ssss\"`', 16, 0, '`var a = \"ssss\"`', scanner.TokenType.EscapedJavaScript);\n\t\tassertSingleToken('`var a = \"ss\\ns\"`', 16, 0, '`var a = \"ss\\ns\"`', scanner.TokenType.EscapedJavaScript);\n\t});\n\n\t// less deactivated comments\n\ttest('Test Token SingleLineComment', function() {\n\t\tassertSingleToken('//', 0, 2, '', scanner.TokenType.EOF);\n\t\tassertSingleToken('//this is a comment test', 0, 24, '', scanner.TokenType.EOF);\n\t\tassertSingleToken('// this is a comment test', 0, 25, '', scanner.TokenType.EOF);\n\t\tassertSingleToken('// this is a\\na', 1, 13, 'a', scanner.TokenType.Ident);\n\t\tassertSingleToken('// this is a\\n// more\\n   \\n/* comment */a', 1, 38, 'a', scanner.TokenType.Ident);\n\t});\n});\n"]}