{"version":3,"file":"numbers.js","sourceRoot":"","sources":["../../../../src/vs/base/common/numbers.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;IAEhG,YAAY,CAAC;IAQb,eAAsB,QAAgB,EAAE,YAAsC,EAAE,QAAyB;QACxG,IAAI,IAAY,EAAE,EAAU,CAAC;QAE7B,EAAE,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;YAClC,IAAI,GAAG,QAAQ,CAAC;YAChB,EAAE,GAAY,YAAY,CAAC;QAC5B,CAAC;QAAC,IAAI,CAAC,CAAC;YACP,IAAI,GAAG,CAAC,CAAC;YACT,EAAE,GAAG,QAAQ,CAAC;YACd,QAAQ,GAAoB,YAAY,CAAC;QAC1C,CAAC;QAED,IAAI,EAAE,GAAG,IAAI,IAAI,EAAE,GAAG,UAAC,CAAS,IAAK,OAAA,CAAC,GAAG,CAAC,EAAL,CAAK,GAAG,UAAC,CAAS,IAAK,OAAA,CAAC,GAAG,CAAC,EAAL,CAAK,CAAC;QAClE,IAAI,GAAG,GAAG,IAAI,IAAI,EAAE,GAAG,UAAC,CAAS,EAAE,CAAS,IAAK,OAAA,CAAC,GAAG,CAAC,EAAL,CAAK,GAAG,UAAC,CAAS,EAAE,CAAS,IAAK,OAAA,CAAC,GAAG,CAAC,EAAL,CAAK,CAAC;QAEzF,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,IAAI,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;YAC1C,QAAQ,CAAC,CAAC,CAAC,CAAC;QACb,CAAC;IACF,CAAC;IAlBe,aAAK,QAkBpB,CAAA;IAID,sBAA6B,QAAgB,EAAE,EAAW;QACzD,IAAI,MAAM,GAAa,EAAE,CAAC;QAC1B,IAAI,EAAE,GAAG,UAAC,CAAS,IAAK,OAAA,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAd,CAAc,CAAC;QAEvC,EAAE,CAAC,CAAC,KAAK,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAC3B,KAAK,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;QACrB,CAAC;QAAC,IAAI,CAAC,CAAC;YACP,KAAK,CAAC,QAAQ,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;QACzB,CAAC;QAED,MAAM,CAAC,MAAM,CAAC;IACf,CAAC;IAXe,oBAAY,eAW3B,CAAA","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport types = require('vs/base/common/types');\n\nexport type NumberCallback = (index: number)=>void;\n\nexport function count(to: number, callback: NumberCallback): void;\nexport function count(from: number, to: number, callback: NumberCallback): void;\nexport function count(fromOrTo: number, toOrCallback?: NumberCallback | number, callback?: NumberCallback): any {\n\tvar from: number, to: number;\n\n\tif (types.isNumber(toOrCallback)) {\n\t\tfrom = fromOrTo;\n\t\tto = <number> toOrCallback;\n\t} else {\n\t\tfrom = 0;\n\t\tto = fromOrTo;\n\t\tcallback = <NumberCallback> toOrCallback;\n\t}\n\n\tvar op = from <= to ? (i: number) => i + 1 : (i: number) => i - 1;\n\tvar cmp = from <= to ? (a: number, b: number) => a < b : (a: number, b: number) => a > b;\n\n\tfor (var i = from; cmp(i, to); i = op(i)) {\n\t\tcallback(i);\n\t}\n}\n\nexport function countToArray(to: number): number[];\nexport function countToArray(from: number, to: number): number[];\nexport function countToArray(fromOrTo: number, to?: number): number[] {\n\tvar result: number[] = [];\n\tvar fn = (i: number) => result.push(i);\n\n\tif (types.isUndefined(to)) {\n\t\tcount(fromOrTo, fn);\n\t} else {\n\t\tcount(fromOrTo, to, fn);\n\t}\n\n\treturn result;\n}\n"]}