{"version":3,"file":"marshalling.js","sourceRoot":"","sources":["../../../../src/vs/base/common/marshalling.ts"],"names":[],"mappings":";IAAA;;;oGAGgG;IAChG,YAAY,CAAC;IAIb,mBAA0B,GAAQ;QACjC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;IACtC,CAAC;IAFe,iBAAS,YAExB,CAAA;IAED,eAAsB,IAAY;QACjC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IAClC,CAAC;IAFe,aAAK,QAEpB,CAAA;IAMD,kBAAkB,GAAW,EAAE,KAAU;QACxC,gCAAgC;QAChC,EAAE,CAAC,CAAC,KAAK,YAAY,MAAM,CAAC,CAAC,CAAC;YAC7B,MAAM,CAAC;gBACN,IAAI,EAAE,CAAC;gBACP,MAAM,EAAW,KAAM,CAAC,MAAM;gBAC9B,KAAK,EAAE,CAAU,KAAM,CAAC,MAAM,GAAG,GAAG,GAAG,EAAE,CAAC,GAAG,CAAU,KAAM,CAAC,UAAU,GAAG,GAAG,GAAG,EAAE,CAAC,GAAG,CAAU,KAAM,CAAC,SAAS,GAAG,GAAG,GAAG,EAAE,CAAC;aAC7H,CAAC;QACH,CAAC;QACD,MAAM,CAAC,KAAK,CAAC;IACd,CAAC;IAGD,iBAAiB,GAAW,EAAE,KAAU;QACvC,IAAI,gBAAwB,CAAC;QAC7B,EAAE,CAAC,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,KAAK,IAAI,CAAC,CAAC,CAAC;YACxC,gBAAgB,GAAsB,KAAM,CAAC,IAAI,CAAC;QACnD,CAAC;QACD,EAAE,CAAC,CAAC,gBAAgB,KAAK,CAAC,CAAC,CAAC,CAAC;YAC5B,MAAM,CAAC,aAAG,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAC1B,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,gBAAgB,KAAK,CAAC,CAAC,CAAC,CAAC;YACnC,MAAM,CAAC,IAAI,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC;QAC9C,CAAC;QAAC,IAAI,CAAC,CAAC;YACP,MAAM,CAAC,KAAK,CAAC;QACd,CAAC;IACF,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport URI from 'vs/base/common/uri';\n\nexport function stringify(obj: any): string {\n\treturn JSON.stringify(obj, replacer);\n}\n\nexport function parse(text: string): any {\n\treturn JSON.parse(text, reviver);\n}\n\ninterface MarshalledObject {\n\t$mid: number;\n}\n\nfunction replacer(key: string, value: any): any {\n\t// URI is done via toJSON-member\n\tif (value instanceof RegExp) {\n\t\treturn {\n\t\t\t$mid: 2,\n\t\t\tsource: (<RegExp>value).source,\n\t\t\tflags: ((<RegExp>value).global ? 'g' : '') + ((<RegExp>value).ignoreCase ? 'i' : '') + ((<RegExp>value).multiline ? 'm' : ''),\n\t\t};\n\t}\n\treturn value;\n}\n\n\nfunction reviver(key: string, value: any): any {\n\tlet marshallingConst: number;\n\tif (value !== void 0 && value !== null) {\n\t\tmarshallingConst = (<MarshalledObject>value).$mid;\n\t}\n\tif (marshallingConst === 1) {\n\t\treturn URI.revive(value);\n\t} else if (marshallingConst === 2) {\n\t\treturn new RegExp(value.source, value.flags);\n\t} else {\n\t\treturn value;\n\t}\n}\n"]}