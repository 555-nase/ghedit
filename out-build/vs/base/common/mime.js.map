{"version":3,"file":"vs/base/common/mime.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/base/common/mime.ts"],"names":[],"mappings":";IAAA;;;oGAGgG;IAChG,YAAY,CAAC;IAOF,iBAAS,GAAG,YAAY,CAAC;IACzB,mBAAW,GAAG,0BAA0B,CAAC;IACzC,oBAAY,GAAG,qBAAqB,CAAC;IAWhD,IAAI,sBAAsB,GAA2B,EAAE,CAAC;IAExD;;OAEG;IACH,0BAAiC,WAAiC;QAEjE,WAAW;QACX,sBAAsB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAEzC,mEAAmE;QACnE,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC,cAAc,CAAC,CAAC,CAAC;YACjC,sBAAsB,CAAC,OAAO,CAAC,UAAA,CAAC;gBAC/B,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,WAAW,CAAC,IAAI,IAAI,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC;oBACrD,MAAM,CAAC,CAAC,oCAAoC;gBAC7C,CAAC;gBAED,EAAE,CAAC,CAAC,WAAW,CAAC,SAAS,IAAI,CAAC,CAAC,SAAS,KAAK,WAAW,CAAC,SAAS,CAAC,CAAC,CAAC;oBACpE,OAAO,CAAC,IAAI,CAAC,6BAA2B,WAAW,CAAC,SAAS,kCAA6B,WAAW,CAAC,IAAI,OAAI,CAAC,CAAC;gBACjH,CAAC;gBAED,EAAE,CAAC,CAAC,WAAW,CAAC,QAAQ,IAAI,CAAC,CAAC,QAAQ,KAAK,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC;oBACjE,OAAO,CAAC,IAAI,CAAC,4BAA0B,WAAW,CAAC,QAAQ,kCAA6B,WAAW,CAAC,IAAI,OAAI,CAAC,CAAC;gBAC/G,CAAC;gBAED,EAAE,CAAC,CAAC,WAAW,CAAC,WAAW,IAAI,CAAC,CAAC,WAAW,KAAK,WAAW,CAAC,WAAW,CAAC,CAAC,CAAC;oBAC1E,OAAO,CAAC,IAAI,CAAC,+BAA6B,WAAW,CAAC,WAAW,kCAA6B,WAAW,CAAC,IAAI,OAAI,CAAC,CAAC;gBACrH,CAAC;gBAED,EAAE,CAAC,CAAC,WAAW,CAAC,SAAS,IAAI,CAAC,CAAC,SAAS,KAAK,WAAW,CAAC,SAAS,CAAC,CAAC,CAAC;oBACpE,OAAO,CAAC,IAAI,CAAC,6BAA2B,WAAW,CAAC,SAAS,kCAA6B,WAAW,CAAC,IAAI,OAAI,CAAC,CAAC;gBACjH,CAAC;YACF,CAAC,CAAC,CAAC;QACJ,CAAC;IACF,CAAC;IA7Be,wBAAgB,mBA6B/B,CAAA;IAED;;OAEG;IACH,wBAA+B,kBAA4B;QAC1D,EAAE,CAAC,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC;YACzB,sBAAsB,GAAG,EAAE,CAAC;QAC7B,CAAC;QAAC,IAAI,CAAC,CAAC;YACP,sBAAsB,GAAG,sBAAsB,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,CAAC,cAAc,EAAjB,CAAiB,CAAC,CAAC;QAChF,CAAC;IACF,CAAC;IANe,sBAAc,iBAM7B,CAAA;IAED;;OAEG;IACH,wBAA+B,IAAY,EAAE,SAAkB;QAC9D,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;YACX,MAAM,CAAC,CAAC,oBAAY,CAAC,CAAC;QACvB,CAAC;QAED,IAAI,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;QAE1B,qDAAqD;QACrD,IAAI,cAAc,GAAG,mBAAmB,CAAC,IAAI,EAAE,sBAAsB,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,cAAc,EAAhB,CAAgB,CAAC,CAAC,CAAC;QACrG,EAAE,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC;YACpB,MAAM,CAAC,CAAC,cAAc,EAAE,iBAAS,CAAC,CAAC;QACpC,CAAC;QAED,+CAA+C;QAC/C,IAAI,cAAc,GAAG,mBAAmB,CAAC,IAAI,EAAE,sBAAsB,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,CAAC,cAAc,EAAjB,CAAiB,CAAC,CAAC,CAAC;QACtG,EAAE,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC;YACpB,MAAM,CAAC,CAAC,cAAc,EAAE,iBAAS,CAAC,CAAC;QACpC,CAAC;QAED,oCAAoC;QACpC,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;YACf,IAAI,aAAa,GAAG,wBAAwB,CAAC,SAAS,CAAC,CAAC;YACxD,EAAE,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;gBACnB,MAAM,CAAC,CAAC,aAAa,EAAE,iBAAS,CAAC,CAAC;YACnC,CAAC;QACF,CAAC;QAED,MAAM,CAAC,CAAC,oBAAY,CAAC,CAAC;IACvB,CAAC;IA5Be,sBAAc,iBA4B7B,CAAA;IAED,6BAA6B,IAAY,EAAE,YAAoC;QAC9E,IAAI,QAAQ,GAAG,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QAEpC,IAAI,aAAmC,CAAC;QACxC,IAAI,YAAkC,CAAC;QACvC,IAAI,cAAoC,CAAC;QAEzC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,YAAY,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YAC9C,IAAI,WAAW,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC;YAElC,yBAAyB;YACzB,EAAE,CAAC,CAAC,WAAW,CAAC,QAAQ,IAAI,QAAQ,KAAK,WAAW,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;gBAC7E,aAAa,GAAG,WAAW,CAAC;gBAC5B,KAAK,CAAC,CAAC,WAAW;YACnB,CAAC;YAED,wBAAwB;YACxB,EAAE,CAAC,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,CAAC;gBAC7B,IAAI,MAAM,GAAG,WAAW,CAAC,WAAW,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,IAAI,GAAG,QAAQ,CAAC,CAAC,wDAAwD;gBACxI,EAAE,CAAC,CAAC,YAAK,CAAC,WAAW,CAAC,WAAW,CAAC,WAAW,EAAE,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC;oBAC1D,EAAE,CAAC,CAAC,CAAC,YAAY,IAAI,WAAW,CAAC,WAAW,CAAC,MAAM,GAAG,YAAY,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC;wBACvF,YAAY,GAAG,WAAW,CAAC;oBAC5B,CAAC;gBACF,CAAC;YACF,CAAC;YAED,0BAA0B;YAC1B,EAAE,CAAC,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,CAAC;gBAC3B,EAAE,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,QAAQ,EAAE,WAAW,CAAC,SAAS,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,CAAC;oBACrE,EAAE,CAAC,CAAC,CAAC,cAAc,IAAI,WAAW,CAAC,SAAS,CAAC,MAAM,GAAG,cAAc,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC;wBACvF,cAAc,GAAG,WAAW,CAAC;oBAC9B,CAAC;gBACF,CAAC;YACF,CAAC;QACF,CAAC;QAED,+CAA+C;QAC/C,EAAE,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;YACnB,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC;QAC3B,CAAC;QAED,uBAAuB;QACvB,EAAE,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;YAClB,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC;QAC1B,CAAC;QAED,oCAAoC;QACpC,EAAE,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC;YACpB,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC;QAC5B,CAAC;QAED,MAAM,CAAC,IAAI,CAAC;IACb,CAAC;IAED,kCAAkC,SAAiB;QAClD,EAAE,CAAC,CAAC,OAAO,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;YAC1C,SAAS,GAAG,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QACjC,CAAC;QAED,EAAE,CAAC,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;YAC1B,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,sBAAsB,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE,CAAC;gBACxD,IAAI,WAAW,GAAG,sBAAsB,CAAC,CAAC,CAAC,CAAC;gBAC5C,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,CAAC;oBAC5B,QAAQ,CAAC;gBACV,CAAC;gBAED,yDAAyD;gBACzD,IAAI,OAAO,GAAG,SAAS,CAAC,KAAK,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;gBACrD,EAAE,CAAC,CAAC,OAAO,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,KAAK,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC;oBAC7E,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC;gBACzB,CAAC;YACF,CAAC;QACF,CAAC;QAED,MAAM,CAAC,IAAI,CAAC;IACb,CAAC;IAID,sBAA6B,KAAU;QACtC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YACZ,MAAM,CAAC,KAAK,CAAC;QACd,CAAC;QAED,IAAI,QAAkB,CAAC;QACvB,EAAE,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YAC1B,QAAQ,GAAc,KAAM,CAAC;QAC9B,CAAC;QAAC,IAAI,CAAC,CAAC;YACP,QAAQ,GAAY,KAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,UAAC,IAAI,IAAK,OAAA,IAAI,CAAC,IAAI,EAAE,EAAX,CAAW,CAAC,CAAC;QAClE,CAAC;QAED,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,mBAAW,CAAC,IAAI,CAAC,CAAC;IAC3C,CAAC;IAbe,oBAAY,eAa3B,CAAA;IAED,sBAA6B,IAAuB;QACnD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;YACX,MAAM,CAAC,IAAI,CAAC;QACb,CAAC;QAED,EAAE,CAAC,CAAC,OAAO,IAAI,KAAK,QAAQ,CAAC,CAAC,CAAC;YAC9B,MAAM,CAAC,IAAI,KAAK,mBAAW,IAAI,IAAI,KAAK,iBAAS,IAAI,IAAI,KAAK,oBAAY,CAAC;QAC5E,CAAC;QAED,MAAM,CAAC,IAAI,CAAC,MAAM,KAAK,CAAC,IAAI,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IACnD,CAAC;IAVe,oBAAY,eAU3B,CAAA;IAED,yBAAgC,OAAe,EAAE,MAAc;QAC9D,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,sBAAsB,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YACxD,IAAI,WAAW,GAAG,sBAAsB,CAAC,CAAC,CAAC,CAAC;YAC5C,EAAE,CAAC,CAAC,WAAW,CAAC,cAAc,CAAC,CAAC,CAAC;gBAChC,QAAQ,CAAC,CAAC,+BAA+B;YAC1C,CAAC;YAED,EAAE,CAAC,CAAC,WAAW,CAAC,IAAI,KAAK,OAAO,IAAI,WAAW,CAAC,SAAS,CAAC,CAAC,CAAC;gBAC3D,MAAM,CAAC,MAAM,GAAG,WAAW,CAAC,SAAS,CAAC;YACvC,CAAC;QACF,CAAC;QAED,MAAM,CAAC,IAAI,CAAC;IACb,CAAC;IAbe,uBAAe,kBAa9B,CAAA","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport paths = require('vs/base/common/paths');\nimport types = require('vs/base/common/types');\nimport strings = require('vs/base/common/strings');\nimport {match} from 'vs/base/common/glob';\n\nexport let MIME_TEXT = 'text/plain';\nexport let MIME_BINARY = 'application/octet-stream';\nexport let MIME_UNKNOWN = 'application/unknown';\n\nexport interface ITextMimeAssociation {\n\tmime: string;\n\tfilename?: string;\n\textension?: string;\n\tfilepattern?: string;\n\tfirstline?: RegExp;\n\tuserConfigured?: boolean;\n}\n\nlet registeredAssociations: ITextMimeAssociation[] = [];\n\n/**\n * Associate a text mime to the registry.\n */\nexport function registerTextMime(association: ITextMimeAssociation): void {\n\n\t// Register\n\tregisteredAssociations.push(association);\n\n\t// Check for conflicts unless this is a user configured association\n\tif (!association.userConfigured) {\n\t\tregisteredAssociations.forEach(a => {\n\t\t\tif (a.mime === association.mime || a.userConfigured) {\n\t\t\t\treturn; // same mime or userConfigured is ok\n\t\t\t}\n\n\t\t\tif (association.extension && a.extension === association.extension) {\n\t\t\t\tconsole.warn(`Overwriting extension <<${association.extension}>> to now point to mime <<${association.mime}>>`);\n\t\t\t}\n\n\t\t\tif (association.filename && a.filename === association.filename) {\n\t\t\t\tconsole.warn(`Overwriting filename <<${association.filename}>> to now point to mime <<${association.mime}>>`);\n\t\t\t}\n\n\t\t\tif (association.filepattern && a.filepattern === association.filepattern) {\n\t\t\t\tconsole.warn(`Overwriting filepattern <<${association.filepattern}>> to now point to mime <<${association.mime}>>`);\n\t\t\t}\n\n\t\t\tif (association.firstline && a.firstline === association.firstline) {\n\t\t\t\tconsole.warn(`Overwriting firstline <<${association.firstline}>> to now point to mime <<${association.mime}>>`);\n\t\t\t}\n\t\t});\n\t}\n}\n\n/**\n * Clear text mimes from the registry.\n */\nexport function clearTextMimes(onlyUserConfigured?: boolean): void {\n\tif (!onlyUserConfigured) {\n\t\tregisteredAssociations = [];\n\t} else {\n\t\tregisteredAssociations = registeredAssociations.filter(a => !a.userConfigured);\n\t}\n}\n\n/**\n * Given a file, return the best matching mime type for it\n */\nexport function guessMimeTypes(path: string, firstLine?: string): string[] {\n\tif (!path) {\n\t\treturn [MIME_UNKNOWN];\n\t}\n\n\tpath = path.toLowerCase();\n\n\t// 1.) User configured mappings have highest priority\n\tlet configuredMime = guessMimeTypeByPath(path, registeredAssociations.filter(a => a.userConfigured));\n\tif (configuredMime) {\n\t\treturn [configuredMime, MIME_TEXT];\n\t}\n\n\t// 2.) Registered mappings have middle priority\n\tlet registeredMime = guessMimeTypeByPath(path, registeredAssociations.filter(a => !a.userConfigured));\n\tif (registeredMime) {\n\t\treturn [registeredMime, MIME_TEXT];\n\t}\n\n\t// 3.) Firstline has lowest priority\n\tif (firstLine) {\n\t\tlet firstlineMime = guessMimeTypeByFirstline(firstLine);\n\t\tif (firstlineMime) {\n\t\t\treturn [firstlineMime, MIME_TEXT];\n\t\t}\n\t}\n\n\treturn [MIME_UNKNOWN];\n}\n\nfunction guessMimeTypeByPath(path: string, associations: ITextMimeAssociation[]): string {\n\tlet filename = paths.basename(path);\n\n\tlet filenameMatch: ITextMimeAssociation;\n\tlet patternMatch: ITextMimeAssociation;\n\tlet extensionMatch: ITextMimeAssociation;\n\n\tfor (var i = 0; i < associations.length; i++) {\n\t\tlet association = associations[i];\n\n\t\t// First exact name match\n\t\tif (association.filename && filename === association.filename.toLowerCase()) {\n\t\t\tfilenameMatch = association;\n\t\t\tbreak; // take it!\n\t\t}\n\n\t\t// Longest pattern match\n\t\tif (association.filepattern) {\n\t\t\tlet target = association.filepattern.indexOf(paths.sep) >= 0 ? path : filename; // match on full path if pattern contains path separator\n\t\t\tif (match(association.filepattern.toLowerCase(), target)) {\n\t\t\t\tif (!patternMatch || association.filepattern.length > patternMatch.filepattern.length) {\n\t\t\t\t\tpatternMatch = association;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Longest extension match\n\t\tif (association.extension) {\n\t\t\tif (strings.endsWith(filename, association.extension.toLowerCase())) {\n\t\t\t\tif (!extensionMatch || association.extension.length > extensionMatch.extension.length) {\n\t\t\t\t\textensionMatch = association;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// 1.) Exact name match has second highest prio\n\tif (filenameMatch) {\n\t\treturn filenameMatch.mime;\n\t}\n\n\t// 2.) Match on pattern\n\tif (patternMatch) {\n\t\treturn patternMatch.mime;\n\t}\n\n\t// 3.) Match on extension comes next\n\tif (extensionMatch) {\n\t\treturn extensionMatch.mime;\n\t}\n\n\treturn null;\n}\n\nfunction guessMimeTypeByFirstline(firstLine: string): string {\n\tif (strings.startsWithUTF8BOM(firstLine)) {\n\t\tfirstLine = firstLine.substr(1);\n\t}\n\n\tif (firstLine.length > 0) {\n\t\tfor (let i = 0; i < registeredAssociations.length; ++i) {\n\t\t\tlet association = registeredAssociations[i];\n\t\t\tif (!association.firstline) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Make sure the entire line matches, not just a subpart.\n\t\t\tlet matches = firstLine.match(association.firstline);\n\t\t\tif (matches && matches.length > 0 && matches[0].length === firstLine.length) {\n\t\t\t\treturn association.mime;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn null;\n}\n\nexport function isBinaryMime(mimes: string): boolean;\nexport function isBinaryMime(mimes: string[]): boolean;\nexport function isBinaryMime(mimes: any): boolean {\n\tif (!mimes) {\n\t\treturn false;\n\t}\n\n\tlet mimeVals: string[];\n\tif (types.isArray(mimes)) {\n\t\tmimeVals = (<string[]>mimes);\n\t} else {\n\t\tmimeVals = (<string>mimes).split(',').map((mime) => mime.trim());\n\t}\n\n\treturn mimeVals.indexOf(MIME_BINARY) >= 0;\n}\n\nexport function isUnspecific(mime: string[] | string): boolean {\n\tif (!mime) {\n\t\treturn true;\n\t}\n\n\tif (typeof mime === 'string') {\n\t\treturn mime === MIME_BINARY || mime === MIME_TEXT || mime === MIME_UNKNOWN;\n\t}\n\n\treturn mime.length === 1 && isUnspecific(mime[0]);\n}\n\nexport function suggestFilename(theMime: string, prefix: string): string {\n\tfor (var i = 0; i < registeredAssociations.length; i++) {\n\t\tlet association = registeredAssociations[i];\n\t\tif (association.userConfigured) {\n\t\t\tcontinue; // only support registered ones\n\t\t}\n\n\t\tif (association.mime === theMime && association.extension) {\n\t\t\treturn prefix + association.extension;\n\t\t}\n\t}\n\n\treturn null;\n}"]}