{"version":3,"file":"collections.js","sourceRoot":"","sources":["../../../../src/vs/base/common/collections.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\n\n/**\n * An interface for a JavaScript object that\n * acts a dictionary. The keys are strings.\n */\nexport interface IStringDictionary<V> {\n\t[name: string]: V;\n}\n\n/**\n * An interface for a JavaScript object that\n * acts a dictionary. The keys are numbers.\n */\nexport interface INumberDictionary<V> {\n\t[idx: number]: V;\n}\n\nexport function createStringDictionary<V>(): IStringDictionary<V> {\n\treturn Object.create(null);\n}\n\nexport function createNumberDictionary<V>(): INumberDictionary<V> {\n\treturn Object.create(null);\n}\n\n/**\n * Looks up and returns a property that is owned\n * by the provided map object.\n * @param what The key.\n * @param from A native JavaScript object that stores items.\n * @param alternate A default value this is return in case an item with\n * \tthe key isn't found.\n */\nexport function lookup<T>(from: IStringDictionary<T>, what: string, alternate?: T): T;\nexport function lookup<T>(from: INumberDictionary<T>, what: number, alternate?: T): T;\nexport function lookup<T>(from: any, what: any, alternate: T = null): T {\n\tconst key = String(what);\n\tif (contains(from, key)) {\n\t\treturn from[key];\n\t}\n\treturn alternate;\n}\n\n\n/**\n * Looks up a value from the set. If the set doesn't contain the\n * value it inserts and returns the given alternate value.\n */\nexport function lookupOrInsert<T>(from: IStringDictionary<T>, key: string, alternate: T): T;\nexport function lookupOrInsert<T>(from: IStringDictionary<T>, key: string, alternateFn: () => T): T;\nexport function lookupOrInsert<T>(from: INumberDictionary<T>, key: number, alternate: T): T;\nexport function lookupOrInsert<T>(from: INumberDictionary<T>, key: number, alternateFn: () => T): T;\nexport function lookupOrInsert<T>(from: any, stringOrNumber: any, alternate: any): T {\n\tconst key = String(stringOrNumber);\n\tif (contains(from, key)) {\n\t\treturn from[key];\n\t} else {\n\t\tif (typeof alternate === 'function') {\n\t\t\talternate = alternate();\n\t\t}\n\t\tfrom[key] = alternate;\n\t\treturn alternate;\n\t}\n}\n\n/**\n * Inserts\n */\nexport function insert<T>(into: IStringDictionary<T>, data: T, hashFn: (data: T) => string): void;\nexport function insert<T>(into: INumberDictionary<T>, data: T, hashFn: (data: T) => string): void;\nexport function insert<T>(into: any, data: T, hashFn: (data: T) => string): void {\n\tinto[hashFn(data)] = data;\n}\n\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\n\n/**\n * Returns {{true}} iff the provided object contains a property\n * with the given name.\n */\nexport function contains<T>(from: IStringDictionary<T>, what: string): boolean;\nexport function contains<T>(from: INumberDictionary<T>, what: number): boolean;\nexport function contains<T>(from: any, what: any): boolean {\n\treturn hasOwnProperty.call(from, what);\n}\n\n/**\n * Returns an array which contains all values that reside\n * in the given set.\n */\nexport function values<T>(from: IStringDictionary<T>): T[];\nexport function values<T>(from: INumberDictionary<T>): T[];\nexport function values<T>(from: any): any[] {\n\tconst result: T[] = [];\n\tfor (var key in from) {\n\t\tif (hasOwnProperty.call(from, key)) {\n\t\t\tresult.push(from[key]);\n\t\t}\n\t}\n\treturn result;\n}\n\n/**\n * Iterates over each entry in the provided set. The iterator allows\n * to remove elements and will stop when the callback returns {{false}}.\n */\nexport function forEach<T>(from: IStringDictionary<T>, callback: (entry: { key: string; value: T; }, remove: Function) => any): void;\nexport function forEach<T>(from: INumberDictionary<T>, callback: (entry: { key: number; value: T; }, remove: Function) => any): void;\nexport function forEach<T>(from: any, callback: (entry: { key: any; value: T; }, remove: Function) => any): void {\n\tfor (var key in from) {\n\t\tif (hasOwnProperty.call(from, key)) {\n\t\t\tconst result = callback({ key: key, value: from[key] }, function() {\n\t\t\t\tdelete from[key];\n\t\t\t});\n\t\t\tif (result === false) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * Removes an element from the dictionary. Returns {{false}} if the property\n * does not exists.\n */\nexport function remove<T>(from: IStringDictionary<T>, key: string): boolean;\nexport function remove<T>(from: INumberDictionary<T>, key: string): boolean;\nexport function remove<T>(from: any, key: string): boolean {\n\tif (!hasOwnProperty.call(from, key)) {\n\t\treturn false;\n\t}\n\tdelete from[key];\n\treturn true;\n}\n\n/**\n * Groups the collection into a dictionary based on the provided\n * group function.\n */\nexport function groupBy<T>(data: T[], groupFn: (element: T) => string): IStringDictionary<T[]> {\n\tconst result = createStringDictionary<T[]>();\n\tdata.forEach(element => lookupOrInsert(result, groupFn(element), []).push(element));\n\treturn result;\n}\n"]}