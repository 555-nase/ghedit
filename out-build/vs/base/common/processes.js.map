{"version":3,"sources":["vs/base/common/processes.ts"],"names":[],"mappings":"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","file":"vs/base/common/processes.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport NLS = require('vs/nls');\n\nimport * as Objects from 'vs/base/common/objects';\nimport * as Platform from 'vs/base/common/platform';\nimport { IStringDictionary } from 'vs/base/common/collections';\nimport * as Types from 'vs/base/common/types';\n\nimport { ValidationStatus, ValidationState, ILogger, Parser, ISystemVariables } from 'vs/base/common/parsers';\n\n\n/**\n * Options to be passed to the external program or shell.\n */\nexport interface CommandOptions {\n\t/**\n\t * The current working directory of the executed program or shell.\n\t * If omitted VSCode's current workspace root is used.\n\t */\n\tcwd?: string;\n\n\t/**\n\t * The environment of the executed program or shell. If omitted\n\t * the parent process' environment is used.\n\t */\n\tenv?: { [key:string]: string; };\n}\n\nexport interface Executable {\n\t/**\n\t * The command to be executed. Can be an external program or a shell\n\t * command.\n\t */\n\tcommand: string;\n\n\t/**\n\t * Specifies whether the command is a shell command and therefore must\n\t * be executed in a shell interpreter (e.g. cmd.exe, bash, ...).\n\t */\n\tisShellCommand: boolean;\n\n\t/**\n\t * The arguments passed to the command.\n\t */\n\targs: string[];\n\n\t/**\n\t * The command options used when the command is executed. Can be omitted.\n\t */\n\toptions?: CommandOptions;\n}\n\nexport interface ForkOptions extends CommandOptions {\n\texecArgv?: string[];\n}\n\nexport enum Source {\n\tstdout,\n\tstderr\n}\n\n/**\n * The data send via a success callback\n */\nexport interface SuccessData {\n\terror?:Error;\n\tcmdCode?:number;\n\tterminated?:boolean;\n}\n\n/**\n * The data send via a error callback\n */\nexport interface ErrorData {\n\terror?:Error;\n\tterminated?:boolean;\n\tstdout?:string;\n\tstderr?:string;\n}\n\nexport interface TerminateResponse {\n\tsuccess: boolean;\n\terror?: any;\n}\n\nexport namespace Config {\n\t/**\n\t * Options to be passed to the external program or shell\n\t */\n\texport interface CommandOptions {\n\t\t/**\n\t\t * The current working directory of the executed program or shell.\n\t\t * If omitted VSCode's current workspace root is used.\n\t\t */\n\t\tcwd?: string;\n\n\t\t/**\n\t\t * The additional environment of the executed program or shell. If omitted\n\t\t * the parent process' environment is used.\n\t\t */\n\t\tenv?: IStringDictionary<string>;\n\n\t\t/**\n\t\t * Index signature\n\t\t */\n\t\t[key:string]: string | string[] | IStringDictionary<string>;\n\t}\n\n\texport interface BaseExecutable {\n\t\t/**\n\t\t * The command to be executed. Can be an external program or a shell\n\t\t * command.\n\t\t */\n\t\tcommand?: string;\n\n\t\t/**\n\t\t * Specifies whether the command is a shell command and therefore must\n\t\t * be executed in a shell interpreter (e.g. cmd.exe, bash, ...).\n\t\t *\n\t\t * Defaults to false if omitted.\n\t\t */\n\t\tisShellCommand?: boolean;\n\n\t\t/**\n\t\t * The arguments passed to the command. Can be omitted.\n\t\t */\n\t\targs?: string[];\n\n\t\t/**\n\t\t * The command options used when the command is executed. Can be omitted.\n\t\t */\n\t\toptions?: CommandOptions;\n\t}\n\n\texport interface Executable extends BaseExecutable {\n\n\t\t/**\n\t\t * Windows specific executable configuration\n\t\t */\n\t\twindows?: BaseExecutable;\n\n\t\t/**\n\t\t * Mac specific executable configuration\n\t\t */\n\t\tosx?: BaseExecutable;\n\n\t\t/**\n\t\t * Linux specific executable configuration\n\t\t */\n\t\tlinux?: BaseExecutable;\n\n\t}\n}\n\nexport interface ParserOptions {\n\tglobals?: Executable;\n\temptyCommand?: boolean;\n\tnoDefaults?: boolean;\n}\n\nexport class ExecutableParser extends Parser {\n\n\tconstructor(logger: ILogger, validationStatus: ValidationStatus = new ValidationStatus()) {\n\t\tsuper(logger, validationStatus);\n\t}\n\n\tpublic parse(json: Config.Executable, parserOptions: ParserOptions = { globals: null, emptyCommand: false, noDefaults: false }): Executable {\n\t\tlet result = this.parseExecutable(json, parserOptions.globals);\n\t\tif (this.status.isFatal()) {\n\t\t\treturn result;\n\t\t}\n\t\tlet osExecutable: Executable;\n\t\tif (json.windows && Platform.platform === Platform.Platform.Windows) {\n\t\t\tosExecutable = this.parseExecutable(json.windows);\n\t\t} else if (json.osx && Platform.platform === Platform.Platform.Mac) {\n\t\t\tosExecutable = this.parseExecutable(json.osx);\n\t\t} else if (json.linux && Platform.platform === Platform.Platform.Linux) {\n\t\t\tosExecutable = this.parseExecutable(json.linux);\n\t\t}\n\t\tif (osExecutable) {\n\t\t\tresult = ExecutableParser.mergeExecutable(result, osExecutable);\n\t\t}\n\t\tif ((!result || !result.command) && !parserOptions.emptyCommand) {\n\t\t\tthis.status.state = ValidationState.Fatal;\n\t\t\tthis.log(NLS.localize('ExecutableParser.commandMissing', 'Error: executable info must define a command of type string.'));\n\t\t\treturn null;\n\t\t}\n\t\tif (!parserOptions.noDefaults) {\n\t\t\tParser.merge(result, {\n\t\t\t\tcommand: undefined,\n\t\t\t\tisShellCommand: false,\n\t\t\t\targs: [],\n\t\t\t\toptions: {}\n\t\t\t}, false);\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic parseExecutable(json: Config.BaseExecutable, globals?: Executable): Executable {\n\t\tlet command: string = undefined;\n\t\tlet isShellCommand: boolean = undefined;\n\t\tlet args: string[] = undefined;\n\t\tlet options: CommandOptions = undefined;\n\n\t\tif (this.is(json.command, Types.isString)) {\n\t\t\tcommand = json.command;\n\t\t}\n\t\tif (this.is(json.isShellCommand, Types.isBoolean, ValidationState.Warning, NLS.localize('ExecutableParser.isShellCommand', 'Warning: isShellCommand must be of type boolean. Ignoring value {0}.', json.isShellCommand))) {\n\t\t\tisShellCommand = json.isShellCommand;\n\t\t}\n\t\tif (this.is(json.args, Types.isStringArray, ValidationState.Warning, NLS.localize('ExecutableParser.args', 'Warning: args must be of type string[]. Ignoring value {0}.', json.isShellCommand))) {\n\t\t\targs = json.args.slice(0);\n\t\t}\n\t\tif (this.is(json.options, Types.isObject)) {\n\t\t\toptions = this.parseCommandOptions(json.options);\n\t\t}\n\t\treturn { command, isShellCommand, args, options };\n\t}\n\n\tprivate parseCommandOptions(json: Config.CommandOptions): CommandOptions {\n\t\tlet result: CommandOptions = {};\n\t\tif (!json) {\n\t\t\treturn result;\n\t\t}\n\t\tif (this.is(json.cwd, Types.isString, ValidationState.Warning, NLS.localize('ExecutableParser.invalidCWD', 'Warning: options.cwd must be of type string. Ignoring value {0}.', json.cwd))) {\n\t\t\tresult.cwd = json.cwd;\n\t\t}\n\t\tif (!Types.isUndefined(json.env)) {\n\t\t\tresult.env = Objects.clone(json.env);\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic static mergeExecutable(executable: Executable, other: Executable): Executable {\n\t\tif (!executable) {\n\t\t\treturn other;\n\t\t}\n\t\tParser.merge(executable, other, true);\n\t\treturn executable;\n\t}\n}\n\nexport function resolveCommandOptions(options: CommandOptions, variables: ISystemVariables): CommandOptions {\n\tlet result = Objects.clone(options);\n\tif (result.cwd) {\n\t\tresult.cwd = variables.resolve(result.cwd);\n\t}\n\tif (result.env) {\n\t\tresult.env = variables.resolve(result.env);\n\t}\n\treturn result;\n}\n\nexport function resolveExecutable(executable: Executable, variables: ISystemVariables): Executable {\n\tlet result = Objects.clone(executable);\n\tresult.command = variables.resolve(result.command);\n\tresult.args = variables.resolve(result.args);\n\tif (result.options) {\n\t\tresult.options = resolveCommandOptions(result.options, variables);\n\t}\n\treturn result;\n}"]}