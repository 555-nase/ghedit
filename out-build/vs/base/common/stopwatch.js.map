{"version":3,"file":"stopwatch.js","sourceRoot":"","sources":["../../../../src/vs/base/common/stopwatch.ts"],"names":[],"mappings":";IAAA;;;oGAGgG;IAChG,YAAY,CAAC;IAIb,IAAI,iBAAiB,GAAG,CAAC,kBAAO,CAAC,WAAW,IAAI,OAAO,kBAAO,CAAC,WAAW,CAAC,GAAG,KAAK,UAAU,CAAC,CAAC;IAE/F;QAUC,mBAAY,cAAuB;YAClC,IAAI,CAAC,eAAe,GAAG,iBAAiB,IAAI,cAAc,CAAC;YAC3D,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC;YAC9B,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC,CAAC;QACrB,CAAC;QARa,gBAAM,GAApB,UAAqB,cAA6B;YAA7B,8BAA6B,GAA7B,qBAA6B;YACjD,MAAM,CAAC,IAAI,SAAS,CAAC,cAAc,CAAC,CAAC;QACtC,CAAC;QAQM,wBAAI,GAAX;YACC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC;QAC9B,CAAC;QAEM,2BAAO,GAAd;YACC,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC3B,MAAM,CAAC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC;YACzC,CAAC;YACD,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,IAAI,CAAC,UAAU,CAAC;QACtC,CAAC;QAEO,wBAAI,GAAZ;YACC,MAAM,CAAC,IAAI,CAAC,eAAe,GAAG,kBAAO,CAAC,WAAW,CAAC,GAAG,EAAE,GAAG,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC;QAChF,CAAC;QACF,gBAAC;IAAD,CAAC,AA9BD,IA8BC;IA9BY,iBAAS,YA8BrB,CAAA","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport { globals } from 'vs/base/common/platform';\n\nvar hasPerformanceNow = (globals.performance && typeof globals.performance.now === 'function');\n\nexport class StopWatch {\n\n\tprivate _highResolution: boolean;\n\tprivate _startTime: number;\n\tprivate _stopTime: number;\n\n\tpublic static create(highResolution:boolean = true): StopWatch {\n\t\treturn new StopWatch(highResolution);\n\t}\n\n\tconstructor(highResolution: boolean) {\n\t\tthis._highResolution = hasPerformanceNow && highResolution;\n\t\tthis._startTime = this._now();\n\t\tthis._stopTime = -1;\n\t}\n\n\tpublic stop(): void {\n\t\tthis._stopTime = this._now();\n\t}\n\n\tpublic elapsed(): number {\n\t\tif (this._stopTime !== -1) {\n\t\t\treturn this._stopTime - this._startTime;\n\t\t}\n\t\treturn this._now() - this._startTime;\n\t}\n\n\tprivate _now(): number {\n\t\treturn this._highResolution ? globals.performance.now() : new Date().getTime();\n\t}\n}\n"]}