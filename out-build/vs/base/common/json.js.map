{"version":3,"sources":["vs/base/common/json.ts"],"names":[],"mappings":";IAAA;;;oGAGgG;IAChG,YAAY,CAAC;IAIb,WAAY,SAAS;QACpB,yCAAI,CAAA;QACJ,6EAAsB,CAAA;QACtB,2EAAqB,CAAA;QACrB,2EAAqB,CAAA;QACrB,6DAAc,CAAA;QACd,6EAAsB,CAAA;IACvB,CAAC,EAPW,iBAAS,KAAT,iBAAS,QAOpB;IAPD,IAAY,SAAS,GAAT,iBAOX,CAAA;IAED,WAAY,UAAU;QACrB,iDAAW,CAAA;QACX,+DAAc,CAAA;QACd,iEAAe,CAAA;QACf,mEAAgB,CAAA;QAChB,qEAAiB,CAAA;QACjB,uDAAU,CAAA;QACV,uDAAU,CAAA;QACV,yDAAW,CAAA;QACX,yDAAW,CAAA;QACX,2DAAY,CAAA;QACZ,8DAAa,CAAA;QACb,gEAAc,CAAA;QACd,sEAAiB,CAAA;QACjB,wEAAkB,CAAA;QAClB,kEAAe,CAAA;QACf,gDAAM,CAAA;QACN,0CAAG,CAAA;IACJ,CAAC,EAlBW,kBAAU,KAAV,kBAAU,QAkBrB;IAlBD,IAAY,UAAU,GAAV,kBAkBX,CAAA;IAYD,uBAA8B,IAAW,EAAE,YAA4B;QAA5B,4BAA4B,GAA5B,oBAA4B;QAEtE,IAAI,GAAG,GAAG,CAAC,EACV,GAAG,GAAG,IAAI,CAAC,MAAM,EACjB,KAAK,GAAU,EAAE,EACjB,WAAW,GAAG,CAAC,EACf,KAAK,GAAc,UAAU,CAAC,OAAO,EACrC,SAAS,GAAa,SAAS,CAAC,IAAI,CAAC;QAEtC,uBAAuB,KAAa,EAAE,KAAe;YACpD,IAAI,MAAM,GAAG,CAAC,CAAC;YACf,IAAI,KAAK,GAAG,CAAC,CAAC;YACd,OAAO,MAAM,GAAG,KAAK,IAAI,CAAC,KAAK,EAAE,CAAC;gBACjC,IAAI,EAAE,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;gBAC9B,EAAE,CAAC,CAAC,EAAE,IAAI,cAAc,CAAC,EAAE,IAAI,EAAE,IAAI,cAAc,CAAC,EAAE,CAAC,CAAC,CAAC;oBACxD,KAAK,GAAG,KAAK,GAAG,EAAE,GAAG,EAAE,GAAG,cAAc,CAAC,EAAE,CAAC;gBAC7C,CAAC;gBACD,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,IAAI,cAAc,CAAC,CAAC,IAAI,EAAE,IAAI,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;oBAC3D,KAAK,GAAG,KAAK,GAAG,EAAE,GAAG,EAAE,GAAG,cAAc,CAAC,CAAC,GAAG,EAAE,CAAC;gBACjD,CAAC;gBACD,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,IAAI,cAAc,CAAC,CAAC,IAAI,EAAE,IAAI,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;oBAC3D,KAAK,GAAG,KAAK,GAAG,EAAE,GAAG,EAAE,GAAG,cAAc,CAAC,CAAC,GAAG,EAAE,CAAC;gBACjD,CAAC;gBACD,IAAI,CAAC,CAAC;oBACL,KAAK,CAAC;gBACP,CAAC;gBACD,GAAG,EAAE,CAAC;gBACN,MAAM,EAAE,CAAC;YACV,CAAC;YACD,EAAE,CAAC,CAAC,MAAM,GAAG,KAAK,CAAC,CAAC,CAAC;gBACpB,KAAK,GAAG,CAAC,CAAC,CAAC;YACZ,CAAC;YACD,MAAM,CAAC,KAAK,CAAC;QACd,CAAC;QAED;YACC,IAAI,KAAK,GAAG,GAAG,CAAC;YAChB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,KAAK,cAAc,CAAC,EAAE,CAAC,CAAC,CAAC;gBAChD,GAAG,EAAE,CAAC;YACP,CAAC;YAAC,IAAI,CAAC,CAAC;gBACP,GAAG,EAAE,CAAC;gBACN,OAAO,GAAG,GAAG,IAAI,CAAC,MAAM,IAAI,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC;oBAC3D,GAAG,EAAE,CAAC;gBACP,CAAC;YACF,CAAC;YACD,EAAE,CAAC,CAAC,GAAG,GAAG,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,KAAK,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC;gBACtE,GAAG,EAAE,CAAC;gBACN,EAAE,CAAC,CAAC,GAAG,GAAG,IAAI,CAAC,MAAM,IAAI,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;oBACxD,GAAG,EAAE,CAAC;oBACN,OAAO,GAAG,GAAG,IAAI,CAAC,MAAM,IAAI,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC;wBAC3D,GAAG,EAAE,CAAC;oBACP,CAAC;gBACF,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACP,SAAS,GAAG,SAAS,CAAC,qBAAqB,CAAC;oBAC5C,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;gBACnC,CAAC;YACF,CAAC;YACD,IAAI,GAAG,GAAG,GAAG,CAAC;YACd,EAAE,CAAC,CAAC,GAAG,GAAG,IAAI,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,KAAK,cAAc,CAAC,CAAC,IAAI,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,KAAK,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACnH,GAAG,EAAE,CAAC;gBACN,EAAE,CAAC,CAAC,GAAG,GAAG,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,KAAK,cAAc,CAAC,IAAI,IAAI,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,KAAK,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC;oBACxH,GAAG,EAAE,CAAC;gBACP,CAAC;gBACD,EAAE,CAAC,CAAC,GAAG,GAAG,IAAI,CAAC,MAAM,IAAI,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;oBACxD,GAAG,EAAE,CAAC;oBACN,OAAO,GAAG,GAAG,IAAI,CAAC,MAAM,IAAI,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC;wBAC3D,GAAG,EAAE,CAAC;oBACP,CAAC;oBACD,GAAG,GAAG,GAAG,CAAC;gBACX,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACP,SAAS,GAAG,SAAS,CAAC,qBAAqB,CAAC;gBAC7C,CAAC;YACF,CAAC;YACD,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;QACnC,CAAC;QAED;YAEC,IAAI,MAAM,GAAG,EAAE,EACd,KAAK,GAAG,GAAG,CAAC;YAEb,OAAO,IAAI,EAAE,CAAC;gBACb,EAAE,CAAC,CAAC,GAAG,IAAI,GAAG,CAAC,CAAC,CAAC;oBAChB,MAAM,IAAI,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;oBACrC,SAAS,GAAG,SAAS,CAAC,qBAAqB,CAAC;oBAC5C,KAAK,CAAC;gBACP,CAAC;gBACD,IAAI,EAAE,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;gBAC9B,EAAE,CAAC,CAAC,EAAE,KAAK,cAAc,CAAC,WAAW,CAAC,CAAC,CAAC;oBACvC,MAAM,IAAI,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;oBACrC,GAAG,EAAE,CAAC;oBACN,KAAK,CAAC;gBACP,CAAC;gBACD,EAAE,CAAC,CAAC,EAAE,KAAK,cAAc,CAAC,SAAS,CAAC,CAAC,CAAC;oBACrC,MAAM,IAAI,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;oBACrC,GAAG,EAAE,CAAC;oBACN,EAAE,CAAC,CAAC,GAAG,IAAI,GAAG,CAAC,CAAC,CAAC;wBAChB,SAAS,GAAG,SAAS,CAAC,qBAAqB,CAAC;wBAC5C,KAAK,CAAC;oBACP,CAAC;oBACD,EAAE,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,EAAE,CAAC,CAAC;oBAC5B,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;wBACZ,KAAK,cAAc,CAAC,WAAW;4BAC9B,MAAM,IAAI,IAAI,CAAC;4BACf,KAAK,CAAC;wBACP,KAAK,cAAc,CAAC,SAAS;4BAC5B,MAAM,IAAI,IAAI,CAAC;4BACf,KAAK,CAAC;wBACP,KAAK,cAAc,CAAC,KAAK;4BACxB,MAAM,IAAI,GAAG,CAAC;4BACd,KAAK,CAAC;wBACP,KAAK,cAAc,CAAC,CAAC;4BACpB,MAAM,IAAI,IAAI,CAAC;4BACf,KAAK,CAAC;wBACP,KAAK,cAAc,CAAC,CAAC;4BACpB,MAAM,IAAI,IAAI,CAAC;4BACf,KAAK,CAAC;wBACP,KAAK,cAAc,CAAC,CAAC;4BACpB,MAAM,IAAI,IAAI,CAAC;4BACf,KAAK,CAAC;wBACP,KAAK,cAAc,CAAC,CAAC;4BACpB,MAAM,IAAI,IAAI,CAAC;4BACf,KAAK,CAAC;wBACP,KAAK,cAAc,CAAC,CAAC;4BACpB,MAAM,IAAI,IAAI,CAAC;4BACf,KAAK,CAAC;wBACP,KAAK,cAAc,CAAC,CAAC;4BACpB,IAAI,EAAE,GAAG,aAAa,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;4BAChC,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;gCACb,MAAM,IAAI,MAAM,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;4BACnC,CAAC;4BAAC,IAAI,CAAC,CAAC;gCACP,SAAS,GAAG,SAAS,CAAC,cAAc,CAAC;4BACtC,CAAC;4BACD,KAAK,CAAC;wBACP;4BACC,SAAS,GAAG,SAAS,CAAC,sBAAsB,CAAC;oBAC/C,CAAC;oBACD,KAAK,GAAG,GAAG,CAAC;oBACZ,QAAQ,CAAC;gBACV,CAAC;gBACD,EAAE,CAAC,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;oBACrB,MAAM,IAAI,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;oBACrC,SAAS,GAAG,SAAS,CAAC,qBAAqB,CAAC;oBAC5C,KAAK,CAAC;gBACP,CAAC;gBACD,GAAG,EAAE,CAAC;YACP,CAAC;YACD,MAAM,CAAC,MAAM,CAAC;QACf,CAAC;QAED;YAEC,KAAK,GAAG,EAAE,CAAC;YACX,SAAS,GAAG,SAAS,CAAC,IAAI,CAAC;YAE3B,WAAW,GAAG,GAAG,CAAC;YAElB,EAAE,CAAA,CAAC,GAAG,IAAI,GAAG,CAAC,CAAC,CAAC;gBACf,aAAa;gBACb,WAAW,GAAG,GAAG,CAAC;gBAClB,MAAM,CAAC,KAAK,GAAG,UAAU,CAAC,GAAG,CAAC;YAC/B,CAAC;YAED,IAAI,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;YAChC,qBAAqB;YACrB,EAAE,CAAC,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBACxB,GAAG,CAAC;oBACH,GAAG,EAAE,CAAC;oBACN,KAAK,IAAI,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;oBACnC,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;gBAC7B,CAAC,QAAQ,YAAY,CAAC,IAAI,CAAC,EAAE;gBAE7B,MAAM,CAAC,KAAK,GAAG,UAAU,CAAC,MAAM,CAAC;YAClC,CAAC;YAED,mBAAmB;YACnB,EAAE,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBACvB,GAAG,EAAE,CAAC;gBACN,KAAK,IAAI,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;gBACnC,EAAE,CAAC,CAAC,IAAI,KAAK,cAAc,CAAC,cAAc,IAAI,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,KAAK,cAAc,CAAC,QAAQ,CAAC,CAAC,CAAC;oBAChG,GAAG,EAAE,CAAC;oBACN,KAAK,IAAI,IAAI,CAAC;gBACf,CAAC;gBACD,MAAM,CAAC,KAAK,GAAG,UAAU,CAAC,eAAe,CAAC;YAC3C,CAAC;YAED,MAAM,CAAA,CAAC,IAAI,CAAC,CAAC,CAAC;gBACb,iBAAiB;gBACjB,KAAK,cAAc,CAAC,SAAS;oBAC5B,GAAG,EAAE,CAAC;oBACN,MAAM,CAAC,KAAK,GAAG,UAAU,CAAC,cAAc,CAAC;gBAC1C,KAAK,cAAc,CAAC,UAAU;oBAC7B,GAAG,EAAE,CAAC;oBACN,MAAM,CAAC,KAAK,GAAG,UAAU,CAAC,eAAe,CAAC;gBAC3C,KAAK,cAAc,CAAC,WAAW;oBAC9B,GAAG,EAAE,CAAC;oBACN,MAAM,CAAC,KAAK,GAAG,UAAU,CAAC,gBAAgB,CAAC;gBAC5C,KAAK,cAAc,CAAC,YAAY;oBAC/B,GAAG,EAAE,CAAC;oBACN,MAAM,CAAC,KAAK,GAAG,UAAU,CAAC,iBAAiB,CAAC;gBAC7C,KAAK,cAAc,CAAC,KAAK;oBACxB,GAAG,EAAE,CAAC;oBACN,MAAM,CAAC,KAAK,GAAG,UAAU,CAAC,UAAU,CAAC;gBACtC,KAAK,cAAc,CAAC,KAAK;oBACxB,GAAG,EAAE,CAAC;oBACN,MAAM,CAAC,KAAK,GAAG,UAAU,CAAC,UAAU,CAAC;gBAEtC,UAAU;gBACV,KAAK,cAAc,CAAC,WAAW;oBAC9B,GAAG,EAAE,CAAC;oBACN,KAAK,GAAG,UAAU,EAAE,CAAC;oBACrB,MAAM,CAAC,KAAK,GAAG,UAAU,CAAC,aAAa,CAAC;gBAEzC,WAAW;gBACX,KAAK,cAAc,CAAC,KAAK;oBACxB,IAAI,KAAK,GAAG,GAAG,GAAG,CAAC,CAAC;oBACpB,sBAAsB;oBACtB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,GAAG,CAAC,CAAC,KAAK,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC;wBACvD,GAAG,IAAI,CAAC,CAAC;wBAET,OAAO,GAAG,GAAG,GAAG,EAAE,CAAC;4BAClB,EAAE,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;gCACvC,KAAK,CAAC;4BACP,CAAC;4BACD,GAAG,EAAE,CAAC;wBAEP,CAAC;wBACD,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;wBACnC,MAAM,CAAC,KAAK,GAAG,UAAU,CAAC,iBAAiB,CAAC;oBAC7C,CAAC;oBAED,qBAAqB;oBACrB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,GAAG,CAAC,CAAC,KAAK,cAAc,CAAC,QAAQ,CAAC,CAAC,CAAC;wBAC1D,GAAG,IAAI,CAAC,CAAC;wBAET,IAAI,UAAU,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,iBAAiB;wBAC3C,IAAI,aAAa,GAAG,KAAK,CAAC;wBAC1B,OAAO,GAAG,GAAG,UAAU,EAAE,CAAC;4BACzB,IAAI,EAAE,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;4BAE9B,EAAE,CAAC,CAAC,EAAE,KAAK,cAAc,CAAC,QAAQ,IAAI,IAAI,CAAC,UAAU,CAAC,GAAG,GAAG,CAAC,CAAC,KAAK,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC;gCACzF,GAAG,IAAI,CAAC,CAAC;gCACT,aAAa,GAAG,IAAI,CAAC;gCACrB,KAAK,CAAC;4BACP,CAAC;4BACD,GAAG,EAAE,CAAC;wBACP,CAAC;wBAED,EAAE,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;4BACpB,GAAG,EAAE,CAAC;4BACN,SAAS,GAAG,SAAS,CAAC,sBAAsB,CAAC;wBAC9C,CAAC;wBAED,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;wBACnC,MAAM,CAAC,KAAK,GAAG,UAAU,CAAC,kBAAkB,CAAC;oBAC9C,CAAC;oBACD,sBAAsB;oBACtB,KAAK,IAAI,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;oBACnC,GAAG,EAAE,CAAC;oBACN,MAAM,CAAC,KAAK,GAAG,UAAU,CAAC,OAAO,CAAC;gBAEnC,UAAU;gBACV,KAAK,cAAc,CAAC,KAAK;oBACxB,KAAK,IAAI,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;oBACnC,GAAG,EAAE,CAAC;oBACN,EAAE,CAAC,CAAC,GAAG,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;wBACnD,MAAM,CAAC,KAAK,GAAG,UAAU,CAAC,OAAO,CAAC;oBACnC,CAAC;gBACD,yCAAyC;gBACzC,2CAA2C;gBAC3C,UAAU;gBACX,KAAK,cAAc,CAAC,EAAE,CAAC;gBACvB,KAAK,cAAc,CAAC,EAAE,CAAC;gBACvB,KAAK,cAAc,CAAC,EAAE,CAAC;gBACvB,KAAK,cAAc,CAAC,EAAE,CAAC;gBACvB,KAAK,cAAc,CAAC,EAAE,CAAC;gBACvB,KAAK,cAAc,CAAC,EAAE,CAAC;gBACvB,KAAK,cAAc,CAAC,EAAE,CAAC;gBACvB,KAAK,cAAc,CAAC,EAAE,CAAC;gBACvB,KAAK,cAAc,CAAC,EAAE,CAAC;gBACvB,KAAK,cAAc,CAAC,EAAE;oBACrB,KAAK,IAAI,UAAU,EAAE,CAAC;oBACtB,MAAM,CAAC,KAAK,GAAG,UAAU,CAAC,cAAc,CAAC;gBAC1C,+BAA+B;gBAC/B;oBACC,oCAAoC;oBACpC,OAAO,GAAG,GAAG,GAAG,IAAI,yBAAyB,CAAC,IAAI,CAAC,EAAE,CAAC;wBACrD,GAAG,EAAE,CAAC;wBACN,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;oBAC7B,CAAC;oBACD,EAAE,CAAC,CAAC,WAAW,KAAK,GAAG,CAAC,CAAC,CAAC;wBACzB,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC;wBACzC,8BAA8B;wBAC9B,MAAM,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;4BACf,KAAK,MAAM,EAAE,MAAM,CAAC,KAAK,GAAG,UAAU,CAAC,WAAW,CAAC;4BACnD,KAAK,OAAO,EAAE,MAAM,CAAC,KAAK,GAAG,UAAU,CAAC,YAAY,CAAC;4BACrD,KAAK,MAAM,EAAE,MAAM,CAAC,KAAK,GAAG,UAAU,CAAC,WAAW,CAAC;wBACpD,CAAC;wBACD,MAAM,CAAC,KAAK,GAAG,UAAU,CAAC,OAAO,CAAC;oBACnC,CAAC;oBACD,OAAO;oBACP,KAAK,IAAI,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;oBACnC,GAAG,EAAE,CAAC;oBACN,MAAM,CAAC,KAAK,GAAG,UAAU,CAAC,OAAO,CAAC;YACpC,CAAC;QACF,CAAC;QAED,mCAAmC,IAAoB;YACtD,EAAE,CAAC,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBAC7C,MAAM,CAAC,KAAK,CAAC;YACd,CAAC;YACD,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;gBACd,KAAK,cAAc,CAAC,UAAU,CAAC;gBAC/B,KAAK,cAAc,CAAC,YAAY,CAAC;gBACjC,KAAK,cAAc,CAAC,SAAS,CAAC;gBAC9B,KAAK,cAAc,CAAC,WAAW,CAAC;gBAChC,KAAK,cAAc,CAAC,WAAW,CAAC;gBAChC,KAAK,cAAc,CAAC,KAAK,CAAC;gBAC1B,KAAK,cAAc,CAAC,KAAK;oBACxB,MAAM,CAAC,KAAK,CAAC;YACf,CAAC;YACD,MAAM,CAAC,IAAI,CAAC;QACb,CAAC;QAGD;YACC,IAAI,MAAmB,CAAC;YACxB,GAAG,CAAC;gBACH,MAAM,GAAG,QAAQ,EAAE,CAAC;YACrB,CAAC,QAAQ,MAAM,IAAI,UAAU,CAAC,iBAAiB,IAAI,MAAM,IAAI,UAAU,CAAC,MAAM,EAAE;YAChF,MAAM,CAAC,MAAM,CAAC;QACf,CAAC;QAED,MAAM,CAAC;YACN,WAAW,EAAE,cAAM,OAAA,GAAG,EAAH,CAAG;YACtB,IAAI,EAAE,YAAY,GAAG,iBAAiB,GAAG,QAAQ;YACjD,QAAQ,EAAE,cAAM,OAAA,KAAK,EAAL,CAAK;YACrB,aAAa,EAAE,cAAM,OAAA,KAAK,EAAL,CAAK;YAC1B,cAAc,EAAE,cAAM,OAAA,WAAW,EAAX,CAAW;YACjC,cAAc,EAAE,cAAM,OAAA,GAAG,GAAG,WAAW,EAAjB,CAAiB;YACvC,aAAa,EAAE,cAAM,OAAA,SAAS,EAAT,CAAS;SAC9B,CAAC;IACH,CAAC;IAtVe,qBAAa,gBAsV5B,CAAA;IAED,sBAAsB,EAAU;QAC/B,MAAM,CAAC,EAAE,KAAK,cAAc,CAAC,KAAK,IAAI,EAAE,KAAK,cAAc,CAAC,GAAG,IAAI,EAAE,KAAK,cAAc,CAAC,WAAW,IAAI,EAAE,KAAK,cAAc,CAAC,QAAQ;YACrI,EAAE,KAAK,cAAc,CAAC,gBAAgB,IAAI,EAAE,KAAK,cAAc,CAAC,KAAK,IAAI,EAAE,IAAI,cAAc,CAAC,MAAM,IAAI,EAAE,IAAI,cAAc,CAAC,cAAc;YAC3I,EAAE,KAAK,cAAc,CAAC,kBAAkB,IAAI,EAAE,KAAK,cAAc,CAAC,iBAAiB,IAAI,EAAE,KAAK,cAAc,CAAC,gBAAgB,IAAI,EAAE,KAAK,cAAc,CAAC,aAAa,CAAC;IACvK,CAAC;IAED,qBAAqB,EAAU;QAC9B,MAAM,CAAC,EAAE,KAAK,cAAc,CAAC,QAAQ,IAAI,EAAE,KAAK,cAAc,CAAC,cAAc,IAAI,EAAE,KAAK,cAAc,CAAC,aAAa,IAAI,EAAE,KAAK,cAAc,CAAC,kBAAkB,CAAC;IAClK,CAAC;IAED,iBAAiB,EAAU;QAC1B,MAAM,CAAC,EAAE,IAAI,cAAc,CAAC,EAAE,IAAI,EAAE,IAAI,cAAc,CAAC,EAAE,CAAC;IAC3D,CAAC;IAED,kBAAyB,EAAU;QAClC,MAAM,CAAC,EAAE,IAAI,cAAc,CAAC,CAAC,IAAI,EAAE,IAAI,cAAc,CAAC,CAAC,IAAI,EAAE,IAAI,cAAc,CAAC,CAAC,IAAI,EAAE,IAAI,cAAc,CAAC,CAAC,CAAC;IAC7G,CAAC;IAFe,gBAAQ,WAEvB,CAAA;IAED,IAAK,cAuIJ;IAvID,WAAK,cAAc;QAClB,qEAAiB,CAAA;QACjB,+EAAwB,CAAA;QAExB,4DAAe,CAAA;QACf,wEAAqB,CAAA;QACrB,wEAAsB,CAAA;QACtB,kFAA2B,CAAA;QAE3B,4FAA4F;QAC5F,oFAAoF;QACpF,6DAAiB,CAAA;QAEjB,+BAA+B;QAC/B,sDAAc,CAAA;QACd,6EAAyB,CAAA;QACzB,0DAAe,CAAA;QACf,0DAAe,CAAA;QACf,4DAAgB,CAAA;QAChB,4DAAgB,CAAA;QAChB,4EAAwB,CAAA;QACxB,0EAAuB,CAAA;QACvB,wEAAsB,CAAA;QACtB,oEAAoB,CAAA;QACpB,8EAAyB,CAAA;QACzB,gEAAkB,CAAA;QAClB,gEAAkB,CAAA;QAClB,0EAAuB,CAAA;QACvB,kFAA2B,CAAA;QAC3B,+EAAyB,CAAA;QACzB,gFAA0B,CAAA;QAC1B,wDAAc,CAAA;QAEd,8CAAQ,CAAA;QACR,8CAAQ,CAAA;QAER,gDAAS,CAAA;QACT,gDAAS,CAAA;QACT,gDAAS,CAAA;QACT,gDAAS,CAAA;QACT,gDAAS,CAAA;QACT,gDAAS,CAAA;QACT,gDAAS,CAAA;QACT,gDAAS,CAAA;QACT,gDAAS,CAAA;QACT,gDAAS,CAAA;QAET,8CAAQ,CAAA;QACR,8CAAQ,CAAA;QACR,8CAAQ,CAAA;QACR,+CAAQ,CAAA;QACR,+CAAQ,CAAA;QACR,+CAAQ,CAAA;QACR,+CAAQ,CAAA;QACR,+CAAQ,CAAA;QACR,+CAAQ,CAAA;QACR,+CAAQ,CAAA;QACR,+CAAQ,CAAA;QACR,+CAAQ,CAAA;QACR,+CAAQ,CAAA;QACR,+CAAQ,CAAA;QACR,+CAAQ,CAAA;QACR,+CAAQ,CAAA;QACR,+CAAQ,CAAA;QACR,+CAAQ,CAAA;QACR,+CAAQ,CAAA;QACR,+CAAQ,CAAA;QACR,+CAAQ,CAAA;QACR,+CAAQ,CAAA;QACR,+CAAQ,CAAA;QACR,+CAAQ,CAAA;QACR,+CAAQ,CAAA;QACR,+CAAQ,CAAA;QAER,8CAAQ,CAAA;QACR,8CAAQ,CAAA;QACR,8CAAQ,CAAA;QACR,8CAAQ,CAAA;QACR,8CAAQ,CAAA;QACR,8CAAQ,CAAA;QACR,8CAAQ,CAAA;QACR,8CAAQ,CAAA;QACR,8CAAQ,CAAA;QACR,8CAAQ,CAAA;QACR,8CAAQ,CAAA;QACR,8CAAQ,CAAA;QACR,8CAAQ,CAAA;QACR,8CAAQ,CAAA;QACR,8CAAQ,CAAA;QACR,8CAAQ,CAAA;QACR,8CAAQ,CAAA;QACR,8CAAQ,CAAA;QACR,8CAAQ,CAAA;QACR,8CAAQ,CAAA;QACR,8CAAQ,CAAA;QACR,8CAAQ,CAAA;QACR,8CAAQ,CAAA;QACR,8CAAQ,CAAA;QACR,8CAAQ,CAAA;QACR,8CAAQ,CAAA;QAER,8DAAgB,CAAA;QAChB,4DAAe,CAAA;QACf,gDAAS,CAAA;QACT,8DAAgB,CAAA;QAChB,mDAAU,CAAA;QACV,sDAAY,CAAA;QACZ,iEAAiB,CAAA;QACjB,oEAAmB,CAAA;QACnB,gEAAiB,CAAA;QACjB,sDAAY,CAAA;QACZ,sDAAY,CAAA;QACZ,kDAAU,CAAA;QACV,kEAAkB,CAAA;QAClB,wDAAa,CAAA;QACb,kEAAkB,CAAA;QAClB,kEAAkB,CAAA;QAClB,4DAAe,CAAA;QACf,sDAAY,CAAA;QACZ,+DAAgB,CAAA;QAChB,kEAAkB,CAAA;QAClB,8DAAgB,CAAA;QAChB,0DAAc,CAAA;QACd,oDAAW,CAAA;QACX,4DAAe,CAAA;QACf,8DAAgB,CAAA;QAChB,kEAAkB,CAAA;QAClB,sDAAY,CAAA;QACZ,uDAAY,CAAA;QAEZ,6DAAgB,CAAA;QAChB,4DAAe,CAAA;QACf,yEAAsB,CAAA;QACtB,iDAAU,CAAA;QACV,kEAAkB,CAAA;IACnB,CAAC,EAvII,cAAc,KAAd,cAAc,QAuIlB;IAGD;;;;OAIG;IACH,uBAA8B,IAAW,EAAE,SAAiB;QAE3D,IAAI,QAAQ,GAAG,aAAa,CAAC,IAAI,CAAC,EACjC,KAAK,GAAa,EAAE,EACpB,IAAe,EACf,MAAM,GAAG,CAAC,EACV,GAAU,CAAC;QAEZ,GAAG,CAAC;YACH,GAAG,GAAG,QAAQ,CAAC,WAAW,EAAE,CAAC;YAC7B,IAAI,GAAG,QAAQ,CAAC,IAAI,EAAE,CAAC;YACvB,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;gBACd,KAAK,UAAU,CAAC,iBAAiB,CAAC;gBAClC,KAAK,UAAU,CAAC,kBAAkB,CAAC;gBACnC,KAAK,UAAU,CAAC,GAAG;oBAClB,EAAE,CAAA,CAAC,MAAM,KAAK,GAAG,CAAC,CAAC,CAAC;wBACnB,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC;oBACzC,CAAC;oBACD,EAAE,CAAA,CAAC,SAAS,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC;wBACzB,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,CAAC,OAAO,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC,CAAC;oBACrE,CAAC;oBACD,MAAM,GAAG,QAAQ,CAAC,WAAW,EAAE,CAAC;oBAChC,KAAK,CAAC;YACR,CAAC;QACF,CAAC,QAAO,IAAI,KAAK,UAAU,CAAC,GAAG,EAAE;QAEjC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IACvB,CAAC;IA3Be,qBAAa,gBA2B5B,CAAA;IAED,eAAsB,IAAW,EAAE,MAAqB;QAArB,sBAAqB,GAArB,WAAqB;QACvD,IAAI,OAAO,GAAG,MAAM,EAAE,CAAC;QACvB,IAAI,QAAQ,GAAG,aAAa,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QAEzC;YACC,IAAI,KAAK,GAAG,QAAQ,CAAC,IAAI,EAAE,CAAC;YAC5B,OAAO,KAAK,KAAK,UAAU,CAAC,OAAO,EAAE,CAAC;gBACrC,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAe,EAAE,IAAgB,CAAC,CAAC,CAAC;gBAC7D,KAAK,GAAG,QAAQ,CAAC,IAAI,EAAE,CAAC;YACzB,CAAC;YACD,MAAM,CAAC,KAAK,CAAC;QACd,CAAC;QAED,qBAAqB,OAAc,EAAE,cAAiC,EAAE,SAA4B;YAA/D,8BAAiC,GAAjC,mBAAiC;YAAE,yBAA4B,GAA5B,cAA4B;YACnG,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YACrB,EAAE,CAAC,CAAC,cAAc,CAAC,MAAM,GAAG,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;gBAClD,IAAI,KAAK,GAAG,QAAQ,CAAC,QAAQ,EAAE,CAAC;gBAChC,OAAO,KAAK,KAAK,UAAU,CAAC,GAAG,EAAE,CAAC;oBACjC,EAAE,CAAC,CAAC,cAAc,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;wBAC1C,QAAQ,EAAE,CAAC;wBACX,KAAK,CAAC;oBACP,CAAC;oBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;wBAC5C,KAAK,CAAC;oBACP,CAAC;oBACD,KAAK,GAAG,QAAQ,EAAE,CAAC;gBACpB,CAAC;YACF,CAAC;QACF,CAAC;QAED;YACC,EAAE,CAAC,CAAC,QAAQ,CAAC,QAAQ,EAAE,KAAK,UAAU,CAAC,aAAa,CAAC,CAAC,CAAC;gBACtD,MAAM,CAAC,OAAO,CAAC;YAChB,CAAC;YACD,IAAI,KAAK,GAAG,QAAQ,CAAC,aAAa,EAAE,CAAC;YACrC,QAAQ,EAAE,CAAC;YACX,MAAM,CAAC,KAAK,CAAC;QACd,CAAC;QAED;YACC,IAAI,KAAW,CAAC;YAChB,MAAM,CAAC,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;gBAC7B,KAAK,UAAU,CAAC,cAAc;oBAC7B,IAAI,CAAC;wBACJ,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,aAAa,EAAE,CAAC,CAAC;wBAC7C,EAAE,CAAC,CAAC,OAAO,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC;4BAC/B,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAqB,EAAE,IAAuB,CAAC,CAAC,CAAC;4BAC1E,KAAK,GAAG,CAAC,CAAC;wBACX,CAAC;oBACF,CAAE;oBAAA,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;wBACZ,KAAK,GAAG,CAAC,CAAC;oBACX,CAAC;oBACD,KAAK,CAAC;gBACP,KAAK,UAAU,CAAC,WAAW;oBAC1B,KAAK,GAAG,IAAI,CAAC;oBACb,KAAK,CAAC;gBACP,KAAK,UAAU,CAAC,WAAW;oBAC1B,KAAK,GAAG,IAAI,CAAC;oBACb,KAAK,CAAC;gBACP,KAAK,UAAU,CAAC,YAAY;oBAC3B,KAAK,GAAG,KAAK,CAAC;oBACd,KAAK,CAAC;gBACP;oBACC,MAAM,CAAC,OAAO,CAAC;YACjB,CAAC;YACD,QAAQ,EAAE,CAAC;YACX,MAAM,CAAC,KAAK,CAAC;QACd,CAAC;QAED,uBAAuB,MAAW;YACjC,IAAI,GAAG,GAAG,WAAW,EAAE,CAAC;YACxB,EAAE,CAAC,CAAC,GAAG,KAAK,OAAO,CAAC,CAAC,CAAC;gBACrB,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAkB,EAAE,IAAwB,CAAC,EAAE,EAAE,EAAE,CAAC,UAAU,CAAC,eAAe,EAAE,UAAU,CAAC,UAAU,CAAC,CAAE,CAAC;gBAClI,MAAM,CAAC,KAAK,CAAC;YACd,CAAC;YACD,EAAE,CAAC,CAAC,QAAQ,CAAC,QAAQ,EAAE,KAAK,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC;gBACnD,QAAQ,EAAE,CAAC,CAAC,gBAAgB;gBAE5B,IAAI,KAAK,GAAG,UAAU,EAAE,CAAC;gBACzB,EAAE,CAAC,CAAC,KAAK,KAAK,OAAO,CAAC,CAAC,CAAC;oBACvB,MAAM,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;gBACrB,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACP,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAe,EAAE,IAAgB,CAAC,EAAE,EAAE,EAAE,CAAC,UAAU,CAAC,eAAe,EAAE,UAAU,CAAC,UAAU,CAAC,CAAE,CAAC;gBACxH,CAAC;YACF,CAAC;YAAC,IAAI,CAAC,CAAC;gBACP,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAe,EAAE,IAAgB,CAAC,EAAE,EAAE,EAAE,CAAC,UAAU,CAAC,eAAe,EAAE,UAAU,CAAC,UAAU,CAAC,CAAE,CAAC;YACxH,CAAC;YACD,MAAM,CAAC,IAAI,CAAC;QACb,CAAC;QAED;YACC,EAAE,CAAC,CAAC,QAAQ,CAAC,QAAQ,EAAE,KAAK,UAAU,CAAC,cAAc,CAAC,CAAC,CAAC;gBACvD,MAAM,CAAC,OAAO,CAAC;YAChB,CAAC;YACD,IAAI,GAAG,GAAG,EAAE,CAAC;YACb,QAAQ,EAAE,CAAC,CAAC,qBAAqB;YAEjC,IAAI,UAAU,GAAG,KAAK,CAAC;YACvB,OAAO,QAAQ,CAAC,QAAQ,EAAE,KAAK,UAAU,CAAC,eAAe,IAAI,QAAQ,CAAC,QAAQ,EAAE,KAAK,UAAU,CAAC,GAAG,EAAE,CAAC;gBACrG,EAAE,CAAC,CAAC,QAAQ,CAAC,QAAQ,EAAE,KAAK,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC;oBACnD,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;wBACjB,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAe,EAAE,IAAgB,CAAC,EAAE,EAAE,EAAE,EAAE,CAAE,CAAC;oBACvE,CAAC;oBACD,QAAQ,EAAE,CAAC,CAAC,gBAAgB;gBAC7B,CAAC;gBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;oBACvB,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAe,EAAE,IAAgB,CAAC,EAAE,EAAE,EAAE,EAAE,CAAE,CAAC;gBACvE,CAAC;gBACD,IAAI,cAAc,GAAG,aAAa,CAAC,GAAG,CAAC,CAAC;gBACxC,EAAE,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC;oBACrB,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAe,EAAE,IAAgB,CAAC,EAAE,EAAE,EAAE,CAAC,UAAU,CAAC,eAAe,EAAE,UAAU,CAAC,UAAU,CAAC,CAAE,CAAC;gBACxH,CAAC;gBACD,UAAU,GAAG,IAAI,CAAC;YACnB,CAAC;YAED,EAAE,CAAC,CAAC,QAAQ,CAAC,QAAQ,EAAE,KAAK,UAAU,CAAC,eAAe,CAAC,CAAC,CAAC;gBACxD,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAoB,EAAE,IAAwB,CAAC,EAAE,CAAC,UAAU,CAAC,eAAe,CAAC,EAAE,EAAE,CAAC,CAAC;YAC7G,CAAC;YAAC,IAAI,CAAC,CAAC;gBACP,QAAQ,EAAE,CAAC,CAAC,sBAAsB;YACnC,CAAC;YACD,MAAM,CAAC,GAAG,CAAC;QACZ,CAAC;QAED;YACC,EAAE,CAAC,CAAC,QAAQ,CAAC,QAAQ,EAAE,KAAK,UAAU,CAAC,gBAAgB,CAAC,CAAC,CAAC;gBACzD,MAAM,CAAC,OAAO,CAAC;YAChB,CAAC;YACD,IAAI,GAAG,GAAU,EAAE,CAAC;YACpB,QAAQ,EAAE,CAAC,CAAC,uBAAuB;YAEnC,IAAI,UAAU,GAAG,KAAK,CAAC;YACvB,OAAO,QAAQ,CAAC,QAAQ,EAAE,KAAK,UAAU,CAAC,iBAAiB,IAAI,QAAQ,CAAC,QAAQ,EAAE,KAAK,UAAU,CAAC,GAAG,EAAE,CAAC;gBACvG,EAAE,CAAC,CAAC,QAAQ,CAAC,QAAQ,EAAE,KAAK,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC;oBACnD,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;wBACjB,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAc,EAAE,IAAgB,CAAC,EAAE,EAAE,EAAE,EAAE,CAAE,CAAC;oBACtE,CAAC;oBACD,QAAQ,EAAE,CAAC,CAAC,gBAAgB;gBAC7B,CAAC;gBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;oBACvB,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAe,EAAE,IAAgB,CAAC,EAAE,EAAE,EAAE,EAAE,CAAE,CAAC;gBACvE,CAAC;gBACD,IAAI,KAAK,GAAG,UAAU,EAAE,CAAC;gBACzB,EAAE,CAAC,CAAC,KAAK,KAAK,OAAO,CAAC,CAAC,CAAC;oBACvB,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAe,EAAE,IAAgB,CAAC,EAAE,EAAE,EAAE,CAAC,UAAU,CAAC,iBAAiB,EAAE,UAAU,CAAC,UAAU,CAAC,CAAE,CAAC;gBAC1H,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACP,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBACjB,CAAC;gBACD,UAAU,GAAG,IAAI,CAAC;YACnB,CAAC;YAED,EAAE,CAAC,CAAC,QAAQ,CAAC,QAAQ,EAAE,KAAK,UAAU,CAAC,iBAAiB,CAAC,CAAC,CAAC;gBAC1D,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAsB,EAAE,IAA0B,CAAC,EAAE,CAAC,UAAU,CAAC,iBAAiB,CAAC,EAAE,EAAE,CAAC,CAAC;YACnH,CAAC;YAAC,IAAI,CAAC,CAAC;gBACP,QAAQ,EAAE,CAAC,CAAC,wBAAwB;YACrC,CAAC;YACD,MAAM,CAAC,GAAG,CAAC;QACZ,CAAC;QAED;YACC,IAAI,MAAM,GAAG,UAAU,EAAE,CAAC;YAC1B,EAAE,CAAC,CAAC,MAAM,KAAK,OAAO,CAAC,CAAC,CAAC;gBACxB,MAAM,CAAC,MAAM,CAAC;YACf,CAAC;YACD,MAAM,GAAG,WAAW,EAAE,CAAC;YACvB,EAAE,CAAC,CAAC,MAAM,KAAK,OAAO,CAAC,CAAC,CAAC;gBACxB,MAAM,CAAC,MAAM,CAAC;YACf,CAAC;YACD,MAAM,GAAG,WAAW,EAAE,CAAC;YACvB,EAAE,CAAC,CAAC,MAAM,KAAK,OAAO,CAAC,CAAC,CAAC;gBACxB,MAAM,CAAC,MAAM,CAAC;YACf,CAAC;YACD,MAAM,CAAC,YAAY,EAAE,CAAC;QACvB,CAAC;QAED,QAAQ,EAAE,CAAC;QACX,IAAI,KAAK,GAAG,UAAU,EAAE,CAAC;QACzB,EAAE,CAAC,CAAC,KAAK,KAAK,OAAO,CAAC,CAAC,CAAC;YACvB,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAe,EAAE,IAAgB,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;YACrE,MAAM,CAAC,KAAK,CAAC,CAAC;QACf,CAAC;QACD,EAAE,CAAC,CAAC,QAAQ,CAAC,QAAQ,EAAE,KAAK,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC;YAC5C,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAa,EAAE,IAAyB,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;QAC7E,CAAC;QACD,MAAM,CAAC,KAAK,CAAC;IACd,CAAC;IArLe,aAAK,QAqLpB,CAAA","file":"vs/base/common/json.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport nls = require('vs/nls');\n\nexport enum ScanError {\n\tNone,\n\tUnexpectedEndOfComment,\n\tUnexpectedEndOfString,\n\tUnexpectedEndOfNumber,\n\tInvalidUnicode,\n\tInvalidEscapeCharacter\n}\n\nexport enum SyntaxKind {\n\tUnknown = 0,\n\tOpenBraceToken,\n\tCloseBraceToken,\n\tOpenBracketToken,\n\tCloseBracketToken,\n\tCommaToken,\n\tColonToken,\n\tNullKeyword,\n\tTrueKeyword,\n\tFalseKeyword,\n\tStringLiteral,\n\tNumericLiteral,\n\tLineCommentTrivia,\n\tBlockCommentTrivia,\n\tLineBreakTrivia,\n\tTrivia,\n\tEOF\n}\n\nexport interface JSONScanner {\n\tscan(): SyntaxKind;\n\tgetPosition(): number;\n\tgetToken(): SyntaxKind;\n\tgetTokenValue(): string;\n\tgetTokenOffset(): number;\n\tgetTokenLength(): number;\n\tgetTokenError(): ScanError;\n}\n\nexport function createScanner(text:string, ignoreTrivia:boolean = false):JSONScanner {\n\n\tvar pos = 0,\n\t\tlen = text.length,\n\t\tvalue:string = '',\n\t\ttokenOffset = 0,\n\t\ttoken:SyntaxKind = SyntaxKind.Unknown,\n\t\tscanError:ScanError = ScanError.None;\n\n\tfunction scanHexDigits(count: number, exact?: boolean): number {\n\t\tvar digits = 0;\n\t\tvar value = 0;\n\t\twhile (digits < count || !exact) {\n\t\t\tvar ch = text.charCodeAt(pos);\n\t\t\tif (ch >= CharacterCodes._0 && ch <= CharacterCodes._9) {\n\t\t\t\tvalue = value * 16 + ch - CharacterCodes._0;\n\t\t\t}\n\t\t\telse if (ch >= CharacterCodes.A && ch <= CharacterCodes.F) {\n\t\t\t\tvalue = value * 16 + ch - CharacterCodes.A + 10;\n\t\t\t}\n\t\t\telse if (ch >= CharacterCodes.a && ch <= CharacterCodes.f) {\n\t\t\t\tvalue = value * 16 + ch - CharacterCodes.a + 10;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tpos++;\n\t\t\tdigits++;\n\t\t}\n\t\tif (digits < count) {\n\t\t\tvalue = -1;\n\t\t}\n\t\treturn value;\n\t}\n\n\tfunction scanNumber(): string {\n\t\tvar start = pos;\n\t\tif (text.charCodeAt(pos) === CharacterCodes._0) {\n\t\t\tpos++;\n\t\t} else {\n\t\t\tpos++;\n\t\t\twhile (pos < text.length && isDigit(text.charCodeAt(pos))) {\n\t\t\t\tpos++;\n\t\t\t}\n\t\t}\n\t\tif (pos < text.length && text.charCodeAt(pos) === CharacterCodes.dot) {\n\t\t\tpos++;\n\t\t\tif (pos < text.length && isDigit(text.charCodeAt(pos))) {\n\t\t\t\tpos++;\n\t\t\t\twhile (pos < text.length && isDigit(text.charCodeAt(pos))) {\n\t\t\t\t\tpos++;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tscanError = ScanError.UnexpectedEndOfNumber;\n\t\t\t\treturn text.substring(start, end);\n\t\t\t}\n\t\t}\n\t\tvar end = pos;\n\t\tif (pos < text.length && (text.charCodeAt(pos) === CharacterCodes.E || text.charCodeAt(pos) === CharacterCodes.e)) {\n\t\t\tpos++;\n\t\t\tif (pos < text.length && text.charCodeAt(pos) === CharacterCodes.plus || text.charCodeAt(pos) === CharacterCodes.minus) {\n\t\t\t\tpos++;\n\t\t\t}\n\t\t\tif (pos < text.length && isDigit(text.charCodeAt(pos))) {\n\t\t\t\tpos++;\n\t\t\t\twhile (pos < text.length && isDigit(text.charCodeAt(pos))) {\n\t\t\t\t\tpos++;\n\t\t\t\t}\n\t\t\t\tend = pos;\n\t\t\t} else {\n\t\t\t\tscanError = ScanError.UnexpectedEndOfNumber;\n\t\t\t}\n\t\t}\n\t\treturn text.substring(start, end);\n\t}\n\n\tfunction scanString(): string {\n\n\t\tvar result = '',\n\t\t\tstart = pos;\n\n\t\twhile (true) {\n\t\t\tif (pos >= len) {\n\t\t\t\tresult += text.substring(start, pos);\n\t\t\t\tscanError = ScanError.UnexpectedEndOfString;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tvar ch = text.charCodeAt(pos);\n\t\t\tif (ch === CharacterCodes.doubleQuote) {\n\t\t\t\tresult += text.substring(start, pos);\n\t\t\t\tpos++;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (ch === CharacterCodes.backslash) {\n\t\t\t\tresult += text.substring(start, pos);\n\t\t\t\tpos++;\n\t\t\t\tif (pos >= len) {\n\t\t\t\t\tscanError = ScanError.UnexpectedEndOfString;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tch = text.charCodeAt(pos++);\n\t\t\t\tswitch (ch) {\n\t\t\t\t\tcase CharacterCodes.doubleQuote:\n\t\t\t\t\t\tresult += '\\\"';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase CharacterCodes.backslash:\n\t\t\t\t\t\tresult += '\\\\';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase CharacterCodes.slash:\n\t\t\t\t\t\tresult += '/';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase CharacterCodes.b:\n\t\t\t\t\t\tresult += '\\b';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase CharacterCodes.f:\n\t\t\t\t\t\tresult += '\\f';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase CharacterCodes.n:\n\t\t\t\t\t\tresult += '\\n';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase CharacterCodes.r:\n\t\t\t\t\t\tresult += '\\r';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase CharacterCodes.t:\n\t\t\t\t\t\tresult += '\\t';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase CharacterCodes.u:\n\t\t\t\t\t\tvar ch = scanHexDigits(4, true);\n\t\t\t\t\t\tif (ch >= 0) {\n\t\t\t\t\t\t\tresult += String.fromCharCode(ch);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tscanError = ScanError.InvalidUnicode;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tscanError = ScanError.InvalidEscapeCharacter;\n\t\t\t\t}\n\t\t\t\tstart = pos;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (isLineBreak(ch)) {\n\t\t\t\tresult += text.substring(start, pos);\n\t\t\t\tscanError = ScanError.UnexpectedEndOfString;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tpos++;\n\t\t}\n\t\treturn result;\n\t}\n\n\tfunction scanNext():SyntaxKind {\n\n\t\tvalue = '';\n\t\tscanError = ScanError.None;\n\n\t\ttokenOffset = pos;\n\n\t\tif(pos >= len) {\n\t\t\t// at the end\n\t\t\ttokenOffset = len;\n\t\t\treturn token = SyntaxKind.EOF;\n\t\t}\n\n\t\tvar code = text.charCodeAt(pos);\n\t\t// trivia: whitespace\n\t\tif (isWhiteSpace(code)) {\n\t\t\tdo {\n\t\t\t\tpos++;\n\t\t\t\tvalue += String.fromCharCode(code);\n\t\t\t\tcode = text.charCodeAt(pos);\n\t\t\t} while (isWhiteSpace(code));\n\n\t\t\treturn token = SyntaxKind.Trivia;\n\t\t}\n\n\t\t// trivia: newlines\n\t\tif (isLineBreak(code)) {\n\t\t\tpos++;\n\t\t\tvalue += String.fromCharCode(code);\n\t\t\tif (code === CharacterCodes.carriageReturn && text.charCodeAt(pos) === CharacterCodes.lineFeed) {\n\t\t\t\tpos++;\n\t\t\t\tvalue += '\\n';\n\t\t\t}\n\t\t\treturn token = SyntaxKind.LineBreakTrivia;\n\t\t}\n\n\t\tswitch(code) {\n\t\t\t// tokens: []{}:,\n\t\t\tcase CharacterCodes.openBrace:\n\t\t\t\tpos++;\n\t\t\t\treturn token = SyntaxKind.OpenBraceToken;\n\t\t\tcase CharacterCodes.closeBrace:\n\t\t\t\tpos++;\n\t\t\t\treturn token = SyntaxKind.CloseBraceToken;\n\t\t\tcase CharacterCodes.openBracket:\n\t\t\t\tpos++;\n\t\t\t\treturn token = SyntaxKind.OpenBracketToken;\n\t\t\tcase CharacterCodes.closeBracket:\n\t\t\t\tpos++;\n\t\t\t\treturn token = SyntaxKind.CloseBracketToken;\n\t\t\tcase CharacterCodes.colon:\n\t\t\t\tpos++;\n\t\t\t\treturn token = SyntaxKind.ColonToken;\n\t\t\tcase CharacterCodes.comma:\n\t\t\t\tpos++;\n\t\t\t\treturn token = SyntaxKind.CommaToken;\n\n\t\t\t// strings\n\t\t\tcase CharacterCodes.doubleQuote:\n\t\t\t\tpos++;\n\t\t\t\tvalue = scanString();\n\t\t\t\treturn token = SyntaxKind.StringLiteral;\n\n\t\t\t// comments\n\t\t\tcase CharacterCodes.slash:\n\t\t\t\tvar start = pos - 1;\n\t\t\t\t// Single-line comment\n\t\t\t\tif (text.charCodeAt(pos + 1) === CharacterCodes.slash) {\n\t\t\t\t\tpos += 2;\n\n\t\t\t\t\twhile (pos < len) {\n\t\t\t\t\t\tif (isLineBreak(text.charCodeAt(pos))) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tpos++;\n\n\t\t\t\t\t}\n\t\t\t\t\tvalue = text.substring(start, pos);\n\t\t\t\t\treturn token = SyntaxKind.LineCommentTrivia;\n\t\t\t\t}\n\n\t\t\t\t// Multi-line comment\n\t\t\t\tif (text.charCodeAt(pos + 1) === CharacterCodes.asterisk) {\n\t\t\t\t\tpos += 2;\n\n\t\t\t\t\tvar safeLength = len - 1; // For lookahead.\n\t\t\t\t\tvar commentClosed = false;\n\t\t\t\t\twhile (pos < safeLength) {\n\t\t\t\t\t\tvar ch = text.charCodeAt(pos);\n\n\t\t\t\t\t\tif (ch === CharacterCodes.asterisk && text.charCodeAt(pos + 1) === CharacterCodes.slash) {\n\t\t\t\t\t\t\tpos += 2;\n\t\t\t\t\t\t\tcommentClosed = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tpos++;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!commentClosed) {\n\t\t\t\t\t\tpos++;\n\t\t\t\t\t\tscanError = ScanError.UnexpectedEndOfComment;\n\t\t\t\t\t}\n\n\t\t\t\t\tvalue = text.substring(start, pos);\n\t\t\t\t\treturn token = SyntaxKind.BlockCommentTrivia;\n\t\t\t\t}\n\t\t\t\t// just a single slash\n\t\t\t\tvalue += String.fromCharCode(code);\n\t\t\t\tpos++;\n\t\t\t\treturn token = SyntaxKind.Unknown;\n\n\t\t\t// numbers\n\t\t\tcase CharacterCodes.minus:\n\t\t\t\tvalue += String.fromCharCode(code);\n\t\t\t\tpos++;\n\t\t\t\tif (pos === len || !isDigit(text.charCodeAt(pos))) {\n\t\t\t\t\treturn token = SyntaxKind.Unknown;\n\t\t\t\t}\n\t\t\t\t// found a minus, followed by a number so\n\t\t\t\t// we fall through to proceed with scanning\n\t\t\t\t// numbers\n\t\t\tcase CharacterCodes._0:\n\t\t\tcase CharacterCodes._1:\n\t\t\tcase CharacterCodes._2:\n\t\t\tcase CharacterCodes._3:\n\t\t\tcase CharacterCodes._4:\n\t\t\tcase CharacterCodes._5:\n\t\t\tcase CharacterCodes._6:\n\t\t\tcase CharacterCodes._7:\n\t\t\tcase CharacterCodes._8:\n\t\t\tcase CharacterCodes._9:\n\t\t\t\tvalue += scanNumber();\n\t\t\t\treturn token = SyntaxKind.NumericLiteral;\n\t\t\t// literals and unknown symbols\n\t\t\tdefault:\n\t\t\t\t// is a literal? Read the full word.\n\t\t\t\twhile (pos < len && isUnknownContentCharacter(code)) {\n\t\t\t\t\tpos++;\n\t\t\t\t\tcode = text.charCodeAt(pos);\n\t\t\t\t}\n\t\t\t\tif (tokenOffset !== pos) {\n\t\t\t\t\tvalue = text.substring(tokenOffset, pos);\n\t\t\t\t\t// keywords: true, false, null\n\t\t\t\t\tswitch (value) {\n\t\t\t\t\t\tcase 'true': return token = SyntaxKind.TrueKeyword;\n\t\t\t\t\t\tcase 'false': return token = SyntaxKind.FalseKeyword;\n\t\t\t\t\t\tcase 'null': return token = SyntaxKind.NullKeyword;\n\t\t\t\t\t}\n\t\t\t\t\treturn token = SyntaxKind.Unknown;\n\t\t\t\t}\n\t\t\t\t// some\n\t\t\t\tvalue += String.fromCharCode(code);\n\t\t\t\tpos++;\n\t\t\t\treturn token = SyntaxKind.Unknown;\n\t\t}\n\t}\n\n\tfunction isUnknownContentCharacter(code: CharacterCodes) {\n\t\tif (isWhiteSpace(code) || isLineBreak(code)) {\n\t\t\treturn false;\n\t\t}\n\t\tswitch (code) {\n\t\t\tcase CharacterCodes.closeBrace:\n\t\t\tcase CharacterCodes.closeBracket:\n\t\t\tcase CharacterCodes.openBrace:\n\t\t\tcase CharacterCodes.openBracket:\n\t\t\tcase CharacterCodes.doubleQuote:\n\t\t\tcase CharacterCodes.colon:\n\t\t\tcase CharacterCodes.comma:\n\t\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\n\tfunction scanNextNonTrivia():SyntaxKind {\n\t\tvar result : SyntaxKind;\n\t\tdo {\n\t\t\tresult = scanNext();\n\t\t} while (result >= SyntaxKind.LineCommentTrivia && result <= SyntaxKind.Trivia);\n\t\treturn result;\n\t}\n\n\treturn {\n\t\tgetPosition: () => pos,\n\t\tscan: ignoreTrivia ? scanNextNonTrivia : scanNext,\n\t\tgetToken: () => token,\n\t\tgetTokenValue: () => value,\n\t\tgetTokenOffset: () => tokenOffset,\n\t\tgetTokenLength: () => pos - tokenOffset,\n\t\tgetTokenError: () => scanError\n\t};\n}\n\nfunction isWhiteSpace(ch: number): boolean {\n\treturn ch === CharacterCodes.space || ch === CharacterCodes.tab || ch === CharacterCodes.verticalTab || ch === CharacterCodes.formFeed ||\n\t\tch === CharacterCodes.nonBreakingSpace || ch === CharacterCodes.ogham || ch >= CharacterCodes.enQuad && ch <= CharacterCodes.zeroWidthSpace ||\n\t\tch === CharacterCodes.narrowNoBreakSpace || ch === CharacterCodes.mathematicalSpace || ch === CharacterCodes.ideographicSpace || ch === CharacterCodes.byteOrderMark;\n}\n\nfunction isLineBreak(ch: number): boolean {\n\treturn ch === CharacterCodes.lineFeed || ch === CharacterCodes.carriageReturn || ch === CharacterCodes.lineSeparator || ch === CharacterCodes.paragraphSeparator;\n}\n\nfunction isDigit(ch: number): boolean {\n\treturn ch >= CharacterCodes._0 && ch <= CharacterCodes._9;\n}\n\nexport function isLetter(ch: number): boolean {\n\treturn ch >= CharacterCodes.a && ch <= CharacterCodes.z || ch >= CharacterCodes.A && ch <= CharacterCodes.Z;\n}\n\nenum CharacterCodes {\n\tnullCharacter = 0,\n\tmaxAsciiCharacter = 0x7F,\n\n\tlineFeed = 0x0A,              // \\n\n\tcarriageReturn = 0x0D,        // \\r\n\tlineSeparator = 0x2028,\n\tparagraphSeparator = 0x2029,\n\n\t// REVIEW: do we need to support this?  The scanner doesn't, but our IText does.  This seems\n\t// like an odd disparity?  (Or maybe it's completely fine for them to be different).\n\tnextLine = 0x0085,\n\n\t// Unicode 3.0 space characters\n\tspace = 0x0020,   // \" \"\n\tnonBreakingSpace = 0x00A0,   //\n\tenQuad = 0x2000,\n\temQuad = 0x2001,\n\tenSpace = 0x2002,\n\temSpace = 0x2003,\n\tthreePerEmSpace = 0x2004,\n\tfourPerEmSpace = 0x2005,\n\tsixPerEmSpace = 0x2006,\n\tfigureSpace = 0x2007,\n\tpunctuationSpace = 0x2008,\n\tthinSpace = 0x2009,\n\thairSpace = 0x200A,\n\tzeroWidthSpace = 0x200B,\n\tnarrowNoBreakSpace = 0x202F,\n\tideographicSpace = 0x3000,\n\tmathematicalSpace = 0x205F,\n\togham = 0x1680,\n\n\t_ = 0x5F,\n\t$ = 0x24,\n\n\t_0 = 0x30,\n\t_1 = 0x31,\n\t_2 = 0x32,\n\t_3 = 0x33,\n\t_4 = 0x34,\n\t_5 = 0x35,\n\t_6 = 0x36,\n\t_7 = 0x37,\n\t_8 = 0x38,\n\t_9 = 0x39,\n\n\ta = 0x61,\n\tb = 0x62,\n\tc = 0x63,\n\td = 0x64,\n\te = 0x65,\n\tf = 0x66,\n\tg = 0x67,\n\th = 0x68,\n\ti = 0x69,\n\tj = 0x6A,\n\tk = 0x6B,\n\tl = 0x6C,\n\tm = 0x6D,\n\tn = 0x6E,\n\to = 0x6F,\n\tp = 0x70,\n\tq = 0x71,\n\tr = 0x72,\n\ts = 0x73,\n\tt = 0x74,\n\tu = 0x75,\n\tv = 0x76,\n\tw = 0x77,\n\tx = 0x78,\n\ty = 0x79,\n\tz = 0x7A,\n\n\tA = 0x41,\n\tB = 0x42,\n\tC = 0x43,\n\tD = 0x44,\n\tE = 0x45,\n\tF = 0x46,\n\tG = 0x47,\n\tH = 0x48,\n\tI = 0x49,\n\tJ = 0x4A,\n\tK = 0x4B,\n\tL = 0x4C,\n\tM = 0x4D,\n\tN = 0x4E,\n\tO = 0x4F,\n\tP = 0x50,\n\tQ = 0x51,\n\tR = 0x52,\n\tS = 0x53,\n\tT = 0x54,\n\tU = 0x55,\n\tV = 0x56,\n\tW = 0x57,\n\tX = 0x58,\n\tY = 0x59,\n\tZ = 0x5a,\n\n\tampersand = 0x26,             // &\n\tasterisk = 0x2A,              // *\n\tat = 0x40,                    // @\n\tbackslash = 0x5C,             // \\\n\tbar = 0x7C,                   // |\n\tcaret = 0x5E,                 // ^\n\tcloseBrace = 0x7D,            // }\n\tcloseBracket = 0x5D,          // ]\n\tcloseParen = 0x29,            // )\n\tcolon = 0x3A,                 // :\n\tcomma = 0x2C,                 // ,\n\tdot = 0x2E,                   // .\n\tdoubleQuote = 0x22,           // \"\n\tequals = 0x3D,                // =\n\texclamation = 0x21,           // !\n\tgreaterThan = 0x3E,           // >\n\tlessThan = 0x3C,              // <\n\tminus = 0x2D,                 // -\n\topenBrace = 0x7B,             // {\n\topenBracket = 0x5B,           // [\n\topenParen = 0x28,             // (\n\tpercent = 0x25,               // %\n\tplus = 0x2B,                  // +\n\tquestion = 0x3F,              // ?\n\tsemicolon = 0x3B,             // ;\n\tsingleQuote = 0x27,           // '\n\tslash = 0x2F,                 // /\n\ttilde = 0x7E,                 // ~\n\n\tbackspace = 0x08,             // \\b\n\tformFeed = 0x0C,              // \\f\n\tbyteOrderMark = 0xFEFF,\n\ttab = 0x09,                   // \\t\n\tverticalTab = 0x0B,           // \\v\n}\n\n\n/**\n * Takes JSON with JavaScript-style comments and remove\n * them. Optionally replaces every none-newline character\n * of comments with a replaceCharacter\n */\nexport function stripComments(text:string, replaceCh?:string):string {\n\n\tvar _scanner = createScanner(text),\n\t\tparts: string[] = [],\n\t\tkind:SyntaxKind,\n\t\toffset = 0,\n\t\tpos:number;\n\n\tdo {\n\t\tpos = _scanner.getPosition();\n\t\tkind = _scanner.scan();\n\t\tswitch (kind) {\n\t\t\tcase SyntaxKind.LineCommentTrivia:\n\t\t\tcase SyntaxKind.BlockCommentTrivia:\n\t\t\tcase SyntaxKind.EOF:\n\t\t\t\tif(offset !== pos) {\n\t\t\t\t\tparts.push(text.substring(offset, pos));\n\t\t\t\t}\n\t\t\t\tif(replaceCh !== void 0) {\n\t\t\t\t\tparts.push(_scanner.getTokenValue().replace(/[^\\r\\n]/g, replaceCh));\n\t\t\t\t}\n\t\t\t\toffset = _scanner.getPosition();\n\t\t\t\tbreak;\n\t\t}\n\t} while(kind !== SyntaxKind.EOF);\n\n\treturn parts.join('');\n}\n\nexport function parse(text:string, errors: string[] = []) : any {\n\tvar noMatch = Object();\n\tvar _scanner = createScanner(text, true);\n\n\tfunction scanNext() : SyntaxKind {\n\t\tvar token = _scanner.scan();\n\t\twhile (token === SyntaxKind.Unknown) {\n\t\t\thandleError(nls.localize('UnknownSymbol', 'Invalid symbol'));\n\t\t\ttoken = _scanner.scan();\n\t\t}\n\t\treturn token;\n\t}\n\n\tfunction handleError(message:string, skipUntilAfter: SyntaxKind[] = [], skipUntil: SyntaxKind[] = []) : void {\n\t\terrors.push(message);\n\t\tif (skipUntilAfter.length + skipUntil.length > 0) {\n\t\t\tvar token = _scanner.getToken();\n\t\t\twhile (token !== SyntaxKind.EOF) {\n\t\t\t\tif (skipUntilAfter.indexOf(token) !== -1) {\n\t\t\t\t\tscanNext();\n\t\t\t\t\tbreak;\n\t\t\t\t} else if (skipUntil.indexOf(token) !== -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\ttoken = scanNext();\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction parseString() : any {\n\t\tif (_scanner.getToken() !== SyntaxKind.StringLiteral) {\n\t\t\treturn noMatch;\n\t\t}\n\t\tvar value = _scanner.getTokenValue();\n\t\tscanNext();\n\t\treturn value;\n\t}\n\n\tfunction parseLiteral() : any {\n\t\tvar value : any;\n\t\tswitch (_scanner.getToken()) {\n\t\t\tcase SyntaxKind.NumericLiteral:\n\t\t\t\ttry {\n\t\t\t\t\tvalue = JSON.parse(_scanner.getTokenValue());\n\t\t\t\t\tif (typeof value !== 'number') {\n\t\t\t\t\t\thandleError(nls.localize('InvalidNumberFormat', 'Invalid number format'));\n\t\t\t\t\t\tvalue = 0;\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {\n\t\t\t\t\tvalue = 0;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase SyntaxKind.NullKeyword:\n\t\t\t\tvalue = null;\n\t\t\t\tbreak;\n\t\t\tcase SyntaxKind.TrueKeyword:\n\t\t\t\tvalue = true;\n\t\t\t\tbreak;\n\t\t\tcase SyntaxKind.FalseKeyword:\n\t\t\t\tvalue = false;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\treturn noMatch;\n\t\t}\n\t\tscanNext();\n\t\treturn value;\n\t}\n\n\tfunction parseProperty(result: any) : any {\n\t\tvar key = parseString();\n\t\tif (key === noMatch) {\n\t\t\thandleError(nls.localize('PropertyExpected', 'Property name expected'), [], [SyntaxKind.CloseBraceToken, SyntaxKind.CommaToken] );\n\t\t\treturn false;\n\t\t}\n\t\tif (_scanner.getToken() === SyntaxKind.ColonToken) {\n\t\t\tscanNext(); // consume colon\n\n\t\t\tvar value = parseValue();\n\t\t\tif (value !== noMatch) {\n\t\t\t\tresult[key] = value;\n\t\t\t} else {\n\t\t\t\thandleError(nls.localize('ValueExpected', 'Value expected'), [], [SyntaxKind.CloseBraceToken, SyntaxKind.CommaToken] );\n\t\t\t}\n\t\t} else {\n\t\t\thandleError(nls.localize('ColonExpected', 'Colon expected'), [], [SyntaxKind.CloseBraceToken, SyntaxKind.CommaToken] );\n\t\t}\n\t\treturn true;\n\t}\n\n\tfunction parseObject() : any {\n\t\tif (_scanner.getToken() !== SyntaxKind.OpenBraceToken) {\n\t\t\treturn noMatch;\n\t\t}\n\t\tvar obj = {};\n\t\tscanNext(); // consume open brace\n\n\t\tvar needsComma = false;\n\t\twhile (_scanner.getToken() !== SyntaxKind.CloseBraceToken && _scanner.getToken() !== SyntaxKind.EOF) {\n\t\t\tif (_scanner.getToken() === SyntaxKind.CommaToken) {\n\t\t\t\tif (!needsComma) {\n\t\t\t\t\thandleError(nls.localize('ValueExpected', 'Value expected'), [], [] );\n\t\t\t\t}\n\t\t\t\tscanNext(); // consume comma\n\t\t\t} else if (needsComma) {\n\t\t\t\thandleError(nls.localize('CommaExpected', 'Comma expected'), [], [] );\n\t\t\t}\n\t\t\tvar propertyParsed = parseProperty(obj);\n\t\t\tif (!propertyParsed) {\n\t\t\t\thandleError(nls.localize('ValueExpected', 'Value expected'), [], [SyntaxKind.CloseBraceToken, SyntaxKind.CommaToken] );\n\t\t\t}\n\t\t\tneedsComma = true;\n\t\t}\n\n\t\tif (_scanner.getToken() !== SyntaxKind.CloseBraceToken) {\n\t\t\thandleError(nls.localize('CloseBraceExpected', 'Closing brace expected'), [SyntaxKind.CloseBraceToken], []);\n\t\t} else {\n\t\t\tscanNext(); // consume close brace\n\t\t}\n\t\treturn obj;\n\t}\n\n\tfunction parseArray() : any {\n\t\tif (_scanner.getToken() !== SyntaxKind.OpenBracketToken) {\n\t\t\treturn noMatch;\n\t\t}\n\t\tvar arr: any[] = [];\n\t\tscanNext(); // consume open bracket\n\n\t\tvar needsComma = false;\n\t\twhile (_scanner.getToken() !== SyntaxKind.CloseBracketToken && _scanner.getToken() !== SyntaxKind.EOF) {\n\t\t\tif (_scanner.getToken() === SyntaxKind.CommaToken) {\n\t\t\t\tif (!needsComma) {\n\t\t\t\t\thandleError(nls.localize('ValeExpected', 'Value expected'), [], [] );\n\t\t\t\t}\n\t\t\t\tscanNext(); // consume comma\n\t\t\t} else if (needsComma) {\n\t\t\t\thandleError(nls.localize('CommaExpected', 'Comma expected'), [], [] );\n\t\t\t}\n\t\t\tvar value = parseValue();\n\t\t\tif (value === noMatch) {\n\t\t\t\thandleError(nls.localize('ValueExpected', 'Value expected'), [], [SyntaxKind.CloseBracketToken, SyntaxKind.CommaToken] );\n\t\t\t} else {\n\t\t\t\tarr.push(value);\n\t\t\t}\n\t\t\tneedsComma = true;\n\t\t}\n\n\t\tif (_scanner.getToken() !== SyntaxKind.CloseBracketToken) {\n\t\t\thandleError(nls.localize('CloseBracketExpected', 'Closing bracket expected'), [SyntaxKind.CloseBracketToken], []);\n\t\t} else {\n\t\t\tscanNext(); // consume close bracket\n\t\t}\n\t\treturn arr;\n\t}\n\n\tfunction parseValue() : any {\n\t\tvar result = parseArray();\n\t\tif (result !== noMatch) {\n\t\t\treturn result;\n\t\t}\n\t\tresult = parseObject();\n\t\tif (result !== noMatch) {\n\t\t\treturn result;\n\t\t}\n\t\tresult = parseString();\n\t\tif (result !== noMatch) {\n\t\t\treturn result;\n\t\t}\n\t\treturn parseLiteral();\n\t}\n\n\tscanNext();\n\tvar value = parseValue();\n\tif (value === noMatch) {\n\t\thandleError(nls.localize('ValueExpected', 'Value expected'), [], []);\n\t\treturn void 0;\n\t}\n\tif (_scanner.getToken() !== SyntaxKind.EOF) {\n\t\thandleError(nls.localize('EOFExpected', 'End of content expected'), [], []);\n\t}\n\treturn value;\n}\n"]}