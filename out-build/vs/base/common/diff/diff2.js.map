{"version":3,"file":"vs/base/common/diff/diff2.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/base/common/diff/diff2.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {DiffChange} from 'vs/base/common/diff/diffChange';\n\nexport interface ISequence {\n\tgetLength(): number;\n\tgetElementHash(index:number): string;\n}\n\nexport interface IDiffChange {\n\t/**\n\t * The position of the first element in the original sequence which\n\t * this change affects.\n\t */\n\toriginalStart:number;\n\n\t/**\n\t * The number of elements from the original sequence which were\n\t * affected.\n\t */\n\toriginalLength:number;\n\n\t/**\n\t * The position of the first element in the modified sequence which\n\t * this change affects.\n\t */\n\tmodifiedStart:number;\n\n\t/**\n\t * The number of elements from the modified sequence which were\n\t * affected (added).\n\t */\n\tmodifiedLength:number;\n}\n\nexport interface IContinueProcessingPredicate {\n\t(furthestOriginalIndex:number, originalSequence:ISequence, matchLengthOfLongest:number): boolean;\n}\n\nexport interface IHashFunction {\n\t(sequence: ISequence, index:number): string;\n}\n\n/**\n * An implementation of the difference algorithm described by Hirschberg\n */\nexport class LcsDiff2 {\n\n\tprivate x:ISequence;\n\tprivate y:ISequence;\n\n\tprivate ids_for_x:number[];\n\tprivate ids_for_y:number[];\n\n\tprivate hashFunc:IHashFunction;\n\n\tprivate resultX:boolean[];\n\tprivate resultY:boolean[];\n\tprivate forwardPrev:number[];\n\tprivate forwardCurr:number[];\n\tprivate backwardPrev:number[];\n\tprivate backwardCurr:number[];\n\n\tconstructor(originalSequence:ISequence, newSequence:ISequence, continueProcessingPredicate:IContinueProcessingPredicate, hashFunc:IHashFunction) {\n\t\tthis.x = originalSequence;\n\t\tthis.y = newSequence;\n\t\tthis.ids_for_x = [];\n\t\tthis.ids_for_y = [];\n\n\t\tif (hashFunc) {\n\t\t\tthis.hashFunc = hashFunc;\n\t\t} else {\n\t\t\tthis.hashFunc = function (sequence, index) {\n\t\t\t\treturn sequence[index];\n\t\t\t};\n\t\t}\n\n\t\tthis.resultX = [];\n\t\tthis.resultY = [];\n\t\tthis.forwardPrev = [];\n\t\tthis.forwardCurr = [];\n\t\tthis.backwardPrev = [];\n\t\tthis.backwardCurr = [];\n\n\t\tfor (let i = 0, length = this.x.getLength(); i < length; i++) {\n\t\t\tthis.resultX[i] = false;\n\t\t}\n\n\t\tfor (let i = 0, length = this.y.getLength(); i <= length; i++) {\n\t\t\tthis.resultY[i] = false;\n\t\t}\n\n\t\tthis.ComputeUniqueIdentifiers();\n\t}\n\n\tprivate ComputeUniqueIdentifiers() {\n\t\tlet xLength = this.x.getLength();\n\t\tlet yLength = this.y.getLength();\n\t\tthis.ids_for_x = new Array<number>(xLength);\n\t\tthis.ids_for_y = new Array<number>(yLength);\n\n\t\t// Create a new hash table for unique elements from the original\n\t\t// sequence.\n\t\tlet hashTable:{[key:string]:number;} = {};\n\t\tlet currentUniqueId = 1;\n\t\tlet i:number;\n\n\t\t// Fill up the hash table for unique elements\n\t\tfor (i = 0; i < xLength; i++) {\n\t\t\tlet xElementHash = this.x.getElementHash(i);\n\t\t\tif (!hashTable.hasOwnProperty(xElementHash)) {\n\t\t\t\t// No entry in the hashtable so this is a new unique element.\n\t\t\t\t// Assign the element a new unique identifier and add it to the\n\t\t\t\t// hash table\n\t\t\t\tthis.ids_for_x[i] = currentUniqueId++;\n\t\t\t\thashTable[xElementHash] = this.ids_for_x[i];\n\t\t\t} else {\n\t\t\t\tthis.ids_for_x[i] = hashTable[xElementHash];\n\t\t\t}\n\t\t}\n\n\t\t// Now match up modified elements\n\t\tfor (i = 0; i < yLength; i++) {\n\t\t\tlet yElementHash = this.y.getElementHash(i);\n\t\t\tif (!hashTable.hasOwnProperty(yElementHash)) {\n\t\t\t\tthis.ids_for_y[i] = currentUniqueId++;\n\t\t\t\thashTable[yElementHash] = this.ids_for_y[i];\n\t\t\t} else {\n\t\t\t\tthis.ids_for_y[i] = hashTable[yElementHash];\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate ElementsAreEqual(xIndex:number, yIndex:number): boolean {\n\t\treturn this.ids_for_x[xIndex] === this.ids_for_y[yIndex];\n\t}\n\n\tpublic ComputeDiff(): IDiffChange[] {\n\t\tlet xLength = this.x.getLength();\n\t\tlet yLength = this.y.getLength();\n\n\t\tthis.execute(0, xLength - 1, 0, yLength - 1);\n\n\t\t// Construct the changes\n\t\tlet i = 0;\n\t\tlet j = 0;\n\t\tlet xChangeStart, yChangeStart;\n\t\tlet changes = [];\n\t\twhile (i < xLength && j < yLength) {\n\t\t\tif (this.resultX[i] && this.resultY[j]) {\n\t\t\t\t// No change\n\t\t\t\ti++;\n\t\t\t\tj++;\n\t\t\t} else {\n\t\t\t\txChangeStart = i;\n\t\t\t\tyChangeStart = j;\n\t\t\t\twhile (i < xLength && !this.resultX[i]) {\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t\twhile (j < yLength && !this.resultY[j]) {\n\t\t\t\t\tj++;\n\t\t\t\t}\n\t\t\t\tchanges.push(new DiffChange(xChangeStart, i - xChangeStart, yChangeStart, j - yChangeStart));\n\t\t\t}\n\t\t}\n\t\tif (i < xLength) {\n\t\t\tchanges.push(new DiffChange(i, xLength - i, yLength, 0));\n\t\t}\n\t\tif (j < yLength) {\n\t\t\tchanges.push(new DiffChange(xLength, 0, j, yLength - j));\n\t\t}\n\t\treturn changes;\n\t}\n\n\tprivate forward(xStart:number, xStop:number, yStart:number, yStop:number): number[] {\n\t\tlet prev = this.forwardPrev,\n\t\t\tcurr = this.forwardCurr,\n\t\t\ttmp:number[],\n\t\t\ti:number,\n\t\t\tj:number;\n\n\t\t// First line\n\t\tprev[yStart] = this.ElementsAreEqual(xStart, yStart) ? 1 : 0;\n\t\tfor (j = yStart + 1; j <= yStop; j++) {\n\t\t\tprev[j] = this.ElementsAreEqual(xStart, j) ? 1 : prev[j-1];\n\t\t}\n\n\t\tfor (i = xStart + 1; i <= xStop; i++) {\n\t\t\t// First column\n\t\t\tcurr[yStart] = this.ElementsAreEqual(i, yStart) ? 1 : prev[yStart];\n\n\t\t\tfor (j = yStart + 1; j <= yStop; j++) {\n\t\t\t\tif (this.ElementsAreEqual(i, j)) {\n\t\t\t\t\tcurr[j] = prev[j-1] + 1;\n\t\t\t\t} else {\n\t\t\t\t\tcurr[j] = prev[j] > curr[j-1] ? prev[j] : curr[j-1];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Swap prev & curr\n\t\t\ttmp = curr;\n\t\t\tcurr = prev;\n\t\t\tprev = tmp;\n\t\t}\n\n\t\t// Result is always in prev\n\t\treturn prev;\n\t}\n\n\tprivate backward(xStart:number, xStop:number, yStart:number, yStop:number): number[] {\n\t\tlet prev = this.backwardPrev,\n\t\t\tcurr = this.backwardCurr,\n\t\t\ttmp:number[],\n\t\t\ti:number,\n\t\t\tj:number;\n\n\t\t// Last line\n\t\tprev[yStop] = this.ElementsAreEqual(xStop, yStop) ? 1 : 0;\n\t\tfor (j = yStop - 1; j >= yStart; j--) {\n\t\t\tprev[j] = this.ElementsAreEqual(xStop, j) ? 1 : prev[j+1];\n\t\t}\n\n\t\tfor (i = xStop - 1; i >= xStart; i--) {\n\t\t\t// Last column\n\t\t\tcurr[yStop] = this.ElementsAreEqual(i, yStop) ? 1 : prev[yStop];\n\n\t\t\tfor (j = yStop - 1; j >= yStart; j--) {\n\t\t\t\tif (this.ElementsAreEqual(i, j)) {\n\t\t\t\t\tcurr[j] = prev[j+1] + 1;\n\t\t\t\t} else {\n\t\t\t\t\tcurr[j] = prev[j] > curr[j+1] ? prev[j] : curr[j+1];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Swap prev & curr\n\t\t\ttmp = curr;\n\t\t\tcurr = prev;\n\t\t\tprev = tmp;\n\t\t}\n\n\t\t// Result is always in prev\n\t\treturn prev;\n\t}\n\n\tprivate findCut(xStart:number, xStop:number, yStart:number, yStop:number, middle:number): number {\n\t\tlet L1 = this.forward(xStart, middle, yStart, yStop);\n\t\tlet L2 = this.backward(middle + 1, xStop, yStart, yStop);\n\n\t\t// First cut\n\t\tlet max = L2[yStart], cut = yStart-1;\n\n\t\t// Middle cut\n\t\tfor (let j = yStart; j < yStop; j++) {\n\t\t\tif (L1[j] + L2[j+1] > max) {\n\t\t\t\tmax = L1[j] + L2[j+1];\n\t\t\t\tcut = j;\n\t\t\t}\n\t\t}\n\n\t\t// Last cut\n\t\tif (L1[yStop] > max) {\n\t\t\tmax = L1[yStop];\n\t\t\tcut = yStop;\n\t\t}\n\n\t\treturn cut;\n\t}\n\n\tprivate execute(xStart:number, xStop:number, yStart:number, yStop:number) {\n\t\t// Do some prefix trimming\n\t\twhile (xStart <= xStop && yStart <= yStop && this.ElementsAreEqual(xStart, yStart)) {\n\t\t\tthis.resultX[xStart] = true;\n\t\t\txStart ++;\n\t\t\tthis.resultY[yStart] = true;\n\t\t\tyStart ++;\n\t\t}\n\n\t\t// Do some suffix trimming\n\t\twhile (xStart <= xStop && yStart <= yStop && this.ElementsAreEqual(xStop, yStop)) {\n\t\t\tthis.resultX[xStop] = true;\n\t\t\txStop --;\n\t\t\tthis.resultY[yStop] = true;\n\t\t\tyStop --;\n\t\t}\n\n\t\tif (xStart > xStop || yStart > yStop) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet found:number, i:number;\n\t\tif (xStart === xStop) {\n\t\t\tfound = -1;\n\t\t\tfor (i = yStart; i <= yStop; i++) {\n\t\t\t\tif (this.ElementsAreEqual(xStart, i)) {\n\t\t\t\t\tfound = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found >= 0) {\n\t\t\t\tthis.resultX[xStart] = true;\n\t\t\t\tthis.resultY[found] = true;\n\t\t\t}\n\t\t} else if (yStart === yStop) {\n\t\t\tfound = -1;\n\t\t\tfor (i = xStart; i <= xStop; i++) {\n\t\t\t\tif (this.ElementsAreEqual(i, yStart)) {\n\t\t\t\t\tfound = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (found >= 0) {\n\t\t\t\tthis.resultX[found] = true;\n\t\t\t\tthis.resultY[yStart] = true;\n\t\t\t}\n\t\t} else {\n\t\t\tlet middle = Math.floor((xStart + xStop) / 2);\n\t\t\tlet cut = this.findCut(xStart, xStop, yStart, yStop, middle);\n\n\t\t\tif (yStart <= cut) {\n\t\t\t\tthis.execute(xStart, middle, yStart, cut);\n\t\t\t}\n\n\t\t\tif (cut + 1 <= yStop) {\n\t\t\t\tthis.execute(middle+1, xStop, cut+1, yStop);\n\t\t\t}\n\t\t}\n\t}\n\n}\n"]}