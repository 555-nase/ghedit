{"version":3,"file":"vs/base/common/paths.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/base/common/paths.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {isLinux, isWindows} from 'vs/base/common/platform';\nimport {endsWith} from 'vs/base/common/strings';\n\n/**\n * The forward slash path separator.\n */\nexport var sep = '/';\n\n/**\n * The native path separator depending on the OS.\n */\nexport var nativeSep = isWindows ? '\\\\' : '/';\n\nexport function relative(from: string, to: string): string {\n\n\tfrom = normalize(from);\n\tto = normalize(to);\n\n\tvar fromParts = from.split(sep),\n\t\ttoParts = to.split(sep);\n\n\twhile (fromParts.length > 0 && toParts.length > 0) {\n\t\tif (fromParts[0] === toParts[0]) {\n\t\t\tfromParts.shift();\n\t\t\ttoParts.shift();\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tfor (var i = 0, len = fromParts.length; i < len; i++) {\n\t\ttoParts.unshift('..');\n\t}\n\n\treturn toParts.join(sep);\n}\n\nconst _dotSegment = /[\\\\\\/]\\.\\.?[\\\\\\/]?|[\\\\\\/]?\\.\\.?[\\\\\\/]/;\n\nexport function normalize(path: string, toOSPath?: boolean): string {\n\n\tif (!path) {\n\t\treturn path;\n\t}\n\n\t// a path is already normal if it contains no .. or . parts\n\t// and already uses the proper path separator\n\tif (!_dotSegment.test(path)) {\n\n\t\t// badSep is the path separator we don't want. Usually\n\t\t// the backslash, unless isWindows && toOSPath\n\t\tlet badSep = toOSPath && isWindows ? '/' : '\\\\';\n\t\tif (path.indexOf(badSep) === -1) {\n\t\t\treturn path;\n\t\t}\n\t}\n\n\tlet parts = path.split(/[\\\\\\/]/);\n\tfor (let i = 0, len = parts.length; i < len; i++) {\n\t\tif (parts[i] === '.' && !!parts[i + 1]) {\n\t\t\tparts.splice(i, 1);\n\t\t\ti -= 1;\n\t\t} else if (parts[i] === '..' && !!parts[i - 1]) {\n\t\t\tparts.splice(i - 1, 2);\n\t\t\ti -= 2;\n\t\t}\n\t}\n\n\treturn parts.join(toOSPath ? nativeSep : sep);\n}\n\nexport function dirnames(path: string): { next: () => { done: boolean; value: string; } } {\n\n\tvar value = path,\n\t\tdone = false;\n\n\tfunction next() {\n\t\tif (value === '.' || value === '/' || value === '\\\\') {\n\t\t\tvalue = undefined;\n\t\t\tdone = true;\n\t\t} else {\n\t\t\tvalue = dirname(value);\n\t\t}\n\t\treturn {\n\t\t\tvalue,\n\t\t\tdone\n\t\t};\n\t}\n\treturn {\n\t\tnext\n\t};\n}\n\n/**\n * @returns the directory name of a path.\n */\nexport function dirname(path: string): string {\n\tvar idx = ~path.lastIndexOf('/') || ~path.lastIndexOf('\\\\');\n\tif (idx === 0) {\n\t\treturn '.';\n\t} else if (~idx === 0) {\n\t\treturn path[0];\n\t} else {\n\t\treturn path.substring(0, ~idx);\n\t}\n}\n\n/**\n * @returns the base name of a path.\n */\nexport function basename(path: string): string {\n\tvar idx = ~path.lastIndexOf('/') || ~path.lastIndexOf('\\\\');\n\tif (idx === 0) {\n\t\treturn path;\n\t} else if (~idx === path.length - 1) {\n\t\treturn basename(path.substring(0, path.length - 1));\n\t} else {\n\t\treturn path.substr(~idx + 1);\n\t}\n}\n\n/**\n * @returns {{.far}} from boo.far or the empty string.\n */\nexport function extname(path: string): string {\n\tpath = basename(path);\n\tvar idx = ~path.lastIndexOf('.');\n\treturn idx ? path.substring(~idx) : '';\n}\n\n\nfunction getRootLength(path: string): number {\n\n\tif (!path) {\n\t\treturn 0;\n\t}\n\n\tpath = path.replace(/\\/|\\\\/g, '/');\n\n\tif (path[0] === '/') {\n\t\tif (path[1] !== '/') {\n\t\t\t// /far/boo\n\t\t\treturn 1;\n\t\t} else {\n\t\t\t// //server/far/boo\n\t\t\treturn 2;\n\t\t}\n\t}\n\n\tif (path[1] === ':') {\n\t\tif (path[2] === '/') {\n\t\t\t// c:/boo/far.txt\n\t\t\treturn 3;\n\t\t} else {\n\t\t\t// c:\n\t\t\treturn 2;\n\t\t}\n\t}\n\n\tif (path.indexOf('file:///') === 0) {\n\t\treturn 8; // 8 -> 'file:///'.length\n\t}\n\n\tvar idx = path.indexOf('://');\n\tif (idx !== -1) {\n\t\treturn idx + 3; // 3 -> \"://\".length\n\t}\n\treturn 0;\n}\n\nexport function join(...parts: string[]): string {\n\n\tvar rootLen = getRootLength(parts[0]),\n\t\troot: string;\n\n\t// simply preserve things like c:/, //localhost/, file:///, http://, etc\n\troot = parts[0].substr(0, rootLen);\n\tparts[0] = parts[0].substr(rootLen);\n\n\tvar allParts: string[] = [],\n\t\tendsWithSep = /[\\\\\\/]$/.test(parts[parts.length - 1]);\n\n\tfor (var i = 0; i < parts.length; i++) {\n\t\tallParts.push.apply(allParts, parts[i].split(/\\/|\\\\/));\n\t}\n\n\tfor (var i = 0; i < allParts.length; i++) {\n\t\tvar part = allParts[i];\n\t\tif (part === '.' || part.length === 0) {\n\t\t\tallParts.splice(i, 1);\n\t\t\ti -= 1;\n\t\t} else if (part === '..' && !!allParts[i - 1] && allParts[i - 1] !== '..') {\n\t\t\tallParts.splice(i - 1, 2);\n\t\t\ti -= 2;\n\t\t}\n\t}\n\n\tif (endsWithSep) {\n\t\tallParts.push('');\n\t}\n\n\tvar ret = allParts.join('/');\n\tif (root) {\n\t\tret = root.replace(/\\/|\\\\/g, '/') + ret;\n\t}\n\n\treturn ret;\n}\n\nexport function isUNC(path: string): boolean {\n\tif (!isWindows || !path) {\n\t\treturn false; // UNC is a windows concept\n\t}\n\n\tpath = this.normalize(path, true);\n\n\treturn path[0] === nativeSep && path[1] === nativeSep;\n}\n\nfunction isPosixAbsolute(path: string): boolean {\n\treturn path && path[0] === '/';\n}\n\nexport function makeAbsolute(path: string, isPathNormalized?: boolean): string {\n\treturn isPosixAbsolute(!isPathNormalized ? normalize(path) : path) ? path : sep + path;\n}\n\nexport function isRelative(path: string): boolean {\n\treturn path && path.length > 1 && path[0] === '.';\n}\n\nconst _slash = '/'.charCodeAt(0);\n\nexport function isEqualOrParent(path: string, candidate: string): boolean {\n\n\tif (path === candidate) {\n\t\treturn true;\n\t}\n\n\tpath = normalize(path);\n\tcandidate = normalize(candidate);\n\n\tlet candidateLen = candidate.length;\n\tlet lastCandidateChar = candidate.charCodeAt(candidateLen - 1);\n\tif (lastCandidateChar === _slash) {\n\t\tcandidate = candidate.substring(0, candidateLen - 1);\n\t\tcandidateLen -= 1;\n\t}\n\n\tif (path === candidate) {\n\t\treturn true;\n\t}\n\n\tif (!isLinux) {\n\t\t// case insensitive\n\t\tpath = path.toLowerCase();\n\t\tcandidate = candidate.toLowerCase();\n\t}\n\n\tif (path === candidate) {\n\t\treturn true;\n\t}\n\n\tif (path.indexOf(candidate) !== 0) {\n\t\treturn false;\n\t}\n\n\tlet char = path.charCodeAt(candidateLen);\n\treturn char === _slash;\n}\n\n// Reference: https://en.wikipedia.org/wiki/Filename\nconst INVALID_FILE_CHARS = isWindows ? /[\\\\/:\\*\\?\"<>\\|]/g : /[\\\\/]/g;\nconst WINDOWS_FORBIDDEN_NAMES = /^(con|prn|aux|clock\\$|nul|lpt[0-9]|com[0-9])$/i;\nexport function isValidBasename(name: string): boolean {\n\tif (!name || name.length === 0 || /^\\s+$/.test(name)) {\n\t\treturn false; // require a name that is not just whitespace\n\t}\n\n\tINVALID_FILE_CHARS.lastIndex = 0; // the holy grail of software development\n\tif (INVALID_FILE_CHARS.test(name)) {\n\t\treturn false; // check for certain invalid file characters\n\t}\n\n\tif (isWindows && WINDOWS_FORBIDDEN_NAMES.test(name)) {\n\t\treturn false; // check for certain invalid file names\n\t}\n\n\tif (name === '.' || name === '..') {\n\t\treturn false; // check for reserved values\n\t}\n\n\tif (isWindows && endsWith(name, '.')) {\n\t\treturn false; // Windows: file cannot end with a \".\"\n\t}\n\n\tif (isWindows && name.length !== name.trim().length) {\n\t\treturn false; // Windows: file cannot end with a whitespace\n\t}\n\n\treturn true;\n}\n\nexport const isAbsoluteRegex = /^((\\/|[a-zA-Z]:\\\\)[^\\(\\)<>\\\\'\\\"\\[\\]]+)/;\n\n/**\n * If you have access to node, it is recommended to use node's path.isAbsolute().\n * This is a simple regex based approach.\n */\nexport function isAbsolute(path: string): boolean {\n\treturn isAbsoluteRegex.test(path);\n}\n"]}