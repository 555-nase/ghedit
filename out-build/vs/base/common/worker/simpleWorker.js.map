{"version":3,"file":"vs/base/common/worker/simpleWorker.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/base/common/worker/simpleWorker.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {transformErrorForSerialization} from 'vs/base/common/errors';\nimport {Disposable} from 'vs/base/common/lifecycle';\nimport {ErrorCallback, TPromise, ValueCallback} from 'vs/base/common/winjs.base';\nimport {IWorker, IWorkerFactory} from './workerClient';\n\nconst INITIALIZE = '$initialize';\n\ninterface IMessage {\n\tvsWorker: number;\n\treq?: string;\n\tseq?: string;\n}\n\ninterface IRequestMessage extends IMessage {\n\treq: string;\n\tmethod: string;\n\targs: any[];\n}\n\ninterface IReplyMessage extends IMessage {\n\tseq: string;\n\terr: any;\n\tres: any;\n}\n\ninterface IMessageReply {\n\tc: ValueCallback;\n\te: ErrorCallback;\n}\n\ninterface IMessageHandler {\n\tsendMessage(msg:string): void;\n\thandleMessage(method:string, args:any[]): TPromise<any>;\n}\n\nclass SimpleWorkerProtocol {\n\n\tprivate _workerId: number;\n\tprivate _lastSentReq: number;\n\tprivate _pendingReplies: { [req:string]:IMessageReply; };\n\tprivate _handler:IMessageHandler;\n\n\tconstructor(handler:IMessageHandler) {\n\t\tthis._workerId = -1;\n\t\tthis._handler = handler;\n\t\tthis._lastSentReq = 0;\n\t\tthis._pendingReplies = Object.create(null);\n\t}\n\n\tpublic setWorkerId(workerId:number): void {\n\t\tthis._workerId = workerId;\n\t}\n\n\tpublic sendMessage(method:string, args:any[]): TPromise<any> {\n\t\tlet req = String(++this._lastSentReq);\n\t\tlet reply: IMessageReply = {\n\t\t\tc: null,\n\t\t\te: null\n\t\t};\n\t\tlet result = new TPromise<any>((c, e, p) => {\n\t\t\treply.c = c;\n\t\t\treply.e = e;\n\t\t}, () => {\n\t\t\t// Cancel not supported\n\t\t});\n\t\tthis._pendingReplies[req] = reply;\n\n\t\tthis._send({\n\t\t\tvsWorker: this._workerId,\n\t\t\treq: req,\n\t\t\tmethod: method,\n\t\t\targs: args\n\t\t});\n\n\t\treturn result;\n\t}\n\n\tpublic handleMessage(serializedMessage:string): void {\n\t\tlet message:IMessage;\n\t\ttry {\n\t\t\tmessage = JSON.parse(serializedMessage);\n\t\t} catch(e) {\n\t\t\t// nothing\n\t\t}\n\t\tif (!message.vsWorker) {\n\t\t\treturn;\n\t\t}\n\t\tif (this._workerId !== -1 && message.vsWorker !== this._workerId) {\n\t\t\treturn;\n\t\t}\n\t\tthis._handleMessage(message);\n\t}\n\n\tprivate _handleMessage(msg:IMessage): void {\n\t\tif (msg.seq) {\n\t\t\tlet replyMessage = <IReplyMessage>msg;\n\t\t\tif (!this._pendingReplies[replyMessage.seq]) {\n\t\t\t\tconsole.warn('Got reply to unknown seq');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet reply = this._pendingReplies[replyMessage.seq];\n\t\t\tdelete this._pendingReplies[replyMessage.seq];\n\n\t\t\tif (replyMessage.err) {\n\t\t\t\tlet err = replyMessage.err;\n\t\t\t\tif (replyMessage.err.$isError) {\n\t\t\t\t\terr = new Error();\n\t\t\t\t\terr.name = replyMessage.err.name;\n\t\t\t\t\terr.message = replyMessage.err.message;\n\t\t\t\t\terr.stack = replyMessage.err.stack;\n\t\t\t\t}\n\t\t\t\treply.e(err);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treply.c(replyMessage.res);\n\t\t\treturn;\n\t\t}\n\n\t\tlet requestMessage = <IRequestMessage>msg;\n\t\tlet req = requestMessage.req;\n\t\tlet result = this._handler.handleMessage(requestMessage.method, requestMessage.args);\n\t\tresult.then((r) => {\n\t\t\tthis._send({\n\t\t\t\tvsWorker: this._workerId,\n\t\t\t\tseq: req,\n\t\t\t\tres: r,\n\t\t\t\terr: undefined\n\t\t\t});\n\t\t}, (e) => {\n\t\t\tthis._send({\n\t\t\t\tvsWorker: this._workerId,\n\t\t\t\tseq: req,\n\t\t\t\tres: undefined,\n\t\t\t\terr: transformErrorForSerialization(e)\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate _send(msg:IRequestMessage|IReplyMessage): void {\n\t\tlet strMsg = JSON.stringify(msg);\n\t\t// console.log('SENDING: ' + strMsg);\n\t\tthis._handler.sendMessage(strMsg);\n\t}\n}\n\n/**\n * Main thread side\n */\nexport class SimpleWorkerClient<T> extends Disposable {\n\n\tprivate _worker:IWorker;\n\tprivate _onModuleLoaded:TPromise<void>;\n\tprivate _protocol: SimpleWorkerProtocol;\n\tprivate _proxy: T;\n\tprivate _lastRequestTimestamp = -1;\n\n\tconstructor(workerFactory:IWorkerFactory, moduleId:string, ctor:any) {\n\t\tsuper();\n\t\tthis._worker = this._register(workerFactory.create('vs/base/common/worker/simpleWorker', (msg:string) => {\n\t\t\tthis._protocol.handleMessage(msg);\n\t\t}));\n\n\t\tthis._protocol = new SimpleWorkerProtocol({\n\t\t\tsendMessage: (msg:string): void => {\n\t\t\t\tthis._worker.postMessage(msg);\n\t\t\t},\n\t\t\thandleMessage: (method:string, args:any[]): TPromise<any> => {\n\t\t\t\t// Intentionally not supporting worker -> main requests\n\t\t\t\treturn TPromise.as(null);\n\t\t\t}\n\t\t});\n\t\tthis._protocol.setWorkerId(this._worker.getId());\n\n\t\t// Gather loader configuration\n\t\tlet loaderConfiguration:any = null;\n\t\tlet globalRequire = (<any>window).require;\n\t\tif (typeof globalRequire.getConfig === 'function') {\n\t\t\t// Get the configuration from the Monaco AMD Loader\n\t\t\tloaderConfiguration = globalRequire.getConfig();\n\t\t} else if (typeof (<any>window).requirejs !== 'undefined') {\n\t\t\t// Get the configuration from requirejs\n\t\t\tloaderConfiguration = (<any>window).requirejs.s.contexts._.config;\n\t\t}\n\n\t\t// Send initialize message\n\t\tthis._onModuleLoaded = this._protocol.sendMessage(INITIALIZE, [\n\t\t\tthis._worker.getId(),\n\t\t\tmoduleId,\n\t\t\tloaderConfiguration\n\t\t]);\n\t\tthis._onModuleLoaded.then(null, (e) => this._onError('Worker failed to load ' + moduleId, e));\n\n\t\t// Create proxy to loaded code\n\t\tlet proxyMethodRequest = (method:string, args:any[]):TPromise<any> => {\n\t\t\treturn this._request(method, args);\n\t\t};\n\n\t\tlet createProxyMethod = (method:string, proxyMethodRequest:(method:string, args:any[])=>TPromise<any>): Function => {\n\t\t\treturn function () {\n\t\t\t\tlet args = Array.prototype.slice.call(arguments, 0);\n\t\t\t\treturn proxyMethodRequest(method, args);\n\t\t\t};\n\t\t};\n\n\t\tthis._proxy = <T><any>{};\n\t\tfor (let prop in ctor.prototype) {\n\t\t\tif (ctor.prototype.hasOwnProperty(prop)) {\n\t\t\t\tif (typeof ctor.prototype[prop] === 'function') {\n\t\t\t\t\tthis._proxy[prop] = createProxyMethod(prop, proxyMethodRequest);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic get(): T {\n\t\treturn this._proxy;\n\t}\n\n\tpublic getLastRequestTimestamp(): number {\n\t\treturn this._lastRequestTimestamp;\n\t}\n\n\tprivate _request(method:string, args:any[]): TPromise<any> {\n\t\treturn new TPromise<any>((c, e, p) => {\n\t\t\tthis._onModuleLoaded.then(() => {\n\t\t\t\tthis._lastRequestTimestamp = Date.now();\n\t\t\t\tthis._protocol.sendMessage(method, args).then(c, e);\n\t\t\t}, e);\n\t\t}, () => {\n\t\t\t// Cancel intentionally not supported\n\t\t});\n\t}\n\n\tprivate _onError(message:string, error?:any): void {\n\t\tconsole.error(message);\n\t\tconsole.info(error);\n\t}\n}\n\nexport interface IRequestHandler {\n\t_requestHandlerTrait: any;\n}\n\n/**\n * Worker side\n */\nexport class SimpleWorkerServer {\n\n\tprivate _protocol: SimpleWorkerProtocol;\n\tprivate _requestHandler: IRequestHandler;\n\n\tconstructor(postSerializedMessage:(msg:string)=>void) {\n\t\tthis._protocol = new SimpleWorkerProtocol({\n\t\t\tsendMessage: (msg:string): void => {\n\t\t\t\tpostSerializedMessage(msg);\n\t\t\t},\n\t\t\thandleMessage: (method:string, args:any[]): TPromise<any> => this._handleMessage(method, args)\n\t\t});\n\t}\n\n\tpublic onmessage(msg:string): void {\n\t\tthis._protocol.handleMessage(msg);\n\t}\n\n\tprivate _handleMessage(method: string, args:any[]): TPromise<any> {\n\t\tif (method === INITIALIZE) {\n\t\t\treturn this.initialize(<number>args[0], <string>args[1], <any>args[2]);\n\t\t}\n\n\t\tif (!this._requestHandler || typeof this._requestHandler[method] !== 'function') {\n\t\t\treturn TPromise.wrapError(new Error('Missing requestHandler or method: ' + method));\n\t\t}\n\n\t\ttry {\n\t\t\treturn TPromise.as(this._requestHandler[method].apply(this._requestHandler, args));\n\t\t} catch (e) {\n\t\t\treturn TPromise.wrapError(e);\n\t\t}\n\t}\n\n\tprivate initialize(workerId: number, moduleId: string, loaderConfig:any): TPromise<any> {\n\t\tthis._protocol.setWorkerId(workerId);\n\n\t\t// TODO@Alex: share this code with workerServer\n\t\tif (loaderConfig) {\n\t\t\t// Remove 'baseUrl', handling it is beyond scope for now\n\t\t\tif (typeof loaderConfig.baseUrl !== 'undefined') {\n\t\t\t\tdelete loaderConfig['baseUrl'];\n\t\t\t}\n\t\t\tif (typeof loaderConfig.paths !== 'undefined') {\n\t\t\t\tif (typeof loaderConfig.paths.vs !== 'undefined') {\n\t\t\t\t\tdelete loaderConfig.paths['vs'];\n\t\t\t\t}\n\t\t\t}\n\t\t\tlet nlsConfig = loaderConfig['vs/nls'];\n\t\t\t// We need to have pseudo translation\n\t\t\tif (nlsConfig && nlsConfig.pseudo) {\n\t\t\t\trequire(['vs/nls'], function(nlsPlugin) {\n\t\t\t\t\tnlsPlugin.setPseudoTranslation(nlsConfig.pseudo);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Since this is in a web worker, enable catching errors\n\t\t\tloaderConfig.catchError = true;\n\t\t\t(<any>self).require.config(loaderConfig);\n\t\t}\n\n\t\tlet cc: ValueCallback;\n\t\tlet ee: ErrorCallback;\n\t\tlet r = new TPromise<any>((c, e, p) => {\n\t\t\tcc = c;\n\t\t\tee = e;\n\t\t});\n\n\t\trequire([moduleId], (...result:any[]) => {\n\t\t\tlet handlerModule = result[0];\n\t\t\tthis._requestHandler = handlerModule.create();\n\t\t\tcc(null);\n\t\t}, ee);\n\n\t\treturn r;\n\t}\n}\n\n/**\n * Called on the worker side\n */\nexport function create(postMessage:(msg:string)=>void): SimpleWorkerServer {\n\treturn new SimpleWorkerServer(postMessage);\n}\n"]}