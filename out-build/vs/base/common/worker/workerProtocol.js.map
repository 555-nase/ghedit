{"version":3,"file":"vs/base/common/worker/workerProtocol.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/base/common/worker/workerProtocol.ts"],"names":[],"mappings":";IAAA;;;oGAGgG;IAChG,YAAY,CAAC;IAiDF,mBAAW,GAAG;QACxB,UAAU,EAAE,aAAa;QACzB,KAAK,EAAE,QAAQ;QACf,KAAK,EAAE,QAAQ;KACf,CAAC;IAES,iBAAS,GAAG;QACtB,QAAQ,EAAE,UAAU;QACpB,KAAK,EAAE,OAAO;QACd,QAAQ,EAAE,UAAU;KACpB,CAAC;IAES,iBAAS,GAAG;QACtB,GAAG,EAAE,KAAK;QACV,KAAK,EAAE,OAAO;QACd,IAAI,EAAE,MAAM;QACZ,IAAI,EAAE,MAAM;QACZ,KAAK,EAAE,OAAO;KACd,CAAC;IAMF;QAKC,mBAAY,SAAoB;YAC/B,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;YAC5B,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QACzB,CAAC;QAEM,gCAAY,GAAnB,UAAoB,OAAe,EAAE,IAAY,EAAE,IAAU;YAC5D,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,WAAW,EAAE;gBAC3C,OAAO,EAAE,OAAO;gBAChB,IAAI,EAAE,IAAI;gBACV,IAAI,EAAE,IAAI;aACV,CAAC,CAAC;QACJ,CAAC;QAEM,kCAAc,GAArB,UAAsB,OAAoB;YACzC,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC;QAC5B,CAAC;QAEM,iCAAa,GAApB,UAAqB,GAAoD;YACxE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;gBACvB,MAAM,IAAI,KAAK,CAAC,0CAA0C,CAAC,CAAC;YAC7D,CAAC;YACD,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,OAAO,EAAE,GAAG,CAAC,IAAI,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC;QAC7D,CAAC;QAEO,kCAAc,GAAtB,UAAuB,KAAY,EAAE,MAAa,EAAE,IAAU;YAC7D,IAAI,CAAC;gBACJ,MAAM,CAAC,qBAAQ,CAAC,EAAE,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,KAAK,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC,CAAC;YAClE,CAAE;YAAA,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBACd,MAAM,CAAC,qBAAQ,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;YAChC,CAAC;QACF,CAAC;QACF,gBAAC;IAAD,CAAC,AApCD,IAoCC;IApCY,iBAAS,YAoCrB,CAAA","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {IManyHandler, IRemoteCom} from 'vs/base/common/remote';\nimport {TPromise} from 'vs/base/common/winjs.base';\n\n/**\n * A message sent from the UI thread to a worker\n */\nexport interface IClientMessage {\n\tid:number;\n\ttype:string;\n\ttimestamp:number;\n\tpayload:any;\n}\n\n/**\n * A message sent from the UI thread in reply to a worker\n */\nexport interface IClientReplyMessage extends IClientMessage {\n\tseq:string;\n\terr:any;\n}\n\n/**\n * A message sent from a worker to the UI thread\n */\nexport interface IServerMessage {\n\tmonacoWorker:boolean;\n\tfrom:number;\n\treq:string;\n\ttype:string;\n\tpayload:any;\n}\n\n/**\n * A message sent from a worker to the UI thread in reply to a UI thread request\n */\nexport interface IServerReplyMessage extends IServerMessage {\n\tid:number;\n\taction:string;\n}\n\n/**\n * A message sent from a worker to the UI thread for debugging purposes (console.log, console.info, etc.)\n */\nexport interface IServerPrintMessage extends IServerMessage {\n\tlevel:string;\n}\n\nexport var MessageType = {\n\tINITIALIZE: '$initialize',\n\tREPLY: '$reply',\n\tPRINT: '$print'\n};\n\nexport var ReplyType = {\n\tCOMPLETE: 'complete',\n\tERROR: 'error',\n\tPROGRESS: 'progress'\n};\n\nexport var PrintType = {\n\tLOG: 'log',\n\tDEBUG: 'debug',\n\tINFO: 'info',\n\tWARN: 'warn',\n\tERROR: 'error'\n};\n\nexport interface IRequester {\n\trequest(requestName: string, payload: any): TPromise<any>;\n}\n\nexport class RemoteCom implements IRemoteCom {\n\n\tprivate _requester: IRequester;\n\tprivate _bigHandler: IManyHandler;\n\n\tconstructor(requester:IRequester) {\n\t\tthis._requester = requester;\n\t\tthis._bigHandler = null;\n\t}\n\n\tpublic callOnRemote(proxyId: string, path: string, args:any[]): TPromise<any> {\n\t\treturn this._requester.request('_proxyObj', {\n\t\t\tproxyId: proxyId,\n\t\t\tpath: path,\n\t\t\targs: args\n\t\t});\n\t}\n\n\tpublic setManyHandler(handler:IManyHandler): void {\n\t\tthis._bigHandler = handler;\n\t}\n\n\tpublic handleMessage(msg: { proxyId: string; path: string; args: any[]; }): TPromise<any> {\n\t\tif (!this._bigHandler) {\n\t\t\tthrow new Error('got message before big handler attached!');\n\t\t}\n\t\treturn this._invokeHandler(msg.proxyId, msg.path, msg.args);\n\t}\n\n\tprivate _invokeHandler(rpcId:string, method:string, args:any[]): TPromise<any> {\n\t\ttry {\n\t\t\treturn TPromise.as(this._bigHandler.handle(rpcId, method, args));\n\t\t} catch (err) {\n\t\t\treturn TPromise.wrapError(err);\n\t\t}\n\t}\n}"]}