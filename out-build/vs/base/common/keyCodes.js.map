{"version":3,"sources":["vs/base/common/keyCodes.ts"],"names":[],"mappings":"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C,OAAO,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC;QACnC,aAAa,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC;QACnC,aAAa,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC;QAEnC,aAAa,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC;QACnC,aAAa,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC;QACnC,aAAa,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC;QACnC,aAAa,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC;QACnC,aAAa,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC;QACnC,aAAa,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC;QACnC,aAAa,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC;QACnC,aAAa,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC;QACnC,aAAa,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC;QACnC,aAAa,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC;QACnC,aAAa,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC;QACnC,aAAa,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC;QACnC,aAAa,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC;QACnC,aAAa,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC;QACnC,aAAa,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC;QACnC,aAAa,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC;QACnC,aAAa,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC;QACnC,aAAa,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC;QACnC,aAAa,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC;QACnC,aAAa,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC;QACnC,aAAa,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,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","file":"vs/base/common/keyCodes.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport * as nls from 'vs/nls';\nimport * as defaultPlatform from 'vs/base/common/platform';\nimport {IHTMLContentElement} from 'vs/base/common/htmlContent';\n\nexport interface ISimplifiedPlatform {\n\tisMacintosh: boolean;\n\tisWindows: boolean;\n}\n\n/**\n * Virtual Key Codes, the value does not hold any inherent meaning.\n * Inspired somewhat from https://msdn.microsoft.com/en-us/library/windows/desktop/dd375731(v=vs.85).aspx\n * But these are \"more general\", as they should work across browsers & OS`s.\n */\nexport enum KeyCode {\n\t/**\n\t * Placed first to cover the 0 value of the enum.\n\t */\n\tUnknown,\n\n\tBackspace,\n\tTab,\n\tEnter,\n\tShift,\n\tCtrl,\n\tAlt,\n\tPauseBreak,\n\tCapsLock,\n\tEscape,\n\tSpace,\n\tPageUp,\n\tPageDown,\n\tEnd,\n\tHome,\n\tLeftArrow,\n\tUpArrow,\n\tRightArrow,\n\tDownArrow,\n\tInsert,\n\tDelete,\n\n\tKEY_0,\n\tKEY_1,\n\tKEY_2,\n\tKEY_3,\n\tKEY_4,\n\tKEY_5,\n\tKEY_6,\n\tKEY_7,\n\tKEY_8,\n\tKEY_9,\n\n\tKEY_A,\n\tKEY_B,\n\tKEY_C,\n\tKEY_D,\n\tKEY_E,\n\tKEY_F,\n\tKEY_G,\n\tKEY_H,\n\tKEY_I,\n\tKEY_J,\n\tKEY_K,\n\tKEY_L,\n\tKEY_M,\n\tKEY_N,\n\tKEY_O,\n\tKEY_P,\n\tKEY_Q,\n\tKEY_R,\n\tKEY_S,\n\tKEY_T,\n\tKEY_U,\n\tKEY_V,\n\tKEY_W,\n\tKEY_X,\n\tKEY_Y,\n\tKEY_Z,\n\n\tMeta,\n\tContextMenu,\n\n\tF1,\n\tF2,\n\tF3,\n\tF4,\n\tF5,\n\tF6,\n\tF7,\n\tF8,\n\tF9,\n\tF10,\n\tF11,\n\tF12,\n\tF13,\n\tF14,\n\tF15,\n\tF16,\n\tF17,\n\tF18,\n\tF19,\n\n\tNumLock,\n\tScrollLock,\n\n\t/**\n\t * Used for miscellaneous characters; it can vary by keyboard.\n\t * For the US standard keyboard, the ';:' key\n\t */\n\tUS_SEMICOLON,\n\t/**\n\t * For any country/region, the '+' key\n\t * For the US standard keyboard, the '=+' key\n\t */\n\tUS_EQUAL,\n\t/**\n\t * For any country/region, the ',' key\n\t * For the US standard keyboard, the ',<' key\n\t */\n\tUS_COMMA,\n\t/**\n\t * For any country/region, the '-' key\n\t * For the US standard keyboard, the '-_' key\n\t */\n\tUS_MINUS,\n\t/**\n\t * For any country/region, the '.' key\n\t * For the US standard keyboard, the '.>' key\n\t */\n\tUS_DOT,\n\t/**\n\t * Used for miscellaneous characters; it can vary by keyboard.\n\t * For the US standard keyboard, the '/?' key\n\t */\n\tUS_SLASH,\n\t/**\n\t * Used for miscellaneous characters; it can vary by keyboard.\n\t * For the US standard keyboard, the '`~' key\n\t */\n\tUS_BACKTICK,\n\t/**\n\t * Used for miscellaneous characters; it can vary by keyboard.\n\t * For the US standard keyboard, the '[{' key\n\t */\n\tUS_OPEN_SQUARE_BRACKET,\n\t/**\n\t * Used for miscellaneous characters; it can vary by keyboard.\n\t * For the US standard keyboard, the '\\|' key\n\t */\n\tUS_BACKSLASH,\n\t/**\n\t * Used for miscellaneous characters; it can vary by keyboard.\n\t * For the US standard keyboard, the ']}' key\n\t */\n\tUS_CLOSE_SQUARE_BRACKET,\n\t/**\n\t * Used for miscellaneous characters; it can vary by keyboard.\n\t * For the US standard keyboard, the ''\"' key\n\t */\n\tUS_QUOTE,\n\t/**\n\t * Used for miscellaneous characters; it can vary by keyboard.\n\t */\n\tOEM_8,\n\t/**\n\t * Either the angle bracket key or the backslash key on the RT 102-key keyboard.\n\t */\n\tOEM_102,\n\n\tNUMPAD_0, // VK_NUMPAD0, 0x60, Numeric keypad 0 key\n\tNUMPAD_1, // VK_NUMPAD1, 0x61, Numeric keypad 1 key\n\tNUMPAD_2, // VK_NUMPAD2, 0x62, Numeric keypad 2 key\n\tNUMPAD_3, // VK_NUMPAD3, 0x63, Numeric keypad 3 key\n\tNUMPAD_4, // VK_NUMPAD4, 0x64, Numeric keypad 4 key\n\tNUMPAD_5, // VK_NUMPAD5, 0x65, Numeric keypad 5 key\n\tNUMPAD_6, // VK_NUMPAD6, 0x66, Numeric keypad 6 key\n\tNUMPAD_7, // VK_NUMPAD7, 0x67, Numeric keypad 7 key\n\tNUMPAD_8, // VK_NUMPAD8, 0x68, Numeric keypad 8 key\n\tNUMPAD_9, // VK_NUMPAD9, 0x69, Numeric keypad 9 key\n\n\tNUMPAD_MULTIPLY,\t// VK_MULTIPLY, 0x6A, Multiply key\n\tNUMPAD_ADD,\t\t\t// VK_ADD, 0x6B, Add key\n\tNUMPAD_SEPARATOR,\t// VK_SEPARATOR, 0x6C, Separator key\n\tNUMPAD_SUBTRACT,\t// VK_SUBTRACT, 0x6D, Subtract key\n\tNUMPAD_DECIMAL,\t\t// VK_DECIMAL, 0x6E, Decimal key\n\tNUMPAD_DIVIDE,\t\t// VK_DIVIDE, 0x6F,\n\n\t/**\n\t * Placed last to cover the length of the enum.\n\t */\n\tMAX_VALUE\n}\n\ninterface IReverseMap {\n\t[str:string]:KeyCode;\n}\n\nclass Mapping {\n\n\t_fromKeyCode: string[];\n\t_toKeyCode: IReverseMap;\n\n\tconstructor(fromKeyCode: string[], toKeyCode: IReverseMap) {\n\t\tthis._fromKeyCode = fromKeyCode;\n\t\tthis._toKeyCode = toKeyCode;\n\t}\n\n\tfromKeyCode(keyCode:KeyCode): string {\n\t\treturn this._fromKeyCode[keyCode];\n\t}\n\n\ttoKeyCode(str:string): KeyCode {\n\t\tif (this._toKeyCode.hasOwnProperty(str)) {\n\t\t\treturn this._toKeyCode[str];\n\t\t}\n\t\treturn KeyCode.Unknown;\n\t}\n\n}\n\nfunction createMapping(fill1:(map:string[])=>void, fill2:(reverseMap:IReverseMap)=>void): Mapping {\n\tlet MAP: string[] = [];\n\tfill1(MAP);\n\n\tlet REVERSE_MAP: IReverseMap = {};\n\tfor (let i = 0, len = MAP.length; i < len; i++) {\n\t\tif (!MAP[i]) {\n\t\t\tcontinue;\n\t\t}\n\t\tREVERSE_MAP[MAP[i]] = i;\n\t}\n\tfill2(REVERSE_MAP);\n\n\tlet FINAL_REVERSE_MAP: IReverseMap = {};\n\tfor (let entry in REVERSE_MAP) {\n\t\tif (REVERSE_MAP.hasOwnProperty(entry)) {\n\t\t\tFINAL_REVERSE_MAP[entry] = REVERSE_MAP[entry];\n\t\t\tFINAL_REVERSE_MAP[entry.toLowerCase()] = REVERSE_MAP[entry];\n\t\t}\n\t}\n\n\treturn new Mapping(MAP, FINAL_REVERSE_MAP);\n}\n\nlet STRING = createMapping((TO_STRING_MAP) => {\n\tTO_STRING_MAP[KeyCode.Unknown] \t\t= 'unknown';\n\n\tTO_STRING_MAP[KeyCode.Backspace] \t= 'Backspace';\n\tTO_STRING_MAP[KeyCode.Tab] \t\t\t= 'Tab';\n\tTO_STRING_MAP[KeyCode.Enter] \t\t= 'Enter';\n\tTO_STRING_MAP[KeyCode.Shift] \t\t= 'Shift';\n\tTO_STRING_MAP[KeyCode.Ctrl] \t\t= 'Ctrl';\n\tTO_STRING_MAP[KeyCode.Alt] \t\t\t= 'Alt';\n\tTO_STRING_MAP[KeyCode.PauseBreak] \t= 'PauseBreak';\n\tTO_STRING_MAP[KeyCode.CapsLock] \t= 'CapsLock';\n\tTO_STRING_MAP[KeyCode.Escape] \t\t= 'Escape';\n\tTO_STRING_MAP[KeyCode.Space] \t\t= 'Space';\n\tTO_STRING_MAP[KeyCode.PageUp] \t\t= 'PageUp';\n\tTO_STRING_MAP[KeyCode.PageDown] \t= 'PageDown';\n\tTO_STRING_MAP[KeyCode.End] \t\t\t= 'End';\n\tTO_STRING_MAP[KeyCode.Home] \t\t= 'Home';\n\tTO_STRING_MAP[KeyCode.LeftArrow] \t= 'LeftArrow';\n\tTO_STRING_MAP[KeyCode.UpArrow] \t\t= 'UpArrow';\n\tTO_STRING_MAP[KeyCode.RightArrow] \t= 'RightArrow';\n\tTO_STRING_MAP[KeyCode.DownArrow] \t= 'DownArrow';\n\tTO_STRING_MAP[KeyCode.Insert] \t\t= 'Insert';\n\tTO_STRING_MAP[KeyCode.Delete] \t\t= 'Delete';\n\n\tTO_STRING_MAP[KeyCode.KEY_0] = '0';\n\tTO_STRING_MAP[KeyCode.KEY_1] = '1';\n\tTO_STRING_MAP[KeyCode.KEY_2] = '2';\n\tTO_STRING_MAP[KeyCode.KEY_3] = '3';\n\tTO_STRING_MAP[KeyCode.KEY_4] = '4';\n\tTO_STRING_MAP[KeyCode.KEY_5] = '5';\n\tTO_STRING_MAP[KeyCode.KEY_6] = '6';\n\tTO_STRING_MAP[KeyCode.KEY_7] = '7';\n\tTO_STRING_MAP[KeyCode.KEY_8] = '8';\n\tTO_STRING_MAP[KeyCode.KEY_9] = '9';\n\n\tTO_STRING_MAP[KeyCode.KEY_A] = 'A';\n\tTO_STRING_MAP[KeyCode.KEY_B] = 'B';\n\tTO_STRING_MAP[KeyCode.KEY_C] = 'C';\n\tTO_STRING_MAP[KeyCode.KEY_D] = 'D';\n\tTO_STRING_MAP[KeyCode.KEY_E] = 'E';\n\tTO_STRING_MAP[KeyCode.KEY_F] = 'F';\n\tTO_STRING_MAP[KeyCode.KEY_G] = 'G';\n\tTO_STRING_MAP[KeyCode.KEY_H] = 'H';\n\tTO_STRING_MAP[KeyCode.KEY_I] = 'I';\n\tTO_STRING_MAP[KeyCode.KEY_J] = 'J';\n\tTO_STRING_MAP[KeyCode.KEY_K] = 'K';\n\tTO_STRING_MAP[KeyCode.KEY_L] = 'L';\n\tTO_STRING_MAP[KeyCode.KEY_M] = 'M';\n\tTO_STRING_MAP[KeyCode.KEY_N] = 'N';\n\tTO_STRING_MAP[KeyCode.KEY_O] = 'O';\n\tTO_STRING_MAP[KeyCode.KEY_P] = 'P';\n\tTO_STRING_MAP[KeyCode.KEY_Q] = 'Q';\n\tTO_STRING_MAP[KeyCode.KEY_R] = 'R';\n\tTO_STRING_MAP[KeyCode.KEY_S] = 'S';\n\tTO_STRING_MAP[KeyCode.KEY_T] = 'T';\n\tTO_STRING_MAP[KeyCode.KEY_U] = 'U';\n\tTO_STRING_MAP[KeyCode.KEY_V] = 'V';\n\tTO_STRING_MAP[KeyCode.KEY_W] = 'W';\n\tTO_STRING_MAP[KeyCode.KEY_X] = 'X';\n\tTO_STRING_MAP[KeyCode.KEY_Y] = 'Y';\n\tTO_STRING_MAP[KeyCode.KEY_Z] = 'Z';\n\n\tTO_STRING_MAP[KeyCode.ContextMenu] = 'ContextMenu';\n\n\tTO_STRING_MAP[KeyCode.F1] = 'F1';\n\tTO_STRING_MAP[KeyCode.F2] = 'F2';\n\tTO_STRING_MAP[KeyCode.F3] = 'F3';\n\tTO_STRING_MAP[KeyCode.F4] = 'F4';\n\tTO_STRING_MAP[KeyCode.F5] = 'F5';\n\tTO_STRING_MAP[KeyCode.F6] = 'F6';\n\tTO_STRING_MAP[KeyCode.F7] = 'F7';\n\tTO_STRING_MAP[KeyCode.F8] = 'F8';\n\tTO_STRING_MAP[KeyCode.F9] = 'F9';\n\tTO_STRING_MAP[KeyCode.F10] = 'F10';\n\tTO_STRING_MAP[KeyCode.F11] = 'F11';\n\tTO_STRING_MAP[KeyCode.F12] = 'F12';\n\tTO_STRING_MAP[KeyCode.F13] = 'F13';\n\tTO_STRING_MAP[KeyCode.F14] = 'F14';\n\tTO_STRING_MAP[KeyCode.F15] = 'F15';\n\tTO_STRING_MAP[KeyCode.F16] = 'F16';\n\tTO_STRING_MAP[KeyCode.F17] = 'F17';\n\tTO_STRING_MAP[KeyCode.F18] = 'F18';\n\tTO_STRING_MAP[KeyCode.F19] = 'F19';\n\n\n\tTO_STRING_MAP[KeyCode.NumLock] \t\t= 'NumLock';\n\tTO_STRING_MAP[KeyCode.ScrollLock] \t= 'ScrollLock';\n\n\tTO_STRING_MAP[KeyCode.US_SEMICOLON] \t\t\t= ';';\n\tTO_STRING_MAP[KeyCode.US_EQUAL] \t\t\t\t= '=';\n\tTO_STRING_MAP[KeyCode.US_COMMA] \t\t\t\t= ',';\n\tTO_STRING_MAP[KeyCode.US_MINUS] \t\t\t\t= '-';\n\tTO_STRING_MAP[KeyCode.US_DOT] \t\t\t\t\t= '.';\n\tTO_STRING_MAP[KeyCode.US_SLASH] \t\t\t\t= '/';\n\tTO_STRING_MAP[KeyCode.US_BACKTICK] \t\t\t\t= '`';\n\tTO_STRING_MAP[KeyCode.US_OPEN_SQUARE_BRACKET] \t= '[';\n\tTO_STRING_MAP[KeyCode.US_BACKSLASH] \t\t\t= '\\\\';\n\tTO_STRING_MAP[KeyCode.US_CLOSE_SQUARE_BRACKET] \t= ']';\n\tTO_STRING_MAP[KeyCode.US_QUOTE]\t\t\t\t\t= '\\'';\n\tTO_STRING_MAP[KeyCode.OEM_8]\t\t\t\t\t= 'OEM_8';\n\tTO_STRING_MAP[KeyCode.OEM_102]\t\t\t\t\t= 'OEM_102';\n\n\tTO_STRING_MAP[KeyCode.NUMPAD_0] = 'NumPad0';\n\tTO_STRING_MAP[KeyCode.NUMPAD_1] = 'NumPad1';\n\tTO_STRING_MAP[KeyCode.NUMPAD_2] = 'NumPad2';\n\tTO_STRING_MAP[KeyCode.NUMPAD_3] = 'NumPad3';\n\tTO_STRING_MAP[KeyCode.NUMPAD_4] = 'NumPad4';\n\tTO_STRING_MAP[KeyCode.NUMPAD_5] = 'NumPad5';\n\tTO_STRING_MAP[KeyCode.NUMPAD_6] = 'NumPad6';\n\tTO_STRING_MAP[KeyCode.NUMPAD_7] = 'NumPad7';\n\tTO_STRING_MAP[KeyCode.NUMPAD_8] = 'NumPad8';\n\tTO_STRING_MAP[KeyCode.NUMPAD_9] = 'NumPad9';\n\n\tTO_STRING_MAP[KeyCode.NUMPAD_MULTIPLY] = 'NumPad_Multiply';\n\tTO_STRING_MAP[KeyCode.NUMPAD_ADD] = 'NumPad_Add';\n\tTO_STRING_MAP[KeyCode.NUMPAD_SEPARATOR] = 'NumPad_Separator';\n\tTO_STRING_MAP[KeyCode.NUMPAD_SUBTRACT] = 'NumPad_Subtract';\n\tTO_STRING_MAP[KeyCode.NUMPAD_DECIMAL] = 'NumPad_Decimal';\n\tTO_STRING_MAP[KeyCode.NUMPAD_DIVIDE] = 'NumPad_Divide';\n\n\t// for (let i = 0; i < KeyCode.MAX_VALUE; i++) {\n\t// \tif (!TO_STRING_MAP[i]) {\n\t// \t\tconsole.warn('Missing string representation for ' + KeyCode[i]);\n\t// \t}\n\t// }\n}, (FROM_STRING_MAP) => {\n\tFROM_STRING_MAP['\\r'] = KeyCode.Enter;\n});\n\n\nlet USER_SETTINGS = createMapping((TO_USER_SETTINGS_MAP) => {\n\tfor (let i = 0, len = STRING._fromKeyCode.length; i < len; i++) {\n\t\tTO_USER_SETTINGS_MAP[i] = STRING._fromKeyCode[i];\n\t}\n\tTO_USER_SETTINGS_MAP[KeyCode.LeftArrow] = 'Left';\n\tTO_USER_SETTINGS_MAP[KeyCode.UpArrow] = 'Up';\n\tTO_USER_SETTINGS_MAP[KeyCode.RightArrow] = 'Right';\n\tTO_USER_SETTINGS_MAP[KeyCode.DownArrow] = 'Down';\n}, (FROM_USER_SETTINGS_MAP) => {\n\tFROM_USER_SETTINGS_MAP['OEM_1'] = KeyCode.US_SEMICOLON;\n\tFROM_USER_SETTINGS_MAP['OEM_PLUS'] = KeyCode.US_EQUAL;\n\tFROM_USER_SETTINGS_MAP['OEM_COMMA'] = KeyCode.US_COMMA;\n\tFROM_USER_SETTINGS_MAP['OEM_MINUS'] = KeyCode.US_MINUS;\n\tFROM_USER_SETTINGS_MAP['OEM_PERIOD'] = KeyCode.US_DOT;\n\tFROM_USER_SETTINGS_MAP['OEM_2'] = KeyCode.US_SLASH;\n\tFROM_USER_SETTINGS_MAP['OEM_3'] = KeyCode.US_BACKTICK;\n\tFROM_USER_SETTINGS_MAP['OEM_4'] = KeyCode.US_OPEN_SQUARE_BRACKET;\n\tFROM_USER_SETTINGS_MAP['OEM_5'] = KeyCode.US_BACKSLASH;\n\tFROM_USER_SETTINGS_MAP['OEM_6'] = KeyCode.US_CLOSE_SQUARE_BRACKET;\n\tFROM_USER_SETTINGS_MAP['OEM_7'] = KeyCode.US_QUOTE;\n\tFROM_USER_SETTINGS_MAP['OEM_8'] = KeyCode.OEM_8;\n\tFROM_USER_SETTINGS_MAP['OEM_102'] = KeyCode.OEM_102;\n});\n\nexport namespace KeyCode {\n\texport function toString(key:KeyCode): string {\n\t\treturn STRING.fromKeyCode(key);\n\t}\n\texport function fromString(key:string): KeyCode {\n\t\treturn STRING.toKeyCode(key);\n\t}\n}\n\n// Binary encoding strategy:\n// 15:  1 bit for ctrlCmd\n// 14:  1 bit for shift\n// 13:  1 bit for alt\n// 12:  1 bit for winCtrl\n//  0: 12 bits for keyCode (up to a maximum keyCode of 4096. Given we have 83 at this point thats good enough)\n\nconst BIN_CTRLCMD_MASK = 1 << 15;\nconst BIN_SHIFT_MASK = 1 << 14;\nconst BIN_ALT_MASK = 1 << 13;\nconst BIN_WINCTRL_MASK = 1 << 12;\nconst BIN_KEYCODE_MASK = 0x00000fff;\n\nexport class BinaryKeybindings {\n\n\tpublic static extractFirstPart(keybinding:number): number {\n\t\treturn keybinding & 0x0000ffff;\n\t}\n\n\tpublic static extractChordPart(keybinding:number): number {\n\t\treturn (keybinding >> 16) & 0x0000ffff;\n\t}\n\n\tpublic static hasChord(keybinding:number): boolean {\n\t\treturn (this.extractChordPart(keybinding) !== 0);\n\t}\n\n\tpublic static hasCtrlCmd(keybinding:number): boolean {\n\t\treturn (keybinding & BIN_CTRLCMD_MASK ? true : false);\n\t}\n\n\tpublic static hasShift(keybinding:number): boolean {\n\t\treturn (keybinding & BIN_SHIFT_MASK ? true : false);\n\t}\n\n\tpublic static hasAlt(keybinding:number): boolean {\n\t\treturn (keybinding & BIN_ALT_MASK ? true : false);\n\t}\n\n\tpublic static hasWinCtrl(keybinding:number): boolean {\n\t\treturn (keybinding & BIN_WINCTRL_MASK ? true : false);\n\t}\n\n\tpublic static extractKeyCode(keybinding:number): KeyCode {\n\t\treturn (keybinding & BIN_KEYCODE_MASK);\n\t}\n}\n\n\n\nexport class KeyMod {\n\tpublic static CtrlCmd = BIN_CTRLCMD_MASK;\n\tpublic static Shift = BIN_SHIFT_MASK;\n\tpublic static Alt = BIN_ALT_MASK;\n\tpublic static WinCtrl = BIN_WINCTRL_MASK;\n\n\tpublic static chord(firstPart:number, secondPart:number): number {\n\t\treturn firstPart | ((secondPart & 0x0000ffff) << 16);\n\t}\n}\n\n/**\n * A set of usual keybindings that can be reused in code\n */\nexport class CommonKeybindings {\n\n\tpublic static ENTER: number = KeyCode.Enter;\n\tpublic static SHIFT_ENTER: number = KeyMod.Shift | KeyCode.Enter;\n\tpublic static CTRLCMD_ENTER: number = KeyMod.CtrlCmd | KeyCode.Enter;\n\tpublic static WINCTRL_ENTER: number = KeyMod.WinCtrl | KeyCode.Enter;\n\n\tpublic static TAB: number = KeyCode.Tab;\n\tpublic static SHIFT_TAB: number = KeyMod.Shift | KeyCode.Tab;\n\tpublic static ESCAPE: number = KeyCode.Escape;\n\tpublic static SPACE: number = KeyCode.Space;\n\tpublic static DELETE: number = KeyCode.Delete;\n\tpublic static SHIFT_DELETE: number = KeyMod.Shift | KeyCode.Delete;\n\tpublic static CTRLCMD_BACKSPACE: number = KeyMod.CtrlCmd | KeyCode.Backspace;\n\n\tpublic static UP_ARROW: number = KeyCode.UpArrow;\n\tpublic static SHIFT_UP_ARROW: number = KeyMod.Shift | KeyCode.UpArrow;\n\tpublic static CTRLCMD_UP_ARROW: number = KeyMod.CtrlCmd | KeyCode.UpArrow;\n\n\tpublic static DOWN_ARROW: number = KeyCode.DownArrow;\n\tpublic static SHIFT_DOWN_ARROW: number = KeyMod.Shift | KeyCode.DownArrow;\n\tpublic static CTRLCMD_DOWN_ARROW: number = KeyMod.CtrlCmd | KeyCode.DownArrow;\n\n\tpublic static LEFT_ARROW: number = KeyCode.LeftArrow;\n\n\tpublic static RIGHT_ARROW: number = KeyCode.RightArrow;\n\n\tpublic static PAGE_UP: number = KeyCode.PageUp;\n\tpublic static SHIFT_PAGE_UP: number = KeyMod.Shift | KeyCode.PageUp;\n\n\tpublic static PAGE_DOWN: number = KeyCode.PageDown;\n\tpublic static SHIFT_PAGE_DOWN: number = KeyMod.Shift | KeyCode.PageDown;\n\n\tpublic static F2: number = KeyCode.F2;\n\n\tpublic static CTRLCMD_S: number = KeyMod.CtrlCmd | KeyCode.KEY_S;\n\tpublic static CTRLCMD_C: number = KeyMod.CtrlCmd | KeyCode.KEY_C;\n\tpublic static CTRLCMD_V: number = KeyMod.CtrlCmd | KeyCode.KEY_V;\n}\n\nexport class Keybinding {\n\n\t/**\n\t * Format the binding to a format appropiate for rendering in the UI\n\t */\n\tprivate static _toUSLabel(value:number, Platform:ISimplifiedPlatform): string {\n\t\treturn _asString(value, (Platform.isMacintosh ? MacUIKeyLabelProvider.INSTANCE : ClassicUIKeyLabelProvider.INSTANCE), Platform);\n\t}\n\n\t/**\n\t * Format the binding to a format appropiate for placing in an aria-label.\n\t */\n\tprivate static _toUSAriaLabel(value:number, Platform:ISimplifiedPlatform): string {\n\t\treturn _asString(value, AriaKeyLabelProvider.INSTANCE, Platform);\n\t}\n\n\t/**\n\t * Format the binding to a format appropiate for rendering in the UI\n\t */\n\tprivate static _toUSHTMLLabel(value:number, Platform:ISimplifiedPlatform): IHTMLContentElement[] {\n\t\treturn _asHTML(value, (Platform.isMacintosh ? MacUIKeyLabelProvider.INSTANCE : ClassicUIKeyLabelProvider.INSTANCE), Platform);\n\t}\n\n\t/**\n\t * Format the binding to a format appropiate for rendering in the UI\n\t */\n\tprivate static _toCustomLabel(value:number, labelProvider:IKeyBindingLabelProvider, Platform:ISimplifiedPlatform): string {\n\t\treturn _asString(value, labelProvider, Platform);\n\t}\n\n\t/**\n\t * Format the binding to a format appropiate for rendering in the UI\n\t */\n\tprivate static _toCustomHTMLLabel(value:number, labelProvider:IKeyBindingLabelProvider, Platform:ISimplifiedPlatform): IHTMLContentElement[] {\n\t\treturn _asHTML(value, labelProvider, Platform);\n\t}\n\n\t/**\n\t * This prints the binding in a format suitable for electron's accelerators.\n\t * See https://github.com/atom/electron/blob/master/docs/api/accelerator.md\n\t */\n\tprivate static _toElectronAccelerator(value:number, Platform:ISimplifiedPlatform): string {\n\t\tif (BinaryKeybindings.hasChord(value)) {\n\t\t\t// Electron cannot handle chords\n\t\t\treturn null;\n\t\t}\n\t\treturn _asString(value, ElectronAcceleratorLabelProvider.INSTANCE, Platform);\n\t}\n\n\tprivate static _cachedKeybindingRegex: string = null;\n\tpublic static getUserSettingsKeybindingRegex(): string {\n\t\tif (!this._cachedKeybindingRegex) {\n\t\t\tlet numpadKey = 'numpad(0|1|2|3|4|5|6|7|8|9|_multiply|_add|_subtract|_decimal|_divide|_separator)';\n\t\t\tlet oemKey = '`|\\\\-|=|\\\\[|\\\\]|\\\\\\\\\\\\\\\\|;|\\'|,|\\\\.|\\\\/|oem_8|oem_102';\n\t\t\tlet specialKey = 'left|up|right|down|pageup|pagedown|end|home|tab|enter|escape|space|backspace|delete|pausebreak|capslock|insert|contextmenu|numlock|scrolllock';\n\t\t\tlet casualKey = '[a-z]|[0-9]|f(1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19)';\n\t\t\tlet key = '((' + [numpadKey, oemKey, specialKey, casualKey].join(')|(') + '))';\n\t\t\tlet mod = '((ctrl|shift|alt|cmd|win|meta)\\\\+)*';\n\t\t\tlet keybinding = '(' + mod + key + ')';\n\n\t\t\tthis._cachedKeybindingRegex = '\"\\\\s*(' + keybinding + '(\\\\s+' + keybinding +')?' + ')\\\\s*\"';\n\t\t}\n\t\treturn this._cachedKeybindingRegex;\n\t}\n\n\t/**\n\t * Format the binding to a format appropiate for the user settings file.\n\t */\n\tpublic static toUserSettingsLabel(value:number, Platform:ISimplifiedPlatform = defaultPlatform): string {\n\t\tlet result = _asString(value, UserSettingsKeyLabelProvider.INSTANCE, Platform);\n\t\tresult = result.toLowerCase();\n\n\t\tif (Platform.isMacintosh) {\n\t\t\tresult = result.replace(/meta/g, 'cmd');\n\t\t} else if (Platform.isWindows) {\n\t\t\tresult = result.replace(/meta/g, 'win');\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tpublic static fromUserSettingsLabel(input: string, Platform: ISimplifiedPlatform = defaultPlatform): number {\n\t\tif (!input) {\n\t\t\treturn null;\n\t\t}\n\t\tinput = input.toLowerCase().trim();\n\n\t\tlet ctrlCmd = false,\n\t\t\tshift = false,\n\t\t\talt = false,\n\t\t\twinCtrl = false,\n\t\t\tkey:string = '';\n\n\t\twhile (/^(ctrl|shift|alt|meta|win|cmd)(\\+|\\-)/.test(input)) {\n\t\t\tif (/^ctrl(\\+|\\-)/.test(input)) {\n\t\t\t\tif (Platform.isMacintosh) {\n\t\t\t\t\twinCtrl = true;\n\t\t\t\t} else {\n\t\t\t\t\tctrlCmd = true;\n\t\t\t\t}\n\t\t\t\tinput = input.substr('ctrl-'.length);\n\t\t\t}\n\t\t\tif (/^shift(\\+|\\-)/.test(input)) {\n\t\t\t\tshift = true;\n\t\t\t\tinput = input.substr('shift-'.length);\n\t\t\t}\n\t\t\tif (/^alt(\\+|\\-)/.test(input)) {\n\t\t\t\talt = true;\n\t\t\t\tinput = input.substr('alt-'.length);\n\t\t\t}\n\t\t\tif (/^meta(\\+|\\-)/.test(input)) {\n\t\t\t\tif (Platform.isMacintosh) {\n\t\t\t\t\tctrlCmd = true;\n\t\t\t\t} else {\n\t\t\t\t\twinCtrl = true;\n\t\t\t\t}\n\t\t\t\tinput = input.substr('meta-'.length);\n\t\t\t}\n\t\t\tif (/^win(\\+|\\-)/.test(input)) {\n\t\t\t\tif (Platform.isMacintosh) {\n\t\t\t\t\tctrlCmd = true;\n\t\t\t\t} else {\n\t\t\t\t\twinCtrl = true;\n\t\t\t\t}\n\t\t\t\tinput = input.substr('win-'.length);\n\t\t\t}\n\t\t\tif (/^cmd(\\+|\\-)/.test(input)) {\n\t\t\t\tif (Platform.isMacintosh) {\n\t\t\t\t\tctrlCmd = true;\n\t\t\t\t} else {\n\t\t\t\t\twinCtrl = true;\n\t\t\t\t}\n\t\t\t\tinput = input.substr('cmd-'.length);\n\t\t\t}\n\t\t}\n\n\t\tlet chord: number = 0;\n\n\t\tlet firstSpaceIdx = input.indexOf(' ');\n\t\tif (firstSpaceIdx > 0) {\n\t\t\tkey = input.substring(0, firstSpaceIdx);\n\t\t\tchord = Keybinding.fromUserSettingsLabel(input.substring(firstSpaceIdx), Platform);\n\t\t} else {\n\t\t\tkey = input;\n\t\t}\n\n\t\tlet keyCode = USER_SETTINGS.toKeyCode(key);\n\n\t\tlet result = 0;\n\t\tif (ctrlCmd) {\n\t\t\tresult |= KeyMod.CtrlCmd;\n\t\t}\n\t\tif (shift) {\n\t\t\tresult |= KeyMod.Shift;\n\t\t}\n\t\tif (alt) {\n\t\t\tresult |= KeyMod.Alt;\n\t\t}\n\t\tif (winCtrl) {\n\t\t\tresult |= KeyMod.WinCtrl;\n\t\t}\n\t\tresult |= keyCode;\n\t\treturn KeyMod.chord(result, chord);\n\t}\n\n\tpublic value:number;\n\n\tconstructor(keybinding:number) {\n\t\tthis.value = keybinding;\n\t}\n\n\tpublic hasCtrlCmd(): boolean {\n\t\treturn BinaryKeybindings.hasCtrlCmd(this.value);\n\t}\n\n\tpublic hasShift(): boolean {\n\t\treturn BinaryKeybindings.hasShift(this.value);\n\t}\n\n\tpublic hasAlt(): boolean {\n\t\treturn BinaryKeybindings.hasAlt(this.value);\n\t}\n\n\tpublic hasWinCtrl(): boolean {\n\t\treturn BinaryKeybindings.hasWinCtrl(this.value);\n\t}\n\n\tpublic extractKeyCode(): KeyCode {\n\t\treturn BinaryKeybindings.extractKeyCode(this.value);\n\t}\n\n\t/**\n\t * Format the binding to a format appropiate for rendering in the UI\n\t */\n\tpublic _toUSLabel(Platform:ISimplifiedPlatform = defaultPlatform): string {\n\t\treturn Keybinding._toUSLabel(this.value, Platform);\n\t}\n\n\t/**\n\t * Format the binding to a format appropiate for placing in an aria-label.\n\t */\n\tpublic _toUSAriaLabel(Platform:ISimplifiedPlatform = defaultPlatform): string {\n\t\treturn Keybinding._toUSAriaLabel(this.value, Platform);\n\t}\n\n\t/**\n\t * Format the binding to a format appropiate for rendering in the UI\n\t */\n\tpublic _toUSHTMLLabel(Platform:ISimplifiedPlatform = defaultPlatform): IHTMLContentElement[] {\n\t\treturn Keybinding._toUSHTMLLabel(this.value, Platform);\n\t}\n\n\t/**\n\t * Format the binding to a format appropiate for rendering in the UI\n\t */\n\tpublic toCustomLabel(labelProvider:IKeyBindingLabelProvider, Platform:ISimplifiedPlatform = defaultPlatform): string {\n\t\treturn Keybinding._toCustomLabel(this.value, labelProvider, Platform);\n\t}\n\n\t/**\n\t * Format the binding to a format appropiate for rendering in the UI\n\t */\n\tpublic toCustomHTMLLabel(labelProvider:IKeyBindingLabelProvider, Platform:ISimplifiedPlatform = defaultPlatform): IHTMLContentElement[] {\n\t\treturn Keybinding._toCustomHTMLLabel(this.value, labelProvider, Platform);\n\t}\n\n\t/**\n\t * This prints the binding in a format suitable for electron's accelerators.\n\t * See https://github.com/atom/electron/blob/master/docs/api/accelerator.md\n\t */\n\tpublic _toElectronAccelerator(Platform:ISimplifiedPlatform = defaultPlatform): string {\n\t\treturn Keybinding._toElectronAccelerator(this.value, Platform);\n\t}\n\n\t/**\n\t * Format the binding to a format appropiate for the user settings file.\n\t */\n\tpublic toUserSettingsLabel(Platform:ISimplifiedPlatform = defaultPlatform): string {\n\t\treturn Keybinding.toUserSettingsLabel(this.value, Platform);\n\t}\n\n}\n\nexport interface IKeyBindingLabelProvider {\n\tctrlKeyLabel:string;\n\tshiftKeyLabel:string;\n\taltKeyLabel:string;\n\tcmdKeyLabel:string;\n\twindowsKeyLabel:string;\n\tmodifierSeparator:string;\n\tgetLabelForKey(keyCode:KeyCode): string;\n}\n\n/**\n * Print for Electron\n */\nexport class ElectronAcceleratorLabelProvider implements IKeyBindingLabelProvider {\n\tpublic static INSTANCE = new ElectronAcceleratorLabelProvider();\n\n\tpublic ctrlKeyLabel = 'Ctrl';\n\tpublic shiftKeyLabel = 'Shift';\n\tpublic altKeyLabel = 'Alt';\n\tpublic cmdKeyLabel = 'Cmd';\n\tpublic windowsKeyLabel = 'Super';\n\tpublic modifierSeparator = '+';\n\n\tpublic getLabelForKey(keyCode:KeyCode): string {\n\t\tswitch (keyCode) {\n\t\t\tcase KeyCode.UpArrow:\n\t\t\t\treturn 'Up';\n\t\t\tcase KeyCode.DownArrow:\n\t\t\t\treturn 'Down';\n\t\t\tcase KeyCode.LeftArrow:\n\t\t\t\treturn 'Left';\n\t\t\tcase KeyCode.RightArrow:\n\t\t\t\treturn 'Right';\n\t\t}\n\n\t\treturn KeyCode.toString(keyCode);\n\t}\n}\n\n/**\n * Print for Mac UI\n */\nexport class MacUIKeyLabelProvider implements IKeyBindingLabelProvider {\n\tpublic static INSTANCE = new MacUIKeyLabelProvider();\n\n\tprivate static leftArrowUnicodeLabel = String.fromCharCode(8592);\n\tprivate static upArrowUnicodeLabel = String.fromCharCode(8593);\n\tprivate static rightArrowUnicodeLabel = String.fromCharCode(8594);\n\tprivate static downArrowUnicodeLabel = String.fromCharCode(8595);\n\n\tpublic ctrlKeyLabel = '\\u2303';\n\tpublic shiftKeyLabel = '\\u21E7';\n\tpublic altKeyLabel = '\\u2325';\n\tpublic cmdKeyLabel = '\\u2318';\n\tpublic windowsKeyLabel = nls.localize('windowsKey', \"Windows\");\n\tpublic modifierSeparator = '';\n\n\tpublic getLabelForKey(keyCode:KeyCode): string {\n\t\tswitch (keyCode) {\n\t\t\tcase KeyCode.LeftArrow:\n\t\t\t\treturn MacUIKeyLabelProvider.leftArrowUnicodeLabel;\n\t\t\tcase KeyCode.UpArrow:\n\t\t\t\treturn MacUIKeyLabelProvider.upArrowUnicodeLabel;\n\t\t\tcase KeyCode.RightArrow:\n\t\t\t\treturn MacUIKeyLabelProvider.rightArrowUnicodeLabel;\n\t\t\tcase KeyCode.DownArrow:\n\t\t\t\treturn MacUIKeyLabelProvider.downArrowUnicodeLabel;\n\t\t}\n\n\t\treturn KeyCode.toString(keyCode);\n\t}\n}\n\n/**\n * Aria label provider for Mac.\n */\nexport class AriaKeyLabelProvider implements IKeyBindingLabelProvider {\n\tpublic static INSTANCE = new MacUIKeyLabelProvider();\n\n\tpublic ctrlKeyLabel = nls.localize('ctrlKey.long', \"Control\");\n\tpublic shiftKeyLabel = nls.localize('shiftKey.long', \"Shift\");\n\tpublic altKeyLabel = nls.localize('altKey.long', \"Alt\");\n\tpublic cmdKeyLabel = nls.localize('cmdKey.long', \"Command\");\n\tpublic windowsKeyLabel = nls.localize('windowsKey.long', \"Windows\");\n\tpublic modifierSeparator = '+';\n\n\tpublic getLabelForKey(keyCode:KeyCode): string {\n\t\treturn KeyCode.toString(keyCode);\n\t}\n}\n\n/**\n * Print for Windows, Linux UI\n */\nexport class ClassicUIKeyLabelProvider implements IKeyBindingLabelProvider {\n\tpublic static INSTANCE = new ClassicUIKeyLabelProvider();\n\n\tpublic ctrlKeyLabel = nls.localize('ctrlKey', \"Ctrl\");\n\tpublic shiftKeyLabel = nls.localize('shiftKey', \"Shift\");\n\tpublic altKeyLabel = nls.localize('altKey', \"Alt\");\n\tpublic cmdKeyLabel = nls.localize('cmdKey', \"Command\");\n\tpublic windowsKeyLabel = nls.localize('windowsKey', \"Windows\");\n\tpublic modifierSeparator = '+';\n\n\tpublic getLabelForKey(keyCode:KeyCode): string {\n\t\treturn KeyCode.toString(keyCode);\n\t}\n}\n\n/**\n * Print for the user settings file.\n */\nclass UserSettingsKeyLabelProvider implements IKeyBindingLabelProvider {\n\tpublic static INSTANCE = new UserSettingsKeyLabelProvider();\n\n\tpublic ctrlKeyLabel = 'Ctrl';\n\tpublic shiftKeyLabel = 'Shift';\n\tpublic altKeyLabel = 'Alt';\n\tpublic cmdKeyLabel = 'Meta';\n\tpublic windowsKeyLabel = 'Meta';\n\n\tpublic modifierSeparator = '+';\n\n\tpublic getLabelForKey(keyCode:KeyCode): string {\n\t\treturn USER_SETTINGS.fromKeyCode(keyCode);\n\t}\n}\n\nfunction _asString(keybinding:number, labelProvider:IKeyBindingLabelProvider, Platform:ISimplifiedPlatform): string {\n\tlet result:string[] = [],\n\t\tctrlCmd = BinaryKeybindings.hasCtrlCmd(keybinding),\n\t\tshift = BinaryKeybindings.hasShift(keybinding),\n\t\talt = BinaryKeybindings.hasAlt(keybinding),\n\t\twinCtrl = BinaryKeybindings.hasWinCtrl(keybinding),\n\t\tkeyCode = BinaryKeybindings.extractKeyCode(keybinding);\n\n\tlet keyLabel = labelProvider.getLabelForKey(keyCode);\n\tif (!keyLabel) {\n\t\t// cannot trigger this key code under this kb layout\n\t\treturn '';\n\t}\n\n\t// translate modifier keys: Ctrl-Shift-Alt-Meta\n\tif ((ctrlCmd && !Platform.isMacintosh) || (winCtrl && Platform.isMacintosh)) {\n\t\tresult.push(labelProvider.ctrlKeyLabel);\n\t}\n\n\tif (shift) {\n\t\tresult.push(labelProvider.shiftKeyLabel);\n\t}\n\n\tif (alt) {\n\t\tresult.push(labelProvider.altKeyLabel);\n\t}\n\n\tif (ctrlCmd && Platform.isMacintosh) {\n\t\tresult.push(labelProvider.cmdKeyLabel);\n\t}\n\n\tif (winCtrl && !Platform.isMacintosh) {\n\t\tresult.push(labelProvider.windowsKeyLabel);\n\t}\n\n\t// the actual key\n\tresult.push(keyLabel);\n\n\tvar actualResult = result.join(labelProvider.modifierSeparator);\n\n\tif (BinaryKeybindings.hasChord(keybinding)) {\n\t\treturn actualResult + ' ' + _asString(BinaryKeybindings.extractChordPart(keybinding), labelProvider, Platform);\n\t}\n\n\treturn actualResult;\n}\n\nfunction _pushKey(result:IHTMLContentElement[], str:string): void {\n\tif (result.length > 0) {\n\t\tresult.push({\n\t\t\ttagName: 'span',\n\t\t\ttext: '+'\n\t\t});\n\t}\n\tresult.push({\n\t\ttagName: 'span',\n\t\tclassName: 'monaco-kbkey',\n\t\ttext: str\n\t});\n}\n\nfunction _asHTML(keybinding:number, labelProvider:IKeyBindingLabelProvider, Platform:ISimplifiedPlatform, isChord:boolean = false): IHTMLContentElement[] {\n\tlet result:IHTMLContentElement[] = [],\n\t\tctrlCmd = BinaryKeybindings.hasCtrlCmd(keybinding),\n\t\tshift = BinaryKeybindings.hasShift(keybinding),\n\t\talt = BinaryKeybindings.hasAlt(keybinding),\n\t\twinCtrl = BinaryKeybindings.hasWinCtrl(keybinding),\n\t\tkeyCode = BinaryKeybindings.extractKeyCode(keybinding);\n\n\tlet keyLabel = labelProvider.getLabelForKey(keyCode);\n\tif (!keyLabel) {\n\t\t// cannot trigger this key code under this kb layout\n\t\treturn [];\n\t}\n\n\t// translate modifier keys: Ctrl-Shift-Alt-Meta\n\tif ((ctrlCmd && !Platform.isMacintosh) || (winCtrl && Platform.isMacintosh)) {\n\t\t_pushKey(result, labelProvider.ctrlKeyLabel);\n\t}\n\n\tif (shift) {\n\t\t_pushKey(result, labelProvider.shiftKeyLabel);\n\t}\n\n\tif (alt) {\n\t\t_pushKey(result, labelProvider.altKeyLabel);\n\t}\n\n\tif (ctrlCmd && Platform.isMacintosh) {\n\t\t_pushKey(result, labelProvider.cmdKeyLabel);\n\t}\n\n\tif (winCtrl && !Platform.isMacintosh) {\n\t\t_pushKey(result, labelProvider.windowsKeyLabel);\n\t}\n\n\t// the actual key\n\t_pushKey(result, keyLabel);\n\n\tlet chordTo: IHTMLContentElement[] = null;\n\n\tif (BinaryKeybindings.hasChord(keybinding)) {\n\t\tchordTo = _asHTML(BinaryKeybindings.extractChordPart(keybinding), labelProvider, Platform, true);\n\t\tresult.push({\n\t\t\ttagName: 'span',\n\t\t\ttext: ' '\n\t\t});\n\t\tresult = result.concat(chordTo);\n\t}\n\n\tif (isChord) {\n\t\treturn result;\n\t}\n\n\treturn [{\n\t\ttagName: 'span',\n\t\tclassName: 'monaco-kb',\n\t\tchildren: result\n\t}];\n}\n"]}