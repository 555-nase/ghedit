{"version":3,"file":"vs/base/common/labels.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/base/common/labels.ts"],"names":[],"mappings":";IAAA;;;oGAGgG;IAChG,YAAY,CAAC;IAsBb;QAGC,2BAAY,IAAoC;YAC/C,IAAI,CAAC,IAAI,GAAG,IAAI,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC;QACnC,CAAC;QAEM,oCAAQ,GAAf,UAAgB,IAAmC;YAClD,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;QAC/C,CAAC;QACF,wBAAC;IAAD,CAAC,AAVD,IAUC;IAVY,yBAAiB,oBAU7B,CAAA;IAED,sBAA6B,IAAgB,EAAE,IAAoC;QAClF,IAAI,QAAQ,GAAG,IAAI,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC;QACrC,IAAI,YAAY,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;QAEjC,EAAE,CAAC,CAAC,QAAQ,IAAI,KAAK,CAAC,eAAe,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC;YAC/D,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,OAAO,CAAC,KAAK,CAAC,YAAY,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,KAAK,CAAC,SAAS,CAAC,EAAE,IAAI,CAAC,CAAC;QACpG,CAAC;QAED,EAAE,CAAC,CAAC,QAAQ,CAAC,SAAS,IAAI,YAAY,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;YACnD,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,GAAG,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;QAC5F,CAAC;QAED,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;IAC5C,CAAC;IAbe,oBAAY,eAa3B,CAAA;IAED,iBAAiB,IAAmC;QACnD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;YACX,MAAM,CAAC,IAAI,CAAC;QACb,CAAC;QAED,EAAE,CAAC,CAAC,OAAO,IAAI,KAAK,QAAQ,CAAC,CAAC,CAAC;YAC9B,MAAM,CAAC,IAAI,CAAC;QACb,CAAC;QAED,EAAE,CAAC,CAAC,KAAK,CAAC,UAAU,CAAsB,IAAK,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;YAC/D,IAAI,EAAE,GAAwB,IAAK,CAAC,YAAY,EAAE,CAAC;YACnD,MAAM,CAAC,EAAE,GAAG,EAAE,CAAC,QAAQ,CAAC,MAAM,GAAG,KAAK,CAAC,CAAC;QACzC,CAAC;QAED,MAAM,CAAO,IAAK,CAAC,MAAM,CAAC;IAC3B,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport uri from 'vs/base/common/uri';\nimport platform = require('vs/base/common/platform');\nimport types = require('vs/base/common/types');\nimport strings = require('vs/base/common/strings');\nimport paths = require('vs/base/common/paths');\n\nexport interface ILabelProvider {\n\n\t/**\n\t * Given an element returns a label for it to display in the UI.\n\t */\n\tgetLabel(element: any): string;\n}\n\nexport interface IWorkspaceProvider {\n\tgetWorkspace(): {\n\t\tresource: uri;\n\t};\n}\n\nexport class PathLabelProvider implements ILabelProvider {\n\tprivate root: string;\n\n\tconstructor(arg1?: uri|string|IWorkspaceProvider) {\n\t\tthis.root = arg1 && getPath(arg1);\n\t}\n\n\tpublic getLabel(arg1: uri|string|IWorkspaceProvider): string {\n\t\treturn getPathLabel(getPath(arg1), this.root);\n\t}\n}\n\nexport function getPathLabel(arg1: uri|string, arg2?: uri|string|IWorkspaceProvider): string {\n\tlet basepath = arg2 && getPath(arg2);\n\tlet absolutePath = getPath(arg1);\n\n\tif (basepath && paths.isEqualOrParent(absolutePath, basepath)) {\n\t\treturn paths.normalize(strings.ltrim(absolutePath.substr(basepath.length), paths.nativeSep), true);\n\t}\n\n\tif (platform.isWindows && absolutePath[1] === ':') {\n\t\treturn paths.normalize(absolutePath.charAt(0).toUpperCase() + absolutePath.slice(1), true);\n\t}\n\n\treturn paths.normalize(absolutePath, true);\n}\n\nfunction getPath(arg1: uri|string|IWorkspaceProvider): string {\n\tif (!arg1) {\n\t\treturn null;\n\t}\n\n\tif (typeof arg1 === 'string') {\n\t\treturn arg1;\n\t}\n\n\tif (types.isFunction((<IWorkspaceProvider>arg1).getWorkspace)) {\n\t\tlet ws = (<IWorkspaceProvider>arg1).getWorkspace();\n\t\treturn ws ? ws.resource.fsPath : void 0;\n\t}\n\n\treturn (<uri>arg1).fsPath;\n}"]}