{"version":3,"file":"scorer.js","sourceRoot":"","sources":["../../../../src/vs/base/common/scorer.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\n// Based on material from:\n\n/*!\n* string_score.js: String Scoring Algorithm 0.1.22\n*\n* http://joshaven.com/string_score\n* https://github.com/joshaven/string_score\n*\n* Copyright (C) 2009-2014 Joshaven Potter <yourtech@gmail.com>\n* Special thanks to all of the contributors listed here https://github.com/joshaven/string_score\n* MIT License: http://opensource.org/licenses/MIT\n*\n* Date: Tue Mar 1 2011\n* Updated: Tue Mar 10 2015\n*/\n\n/**\n * Compute a score for the given string and the given query.\n *\n * Rules:\n * Character score: 1\n * Same case bonus: 1\n * Upper case bonus: 1\n * Consecutive match bonus: 5\n * Start of word/path bonus: 7\n * Start of string bonus: 8\n */\nconst wordPathBoundary = ['-', '_', ' ', '/', '\\\\', '.'];\nexport function score(target: string, query: string, cache?: {[id: string]: number}): number {\n\tif (!target || !query) {\n\t\treturn 0; // return early if target or query are undefined\n\t}\n\n\tconst hash = target + query;\n\tconst cached = cache && cache[hash];\n\tif (typeof cached === 'number') {\n\t\treturn cached;\n\t}\n\n\tconst queryLen = query.length;\n\tconst targetLower = target.toLowerCase();\n\tconst queryLower = query.toLowerCase();\n\n\tlet index = 0;\n\tlet startAt = 0;\n\tlet score = 0;\n\twhile (index < queryLen) {\n\t\tlet indexOf = targetLower.indexOf(queryLower[index], startAt);\n\t\tif (indexOf < 0) {\n\t\t\tscore = 0; // This makes sure that the query is contained in the target\n\t\t\tbreak;\n\t\t}\n\n\t\t// Character match bonus\n\t\tscore += 1;\n\n\t\t// Consecutive match bonus\n\t\tif (startAt === indexOf) {\n\t\t\tscore += 5;\n\t\t}\n\n\t\t// Same case bonus\n\t\tif (target[indexOf] === query[indexOf]) {\n\t\t\tscore += 1;\n\t\t}\n\n\t\t// Start of word bonus\n\t\tif (indexOf === 0) {\n\t\t\tscore += 8;\n\t\t}\n\n\t\t// After separator bonus\n\t\telse if (wordPathBoundary.some(w => w === target[indexOf - 1])) {\n\t\t\tscore += 7;\n\t\t}\n\n\t\t// Inside word upper case bonus\n\t\telse if (isUpper(target.charCodeAt(indexOf))) {\n\t\t\tscore += 1;\n\t\t}\n\n\t\tstartAt = indexOf + 1;\n\t\tindex++;\n\t}\n\n\tif (cache) {\n\t\tcache[hash] = score;\n\t}\n\n\treturn score;\n}\n\nfunction isUpper(code: number): boolean {\n\treturn 65 <= code && code <= 90;\n}\n\n/**\n * A fast method to check if a given string would produce a score > 0 for the given query.\n */\nexport function matches(target: string, queryLower: string): boolean {\n\tif (!target || !queryLower) {\n\t\treturn false; // return early if target or query are undefined\n\t}\n\n\tconst queryLen = queryLower.length;\n\tconst targetLower = target.toLowerCase();\n\n\tlet index = 0;\n\tlet lastIndexOf = -1;\n\twhile (index < queryLen) {\n\t\tlet indexOf = targetLower.indexOf(queryLower[index], lastIndexOf + 1);\n\t\tif (indexOf < 0) {\n\t\t\treturn false;\n\t\t}\n\n\t\tlastIndexOf = indexOf;\n\n\t\tindex++;\n\t}\n\n\treturn true;\n}"]}