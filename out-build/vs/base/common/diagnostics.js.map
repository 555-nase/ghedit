{"version":3,"file":"vs/base/common/diagnostics.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/base/common/diagnostics.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport * as Platform from 'vs/base/common/platform';\n\n/**\n * To enable diagnostics, open a browser console and type: window.Monaco.Diagnostics.<diagnostics name> = true.\n * Then trigger an action that will write to diagnostics to see all cached output from the past.\n */\n\nvar globals = Platform.globals;\nif(!globals.Monaco) {\n\tglobals.Monaco = {};\n}\nglobals.Monaco.Diagnostics = {};\n\nvar switches = globals.Monaco.Diagnostics;\nvar map = {};\nvar data = [];\n\nfunction fifo(array:any[], size:number) {\n\twhile(array.length > size) {\n\t\tarray.shift();\n\t}\n}\n\nexport function register(what: string, fn: Function): (...args: any[]) => void {\n\n\tlet disable = true; // Otherwise we have unreachable code.\n\tif (disable) {\n\t\treturn () => {\n\t\t\t// Intentional empty, disable for now because it is leaking memory\n\t\t};\n\t}\n\n\t// register switch\n\tvar flag = switches[what] || false;\n\tswitches[what] = flag;\n\n\t// register function\n\tvar tracers = map[what] || [];\n\ttracers.push(fn);\n\tmap[what] = tracers;\n\n\tvar result = function(...args:any[]) {\n\n\t\tvar idx:number;\n\n\t\tif(switches[what] === true) {\n\t\t\t// replay back-in-time functions\n\t\t\tvar allArgs = [arguments];\n\t\t\tidx = data.indexOf(fn);\n\t\t\tif(idx !== -1) {\n\t\t\t\tallArgs.unshift.apply(allArgs, data[idx + 1] || []);\n\t\t\t\tdata[idx + 1] = [];\n\t\t\t}\n\n\t\t\tvar doIt:()=>void = function() {\n\t\t\t\tvar thisArguments = allArgs.shift();\n\t\t\t\tfn.apply(fn, thisArguments);\n\t\t\t\tif(allArgs.length > 0) {\n\t\t\t\t\tPlatform.setTimeout(doIt, 500);\n\t\t\t\t}\n\t\t\t};\n\t\t\tdoIt();\n\n\t\t} else {\n\t\t\t// know where to store\n\t\t\tidx = data.indexOf(fn);\n\t\t\tidx = idx !== -1 ? idx : data.length;\n\t\t\tvar dataIdx = idx + 1;\n\n\t\t\t// store arguments\n\t\t\tvar allargs = data[dataIdx] || [];\n\t\t\tallargs.push(arguments);\n\t\t\tfifo(allargs, 50);\n\n\t\t\t// store data\n\t\t\tdata[idx] = fn;\n\t\t\tdata[dataIdx] = allargs;\n\t\t}\n\t};\n\n\treturn result;\n}\n"]}