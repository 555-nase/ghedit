{"version":3,"file":"vs/base/test/common/graph.test.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/base/test/common/graph.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport * as assert from 'assert';\nimport { Graph } from 'vs/base/common/graph';\n\nsuite('Graph', () => {\n\tvar graph: Graph<string>;\n\n\tsetup(() => {\n\t\tgraph = new Graph<string>(s => s);\n\t});\n\n\ttest('cannot be traversed when empty', function() {\n\t\tgraph.traverse('foo', true, () => assert(false));\n\t\tgraph.traverse('foo', false, () => assert(false));\n\t\tassert(true);\n\t});\n\n\ttest('is possible to lookup nodes that don\\'t exist', function() {\n\t\tassert.deepEqual(graph.lookup('ddd'), null);\n\t});\n\n\ttest('inserts nodes when not there yet', function() {\n\t\tassert.deepEqual(graph.lookup('ddd'), null);\n\t\tassert.deepEqual(graph.lookupOrInsertNode('ddd').data, 'ddd');\n\t\tassert.deepEqual(graph.lookup('ddd').data, 'ddd');\n\t});\n\n\ttest('can remove nodes and get length', function() {\n\t\tassert.equal(graph.length, 0);\n\t\tassert.deepEqual(graph.lookup('ddd'), null);\n\t\tassert.deepEqual(graph.lookupOrInsertNode('ddd').data, 'ddd');\n\t\tassert.equal(graph.length, 1);\n\t\tgraph.removeNode('ddd');\n\t\tassert.deepEqual(graph.lookup('ddd'), null);\n\t\tassert.equal(graph.length, 0);\n\t});\n\n\ttest('traverse from leaf', function() {\n\t\tgraph.insertEdge('foo', 'bar');\n\t\tgraph.traverse('bar', true, (node) => assert.equal(node, 'bar'));\n\t\tvar items = ['bar', 'foo'];\n\t\tgraph.traverse('bar', false, (node) => assert.equal(node, items.shift()));\n\t});\n\n\ttest('traverse from center', function() {\n\t\tgraph.insertEdge('1', '3');\n\t\tgraph.insertEdge('2', '3');\n\t\tgraph.insertEdge('3', '4');\n\t\tgraph.insertEdge('3', '5');\n\n\t\tvar items = ['3', '4', '5'];\n\t\tgraph.traverse('3', true, (node) => assert.equal(node, items.shift()));\n\n\t\titems = ['3', '1', '2'];\n\t\tgraph.traverse('3', false, (node) => assert.equal(node, items.shift()));\n\t});\n\n\ttest('traverse a chain', function() {\n\t\tgraph.insertEdge('1', '2');\n\t\tgraph.insertEdge('2', '3');\n\t\tgraph.insertEdge('3', '4');\n\t\tgraph.insertEdge('4', '5');\n\n\t\tvar items = ['1', '2', '3', '4', '5'];\n\t\tgraph.traverse('1', true, (node) => assert.equal(node, items.shift()));\n\n\t\titems = ['1', '2', '3', '4', '5'].reverse();\n\t\tgraph.traverse('5', false, (node) => assert.equal(node, items.shift()));\n\t});\n\n\ttest('root', function() {\n\t\tgraph.insertEdge('1', '2');\n\t\tvar roots = graph.roots();\n\t\tassert.equal(roots.length, 1);\n\t\tassert.equal(roots[0].data, '2');\n\n\t\tgraph.insertEdge('2', '1');\n\t\troots = graph.roots();\n\t\tassert.equal(roots.length, 0);\n\t});\n\n\ttest('root complex', function() {\n\t\tgraph.insertEdge('1', '2');\n\t\tgraph.insertEdge('1', '3');\n\t\tgraph.insertEdge('3', '4');\n\n\t\tvar roots = graph.roots();\n\t\tassert.equal(roots.length, 2);\n\t\tassert(['2', '4'].every(n => roots.some(node => node.data === n)));\n\t});\n});"]}