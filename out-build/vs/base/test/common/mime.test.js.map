{"version":3,"file":"vs/base/test/common/mime.test.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/base/test/common/mime.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport * as assert from 'assert';\nimport { guessMimeTypes, registerTextMime } from 'vs/base/common/mime';\n\nsuite('Mime', () => {\n\ttest('Dynamically Register Text Mime', () => {\n\t\tvar guess = guessMimeTypes('foo.monaco');\n\t\tassert.deepEqual(guess, ['application/unknown']);\n\n\t\tregisterTextMime({ extension: '.monaco', mime: 'text/monaco' });\n\t\tguess = guessMimeTypes('foo.monaco');\n\t\tassert.deepEqual(guess, ['text/monaco', 'text/plain']);\n\n\t\tguess = guessMimeTypes('.monaco');\n\t\tassert.deepEqual(guess, ['text/monaco', 'text/plain']);\n\n\t\tregisterTextMime({ filename: 'Codefile', mime: 'text/code' });\n\t\tguess = guessMimeTypes('Codefile');\n\t\tassert.deepEqual(guess, ['text/code', 'text/plain']);\n\n\t\tguess = guessMimeTypes('foo.Codefile');\n\t\tassert.deepEqual(guess, ['application/unknown']);\n\n\t\tregisterTextMime({ filepattern: 'Docker*', mime: 'text/docker' });\n\t\tguess = guessMimeTypes('Docker-debug');\n\t\tassert.deepEqual(guess, ['text/docker', 'text/plain']);\n\n\t\tguess = guessMimeTypes('docker-PROD');\n\t\tassert.deepEqual(guess, ['text/docker', 'text/plain']);\n\n\t\tregisterTextMime({ mime: 'text/nice-regex', firstline: /RegexesAreNice/ });\n\t\tguess = guessMimeTypes('Randomfile.noregistration', 'RegexesAreNice');\n\t\tassert.deepEqual(guess, ['text/nice-regex', 'text/plain']);\n\n\t\tguess = guessMimeTypes('Randomfile.noregistration', 'RegexesAreNiceee');\n\t\tassert.deepEqual(guess, ['application/unknown']);\n\n\t\tguess = guessMimeTypes('Codefile', 'RegexesAreNice');\n\t\tassert.deepEqual(guess, ['text/code', 'text/plain']);\n\t});\n\n\ttest('Mimes Priority', () => {\n\t\tregisterTextMime({ extension: '.monaco', mime: 'text/monaco' });\n\t\tregisterTextMime({ mime: 'text/foobar', firstline: /foobar/ });\n\n\t\tvar guess = guessMimeTypes('foo.monaco');\n\t\tassert.deepEqual(guess, ['text/monaco', 'text/plain']);\n\n\t\tguess = guessMimeTypes('foo.monaco', 'foobar');\n\t\tassert.deepEqual(guess, ['text/monaco', 'text/plain']);\n\n\t\tregisterTextMime({ filename: 'dockerfile', mime: 'text/winner' });\n\t\tregisterTextMime({ filepattern: 'dockerfile*', mime: 'text/looser' });\n\t\tguess = guessMimeTypes('dockerfile');\n\t\tassert.deepEqual(guess, ['text/winner', 'text/plain']);\n\t});\n\n\ttest('Specificity priority 1', () => {\n\t\tregisterTextMime({ extension: '.monaco2', mime: 'text/monaco2' });\n\t\tregisterTextMime({ filename: 'specific.monaco2', mime: 'text/specific-monaco2' });\n\n\t\tassert.deepEqual(guessMimeTypes('specific.monaco2'), ['text/specific-monaco2', 'text/plain']);\n\t\tassert.deepEqual(guessMimeTypes('foo.monaco2'), ['text/monaco2', 'text/plain']);\n\t});\n\n\ttest('Specificity priority 2', () => {\n\t\tregisterTextMime({ filename: 'specific.monaco3', mime: 'text/specific-monaco3' });\n\t\tregisterTextMime({ extension: '.monaco3', mime: 'text/monaco3' });\n\n\t\tassert.deepEqual(guessMimeTypes('specific.monaco3'), ['text/specific-monaco3', 'text/plain']);\n\t\tassert.deepEqual(guessMimeTypes('foo.monaco3'), ['text/monaco3', 'text/plain']);\n\t});\n\n\ttest('Mimes Priority - Longest Extension wins', () => {\n\t\tregisterTextMime({ extension: '.monaco', mime: 'text/monaco' });\n\t\tregisterTextMime({ extension: '.monaco.xml', mime: 'text/monaco-xml' });\n\t\tregisterTextMime({ extension: '.monaco.xml.build', mime: 'text/monaco-xml-build' });\n\n\t\tvar guess = guessMimeTypes('foo.monaco');\n\t\tassert.deepEqual(guess, ['text/monaco', 'text/plain']);\n\n\t\tguess = guessMimeTypes('foo.monaco.xml');\n\t\tassert.deepEqual(guess, ['text/monaco-xml', 'text/plain']);\n\n\t\tguess = guessMimeTypes('foo.monaco.xml.build');\n\t\tassert.deepEqual(guess, ['text/monaco-xml-build', 'text/plain']);\n\t});\n\n\ttest('Mimes Priority - User configured wins', () => {\n\t\tregisterTextMime({ extension: '.monaco.xnl', mime: 'text/monaco', userConfigured: true });\n\t\tregisterTextMime({ extension: '.monaco.xml', mime: 'text/monaco-xml' });\n\n\t\tvar guess = guessMimeTypes('foo.monaco.xnl');\n\t\tassert.deepEqual(guess, ['text/monaco', 'text/plain']);\n\t});\n\n\ttest('Mimes Priority - Pattern matches on path if specified', () => {\n\t\tregisterTextMime({ filepattern: '**/dot.monaco.xml', mime: 'text/monaco' });\n\t\tregisterTextMime({ filepattern: '*ot.other.xml', mime: 'text/other' });\n\n\t\tvar guess = guessMimeTypes('/some/path/dot.monaco.xml');\n\t\tassert.deepEqual(guess, ['text/monaco', 'text/plain']);\n\t});\n});\n"]}