{"version":3,"file":"vs/base/test/common/arrays.test.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/base/test/common/arrays.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport * as assert from 'assert';\nimport arrays = require('vs/base/common/arrays');\n\nsuite('Arrays', () => {\n\ttest('findFirst', function () {\n\t\tvar array = [1, 4, 5, 7, 55, 59, 60, 61, 64, 69];\n\n\t\tvar idx = arrays.findFirst(array, e => e >= 0);\n\t\tassert.equal(array[idx], 1);\n\n\t\tidx = arrays.findFirst(array, e => e > 1);\n\t\tassert.equal(array[idx], 4);\n\n\t\tidx = arrays.findFirst(array, e => e >= 8);\n\t\tassert.equal(array[idx], 55);\n\n\t\tidx = arrays.findFirst(array, e => e >= 61);\n\t\tassert.equal(array[idx], 61);\n\n\t\tidx = arrays.findFirst(array, e => e >= 69);\n\t\tassert.equal(array[idx], 69);\n\n\t\tidx = arrays.findFirst(array, e => e >= 70);\n\t\tassert.equal(idx, array.length);\n\n\t\tidx = arrays.findFirst([], e => e >= 0);\n\t\tassert.equal(array[idx], 1);\n\t});\n\n\ttest('binarySearch', function() {\n\t\tfunction compare(a: number, b: number): number {\n\t\t\treturn a - b;\n\t\t}\n\t\tvar array = [1, 4, 5, 7, 55, 59, 60, 61, 64, 69];\n\n\t\tassert.equal(arrays.binarySearch(array, 1, compare), 0);\n\t\tassert.equal(arrays.binarySearch(array, 5, compare), 2);\n\n\t\t// insertion point\n\t\tassert.equal(arrays.binarySearch(array, 0, compare), ~0);\n\t\tassert.equal(arrays.binarySearch(array, 6, compare), ~3);\n\t\tassert.equal(arrays.binarySearch(array, 70, compare), ~10);\n\n\t});\n\n\ttest('distinct', function() {\n\t\tfunction compare(a: string): string {\n\t\t\treturn a;\n\t\t}\n\n\t\tassert.deepEqual(arrays.distinct(['32', '4', '5'], compare), ['32', '4', '5']);\n\t\tassert.deepEqual(arrays.distinct(['32', '4', '5', '4'], compare), ['32', '4', '5']);\n\t\tassert.deepEqual(arrays.distinct(['32', 'constructor', '5', '1'], compare), ['32', 'constructor', '5', '1']);\n\t\tassert.deepEqual(arrays.distinct(['32', 'constructor', 'proto', 'proto', 'constructor'], compare), ['32', 'constructor', 'proto']);\n\t\tassert.deepEqual(arrays.distinct(['32', '4', '5', '32', '4', '5', '32', '4', '5', '5'], compare), ['32', '4', '5']);\n\t});\n});\n\n"]}