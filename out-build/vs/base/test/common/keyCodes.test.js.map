{"version":3,"file":"vs/base/test/common/keyCodes.test.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/base/test/common/keyCodes.test.ts"],"names":[],"mappings":";IAAA;;;oGAGgG;IAChG,YAAY,CAAC;IAcb,KAAK,CAAC,UAAU,EAAE;QACjB,IAAI,CAAC,iBAAiB,EAAE;YACvB,cAAc,UAA0B,EAAE,CAAQ;gBACjD,UAAU,GAAG,UAAU,IAAI,EAAE,GAAG,EAAE,kBAAO,CAAC,OAAO,EAAE,CAAC;gBACpD,MAAM,CAAC,KAAK,CAAC,4BAAiB,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;gBACpE,MAAM,CAAC,KAAK,CAAC,4BAAiB,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;gBAChE,MAAM,CAAC,KAAK,CAAC,4BAAiB,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;gBAC5D,MAAM,CAAC,KAAK,CAAC,4BAAiB,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;gBACpE,MAAM,CAAC,KAAK,CAAC,4BAAiB,CAAC,cAAc,CAAC,CAAC,CAAC,EAAE,UAAU,CAAC,GAAG,CAAC,CAAC;gBAElE,IAAI,KAAK,GAAG,4BAAiB,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;gBAClD,MAAM,CAAC,KAAK,CAAC,4BAAiB,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;gBAChE,EAAE,CAAC,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;oBACtB,MAAM,CAAC,KAAK,CAAC,4BAAiB,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,UAAU,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;oBAC9E,MAAM,CAAC,KAAK,CAAC,4BAAiB,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,UAAU,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;oBAC1E,MAAM,CAAC,KAAK,CAAC,4BAAiB,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;oBACtE,MAAM,CAAC,KAAK,CAAC,4BAAiB,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,UAAU,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;oBAC9E,MAAM,CAAC,KAAK,CAAC,4BAAiB,CAAC,cAAc,CAAC,KAAK,CAAC,EAAE,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;gBAC7E,CAAC;YACF,CAAC;YAED,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;YACd,IAAI,CAAC,EAAE,GAAG,EAAE,kBAAO,CAAC,KAAK,EAAE,EAAE,kBAAO,CAAC,KAAK,CAAC,CAAC;YAC5C,IAAI,CAAC,EAAE,GAAG,EAAE,kBAAO,CAAC,KAAK,EAAE,KAAK,EAAE,EAAE,GAAG,EAAE,kBAAO,CAAC,GAAG,EAAE,EAAE,EAAE,iBAAM,CAAC,KAAK,CAAC,kBAAO,CAAC,KAAK,EAAE,kBAAO,CAAC,GAAG,CAAC,CAAC,CAAC;YACpG,IAAI,CAAC,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,EAAE,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,GAAG,EAAE,kBAAO,CAAC,KAAK,EAAE,EAAE,kBAAO,CAAC,KAAK,CAAC,CAAC;YACtG,IAAI,CAAC,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,EAAE,KAAK,EAAE,OAAO,EAAG,IAAI,EAAE,GAAG,EAAE,kBAAO,CAAC,KAAK,EAAE,EAAE,iBAAM,CAAC,OAAO,GAAG,kBAAO,CAAC,KAAK,CAAC,CAAC;YACvH,IAAI,CAAC,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,EAAG,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,GAAG,EAAE,kBAAO,CAAC,KAAK,EAAE,EAAE,iBAAM,CAAC,GAAG,GAAG,kBAAO,CAAC,KAAK,CAAC,CAAC;YACnH,IAAI,CAAC,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,EAAG,IAAI,EAAE,OAAO,EAAG,IAAI,EAAE,GAAG,EAAE,kBAAO,CAAC,KAAK,EAAE,EAAE,iBAAM,CAAC,GAAG,GAAG,iBAAM,CAAC,OAAO,GAAG,kBAAO,CAAC,KAAK,CAAC,CAAC;YACpI,IAAI,CAAC,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAG,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,GAAG,EAAE,kBAAO,CAAC,KAAK,EAAE,EAAE,iBAAM,CAAC,KAAK,GAAG,kBAAO,CAAC,KAAK,CAAC,CAAC;YACrH,IAAI,CAAC,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAG,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE,OAAO,EAAG,IAAI,EAAE,GAAG,EAAE,kBAAO,CAAC,KAAK,EAAE,EAAE,iBAAM,CAAC,KAAK,GAAG,iBAAM,CAAC,OAAO,GAAG,kBAAO,CAAC,KAAK,CAAC,CAAC;YACtI,IAAI,CAAC,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAG,IAAI,EAAE,GAAG,EAAG,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,GAAG,EAAE,kBAAO,CAAC,KAAK,EAAE,EAAE,iBAAM,CAAC,KAAK,GAAG,iBAAM,CAAC,GAAG,GAAG,kBAAO,CAAC,KAAK,CAAC,CAAC;YAClI,IAAI,CAAC,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAG,IAAI,EAAE,GAAG,EAAG,IAAI,EAAE,OAAO,EAAG,IAAI,EAAE,GAAG,EAAE,kBAAO,CAAC,KAAK,EAAE,EAAE,iBAAM,CAAC,KAAK,GAAG,iBAAM,CAAC,GAAG,GAAG,iBAAM,CAAC,OAAO,GAAG,kBAAO,CAAC,KAAK,CAAC,CAAC;YACnJ,IAAI,CAAC,EAAE,OAAO,EAAG,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,EAAE,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,GAAG,EAAE,kBAAO,CAAC,KAAK,EAAE,EAAE,iBAAM,CAAC,OAAO,GAAG,kBAAO,CAAC,KAAK,CAAC,CAAC;YACvH,IAAI,CAAC,EAAE,OAAO,EAAG,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,EAAE,KAAK,EAAE,OAAO,EAAG,IAAI,EAAE,GAAG,EAAE,kBAAO,CAAC,KAAK,EAAE,EAAE,iBAAM,CAAC,OAAO,GAAG,iBAAM,CAAC,OAAO,GAAG,kBAAO,CAAC,KAAK,CAAC,CAAC;YACxI,IAAI,CAAC,EAAE,OAAO,EAAG,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,EAAG,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,GAAG,EAAE,kBAAO,CAAC,KAAK,EAAE,EAAE,iBAAM,CAAC,OAAO,GAAG,iBAAM,CAAC,GAAG,GAAG,kBAAO,CAAC,KAAK,CAAC,CAAC;YACpI,IAAI,CAAC,EAAE,OAAO,EAAG,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,EAAG,IAAI,EAAE,OAAO,EAAG,IAAI,EAAE,GAAG,EAAE,kBAAO,CAAC,KAAK,EAAE,EAAE,iBAAM,CAAC,OAAO,GAAG,iBAAM,CAAC,GAAG,GAAG,iBAAM,CAAC,OAAO,GAAG,kBAAO,CAAC,KAAK,CAAC,CAAC;YACrJ,IAAI,CAAC,EAAE,OAAO,EAAG,IAAI,EAAE,KAAK,EAAG,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,GAAG,EAAE,kBAAO,CAAC,KAAK,EAAE,EAAE,iBAAM,CAAC,OAAO,GAAG,iBAAM,CAAC,KAAK,GAAG,kBAAO,CAAC,KAAK,CAAC,CAAC;YACtI,IAAI,CAAC,EAAE,OAAO,EAAG,IAAI,EAAE,KAAK,EAAG,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE,OAAO,EAAG,IAAI,EAAE,GAAG,EAAE,kBAAO,CAAC,KAAK,EAAE,EAAE,iBAAM,CAAC,OAAO,GAAG,iBAAM,CAAC,KAAK,GAAG,iBAAM,CAAC,OAAO,GAAG,kBAAO,CAAC,KAAK,CAAC,CAAC;YACvJ,IAAI,CAAC,EAAE,OAAO,EAAG,IAAI,EAAE,KAAK,EAAG,IAAI,EAAE,GAAG,EAAG,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,GAAG,EAAE,kBAAO,CAAC,KAAK,EAAE,EAAE,iBAAM,CAAC,OAAO,GAAG,iBAAM,CAAC,KAAK,GAAG,iBAAM,CAAC,GAAG,GAAG,kBAAO,CAAC,KAAK,CAAC,CAAC;YACnJ,IAAI,CAAC,EAAE,OAAO,EAAG,IAAI,EAAE,KAAK,EAAG,IAAI,EAAE,GAAG,EAAG,IAAI,EAAE,OAAO,EAAG,IAAI,EAAE,GAAG,EAAE,kBAAO,CAAC,KAAK,EAAE,EAAE,iBAAM,CAAC,OAAO,GAAG,iBAAM,CAAC,KAAK,GAAG,iBAAM,CAAC,GAAG,GAAG,iBAAM,CAAC,OAAO,GAAG,kBAAO,CAAC,KAAK,CAAC,CAAC;YAEpK,IAAI,OAAO,GAAG,iBAAM,CAAC,KAAK,CAAC,iBAAM,CAAC,OAAO,GAAG,kBAAO,CAAC,KAAK,EAAE,kBAAO,CAAC,KAAK,CAAC,CAAC;YAC1E,IAAI,gBAAgB,GAAG,4BAAiB,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC;YACnE,IAAI,iBAAiB,GAAG,4BAAiB,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC;YAEpE,MAAM,CAAC,KAAK,CAAC,4BAAiB,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,IAAI,EAAE,UAAU,CAAC,CAAC;YACpE,MAAM,CAAC,KAAK,CAAC,gBAAgB,EAAE,iBAAM,CAAC,OAAO,GAAG,kBAAO,CAAC,KAAK,EAAE,YAAY,CAAC,CAAC;YAC7E,MAAM,CAAC,KAAK,CAAC,iBAAiB,EAAE,iBAAiB,EAAE,YAAY,CAAC,CAAC;QAClE,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,gCAAgC,EAAE;YACtC,IAAI,KAAK,GAAG,IAAI,MAAM,CAAC,qBAAU,CAAC,8BAA8B,EAAE,CAAC,CAAC;YAEpE,oBAAoB,iBAAwB,EAAE,OAAkC;gBAAlC,uBAAkC,GAAlC,2BAAkC;gBAC/E,IAAI,YAAY,GAAG,GAAG,GAAG,iBAAiB,CAAC,OAAO,CAAC,KAAK,EAAE,MAAM,CAAC,GAAG,GAAG,CAAC;gBACxE,IAAI,MAAM,GAAG,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;gBACtC,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;YAC5B,CAAC;YAED,oDAAoD;YACpD,IAAI,MAAM,GAAc,EAAE,CAAC;YAC3B,MAAM,CAAC,kBAAO,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC;YAC7B,MAAM,CAAC,kBAAO,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC;YAC5B,MAAM,CAAC,kBAAO,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC;YAC3B,MAAM,CAAC,kBAAO,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC;YAC5B,GAAG,CAAC,CAAC,IAAI,OAAO,GAAG,kBAAO,CAAC,OAAO,GAAG,CAAC,EAAE,OAAO,GAAG,kBAAO,CAAC,SAAS,EAAE,OAAO,EAAE,EAAE,CAAC;gBAChF,EAAE,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;oBACrB,QAAQ,CAAC;gBACV,CAAC;gBACD,IAAI,YAAY,GAAG,qBAAU,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC;gBAC3D,UAAU,CAAC,YAAY,EAAE,OAAO,GAAG,KAAK,GAAG,kBAAO,CAAC,OAAO,CAAC,GAAG,KAAK,GAAG,YAAY,CAAC,CAAC;YACrF,CAAC;YAED,eAAe;YACf,UAAU,CAAC,QAAQ,CAAC,CAAC;YACrB,UAAU,CAAC,SAAS,CAAC,CAAC;YACtB,UAAU,CAAC,OAAO,CAAC,CAAC;YACpB,UAAU,CAAC,OAAO,CAAC,CAAC;YACpB,UAAU,CAAC,QAAQ,CAAC,CAAC;YACrB,UAAU,CAAC,OAAO,CAAC,CAAC;YAEpB,iBAAiB;YACjB,UAAU,CAAC,cAAc,CAAC,CAAC;YAC3B,UAAU,CAAC,aAAa,CAAC,CAAC;YAC1B,UAAU,CAAC,kBAAkB,CAAC,CAAC;YAE/B,SAAS;YACT,UAAU,CAAC,eAAe,CAAC,CAAC;QAC7B,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport * as assert from 'assert';\nimport {KeyCode, KeyMod, BinaryKeybindings, Keybinding} from 'vs/base/common/keyCodes';\n\ninterface ITestKeybinding {\n\tctrlCmd?: boolean;\n\tshift?: boolean;\n\talt?: boolean;\n\twinCtrl?: boolean;\n\tkey: KeyCode;\n\tchord?: ITestKeybinding;\n}\n\nsuite('keyCodes', () => {\n\ttest('binary encoding', () => {\n\t\tfunction test(keybinding:ITestKeybinding, k:number): void {\n\t\t\tkeybinding = keybinding || { key: KeyCode.Unknown };\n\t\t\tassert.equal(BinaryKeybindings.hasCtrlCmd(k), !!keybinding.ctrlCmd);\n\t\t\tassert.equal(BinaryKeybindings.hasShift(k), !!keybinding.shift);\n\t\t\tassert.equal(BinaryKeybindings.hasAlt(k), !!keybinding.alt);\n\t\t\tassert.equal(BinaryKeybindings.hasWinCtrl(k), !!keybinding.winCtrl);\n\t\t\tassert.equal(BinaryKeybindings.extractKeyCode(k), keybinding.key);\n\n\t\t\tlet chord = BinaryKeybindings.extractChordPart(k);\n\t\t\tassert.equal(BinaryKeybindings.hasChord(k), !!keybinding.chord);\n\t\t\tif (keybinding.chord) {\n\t\t\t\tassert.equal(BinaryKeybindings.hasCtrlCmd(chord), !!keybinding.chord.ctrlCmd);\n\t\t\t\tassert.equal(BinaryKeybindings.hasShift(chord), !!keybinding.chord.shift);\n\t\t\t\tassert.equal(BinaryKeybindings.hasAlt(chord), !!keybinding.chord.alt);\n\t\t\t\tassert.equal(BinaryKeybindings.hasWinCtrl(chord), !!keybinding.chord.winCtrl);\n\t\t\t\tassert.equal(BinaryKeybindings.extractKeyCode(chord), keybinding.chord.key);\n\t\t\t}\n\t\t}\n\n\t\ttest(null, 0);\n\t\ttest({ key: KeyCode.Enter }, KeyCode.Enter);\n\t\ttest({ key: KeyCode.Enter, chord: { key: KeyCode.Tab } }, KeyMod.chord(KeyCode.Enter, KeyCode.Tab));\n\t\ttest({ ctrlCmd: false, shift: false, alt: false, winCtrl: false, key: KeyCode.Enter }, KeyCode.Enter);\n\t\ttest({ ctrlCmd: false, shift: false, alt: false, winCtrl:  true, key: KeyCode.Enter }, KeyMod.WinCtrl | KeyCode.Enter);\n\t\ttest({ ctrlCmd: false, shift: false, alt:  true, winCtrl: false, key: KeyCode.Enter }, KeyMod.Alt | KeyCode.Enter);\n\t\ttest({ ctrlCmd: false, shift: false, alt:  true, winCtrl:  true, key: KeyCode.Enter }, KeyMod.Alt | KeyMod.WinCtrl | KeyCode.Enter);\n\t\ttest({ ctrlCmd: false, shift:  true, alt: false, winCtrl: false, key: KeyCode.Enter }, KeyMod.Shift | KeyCode.Enter);\n\t\ttest({ ctrlCmd: false, shift:  true, alt: false, winCtrl:  true, key: KeyCode.Enter }, KeyMod.Shift | KeyMod.WinCtrl | KeyCode.Enter);\n\t\ttest({ ctrlCmd: false, shift:  true, alt:  true, winCtrl: false, key: KeyCode.Enter }, KeyMod.Shift | KeyMod.Alt | KeyCode.Enter);\n\t\ttest({ ctrlCmd: false, shift:  true, alt:  true, winCtrl:  true, key: KeyCode.Enter }, KeyMod.Shift | KeyMod.Alt | KeyMod.WinCtrl | KeyCode.Enter);\n\t\ttest({ ctrlCmd:  true, shift: false, alt: false, winCtrl: false, key: KeyCode.Enter }, KeyMod.CtrlCmd | KeyCode.Enter);\n\t\ttest({ ctrlCmd:  true, shift: false, alt: false, winCtrl:  true, key: KeyCode.Enter }, KeyMod.CtrlCmd | KeyMod.WinCtrl | KeyCode.Enter);\n\t\ttest({ ctrlCmd:  true, shift: false, alt:  true, winCtrl: false, key: KeyCode.Enter }, KeyMod.CtrlCmd | KeyMod.Alt | KeyCode.Enter);\n\t\ttest({ ctrlCmd:  true, shift: false, alt:  true, winCtrl:  true, key: KeyCode.Enter }, KeyMod.CtrlCmd | KeyMod.Alt | KeyMod.WinCtrl | KeyCode.Enter);\n\t\ttest({ ctrlCmd:  true, shift:  true, alt: false, winCtrl: false, key: KeyCode.Enter }, KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.Enter);\n\t\ttest({ ctrlCmd:  true, shift:  true, alt: false, winCtrl:  true, key: KeyCode.Enter }, KeyMod.CtrlCmd | KeyMod.Shift | KeyMod.WinCtrl | KeyCode.Enter);\n\t\ttest({ ctrlCmd:  true, shift:  true, alt:  true, winCtrl: false, key: KeyCode.Enter }, KeyMod.CtrlCmd | KeyMod.Shift | KeyMod.Alt | KeyCode.Enter);\n\t\ttest({ ctrlCmd:  true, shift:  true, alt:  true, winCtrl:  true, key: KeyCode.Enter }, KeyMod.CtrlCmd | KeyMod.Shift | KeyMod.Alt | KeyMod.WinCtrl | KeyCode.Enter);\n\n\t\tlet encoded = KeyMod.chord(KeyMod.CtrlCmd | KeyCode.KEY_Y, KeyCode.KEY_Z);\n\t\tlet encodedFirstPart = BinaryKeybindings.extractFirstPart(encoded);\n\t\tlet encodedSecondPart = BinaryKeybindings.extractChordPart(encoded);\n\n\t\tassert.equal(BinaryKeybindings.hasChord(encoded), true, 'hasChord');\n\t\tassert.equal(encodedFirstPart, KeyMod.CtrlCmd | KeyCode.KEY_Y, 'first part');\n\t\tassert.equal(encodedSecondPart, encodedSecondPart, 'chord part');\n\t});\n\n\ttest('getUserSettingsKeybindingRegex', () => {\n\t\tlet regex = new RegExp(Keybinding.getUserSettingsKeybindingRegex());\n\n\t\tfunction testIsGood(userSettingsLabel:string, message:string = userSettingsLabel): void {\n\t\t\tlet userSettings = '\"' + userSettingsLabel.replace(/\\\\/g, '\\\\\\\\') + '\"';\n\t\t\tlet isGood = regex.test(userSettings);\n\t\t\tassert.ok(isGood, message);\n\t\t}\n\n\t\t// check that all key codes are covered by the regex\n\t\tlet ignore: boolean[] = [];\n\t\tignore[KeyCode.Shift] = true;\n\t\tignore[KeyCode.Ctrl] = true;\n\t\tignore[KeyCode.Alt] = true;\n\t\tignore[KeyCode.Meta] = true;\n\t\tfor (let keyCode = KeyCode.Unknown + 1; keyCode < KeyCode.MAX_VALUE; keyCode++) {\n\t\t\tif (ignore[keyCode]) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tlet userSettings = Keybinding.toUserSettingsLabel(keyCode);\n\t\t\ttestIsGood(userSettings, keyCode + ' - ' + KeyCode[keyCode] + ' - ' + userSettings);\n\t\t}\n\n\t\t// one modifier\n\t\ttestIsGood('ctrl+a');\n\t\ttestIsGood('shift+a');\n\t\ttestIsGood('alt+a');\n\t\ttestIsGood('cmd+a');\n\t\ttestIsGood('meta+a');\n\t\ttestIsGood('win+a');\n\n\t\t// more modifiers\n\t\ttestIsGood('ctrl+shift+a');\n\t\ttestIsGood('shift+alt+a');\n\t\ttestIsGood('ctrl+shift+alt+a');\n\n\t\t// chords\n\t\ttestIsGood('ctrl+a ctrl+a');\n\t});\n});\n"]}