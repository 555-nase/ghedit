{"version":3,"file":"vs/base/test/node/service/service.test.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/base/test/node/service/service.test.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;IAEhG,YAAY,CAAC;IAQb;QACC,IAAM,MAAM,GAAG,IAAI,mBAAM,CACxB,aAAG,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC,MAAM,EAC5C;YACC,UAAU,EAAE,YAAY;YACxB,GAAG,EAAE,EAAE,cAAc,EAAE,mCAAmC,EAAE,OAAO,EAAE,IAAI,EAAE;SAC3E,CACD,CAAC;QAEF,MAAM,CAAC,MAAM,CAAC,UAAU,CAAc,aAAa,EAAE,yBAAW,CAAC,CAAC;IACnE,CAAC;IAED,KAAK,CAAC,SAAS,EAAE;QAEhB,IAAI,CAAC,eAAe,EAAE,UAAU,IAAgB;YAC/C,EAAE,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;gBAC/B,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC,gEAAgE;YAChF,CAAC;YAED,IAAM,WAAW,GAAG,aAAa,EAAE,CAAC;YACpC,IAAM,GAAG,GAAG,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAErC,GAAG,CAAC,IAAI,CAAC,UAAA,CAAC;gBACT,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;gBACjC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;gBACjC,IAAI,EAAE,CAAC;YACR,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,cAAc,EAAE,UAAU,IAAgB;YAC9C,IAAM,WAAW,GAAG,aAAa,EAAE,CAAC;YACpC,IAAM,GAAG,GAAG,WAAW,CAAC,QAAQ,EAAE,CAAC;YAEnC,UAAU,CAAC;gBACV,GAAG,CAAC,MAAM,EAAE,CAAC;YACd,CAAC,EAAE,EAAE,CAAC,CAAC;YAEP,GAAG,CAAC,IAAI,CAAC,UAAA,CAAC;gBACT,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;gBAC1B,IAAI,EAAE,CAAC;YACR,CAAC,EAAE,UAAC,KAAK;gBACR,MAAM,CAAC,EAAE,CAAC,+BAAsB,CAAC,KAAK,CAAC,CAAC,CAAC;gBACzC,IAAI,EAAE,CAAC;YACR,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport * as assert from 'assert';\nimport { Client } from 'vs/base/node/service.cp';\nimport uri from 'vs/base/common/uri';\nimport {isPromiseCanceledError} from 'vs/base/common/errors';\nimport {TestService} from 'vs/base/test/node/service/testService';\n\nfunction createService() {\n\tconst server = new Client(\n\t\turi.parse(require.toUrl('bootstrap')).fsPath,\n\t\t{\n\t\t\tserverName: 'TestServer',\n\t\t\tenv: { AMD_ENTRYPOINT: 'vs/base/test/node/service/testApp', verbose: true }\n\t\t}\n\t);\n\n\treturn server.getService<TestService>('TestService', TestService);\n}\n\nsuite('Service', () => {\n\n\ttest('createService', function (done: () => void) {\n\t\tif (process.env['VSCODE_PID']) {\n\t\t\treturn done(); // TODO@Ben find out why test fails when run from within VS Code\n\t\t}\n\n\t\tconst testService = createService();\n\t\tconst res = testService.pong('ping');\n\n\t\tres.then(r => {\n\t\t\tassert.equal(r.incoming, 'ping');\n\t\t\tassert.equal(r.outgoing, 'pong');\n\t\t\tdone();\n\t\t});\n\t});\n\n\ttest('cancellation', function (done: () => void) {\n\t\tconst testService = createService();\n\t\tconst res = testService.cancelMe();\n\n\t\tsetTimeout(() => {\n\t\t\tres.cancel();\n\t\t}, 50);\n\n\t\tres.then(r => {\n\t\t\tassert.fail('Unexpected');\n\t\t\tdone();\n\t\t}, (error) => {\n\t\t\tassert.ok(isPromiseCanceledError(error));\n\t\t\tdone();\n\t\t});\n\t});\n});"]}