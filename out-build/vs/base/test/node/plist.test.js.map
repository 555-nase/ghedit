{"version":3,"file":"vs/base/test/node/plist.test.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/base/test/node/plist.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport * as assert from 'assert';\nimport plist = require('vs/base/node/plist');\n\nsuite('PList Parser', () => {\n\n\tvar header = [\n\t\t'<?xml version=\"1.0\" encoding=\"UTF-8\"?>',\n\t\t'<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">',\n\t\t'<plist version=\"1.0\">'\n\t];\n\n\tvar footer = [\n\t\t'</plist>'\n\t];\n\n\tfunction newContent(...lines: string[]) : string {\n\t\treturn header.concat(lines, footer).join('\\n');\n\t}\n\n\ttest('String', function() {\n\t\tvar value = newContent(\n\t\t\t'<string>foo</string>'\n\t\t);\n\t\tvar res = plist.parse(value);\n\t\tassert.deepEqual(res, { errors: [], value: \"foo\" });\n\n\t\tvar value = newContent(\n\t\t\t'<string></string>'\n\t\t);\n\t\tvar res = plist.parse(value);\n\t\tassert.deepEqual(res, { errors: [], value: \"\" });\n\n\t\tvar value = newContent(\n\t\t\t'<string>',\n\t\t\t'</string>'\n\t\t);\n\t\tvar res = plist.parse(value);\n\t\tassert.deepEqual(res, { errors: [], value: \"\\n\" });\n\n\t\tvar value = newContent(\n\t\t\t'<string>&lt;foo&gt;</string>'\n\t\t);\n\t\tvar res = plist.parse(value);\n\t\tassert.deepEqual(res, { errors: [], value: \"<foo>\" });\n\n\t});\n\n\ttest('Numbers', function() {\n\t\tvar value = newContent(\n\t\t\t'<integer>0</integer>'\n\t\t);\n\t\tvar res = plist.parse(value);\n\t\tassert.deepEqual(res, { errors: [], value: 0 });\n\n\t\tvar value = newContent(\n\t\t\t'<real>1.123</real>'\n\t\t);\n\t\tvar res = plist.parse(value);\n\t\tassert.deepEqual(res, { errors: [], value: 1.123 });\n\n\t\tvar value = newContent(\n\t\t\t'<integer>ab</integer>'\n\t\t);\n\t\tvar res = plist.parse(value);\n\t\tassert.deepEqual(res, { errors: [\"ab is not a integer\"], value: null });\n\t});\n\n\n\ttest('Booleans', function() {\n\t\tvar value = newContent(\n\t\t\t'<true />'\n\t\t);\n\t\tvar res = plist.parse(value);\n\t\tassert.deepEqual(res, { errors: [], value: true });\n\n\t\tvar value = newContent(\n\t\t\t'<false />'\n\t\t);\n\t\tvar res = plist.parse(value);\n\t\tassert.deepEqual(res, { errors: [], value: false });\n\n\t\tvar value = newContent(\n\t\t\t'<false></false>'\n\t\t);\n\t\tvar res = plist.parse(value);\n\t\tassert.deepEqual(res, { errors: [], value: false });\n\t});\n\n\n\ttest('Dictionaries', function() {\n\n\t\t// empty\n\t\tvar value = newContent(\n\t\t\t'<dict>',\n\t\t\t'</dict>'\n\t\t);\n\n\t\tvar res = plist.parse(value);\n\t\tassert.deepEqual(res, { errors: [], value: {} });\n\n\t\t// keys and nesting\n\t\tvar value = newContent(\n\t\t\t'<dict>',\n\t\t\t\t'<key>name</key>',\n\t\t\t\t'<string>Variable</string>',\n\t\t\t\t'<key>scope</key>',\n\t\t\t\t'<string>variable</string>',\n\t\t\t\t'<key>settings</key>',\n\t\t\t\t'<dict>',\n\t\t\t\t\t'<key>fontStyle</key>',\n\t\t\t\t\t'<string></string>',\n\t\t\t\t'</dict>',\n\t\t\t'</dict>'\n\t\t);\n\n\t\tvar res = plist.parse(value);\n\t\tassert.deepEqual(res, { errors: [], value: { name: \"Variable\", scope: \"variable\", settings: { fontStyle: \"\" }}});\n\t});\n\n\ttest('Arrays', function() {\n\n\t\t// empty\n\t\tvar value = newContent(\n\t\t\t'<array>',\n\t\t\t'</array>'\n\t\t);\n\n\t\tvar res = plist.parse(value);\n\t\tassert.deepEqual(res, { errors: [], value: {} });\n\n\t\t// multiple elements\n\t\tvar value = newContent(\n\t\t\t'<array>',\n\t\t\t\t'<string>1</string>',\n\t\t\t\t'<string>2</string>',\n\t\t\t'</array>'\n\t\t);\n\n\t\tvar res = plist.parse(value);\n\t\tassert.deepEqual(res, { errors: [], value: [ \"1\", \"2\" ]});\n\n\t\t// nesting\n\t\tvar value = newContent(\n\t\t\t'<array>',\n\t\t\t\t'<array>',\n\t\t\t\t\t'<integer>1</integer>',\n\t\t\t\t\t'<integer>2</integer>',\n\t\t\t\t'</array>',\n\t\t\t\t'<array>',\n\t\t\t\t\t'<true />',\n\t\t\t\t'</array>',\n\t\t\t'</array>'\n\t\t);\n\n\t\tvar res = plist.parse(value);\n\t\tassert.deepEqual(res, { errors: [], value: [ [ 1, 2 ], [ true ]]});\n\t});\n});"]}