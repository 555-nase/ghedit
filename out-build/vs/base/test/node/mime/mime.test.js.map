{"version":3,"file":"vs/base/test/node/mime/mime.test.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/base/test/node/mime/mime.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport assert = require('assert');\n\nimport mimeCommon = require('vs/base/common/mime');\nimport mime = require('vs/base/node/mime');\n\nsuite('Mime', () => {\n\n\ttest('detectMimesFromFile (JSON saved as PNG)', function (done: () => void) {\n\t\tvar file = require.toUrl('./fixtures/some.json.png');\n\t\tmime.detectMimesFromFile(file, (error, mimes) => {\n\t\t\tassert.equal(error, null);\n\t\t\tassert.deepEqual(mimes.mimes, ['text/plain']);\n\n\t\t\tdone();\n\t\t});\n\t});\n\n\ttest('detectMimesFromFile (PNG saved as TXT)', function (done: () => void) {\n\t\tmimeCommon.registerTextMime({ mime: 'text/plain', extension: '.txt' });\n\t\tvar file = require.toUrl('./fixtures/some.png.txt');\n\t\tmime.detectMimesFromFile(file, (error, mimes) => {\n\t\t\tassert.equal(error, null);\n\t\t\tassert.deepEqual(mimes.mimes, ['text/plain', 'application/octet-stream']);\n\n\t\t\tdone();\n\t\t});\n\t});\n\n\ttest('detectMimesFromFile (XML saved as PNG)', function (done: () => void) {\n\t\tvar file = require.toUrl('./fixtures/some.xml.png');\n\t\tmime.detectMimesFromFile(file, (error, mimes) => {\n\t\t\tassert.equal(error, null);\n\t\t\tassert.deepEqual(mimes.mimes, ['text/plain']);\n\n\t\t\tdone();\n\t\t});\n\t});\n\n\ttest('detectMimesFromFile (QWOFF saved as TXT)', function (done: () => void) {\n\t\tvar file = require.toUrl('./fixtures/some.qwoff.txt');\n\t\tmime.detectMimesFromFile(file, (error, mimes) => {\n\t\t\tassert.equal(error, null);\n\t\t\tassert.deepEqual(mimes.mimes, ['text/plain', 'application/octet-stream']);\n\n\t\t\tdone();\n\t\t});\n\t});\n\n\ttest('detectMimesFromFile (CSS saved as QWOFF)', function (done: () => void) {\n\t\tvar file = require.toUrl('./fixtures/some.css.qwoff');\n\t\tmime.detectMimesFromFile(file, (error, mimes) => {\n\t\t\tassert.equal(error, null);\n\t\t\tassert.deepEqual(mimes.mimes, ['text/plain']);\n\n\t\t\tdone();\n\t\t});\n\t});\n\n\ttest('detectMimesFromFile (PDF)', function (done: () => void) {\n\t\tvar file = require.toUrl('./fixtures/some.pdf');\n\t\tmime.detectMimesFromFile(file, (error, mimes) => {\n\t\t\tassert.equal(error, null);\n\t\t\tassert.deepEqual(mimes.mimes, ['application/octet-stream']);\n\n\t\t\tdone();\n\t\t});\n\t});\n});\n"]}