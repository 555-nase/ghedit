{"version":3,"file":"vs/base/test/node/env.test.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/base/test/node/env.test.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;IAEhG,YAAY,CAAC;IAKb,KAAK,CAAC,KAAK,EAAE;QACZ,IAAI,CAAC,uDAAuD,EAAE,UAAU,IAAgB;YACvF,IAAI,IAAI,GAAG,GAAG,CAAC,cAAc,CAAC,4BAA4B,CAAC,CAAC;YAE5D,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YAC1C,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,OAAO,CAAC,CAAC;YACjC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,iBAAiB,CAAC,CAAC;YAE3C,IAAI,EAAE,CAAC;QACR,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,yDAAyD,EAAE,UAAU,IAAgB;YACzF,IAAI,IAAI,GAAG,GAAG,CAAC,cAAc,CAAC,6BAA6B,CAAC,CAAC;YAE7D,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YAC1C,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,iBAAiB,CAAC,CAAC;YAC3C,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,QAAQ,CAAC,CAAC;YAElC,IAAI,EAAE,CAAC;QACR,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,iDAAiD,EAAE,UAAU,IAAgB;YACjF,IAAI,IAAI,GAAG,GAAG,CAAC,cAAc,CAAC,oCAAoC,CAAC,CAAC;YAEpE,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YAC1C,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC;YAC7B,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,SAAS,CAAC,CAAC;YACnC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,gBAAgB,CAAC,CAAC;YAE5C,IAAI,EAAE,CAAC;QACR,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport * as assert from 'assert';\nimport env = require('vs/base/node/env');\n\nsuite('Env', () => {\n\ttest('Parses multi-line environment variables at end of env', function (done: () => void) {\n\t\tlet vars = env.parseEnvOutput('a=first\\nb=multiple\\nlines');\n\n\t\tassert.equal(Object.keys(vars).length, 2);\n\t\tassert.equal(vars['a'], 'first');\n\t\tassert.equal(vars['b'], 'multiple\\nlines');\n\n\t\tdone();\n\t});\n\n\ttest('Parses multi-line environment variables at start of env', function (done: () => void) {\n\t\tlet vars = env.parseEnvOutput('a=multiple\\nlines\\nb=second');\n\n\t\tassert.equal(Object.keys(vars).length, 2);\n\t\tassert.equal(vars['a'], 'multiple\\nlines');\n\t\tassert.equal(vars['b'], 'second');\n\n\t\tdone();\n\t});\n\n\ttest('Parses complex multi-line environment variables', function (done: () => void) {\n\t\tlet vars = env.parseEnvOutput('a=1\\nb=\\n23 =4\\n_5c=56\\n d=7\\nE =8');\n\n\t\tassert.equal(Object.keys(vars).length, 3);\n\t\tassert.equal(vars['a'], '1');\n\t\tassert.equal(vars['b'], '\\n23 =4');\n\t\tassert.equal(vars['_5c'], '56\\n d=7\\nE =8');\n\n\t\tdone();\n\t});\n});"]}