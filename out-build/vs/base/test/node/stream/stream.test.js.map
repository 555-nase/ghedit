{"version":3,"file":"vs/base/test/node/stream/stream.test.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/base/test/node/stream/stream.test.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;IAEhG,YAAY,CAAC;IAOb,KAAK,CAAC,QAAQ,EAAE;QACf,IAAI,CAAC,0BAA0B,EAAE,UAAU,IAAgB;YAC1D,IAAI,IAAI,GAAG,OAAO,CAAC,KAAK,CAAC,qBAAqB,CAAC,CAAC;YAEhD,MAAM,CAAC,iBAAiB,CAAC,IAAI,EAAE,EAAE,EAAE,UAAC,KAAY,EAAE,MAAkB,EAAE,KAAa;gBAClF,MAAM,CAAC,KAAK,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;gBAC1B,MAAM,CAAC,KAAK,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;gBACxB,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,QAAQ,EAAE,EAAE,YAAY,CAAC,CAAC;gBAE9C,IAAI,EAAE,CAAC;YACR,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,2BAA2B,EAAE,UAAU,IAAgB;YAC3D,IAAI,IAAI,GAAG,OAAO,CAAC,KAAK,CAAC,sBAAsB,CAAC,CAAC;YAEjD,MAAM,CAAC,iBAAiB,CAAC,IAAI,EAAE,EAAE,EAAE,UAAC,KAAY,EAAE,MAAkB,EAAE,KAAa;gBAClF,MAAM,CAAC,KAAK,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;gBAC1B,MAAM,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;gBAEvB,IAAI,EAAE,CAAC;YACR,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,4BAA4B,EAAE,UAAU,IAAgB;YAC5D,IAAI,IAAI,GAAG,OAAO,CAAC,KAAK,CAAC,qBAAqB,CAAC,CAAC;YAEhD,MAAM,CAAC,mBAAmB,CAAC,EAAE,CAAC,gBAAgB,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,UAAC,KAAY,EAAE,MAAkB,EAAE,KAAa;gBACzG,MAAM,CAAC,KAAK,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;gBAC1B,MAAM,CAAC,KAAK,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;gBACxB,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,QAAQ,EAAE,EAAE,YAAY,CAAC,CAAC;gBAE9C,IAAI,EAAE,CAAC;YACR,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,6BAA6B,EAAE,UAAU,IAAgB;YAC7D,IAAI,IAAI,GAAG,OAAO,CAAC,KAAK,CAAC,sBAAsB,CAAC,CAAC;YAEjD,MAAM,CAAC,mBAAmB,CAAC,EAAE,CAAC,gBAAgB,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,UAAC,KAAY,EAAE,MAAkB,EAAE,KAAa;gBACzG,MAAM,CAAC,KAAK,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;gBAC1B,MAAM,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;gBAEvB,IAAI,EAAE,CAAC;YACR,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport assert = require('assert');\nimport fs = require('fs');\n\nimport stream = require('vs/base/node/stream');\n\nsuite('Stream', () => {\n\ttest('readExactlyByFile - ANSI', function (done: () => void) {\n\t\tvar file = require.toUrl('./fixtures/file.css');\n\n\t\tstream.readExactlyByFile(file, 10, (error: Error, buffer: NodeBuffer, count: number) => {\n\t\t\tassert.equal(error, null);\n\t\t\tassert.equal(count, 10);\n\t\t\tassert.equal(buffer.toString(), '/*--------');\n\n\t\t\tdone();\n\t\t});\n\t});\n\n\ttest('readExactlyByFile - empty', function (done: () => void) {\n\t\tvar file = require.toUrl('./fixtures/empty.txt');\n\n\t\tstream.readExactlyByFile(file, 10, (error: Error, buffer: NodeBuffer, count: number) => {\n\t\t\tassert.equal(error, null);\n\t\t\tassert.equal(count, 0);\n\n\t\t\tdone();\n\t\t});\n\t});\n\n\ttest('readExactlyByStream - ANSI', function (done: () => void) {\n\t\tvar file = require.toUrl('./fixtures/file.css');\n\n\t\tstream.readExactlyByStream(fs.createReadStream(file), 10, (error: Error, buffer: NodeBuffer, count: number) => {\n\t\t\tassert.equal(error, null);\n\t\t\tassert.equal(count, 10);\n\t\t\tassert.equal(buffer.toString(), '/*--------');\n\n\t\t\tdone();\n\t\t});\n\t});\n\n\ttest('readExactlyByStream - empty', function (done: () => void) {\n\t\tvar file = require.toUrl('./fixtures/empty.txt');\n\n\t\tstream.readExactlyByStream(fs.createReadStream(file), 10, (error: Error, buffer: NodeBuffer, count: number) => {\n\t\t\tassert.equal(error, null);\n\t\t\tassert.equal(count, 0);\n\n\t\t\tdone();\n\t\t});\n\t});\n});"]}