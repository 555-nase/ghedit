{"version":3,"file":"vs/base/parts/quickopen/common/quickOpen.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/base/parts/quickopen/common/quickOpen.ts"],"names":[],"mappings":";IAAA;;;oGAGgG;IAChG,YAAY,CAAC;IAkCb,WAAY,IAAI;QACf,qCAAO,CAAA;QACP,+BAAI,CAAA;IACL,CAAC,EAHW,YAAI,KAAJ,YAAI,QAGf;IAHD,IAAY,IAAI,GAAJ,YAGX,CAAA","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {Keybinding} from 'vs/base/common/keyCodes';\n\nexport interface IQuickNavigateConfiguration {\n\tkeybindings: Keybinding[];\n}\n\nexport interface IAutoFocus {\n\n\t/**\n\t * The index of the element to focus in the result list.\n\t */\n\tautoFocusIndex?: number;\n\n\t/**\n\t * If set to true, will automatically select the first entry from the result list.\n\t */\n\tautoFocusFirstEntry?: boolean;\n\n\t/**\n\t * If set to true, will automatically select the second entry from the result list.\n\t */\n\tautoFocusSecondEntry?: boolean;\n\n\t/**\n\t * If set to true, will automatically select any entry whose label starts with the search\n\t * value. Since some entries to the top might match the query but not on the prefix, this\n\t * allows to select the most accurate match (matching the prefix) while still showing other\n\t * elements.\n\t */\n\tautoFocusPrefixMatch?: string;\n}\n\nexport enum Mode {\n\tPREVIEW,\n\tOPEN\n}\n\nexport interface IContext {\n\tevent: any;\n\tquickNavigateConfiguration: IQuickNavigateConfiguration;\n}\n\nexport interface IDataSource<T> {\n\tgetId(entry: T): string;\n\tgetLabel(entry: T): string;\n}\n\n/**\n * See vs/base/parts/tree/browser/tree.ts - IRenderer\n */\nexport interface IRenderer<T> {\n\tgetHeight(entry: T): number;\n\tgetTemplateId(entry: T): string;\n\trenderTemplate(templateId: string, container: HTMLElement): any;\n\trenderElement(entry: T, templateId: string, templateData: any): void;\n\tdisposeTemplate(templateId: string, templateData: any): void;\n}\n\nexport interface IFilter<T> {\n\tisVisible(entry: T): boolean;\n}\n\nexport interface IAccessiblityProvider<T> {\n\tgetAriaLabel(entry: T): string;\n}\n\nexport interface IRunner<T> {\n\trun(entry: T, mode: Mode, context: IContext): boolean;\n}\n\nexport interface IModel<T> {\n\tentries: T[];\n\tdataSource: IDataSource<T>;\n\trenderer: IRenderer<T>;\n\trunner: IRunner<T>;\n\tfilter?: IFilter<T>;\n\taccessibilityProvider?: IAccessiblityProvider<T>;\n}"]}