{"version":3,"file":"vs/base/browser/ui/list/rangeMap.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/base/browser/ui/list/rangeMap.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nexport interface IItem {\n\tsize: number;\n}\n\nexport interface IRange {\n\tstart: number;\n\tend: number;\n}\n\nexport interface IRangedGroup {\n\trange: IRange;\n\tsize: number;\n}\n\n/**\n * Returns the intersection between two ranges as a range itself.\n * Returns `null` if the intersection is empty.\n */\nexport function intersect(one: IRange, other: IRange): IRange {\n\tif (one.start >= other.end || other.start >= one.end) {\n\t\treturn null;\n\t}\n\n\tconst start = Math.max(one.start, other.start);\n\tconst end = Math.min(one.end, other.end);\n\n\tif (end - start <= 0) {\n\t\treturn null;\n\t}\n\n\treturn { start, end };\n}\n\n/**\n * Returns the intersection between a ranged group and a range.\n * Returns `[]` if the intersection is empty.\n */\nexport function groupIntersect(range: IRange, groups: IRangedGroup[]): IRangedGroup[] {\n\tconst result: IRangedGroup[] = [];\n\n\tfor (const r of groups) {\n\t\tif (range.start >= r.range.end) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (range.end < r.range.start) {\n\t\t\tbreak;\n\t\t}\n\n\t\tconst intersection = intersect(range, r.range);\n\n\t\tif (!intersection) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tresult.push({\n\t\t\trange: intersection,\n\t\t\tsize: r.size\n\t\t});\n\t}\n\n\treturn result;\n}\n\n/**\n * Shifts a range by that `much`.\n */\nfunction shift({ start, end }: IRange, much: number): IRange {\n\treturn { start: start + much, end: end + much };\n}\n\n/**\n * Consolidates a collection of ranged groups.\n *\n * Consolidation is the process of merging consecutive ranged groups\n * that share the same `size`.\n */\nexport function consolidate(groups: IRangedGroup[]): IRangedGroup[] {\n\tconst result: IRangedGroup[] = [];\n\tlet previousGroup: IRangedGroup = null;\n\n\tfor (const group of groups) {\n\t\tconst start = group.range.start;\n\t\tconst end = group.range.end;\n\t\tconst size = group.size;\n\n\t\tif (previousGroup && size === previousGroup.size) {\n\t\t\tpreviousGroup.range.end = end;\n\t\t\tcontinue;\n\t\t}\n\n\t\tpreviousGroup = { range: { start, end }, size };\n\t\tresult.push(previousGroup);\n\t}\n\n\treturn result;\n}\n\n/**\n * Concatenates several collections of ranged groups into a single\n * collection.\n */\nfunction concat(...groups: IRangedGroup[][]): IRangedGroup[] {\n\treturn consolidate(groups.reduce((r, g) => r.concat(g), [] as IRangedGroup[]));\n}\n\nexport class RangeMap {\n\n\tprivate groups: IRangedGroup[] = [];\n\tprivate _size = 0;\n\n\tsplice(index: number, deleteCount: number, ...items: IItem[]): void {\n\t\tconst diff = items.length - deleteCount;\n\t\tconst before = groupIntersect({ start: 0, end: index }, this.groups);\n\t\tconst after = groupIntersect({ start: index + deleteCount, end: Number.POSITIVE_INFINITY }, this.groups)\n\t\t\t.map<IRangedGroup>(g => ({ range: shift(g.range, diff), size: g.size }));\n\n\t\tconst middle = items.map<IRangedGroup>((item, i) => ({\n\t\t\trange: { start: index + i, end: index + i + 1 },\n\t\t\tsize: item.size\n\t\t}));\n\n\t\tthis.groups = concat(before, middle, after);\n\t\tthis._size = this.groups.reduce((t, g) => t + (g.size * (g.range.end - g.range.start)), 0);\n\t}\n\n\t/**\n\t * Returns the number of items in the range map.\n\t */\n\tget count(): number {\n\t\tconst len = this.groups.length;\n\n\t\tif (!len) {\n\t\t\treturn 0;\n\t\t}\n\n\t\treturn this.groups[len - 1].range.end;\n\t}\n\n\t/**\n\t * Returns the sum of the sizes of all items in the range map.\n\t */\n\tget size(): number {\n\t\treturn this._size;\n\t}\n\n\t/**\n\t * Returns the index of the item at the given position.\n\t */\n\tindexAt(position: number): number {\n\t\tif (position < 0) {\n\t\t\treturn -1;\n\t\t}\n\n\t\tlet index = 0;\n\t\tlet size = 0;\n\n\t\tfor (const group of this.groups) {\n\t\t\tconst count = group.range.end - group.range.start;\n\t\t\tconst newSize = size + (count * group.size);\n\n\t\t\tif (position < newSize) {\n\t\t\t\treturn index + Math.floor((position - size) / group.size);\n\t\t\t}\n\n\t\t\tindex += count;\n\t\t\tsize = newSize;\n\t\t}\n\n\t\treturn index;\n\t}\n\n\t/**\n\t * Returns the index of the item right after the item at the\n\t * index of the given position.\n\t */\n\tindexAfter(position: number): number {\n\t\treturn Math.min(this.indexAt(position) + 1, this.count);\n\t}\n\n\t/**\n\t * Returns the start position of the item at the given index.\n\t */\n\tpositionAt(index: number): number {\n\t\tif (index < 0) {\n\t\t\treturn -1;\n\t\t}\n\n\t\tlet position = 0;\n\t\tlet count = 0;\n\n\t\tfor (const group of this.groups) {\n\t\t\tconst groupCount = group.range.end - group.range.start;\n\t\t\tconst newCount = count + groupCount;\n\n\t\t\tif (index < newCount) {\n\t\t\t\treturn position + ((index - count) * group.size);\n\t\t\t}\n\n\t\t\tposition += groupCount * group.size;\n\t\t\tcount = newCount;\n\t\t}\n\n\t\treturn -1;\n\t}\n\n\tdispose() {\n\t\tthis.groups = null;\n\t}\n}"]}