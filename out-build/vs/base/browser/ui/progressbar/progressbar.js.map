{"version":3,"file":"vs/base/browser/ui/progressbar/progressbar.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/base/browser/ui/progressbar/progressbar.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport 'vs/css!./progressbar';\nimport {TPromise, ValueCallback} from 'vs/base/common/winjs.base';\nimport assert = require('vs/base/common/assert');\nimport browser = require('vs/base/browser/browser');\nimport {Builder, $} from 'vs/base/browser/builder';\nimport DOM = require('vs/base/browser/dom');\nimport uuid = require('vs/base/common/uuid');\nimport {IDisposable,dispose} from 'vs/base/common/lifecycle';\n\nconst css_done = 'done';\nconst css_active = 'active';\nconst css_infinite = 'infinite';\nconst css_discrete = 'discrete';\nconst css_progress_container = 'progress-container';\nconst css_progress_bit = 'progress-bit';\n\n/**\n * A progress bar with support for infinite or discrete progress.\n */\nexport class ProgressBar {\n\n\tprivate toUnbind: IDisposable[];\n\tprivate workedVal: number;\n\tprivate element: Builder;\n\tprivate animationRunning: boolean;\n\tprivate bit: HTMLElement;\n\tprivate totalWork: number;\n\tprivate animationStopToken: ValueCallback;\n\tprivate currentProgressToken: string;\n\n\tconstructor(builder: Builder) {\n\t\tthis.toUnbind = [];\n\t\tthis.workedVal = 0;\n\n\t\tthis.create(builder);\n\t}\n\n\tprivate create(parent: Builder): void {\n\t\tparent.div({ 'class': css_progress_container }, (builder) => {\n\t\t\tthis.element = builder.clone();\n\n\t\t\tbuilder.div({ 'class': css_progress_bit }).on([DOM.EventType.ANIMATION_START, DOM.EventType.ANIMATION_END, DOM.EventType.ANIMATION_ITERATION], (e: Event) => {\n\t\t\t\tswitch (e.type) {\n\t\t\t\t\tcase DOM.EventType.ANIMATION_START:\n\t\t\t\t\tcase DOM.EventType.ANIMATION_END:\n\t\t\t\t\t\tthis.animationRunning = e.type === DOM.EventType.ANIMATION_START;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase DOM.EventType.ANIMATION_ITERATION:\n\t\t\t\t\t\tif (this.animationStopToken) {\n\t\t\t\t\t\t\tthis.animationStopToken(null);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t}, this.toUnbind);\n\n\t\t\tthis.bit = builder.getHTMLElement();\n\t\t});\n\t}\n\n\tprivate off(): void {\n\t\tthis.bit.style.width = 'inherit';\n\t\tthis.bit.style.opacity = '1';\n\t\tthis.element.removeClass(css_active);\n\t\tthis.element.removeClass(css_infinite);\n\t\tthis.element.removeClass(css_discrete);\n\n\t\tthis.workedVal = 0;\n\t\tthis.totalWork = undefined;\n\t}\n\n\t/**\n\t * Indicates to the progress bar that all work is done.\n\t */\n\tpublic done(): ProgressBar {\n\t\treturn this.doDone(true);\n\t}\n\n\t/**\n\t * Stops the progressbar from showing any progress instantly without fading out.\n\t */\n\tpublic stop(): ProgressBar {\n\t\treturn this.doDone(false);\n\t}\n\n\tprivate doDone(delayed: boolean): ProgressBar {\n\t\tthis.element.addClass(css_done);\n\n\t\t// let it grow to 100% width and hide afterwards\n\t\tif (!this.element.hasClass(css_infinite)) {\n\t\t\tthis.bit.style.width = 'inherit';\n\n\t\t\tif (delayed) {\n\t\t\t\tTPromise.timeout(200).then(() => this.off());\n\t\t\t} else {\n\t\t\t\tthis.off();\n\t\t\t}\n\t\t}\n\n\t\t// let it fade out and hide afterwards\n\t\telse {\n\t\t\tthis.bit.style.opacity = '0';\n\t\t\tif (delayed) {\n\t\t\t\tTPromise.timeout(200).then(() => this.off());\n\t\t\t} else {\n\t\t\t\tthis.off();\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Use this mode to indicate progress that has no total number of work units.\n\t */\n\tpublic infinite(): ProgressBar {\n\t\tthis.bit.style.width = '2%';\n\t\tthis.bit.style.opacity = '1';\n\n\t\tthis.element.removeClass(css_discrete);\n\t\tthis.element.removeClass(css_done);\n\t\tthis.element.addClass(css_active);\n\t\tthis.element.addClass(css_infinite);\n\n\t\tif (!browser.hasCSSAnimationSupport()) {\n\n\t\t\t// Use a generated token to avoid race conditions from reentrant calls to this function\n\t\t\tlet currentProgressToken = uuid.v4().asHex();\n\t\t\tthis.currentProgressToken = currentProgressToken;\n\n\t\t\tthis.manualInfinite(currentProgressToken);\n\t\t}\n\n\t\treturn this;\n\t}\n\n\tprivate manualInfinite(currentProgressToken: string): void {\n\t\tthis.bit.style.width = '5%';\n\t\tthis.bit.style.display = 'inherit';\n\n\t\tlet counter = 0;\n\t\tlet animationFn: () => void = () => {\n\t\t\tTPromise.timeout(50).then(() => {\n\n\t\t\t\t// Return if another manualInfinite() call was made\n\t\t\t\tif (currentProgressToken !== this.currentProgressToken) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Animation done\n\t\t\t\telse if (this.element.hasClass(css_done)) {\n\t\t\t\t\tthis.bit.style.display = 'none';\n\t\t\t\t\tthis.bit.style.left = '0';\n\t\t\t\t}\n\n\t\t\t\t// Wait until progress bar becomes visible\n\t\t\t\telse if (this.element.isHidden()) {\n\t\t\t\t\tanimationFn();\n\t\t\t\t}\n\n\t\t\t\t// Continue Animation until done\n\t\t\t\telse {\n\t\t\t\t\tcounter = (counter + 1) % 95;\n\t\t\t\t\tthis.bit.style.left = counter + '%';\n\t\t\t\t\tanimationFn();\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\n\t\t// Start Animation\n\t\tanimationFn();\n\t}\n\n\t/**\n\t * Tells the progress bar the total number of work. Use in combination with workedVal() to let\n\t * the progress bar show the actual progress based on the work that is done.\n\t */\n\tpublic total(value: number): ProgressBar {\n\t\tthis.workedVal = 0;\n\t\tthis.totalWork = value;\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Finds out if this progress bar is configured with total work\n\t */\n\tpublic hasTotal(): boolean {\n\t\treturn !isNaN(this.totalWork);\n\t}\n\n\t/**\n\t * Tells the progress bar that an amount of work has been completed.\n\t */\n\tpublic worked(value: number): ProgressBar {\n\t\tassert.ok(!isNaN(this.totalWork), 'Total work not set');\n\n\t\tvalue = Number(value);\n\t\tassert.ok(!isNaN(value), 'Value is not a number');\n\t\tvalue = Math.max(1, value);\n\n\t\tthis.workedVal += value;\n\t\tthis.workedVal = Math.min(this.totalWork, this.workedVal);\n\n\t\tif (this.element.hasClass(css_infinite)) {\n\t\t\tthis.element.removeClass(css_infinite);\n\t\t}\n\n\t\tif (this.element.hasClass(css_done)) {\n\t\t\tthis.element.removeClass(css_done);\n\t\t}\n\n\t\tif (!this.element.hasClass(css_active)) {\n\t\t\tthis.element.addClass(css_active);\n\t\t}\n\n\t\tif (!this.element.hasClass(css_discrete)) {\n\t\t\tthis.element.addClass(css_discrete);\n\t\t}\n\n\t\tthis.bit.style.width = 100 * (this.workedVal / this.totalWork) + '%';\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns the builder this progress bar is building in.\n\t */\n\tpublic getContainer(): Builder {\n\t\treturn $(this.element);\n\t}\n\n\tpublic dispose(): void {\n\t\tthis.toUnbind = dispose(this.toUnbind);\n\t}\n}"]}