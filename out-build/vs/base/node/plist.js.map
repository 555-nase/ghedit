{"version":3,"file":"vs/base/node/plist.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/base/node/plist.ts"],"names":[],"mappings":";IAAA;;;oGAGgG;IAChG,YAAY,CAAC;IAUb,eAAyB,OAAe;QAEvC,IAAI,MAAM,GAAc,EAAE,CAAC;QAC3B,IAAI,UAAU,GAAiB,IAAI,CAAC;QACpC,IAAI,MAAM,GAAS,IAAI,CAAC;QAExB,IAAI,IAAI,GAAG,IAAI,CAAC;QAEhB,IAAI,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC,KAAK,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;QACpD,MAAM,CAAC,OAAO,GAAG,UAAC,CAAC;YAClB,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;QACxB,CAAC,CAAC;QACF,MAAM,CAAC,MAAM,GAAG,UAAC,CAAS;YACzB,IAAI,GAAG,CAAC,CAAC;QACV,CAAC,CAAC;QACF,MAAM,CAAC,SAAS,GAAG,UAAC,GAAY;YAC/B,MAAM,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;gBAClB,KAAK,MAAM;oBACV,UAAU,GAAG,EAAE,MAAM,EAAE,UAAU,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC;oBAC/C,KAAK,CAAC;gBACP,KAAK,OAAO;oBACX,UAAU,GAAG,EAAE,MAAM,EAAE,UAAU,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC;oBAC/C,KAAK,CAAC;gBACP,KAAK,KAAK;oBACT,EAAE,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;wBAChB,UAAU,CAAC,OAAO,GAAG,IAAI,CAAC;oBAC3B,CAAC;oBACD,KAAK,CAAC;YACR,CAAC;YACD,IAAI,GAAG,EAAE,CAAC;QACX,CAAC,CAAC;QAEF,MAAM,CAAC,UAAU,GAAG,UAAC,OAAgB;YACpC,IAAI,KAAK,CAAC;YACV,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;gBACjB,KAAK,KAAK;oBACT,EAAE,CAAC,CAAC,CAAC,UAAU,IAAI,KAAK,CAAC,OAAO,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;wBACpD,MAAM,CAAC,IAAI,CAAC,kDAAkD,CAAC,CAAC;wBAChE,MAAM,CAAC;oBACR,CAAC;oBACD,UAAU,CAAC,OAAO,GAAG,IAAI,CAAC;oBAC1B,MAAM,CAAC;gBACR,KAAK,MAAM,CAAC;gBACZ,KAAK,OAAO;oBACX,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;wBACjB,MAAM,CAAC,IAAI,CAAC,OAAO,GAAG,yCAAyC,CAAC,CAAC;wBACjE,MAAM,CAAC;oBACR,CAAC;oBACD,KAAK,GAAG,UAAU,CAAC,KAAK,CAAC;oBACzB,UAAU,GAAG,UAAU,CAAC,MAAM,CAAC;oBAC/B,KAAK,CAAC;gBACP,KAAK,QAAQ,CAAC;gBACd,KAAK,MAAM;oBACV,KAAK,GAAG,IAAI,CAAC;oBACb,KAAK,CAAC;gBACP,KAAK,MAAM;oBACV,KAAK,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC;oBACvB,KAAK,CAAC;gBACP,KAAK,SAAS;oBACb,KAAK,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC;oBACvB,EAAE,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;wBAClB,MAAM,CAAC,IAAI,CAAC,IAAI,GAAG,mBAAmB,CAAC,CAAC;wBACxC,MAAM,CAAC;oBACR,CAAC;oBACD,KAAK,CAAC;gBACP,KAAK,MAAM;oBACV,KAAK,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC;oBACzB,EAAE,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;wBAClB,MAAM,CAAC,IAAI,CAAC,IAAI,GAAG,iBAAiB,CAAC,CAAC;wBACtC,MAAM,CAAC;oBACR,CAAC;oBACD,KAAK,CAAC;gBACP,KAAK,MAAM;oBACV,KAAK,GAAG,IAAI,CAAC;oBACb,KAAK,CAAC;gBACP,KAAK,OAAO;oBACX,KAAK,GAAG,KAAK,CAAC;oBACd,KAAK,CAAC;gBACP,KAAK,OAAO;oBACX,MAAM,CAAC;gBACR;oBACC,MAAM,CAAC,IAAI,CAAC,oBAAoB,GAAG,OAAO,CAAC,CAAC;oBAC5C,MAAM,CAAC;YAET,CAAC;YACD,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;gBACjB,MAAM,GAAG,KAAK,CAAC;YAChB,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBAC5C,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAC9B,CAAC;YAAC,IAAI,CAAC,CAAC;gBACP,EAAE,CAAC,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC;oBACxB,UAAU,CAAC,KAAK,CAAC,UAAU,CAAC,OAAO,CAAC,GAAG,KAAK,CAAC;gBAC9C,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACP,MAAM,CAAC,IAAI,CAAC,mCAAmC,GAAG,KAAK,CAAC,CAAC;gBAC1D,CAAC;YACF,CAAC;QACF,CAAC,CAAC;QACF,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QACtB,MAAM,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC;IAC1C,CAAC;IAnGe,aAAK,QAmGpB,CAAA","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport sax = require('sax');\n\ninterface PListObject {\n\tparent: PListObject;\n\tvalue: any;\n\tlastKey?: string;\n}\n\nexport function parse<T>(content: string) : { value: T; errors: string[]; } {\n\n\tlet errors : string[] = [];\n\tlet currObject : PListObject = null;\n\tlet result : any = null;\n\n\tlet text = null;\n\n\tlet parser = sax.parser(false, { lowercase: true });\n\tparser.onerror = (e) => {\n\t\terrors.push(e.message);\n\t};\n\tparser.ontext = (s: string) => {\n\t\ttext = s;\n\t};\n\tparser.onopentag = (tag: sax.Tag) => {\n\t\tswitch (tag.name) {\n\t\t\tcase 'dict':\n\t\t\t\tcurrObject = { parent: currObject, value: {} };\n\t\t\t\tbreak;\n\t\t\tcase 'array':\n\t\t\t\tcurrObject = { parent: currObject, value: [] };\n\t\t\t\tbreak;\n\t\t\tcase 'key':\n\t\t\t\tif (currObject) {\n\t\t\t\t\tcurrObject.lastKey = null;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\t\ttext = '';\n\t};\n\n\tparser.onclosetag = (tagName:  string) => {\n\t\tlet value;\n\t\tswitch (tagName) {\n\t\t\tcase 'key':\n\t\t\t\tif (!currObject || Array.isArray(currObject.value)) {\n\t\t\t\t\terrors.push('key can only be used inside an open dict element');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tcurrObject.lastKey = text;\n\t\t\t\treturn;\n\t\t\tcase 'dict':\n\t\t\tcase 'array':\n\t\t\t\tif (!currObject) {\n\t\t\t\t\terrors.push(tagName + ' closing tag found, without opening tag');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tvalue = currObject.value;\n\t\t\t\tcurrObject = currObject.parent;\n\t\t\t\tbreak;\n\t\t\tcase 'string':\n\t\t\tcase 'data':\n\t\t\t\tvalue = text;\n\t\t\t\tbreak;\n\t\t\tcase 'date':\n\t\t\t\tvalue = new Date(text);\n\t\t\t\tbreak;\n\t\t\tcase 'integer':\n\t\t\t\tvalue = parseInt(text);\n\t\t\t\tif (isNaN(value)) {\n\t\t\t\t\terrors.push(text + ' is not a integer');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'real':\n\t\t\t\tvalue = parseFloat(text);\n\t\t\t\tif (isNaN(value)) {\n\t\t\t\t\terrors.push(text + ' is not a float');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'true':\n\t\t\t\tvalue = true;\n\t\t\t\tbreak;\n\t\t\tcase 'false':\n\t\t\t\tvalue = false;\n\t\t\t\tbreak;\n\t\t\tcase 'plist':\n\t\t\t\treturn;\n\t\t\tdefault:\n\t\t\t\terrors.push('Invalid tag name: ' + tagName);\n\t\t\t\treturn;\n\n\t\t}\n\t\tif (!currObject) {\n\t\t\tresult = value;\n\t\t} else if (Array.isArray(currObject.value)) {\n\t\t\tcurrObject.value.push(value);\n\t\t} else {\n\t\t\tif (currObject.lastKey) {\n\t\t\t\tcurrObject.value[currObject.lastKey] = value;\n\t\t\t} else {\n\t\t\t\terrors.push('Dictionary key missing for value ' + value);\n\t\t\t}\n\t\t}\n\t};\n\tparser.write(content);\n\treturn { errors: errors, value: result };\n}"]}