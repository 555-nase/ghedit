{"version":3,"file":"stream.js","sourceRoot":"","sources":["../../../../src/vs/base/node/stream.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport fs = require('fs');\nimport stream = require('stream');\n\n/**\n * Reads up to total bytes from the provided stream.\n */\nexport function readExactlyByStream(stream:stream.Readable, totalBytes:number, callback:(err:Error, buffer:NodeBuffer, bytesRead:number) => void):void {\n\tlet done = false;\n\tlet buffer = new Buffer(totalBytes);\n\tlet bytesRead = 0;\n\n\tstream.on('data', (data:NodeBuffer) => {\n\t\tlet bytesToRead = Math.min(totalBytes - bytesRead, data.length);\n\t\tdata.copy(buffer, bytesRead, 0, bytesToRead);\n\t\tbytesRead += bytesToRead;\n\n\t\tif (bytesRead === totalBytes) {\n\t\t\tstream.destroy(); // Will trigger the close event eventually\n\t\t}\n\t});\n\n\tstream.on('error', (e:Error) => {\n\t\tif (!done) {\n\t\t\tdone = true;\n\t\t\tcallback(e, null, null);\n\t\t}\n\t});\n\n\tlet onSuccess = () => {\n\t\tif (!done) {\n\t\t\tdone = true;\n\t\t\tcallback(null, buffer, bytesRead);\n\t\t}\n\t};\n\n\tstream.on('close', onSuccess);\n}\n\n/**\n * Reads totalBytes from the provided file.\n */\nexport function readExactlyByFile(file:string, totalBytes:number, callback:(error:Error, buffer:NodeBuffer, bytesRead:number)=>void):void {\n\tfs.open(file, 'r', null, (err, fd)=>{\n\t\tif (err) {\n\t\t\treturn callback(err, null, 0);\n\t\t}\n\n\t\tfunction end(err:Error, resultBuffer:NodeBuffer, bytesRead:number):void {\n\t\t\tfs.close(fd, (closeError:Error)=>{\n\t\t\t\tif (closeError) {\n\t\t\t\t\treturn callback(closeError, null, bytesRead);\n\t\t\t\t}\n\n\t\t\t\tif (err && (<any>err).code === 'EISDIR') {\n\t\t\t\t\treturn callback(err, null, bytesRead); // we want to bubble this error up (file is actually a folder)\n\t\t\t\t}\n\n\t\t\t\treturn callback(null, resultBuffer, bytesRead);\n\t\t\t});\n\t\t}\n\n\t\tlet buffer = new Buffer(totalBytes);\n\t\tlet bytesRead = 0;\n\t\tlet zeroAttempts = 0;\n\t\tfunction loop():void {\n\t\t\tfs.read(fd, buffer, bytesRead, totalBytes - bytesRead, null, (err, moreBytesRead)=>{\n\t\t\t\tif (err) {\n\t\t\t\t\treturn end(err, null, 0);\n\t\t\t\t}\n\n\t\t\t\t// Retry up to N times in case 0 bytes where read\n\t\t\t\tif (moreBytesRead === 0) {\n\t\t\t\t\tif (++zeroAttempts === 10) {\n\t\t\t\t\t\treturn end(null, buffer, bytesRead);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn loop();\n\t\t\t\t}\n\n\t\t\t\tbytesRead += moreBytesRead;\n\n\t\t\t\tif (bytesRead === totalBytes) {\n\t\t\t\t\treturn end(null, buffer, bytesRead);\n\t\t\t\t}\n\n\t\t\t\treturn loop();\n\t\t\t});\n\t\t}\n\n\t\tloop();\n\t});\n}"]}