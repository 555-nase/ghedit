{"version":3,"file":"vs/base/node/flow.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/base/node/flow.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport assert = require('assert');\n\n/**\n * Executes the given function (fn) over the given array of items (list) in parallel and returns the resulting errors and results as\n * array to the callback (callback). The resulting errors and results are evaluated by calling the provided callback function.\n */\nexport function parallel<T, E>(list: T[], fn: (item: T, callback: (err: Error, result: E) => void) => void, callback: (err: Error[], result: E[]) => void): void {\n\tlet results = new Array(list.length);\n\tlet errors = new Array<Error>(list.length);\n\tlet didErrorOccur = false;\n\tlet doneCount = 0;\n\n\tif (list.length === 0) {\n\t\treturn callback(null, []);\n\t}\n\n\tlist.forEach((item, index) => {\n\t\tfn(item, (error, result) => {\n\t\t\tif (error) {\n\t\t\t\tdidErrorOccur = true;\n\t\t\t\tresults[index] = null;\n\t\t\t\terrors[index] = error;\n\t\t\t} else {\n\t\t\t\tresults[index] = result;\n\t\t\t\terrors[index] = null;\n\t\t\t}\n\n\t\t\tif (++doneCount === list.length) {\n\t\t\t\treturn callback(didErrorOccur ? errors : null, results);\n\t\t\t}\n\t\t});\n\t});\n}\n\n/**\n * Executes the given function (fn) over the given array of items (param) in sequential order and returns the first occurred error or the result as\n * array to the callback (callback). The resulting errors and results are evaluated by calling the provided callback function. The first param can\n * either be a function that returns an array of results to loop in async fashion or be an array of items already.\n */\nexport function loop<T, E>(param: (callback: (error: Error, result: T[]) => void) => void, fn: (item: T, callback: (error: Error, result: E) => void, index: number, total: number) => void, callback: (error: Error, result: E[]) => void): void;\nexport function loop<T, E>(param: T[], fn: (item: T, callback: (error: Error, result: E) => void, index: number, total: number) => void, callback: (error: Error, result: E[]) => void): void;\nexport function loop<E>(param: any, fn: (item: any, callback: (error: Error, result: E) => void, index: number, total: number) => void, callback: (error: Error, result: E[]) => void): void {\n\n\t// Assert\n\tassert.ok(param, 'Missing first parameter');\n\tassert.ok(typeof (fn) === 'function', 'Second parameter must be a function that is called for each element');\n\tassert.ok(typeof (callback) === 'function', 'Third parameter must be a function that is called on error and success');\n\n\t// Param is function, execute to retrieve array\n\tif (typeof (param) === 'function') {\n\t\ttry {\n\t\t\tparam((error: Error, result: E[]) => {\n\t\t\t\tif (error) {\n\t\t\t\t\tcallback(error, null);\n\t\t\t\t} else {\n\t\t\t\t\tloop(result, fn, callback);\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (error) {\n\t\t\tcallback(error, null);\n\t\t}\n\t}\n\n\t// Expect the param to be an array and loop over it\n\telse {\n\t\tlet results: E[] = [];\n\n\t\tlet looper: (i: number) => void = function (i: number): void {\n\n\t\t\t// Still work to do\n\t\t\tif (i < param.length) {\n\n\t\t\t\t// Execute function on array element\n\t\t\t\ttry {\n\t\t\t\t\tfn(param[i], (error: any, result: E) => {\n\n\t\t\t\t\t\t// A method might only send a boolean value as return value (e.g. fs.exists), support this case gracefully\n\t\t\t\t\t\tif (error === true || error === false) {\n\t\t\t\t\t\t\tresult = error;\n\t\t\t\t\t\t\terror = null;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Quit looping on error\n\t\t\t\t\t\tif (error) {\n\t\t\t\t\t\t\tcallback(error, null);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Otherwise push result on stack and continue looping\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tif (result) { //Could be that provided function is not returning a result\n\t\t\t\t\t\t\t\tresults.push(result);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tprocess.nextTick(() => {\n\t\t\t\t\t\t\t\tlooper(i + 1);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}, i, param.length);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tcallback(error, null);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Done looping, pass back results too callback function\n\t\t\telse {\n\t\t\t\tcallback(null, results);\n\t\t\t}\n\t\t};\n\n\t\t// Start looping with first element in array\n\t\tlooper(0);\n\t}\n}\n\nfunction Sequence(sequences: { (...param: any[]): void; }[]): void {\n\n\t// Assert\n\tassert.ok(sequences.length > 1, 'Need at least one error handler and one function to process sequence');\n\tsequences.forEach((sequence) => {\n\t\tassert.ok(typeof (sequence) === 'function');\n\t});\n\n\t// Execute in Loop\n\tlet errorHandler = sequences.splice(0, 1)[0]; //Remove error handler\n\tlet sequenceResult: any = null;\n\n\tloop(sequences, (sequence, clb) => {\n\t\tlet sequenceFunction = function (error: any, result: any): void {\n\n\t\t\t// A method might only send a boolean value as return value (e.g. fs.exists), support this case gracefully\n\t\t\tif (error === true || error === false) {\n\t\t\t\tresult = error;\n\t\t\t\terror = null;\n\t\t\t}\n\n\t\t\t// Handle Error and Result\n\t\t\tif (error) {\n\t\t\t\tclb(error, null);\n\t\t\t} else {\n\t\t\t\tsequenceResult = result; //Remember result of sequence\n\t\t\t\tclb(null, null); //Don't pass on result to Looper as we are not aggregating it\n\t\t\t}\n\t\t};\n\n\t\t// We call the sequence function setting \"this\" to be the callback we define here\n\t\t// and we pass in the \"sequenceResult\" as first argument. Doing all this avoids having\n\t\t// to pass in a callback to the sequence because the callback is already \"this\".\n\t\ttry {\n\t\t\tsequence.call(sequenceFunction, sequenceResult);\n\t\t} catch (error) {\n\t\t\tclb(error, null);\n\t\t}\n\t}, (error, result) => {\n\t\tif (error) {\n\t\t\terrorHandler(error);\n\t\t}\n\t});\n}\n\n/**\n * Takes a variable list of functions to execute in sequence. The first function must be the error handler and the\n * following functions can do arbitrary work. \"this\" must be used as callback value for async functions to continue\n * through the sequence:\n * \tsequence(\n * \t\tfunction errorHandler(error) {\n * \t\t\tclb(error, null);\n * \t\t},\n *\n * \t\tfunction doSomethingAsync() {\n * \t\t\tfs.doAsync(path, this);\n * \t\t},\n *\n * \t\tfunction done(result) {\n * \t\t\tclb(null, result);\n * \t\t}\n * \t);\n */\nexport function sequence(errorHandler: (error: Error) => void, ...sequences: Function[]): void;\nexport function sequence(sequences: Function[]): void;\nexport function sequence(sequences: any): void {\n\tSequence((Array.isArray(sequences)) ? sequences : Array.prototype.slice.call(arguments));\n}"]}