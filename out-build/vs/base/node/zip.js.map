{"version":3,"sources":["vs/base/node/zip.ts"],"names":[],"mappings":"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","file":"vs/base/node/zip.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport nls = require('vs/nls');\nimport * as path from 'path';\nimport { createWriteStream } from 'fs';\nimport { Readable } from 'stream';\nimport { nfcall, ninvoke } from 'vs/base/common/async';\nimport { mkdirp, rimraf } from 'vs/base/node/pfs';\nimport { Promise, TPromise } from 'vs/base/common/winjs.base';\nimport { open as openZip, Entry, ZipFile } from 'yauzl';\n\nexport interface IExtractOptions {\n\toverwrite?: boolean;\n\n\t/**\n\t * Source path within the ZIP archive. Only the files contained in this\n\t * path will be extracted.\n\t */\n\tsourcePath?: string;\n}\n\ninterface IOptions {\n\tsourcePathRegex: RegExp;\n}\n\nfunction modeFromEntry(entry: Entry) {\n\tlet attr = entry.externalFileAttributes >> 16 || 33188;\n\n\treturn [448 /* S_IRWXU */, 56 /* S_IRWXG */, 7 /* S_IRWXO */]\n\t\t.map(mask => attr & mask)\n\t\t.reduce((a, b) => a + b, attr & 61440 /* S_IFMT */);\n}\n\nfunction extractEntry(zipfile: ZipFile, entry: Entry, targetPath: string, options: IOptions): Promise {\n\tconst fileName = entry.fileName.replace(options.sourcePathRegex, '');\n\tconst dirName = path.dirname(fileName);\n\tconst targetDirName = path.join(targetPath, dirName);\n\tconst targetFileName = path.join(targetPath, fileName);\n\tconst mode = modeFromEntry(entry);\n\n\treturn ninvoke(zipfile, zipfile.openReadStream, entry)\n\t\t.then(ostream => mkdirp(targetDirName)\n\t\t\t.then(() => new Promise((c, e) => {\n\t\t\t\tlet istream = createWriteStream(targetFileName, { mode });\n\t\t\t\tistream.once('finish', () => c(null));\n\t\t\t\tistream.once('error', e);\n\t\t\t\tostream.once('error', e);\n\t\t\t\tostream.pipe(istream);\n\t\t\t})));\n}\n\nfunction extractZip(zipfile: ZipFile, targetPath: string, options: IOptions): Promise {\n\treturn new Promise((c, e) => {\n\t\tconst promises: Promise[] = [];\n\n\t\tzipfile.once('error', e);\n\t\tzipfile.on('entry', (entry: Entry) => {\n\t\t\tif (!options.sourcePathRegex.test(entry.fileName)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tpromises.push(extractEntry(zipfile, entry, targetPath, options));\n\t\t});\n\t\tzipfile.once('close', () => Promise.join(promises).done(c, e));\n\t});\n}\n\nexport function extract(zipPath: string, targetPath: string, options: IExtractOptions): Promise {\n\tconst sourcePathRegex = new RegExp(options.sourcePath ? `^${ options.sourcePath }` : '');\n\n\tlet promise = nfcall<ZipFile>(openZip, zipPath);\n\n\tif (options.overwrite) {\n\t\tpromise = promise.then(zipfile => { rimraf(targetPath); return zipfile; });\n\t}\n\n\treturn promise.then(zipfile => extractZip(zipfile, targetPath, { sourcePathRegex }));\n}\n\nfunction read(zipPath: string, filePath: string): TPromise<Readable> {\n\treturn nfcall(openZip, zipPath).then((zipfile: ZipFile) => {\n\t\treturn new TPromise<Readable>((c, e) => {\n\t\t\tzipfile.on('entry', (entry: Entry) => {\n\t\t\t\tif (entry.fileName === filePath) {\n\t\t\t\t\tninvoke<Readable>(zipfile, zipfile.openReadStream, entry).done(stream => c(stream), err => e(err));\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tzipfile.once('close', () => e(new Error(nls.localize('notFound', \"{0} not found inside zip.\", filePath))));\n\t\t});\n\t});\n}\n\nexport function buffer(zipPath: string, filePath: string): TPromise<Buffer> {\n\treturn read(zipPath, filePath).then(stream => {\n\t\treturn new TPromise<Buffer>((c, e) => {\n\t\t\tconst buffers = [];\n\t\t\tstream.once('error', e);\n\t\t\tstream.on('data', b => buffers.push(b));\n\t\t\tstream.on('end', () => c(Buffer.concat(buffers)));\n\t\t});\n\t});\n}\n"]}