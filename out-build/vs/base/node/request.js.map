{"version":3,"file":"vs/base/node/request.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/base/node/request.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport { Promise, TPromise } from 'vs/base/common/winjs.base';\nimport { isBoolean } from 'vs/base/common/types';\nimport https = require('https');\nimport http = require('http');\nimport { parse as parseUrl } from 'url';\nimport { createWriteStream } from 'fs';\nimport { assign } from 'vs/base/common/objects';\n\nexport interface IRequestOptions {\n\ttype?: string;\n\turl?: string;\n\tuser?: string;\n\tpassword?: string;\n\theaders?: any;\n\ttimeout?: number;\n\tdata?: any;\n\tagent?: any;\n\tfollowRedirects?: number;\n\tstrictSSL?: boolean;\n}\n\nexport interface IRequestResult {\n\treq: http.ClientRequest;\n\tres: http.ClientResponse;\n}\n\nexport function request(options: IRequestOptions): TPromise<IRequestResult> {\n\tlet req: http.ClientRequest;\n\n\treturn new TPromise<IRequestResult>((c, e) => {\n\t\tlet endpoint = parseUrl(options.url);\n\n\t\tlet opts: https.RequestOptions = {\n\t\t\thostname: endpoint.hostname,\n\t\t\tport: endpoint.port ? parseInt(endpoint.port) : (endpoint.protocol === 'https:' ? 443 : 80),\n\t\t\tpath: endpoint.path,\n\t\t\tmethod: options.type || 'GET',\n\t\t\theaders: options.headers,\n\t\t\tagent: options.agent,\n\t\t\trejectUnauthorized: isBoolean(options.strictSSL) ? options.strictSSL : true\n\t\t};\n\n\t\tif (options.user && options.password) {\n\t\t\topts.auth = options.user + ':' + options.password;\n\t\t}\n\n\t\tlet protocol = endpoint.protocol === 'https:' ? https : http;\n\t\treq = protocol.request(opts, (res: http.ClientResponse) => {\n\t\t\tif (res.statusCode >= 300 && res.statusCode < 400 && options.followRedirects && options.followRedirects > 0 && res.headers['location']) {\n\t\t\t\tc(<any> request(assign({}, options, {\n\t\t\t\t\turl: res.headers['location'],\n\t\t\t\t\tfollowRedirects: options.followRedirects - 1\n\t\t\t\t})));\n\t\t\t} else {\n\t\t\t\tc({ req, res });\n\t\t\t}\n\t\t});\n\t\treq.on('error', e);\n\n\t\tif (options.timeout) {\n\t\t\treq.setTimeout(options.timeout);\n\t\t}\n\t\tif (options.data) {\n\t\t\treq.write(options.data);\n\t\t}\n\n\t\treq.end();\n\t},\n\t() => req && req.abort());\n}\n\nexport function download(filePath: string, opts: IRequestOptions): TPromise<void> {\n\treturn request(assign(opts, { followRedirects: 3 })).then(pair => new TPromise<void>((c, e) => {\n\t\tlet out = createWriteStream(filePath);\n\n\t\tout.once('finish', () => c(null));\n\t\tpair.res.once('error', e);\n\t\tpair.res.pipe(out);\n\t}));\n}\n\nexport function json<T>(opts: IRequestOptions): TPromise<T> {\n\treturn request(opts).then(pair => new Promise((c, e) => {\n\t\tif (!((pair.res.statusCode >= 200 && pair.res.statusCode < 300) || pair.res.statusCode === 1223)) {\n\t\t\treturn e('Server returned ' + pair.res.statusCode);\n\t\t}\n\n\t\tif (pair.res.statusCode === 204) {\n\t\t\treturn c(null);\n\t\t}\n\n\t\tif (!/application\\/json/.test(pair.res.headers['content-type'])) {\n\t\t\treturn e('Response doesn\\'t appear to be JSON');\n\t\t}\n\n\t\tlet buffer: string[] = [];\n\t\tpair.res.on('data', d => buffer.push(d));\n\t\tpair.res.on('end', () => c(JSON.parse(buffer.join(''))));\n\t\tpair.res.on('error', e);\n\t}));\n}"]}