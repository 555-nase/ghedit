{"version":3,"file":"vs/base/node/service.net.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/base/node/service.net.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport net = require('net');\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport Event, { Emitter } from 'vs/base/common/event';\nimport { Server as IPCServer, Client as IPCClient, IServiceCtor, IServiceMap, IMessagePassingProtocol, IClient } from 'vs/base/common/service';\nimport { TPromise } from 'vs/base/common/winjs.base';\n\nfunction bufferIndexOf(buffer: Buffer, value: number, start = 0) {\n\twhile (start < buffer.length && buffer[start] !== value) {\n\t\tstart++;\n\t}\n\n\treturn start;\n}\n\nclass Protocol implements IMessagePassingProtocol {\n\n\tprivate static Boundary = new Buffer([0]);\n\tprivate buffer: Buffer;\n\n\tconstructor(private socket: net.Socket) {\n\t\tthis.buffer = null;\n\t}\n\n\tpublic send(message: any): void {\n\t\tthis.socket.write(JSON.stringify(message));\n\t\tthis.socket.write(Protocol.Boundary);\n\t}\n\n\tpublic onMessage(callback: (message: any) => void): void {\n\t\tthis.socket.on('data', (data: Buffer) => {\n\t\t\tlet lastIndex = 0;\n\t\t\tlet index = 0;\n\n\t\t\twhile ((index = bufferIndexOf(data, 0, lastIndex)) < data.length) {\n\t\t\t\tconst dataToParse = data.slice(lastIndex, index);\n\n\t\t\t\tif (this.buffer) {\n\t\t\t\t\tcallback(JSON.parse(Buffer.concat([this.buffer, dataToParse]).toString('utf8')));\n\t\t\t\t\tthis.buffer = null;\n\t\t\t\t} else {\n\t\t\t\t\tcallback(JSON.parse(dataToParse.toString('utf8')));\n\t\t\t\t}\n\n\t\t\t\tlastIndex = index + 1;\n\t\t\t}\n\n\t\t\tif (index - lastIndex > 0) {\n\t\t\t\tconst dataToBuffer = data.slice(lastIndex, index);\n\n\t\t\t\tif (this.buffer) {\n\t\t\t\t\tthis.buffer = Buffer.concat([this.buffer, dataToBuffer]);\n\t\t\t\t} else {\n\t\t\t\t\tthis.buffer = dataToBuffer;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n}\n\nexport class Server implements IDisposable {\n\n\tprivate services: IServiceMap;\n\n\tconstructor(private server: net.Server) {\n\t\tthis.services = Object.create(null);\n\n\t\tthis.server.on('connection', (socket: net.Socket) => {\n\t\t\tconst ipcServer = new IPCServer(new Protocol(socket));\n\n\t\t\tObject.keys(this.services)\n\t\t\t\t.forEach(name => ipcServer.registerService(name, this.services[name]));\n\n\t\t\tsocket.once('close', () => ipcServer.dispose());\n\t\t});\n\t}\n\n\tregisterService<TService>(serviceName: string, service: TService) {\n\t\tthis.services[serviceName] = service;\n\t}\n\n\tdispose(): void {\n\t\tthis.services = null;\n\t\tthis.server.close();\n\t\tthis.server = null;\n\t}\n}\n\nexport class Client implements IDisposable, IClient {\n\n\tprivate ipcClient: IPCClient;\n\tprivate _onClose = new Emitter<void>();\n\tget onClose(): Event<void> { return this._onClose.event; }\n\n\tconstructor(private socket: net.Socket) {\n\t\tthis.ipcClient = new IPCClient(new Protocol(socket));\n\t\tsocket.once('close', () => this._onClose.fire());\n\t}\n\n\tgetService<TService>(serviceName: string, serviceCtor: IServiceCtor<TService>): TService {\n\t\treturn this.ipcClient.getService(serviceName, serviceCtor);\n\t}\n\n\tdispose(): void {\n\t\tthis.socket.end();\n\t\tthis.socket = null;\n\t\tthis.ipcClient = null;\n\t}\n}\n\nexport function serve(port: number): TPromise<Server>;\nexport function serve(namedPipe: string): TPromise<Server>;\nexport function serve(hook: any): TPromise<Server> {\n\treturn new TPromise<Server>((c, e) => {\n\t\tconst server = net.createServer();\n\n\t\tserver.on('error', e);\n\t\tserver.listen(hook, () => {\n\t\t\tserver.removeListener('error', e);\n\t\t\tc(new Server(server));\n\t\t});\n\t});\n}\n\nexport function connect(port: number): TPromise<Client>;\nexport function connect(namedPipe: string): TPromise<Client>;\nexport function connect(hook: any): TPromise<Client> {\n\treturn new TPromise<Client>((c, e) => {\n\t\tconst socket = net.createConnection(hook, () => {\n\t\t\tsocket.removeListener('error', e);\n\t\t\tc(new Client(socket));\n\t\t});\n\n\t\tsocket.once('error', e);\n\t});\n}"]}