{"version":3,"file":"vs/base/node/pfs.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/base/node/pfs.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport { Promise, TPromise } from 'vs/base/common/winjs.base';\nimport extfs = require('vs/base/node/extfs');\nimport paths = require('vs/base/common/paths');\nimport { dirname, join } from 'path';\nimport { nfcall } from 'vs/base/common/async';\nimport fs = require('fs');\n\nexport function isRoot(path: string): boolean {\n\treturn path === dirname(path);\n}\n\nexport function readdir(path: string): TPromise<string[]> {\n\treturn nfcall(extfs.readdir, path);\n}\n\nexport function exists(path: string): TPromise<boolean> {\n\treturn new Promise(c => fs.exists(path, c));\n}\n\nexport function chmod(path: string, mode: number): TPromise<boolean> {\n\treturn nfcall(fs.chmod, path, mode);\n}\n\nexport function mkdirp(path: string, mode?: number): TPromise<boolean> {\n\tconst mkdir = () => nfcall(fs.mkdir, path, mode)\n\t\t.then(null, (err: NodeJS.ErrnoException) => {\n\t\t\tif (err.code === 'EEXIST') {\n\t\t\t\treturn nfcall(fs.stat, path)\n\t\t\t\t\t.then((stat: fs.Stats) => stat.isDirectory\n\t\t\t\t\t\t? null\n\t\t\t\t\t\t: Promise.wrapError(new Error(`'${ path }' exists and is not a directory.`)));\n\t\t\t}\n\n\t\t\treturn TPromise.wrapError<boolean>(err);\n\t\t});\n\n\tif (isRoot(path)) {\n\t\treturn TPromise.as(true);\n\t}\n\n\treturn mkdir().then(null, (err: NodeJS.ErrnoException) => {\n\t\tif (err.code === 'ENOENT') {\n\t\t\treturn mkdirp(dirname(path), mode).then(mkdir);\n\t\t}\n\n\t\treturn TPromise.wrapError<boolean>(err);\n\t});\n}\n\nexport function rimraf(path: string): TPromise<void> {\n\treturn stat(path).then(stat => {\n\t\tif (stat.isDirectory()) {\n\t\t\treturn readdir(path)\n\t\t\t\t.then(children => TPromise.join(children.map(child => rimraf(join(path, child)))))\n\t\t\t\t.then(() => rmdir(path));\n\t\t} else {\n\t\t\treturn unlink(path);\n\t\t}\n\t}, (err: NodeJS.ErrnoException) => {\n\t\tif (err.code === 'ENOENT') {\n\t\t\treturn;\n\t\t}\n\n\t\treturn TPromise.wrapError<void>(err);\n\t});\n}\n\nexport function realpath(path: string): TPromise<string> {\n\treturn nfcall(fs.realpath, path, null);\n}\n\nexport function stat(path: string): TPromise<fs.Stats> {\n\treturn nfcall(fs.stat, path);\n}\n\nexport function lstat(path: string): TPromise<fs.Stats> {\n\treturn nfcall(fs.lstat, path);\n}\n\nexport function mstat(paths: string[]): TPromise<{ path: string; stats: fs.Stats; }> {\n\treturn doStatMultiple(paths.slice(0));\n}\n\nexport function rename(oldPath: string, newPath: string): Promise {\n\treturn nfcall(fs.rename, oldPath, newPath);\n}\n\nexport function rmdir(path: string): Promise {\n\treturn nfcall(fs.rmdir, path);\n}\n\nexport function unlink(path: string): Promise {\n\treturn nfcall(fs.unlink, path);\n}\n\nexport function symlink(target: string, path: string, type?: string): TPromise<void> {\n\treturn nfcall<void>(fs.symlink, target, path, type);\n}\n\nexport function readlink(path: string): TPromise<string> {\n\treturn nfcall<string>(fs.readlink, path);\n}\n\nfunction doStatMultiple(paths: string[]): TPromise<{ path: string; stats: fs.Stats; }> {\n\tlet path = paths.shift();\n\treturn stat(path).then((value) => {\n\t\treturn {\n\t\t\tpath: path,\n\t\t\tstats: value\n\t\t};\n\t}, (err) => {\n\t\tif (paths.length === 0) {\n\t\t\treturn err;\n\t\t}\n\t\treturn mstat(paths);\n\t});\n}\n\nexport function readFile(path: string): TPromise<Buffer>;\nexport function readFile(path: string, encoding: string): TPromise<string>;\nexport function readFile(path: string, encoding?: string): TPromise<Buffer | string> {\n\treturn nfcall(fs.readFile, path, encoding);\n}\n\nexport function writeFile(path: string, data: string, encoding?: string): Promise;\nexport function writeFile(path: string, data: NodeBuffer, encoding?: string): Promise;\nexport function writeFile(path: string, data: any, encoding: string = 'utf8'): Promise {\n\treturn nfcall(fs.writeFile, path, data, encoding);\n}\n\n/**\n* Read a dir and return only subfolders\n*/\nexport function readDirsInDir(dirPath: string): TPromise<string[]> {\n\treturn readdir(dirPath).then((children) => {\n\t\treturn TPromise.join(\n\t\t\tchildren.map((child) => dirExistsWithResult(paths.join(dirPath, child), child))\n\t\t).then((subdirs) => {\n\t\t\treturn removeNull(subdirs);\n\t\t});\n\t});\n}\n\nfunction dirExistsWithResult<T>(path: string, successResult: T): TPromise<T> {\n\treturn dirExists(path).then((exists) => {\n\t\treturn exists ? successResult : null;\n\t});\n}\n\n/**\n* `path` exists and is a directory\n*/\nexport function dirExists(path: string): TPromise<boolean> {\n\treturn stat(path).then(stat => stat.isDirectory(), () => false);\n}\n\n/**\n* `path` exists and is a file.\n*/\nexport function fileExists(path: string): TPromise<boolean> {\n\treturn stat(path).then(stat => stat.isFile(), () => false);\n}\n\n/**\n* Read dir at `path` and return only files matching `pattern`\n*/\nexport function readFiles(path: string, pattern: RegExp): TPromise<string[]> {\n\treturn readdir(path).then((children) => {\n\t\tchildren = children.filter((child) => {\n\t\t\treturn pattern.test(child);\n\t\t});\n\t\tlet fileChildren = children.map((child) => {\n\t\t\treturn fileExistsWithResult(paths.join(path, child), child);\n\t\t});\n\t\treturn TPromise.join(fileChildren).then((subdirs) => {\n\t\t\treturn removeNull(subdirs);\n\t\t});\n\t});\n}\n\nexport function fileExistsWithResult<T>(path: string, successResult: T): TPromise<T> {\n\treturn fileExists(path).then((exists) => {\n\t\treturn exists ? successResult : null;\n\t}, (err) => {\n\t\treturn TPromise.wrapError(err);\n\t});\n}\n\n\nfunction removeNull<T>(arr: T[]): T[] {\n\treturn arr.filter(item => (item !== null));\n}"]}