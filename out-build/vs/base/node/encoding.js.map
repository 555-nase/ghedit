{"version":3,"file":"encoding.js","sourceRoot":"","sources":["../../../../src/vs/base/node/encoding.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport stream = require('vs/base/node/stream');\nimport iconv = require('iconv-lite');\n\nexport const UTF8 = 'utf8';\nexport const UTF8_with_bom = 'utf8bom';\nexport const UTF16be = 'utf16be';\nexport const UTF16le = 'utf16le';\n\nexport function decode(buffer: NodeBuffer, encoding: string, options?: any): string {\n\treturn iconv.decode(buffer, toNodeEncoding(encoding), options);\n}\n\nexport function encode(content: string, encoding: string, options?: any): NodeBuffer {\n\treturn iconv.encode(content, toNodeEncoding(encoding), options);\n}\n\nexport function encodingExists(encoding: string): boolean {\n\treturn iconv.encodingExists(toNodeEncoding(encoding));\n}\n\nexport function decodeStream(encoding: string): NodeJS.ReadWriteStream {\n\treturn iconv.decodeStream(toNodeEncoding(encoding));\n}\n\nexport function encodeStream(encoding: string): NodeJS.ReadWriteStream {\n\treturn iconv.encodeStream(toNodeEncoding(encoding));\n}\n\nfunction toNodeEncoding(enc: string): string {\n\tif (enc === UTF8_with_bom) {\n\t\treturn UTF8; // iconv does not distinguish UTF 8 with or without BOM, so we need to help it\n\t}\n\n\treturn enc;\n}\n\nexport function detectEncodingByBOMFromBuffer(buffer: NodeBuffer, bytesRead: number): string {\n\tif (!buffer || bytesRead < 2) {\n\t\treturn null;\n\t}\n\n\tlet b0 = buffer.readUInt8(0);\n\tlet b1 = buffer.readUInt8(1);\n\n\t// UTF-16 BE\n\tif (b0 === 0xFE && b1 === 0xFF) {\n\t\treturn UTF16be;\n\t}\n\n\t// UTF-16 LE\n\tif (b0 === 0xFF && b1 === 0xFE) {\n\t\treturn UTF16le;\n\t}\n\n\tif (bytesRead < 3) {\n\t\treturn null;\n\t}\n\n\tlet b2 = buffer.readUInt8(2);\n\n\t// UTF-8\n\tif (b0 === 0xEF && b1 === 0xBB && b2 === 0xBF) {\n\t\treturn UTF8;\n\t}\n\n\treturn null;\n}\n\n/**\n * Detects the Byte Order Mark in a given file.\n * If no BOM is detected, `encoding` will be null.\n */\nexport function detectEncodingByBOM(file: string, callback: (error: Error, encoding: string) => void): void {\n\tstream.readExactlyByFile(file, 3, (err: Error, buffer: NodeBuffer, bytesRead: number) => {\n\t\tif (err) {\n\t\t\treturn callback(err, null);\n\t\t}\n\n\t\treturn callback(null, detectEncodingByBOMFromBuffer(buffer, bytesRead));\n\t});\n}"]}