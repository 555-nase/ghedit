{"version":3,"file":"vs/base/node/env.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/base/node/env.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport platform = require('vs/base/common/platform');\nimport { TPromise } from 'vs/base/common/winjs.base';\nimport cp = require('child_process');\n\nexport interface IEnv {\n\t[key: string]: string;\n}\n\nexport function getUserEnvironment(): TPromise<IEnv> {\n\tif (platform.isWindows) {\n\t\treturn TPromise.as({});\n\t}\n\n\treturn new TPromise((c, e) => {\n\t\tlet child = cp.spawn(process.env.SHELL, ['-ilc', 'env'], {\n\t\t\tdetached: true,\n\t\t\tstdio: ['ignore', 'pipe', process.stderr],\n\t\t});\n\n\t\tchild.stdout.setEncoding('utf8');\n\t\tchild.on('error', () => c({}));\n\n\t\tlet buffer = '';\n\t\tchild.stdout.on('data', (d: string) => { buffer += d; });\n\n\t\tchild.on('close', (code: number, signal: any) => {\n\t\t\tif (code !== 0) {\n\t\t\t\treturn c({});\n\t\t\t}\n\n\t\t\tc(parseEnvOutput(buffer));\n\t\t});\n\t});\n}\n\n/**\n * Parse output from `env`, attempting to retain any multiple-line variables.\n */\nexport function parseEnvOutput(output): IEnv {\n\tlet result: IEnv = Object.create(null);\n\tlet vars = output.split('\\n');\n\n\t// Rejoin lines to the preceeding line if it doesn't look like the line is a new variable\n\tlet current = 0;\n\tfor (let i = 1; i < vars.length; i++) {\n\t\tif (vars[i].match(/^[\\w_][\\w\\d_]*=/) === null) {\n\t\t\tvars[current] += `\\n${vars[i]}`;\n\t\t} else {\n\t\t\tvars[++current] = vars[i];\n\t\t}\n\t}\n\n\t// Trim any remaining vars that had been moved\n\tvars.length = current + 1;\n\n\t// Turn the array into a map\n\tvars.forEach(line => {\n\t\tlet pos = line.indexOf('=');\n\t\tif (pos > 0) {\n\t\t\tlet key = line.substring(0, pos);\n\t\t\tlet value = line.substring(pos + 1);\n\n\t\t\tif (!key || typeof result[key] === 'string') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tresult[key] = value;\n\t\t}\n\t});\n\n\treturn result;\n}\n"]}