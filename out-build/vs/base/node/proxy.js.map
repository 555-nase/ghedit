{"version":3,"file":"vs/base/node/proxy.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/base/node/proxy.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;IAEhG,YAAY,CAAC;IAOb,2BAA2B,UAAe;QACzC,EAAE,CAAC,CAAC,UAAU,CAAC,QAAQ,KAAK,OAAO,CAAC,CAAC,CAAC;YACrC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,UAAU,IAAI,OAAO,CAAC,GAAG,CAAC,UAAU,IAAI,IAAI,CAAC;QACjE,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,UAAU,CAAC,QAAQ,KAAK,QAAQ,CAAC,CAAC,CAAC;YAC7C,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,WAAW,IAAI,OAAO,CAAC,GAAG,CAAC,WAAW,IAAI,OAAO,CAAC,GAAG,CAAC,UAAU,IAAI,OAAO,CAAC,GAAG,CAAC,UAAU,IAAI,IAAI,CAAC;QACvH,CAAC;QAED,MAAM,CAAC,IAAI,CAAC;IACb,CAAC;IAOD,uBAA8B,aAAqB,EAAE,OAAsB;QAAtB,uBAAsB,GAAtB,YAAsB;QAC1E,IAAM,UAAU,GAAG,WAAQ,CAAC,aAAa,CAAC,CAAC;QAC3C,IAAM,QAAQ,GAAG,OAAO,CAAC,QAAQ,IAAI,iBAAiB,CAAC,UAAU,CAAC,CAAC;QAEnE,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACf,MAAM,CAAC,IAAI,CAAC;QACb,CAAC;QAED,IAAM,aAAa,GAAG,WAAQ,CAAC,QAAQ,CAAC,CAAC;QAEzC,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;YAC/C,MAAM,CAAC,IAAI,CAAC;QACb,CAAC;QAED,IAAM,IAAI,GAAG;YACZ,IAAI,EAAE,aAAa,CAAC,QAAQ;YAC5B,IAAI,EAAE,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC;YAChC,IAAI,EAAE,aAAa,CAAC,IAAI;YACxB,kBAAkB,EAAE,iBAAS,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,OAAO,CAAC,SAAS,GAAG,IAAI;SAC3E,CAAC;QAEF,MAAM,CAAC,UAAU,CAAC,QAAQ,KAAK,OAAO,GAAG,IAAI,cAAc,CAAC,IAAI,CAAC,GAAG,IAAI,eAAe,CAAC,IAAI,CAAC,CAAC;IAC/F,CAAC;IAtBe,qBAAa,gBAsB5B,CAAA","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport { Url, parse as parseUrl } from 'url';\nimport { isBoolean } from 'vs/base/common/types';\nimport HttpProxyAgent = require('http-proxy-agent');\nimport HttpsProxyAgent = require('https-proxy-agent');\n\nfunction getSystemProxyURI(requestURL: Url): string {\n\tif (requestURL.protocol === 'http:') {\n\t\treturn process.env.HTTP_PROXY || process.env.http_proxy || null;\n\t} else if (requestURL.protocol === 'https:') {\n\t\treturn process.env.HTTPS_PROXY || process.env.https_proxy || process.env.HTTP_PROXY || process.env.http_proxy || null;\n\t}\n\n\treturn null;\n}\n\nexport interface IOptions {\n\tproxyUrl?: string;\n\tstrictSSL?: boolean;\n}\n\nexport function getProxyAgent(rawRequestURL: string, options: IOptions = {}): any {\n\tconst requestURL = parseUrl(rawRequestURL);\n\tconst proxyURL = options.proxyUrl || getSystemProxyURI(requestURL);\n\n\tif (!proxyURL) {\n\t\treturn null;\n\t}\n\n\tconst proxyEndpoint = parseUrl(proxyURL);\n\n\tif (!/^https?:$/.test(proxyEndpoint.protocol)) {\n\t\treturn null;\n\t}\n\n\tconst opts = {\n\t\thost: proxyEndpoint.hostname,\n\t\tport: Number(proxyEndpoint.port),\n\t\tauth: proxyEndpoint.auth,\n\t\trejectUnauthorized: isBoolean(options.strictSSL) ? options.strictSSL : true\n\t};\n\n\treturn requestURL.protocol === 'http:' ? new HttpProxyAgent(opts) : new HttpsProxyAgent(opts);\n}"]}