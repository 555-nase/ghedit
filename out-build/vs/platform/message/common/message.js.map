{"version":3,"sources":["vs/platform/message/common/message.ts"],"names":[],"mappings":";IAAA;;;oGAGgG;IAChG,YAAY,CAAC;IAsBA,mBAAW,GAAG,IAAI,gBAAM,CAAC,eAAe,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAO,EAAE,IAAO,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,cAAM,OAAA,qBAAQ,CAAC,EAAE,CAAC,IAAI,CAAC,EAAjB,CAAiB,CAAC,CAAC;IAC/G,oBAAY,GAAG,IAAI,gBAAM,CAAC,eAAe,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAQ,EAAE,IAAQ,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,cAAM,OAAA,qBAAQ,CAAC,EAAE,CAAC,IAAI,CAAC,EAAjB,CAAiB,CAAC,CAAC;IAElH,uBAAe,GAAG,+BAAe,CAAkB,gBAAgB,CAAC,CAAC;IA+BpE,gBAAQ,GAAG,kBAAQ,CAAC","file":"vs/platform/message/common/message.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport nls = require('vs/nls');\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport {IDisposable} from 'vs/base/common/lifecycle';\nimport Severity from 'vs/base/common/severity';\nimport {createDecorator, ServiceIdentifier} from 'vs/platform/instantiation/common/instantiation';\nimport {Action} from 'vs/base/common/actions';\n\nexport interface IMessageWithAction {\n\tmessage: string;\n\tactions: Action[];\n}\n\nexport interface IConfirmation {\n\ttitle?: string;\n\tmessage: string;\n\tdetail?: string;\n\tprimaryButton?: string;\n\tsecondaryButton?: string;\n}\n\nexport const CloseAction = new Action('close.message', nls.localize('close', \"Close\"), null, true, () => TPromise.as(true));\nexport const CancelAction = new Action('close.message', nls.localize('cancel', \"Cancel\"), null, true, () => TPromise.as(true));\n\nexport const IMessageService = createDecorator<IMessageService>('messageService');\n\nexport interface IMessageService {\n\tserviceId: ServiceIdentifier<any>;\n\n\t/**\n\t * Tells the service to show a message with a given severity\n\t * the returned function can be used to hide the message again\n\t */\n\tshow(sev: Severity, message: string): () => void;\n\tshow(sev: Severity, message: Error): () => void;\n\tshow(sev: Severity, message: string[]): () => void;\n\tshow(sev: Severity, message: Error[]): () => void;\n\tshow(sev: Severity, message: IMessageWithAction): () => void;\n\n\t/**\n\t * Prints something to the status bar area with optional auto dispose and delay.\n\t */\n\tsetStatusMessage(message: string, autoDisposeAfter?: number, delayBy?: number): IDisposable;\n\n\t/**\n\t * Hide any messages showing currently.\n\t */\n\thideAll(): void;\n\n\t/**\n\t * Ask the user for confirmation.\n\t */\n\tconfirm(confirmation: IConfirmation): boolean;\n}\n\nexport import Severity = Severity;"]}