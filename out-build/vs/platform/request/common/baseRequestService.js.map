{"version":3,"file":"vs/platform/request/common/baseRequestService.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/platform/request/common/baseRequestService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport URI from 'vs/base/common/uri';\nimport {TPromise, xhr, IXHROptions} from 'vs/base/common/winjs.base';\nimport strings = require('vs/base/common/strings');\nimport Timer = require('vs/base/common/timer');\nimport Async = require('vs/base/common/async');\nimport http = require('vs/base/common/http');\nimport objects = require('vs/base/common/objects');\nimport {IRequestService} from 'vs/platform/request/common/request';\nimport {ITelemetryService, NullTelemetryService} from 'vs/platform/telemetry/common/telemetry';\nimport {IWorkspaceContextService} from 'vs/platform/workspace/common/workspace';\n\n/**\n * Simple IRequestService implementation to allow sharing of this service implementation\n * between different layers of the platform.\n */\nexport class BaseRequestService implements IRequestService {\n\tpublic serviceId = IRequestService;\n\tprivate _serviceMap: { [service: string]: string; };\n\tprivate _origin: string;\n\n\tprotected _telemetryService: ITelemetryService;\n\n\tconstructor(contextService: IWorkspaceContextService, telemetryService: ITelemetryService = NullTelemetryService) {\n\t\tlet workspaceUri: string = null;\n\n\t\tlet workspace = contextService.getWorkspace();\n\t\tthis._serviceMap = (<any>workspace) || Object.create(null);\n\t\tthis._telemetryService = telemetryService;\n\n\t\tif (workspace) {\n\t\t\tworkspaceUri = strings.rtrim(workspace.resource.toString(), '/') + '/';\n\t\t}\n\n\t\tthis.computeOrigin(workspaceUri);\n\t}\n\n\tprivate computeOrigin(workspaceUri: string): void {\n\t\tif (workspaceUri) {\n\n\t\t\t// Find root server URL from configuration\n\t\t\tthis._origin = workspaceUri;\n\t\t\tlet urlPath = URI.parse(this._origin).path;\n\t\t\tif (urlPath && urlPath.length > 0) {\n\t\t\t\tthis._origin = this._origin.substring(0, this._origin.length - urlPath.length + 1);\n\t\t\t}\n\n\t\t\tif (!strings.endsWith(this._origin, '/')) {\n\t\t\t\tthis._origin += '/';\n\t\t\t}\n\t\t} else {\n\t\t\tthis._origin = '/'; // Configuration not provided, fallback to default\n\t\t}\n\t}\n\n\tprotected makeCrossOriginRequest(options: http.IXHROptions): TPromise<http.IXHRResponse> {\n\t\treturn null;\n\t}\n\n\tpublic makeRequest(options: http.IXHROptions): TPromise<http.IXHRResponse> {\n\t\tlet timer: Timer.ITimerEvent = Timer.nullEvent;\n\n\t\tlet isXhrRequestCORS = false;\n\n\t\tlet url = options.url;\n\t\tif (!url) {\n\t\t\tthrow new Error('IRequestService.makeRequest: Url is required');\n\t\t}\n\n\t\tif ((strings.startsWith(url, 'http://') || strings.startsWith(url, 'https://')) && this._origin && !strings.startsWith(url, this._origin)) {\n\t\t\tlet coPromise = this.makeCrossOriginRequest(options);\n\t\t\tif (coPromise) {\n\t\t\t\treturn coPromise;\n\t\t\t}\n\t\t\tisXhrRequestCORS = true;\n\t\t}\n\n\t\tlet xhrOptions = <IXHROptions>options;\n\n\t\tlet xhrOptionsPromise = TPromise.as(undefined);\n\t\tif (!isXhrRequestCORS) {\n\t\t\txhrOptions = this._telemetryService.getTelemetryInfo().then(info => {\n\t\t\t\tlet additionalHeaders = {};\n\t\t\t\tadditionalHeaders['X-TelemetrySession'] = info.sessionId;\n\t\t\t\tadditionalHeaders['X-Requested-With'] = 'XMLHttpRequest';\n\t\t\t\txhrOptions.headers = objects.mixin(xhrOptions.headers, additionalHeaders);\n\t\t\t});\n\t\t}\n\n\t\tif (options.timeout) {\n\t\t\txhrOptions.customRequestInitializer = function(xhrRequest: XMLHttpRequest) {\n\t\t\t\txhrRequest.timeout = options.timeout;\n\t\t\t};\n\t\t}\n\n\t\treturn xhrOptionsPromise.then(() => {\n\t\t\treturn Async.always(xhr(xhrOptions), ((xhr: XMLHttpRequest) => {\n\t\t\t\tif (timer.data) {\n\t\t\t\t\ttimer.data.status = xhr.status;\n\t\t\t\t}\n\t\t\t\ttimer.stop();\n\t\t\t}));\n\t\t});\n\t}\n}\n"]}