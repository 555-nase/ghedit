{"version":3,"file":"vs/platform/test/common/nullThreadService.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/platform/test/common/nullThreadService.ts"],"names":[],"mappings":";;;;;;IAAA;;;oGAGgG;IAChG,YAAY,CAAC;IAQb;QAAuC,qCAA2C;QAGjF;YACC,kBAAM,IAAI,CAAC,CAAC;YAHN,cAAS,GAAG,uBAAc,CAAC;YAIjC,IAAI,CAAC,uBAAuB,CAAC,oBAAoB,CAAC,0BAA0B,CAAC;gBAC5E,aAAa,EAAE,IAAI;aACnB,CAAC,CAAC,CAAC;QACL,CAAC;QAES,6CAAiB,GAA3B,UAA4B,MAAa;YACxC,MAAM,CAAC,gBAAK,CAAC,iBAAiB,YAAC,MAAM,CAAC,CAAC;QACxC,CAAC;QAED,qCAAS,GAAT,UAAU,GAAgC,EAAE,UAAkB,EAAE,MAAgB,EAAE,MAAa,EAAE,QAAwB;YACxH,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;QAChC,CAAC;QAED,sCAAU,GAAV,UAAW,GAAgC,EAAE,UAAkB,EAAE,MAAgB,EAAE,MAAa;YAC/F,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;QAChC,CAAC;QAED,6CAAiB,GAAjB,UAAkB,QAAsC;YACvD,gBAAgB;QACjB,CAAC;QAED,gDAAoB,GAApB,UAAqB,QAAsC;YAC1D,gBAAgB;QACjB,CAAC;QAES,mEAAuC,GAAjD,UAAqD,EAAU,EAAE,UAA8B;YAC9F,MAAM,CAAC,IAAI,CAAC,yBAAyB,CAAC,EAAE,EAAE,UAAU,CAAC,CAAC;QACvD,CAAC;QAES,qDAAyB,GAAnC,UAAuC,EAAU,EAAE,KAAQ;YAC1D,IAAI,CAAC,sBAAsB,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;QACxC,CAAC;QAES,+DAAmC,GAA7C,UAAiD,EAAU,EAAE,UAA8B;YAC1F,MAAM,CAAC,IAAI,CAAC,yBAAyB,CAAC,EAAE,EAAE,UAAU,CAAC,CAAC;QACvD,CAAC;QAES,iDAAqB,GAA/B,UAAmC,EAAU,EAAE,KAAQ;YACtD,MAAM,IAAI,KAAK,CAAC,wCAAwC,CAAC,CAAC;QAC3D,CAAC;QAES,8DAAkC,GAA5C,UAAgD,EAAU,EAAE,UAA8B,EAAE,WAA2B;YACtH,MAAM,CAAC,IAAI,CAAC,yBAAyB,CAAC;gBACrC,YAAY,EAAE,UAAC,OAAe,EAAE,IAAY,EAAE,IAAW;oBACxD,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;gBAChC,CAAC;aACD,EAAE,EAAE,EAAE,UAAU,CAAC,CAAC;QACpB,CAAC;QAES,gDAAoB,GAA9B,UAAkC,EAAU,EAAE,KAAQ;YACrD,MAAM,IAAI,KAAK,CAAC,wCAAwC,CAAC,CAAC;QAC3D,CAAC;QACF,wBAAC;IAAD,CAAC,AAzDD,CAAuC,qBAAqB,CAAC,qBAAqB,GAyDjF;IAzDY,yBAAiB,oBAyD7B,CAAA;IAEY,2BAAmB,GAAG,IAAI,iBAAiB,EAAE,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport winjs = require('vs/base/common/winjs.base');\nimport abstractThreadService = require('vs/platform/thread/common/abstractThreadService');\nimport instantiationService = require('vs/platform/instantiation/common/instantiationService');\nimport {SyncDescriptor0} from 'vs/platform/instantiation/common/descriptors';\nimport {IThreadService, IThreadServiceStatusListener, IThreadSynchronizableObject, ThreadAffinity} from 'vs/platform/thread/common/thread';\n\nexport class NullThreadService extends abstractThreadService.AbstractThreadService implements IThreadService {\n\tpublic serviceId = IThreadService;\n\n\tconstructor() {\n\t\tsuper(true);\n\t\tthis.setInstantiationService(instantiationService.createInstantiationService({\n\t\t\tthreadService: this\n\t\t}));\n\t}\n\n\tprotected _doCreateInstance(params: any[]): any {\n\t\treturn super._doCreateInstance(params);\n\t}\n\n\tOneWorker(obj: IThreadSynchronizableObject, methodName: string, target: Function, params: any[], affinity: ThreadAffinity): winjs.Promise {\n\t\treturn winjs.TPromise.as(null);\n\t}\n\n\tAllWorkers(obj: IThreadSynchronizableObject, methodName: string, target: Function, params: any[]): winjs.Promise {\n\t\treturn winjs.TPromise.as(null);\n\t}\n\n\taddStatusListener(listener: IThreadServiceStatusListener): void {\n\t\t// Nothing to do\n\t}\n\n\tremoveStatusListener(listener: IThreadServiceStatusListener): void {\n\t\t// Nothing to do\n\t}\n\n\tprotected _registerAndInstantiateMainProcessActor<T>(id: string, descriptor: SyncDescriptor0<T>): T {\n\t\treturn this._getOrCreateLocalInstance(id, descriptor);\n\t}\n\n\tprotected _registerMainProcessActor<T>(id: string, actor: T): void {\n\t\tthis._registerLocalInstance(id, actor);\n\t}\n\n\tprotected _registerAndInstantiateExtHostActor<T>(id: string, descriptor: SyncDescriptor0<T>): T {\n\t\treturn this._getOrCreateLocalInstance(id, descriptor);\n\t}\n\n\tprotected _registerExtHostActor<T>(id: string, actor: T): void {\n\t\tthrow new Error('Not supported in this runtime context!');\n\t}\n\n\tprotected _registerAndInstantiateWorkerActor<T>(id: string, descriptor: SyncDescriptor0<T>, whichWorker: ThreadAffinity): T {\n\t\treturn this._getOrCreateProxyInstance({\n\t\t\tcallOnRemote: (proxyId: string, path: string, args: any[]): winjs.Promise => {\n\t\t\t\treturn winjs.TPromise.as(null);\n\t\t\t}\n\t\t}, id, descriptor);\n\t}\n\n\tprotected _registerWorkerActor<T>(id: string, actor: T): void {\n\t\tthrow new Error('Not supported in this runtime context!');\n\t}\n}\n\nexport const NULL_THREAD_SERVICE = new NullThreadService();"]}