{"version":3,"file":"storage.js","sourceRoot":"","sources":["../../../../../src/vs/platform/storage/common/storage.ts"],"names":[],"mappings":";;;;;;IAAA;;;oGAGgG;IAChG,YAAY,CAAC;IAMA,UAAE,GAAG,gBAAgB,CAAC;IAEtB,uBAAe,GAAG,+BAAe,CAAkB,UAAE,CAAC,CAAC;IAuDpE,IAAiB,gBAAgB,CAMhC;IAND,WAAiB,gBAAgB,EAAC,CAAC;QAElC;;WAEG;QACU,wBAAO,GAAG,SAAS,CAAC;IAClC,CAAC,EANgB,gBAAgB,GAAhB,wBAAgB,KAAhB,wBAAgB,QAMhC;IAED;;OAEG;IACH;QAAkC,gCAAmB;QAEpD,sBAAY,GAAW,EAAE,MAAW,EAAE,KAAU,EAAE,aAAmB;YACpE,kBAAM,GAAG,EAAE,MAAM,EAAE,KAAK,EAAE,aAAa,CAAC,CAAC;QAC1C,CAAC;QAED;;WAEG;QACI,8BAAO,GAAd;YAEC,uGAAuG;YACvG,gHAAgH;YAChH,MAAM,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC;QAC5B,CAAC;QACF,mBAAC;IAAD,CAAC,AAfD,CAAkC,4BAAmB,GAepD;IAfY,oBAAY,eAexB,CAAA;IAED,WAAY,YAAY;QAEvB;;WAEG;QACH,mDAAM,CAAA;QAEN;;WAEG;QACH,yDAAS,CAAA;IACV,CAAC,EAXW,oBAAY,KAAZ,oBAAY,QAWvB;IAXD,IAAY,YAAY,GAAZ,oBAWX,CAAA","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {PropertyChangeEvent} from 'vs/base/common/events';\nimport {IEventEmitter} from 'vs/base/common/eventEmitter';\nimport {createDecorator, ServiceIdentifier} from 'vs/platform/instantiation/common/instantiation';\n\nexport const ID = 'storageService';\n\nexport const IStorageService = createDecorator<IStorageService>(ID);\n\nexport interface IStorageService extends IEventEmitter {\n\tserviceId: ServiceIdentifier<any>;\n\n\t/**\n\t * Store a string value under the given key to local storage.\n\t *\n\t * The optional scope argument allows to define the scope of the operation.\n\t */\n\tstore(key: string, value: any, scope?: StorageScope): void;\n\n\t/**\n\t * Swap the value of a stored element to one of the two provided\n\t * values and use the defaultValue if no element with the given key\n\t * exists.\n\t *\n\t * The optional scope argument allows to define the scope of the operation.\n\t */\n\tswap(key: string, valueA: any, valueB: any, scope?: StorageScope, defaultValue?: any): void;\n\n\t/**\n\t * Delete an element stored under the provided key from local storage.\n\t *\n\t * The optional scope argument allows to define the scope of the operation.\n\t */\n\tremove(key: string, scope?: StorageScope): void;\n\n\t/**\n\t * Retrieve an element stored with the given key from local storage. Use\n\t * the provided defaultValue if the element is null or undefined.\n\t *\n\t * The optional scope argument allows to define the scope of the operation.\n\t */\n\tget(key: string, scope?: StorageScope, defaultValue?: string): string;\n\n\t/**\n\t * Retrieve an element stored with the given key from local storage. Use\n\t * the provided defaultValue if the element is null or undefined. The element\n\t * will be converted to a number using parseInt with a base of 10.\n\t *\n\t * The optional scope argument allows to define the scope of the operation.\n\t */\n\tgetInteger(key: string, scope?: StorageScope, defaultValue?: number): number;\n\n\t/**\n\t * Retrieve an element stored with the given key from local storage. Use\n\t * the provided defaultValue if the element is null or undefined. The element\n\t * will be converted to a boolean.\n\t *\n\t * The optional scope argument allows to define the scope of the operation.\n\t */\n\tgetBoolean(key: string, scope?: StorageScope, defaultValue?: boolean): boolean;\n}\n\nexport namespace StorageEventType {\n\n\t/**\n\t * Event type for when a storage value is changed.\n\t */\n\texport const STORAGE = 'storage';\n}\n\n/**\n * Storage events are being emitted when user settings change which are persisted to local storage.\n */\nexport class StorageEvent extends PropertyChangeEvent {\n\n\tconstructor(key: string, before: any, after: any, originalEvent?: any) {\n\t\tsuper(key, before, after, originalEvent);\n\t}\n\n\t/**\n\t * Returns true if the storage change has occurred from this browser window and false if its coming from a different window.\n\t */\n\tpublic isLocal(): boolean {\n\n\t\t// By the spec a storage event is only ever emitted if it occurs from a different browser tab or window\n\t\t// so we can use the check for originalEvent being set or not as a way to find out if the event is local or not.\n\t\treturn !this.originalEvent;\n\t}\n}\n\nexport enum StorageScope {\n\n\t/**\n\t * The stored data will be scoped to all workspaces of this domain.\n\t */\n\tGLOBAL,\n\n\t/**\n\t * The stored data will be scoped to the current workspace.\n\t */\n\tWORKSPACE\n}"]}