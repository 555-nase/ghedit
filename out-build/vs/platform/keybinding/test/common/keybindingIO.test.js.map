{"version":3,"file":"vs/platform/keybinding/test/common/keybindingIO.test.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/platform/keybinding/test/common/keybindingIO.test.ts"],"names":[],"mappings":";IAAA;;;oGAGgG;IAChG,YAAY,CAAC;IAMb,KAAK,CAAC,eAAe,EAAE;QAEtB,IAAI,CAAC,uBAAuB,EAAE;YAC7B,IAAM,OAAO,GAAG,EAAE,WAAW,EAAE,KAAK,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;YACxD,IAAM,SAAS,GAAG,EAAE,WAAW,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC;YAC1D,IAAM,KAAK,GAAG,EAAE,WAAW,EAAE,KAAK,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC;YAEvD,8BAA8B,UAAkB,EAAE,QAAgB,EAAE,GAAW,EAAE,QAA6B;gBAC7G,IAAI,gBAAgB,GAAG,8BAAS,CAAC,eAAe,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;gBACvE,MAAM,CAAC,KAAK,CAAC,gBAAgB,EAAE,QAAQ,EAAE,QAAQ,GAAG,KAAK,GAAG,GAAG,CAAC,CAAC;YAClE,CAAC;YACD,2BAA2B,UAAkB,EAAE,WAAmB,EAAE,WAAmB,EAAE,aAAqB;gBAC7G,oBAAoB,CAAC,UAAU,EAAE,WAAW,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;gBAC9D,oBAAoB,CAAC,UAAU,EAAE,WAAW,EAAE,KAAK,EAAE,SAAS,CAAC,CAAC;gBAChE,oBAAoB,CAAC,UAAU,EAAE,aAAa,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;YACjE,CAAC;YAED,gCAAgC,UAAkB,EAAE,QAAgB,EAAE,GAAW,EAAE,QAA6B;gBAC/G,IAAI,kBAAkB,GAAG,8BAAS,CAAC,cAAc,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;gBACxE,MAAM,CAAC,KAAK,CAAC,kBAAkB,EAAE,QAAQ,EAAE,UAAU,GAAG,KAAK,GAAG,GAAG,CAAC,CAAC;YACtE,CAAC;YACD,6BAA6B,KAAa,EAAE,KAAa,EAAE,OAAe,EAAE,QAAgB;gBAC3F,sBAAsB,CAAC,KAAK,EAAE,QAAQ,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;gBACxD,sBAAsB,CAAC,KAAK,EAAE,QAAQ,EAAE,KAAK,EAAE,SAAS,CAAC,CAAC;gBAC1D,sBAAsB,CAAC,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;YAC3D,CAAC;YAED,uBAAuB,UAAkB,EAAE,WAAmB,EAAE,WAAmB,EAAE,aAAqB;gBACzG,iBAAiB,CAAC,UAAU,EAAE,WAAW,EAAE,WAAW,EAAE,aAAa,CAAC,CAAC;gBACvE,mBAAmB,CAAC,WAAW,EAAE,WAAW,EAAE,aAAa,EAAE,UAAU,CAAC,CAAC;YAC1E,CAAC;YAED,aAAa,CAAC,kBAAO,CAAC,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;YAC5C,aAAa,CAAC,kBAAO,CAAC,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;YAC5C,aAAa,CAAC,kBAAO,CAAC,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;YACjD,aAAa,CAAC,kBAAO,CAAC,UAAU,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;YAC7D,aAAa,CAAC,kBAAO,CAAC,SAAS,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;YACzD,aAAa,CAAC,kBAAO,CAAC,SAAS,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;YAEzD,eAAe;YACf,aAAa,CAAC,iBAAM,CAAC,GAAG,GAAG,kBAAO,CAAC,KAAK,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;YACrE,aAAa,CAAC,iBAAM,CAAC,OAAO,GAAG,kBAAO,CAAC,KAAK,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;YAC3E,aAAa,CAAC,iBAAM,CAAC,KAAK,GAAG,kBAAO,CAAC,KAAK,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;YAC7E,aAAa,CAAC,iBAAM,CAAC,OAAO,GAAG,kBAAO,CAAC,KAAK,EAAE,OAAO,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;YAE3E,gBAAgB;YAChB,aAAa,CAAC,iBAAM,CAAC,OAAO,GAAG,iBAAM,CAAC,GAAG,GAAG,kBAAO,CAAC,KAAK,EAAE,YAAY,EAAE,WAAW,EAAE,YAAY,CAAC,CAAC;YACpG,aAAa,CAAC,iBAAM,CAAC,OAAO,GAAG,iBAAM,CAAC,KAAK,GAAG,kBAAO,CAAC,KAAK,EAAE,cAAc,EAAE,aAAa,EAAE,cAAc,CAAC,CAAC;YAC5G,aAAa,CAAC,iBAAM,CAAC,OAAO,GAAG,iBAAM,CAAC,OAAO,GAAG,kBAAO,CAAC,KAAK,EAAE,YAAY,EAAE,YAAY,EAAE,aAAa,CAAC,CAAC;YAC1G,aAAa,CAAC,iBAAM,CAAC,KAAK,GAAG,iBAAM,CAAC,GAAG,GAAG,kBAAO,CAAC,KAAK,EAAE,aAAa,EAAE,aAAa,EAAE,aAAa,CAAC,CAAC;YACtG,aAAa,CAAC,iBAAM,CAAC,KAAK,GAAG,iBAAM,CAAC,OAAO,GAAG,kBAAO,CAAC,KAAK,EAAE,aAAa,EAAE,cAAc,EAAE,cAAc,CAAC,CAAC;YAC5G,aAAa,CAAC,iBAAM,CAAC,GAAG,GAAG,iBAAM,CAAC,OAAO,GAAG,kBAAO,CAAC,KAAK,EAAE,WAAW,EAAE,YAAY,EAAE,YAAY,CAAC,CAAC;YAEpG,kBAAkB;YAClB,aAAa,CAAC,iBAAM,CAAC,OAAO,GAAG,iBAAM,CAAC,KAAK,GAAG,iBAAM,CAAC,GAAG,GAAG,kBAAO,CAAC,KAAK,EAAE,kBAAkB,EAAE,iBAAiB,EAAE,kBAAkB,CAAC,CAAC;YACrI,aAAa,CAAC,iBAAM,CAAC,OAAO,GAAG,iBAAM,CAAC,KAAK,GAAG,iBAAM,CAAC,OAAO,GAAG,kBAAO,CAAC,KAAK,EAAE,kBAAkB,EAAE,kBAAkB,EAAE,mBAAmB,CAAC,CAAC;YAC3I,aAAa,CAAC,iBAAM,CAAC,KAAK,GAAG,iBAAM,CAAC,GAAG,GAAG,iBAAM,CAAC,OAAO,GAAG,kBAAO,CAAC,KAAK,EAAE,iBAAiB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,CAAC;YAErI,gBAAgB;YAChB,aAAa,CAAC,iBAAM,CAAC,OAAO,GAAG,iBAAM,CAAC,KAAK,GAAG,iBAAM,CAAC,GAAG,GAAG,iBAAM,CAAC,OAAO,GAAG,kBAAO,CAAC,KAAK,EAAE,sBAAsB,EAAE,sBAAsB,EAAE,uBAAuB,CAAC,CAAC;YAEpK,SAAS;YACT,aAAa,CAAC,iBAAM,CAAC,KAAK,CAAC,iBAAM,CAAC,OAAO,GAAG,kBAAO,CAAC,KAAK,EAAE,iBAAM,CAAC,OAAO,GAAG,kBAAO,CAAC,KAAK,CAAC,EAAE,eAAe,EAAE,aAAa,EAAE,eAAe,CAAC,CAAC;YAC7I,aAAa,CAAC,iBAAM,CAAC,KAAK,CAAC,iBAAM,CAAC,OAAO,GAAG,kBAAO,CAAC,OAAO,EAAE,iBAAM,CAAC,OAAO,GAAG,kBAAO,CAAC,OAAO,CAAC,EAAE,iBAAiB,EAAE,eAAe,EAAE,iBAAiB,CAAC,CAAC;YAEvJ,WAAW;YACX,aAAa,CAAC,kBAAO,CAAC,YAAY,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;YACnD,aAAa,CAAC,kBAAO,CAAC,QAAQ,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;YAC/C,aAAa,CAAC,kBAAO,CAAC,QAAQ,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;YAC/C,aAAa,CAAC,kBAAO,CAAC,QAAQ,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;YAC/C,aAAa,CAAC,kBAAO,CAAC,MAAM,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;YAC7C,aAAa,CAAC,kBAAO,CAAC,QAAQ,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;YAC/C,aAAa,CAAC,kBAAO,CAAC,WAAW,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;YAClD,aAAa,CAAC,kBAAO,CAAC,sBAAsB,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;YAC7D,aAAa,CAAC,kBAAO,CAAC,YAAY,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;YACtD,aAAa,CAAC,kBAAO,CAAC,uBAAuB,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;YAC9D,aAAa,CAAC,kBAAO,CAAC,QAAQ,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;YAClD,aAAa,CAAC,kBAAO,CAAC,KAAK,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;YACxD,aAAa,CAAC,kBAAO,CAAC,OAAO,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;YAEhE,cAAc;YACd,mBAAmB,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,kBAAO,CAAC,YAAY,CAAC,CAAC;YACrE,mBAAmB,CAAC,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,kBAAO,CAAC,QAAQ,CAAC,CAAC;YAC1E,mBAAmB,CAAC,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,kBAAO,CAAC,QAAQ,CAAC,CAAC;YAC7E,mBAAmB,CAAC,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,kBAAO,CAAC,QAAQ,CAAC,CAAC;YAC7E,mBAAmB,CAAC,YAAY,EAAE,YAAY,EAAE,YAAY,EAAE,kBAAO,CAAC,MAAM,CAAC,CAAC;YAC9E,mBAAmB,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,kBAAO,CAAC,QAAQ,CAAC,CAAC;YACjE,mBAAmB,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,kBAAO,CAAC,WAAW,CAAC,CAAC;YACpE,mBAAmB,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,kBAAO,CAAC,sBAAsB,CAAC,CAAC;YAC/E,mBAAmB,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,kBAAO,CAAC,YAAY,CAAC,CAAC;YACrE,mBAAmB,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,kBAAO,CAAC,uBAAuB,CAAC,CAAC;YAChF,mBAAmB,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,kBAAO,CAAC,QAAQ,CAAC,CAAC;YACjE,mBAAmB,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,kBAAO,CAAC,KAAK,CAAC,CAAC;YAC9D,mBAAmB,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,kBAAO,CAAC,OAAO,CAAC,CAAC;YAEtE,2BAA2B;YAC3B,mBAAmB,CAAC,sBAAsB,EAAE,sBAAsB,EAAE,uBAAuB,EAAE,iBAAM,CAAC,OAAO,GAAG,iBAAM,CAAC,KAAK,GAAG,iBAAM,CAAC,GAAG,GAAG,iBAAM,CAAC,OAAO,GAAG,kBAAO,CAAC,KAAK,CAAC,CAAC;YAE1K,yBAAyB;YACzB,mBAAmB,CAAC,wBAAwB,EAAE,wBAAwB,EAAE,yBAAyB,EAAE,iBAAM,CAAC,OAAO,GAAG,iBAAM,CAAC,KAAK,GAAG,iBAAM,CAAC,GAAG,GAAG,iBAAM,CAAC,OAAO,GAAG,kBAAO,CAAC,KAAK,CAAC,CAAC;QACjL,CAAC,CAAC,CAAC;IAEJ,CAAC,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport * as assert from 'assert';\nimport {ISimplifiedPlatform, KeyCode, KeyMod} from 'vs/base/common/keyCodes';\nimport {IOSupport} from 'vs/platform/keybinding/common/keybindingResolver';\n\nsuite('Keybinding IO', () => {\n\n\ttest('serialize/deserialize', function() {\n\t\tconst WINDOWS = { isMacintosh: false, isWindows: true };\n\t\tconst MACINTOSH = { isMacintosh: true, isWindows: false };\n\t\tconst LINUX = { isMacintosh: false, isWindows: false };\n\n\t\tfunction testOneSerialization(keybinding: number, expected: string, msg: string, Platform: ISimplifiedPlatform): void {\n\t\t\tlet actualSerialized = IOSupport.writeKeybinding(keybinding, Platform);\n\t\t\tassert.equal(actualSerialized, expected, expected + ' - ' + msg);\n\t\t}\n\t\tfunction testSerialization(keybinding: number, expectedWin: string, expectedMac: string, expectedLinux: string): void {\n\t\t\ttestOneSerialization(keybinding, expectedWin, 'win', WINDOWS);\n\t\t\ttestOneSerialization(keybinding, expectedMac, 'mac', MACINTOSH);\n\t\t\ttestOneSerialization(keybinding, expectedLinux, 'linux', LINUX);\n\t\t}\n\n\t\tfunction testOneDeserialization(keybinding: string, expected: number, msg: string, Platform: ISimplifiedPlatform): void {\n\t\t\tlet actualDeserialized = IOSupport.readKeybinding(keybinding, Platform);\n\t\t\tassert.equal(actualDeserialized, expected, keybinding + ' - ' + msg);\n\t\t}\n\t\tfunction testDeserialization(inWin: string, inMac: string, inLinux: string, expected: number): void {\n\t\t\ttestOneDeserialization(inWin, expected, 'win', WINDOWS);\n\t\t\ttestOneDeserialization(inMac, expected, 'mac', MACINTOSH);\n\t\t\ttestOneDeserialization(inLinux, expected, 'linux', LINUX);\n\t\t}\n\n\t\tfunction testRoundtrip(keybinding: number, expectedWin: string, expectedMac: string, expectedLinux: string): void {\n\t\t\ttestSerialization(keybinding, expectedWin, expectedMac, expectedLinux);\n\t\t\ttestDeserialization(expectedWin, expectedMac, expectedLinux, keybinding);\n\t\t}\n\n\t\ttestRoundtrip(KeyCode.KEY_0, '0', '0', '0');\n\t\ttestRoundtrip(KeyCode.KEY_A, 'a', 'a', 'a');\n\t\ttestRoundtrip(KeyCode.UpArrow, 'up', 'up', 'up');\n\t\ttestRoundtrip(KeyCode.RightArrow, 'right', 'right', 'right');\n\t\ttestRoundtrip(KeyCode.DownArrow, 'down', 'down', 'down');\n\t\ttestRoundtrip(KeyCode.LeftArrow, 'left', 'left', 'left');\n\n\t\t// one modifier\n\t\ttestRoundtrip(KeyMod.Alt | KeyCode.KEY_A, 'alt+a', 'alt+a', 'alt+a');\n\t\ttestRoundtrip(KeyMod.CtrlCmd | KeyCode.KEY_A, 'ctrl+a', 'cmd+a', 'ctrl+a');\n\t\ttestRoundtrip(KeyMod.Shift | KeyCode.KEY_A, 'shift+a', 'shift+a', 'shift+a');\n\t\ttestRoundtrip(KeyMod.WinCtrl | KeyCode.KEY_A, 'win+a', 'ctrl+a', 'meta+a');\n\n\t\t// two modifiers\n\t\ttestRoundtrip(KeyMod.CtrlCmd | KeyMod.Alt | KeyCode.KEY_A, 'ctrl+alt+a', 'alt+cmd+a', 'ctrl+alt+a');\n\t\ttestRoundtrip(KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KEY_A, 'ctrl+shift+a', 'shift+cmd+a', 'ctrl+shift+a');\n\t\ttestRoundtrip(KeyMod.CtrlCmd | KeyMod.WinCtrl | KeyCode.KEY_A, 'ctrl+win+a', 'ctrl+cmd+a', 'ctrl+meta+a');\n\t\ttestRoundtrip(KeyMod.Shift | KeyMod.Alt | KeyCode.KEY_A, 'shift+alt+a', 'shift+alt+a', 'shift+alt+a');\n\t\ttestRoundtrip(KeyMod.Shift | KeyMod.WinCtrl | KeyCode.KEY_A, 'shift+win+a', 'ctrl+shift+a', 'shift+meta+a');\n\t\ttestRoundtrip(KeyMod.Alt | KeyMod.WinCtrl | KeyCode.KEY_A, 'alt+win+a', 'ctrl+alt+a', 'alt+meta+a');\n\n\t\t// three modifiers\n\t\ttestRoundtrip(KeyMod.CtrlCmd | KeyMod.Shift | KeyMod.Alt | KeyCode.KEY_A, 'ctrl+shift+alt+a', 'shift+alt+cmd+a', 'ctrl+shift+alt+a');\n\t\ttestRoundtrip(KeyMod.CtrlCmd | KeyMod.Shift | KeyMod.WinCtrl | KeyCode.KEY_A, 'ctrl+shift+win+a', 'ctrl+shift+cmd+a', 'ctrl+shift+meta+a');\n\t\ttestRoundtrip(KeyMod.Shift | KeyMod.Alt | KeyMod.WinCtrl | KeyCode.KEY_A, 'shift+alt+win+a', 'ctrl+shift+alt+a', 'shift+alt+meta+a');\n\n\t\t// all modifiers\n\t\ttestRoundtrip(KeyMod.CtrlCmd | KeyMod.Shift | KeyMod.Alt | KeyMod.WinCtrl | KeyCode.KEY_A, 'ctrl+shift+alt+win+a', 'ctrl+shift+alt+cmd+a', 'ctrl+shift+alt+meta+a');\n\n\t\t// chords\n\t\ttestRoundtrip(KeyMod.chord(KeyMod.CtrlCmd | KeyCode.KEY_A, KeyMod.CtrlCmd | KeyCode.KEY_A), 'ctrl+a ctrl+a', 'cmd+a cmd+a', 'ctrl+a ctrl+a');\n\t\ttestRoundtrip(KeyMod.chord(KeyMod.CtrlCmd | KeyCode.UpArrow, KeyMod.CtrlCmd | KeyCode.UpArrow), 'ctrl+up ctrl+up', 'cmd+up cmd+up', 'ctrl+up ctrl+up');\n\n\t\t// OEM keys\n\t\ttestRoundtrip(KeyCode.US_SEMICOLON, ';', ';', ';');\n\t\ttestRoundtrip(KeyCode.US_EQUAL, '=', '=', '=');\n\t\ttestRoundtrip(KeyCode.US_COMMA, ',', ',', ',');\n\t\ttestRoundtrip(KeyCode.US_MINUS, '-', '-', '-');\n\t\ttestRoundtrip(KeyCode.US_DOT, '.', '.', '.');\n\t\ttestRoundtrip(KeyCode.US_SLASH, '/', '/', '/');\n\t\ttestRoundtrip(KeyCode.US_BACKTICK, '`', '`', '`');\n\t\ttestRoundtrip(KeyCode.US_OPEN_SQUARE_BRACKET, '[', '[', '[');\n\t\ttestRoundtrip(KeyCode.US_BACKSLASH, '\\\\', '\\\\', '\\\\');\n\t\ttestRoundtrip(KeyCode.US_CLOSE_SQUARE_BRACKET, ']', ']', ']');\n\t\ttestRoundtrip(KeyCode.US_QUOTE, '\\'', '\\'', '\\'');\n\t\ttestRoundtrip(KeyCode.OEM_8, 'oem_8', 'oem_8', 'oem_8');\n\t\ttestRoundtrip(KeyCode.OEM_102, 'oem_102', 'oem_102', 'oem_102');\n\n\t\t// OEM aliases\n\t\ttestDeserialization('OEM_1', 'OEM_1', 'OEM_1', KeyCode.US_SEMICOLON);\n\t\ttestDeserialization('OEM_PLUS', 'OEM_PLUS', 'OEM_PLUS', KeyCode.US_EQUAL);\n\t\ttestDeserialization('OEM_COMMA', 'OEM_COMMA', 'OEM_COMMA', KeyCode.US_COMMA);\n\t\ttestDeserialization('OEM_MINUS', 'OEM_MINUS', 'OEM_MINUS', KeyCode.US_MINUS);\n\t\ttestDeserialization('OEM_PERIOD', 'OEM_PERIOD', 'OEM_PERIOD', KeyCode.US_DOT);\n\t\ttestDeserialization('OEM_2', 'OEM_2', 'OEM_2', KeyCode.US_SLASH);\n\t\ttestDeserialization('OEM_3', 'OEM_3', 'OEM_3', KeyCode.US_BACKTICK);\n\t\ttestDeserialization('OEM_4', 'OEM_4', 'OEM_4', KeyCode.US_OPEN_SQUARE_BRACKET);\n\t\ttestDeserialization('OEM_5', 'OEM_5', 'OEM_5', KeyCode.US_BACKSLASH);\n\t\ttestDeserialization('OEM_6', 'OEM_6', 'OEM_6', KeyCode.US_CLOSE_SQUARE_BRACKET);\n\t\ttestDeserialization('OEM_7', 'OEM_7', 'OEM_7', KeyCode.US_QUOTE);\n\t\ttestDeserialization('OEM_8', 'OEM_8', 'OEM_8', KeyCode.OEM_8);\n\t\ttestDeserialization('OEM_102', 'OEM_102', 'OEM_102', KeyCode.OEM_102);\n\n\t\t// accepts '-' as separator\n\t\ttestDeserialization('ctrl-shift-alt-win-a', 'ctrl-shift-alt-cmd-a', 'ctrl-shift-alt-meta-a', KeyMod.CtrlCmd | KeyMod.Shift | KeyMod.Alt | KeyMod.WinCtrl | KeyCode.KEY_A);\n\n\t\t// various input mistakes\n\t\ttestDeserialization(' ctrl-shift-alt-win-A ', ' shift-alt-cmd-Ctrl-A ', ' ctrl-shift-alt-META-A ', KeyMod.CtrlCmd | KeyMod.Shift | KeyMod.Alt | KeyMod.WinCtrl | KeyCode.KEY_A);\n\t});\n\n});"]}