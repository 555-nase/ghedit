{"version":3,"file":"vs/platform/keybinding/test/common/keybindingService.test.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/platform/keybinding/test/common/keybindingService.test.ts"],"names":[],"mappings":";IAAA;;;oGAGgG;IAChG,YAAY,CAAC;IAOb,KAAK,CAAC,oBAAoB,EAAE;QAE3B,IAAI,CAAC,aAAa,EAAE;YACnB,IAAI,UAAU,GAAG,iBAAM,CAAC,OAAO,GAAG,iBAAM,CAAC,KAAK,GAAG,kBAAO,CAAC,KAAK,CAAC;YAC/D,IAAI,YAAY,GAAG,0BAAM,CAAC,MAAM,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;YAC/C,IAAI,cAAc,GAAoB;gBACrC,OAAO,EAAE,KAAK;gBACd,OAAO,EAAE,YAAY;gBACrB,UAAU,EAAE,UAAU;gBACtB,OAAO,EAAE,CAAC;gBACV,OAAO,EAAE,CAAC;aACV,CAAC;YAEF,MAAM,CAAC,KAAK,CAAC,uCAAkB,CAAC,mBAAmB,CAAC,EAAE,GAAG,EAAE,KAAK,EAAE,EAAE,YAAY,CAAC,EAAE,IAAI,CAAC,CAAC;YACzF,MAAM,CAAC,KAAK,CAAC,uCAAkB,CAAC,mBAAmB,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE,YAAY,CAAC,EAAE,KAAK,CAAC,CAAC;YAEzF,IAAI,QAAQ,GAAG,IAAI,uCAAkB,CAAC,CAAC,cAAc,CAAC,EAAE,EAAE,CAAC,CAAC;YAC5D,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,GAAG,EAAE,KAAK,EAAE,EAAE,CAAC,EAAE,UAAU,CAAC,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;YAC/E,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE,CAAC,EAAE,UAAU,CAAC,EAAE,IAAI,CAAC,CAAC;QACpE,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,eAAe,EAAE;YACrB,IAAI,UAAU,GAAG,0BAAM,CAAC,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;YAC7C,IAAI,cAAc,GAAG,0BAAM,CAAC,SAAS,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;YACrD,IAAI,WAAW,GAAG,0BAAM,CAAC,MAAM,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;YAC/C,IAAI,aAAa,GAAG,0BAAM,CAAC,SAAS,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;YAEnD,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,SAAS,EAAE,CAAC,MAAM,CAAC,0BAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAC7D,MAAM,CAAC,EAAE,CAAC,cAAc,CAAC,SAAS,EAAE,CAAC,MAAM,CAAC,0BAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YACjE,MAAM,CAAC,EAAE,CAAC,WAAW,CAAC,SAAS,EAAE,CAAC,MAAM,CAAC,0BAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAC9D,MAAM,CAAC,EAAE,CAAC,aAAa,CAAC,SAAS,EAAE,CAAC,MAAM,CAAC,0BAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QACjE,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,2BAA2B,EAAE;YACjC,IAAI,gBAAgB,GAAG,UAAC,CAAW,EAAE,CAAW;gBAC/C,MAAM,CAAC,KAAK,CAAC,uCAAkB,CAAC,yBAAyB,CAAC,KAAK,EAAE,IAAI,mCAAe,CAAC,CAAC,CAAC,EAAE,IAAI,mCAAe,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;YACzH,CAAC,CAAC;YACF,IAAI,mBAAmB,GAAG,UAAC,CAAW,EAAE,CAAW;gBAClD,MAAM,CAAC,KAAK,CAAC,uCAAkB,CAAC,yBAAyB,CAAC,KAAK,EAAE,IAAI,mCAAe,CAAC,CAAC,CAAC,EAAE,IAAI,mCAAe,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;YAC1H,CAAC,CAAC;YACF,IAAI,UAAU,GAAG,0BAAM,CAAC,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;YAC7C,IAAI,cAAc,GAAG,0BAAM,CAAC,SAAS,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;YACrD,IAAI,WAAW,GAAG,0BAAM,CAAC,MAAM,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;YAC/C,IAAI,aAAa,GAAG,0BAAM,CAAC,SAAS,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;YACnD,IAAI,UAAU,GAAG,0BAAM,CAAC,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;YAC7C,IAAI,cAAc,GAAG,0BAAM,CAAC,SAAS,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;YACrD,IAAI,UAAU,GAAG,0BAAM,CAAC,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;YAC7C,IAAI,UAAU,GAAG,0BAAM,CAAC,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;YAE7C,gBAAgB,CAAC,CAAC,UAAU,CAAC,EAAE,IAAI,CAAC,CAAC;YACrC,gBAAgB,CAAC,CAAC,UAAU,CAAC,EAAE,EAAE,CAAC,CAAC;YACnC,gBAAgB,CAAC,CAAC,UAAU,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC;YAC7C,gBAAgB,CAAC,CAAC,UAAU,CAAC,EAAE,CAAC,cAAc,CAAC,CAAC,CAAC;YAEjD,gBAAgB,CAAC,CAAC,WAAW,CAAC,EAAE,EAAE,CAAC,CAAC;YACpC,gBAAgB,CAAC,CAAC,WAAW,CAAC,EAAE,CAAC,WAAW,CAAC,CAAC,CAAC;YAC/C,gBAAgB,CAAC,CAAC,WAAW,CAAC,EAAE,CAAC,aAAa,CAAC,CAAC,CAAC;YAEjD,gBAAgB,CAAC,CAAC,cAAc,CAAC,EAAE,EAAE,CAAC,CAAC;YACvC,gBAAgB,CAAC,CAAC,cAAc,CAAC,EAAE,CAAC,cAAc,CAAC,CAAC,CAAC;YACrD,gBAAgB,CAAC,CAAC,cAAc,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC;YAEjD,gBAAgB,CAAC,CAAC,UAAU,EAAE,cAAc,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC;YAC7D,gBAAgB,CAAC,CAAC,UAAU,EAAE,cAAc,CAAC,EAAE,CAAC,cAAc,CAAC,CAAC,CAAC;YACjE,gBAAgB,CAAC,CAAC,UAAU,EAAE,cAAc,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC;YAC7D,gBAAgB,CAAC,CAAC,UAAU,EAAE,cAAc,CAAC,EAAE,CAAC,cAAc,CAAC,CAAC,CAAC;YACjE,gBAAgB,CAAC,CAAC,UAAU,EAAE,cAAc,CAAC,EAAE,EAAE,CAAC,CAAC;YAEnD,mBAAmB,CAAC,CAAC,UAAU,CAAC,EAAE,CAAC,WAAW,CAAC,CAAC,CAAC;YACjD,mBAAmB,CAAC,CAAC,UAAU,CAAC,EAAE,CAAC,aAAa,CAAC,CAAC,CAAC;YACnD,mBAAmB,CAAC,CAAC,cAAc,CAAC,EAAE,CAAC,WAAW,CAAC,CAAC,CAAC;YACrD,mBAAmB,CAAC,CAAC,cAAc,CAAC,EAAE,CAAC,aAAa,CAAC,CAAC,CAAC;YAEvD,mBAAmB,CAAC,CAAC,WAAW,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC;YACjD,mBAAmB,CAAC,CAAC,WAAW,CAAC,EAAE,CAAC,cAAc,CAAC,CAAC,CAAC;YACrD,mBAAmB,CAAC,CAAC,aAAa,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC;YACnD,mBAAmB,CAAC,CAAC,aAAa,CAAC,EAAE,CAAC,cAAc,CAAC,CAAC,CAAC;YAEvD,mBAAmB,CAAC,CAAC,UAAU,EAAE,cAAc,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC;YAChE,mBAAmB,CAAC,CAAC,UAAU,EAAE,cAAc,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC;YAChE,mBAAmB,CAAC,CAAC,UAAU,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC;YAChD,mBAAmB,CAAC,EAAE,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC;YACtC,mBAAmB,CAAC,IAAI,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC;QACzC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,iBAAiB,EAAE;YAEvB,IAAI,KAAK,GAAsB;gBAC9B,qFAAqF;gBACrF;oBACC,UAAU,EAAE,kBAAO,CAAC,KAAK;oBACzB,OAAO,EAAE,0BAAM,CAAC,GAAG,CAClB,0BAAM,CAAC,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,EAC3B,0BAAM,CAAC,SAAS,CAAC,MAAM,EAAE,KAAK,CAAC,CAC/B;oBACD,OAAO,EAAE,OAAO;oBAChB,OAAO,EAAE,CAAC;oBACV,OAAO,EAAE,CAAC;iBACV;gBACD,mCAAmC;gBACnC;oBACC,UAAU,EAAE,kBAAO,CAAC,KAAK;oBACzB,OAAO,EAAE,0BAAM,CAAC,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC;oBACpC,OAAO,EAAE,QAAQ;oBACjB,OAAO,EAAE,CAAC;oBACV,OAAO,EAAE,CAAC;iBACV;gBACD,+CAA+C;gBAC/C;oBACC,UAAU,EAAE,kBAAO,CAAC,KAAK;oBACzB,OAAO,EAAE,IAAI;oBACb,OAAO,EAAE,QAAQ;oBACjB,OAAO,EAAE,GAAG;oBACZ,OAAO,EAAE,CAAC;iBACV;gBACD,sCAAsC;gBACtC;oBACC,UAAU,EAAE,kBAAO,CAAC,KAAK;oBACzB,OAAO,EAAE,0BAAM,CAAC,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC;oBACpC,OAAO,EAAE,OAAO;oBAChB,OAAO,EAAE,CAAC;oBACV,OAAO,EAAE,CAAC;iBACV;gBACD,gDAAgD;gBAChD;oBACC,UAAU,EAAE,iBAAM,CAAC,OAAO,GAAG,kBAAO,CAAC,KAAK;oBAC1C,OAAO,EAAE,0BAAM,CAAC,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC;oBACpC,OAAO,EAAE,QAAQ;oBACjB,OAAO,EAAE,CAAC;oBACV,OAAO,EAAE,CAAC;iBACV;gBACD,oDAAoD;gBACpD;oBACC,UAAU,EAAE,iBAAM,CAAC,KAAK,CAAC,iBAAM,CAAC,OAAO,GAAG,kBAAO,CAAC,KAAK,EAAE,kBAAO,CAAC,KAAK,CAAC;oBACvE,OAAO,EAAE,IAAI;oBACb,OAAO,EAAE,OAAO;oBAChB,OAAO,EAAE,CAAC;oBACV,OAAO,EAAE,CAAC;iBACV;gBACD,6BAA6B;gBAC7B;oBACC,UAAU,EAAE,CAAC;oBACb,OAAO,EAAE,IAAI;oBACb,OAAO,EAAE,OAAO;oBAChB,OAAO,EAAE,CAAC;oBACV,OAAO,EAAE,CAAC;iBACV;gBACD;oBACC,UAAU,EAAE,iBAAM,CAAC,KAAK,CAAC,iBAAM,CAAC,OAAO,GAAG,kBAAO,CAAC,KAAK,EAAE,iBAAM,CAAC,OAAO,GAAG,kBAAO,CAAC,KAAK,CAAC;oBACxF,OAAO,EAAE,IAAI;oBACb,OAAO,EAAE,SAAS;oBAClB,OAAO,EAAE,GAAG;oBACZ,OAAO,EAAE,CAAC;iBACV;gBACD;oBACC,UAAU,EAAE,iBAAM,CAAC,KAAK,CAAC,iBAAM,CAAC,OAAO,GAAG,kBAAO,CAAC,KAAK,EAAE,iBAAM,CAAC,OAAO,GAAG,kBAAO,CAAC,KAAK,CAAC;oBACxF,OAAO,EAAE,IAAI;oBACb,OAAO,EAAE,SAAS;oBAClB,OAAO,EAAE,GAAG;oBACZ,OAAO,EAAE,CAAC;iBACV;gBACD;oBACC,UAAU,EAAE,iBAAM,CAAC,KAAK,CAAC,iBAAM,CAAC,OAAO,GAAG,kBAAO,CAAC,KAAK,EAAE,iBAAM,CAAC,OAAO,GAAG,kBAAO,CAAC,KAAK,CAAC;oBACxF,OAAO,EAAE,IAAI;oBACb,OAAO,EAAE,iBAAiB;oBAC1B,OAAO,EAAE,CAAC;oBACV,OAAO,EAAE,CAAC;iBACV;gBACD;oBACC,UAAU,EAAE,iBAAM,CAAC,KAAK,CAAC,iBAAM,CAAC,OAAO,GAAG,kBAAO,CAAC,KAAK,EAAE,iBAAM,CAAC,OAAO,GAAG,kBAAO,CAAC,KAAK,CAAC;oBACxF,OAAO,EAAE,IAAI;oBACb,OAAO,EAAE,eAAe;oBACxB,OAAO,EAAE,CAAC;oBACV,OAAO,EAAE,CAAC;iBACV;gBACD;oBACC,UAAU,EAAE,iBAAM,CAAC,KAAK,CAAC,iBAAM,CAAC,OAAO,GAAG,kBAAO,CAAC,KAAK,EAAE,iBAAM,CAAC,OAAO,GAAG,kBAAO,CAAC,KAAK,CAAC;oBACxF,OAAO,EAAE,IAAI;oBACb,OAAO,EAAE,kBAAkB;oBAC3B,OAAO,EAAE,EAAE;oBACX,OAAO,EAAE,CAAC;iBACV;gBACD;oBACC,UAAU,EAAE,iBAAM,CAAC,OAAO,GAAG,kBAAO,CAAC,KAAK;oBAC1C,OAAO,EAAE,IAAI;oBACb,OAAO,EAAE,QAAQ;oBACjB,OAAO,EAAE,EAAE;oBACX,OAAO,EAAE,CAAC;iBACV;aACD,CAAC;YAEF,IAAI,QAAQ,GAAG,IAAI,uCAAkB,CAAC,KAAK,EAAE,EAAE,EAAE,KAAK,CAAC,CAAC;YAIxD,IAAI,OAAO,GAAG,UAAC,SAAiB,EAAE,YAAsB;gBACvD,cAAc;gBACd,IAAI,YAAY,GAAG,QAAQ,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC;gBACxD,MAAM,CAAC,KAAK,CAAC,YAAY,CAAC,MAAM,EAAE,YAAY,CAAC,MAAM,EAAE,8BAA8B,GAAG,SAAS,GAAG,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,YAAY,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;gBAC1J,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,YAAY,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC;oBACzD,MAAM,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;gBACtD,CAAC;YACF,CAAC,CAAC;YAEF,IAAI,WAAW,GAAG,UAAC,GAAQ,EAAE,WAAmB,EAAE,SAAiB;gBAElE,EAAE,CAAC,CAAC,4BAAiB,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;oBAC7C,IAAI,SAAS,GAAG,4BAAiB,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC;oBAChE,IAAI,SAAS,GAAG,4BAAiB,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC;oBAEhE,IAAI,MAAM,GAAG,QAAQ,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,EAAE,SAAS,CAAC,CAAC;oBACjD,MAAM,CAAC,EAAE,CAAC,MAAM,KAAK,IAAI,EAAE,mBAAmB,GAAG,SAAS,CAAC,CAAC;oBAC5D,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,SAAS,EAAE,IAAI,EAAE,mBAAmB,GAAG,SAAS,CAAC,CAAC;oBACtE,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,UAAU,EAAE,SAAS,EAAE,mBAAmB,GAAG,SAAS,CAAC,CAAC;oBAE5E,MAAM,GAAG,QAAQ,CAAC,OAAO,CAAC,GAAG,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;oBACrD,MAAM,CAAC,EAAE,CAAC,MAAM,KAAK,IAAI,EAAE,mBAAmB,GAAG,SAAS,CAAC,CAAC;oBAC5D,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,SAAS,EAAE,SAAS,EAAE,wBAAwB,GAAG,SAAS,CAAC,CAAC;oBAChF,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC,EAAE,wBAAwB,GAAG,SAAS,CAAC,CAAC;gBAC1E,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACP,IAAI,MAAM,GAAG,QAAQ,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,EAAE,WAAW,CAAC,CAAC;oBACnD,MAAM,CAAC,EAAE,CAAC,MAAM,KAAK,IAAI,EAAE,gBAAgB,GAAG,SAAS,CAAC,CAAC;oBACzD,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,SAAS,EAAE,SAAS,EAAE,gBAAgB,GAAG,SAAS,CAAC,CAAC;oBACxE,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC,EAAE,gBAAgB,GAAG,SAAS,CAAC,CAAC;gBAClE,CAAC;YACF,CAAC,CAAC;YAEF,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YAErB,OAAO,CAAC,QAAQ,EAAE,CAAC,kBAAO,CAAC,KAAK,EAAE,kBAAO,CAAC,KAAK,CAAC,CAAC,CAAC;YAClD,WAAW,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,kBAAO,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;YACrD,WAAW,CAAC,EAAE,EAAE,kBAAO,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;YAEzC,OAAO,CAAC,OAAO,EAAE,CAAC,kBAAO,CAAC,KAAK,CAAC,CAAC,CAAC;YAClC,WAAW,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,kBAAO,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;YAEpD,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;YAEtB,OAAO,CAAC,OAAO,EAAE,CAAC,iBAAM,CAAC,KAAK,CAAC,iBAAM,CAAC,OAAO,GAAG,kBAAO,CAAC,KAAK,EAAE,kBAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YAChF,WAAW,CAAC,EAAE,EAAE,iBAAM,CAAC,KAAK,CAAC,iBAAM,CAAC,OAAO,GAAG,kBAAO,CAAC,KAAK,EAAE,kBAAO,CAAC,KAAK,CAAC,EAAE,OAAO,CAAC,CAAC;YAEtF,OAAO,CAAC,SAAS,EAAE,CAAC,iBAAM,CAAC,KAAK,CAAC,iBAAM,CAAC,OAAO,GAAG,kBAAO,CAAC,KAAK,EAAE,iBAAM,CAAC,OAAO,GAAG,kBAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACnG,WAAW,CAAC,EAAE,EAAE,iBAAM,CAAC,KAAK,CAAC,iBAAM,CAAC,OAAO,GAAG,kBAAO,CAAC,KAAK,EAAE,iBAAM,CAAC,OAAO,GAAG,kBAAO,CAAC,KAAK,CAAC,EAAE,SAAS,CAAC,CAAC;YAEzG,OAAO,CAAC,iBAAiB,EAAE,CAAC,iBAAM,CAAC,KAAK,CAAC,iBAAM,CAAC,OAAO,GAAG,kBAAO,CAAC,KAAK,EAAE,iBAAM,CAAC,OAAO,GAAG,kBAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YAC3G,WAAW,CAAC,EAAE,EAAE,iBAAM,CAAC,KAAK,CAAC,iBAAM,CAAC,OAAO,GAAG,kBAAO,CAAC,KAAK,EAAE,iBAAM,CAAC,OAAO,GAAG,kBAAO,CAAC,KAAK,CAAC,EAAE,iBAAiB,CAAC,CAAC;YAEjH,OAAO,CAAC,eAAe,EAAE,CAAC,iBAAM,CAAC,KAAK,CAAC,iBAAM,CAAC,OAAO,GAAG,kBAAO,CAAC,KAAK,EAAE,iBAAM,CAAC,OAAO,GAAG,kBAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACzG,WAAW,CAAC,EAAE,EAAE,iBAAM,CAAC,KAAK,CAAC,iBAAM,CAAC,OAAO,GAAG,kBAAO,CAAC,KAAK,EAAE,iBAAM,CAAC,OAAO,GAAG,kBAAO,CAAC,KAAK,CAAC,EAAE,eAAe,CAAC,CAAC;YAE/G,OAAO,CAAC,kBAAkB,EAAE,EAAE,CAAC,CAAC;YAEhC,OAAO,CAAC,QAAQ,EAAE,CAAC,iBAAM,CAAC,OAAO,GAAG,kBAAO,CAAC,KAAK,CAAC,CAAC,CAAC;YACpD,WAAW,CAAC,EAAE,EAAE,iBAAM,CAAC,OAAO,GAAG,kBAAO,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;YAE1D,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;QACtB,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,qBAAqB,EAAE;YAC3B,kCAAkC;YAClC,IAAI,OAAO,GAAG;gBACb,GAAG,EAAE,IAAI;gBACT,GAAG,EAAE,KAAK;gBACV,GAAG,EAAE,GAAG;aACR,CAAC;YACF,wBAAwB,IAAY,EAAE,QAAiB;gBACtD,IAAI,KAAK,GAAG,8BAAS,CAAC,sBAAsB,CAAC,IAAI,CAAC,CAAC;gBACnD,MAAM,CAAC,KAAK,CAAC,uCAAkB,CAAC,mBAAmB,CAAC,OAAO,EAAE,KAAK,CAAC,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC;YACtF,CAAC;YACD,mBAAmB,IAAY,EAAE,KAAU;gBAC1C,cAAc,CAAC,IAAI,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC;gBAC9B,cAAc,CAAC,IAAI,GAAG,UAAU,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC;gBAC3C,cAAc,CAAC,IAAI,GAAG,UAAU,EAAE,CAAC,KAAK,CAAC,CAAC;gBAC1C,cAAc,CAAC,IAAI,GAAG,WAAW,EAAE,CAAC,KAAK,CAAC,CAAC;gBAC3C,cAAc,CAAC,IAAI,GAAG,WAAW,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC;gBAC5C,cAAc,CAAC,IAAI,GAAG,OAAO,EAAE,KAAK,IAAS,GAAG,CAAC,CAAC;gBAClD,cAAc,CAAC,IAAI,GAAG,OAAO,EAAE,KAAK,IAAS,GAAG,CAAC,CAAC;gBAClD,cAAc,CAAC,GAAG,GAAG,IAAI,EAAE,CAAC,KAAK,CAAC,CAAC;YACpC,CAAC;YAED,cAAc,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;YAEzB,SAAS,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;YACrB,SAAS,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;YACtB,SAAS,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;YACpB,SAAS,CAAC,GAAG,EAAE,SAAS,CAAC,CAAC;YAE1B,cAAc,CAAC,SAAS,EAAE,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC;YAC1C,cAAc,CAAC,QAAQ,EAAE,IAAI,IAAI,KAAK,CAAC,CAAC;YACxC,cAAc,CAAC,mBAAmB,EAAE,IAAI,IAAI,CAAC,KAAK,IAAI,GAAG,IAAI,GAAG,CAAC,CAAC;YAClE,iCAAiC;QAClC,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport * as assert from 'assert';\nimport {BinaryKeybindings, KeyCode, KeyMod} from 'vs/base/common/keyCodes';\nimport {IOSupport, KeybindingResolver} from 'vs/platform/keybinding/common/keybindingResolver';\nimport {IKeybindingItem, KbAndExpression, KbExpr} from 'vs/platform/keybinding/common/keybindingService';\n\nsuite('Keybinding Service', () => {\n\n\ttest('resolve key', function() {\n\t\tlet keybinding = KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KEY_Z;\n\t\tlet contextRules = KbExpr.equals('bar', 'baz');\n\t\tlet keybindingItem: IKeybindingItem = {\n\t\t\tcommand: 'yes',\n\t\t\tcontext: contextRules,\n\t\t\tkeybinding: keybinding,\n\t\t\tweight1: 0,\n\t\t\tweight2: 0\n\t\t};\n\n\t\tassert.equal(KeybindingResolver.contextMatchesRules({ bar: 'baz' }, contextRules), true);\n\t\tassert.equal(KeybindingResolver.contextMatchesRules({ bar: 'bz' }, contextRules), false);\n\n\t\tlet resolver = new KeybindingResolver([keybindingItem], []);\n\t\tassert.equal(resolver.resolve({ bar: 'baz' }, 0, keybinding).commandId, 'yes');\n\t\tassert.equal(resolver.resolve({ bar: 'bz' }, 0, keybinding), null);\n\t});\n\n\ttest('normalizeRule', function() {\n\t\tlet key1IsTrue = KbExpr.equals('key1', true);\n\t\tlet key1IsNotFalse = KbExpr.notEquals('key1', false);\n\t\tlet key1IsFalse = KbExpr.equals('key1', false);\n\t\tlet key1IsNotTrue = KbExpr.notEquals('key1', true);\n\n\t\tassert.ok(key1IsTrue.normalize().equals(KbExpr.has('key1')));\n\t\tassert.ok(key1IsNotFalse.normalize().equals(KbExpr.has('key1')));\n\t\tassert.ok(key1IsFalse.normalize().equals(KbExpr.not('key1')));\n\t\tassert.ok(key1IsNotTrue.normalize().equals(KbExpr.not('key1')));\n\t});\n\n\ttest('contextIsEntirelyIncluded', function() {\n\t\tlet assertIsIncluded = (a: KbExpr[], b: KbExpr[]) => {\n\t\t\tassert.equal(KeybindingResolver.contextIsEntirelyIncluded(false, new KbAndExpression(a), new KbAndExpression(b)), true);\n\t\t};\n\t\tlet assertIsNotIncluded = (a: KbExpr[], b: KbExpr[]) => {\n\t\t\tassert.equal(KeybindingResolver.contextIsEntirelyIncluded(false, new KbAndExpression(a), new KbAndExpression(b)), false);\n\t\t};\n\t\tlet key1IsTrue = KbExpr.equals('key1', true);\n\t\tlet key1IsNotFalse = KbExpr.notEquals('key1', false);\n\t\tlet key1IsFalse = KbExpr.equals('key1', false);\n\t\tlet key1IsNotTrue = KbExpr.notEquals('key1', true);\n\t\tlet key2IsTrue = KbExpr.equals('key2', true);\n\t\tlet key2IsNotFalse = KbExpr.notEquals('key2', false);\n\t\tlet key3IsTrue = KbExpr.equals('key3', true);\n\t\tlet key4IsTrue = KbExpr.equals('key4', true);\n\n\t\tassertIsIncluded([key1IsTrue], null);\n\t\tassertIsIncluded([key1IsTrue], []);\n\t\tassertIsIncluded([key1IsTrue], [key1IsTrue]);\n\t\tassertIsIncluded([key1IsTrue], [key1IsNotFalse]);\n\n\t\tassertIsIncluded([key1IsFalse], []);\n\t\tassertIsIncluded([key1IsFalse], [key1IsFalse]);\n\t\tassertIsIncluded([key1IsFalse], [key1IsNotTrue]);\n\n\t\tassertIsIncluded([key2IsNotFalse], []);\n\t\tassertIsIncluded([key2IsNotFalse], [key2IsNotFalse]);\n\t\tassertIsIncluded([key2IsNotFalse], [key2IsTrue]);\n\n\t\tassertIsIncluded([key1IsTrue, key2IsNotFalse], [key2IsTrue]);\n\t\tassertIsIncluded([key1IsTrue, key2IsNotFalse], [key2IsNotFalse]);\n\t\tassertIsIncluded([key1IsTrue, key2IsNotFalse], [key1IsTrue]);\n\t\tassertIsIncluded([key1IsTrue, key2IsNotFalse], [key1IsNotFalse]);\n\t\tassertIsIncluded([key1IsTrue, key2IsNotFalse], []);\n\n\t\tassertIsNotIncluded([key1IsTrue], [key1IsFalse]);\n\t\tassertIsNotIncluded([key1IsTrue], [key1IsNotTrue]);\n\t\tassertIsNotIncluded([key1IsNotFalse], [key1IsFalse]);\n\t\tassertIsNotIncluded([key1IsNotFalse], [key1IsNotTrue]);\n\n\t\tassertIsNotIncluded([key1IsFalse], [key1IsTrue]);\n\t\tassertIsNotIncluded([key1IsFalse], [key1IsNotFalse]);\n\t\tassertIsNotIncluded([key1IsNotTrue], [key1IsTrue]);\n\t\tassertIsNotIncluded([key1IsNotTrue], [key1IsNotFalse]);\n\n\t\tassertIsNotIncluded([key1IsTrue, key2IsNotFalse], [key3IsTrue]);\n\t\tassertIsNotIncluded([key1IsTrue, key2IsNotFalse], [key4IsTrue]);\n\t\tassertIsNotIncluded([key1IsTrue], [key2IsTrue]);\n\t\tassertIsNotIncluded([], [key2IsTrue]);\n\t\tassertIsNotIncluded(null, [key2IsTrue]);\n\t});\n\n\ttest('resolve command', function() {\n\n\t\tlet items: IKeybindingItem[] = [\n\t\t\t// This one will never match because its context is always overwritten by another one\n\t\t\t{\n\t\t\t\tkeybinding: KeyCode.KEY_X,\n\t\t\t\tcontext: KbExpr.and(\n\t\t\t\t\tKbExpr.equals('key1', true),\n\t\t\t\t\tKbExpr.notEquals('key2', false)\n\t\t\t\t),\n\t\t\t\tcommand: 'first',\n\t\t\t\tweight1: 1,\n\t\t\t\tweight2: 0\n\t\t\t},\n\t\t\t// This one always overwrites first\n\t\t\t{\n\t\t\t\tkeybinding: KeyCode.KEY_X,\n\t\t\t\tcontext: KbExpr.equals('key2', true),\n\t\t\t\tcommand: 'second',\n\t\t\t\tweight1: 2,\n\t\t\t\tweight2: 0\n\t\t\t},\n\t\t\t// This one is a secondary mapping for `second`\n\t\t\t{\n\t\t\t\tkeybinding: KeyCode.KEY_Z,\n\t\t\t\tcontext: null,\n\t\t\t\tcommand: 'second',\n\t\t\t\tweight1: 2.5,\n\t\t\t\tweight2: 0\n\t\t\t},\n\t\t\t// This one sometimes overwrites first\n\t\t\t{\n\t\t\t\tkeybinding: KeyCode.KEY_X,\n\t\t\t\tcontext: KbExpr.equals('key3', true),\n\t\t\t\tcommand: 'third',\n\t\t\t\tweight1: 3,\n\t\t\t\tweight2: 0\n\t\t\t},\n\t\t\t// This one is always overwritten by another one\n\t\t\t{\n\t\t\t\tkeybinding: KeyMod.CtrlCmd | KeyCode.KEY_Y,\n\t\t\t\tcontext: KbExpr.equals('key4', true),\n\t\t\t\tcommand: 'fourth',\n\t\t\t\tweight1: 4,\n\t\t\t\tweight2: 0\n\t\t\t},\n\t\t\t// This one overwrites with a chord the previous one\n\t\t\t{\n\t\t\t\tkeybinding: KeyMod.chord(KeyMod.CtrlCmd | KeyCode.KEY_Y, KeyCode.KEY_Z),\n\t\t\t\tcontext: null,\n\t\t\t\tcommand: 'fifth',\n\t\t\t\tweight1: 5,\n\t\t\t\tweight2: 0\n\t\t\t},\n\t\t\t// This one has no keybinding\n\t\t\t{\n\t\t\t\tkeybinding: 0,\n\t\t\t\tcontext: null,\n\t\t\t\tcommand: 'sixth',\n\t\t\t\tweight1: 6,\n\t\t\t\tweight2: 0\n\t\t\t},\n\t\t\t{\n\t\t\t\tkeybinding: KeyMod.chord(KeyMod.CtrlCmd | KeyCode.KEY_K, KeyMod.CtrlCmd | KeyCode.KEY_U),\n\t\t\t\tcontext: null,\n\t\t\t\tcommand: 'seventh',\n\t\t\t\tweight1: 6.5,\n\t\t\t\tweight2: 0\n\t\t\t},\n\t\t\t{\n\t\t\t\tkeybinding: KeyMod.chord(KeyMod.CtrlCmd | KeyCode.KEY_K, KeyMod.CtrlCmd | KeyCode.KEY_K),\n\t\t\t\tcontext: null,\n\t\t\t\tcommand: 'seventh',\n\t\t\t\tweight1: 6.5,\n\t\t\t\tweight2: 0\n\t\t\t},\n\t\t\t{\n\t\t\t\tkeybinding: KeyMod.chord(KeyMod.CtrlCmd | KeyCode.KEY_K, KeyMod.CtrlCmd | KeyCode.KEY_U),\n\t\t\t\tcontext: null,\n\t\t\t\tcommand: 'uncomment lines',\n\t\t\t\tweight1: 7,\n\t\t\t\tweight2: 0\n\t\t\t},\n\t\t\t{\n\t\t\t\tkeybinding: KeyMod.chord(KeyMod.CtrlCmd | KeyCode.KEY_K, KeyMod.CtrlCmd | KeyCode.KEY_C),\n\t\t\t\tcontext: null,\n\t\t\t\tcommand: 'comment lines',\n\t\t\t\tweight1: 8,\n\t\t\t\tweight2: 0\n\t\t\t},\n\t\t\t{\n\t\t\t\tkeybinding: KeyMod.chord(KeyMod.CtrlCmd | KeyCode.KEY_G, KeyMod.CtrlCmd | KeyCode.KEY_C),\n\t\t\t\tcontext: null,\n\t\t\t\tcommand: 'unreachablechord',\n\t\t\t\tweight1: 10,\n\t\t\t\tweight2: 0\n\t\t\t},\n\t\t\t{\n\t\t\t\tkeybinding: KeyMod.CtrlCmd | KeyCode.KEY_G,\n\t\t\t\tcontext: null,\n\t\t\t\tcommand: 'eleven',\n\t\t\t\tweight1: 11,\n\t\t\t\tweight2: 0\n\t\t\t}\n\t\t];\n\n\t\tlet resolver = new KeybindingResolver(items, [], false);\n\n\n\n\t\tlet testKey = (commandId: string, expectedKeys: number[]) => {\n\t\t\t// Test lookup\n\t\t\tlet lookupResult = resolver.lookupKeybinding(commandId);\n\t\t\tassert.equal(lookupResult.length, expectedKeys.length, 'Length mismatch @ commandId ' + commandId + '; GOT: ' + JSON.stringify(lookupResult, null, '\\t'));\n\t\t\tfor (let i = 0, len = lookupResult.length; i < len; i++) {\n\t\t\t\tassert.equal(lookupResult[i].value, expectedKeys[i]);\n\t\t\t}\n\t\t};\n\n\t\tlet testResolve = (ctx: any, expectedKey: number, commandId: string) => {\n\n\t\t\tif (BinaryKeybindings.hasChord(expectedKey)) {\n\t\t\t\tlet firstPart = BinaryKeybindings.extractFirstPart(expectedKey);\n\t\t\t\tlet chordPart = BinaryKeybindings.extractChordPart(expectedKey);\n\n\t\t\t\tlet result = resolver.resolve(ctx, 0, firstPart);\n\t\t\t\tassert.ok(result !== null, 'Enters chord for ' + commandId);\n\t\t\t\tassert.equal(result.commandId, null, 'Enters chord for ' + commandId);\n\t\t\t\tassert.equal(result.enterChord, firstPart, 'Enters chord for ' + commandId);\n\n\t\t\t\tresult = resolver.resolve(ctx, firstPart, chordPart);\n\t\t\t\tassert.ok(result !== null, 'Enters chord for ' + commandId);\n\t\t\t\tassert.equal(result.commandId, commandId, 'Finds chorded command ' + commandId);\n\t\t\t\tassert.equal(result.enterChord, 0, 'Finds chorded command ' + commandId);\n\t\t\t} else {\n\t\t\t\tlet result = resolver.resolve(ctx, 0, expectedKey);\n\t\t\t\tassert.ok(result !== null, 'Finds command ' + commandId);\n\t\t\t\tassert.equal(result.commandId, commandId, 'Finds command ' + commandId);\n\t\t\t\tassert.equal(result.enterChord, 0, 'Finds command ' + commandId);\n\t\t\t}\n\t\t};\n\n\t\ttestKey('first', []);\n\n\t\ttestKey('second', [KeyCode.KEY_Z, KeyCode.KEY_X]);\n\t\ttestResolve({ key2: true }, KeyCode.KEY_X, 'second');\n\t\ttestResolve({}, KeyCode.KEY_Z, 'second');\n\n\t\ttestKey('third', [KeyCode.KEY_X]);\n\t\ttestResolve({ key3: true }, KeyCode.KEY_X, 'third');\n\n\t\ttestKey('fourth', []);\n\n\t\ttestKey('fifth', [KeyMod.chord(KeyMod.CtrlCmd | KeyCode.KEY_Y, KeyCode.KEY_Z)]);\n\t\ttestResolve({}, KeyMod.chord(KeyMod.CtrlCmd | KeyCode.KEY_Y, KeyCode.KEY_Z), 'fifth');\n\n\t\ttestKey('seventh', [KeyMod.chord(KeyMod.CtrlCmd | KeyCode.KEY_K, KeyMod.CtrlCmd | KeyCode.KEY_K)]);\n\t\ttestResolve({}, KeyMod.chord(KeyMod.CtrlCmd | KeyCode.KEY_K, KeyMod.CtrlCmd | KeyCode.KEY_K), 'seventh');\n\n\t\ttestKey('uncomment lines', [KeyMod.chord(KeyMod.CtrlCmd | KeyCode.KEY_K, KeyMod.CtrlCmd | KeyCode.KEY_U)]);\n\t\ttestResolve({}, KeyMod.chord(KeyMod.CtrlCmd | KeyCode.KEY_K, KeyMod.CtrlCmd | KeyCode.KEY_U), 'uncomment lines');\n\n\t\ttestKey('comment lines', [KeyMod.chord(KeyMod.CtrlCmd | KeyCode.KEY_K, KeyMod.CtrlCmd | KeyCode.KEY_C)]);\n\t\ttestResolve({}, KeyMod.chord(KeyMod.CtrlCmd | KeyCode.KEY_K, KeyMod.CtrlCmd | KeyCode.KEY_C), 'comment lines');\n\n\t\ttestKey('unreachablechord', []);\n\n\t\ttestKey('eleven', [KeyMod.CtrlCmd | KeyCode.KEY_G]);\n\t\ttestResolve({}, KeyMod.CtrlCmd | KeyCode.KEY_G, 'eleven');\n\n\t\ttestKey('sixth', []);\n\t});\n\n\ttest('contextMatchesRules', function() {\n\t\t/* tslint:disable:triple-equals */\n\t\tlet context = {\n\t\t\t'a': true,\n\t\t\t'b': false,\n\t\t\t'c': '5'\n\t\t};\n\t\tfunction testExpression(expr: string, expected: boolean): void {\n\t\t\tlet rules = IOSupport.readKeybindingContexts(expr);\n\t\t\tassert.equal(KeybindingResolver.contextMatchesRules(context, rules), expected, expr);\n\t\t}\n\t\tfunction testBatch(expr: string, value: any): void {\n\t\t\ttestExpression(expr, !!value);\n\t\t\ttestExpression(expr + ' == true', !!value);\n\t\t\ttestExpression(expr + ' != true', !value);\n\t\t\ttestExpression(expr + ' == false', !value);\n\t\t\ttestExpression(expr + ' != false', !!value);\n\t\t\ttestExpression(expr + ' == 5', value == <any>'5');\n\t\t\ttestExpression(expr + ' != 5', value != <any>'5');\n\t\t\ttestExpression('!' + expr, !value);\n\t\t}\n\n\t\ttestExpression('', true);\n\n\t\ttestBatch('a', true);\n\t\ttestBatch('b', false);\n\t\ttestBatch('c', '5');\n\t\ttestBatch('z', undefined);\n\n\t\ttestExpression('a && !b', true && !false);\n\t\ttestExpression('a && b', true && false);\n\t\ttestExpression('a && !b && c == 5', true && !false && '5' == '5');\n\t\t/* tslint:enable:triple-equals */\n\t});\n});\n"]}