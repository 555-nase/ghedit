{"version":3,"file":"vs/platform/keybinding/common/keybindingsRegistry.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/platform/keybinding/common/keybindingsRegistry.ts"],"names":[],"mappings":";IAAA;;;oGAGgG;IAChG,YAAY,CAAC;IAkCb;QAuBC;YAlBO,WAAM,GAAG;gBACf,UAAU,EAAE,UAAC,UAAsB;oBAAtB,0BAAsB,GAAtB,cAAsB;oBAClC,MAAM,CAAC,CAAC,GAAG,UAAU,CAAC;gBACvB,CAAC;gBACD,aAAa,EAAE,UAAC,UAAsB;oBAAtB,0BAAsB,GAAtB,cAAsB;oBACrC,MAAM,CAAC,GAAG,GAAG,UAAU,CAAC;gBACzB,CAAC;gBACD,gBAAgB,EAAE,UAAC,UAAsB;oBAAtB,0BAAsB,GAAtB,cAAsB;oBACxC,MAAM,CAAC,GAAG,GAAG,UAAU,CAAC;gBACzB,CAAC;gBACD,gBAAgB,EAAE,UAAC,UAAsB;oBAAtB,0BAAsB,GAAtB,cAAsB;oBACxC,MAAM,CAAC,GAAG,GAAG,UAAU,CAAC;gBACzB,CAAC;gBACD,iBAAiB,EAAE,UAAC,UAAsB;oBAAtB,0BAAsB,GAAtB,cAAsB;oBACzC,MAAM,CAAC,GAAG,GAAG,UAAU,CAAC;gBACzB,CAAC;aACD,CAAC;YAGD,IAAI,CAAC,YAAY,GAAG,EAAE,CAAC;YACvB,IAAI,CAAC,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QACtC,CAAC;QAED;;WAEG;QACY,6CAAqB,GAApC,UAAqC,EAAgB;YACpD,EAAE,CAAC,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC;gBACxB,EAAE,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;oBAClB,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC;gBACf,CAAC;YACF,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC;gBACjC,EAAE,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;oBAClB,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC;gBACf,CAAC;YACF,CAAC;YAAC,IAAI,CAAC,CAAC;gBACP,EAAE,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;oBACpB,MAAM,CAAC,EAAE,CAAC,KAAK,CAAC;gBACjB,CAAC;YACF,CAAC;YAED,MAAM,CAAC,EAAE,CAAC;QACX,CAAC;QAEM,qDAAmB,GAA1B,UAA2B,IAAkB;YAA7C,iBAUC;YATA,IAAI,QAAQ,GAAG,uBAAuB,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAAC;YAEnE,EAAE,CAAC,CAAC,QAAQ,IAAI,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;gBAClC,IAAI,CAAC,yBAAyB,CAAC,QAAQ,CAAC,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;YACzF,CAAC;YAED,EAAE,CAAC,CAAC,QAAQ,IAAI,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;gBACnD,QAAQ,CAAC,SAAS,CAAC,OAAO,CAAC,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,KAAI,CAAC,yBAAyB,CAAC,CAAC,EAAE,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,OAAO,CAAC,EAA7E,CAA6E,CAAC,CAAC;YACrH,CAAC;QACF,CAAC;QAEM,qDAAmB,GAA1B,UAA2B,IAAwB;YAClD,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;YAE/B,4BAA4B;YAC5B,8DAA8D;YAC9D,IAAI;YACJ,0CAA0C;YAE1C,IAAI,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;YAC3B,IAAI,WAAW,GAAG,IAAI,CAAC,WAAW,IAAI,OAAO,CAAC,WAAW,CAAC;YAE1D,+DAA+D;YAC/D,EAAE,CAAC,CAAC,OAAO,WAAW,KAAK,QAAQ,CAAC,CAAC,CAAC;gBACrC,IAAI,aAAW,GAAqB,EAAE,CAAC;gBACvC,GAAG,CAAC,CAAY,UAAgB,EAAhB,KAAA,WAAW,CAAC,IAAI,EAAhB,cAAgB,EAAhB,IAAgB,CAAC;oBAA5B,IAAI,GAAG,SAAA;oBACX,aAAW,CAAC,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;iBACjC;gBACD,OAAO,GAAG,UAAS,OAAO,EAAE,IAAI;oBAC/B,2BAAmB,CAAC,IAAI,EAAE,aAAW,CAAC,CAAC;oBACvC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;gBACpC,CAAC,CAAC;YACH,CAAC;YAED,iCAAiC;YACjC,OAAO,CAAC,WAAW,GAAG,WAAW,CAAC;YAElC,mBAAmB;YACnB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC;QACnC,CAAC;QAEM,6CAAW,GAAlB;YACC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;QACvB,CAAC;QAEO,2DAAyB,GAAjC,UAAkC,UAAkB,EAAE,SAAiB,EAAE,OAAe,EAAE,OAAe,EAAE,OAAe;YACzH,EAAE,CAAC,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC;gBACxB,EAAE,CAAC,CAAC,4BAAiB,CAAC,UAAU,CAAC,UAAU,CAAC,IAAI,CAAC,4BAAiB,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,4BAAiB,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,4BAAiB,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;oBAC9K,EAAE,CAAC,CAAC,8BAA8B,CAAC,IAAI,CAAC,kBAAO,CAAC,QAAQ,CAAC,4BAAiB,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;wBACzG,OAAO,CAAC,IAAI,CAAC,+EAA+E,EAAE,UAAU,EAAE,OAAO,EAAE,SAAS,CAAC,CAAC;oBAC/H,CAAC;gBACF,CAAC;YACF,CAAC;YACD,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC;gBACtB,UAAU,EAAE,UAAU;gBACtB,OAAO,EAAE,SAAS;gBAClB,OAAO,EAAE,OAAO;gBAChB,OAAO,EAAE,OAAO;gBAChB,OAAO,EAAE,OAAO;aAChB,CAAC,CAAC;QACJ,CAAC;QAEM,uDAAqB,GAA5B;YACC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC;QAC1B,CAAC;QACF,8BAAC;IAAD,CAAC,AAnHD,IAmHC;IACU,2BAAmB,GAAyB,IAAI,uBAAuB,EAAE,CAAC;IAErF,6BAA6B;IAClB,kBAAU,GAAG;QACvB,WAAW,EAAE,8BAA8B;KAC3C,CAAC;IACF,mBAAQ,CAAC,GAAG,CAAC,kBAAU,CAAC,WAAW,EAAE,2BAAmB,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {BinaryKeybindings, KeyCode} from 'vs/base/common/keyCodes';\nimport * as platform from 'vs/base/common/platform';\nimport {TypeConstraint, validateConstraints} from 'vs/base/common/types';\nimport {ICommandHandler, ICommandHandlerDescription, ICommandsMap, IKeybindingItem, IKeybindings, KbExpr} from 'vs/platform/keybinding/common/keybindingService';\nimport {Registry} from 'vs/platform/platform';\n\nexport interface ICommandRule extends IKeybindings {\n\tid: string;\n\tweight: number;\n\tcontext: KbExpr;\n}\n\nexport interface ICommandDescriptor extends ICommandRule {\n\thandler: ICommandHandler;\n\tdescription?: string | ICommandHandlerDescription;\n}\n\nexport interface IKeybindingsRegistry {\n\tregisterCommandRule(rule: ICommandRule);\n\tregisterCommandDesc(desc: ICommandDescriptor): void;\n\tgetCommands(): ICommandsMap;\n\tgetDefaultKeybindings(): IKeybindingItem[];\n\n\tWEIGHT: {\n\t\teditorCore(importance?: number): number;\n\t\teditorContrib(importance?: number): number;\n\t\tworkbenchContrib(importance?: number): number;\n\t\tbuiltinExtension(importance?: number): number;\n\t\texternalExtension(importance?: number): number;\n\t};\n}\n\nclass KeybindingsRegistryImpl implements IKeybindingsRegistry {\n\n\tprivate _keybindings: IKeybindingItem[];\n\tprivate _commands: ICommandsMap;\n\n\tpublic WEIGHT = {\n\t\teditorCore: (importance: number = 0): number => {\n\t\t\treturn 0 + importance;\n\t\t},\n\t\teditorContrib: (importance: number = 0): number => {\n\t\t\treturn 100 + importance;\n\t\t},\n\t\tworkbenchContrib: (importance: number = 0): number => {\n\t\t\treturn 200 + importance;\n\t\t},\n\t\tbuiltinExtension: (importance: number = 0): number => {\n\t\t\treturn 300 + importance;\n\t\t},\n\t\texternalExtension: (importance: number = 0): number => {\n\t\t\treturn 400 + importance;\n\t\t}\n\t};\n\n\tconstructor() {\n\t\tthis._keybindings = [];\n\t\tthis._commands = Object.create(null);\n\t}\n\n\t/**\n\t * Take current platform into account and reduce to primary & secondary.\n\t */\n\tprivate static bindToCurrentPlatform(kb: IKeybindings): { primary?: number; secondary?: number[]; } {\n\t\tif (platform.isWindows) {\n\t\t\tif (kb && kb.win) {\n\t\t\t\treturn kb.win;\n\t\t\t}\n\t\t} else if (platform.isMacintosh) {\n\t\t\tif (kb && kb.mac) {\n\t\t\t\treturn kb.mac;\n\t\t\t}\n\t\t} else {\n\t\t\tif (kb && kb.linux) {\n\t\t\t\treturn kb.linux;\n\t\t\t}\n\t\t}\n\n\t\treturn kb;\n\t}\n\n\tpublic registerCommandRule(rule: ICommandRule): void {\n\t\tlet actualKb = KeybindingsRegistryImpl.bindToCurrentPlatform(rule);\n\n\t\tif (actualKb && actualKb.primary) {\n\t\t\tthis.registerDefaultKeybinding(actualKb.primary, rule.id, rule.weight, 0, rule.context);\n\t\t}\n\n\t\tif (actualKb && Array.isArray(actualKb.secondary)) {\n\t\t\tactualKb.secondary.forEach((k, i) => this.registerDefaultKeybinding(k, rule.id, rule.weight, -i - 1, rule.context));\n\t\t}\n\t}\n\n\tpublic registerCommandDesc(desc: ICommandDescriptor): void {\n\t\tthis.registerCommandRule(desc);\n\n\t\t// if (_commands[desc.id]) {\n\t\t// \tconsole.warn('Duplicate handler for command: ' + desc.id);\n\t\t// }\n\t\t// this._commands[desc.id] = desc.handler;\n\n\t\tlet handler = desc.handler;\n\t\tlet description = desc.description || handler.description;\n\n\t\t// add argument validation if rich command metadata is provided\n\t\tif (typeof description === 'object') {\n\t\t\tlet constraints: TypeConstraint[] = [];\n\t\t\tfor (let arg of description.args) {\n\t\t\t\tconstraints.push(arg.constraint);\n\t\t\t}\n\t\t\thandler = function(accesor, args) {\n\t\t\t\tvalidateConstraints(args, constraints);\n\t\t\t\treturn desc.handler(accesor, args);\n\t\t\t};\n\t\t}\n\n\t\t// make sure description is there\n\t\thandler.description = description;\n\n\t\t// register handler\n\t\tthis._commands[desc.id] = handler;\n\t}\n\n\tpublic getCommands(): ICommandsMap {\n\t\treturn this._commands;\n\t}\n\n\tprivate registerDefaultKeybinding(keybinding: number, commandId: string, weight1: number, weight2: number, context: KbExpr): void {\n\t\tif (platform.isWindows) {\n\t\t\tif (BinaryKeybindings.hasCtrlCmd(keybinding) && !BinaryKeybindings.hasShift(keybinding) && BinaryKeybindings.hasAlt(keybinding) && !BinaryKeybindings.hasWinCtrl(keybinding)) {\n\t\t\t\tif (/^[A-Z0-9\\[\\]\\|\\;\\'\\,\\.\\/\\`]$/.test(KeyCode.toString(BinaryKeybindings.extractKeyCode(keybinding)))) {\n\t\t\t\t\tconsole.warn('Ctrl+Alt+ keybindings should not be used by default under Windows. Offender: ', keybinding, ' for ', commandId);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis._keybindings.push({\n\t\t\tkeybinding: keybinding,\n\t\t\tcommand: commandId,\n\t\t\tcontext: context,\n\t\t\tweight1: weight1,\n\t\t\tweight2: weight2\n\t\t});\n\t}\n\n\tpublic getDefaultKeybindings(): IKeybindingItem[] {\n\t\treturn this._keybindings;\n\t}\n}\nexport let KeybindingsRegistry: IKeybindingsRegistry = new KeybindingsRegistryImpl();\n\n// Define extension point ids\nexport let Extensions = {\n\tEditorModes: 'platform.keybindingsRegistry'\n};\nRegistry.add(Extensions.EditorModes, KeybindingsRegistry);"]}