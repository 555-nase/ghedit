{"version":3,"file":"vs/platform/lifecycle/common/nullLifecycleService.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/platform/lifecycle/common/nullLifecycleService.ts"],"names":[],"mappings":";IAAA;;;oGAGgG;IAChG,YAAY,CAAC;IAMb;QAAA;YAEQ,cAAS,GAAG,6BAAiB,CAAC;YAE7B,gBAAW,GAAiB,IAAI,eAAO,EAAO,CAAC;QAYxD,CAAC;QAVO,2DAA4B,GAAnC,UAAoC,CAA6B;QACjE,CAAC;QAED,sBAAW,4CAAU;iBAArB;gBACC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;YAC/B,CAAC;;;WAAA;QAEM,+CAAgB,GAAvB,UAAwB,OAAuB;QAE/C,CAAC;QACF,2BAAC;IAAD,CAAC,AAhBD,IAgBC;IAEY,gBAAQ,GAAsB,IAAI,oBAAoB,EAAE,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport Event, {Emitter} from 'vs/base/common/event';\nimport {ILifecycleService, IBeforeShutdownParticipant} from 'vs/platform/lifecycle/common/lifecycle';\nimport {IThreadService} from 'vs/platform/thread/common/thread';\n\nclass NullLifecycleService implements ILifecycleService {\n\n\tpublic serviceId = ILifecycleService;\n\n\tprivate _onShutdown: Emitter<any> = new Emitter<any>();\n\n\tpublic addBeforeShutdownParticipant(p: IBeforeShutdownParticipant): void {\n\t}\n\n\tpublic get onShutdown(): Event<any> {\n\t\treturn this._onShutdown.event;\n\t}\n\n\tpublic setThreadService(service: IThreadService): void {\n\n\t}\n}\n\nexport const Instance: ILifecycleService = new NullLifecycleService();"]}