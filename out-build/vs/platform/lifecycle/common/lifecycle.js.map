{"version":3,"file":"vs/platform/lifecycle/common/lifecycle.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/platform/lifecycle/common/lifecycle.ts"],"names":[],"mappings":";IAAA;;;oGAGgG;IAChG,YAAY,CAAC;IAMA,yBAAiB,GAAG,+BAAe,CAAoB,kBAAkB,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport winjs = require('vs/base/common/winjs.base');\nimport Event from 'vs/base/common/event';\nimport {createDecorator, ServiceIdentifier} from 'vs/platform/instantiation/common/instantiation';\n\nexport const ILifecycleService = createDecorator<ILifecycleService>('lifecycleService');\n\nexport interface IBeforeShutdownParticipant {\n\n\t/**\n\t * Called when the window is about to close. Clients have a chance to veto the closing by either returning\n\t * a boolean \"true\" directly or via a promise that resolves to a boolean. Returning a promise is useful\n\t * in cases of long running operations on shutdown.\n\t *\n\t * Note: It is absolutely important to avoid long running promises on this call. Please try hard to return\n\t * a boolean directly. Returning a promise has quite an impact on the shutdown sequence!\n\t */\n\tbeforeShutdown(): boolean | winjs.TPromise<boolean>;\n}\n\n/**\n * A lifecycle service informs about lifecycle events of the\n * application, such as shutdown.\n */\nexport interface ILifecycleService {\n\n\tserviceId: ServiceIdentifier<any>;\n\n\t/**\n\t * Participate before shutting down to be able to veto.\n\t */\n\taddBeforeShutdownParticipant(p: IBeforeShutdownParticipant): void;\n\n\t/**\n\t * Fired when no client is preventing the shutdown from happening. Can be used to dispose heavy resources\n\t * like running processes. Can also be used to save UI state to storage.\n\t */\n\tonShutdown: Event<void>;\n}"]}