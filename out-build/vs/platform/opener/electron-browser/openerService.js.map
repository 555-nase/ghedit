{"version":3,"file":"vs/platform/opener/electron-browser/openerService.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/platform/opener/electron-browser/openerService.ts"],"names":[],"mappings":";;;;;;;;;;IAAA;;;oGAGgG;IAChG,YAAY,CAAC;IASb;QAIC,uBACyB,cAA8B,EAC1B,kBAAsC;YAD1C,mBAAc,GAAd,cAAc,CAAgB;YAC1B,uBAAkB,GAAlB,kBAAkB,CAAoB;YAElE,EAAE;QACH,CAAC;QAED,4BAAI,GAAJ,UAAK,QAAa;YAAlB,iBAuCC;YArCO,4BAAM,EAAE,oBAAI,EAAE,sBAAK,EAAE,4BAAQ,CAAa;YACjD,IAAI,OAAsB,CAAC;YAC3B,EAAE,CAAC,CAAC,MAAM,KAAK,iBAAO,CAAC,IAAI,IAAI,MAAM,KAAK,iBAAO,CAAC,KAAK,CAAC,CAAC,CAAC;gBACzD,YAAY;gBACZ,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;YAEtC,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,MAAM,KAAK,SAAS,IAAI,IAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBAC7E,qBAAqB;gBACrB,IAAI,IAAI,SAAK,CAAC;gBACd,IAAI,CAAC;oBACJ,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;gBAC1B,CAAE;gBAAA,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAEb,CAAC;gBACD,OAAO,GAAG,IAAI,CAAC,kBAAkB,CAAC,cAAc,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;YAE9D,CAAC;YAAC,IAAI,CAAC,CAAC;gBACP,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC,kBAAkB,CAAC,EAAE,UAAA,QAAQ,EAAE,CAAC,CAAC,IAAI,CAAC,UAAA,KAAK;oBACxE,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;wBACZ,MAAM,CAAC;oBACR,CAAC;oBACD,mCAAmC;oBACnC,IAAI,SAGH,CAAC;oBACF,EAAE,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;wBAC7B,SAAS,GAAG;4BACX,eAAe,EAAE,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;4BAC7C,WAAW,EAAE,CAAC;yBACd,CAAC;oBACH,CAAC;oBACD,MAAM,CAAC,KAAI,CAAC,cAAc,CAAC,UAAU,CAAC,EAAE,UAAA,QAAQ,EAAE,OAAO,EAAE,EAAE,WAAA,SAAS,EAAE,EAAE,CAAC,CAAC;gBAC7E,CAAC,CAAC,CAAC;YACJ,CAAC;YAED,MAAM,CAAC,qBAAQ,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,SAAS,EAAE,UAAA,GAAG,IAAM,CAAC,CAAC,CAAC,CAAC,sBAAsB;QAChF,CAAC;QA7CA;uBAAC,uBAAc;uBACd,sCAAkB;yBADJ;QA8CjB,oBAAC;IAAD,CAAC,AAnDD,IAmDC;IAnDY,qBAAa,gBAmDzB,CAAA","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport URI from 'vs/base/common/uri';\nimport {Schemas} from 'vs/base/common/network';\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport {IEditorService} from 'vs/platform/editor/common/editor';\nimport {IKeybindingService} from 'vs/platform/keybinding/common/keybindingService';\nimport {IOpenerService} from '../common/opener';\n\nexport class OpenerService implements IOpenerService {\n\n\tserviceId: any;\n\n\tconstructor(\n\t\t@IEditorService private _editorService: IEditorService,\n\t\t@IKeybindingService private _keybindingService: IKeybindingService\n\t) {\n\t\t//\n\t}\n\n\topen(resource: URI): TPromise<any> {\n\n\t\tconst {scheme, path, query, fragment} = resource;\n\t\tlet promise: TPromise<any>;\n\t\tif (scheme === Schemas.http || scheme === Schemas.https) {\n\t\t\t// open http\n\t\t\twindow.open(resource.toString(true));\n\n\t\t} else if (scheme === 'command' && this._keybindingService.hasCommand(path)) {\n\t\t\t// execute as command\n\t\t\tlet args: any;\n\t\t\ttry {\n\t\t\t\targs = JSON.parse(query);\n\t\t\t} catch (e) {\n\t\t\t\t//\n\t\t\t}\n\t\t\tpromise = this._keybindingService.executeCommand(path, args);\n\n\t\t} else {\n\t\t\tpromise = this._editorService.resolveEditorModel({ resource }).then(model => {\n\t\t\t\tif (!model) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t// support file:///some/file.js#L73\n\t\t\t\tlet selection: {\n\t\t\t\t\tstartLineNumber: number;\n\t\t\t\t\tstartColumn: number;\n\t\t\t\t};\n\t\t\t\tif (/^L\\d+$/.test(fragment)) {\n\t\t\t\t\tselection = {\n\t\t\t\t\t\tstartLineNumber: parseInt(fragment.substr(1)),\n\t\t\t\t\t\tstartColumn: 1\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\treturn this._editorService.openEditor({ resource, options: { selection } });\n\t\t\t});\n\t\t}\n\n\t\treturn TPromise.as(promise).then(undefined, err => { }); // !ignores all errors\n\t}\n}\n"]}