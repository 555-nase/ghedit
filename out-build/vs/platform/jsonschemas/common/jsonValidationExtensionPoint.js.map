{"version":3,"sources":["vs/platform/jsonschemas/common/jsonValidationExtensionPoint.ts"],"names":[],"mappings":"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","file":"vs/platform/jsonschemas/common/jsonValidationExtensionPoint.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport nls = require('vs/nls');\nimport {ExtensionsRegistry} from 'vs/platform/extensions/common/extensionsRegistry';\nimport {Registry} from 'vs/platform/platform';\nimport URI from 'vs/base/common/uri';\nimport JSONContributionRegistry = require('vs/platform/jsonschemas/common/jsonContributionRegistry');\nimport strings = require('vs/base/common/strings');\nimport paths = require('vs/base/common/paths');\n\ninterface IJSONValidationExtensionPoint {\n\tfileMatch: string;\n\turl: string;\n}\n\nlet schemaRegistry = <JSONContributionRegistry.IJSONContributionRegistry>Registry.as(JSONContributionRegistry.Extensions.JSONContribution);\n\nlet configurationExtPoint = ExtensionsRegistry.registerExtensionPoint<IJSONValidationExtensionPoint[]>('jsonValidation', {\n\tdescription: nls.localize('contributes.jsonValidation', 'Contributes json schema configuration.'),\n\ttype: 'array',\n\tdefaultSnippets: [{ body: [{ fileMatch: '{{file.json}}', url: '{{url}}' }] }],\n\titems: {\n\t\ttype: 'object',\n\t\tdefaultSnippets: [{ body: { fileMatch: '{{file.json}}', url: '{{url}}' } }],\n\t\tproperties: {\n\t\t\tfileMatch: {\n\t\t\t\ttype: 'string',\n\t\t\t\tdescription: nls.localize('contributes.jsonValidation.fileMatch', 'The file pattern to match, for example \"package.json\" or \"*.launch\".'),\n\t\t\t},\n\t\t\turl: {\n\t\t\t\tdescription: nls.localize('contributes.jsonValidation.url', 'A schema URL (\\'http:\\', \\'https:\\') or relative path to the extension folder (\\'./\\').'),\n\t\t\t\ttype: 'string'\n\t\t\t}\n\t\t}\n\t}\n});\n\nexport class JSONValidationExtensionPoint {\n\n\tconstructor() {\n\t\tconfigurationExtPoint.setHandler((extensions) => {\n\t\t\tfor (var i = 0; i < extensions.length; i++) {\n\t\t\t\tvar extensionValue = <IJSONValidationExtensionPoint[]>extensions[i].value;\n\t\t\t\tvar collector = extensions[i].collector;\n\t\t\t\tvar extensionPath = extensions[i].description.extensionFolderPath;\n\n\t\t\t\tif (!extensionValue || !Array.isArray(extensionValue)) {\n\t\t\t\t\tcollector.error(nls.localize('invalid.jsonValidation', \"'configuration.jsonValidation' must be a array\"));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\textensionValue.forEach(extension => {\n\t\t\t\t\tif (typeof extension.fileMatch !== 'string') {\n\t\t\t\t\t\tcollector.error(nls.localize('invalid.fileMatch', \"'configuration.jsonValidation.fileMatch' must be defined\"));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tlet uri = extension.url;\n\t\t\t\t\tif (typeof extension.url !== 'string') {\n\t\t\t\t\t\tcollector.error(nls.localize('invalid.url', \"'configuration.jsonValidation.url' must be a URL or relative path\"));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tif (strings.startsWith(uri, './')) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\turi = URI.file(paths.normalize(paths.join(extensionPath, uri))).toString();\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\tcollector.error(nls.localize('invalid.url.fileschema', \"'configuration.jsonValidation.url' is an invalid relative URL: {0}\", e.message));\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (!strings.startsWith(uri, 'https:/') && strings.startsWith(uri, 'https:/')) {\n\t\t\t\t\t\tcollector.error(nls.localize('invalid.url.schema', \"'configuration.jsonValidation.url' must start with 'http:', 'https:' or './' to reference schemas located in the extension\"));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tlet fileMatch = extension.fileMatch;\n\t\t\t\t\tif (!strings.startsWith(extension.fileMatch, '/')) {\n\t\t\t\t\t\tfileMatch = '/' + fileMatch;\n\t\t\t\t\t}\n\t\t\t\t\tschemaRegistry.addSchemaFileAssociation(fileMatch, uri);\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\n}\n"]}