{"version":3,"file":"contextView.js","sourceRoot":"","sources":["../../../../../src/vs/platform/contextview/browser/contextView.ts"],"names":[],"mappings":";IAAA;;;oGAGgG;IAChG,YAAY,CAAC;IASA,2BAAmB,GAAG,+BAAe,CAAsB,oBAAoB,CAAC,CAAC;IAiBjF,2BAAmB,GAAG,+BAAe,CAAsB,oBAAoB,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport Lifecycle = require('vs/base/common/lifecycle');\nimport { IAction } from 'vs/base/common/actions';\nimport ActionBar = require('vs/base/browser/ui/actionbar/actionbar');\nimport { TPromise } from 'vs/base/common/winjs.base';\nimport {Keybinding} from 'vs/base/common/keyCodes';\nimport {createDecorator, ServiceIdentifier} from 'vs/platform/instantiation/common/instantiation';\n\nexport const IContextViewService = createDecorator<IContextViewService>('contextViewService');\n\nexport interface IContextViewService {\n\tserviceId: ServiceIdentifier<any>;\n\tshowContextView(delegate: IContextViewDelegate): void;\n\thideContextView(data?: any): void;\n\tlayout(): void;\n}\n\nexport interface IContextViewDelegate {\n\tgetAnchor(): HTMLElement | { x: number; y: number; };\n\trender(container: HTMLElement): Lifecycle.IDisposable;\n\tcanRelayout?: boolean; // Default: true\n\tonDOMEvent?(e: Event, activeElement: HTMLElement): void;\n\tonHide?(data?: any): void;\n}\n\nexport const IContextMenuService = createDecorator<IContextMenuService>('contextMenuService');\n\nexport interface IContextMenuService {\n\tserviceId: ServiceIdentifier<any>;\n\tshowContextMenu(delegate: IContextMenuDelegate): void;\n}\n\nexport interface IContextMenuDelegate {\n\tgetAnchor(): HTMLElement | { x: number; y: number; };\n\tgetActions(): TPromise<IAction[]>;\n\tgetActionItem?(action: IAction): ActionBar.IActionItem;\n\tgetActionsContext?(): any;\n\tgetKeyBinding?(action: IAction): Keybinding;\n\tgetMenuClassName?(): string;\n\tonHide?(didCancel: boolean): void;\n}\n"]}