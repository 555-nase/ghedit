{"version":3,"file":"baseWorkspaceContextService.js","sourceRoot":"","sources":["../../../../../src/vs/platform/workspace/common/baseWorkspaceContextService.ts"],"names":[],"mappings":";IAAA;;;oGAGgG;IAChG,YAAY,CAAC;IAMb;;;OAGG;IACH;QAOC,qCAAY,SAAqB,EAAE,aAA8B,EAAE,OAAiB;YAAjB,uBAAiB,GAAjB,YAAiB;YAN7E,cAAS,GAAG,oCAAwB,CAAC;YAO3C,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;YAC3B,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;YACnC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACxB,CAAC;QAEM,kDAAY,GAAnB;YACC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;QACvB,CAAC;QAEM,sDAAgB,GAAvB;YACC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC;QAC3B,CAAC;QAEM,gDAAU,GAAjB;YACC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;QACrB,CAAC;QAEM,uDAAiB,GAAxB,UAAyB,QAAa;YACrC,EAAE,CAAC,CAAC,QAAQ,IAAI,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;gBAChC,MAAM,CAAC,KAAK,CAAC,eAAe,CAAC,QAAQ,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;YAC/E,CAAC;YAED,MAAM,CAAC,KAAK,CAAC;QACd,CAAC;QAEM,6DAAuB,GAA9B,UAA+B,QAAa;YAC3C,EAAE,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;gBACtC,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,MAAM,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;YACzF,CAAC;YAED,MAAM,CAAC,IAAI,CAAC;QACb,CAAC;QAEM,gDAAU,GAAjB,UAAkB,qBAA6B;YAC9C,EAAE,CAAC,CAAC,OAAO,qBAAqB,KAAK,QAAQ,IAAI,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;gBACjE,MAAM,CAAC,aAAG,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,MAAM,EAAE,qBAAqB,CAAC,CAAC,CAAC;YACpF,CAAC;YAED,MAAM,CAAC,IAAI,CAAC;QACb,CAAC;QACF,kCAAC;IAAD,CAAC,AAhDD,IAgDC;IAhDY,mCAA2B,8BAgDvC,CAAA","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport URI from 'vs/base/common/uri';\nimport paths = require('vs/base/common/paths');\nimport {IWorkspaceContextService, IWorkspace, IConfiguration} from './workspace';\n\n/**\n * Simple IWorkspaceContextService implementation to allow sharing of this service implementation\n * between different layers of the platform.\n */\nexport class BaseWorkspaceContextService implements IWorkspaceContextService {\n\tpublic serviceId = IWorkspaceContextService;\n\tprotected options: any;\n\n\tprivate workspace: IWorkspace;\n\tprivate configuration: IConfiguration;\n\n\tconstructor(workspace: IWorkspace, configuration?: IConfiguration, options: any = {}) {\n\t\tthis.workspace = workspace;\n\t\tthis.configuration = configuration;\n\t\tthis.options = options;\n\t}\n\n\tpublic getWorkspace(): IWorkspace {\n\t\treturn this.workspace;\n\t}\n\n\tpublic getConfiguration(): IConfiguration {\n\t\treturn this.configuration;\n\t}\n\n\tpublic getOptions(): any {\n\t\treturn this.options;\n\t}\n\n\tpublic isInsideWorkspace(resource: URI): boolean {\n\t\tif (resource && this.workspace) {\n\t\t\treturn paths.isEqualOrParent(resource.fsPath, this.workspace.resource.fsPath);\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tpublic toWorkspaceRelativePath(resource: URI): string {\n\t\tif (this.isInsideWorkspace(resource)) {\n\t\t\treturn paths.normalize(paths.relative(this.workspace.resource.fsPath, resource.fsPath));\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tpublic toResource(workspaceRelativePath: string): URI {\n\t\tif (typeof workspaceRelativePath === 'string' && this.workspace) {\n\t\t\treturn URI.file(paths.join(this.workspace.resource.fsPath, workspaceRelativePath));\n\t\t}\n\n\t\treturn null;\n\t}\n}"]}