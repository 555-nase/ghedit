{"version":3,"file":"vs/platform/workspace/common/workspace.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/platform/workspace/common/workspace.ts"],"names":[],"mappings":";IAAA;;;oGAGgG;IAChG,YAAY,CAAC;IAKA,gCAAwB,GAAG,+BAAe,CAA2B,gBAAgB,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport URI from 'vs/base/common/uri';\nimport {createDecorator, ServiceIdentifier} from 'vs/platform/instantiation/common/instantiation';\n\nexport const IWorkspaceContextService = createDecorator<IWorkspaceContextService>('contextService');\n\nexport interface IWorkspaceContextService {\n\tserviceId: ServiceIdentifier<any>;\n\n\t/**\n\t * Provides access to the workspace object the platform is running with. This may be null if the workbench was opened\n\t * without workspace (empty);\n\t */\n\tgetWorkspace(): IWorkspace;\n\n\t/**\n\t * Provides access to the configuration object the platform is running with.\n\t */\n\tgetConfiguration(): IConfiguration;\n\n\t/**\n\t * Provides access to the options object the platform is running with.\n\t */\n\tgetOptions(): any;\n\n\t/**\n\t * Returns iff the provided resource is inside the workspace or not.\n\t */\n\tisInsideWorkspace(resource: URI): boolean;\n\n\t/**\n\t * Given a resource inside the workspace, returns its relative path from the workspace root\n\t * without leading or trailing slashes. Returns null if the file is not inside an opened\n\t * workspace.\n\t */\n\ttoWorkspaceRelativePath: (resource: URI) => string;\n\n\t/**\n\t * Given a workspace relative path, returns the resource with the absolute path.\n\t */\n\ttoResource: (workspaceRelativePath: string) => URI;\n}\n\nexport interface IWorkspace {\n\n\t/**\n\t * the full uri of the workspace. this is a file:// URL to the location\n\t * of the workspace on disk.\n\t */\n\tresource: URI;\n\n\t/**\n\t * the identifier that uniquely identifies this workspace among others.\n\t */\n\tid: string;\n\n\t/**\n\t * the name of the workspace\n\t */\n\tname: string;\n\n\t/**\n\t * the last modified date of the workspace if known\n\t */\n\tmtime?: number;\n\n\t/**\n\t * the unique identifier of the workspace. if the workspace is deleted and recreated\n\t * the identifier also changes. this makes the uid more unique compared to the id which\n\t * is just derived from the workspace name.\n\t */\n\tuid?: number;\n}\n\nexport interface IConfiguration {\n\t/**\n\t * Some environmental flags\n\t */\n\tenv?: IEnvironment;\n}\n\nexport interface IEnvironment {\n\tappName: string;\n\tappRoot: string;\n\tisBuilt: boolean;\n\texecPath: string;\n\n\tapplicationName: string;\n\tdarwinBundleIdentifier: string;\n\n\tversion: string;\n\tcommitHash: string;\n\n\tupdateFeedUrl: string;\n\tupdateChannel: string;\n\n\textensionsGallery: {\n\t\tserviceUrl: string;\n\t\titemUrl: string;\n\t};\n\n\textensionTips: { [id: string]: string; };\n\n\treleaseNotesUrl: string;\n\tlicenseUrl: string;\n\tproductDownloadUrl: string;\n\n\twelcomePage: string;\n\n\tcrashReporter: any;\n\n\tappSettingsHome: string;\n\tappSettingsPath: string;\n\tappKeybindingsPath: string;\n\n\tdebugExtensionHostPort: number;\n\tdebugBrkExtensionHost: boolean;\n\tdisableExtensions: boolean;\n\n\tlogExtensionHostCommunication: boolean;\n\tverboseLogging: boolean;\n\tenablePerformance: boolean;\n\n\tuserExtensionsHome: string;\n\tsharedIPCHandle: string;\n\textensionDevelopmentPath: string;\n\textensionTestsPath: string;\n\n\trecentFiles: string[];\n\trecentFolders: string[];\n\n\tenableTelemetry: boolean;\n\n\taiConfig: {\n\t\tkey: string;\n\t\tasimovKey: string;\n\t};\n\n\tsendASmile: {\n\t\treportIssueUrl: string,\n\t\trequestFeatureUrl: string\n\t};\n}"]}