{"version":3,"file":"configuration.js","sourceRoot":"","sources":["../../../../../src/vs/platform/configuration/common/configuration.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;IAMnF,6BAAqB,GAAG,+BAAe,CAAwB,sBAAsB,CAAC,CAAC;IAsBpG;QAAA;QAYA,CAAC;QAVA;;;;;;;;WAQG;QACW,sCAAO,GAAG,QAAQ,CAAC;QAClC,qCAAC;IAAD,CAAC,AAZD,IAYC;IAZY,sCAA8B,iCAY1C,CAAA;IAOD,wBAA+B,MAAW,EAAE,WAAmB;QAC9D,uBAAuB,MAAW,EAAE,IAAc;YACjD,IAAI,OAAO,GAAG,MAAM,CAAC;YACrB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;gBACtC,OAAO,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC3B,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;oBACd,MAAM,CAAC,SAAS,CAAC;gBAClB,CAAC;YACF,CAAC;YACD,MAAM,CAAC,OAAO,CAAC;QAChB,CAAC;QAED,IAAI,IAAI,GAAG,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAClC,MAAM,CAAC,aAAa,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;IACpC,CAAC;IAde,sBAAc,iBAc7B,CAAA","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport {createDecorator, ServiceIdentifier} from 'vs/platform/instantiation/common/instantiation';\nimport {IEventEmitter} from 'vs/base/common/eventEmitter';\nimport Event from 'vs/base/common/event';\n\nexport const IConfigurationService = createDecorator<IConfigurationService>('configurationService');\n\nexport interface IConfigurationService extends IEventEmitter {\n\tserviceId: ServiceIdentifier<any>;\n\n\t/**\n\t * Fetches the appropriate section of the configuration JSON file.\n\t * This will be an object keyed off the section name.\n\t */\n\tgetConfiguration<T>(section?: string): T;\n\n\t/**\n\t * Returns iff the workspace has configuration or not.\n\t */\n\thasWorkspaceConfiguration(): boolean;\n\n\t/**\n\t * Event that fires when the configuration changes.\n\t */\n\tonDidUpdateConfiguration: Event<{ config: any }>;\n}\n\nexport class ConfigurationServiceEventTypes {\n\n\t/**\n\t * This event happens after configuration is updated either programmatically\n\t * or through a file change. It will include a IConfigurationServiceEvent\n\t * object that includes the new config and which section was updated\n\t * or null if entire config was updated.\n\t *\n\t * Subscribers can use the provided updated configuration\n\t * rather than re-pulling for updates\n\t */\n\tpublic static UPDATED = 'update';\n}\n\nexport interface IConfigurationServiceEvent {\n\tsection?: string;\n\tconfig: any;\n}\n\nexport function extractSetting(config: any, settingPath: string): any {\n\tfunction accessSetting(config: any, path: string[]): any {\n\t\tlet current = config;\n\t\tfor (let i = 0; i < path.length; i++) {\n\t\t\tcurrent = current[path[i]];\n\t\t\tif (!current) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t}\n\t\treturn current;\n\t}\n\n\tlet path = settingPath.split('.');\n\treturn accessSetting(config, path);\n}"]}