{"version":3,"file":"configurationRegistry.js","sourceRoot":"","sources":["../../../../../src/vs/platform/configuration/common/configurationRegistry.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport nls = require('vs/nls');\nimport Event, {Emitter} from 'vs/base/common/event';\nimport { IJSONSchema } from 'vs/base/common/jsonSchema';\nimport platform = require('vs/platform/platform');\nimport objects = require('vs/base/common/objects');\nimport {ExtensionsRegistry} from 'vs/platform/extensions/common/extensionsRegistry';\nimport JSONContributionRegistry = require('vs/platform/jsonschemas/common/jsonContributionRegistry');\n\n\nexport const Extensions = {\n\tConfiguration: 'base.contributions.configuration'\n};\n\nexport interface IConfigurationRegistry {\n\n\t/**\n\t * Register a configuration to the registry.\n\t */\n\tregisterConfiguration(configuration: IConfigurationNode): void;\n\n\t/**\n\t * Event that fires whenver a configuratio has been\n\t * registered.\n\t */\n\tonDidRegisterConfiguration: Event<IConfigurationRegistry>;\n\n\t/**\n\t * Returns all configurations contributed to this registry.\n\t */\n\tgetConfigurations(): IConfigurationNode[];\n}\n\nexport interface IConfigurationNode {\n\tid?: string;\n\torder?: number;\n\ttype?: string | string[];\n\ttitle?: string;\n\tdescription?: string;\n\tdefault?: any;\n\tproperties?: { [path: string]: IJSONSchema; };\n\tallOf?: IJSONSchema[];\n\tdefinitions?: { [path: string]: IJSONSchema; };\n}\n\nconst schemaId = 'vscode://schemas/settings';\nconst contributionRegistry = <JSONContributionRegistry.IJSONContributionRegistry>platform.Registry.as(JSONContributionRegistry.Extensions.JSONContribution);\n\nclass ConfigurationRegistry implements IConfigurationRegistry {\n\tprivate configurationContributors: IConfigurationNode[];\n\tprivate configurationSchema: IJSONSchema;\n\tprivate _onDidRegisterConfiguration: Emitter<IConfigurationRegistry>;\n\n\tconstructor() {\n\t\tthis.configurationContributors = [];\n\t\tthis.configurationSchema = { allOf: [] };\n\t\tthis._onDidRegisterConfiguration = new Emitter<IConfigurationRegistry>();\n\n\t\tcontributionRegistry.registerSchema(schemaId, this.configurationSchema);\n\n\t\tcontributionRegistry.addSchemaFileAssociation('vscode://defaultsettings/settings.json', schemaId);\n\t\tcontributionRegistry.addSchemaFileAssociation('%APP_SETTINGS_HOME%/settings.json', schemaId);\n\t\tcontributionRegistry.addSchemaFileAssociation('/.vscode/settings.json', schemaId);\n\t}\n\n\tpublic get onDidRegisterConfiguration() {\n\t\treturn this._onDidRegisterConfiguration.event;\n\t}\n\n\tpublic registerConfiguration(configuration: IConfigurationNode): void {\n\t\tthis.configurationContributors.push(configuration);\n\n\t\tthis.registerJSONConfiguration(configuration);\n\t\tthis._onDidRegisterConfiguration.fire(this);\n\t}\n\n\tpublic getConfigurations(): IConfigurationNode[] {\n\t\treturn this.configurationContributors.slice(0);\n\t}\n\n\tprivate registerJSONConfiguration(configuration: IConfigurationNode) {\n\t\tlet schema = <IJSONSchema>objects.clone(configuration);\n\t\tthis.configurationSchema.allOf.push(schema);\n\t\tcontributionRegistry.registerSchema(schemaId, this.configurationSchema);\n\t}\n}\n\nconst configurationRegistry = new ConfigurationRegistry();\nplatform.Registry.add(Extensions.Configuration, configurationRegistry);\n\nlet configurationExtPoint = ExtensionsRegistry.registerExtensionPoint<IConfigurationNode>('configuration', {\n\tdescription: nls.localize('vscode.extension.contributes.configuration', 'Contributes configuration settings.'),\n\ttype: 'object',\n\tdefaultSnippets: [{ body: { title: '', properties: {} } }],\n\tproperties: {\n\t\ttitle: {\n\t\t\tdescription: nls.localize('vscode.extension.contributes.configuration.title', 'A summary of the settings. This label will be used in the settings file as separating comment.'),\n\t\t\ttype: 'string'\n\t\t},\n\t\tproperties: {\n\t\t\tdescription: nls.localize('vscode.extension.contributes.configuration.properties', 'Description of the configuration properties.'),\n\t\t\ttype: 'object',\n\t\t\tadditionalProperties: {\n\t\t\t\t$ref: 'http://json-schema.org/draft-04/schema#'\n\t\t\t}\n\t\t}\n\t}\n});\n\nconfigurationExtPoint.setHandler((extensions) => {\n\tfor (let i = 0; i < extensions.length; i++) {\n\t\tlet configuration = <IConfigurationNode>extensions[i].value;\n\t\tlet collector = extensions[i].collector;\n\n\t\tif (configuration.type && configuration.type !== 'object') {\n\t\t\tcollector.warn(nls.localize('invalid.type', \"if set, 'configuration.type' must be set to 'object\"));\n\t\t} else {\n\t\t\tconfiguration.type = 'object';\n\t\t}\n\n\t\tif (configuration.title && (typeof configuration.title !== 'string')) {\n\t\t\tcollector.error(nls.localize('invalid.title', \"'configuration.title' must be a string\"));\n\t\t}\n\n\t\tif (configuration.properties && (typeof configuration.properties !== 'object')) {\n\t\t\tcollector.error(nls.localize('invalid.properties', \"'configuration.properties' must be an object\"));\n\t\t\treturn;\n\t\t}\n\t\tlet clonedConfiguration = objects.clone(configuration);\n\t\tclonedConfiguration.id = extensions[i].description.id;\n\t\tconfigurationRegistry.registerConfiguration(clonedConfiguration);\n\t}\n});\n"]}