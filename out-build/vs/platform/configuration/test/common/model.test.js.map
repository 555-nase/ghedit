{"version":3,"file":"vs/platform/configuration/test/common/model.test.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/platform/configuration/test/common/model.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport assert = require('assert');\nimport model = require('vs/platform/configuration/common/model');\n\nsuite('ConfigurationService - Model', () => {\n\n\ttest('simple merge', () => {\n\n\t\tlet base = { 'a': 1, 'b': 2 };\n\t\tmodel.merge(base, { 'a': 3, 'c': 4 }, true);\n\t\tassert.deepEqual(base, { 'a': 3, 'b': 2, 'c': 4 });\n\t\tbase = { 'a': 1, 'b': 2 };\n\t\tmodel.merge(base, { 'a': 3, 'c': 4 }, false);\n\t\tassert.deepEqual(base, { 'a': 1, 'b': 2, 'c': 4 });\n\t});\n\n\n\ttest('Recursive merge', () => {\n\t\tlet base = { 'a': { 'b': 1 } };\n\t\tmodel.merge(base, { 'a': { 'b': 2 } }, true);\n\t\tassert.deepEqual(base, { 'a': { 'b': 2 } });\n\t});\n\n\ttest('Test consolidate (settings)', () => {\n\n\t\tlet config1: model.IConfigFile = {\n\t\t\tcontents: {\n\t\t\t\tawesome: true\n\t\t\t}\n\t\t};\n\t\tlet config2: model.IConfigFile = {\n\t\t\tcontents: {\n\t\t\t\tawesome: false\n\t\t\t}\n\t\t};\n\t\tlet expected = {\n\t\t\tawesome: false\n\t\t};\n\n\t\tassert.deepEqual(model.consolidate({ '.vscode/team.settings.json': config1, '.vscode/settings.json': config2 }).contents, expected);\n\t\tassert.deepEqual(model.consolidate({ 'settings.json': config2, 'team.settings.json': config1 }).contents, {});\n\t\tassert.deepEqual(model.consolidate({ '.vscode/team.settings.json': config1, '.vscode/settings.json': config2, '.vscode/team2.settings.json': config1 }).contents, expected);\n\n\t});\n\n\ttest('Test consolidate (settings and tasks)', () => {\n\n\t\tlet config1: model.IConfigFile = {\n\t\t\tcontents: {\n\t\t\t\tawesome: true\n\t\t\t}\n\t\t};\n\n\t\tlet config2: model.IConfigFile = {\n\t\t\tcontents: {\n\t\t\t\tawesome: false\n\t\t\t}\n\t\t};\n\t\tlet expected = {\n\t\t\tawesome: true,\n\t\t\ttasks: {\n\t\t\t\tawesome: false\n\t\t\t}\n\t\t};\n\n\t\tassert.deepEqual(model.consolidate({ '.vscode/settings.json': config1, '.vscode/tasks.json': config2 }).contents, expected);\n\t});\n});\n"]}