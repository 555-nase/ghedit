{"version":3,"file":"vs/platform/event/common/event.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/platform/event/common/event.ts"],"names":[],"mappings":";IAAA;;;oGAGgG;IAChG,YAAY,CAAC;IAMA,qBAAa,GAAG,+BAAe,CAAgB,cAAc,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {IEventEmitter} from 'vs/base/common/eventEmitter';\nimport {IDisposable} from 'vs/base/common/lifecycle';\nimport {createDecorator, ServiceIdentifier} from 'vs/platform/instantiation/common/instantiation';\n\nexport const IEventService = createDecorator<IEventService>('eventService');\n\nexport interface IEventService {\n\tserviceId: ServiceIdentifier<any>;\n\n\t/**\n\t * Allows to add a listener to the platform event bus for all emitters that are known to the platform.\n\t */\n\taddListener(eventType: string, listener: (event: any) => void): () => void;\n\n\t/**\n\t * Allows to add a listener to the platform event bus for all emitters that are known to the platform.\n\t */\n\taddListener2(eventType: string, listener: (event: any) => void): IDisposable;\n\n\t/**\n\t * Allows to add a listener to an emitter on the platform event bus with the given type identifier.\n\t */\n\taddEmitterTypeListener(eventType: string, emitterType: string, listener: (event: any) => void): () => void;\n\n\t/**\n\t * Allows to add an event emitter to the platform bus such as Events from the emitter\n\t * can be received from all listeners on the bus.\n\t */\n\taddEmitter(eventEmitter: IEventEmitter, emitterType?: string): () => void;\n\n\t/**\n\t * Emits an event of the given type into the platform event bus.\n\t * Note: Instead of emitting directly to the platform bus, it is also possible to register\n\t * as event emitter to the bus using addEmitter() with a emitterType specified. This\n\t * makes it possible to scope Events on the bus to a specific namespace, depending on the\n\t * emitter and avoids polluting the global namespace in the bus with Events.\n\t */\n\temit(eventType: string, e?: any): void;\n}"]}