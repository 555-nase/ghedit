{"version":3,"file":"vs/platform/editor/common/editor.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/platform/editor/common/editor.ts"],"names":[],"mappings":";IAAA;;;oGAGgG;IAChG,YAAY,CAAC;IASA,sBAAc,GAAG,+BAAe,CAAiB,eAAe,CAAC,CAAC;IAyG/E;;OAEG;IACH,WAAY,QAAQ;QAEnB,uFAAuF;QACvF,uCAAQ,CAAA;QAER,oFAAoF;QACpF,2CAAU,CAAA;QAEV,wFAAwF;QACxF,yCAAS,CAAA;IACV,CAAC,EAVW,gBAAQ,KAAR,gBAAQ,QAUnB;IAVD,IAAY,QAAQ,GAAR,gBAUX,CAAA;IAEY,iBAAS,GAAG,CAAC,QAAQ,CAAC,IAAI,EAAE,QAAQ,CAAC,MAAM,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport URI from 'vs/base/common/uri';\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport {IEventEmitter} from 'vs/base/common/eventEmitter';\n\nimport {ISelection} from 'vs/platform/selection/common/selection';\nimport {createDecorator, ServiceIdentifier} from 'vs/platform/instantiation/common/instantiation';\n\nexport const IEditorService = createDecorator<IEditorService>('editorService');\n\nexport interface IEditorService {\n\tserviceId: ServiceIdentifier<any>;\n\t/**\n\t * Specific overload to open an instance of IResourceInput.\n\t */\n\topenEditor(input: IResourceInput, sideBySide?: boolean): TPromise<IEditor>;\n\n\t/**\n\t * Specific overload to resolve a IResourceInput to an editor model with a text representation.\n\t */\n\tresolveEditorModel(input: IResourceInput, refresh?: boolean): TPromise<ITextEditorModel>;\n}\n\nexport interface IEditorModel extends IEventEmitter {\n}\n\nexport interface ITextEditorModel extends IEditorModel {\n\ttextEditorModel: any;\n}\n\nexport interface IResourceInput {\n\n\t/**\n\t * The resource URL of the resource to open.\n\t */\n\tresource: URI;\n\n\t/**\n\t * The mime type of the text input if known.\n\t */\n\tmime?: string;\n\n\t/**\n\t * Optional options to use when opening the text input.\n\t */\n\toptions?: {\n\n\t\t/**\n\t\t * Text editor selection.\n\t\t */\n\t\tselection?: {\n\t\t\tstartLineNumber: number;\n\t\t\tstartColumn: number;\n\t\t\tendLineNumber?: number;\n\t\t\tendColumn?: number;\n\t\t};\n\n\t\t/**\n\t\t * Will force the editor to open even if the input is already showing.\n\t\t */\n\t\tforceOpen?: boolean;\n\n\t\t/**\n\t\t * Will open the editor but not move keyboard focus into the editor.\n\t\t */\n\t\tpreserveFocus?: boolean;\n\n\t\t/**\n\t\t * Ensures that the editor is being activated even if the input is already showing. This only applies\n\t\t * if there is more than one editor open already and preserveFocus is set to false.\n\t\t */\n\t\tforceActive?: boolean;\n\t};\n}\n\nexport interface IEditor {\n\n\t/**\n\t * The assigned input of this editor.\n\t */\n\tinput: IEditorInput;\n\n\t/**\n\t * The assigned options of this editor.\n\t */\n\toptions: IEditorOptions;\n\n\t/**\n\t * The assigned position of this editor.\n\t */\n\tposition: Position;\n\n\t/**\n\t * Returns the unique identifier of this editor.\n\t */\n\tgetId(): string;\n\n\t/**\n\t * Returns the underlying control of this editor.\n\t */\n\tgetControl(): IEventEmitter;\n\n\t/**\n\t * Returns the selection of this editor.\n\t */\n\tgetSelection(): ISelection;\n\n\t/**\n\t * Asks the underlying control to focus.\n\t */\n\tfocus(): void;\n}\n\n/**\n * Possible locations for opening an editor.\n */\nexport enum Position {\n\n\t/** Opens the editor in the LEFT most position replacing the input currently showing */\n\tLEFT = 0,\n\n\t/** Opens the editor in the CENTER position replacing the input currently showing */\n\tCENTER = 1,\n\n\t/** Opens the editor in the RIGHT most position replacing the input currently showing */\n\tRIGHT = 2\n}\n\nexport const POSITIONS = [Position.LEFT, Position.CENTER, Position.RIGHT];\n\nexport interface IEditorInput extends IEventEmitter {\n\n\t/**\n\t * Returns the identifier of this input or null if none.\n\t */\n\tgetId(): string;\n\n\t/**\n\t * Returns the display name of this input.\n\t */\n\tgetName(): string;\n\n\t/**\n\t * Returns if the other object matches this input.\n\t */\n\tmatches(other: any): boolean;\n}\n\nexport interface IEditorOptions {\n\n\t/**\n\t * Returns if the other object matches this options.\n\t */\n\tmatches(other: any): boolean;\n}\n"]}