{"version":3,"file":"vs/platform/thread/common/threadService.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/platform/thread/common/threadService.ts"],"names":[],"mappings":";IAAA;;;oGAGgG;IAChG,YAAY,CAAC;IAKA,oCAA4B,GAAG,qBAAqB,CAAC;IAElE,oBAAoB,KAAU,EAAE,MAAW;QAC1C,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC;YACrB,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,MAAM,CAAC,CAAC,CAAC;gBACzB,MAAM,CAAC,CAAC,CAAC;YACV,CAAC;QACF,CAAC;QACD,MAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAC;IAClD,CAAC;IAED,2BAA2B,GAAQ;QAClC,IAAI,aAAa,GAA0B,GAAG,CAAC,oCAA4B,CAAC,CAAC;QAC7E,EAAE,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;YACpB,MAAM,IAAI,KAAK,CAAC,iFAAiF,CAAC,CAAC;QACpG,CAAC;QACD,MAAM,CAAC,aAAa,CAAC;IACtB,CAAC;IAOD,qBAAqB,IAAc,EAAE,MAAgB,EAAE,mBAAyB,EAAE,QAA4D;QAA5D,wBAA4D,GAA5D,WAAkC,MAAM,CAAC,cAAc,CAAC,IAAI;QAE7I,IAAI,UAAU,GAAG,UAAU,CAAC,IAAI,CAAC,SAAS,EAAE,MAAM,CAAC,EAClD,SAA8B,CAAC;QAEhC,EAAE,CAAC,CAAC,OAAO,mBAAmB,KAAK,UAAU,CAAC,CAAC,CAAC;YAC/C,SAAS,GAAG,mBAAmB,CAAC;QAEjC,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,mBAAmB,KAAK,WAAW,CAAC,CAAC,CAAC;YACvD,QAAQ,GAAG,mBAAmB,CAAC;QAChC,CAAC;QAED,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,GAAG;YAAS,eAAe;iBAAf,WAAe,CAAf,sBAAe,CAAf,IAAe;gBAAf,8BAAe;;YAEpD,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;gBAChB,MAAM,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC,SAAS,CAAC,IAAI,EAAE,UAAU,EAAE,MAAM,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;YAErF,CAAC;YAAC,IAAI,CAAC,CAAC;gBACP,IAAI,MAAI,GAAG,IAAI,EACd,OAAO,GAAG,SAAS,CAAC,IAAI,CAAC,MAAI,CAAC,CAAC;gBAEhC,EAAE,CAAC,CAAC,CAAC,qBAAQ,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;oBAC3B,OAAO,GAAG,qBAAQ,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC;gBAChC,CAAC;gBAED,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC;oBACnB,MAAM,CAAC,iBAAiB,CAAC,MAAI,CAAC,CAAC,SAAS,CAAC,MAAI,EAAE,UAAU,EAAE,MAAM,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;gBACrF,CAAC,CAAC,CAAC;YACJ,CAAC;QAEF,CAAC,CAAC;IACH,CAAC;IAEU,qBAAa,GAAyB,WAAW,CAAC;IAE7D,wBAA+B,IAAc,EAAE,MAAgB;QAC9D,IAAI,UAAU,GAAG,UAAU,CAAC,IAAI,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;QACpD,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,GAAG;YAAS,eAAe;iBAAf,WAAe,CAAf,sBAAe,CAAf,IAAe;gBAAf,8BAAe;;YACpD,MAAM,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC,UAAU,CAAC,IAAI,EAAE,UAAU,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;QAC5E,CAAC,CAAC;IACH,CAAC;IALe,sBAAc,iBAK7B,CAAA","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport thread = require('./thread');\n\nexport const THREAD_SERVICE_PROPERTY_NAME = '__$$__threadService';\n\nfunction findMember(proto: any, target: any): string {\n\tfor (let i in proto) {\n\t\tif (proto[i] === target) {\n\t\t\treturn i;\n\t\t}\n\t}\n\tthrow new Error('Member not found in prototype');\n}\n\nfunction findThreadService(obj: any): thread.IThreadService {\n\tlet threadService: thread.IThreadService = obj[THREAD_SERVICE_PROPERTY_NAME];\n\tif (!threadService) {\n\t\tthrow new Error('Objects that use thread attributes must be instantiated with the thread service');\n\t}\n\treturn threadService;\n}\n\nexport interface IOneWorkerAnnotation {\n\t(type: Function, target: Function, affinity?: thread.ThreadAffinity): void;\n\t(type: Function, target: Function, condition: () => TPromise<any>, affinity?: thread.ThreadAffinity): void;\n}\n\nfunction OneWorkerFn(type: Function, target: Function, conditionOrAffinity?: any, affinity: thread.ThreadAffinity = thread.ThreadAffinity.None): void {\n\n\tlet methodName = findMember(type.prototype, target),\n\t\tcondition: () => TPromise<any>;\n\n\tif (typeof conditionOrAffinity === 'function') {\n\t\tcondition = conditionOrAffinity;\n\n\t} else if (typeof conditionOrAffinity !== 'undefined') {\n\t\taffinity = conditionOrAffinity;\n\t}\n\n\ttype.prototype[methodName] = function(...param: any[]) {\n\n\t\tif (!condition) {\n\t\t\treturn findThreadService(this).OneWorker(this, methodName, target, param, affinity);\n\n\t\t} else {\n\t\t\tlet that = this,\n\t\t\t\tpromise = condition.call(that);\n\n\t\t\tif (!TPromise.is(promise)) {\n\t\t\t\tpromise = TPromise.as(promise);\n\t\t\t}\n\n\t\t\treturn promise.then(function() {\n\t\t\t\treturn findThreadService(that).OneWorker(that, methodName, target, param, affinity);\n\t\t\t});\n\t\t}\n\n\t};\n}\n\nexport let OneWorkerAttr: IOneWorkerAnnotation = OneWorkerFn;\n\nexport function AllWorkersAttr(type: Function, target: Function): void {\n\tlet methodName = findMember(type.prototype, target);\n\ttype.prototype[methodName] = function(...param: any[]) {\n\t\treturn findThreadService(this).AllWorkers(this, methodName, target, param);\n\t};\n}\n\n"]}