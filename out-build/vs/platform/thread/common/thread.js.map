{"version":3,"file":"vs/platform/thread/common/thread.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/platform/thread/common/thread.ts"],"names":[],"mappings":";IAAA;;;oGAGgG;IAChG,YAAY,CAAC;IAMb,mCAAmC;IAEtB,sBAAc,GAAG,aAAa,CAAC,eAAe,CAAiB,eAAe,CAAC,CAAC;IAwB7F;QAAA;QAEA,CAAC;QAAD,wBAAC;IAAD,CAAC,AAFD,IAEC;IAFY,yBAAiB,oBAE7B,CAAA;IAED;QAAA;QAKA,CAAC;QAAD,gCAAC;IAAD,CAAC,AALD,IAKC;IALY,iCAAyB,4BAKrC,CAAA;IAED;QAAA;QA8CA,CAAC;QApCc,eAAK,GAAnB,UAAoB,IAAS;YAC5B,MAAM,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,IAAI,IAAI,CAAC,CAAC;QAC5C,CAAC;QAEa,qBAAW,GAAzB,UAA0B,UAAkB;YAC3C,MAAM,CAAC,UAAS,MAAgB;gBAC/B,SAAS,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;gBACpC,SAAS,CAAC,QAAQ,CAAC,WAAW,CAAC,UAAU,CAAC,GAAG,MAAM,CAAC;gBACpD,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,GAAG,UAAU,CAAC;YAC1C,CAAC,CAAC;QACH,CAAC;QAEa,wBAAc,GAA5B,UAA6B,UAAkB;YAC9C,MAAM,CAAC,UAAS,MAAgB;gBAC/B,SAAS,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;gBACpC,SAAS,CAAC,QAAQ,CAAC,cAAc,CAAC,UAAU,CAAC,GAAG,MAAM,CAAC;gBACvD,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,GAAG,UAAU,CAAC;YAC1C,CAAC,CAAC;QACH,CAAC;QAEa,uBAAa,GAA3B,UAA4B,UAAkB,EAAE,WAA2B;YAC1E,MAAM,CAAC,UAAS,MAAgB;gBAC/B,SAAS,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;gBACpC,SAAS,CAAC,QAAQ,CAAC,aAAa,CAAC,UAAU,CAAC,GAAG;oBAC9C,IAAI,EAAE,MAAM;oBACZ,QAAQ,EAAE,WAAW;iBACrB,CAAC;gBACF,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,GAAG,UAAU,CAAC;YAC1C,CAAC,CAAC;QACH,CAAC;QAEc,uBAAa,GAA5B,UAA6B,UAAkB;YAC9C,EAAE,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,WAAW,CAAC,UAAU,CAAC,IAAI,SAAS,CAAC,QAAQ,CAAC,cAAc,CAAC,UAAU,CAAC,IAAI,SAAS,CAAC,QAAQ,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;gBACjJ,MAAM,IAAI,KAAK,CAAC,sCAAsC,CAAC,CAAC;YACzD,CAAC;QACF,CAAC;QA3Cc,mBAAS,GAAG,iBAAiB,CAAC;QAE/B,kBAAQ,GAAG;YACxB,WAAW,EAAqB,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC;YACnD,cAAc,EAAqB,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC;YACtD,aAAa,EAA6B,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC;SAC7D,CAAC;QAsCH,gBAAC;IAAD,CAAC,AA9CD,IA8CC;IA9CY,iBAAS,YA8CrB,CAAA;IAUD,WAAY,cAAc;QACzB,mDAAQ,CAAA;QACR,uDAAU,CAAA;QACV,uDAAU,CAAA;QACV,uDAAU,CAAA;QACV,uDAAU,CAAA;QACV,uDAAU,CAAA;QACV,uDAAU,CAAA;QACV,uDAAU,CAAA;QACV,uDAAU,CAAA;QACV,uDAAU,CAAA;QACV,kDAAQ,CAAA;IACT,CAAC,EAZW,sBAAc,KAAd,sBAAc,QAYzB;IAZD,IAAY,cAAc,GAAd,sBAYX,CAAA","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport descriptors = require('vs/platform/instantiation/common/descriptors');\nimport instantiation = require('vs/platform/instantiation/common/instantiation');\n\n// --- thread service (web workers)\n\nexport const IThreadService = instantiation.createDecorator<IThreadService>('threadService');\n\nexport interface IThreadService {\n\tserviceId: instantiation.ServiceIdentifier<any>;\n\n\t// --- BEGIN deprecated methods\n\tisInMainThread: boolean;\n\n\taddStatusListener(listener: IThreadServiceStatusListener): void;\n\tremoveStatusListener(listener: IThreadServiceStatusListener): void;\n\n\tOneWorker(obj: IThreadSynchronizableObject, methodName: string, target: Function, param: any[], affinity: ThreadAffinity): TPromise<any>;\n\tAllWorkers(obj: IThreadSynchronizableObject, methodName: string, target: Function, param: any[]): TPromise<any>;\n\n\tcreateInstance<A1, T extends IThreadSynchronizableObject>(ctor: instantiation.IConstructorSignature1<A1, T>, a1: A1): T;\n\tcreateInstance<A1, T extends IThreadSynchronizableObject>(descriptor: descriptors.AsyncDescriptor1<A1, T>, a1: A1): TPromise<T>;\n\n\t// --- END deprecated methods\n\n\tgetRemotable<T>(ctor: instantiation.IConstructorSignature0<T>): T;\n\n\tregisterRemotableInstance(ctor: any, instance: any): void;\n}\n\nexport class IRemotableCtorMap {\n\t[identifier: string]: Function;\n}\n\nexport class IRemotableCtorAffinityMap {\n\t[identifier: string]: {\n\t\tctor: Function;\n\t\taffinity: ThreadAffinity;\n\t};\n}\n\nexport class Remotable {\n\n\tprivate static PROP_NAME = '$__REMOTABLE_ID';\n\n\tpublic static Registry = {\n\t\tMainContext: <IRemotableCtorMap>Object.create(null),\n\t\tExtHostContext: <IRemotableCtorMap>Object.create(null),\n\t\tWorkerContext: <IRemotableCtorAffinityMap>Object.create(null),\n\t};\n\n\tpublic static getId(ctor: any): string {\n\t\treturn (ctor[Remotable.PROP_NAME] || null);\n\t}\n\n\tpublic static MainContext(identifier: string) {\n\t\treturn function(target: Function) {\n\t\t\tRemotable._ensureUnique(identifier);\n\t\t\tRemotable.Registry.MainContext[identifier] = target;\n\t\t\ttarget[Remotable.PROP_NAME] = identifier;\n\t\t};\n\t}\n\n\tpublic static ExtHostContext(identifier: string) {\n\t\treturn function(target: Function) {\n\t\t\tRemotable._ensureUnique(identifier);\n\t\t\tRemotable.Registry.ExtHostContext[identifier] = target;\n\t\t\ttarget[Remotable.PROP_NAME] = identifier;\n\t\t};\n\t}\n\n\tpublic static WorkerContext(identifier: string, whichWorker: ThreadAffinity) {\n\t\treturn function(target: Function) {\n\t\t\tRemotable._ensureUnique(identifier);\n\t\t\tRemotable.Registry.WorkerContext[identifier] = {\n\t\t\t\tctor: target,\n\t\t\t\taffinity: whichWorker\n\t\t\t};\n\t\t\ttarget[Remotable.PROP_NAME] = identifier;\n\t\t};\n\t}\n\n\tprivate static _ensureUnique(identifier: string): void {\n\t\tif (Remotable.Registry.MainContext[identifier] || Remotable.Registry.ExtHostContext[identifier] || Remotable.Registry.WorkerContext[identifier]) {\n\t\t\tthrow new Error('Duplicate Remotable identifier found');\n\t\t}\n\t}\n}\n\nexport interface IThreadSynchronizableObject {\n\tgetId(): string;\n\n\tcreationDone?: () => void;\n\n\tasyncCtor?: () => TPromise<void>;\n}\n\nexport enum ThreadAffinity {\n\tNone = 0,\n\tGroup1 = 1,\n\tGroup2 = 2,\n\tGroup3 = 3,\n\tGroup4 = 4,\n\tGroup5 = 5,\n\tGroup6 = 6,\n\tGroup7 = 7,\n\tGroup8 = 8,\n\tGroup9 = 9,\n\tAll = 10\n}\n\nexport interface IWorkerStatus {\n\tqueueSize: number;\n}\n\nexport interface IThreadServiceStatus {\n\tworkers: IWorkerStatus[];\n}\n\nexport interface IThreadServiceStatusListener {\n\tonThreadServiceStatus(status: IThreadServiceStatus): void;\n}\n"]}