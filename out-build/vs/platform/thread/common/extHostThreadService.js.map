{"version":3,"file":"vs/platform/thread/common/extHostThreadService.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/platform/thread/common/extHostThreadService.ts"],"names":[],"mappings":";;;;;;IAAA;;;oGAGgG;IAChG,YAAY,CAAC;IASb;QAA0C,wCAA2C;QAIpF,8BAAY,SAA4B;YACvC,kBAAM,KAAK,CAAC,CAAC;YAJP,cAAS,GAAG,uBAAc,CAAC;YAKjC,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;YAC5B,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;QACtC,CAAC;QAED,wCAAS,GAAT,UAAU,GAAgC,EAAE,UAAkB,EAAE,MAAgB,EAAE,MAAa,EAAE,QAAwB;YACxH,MAAM,CAAC,qBAAQ,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;QAC1B,CAAC;QAED,yCAAU,GAAV,UAAW,GAAgC,EAAE,UAAkB,EAAE,MAAgB,EAAE,MAAa;YAC/F,MAAM,CAAC,qBAAQ,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;QAC1B,CAAC;QAED,gDAAiB,GAAjB,UAAkB,QAAsC;YACvD,gBAAgB;QACjB,CAAC;QAED,mDAAoB,GAApB,UAAqB,QAAsC;YAC1D,gBAAgB;QACjB,CAAC;QAES,sEAAuC,GAAjD,UAAqD,EAAU,EAAE,UAA0C;YAC1G,MAAM,CAAC,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,UAAU,EAAE,EAAE,EAAE,UAAU,CAAC,CAAC;QACxE,CAAC;QAES,wDAAyB,GAAnC,UAAuC,EAAU,EAAE,KAAQ;YAC1D,MAAM,IAAI,KAAK,CAAC,wCAAwC,CAAC,CAAC;QAC3D,CAAC;QAES,kEAAmC,GAA7C,UAAiD,EAAU,EAAE,UAA0C;YACtG,MAAM,CAAC,IAAI,CAAC,yBAAyB,CAAC,EAAE,EAAE,UAAU,CAAC,CAAC;QACvD,CAAC;QAES,oDAAqB,GAA/B,UAAmC,EAAU,EAAE,KAAQ;YACtD,IAAI,CAAC,sBAAsB,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;QACxC,CAAC;QAES,iEAAkC,GAA5C,UAAgD,EAAU,EAAE,UAA0C,EAAE,WAA2B;YAClI,MAAM,IAAI,KAAK,CAAC,mGAAmG,CAAC,CAAC;QACtH,CAAC;QAES,mDAAoB,GAA9B,UAAkC,EAAU,EAAE,KAAQ;YACrD,MAAM,IAAI,KAAK,CAAC,wCAAwC,CAAC,CAAC;QAC3D,CAAC;QACF,2BAAC;IAAD,CAAC,AAjDD,CAA0C,qBAAqB,CAAC,qBAAqB,GAiDpF;IAjDY,4BAAoB,uBAiDhC,CAAA","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport remote = require('vs/base/common/remote');\nimport descriptors = require('vs/platform/instantiation/common/descriptors');\n\nimport abstractThreadService = require('./abstractThreadService');\nimport {IThreadService, IThreadSynchronizableObject, ThreadAffinity, IThreadServiceStatusListener} from 'vs/platform/thread/common/thread';\n\nexport class ExtHostThreadService extends abstractThreadService.AbstractThreadService implements IThreadService {\n\tpublic serviceId = IThreadService;\n\tprotected _remoteCom: remote.IRemoteCom;\n\n\tconstructor(remoteCom: remote.IRemoteCom) {\n\t\tsuper(false);\n\t\tthis._remoteCom = remoteCom;\n\t\tthis._remoteCom.setManyHandler(this);\n\t}\n\n\tOneWorker(obj: IThreadSynchronizableObject, methodName: string, target: Function, params: any[], affinity: ThreadAffinity): TPromise<any> {\n\t\treturn TPromise.as(null);\n\t}\n\n\tAllWorkers(obj: IThreadSynchronizableObject, methodName: string, target: Function, params: any[]): TPromise<any> {\n\t\treturn TPromise.as(null);\n\t}\n\n\taddStatusListener(listener: IThreadServiceStatusListener): void {\n\t\t// Nothing to do\n\t}\n\n\tremoveStatusListener(listener: IThreadServiceStatusListener): void {\n\t\t// Nothing to do\n\t}\n\n\tprotected _registerAndInstantiateMainProcessActor<T>(id: string, descriptor: descriptors.SyncDescriptor0<T>): T {\n\t\treturn this._getOrCreateProxyInstance(this._remoteCom, id, descriptor);\n\t}\n\n\tprotected _registerMainProcessActor<T>(id: string, actor: T): void {\n\t\tthrow new Error('Not supported in this runtime context!');\n\t}\n\n\tprotected _registerAndInstantiateExtHostActor<T>(id: string, descriptor: descriptors.SyncDescriptor0<T>): T {\n\t\treturn this._getOrCreateLocalInstance(id, descriptor);\n\t}\n\n\tprotected _registerExtHostActor<T>(id: string, actor: T): void {\n\t\tthis._registerLocalInstance(id, actor);\n\t}\n\n\tprotected _registerAndInstantiateWorkerActor<T>(id: string, descriptor: descriptors.SyncDescriptor0<T>, whichWorker: ThreadAffinity): T {\n\t\tthrow new Error('Not supported in this runtime context! Cannot communicate directly from Extension Host to Worker!');\n\t}\n\n\tprotected _registerWorkerActor<T>(id: string, actor: T): void {\n\t\tthrow new Error('Not supported in this runtime context!');\n\t}\n}"]}