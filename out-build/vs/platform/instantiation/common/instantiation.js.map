{"version":3,"file":"instantiation.js","sourceRoot":"","sources":["../../../../../src/vs/platform/instantiation/common/instantiation.ts"],"names":[],"mappings":";IAAA;;;oGAGgG;IAChG,YAAY,CAAC;IAKb,gEAAgE;IAEhE,IAAiB,KAAK,CAarB;IAbD,WAAiB,KAAK,EAAC,CAAC;QAEV,eAAS,GAAG,YAAY,CAAC;QACzB,qBAAe,GAAG,kBAAkB,CAAC;QACrC,iBAAW,GAAG,sBAAsB,CAAC;QAElD,sBAA6B,EAA0B;YACtD,MAAM,CAAC,EAAE,CAAC,iBAAW,CAAC,CAAC;QACxB,CAAC;QAFe,kBAAY,eAE3B,CAAA;QAED,gCAAuC,IAAS;YAC/C,MAAM,CAAC,IAAI,CAAC,qBAAe,CAAC,CAAC;QAC9B,CAAC;QAFe,4BAAsB,yBAErC,CAAA;IACF,CAAC,EAbgB,KAAK,GAAL,aAAK,KAAL,aAAK,QAarB;IAkFU,6BAAqB,GAAG,eAAe,CAAwB,sBAAsB,CAAC,CAAC;IA+FlG;;OAEG;IACH,yBAAmC,SAAiB;QAEnD,IAAI,GAAG,GAAG,UAAS,MAAW,EAAE,GAAW,EAAE,KAAa;YAEzD,EAAE,CAAC,CAAC,SAAS,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;gBAC5B,MAAM,IAAI,KAAK,CAAC,kEAAkE,CAAC,CAAC;YACrF,CAAC;YAED,EAAE,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,KAAK,MAAM,CAAC,CAAC,CAAC;gBACxC,MAAM,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC,IAAI,CAAC,EAAE,WAAA,SAAS,EAAE,OAAA,KAAK,EAAE,CAAC,CAAC;YAC1D,CAAC;YAAC,IAAI,CAAC,CAAC;gBACP,MAAM,CAAC,KAAK,CAAC,eAAe,CAAC,GAAG,CAAC,EAAE,WAAA,SAAS,EAAE,OAAA,KAAK,EAAE,CAAC,CAAC;gBACvD,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,GAAG,MAAM,CAAC;YAClC,CAAC;QACF,CAAC,CAAC;QAEF,GAAG,CAAC,KAAK,CAAC,WAAW,CAAC,GAAG,SAAS,CAAC;QACnC,2BAA2B;QAC3B,MAAM,CAAM,GAAG,CAAC;IACjB,CAAC;IAnBe,uBAAe,kBAmB9B,CAAA","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport * as descriptors from './descriptors';\n\n// ----------------------- internal util -----------------------\n\nexport namespace _util {\n\n\texport const DI_TARGET = '$di$target';\n\texport const DI_DEPENDENCIES = '$di$dependencies';\n\texport const DI_PROVIDES = '$di$provides_service';\n\n\texport function getServiceId(id: ServiceIdentifier<any>): string {\n\t\treturn id[DI_PROVIDES];\n\t}\n\n\texport function getServiceDependencies(ctor: any): { serviceId: string, index: number }[] {\n\t\treturn ctor[DI_DEPENDENCIES];\n\t}\n}\n\n// ----------------------- interfaces -----------------------\n\n\nexport interface IConstructorSignature0<T> {\n\tnew (...services: { serviceId: ServiceIdentifier<any>; }[]): T;\n}\n\nexport interface IConstructorSignature1<A1, T> {\n\tnew (first: A1, ...services: { serviceId: ServiceIdentifier<any>; }[]): T;\n}\n\nexport interface IConstructorSignature2<A1, A2, T> {\n\tnew (first: A1, second: A2, ...services: { serviceId: ServiceIdentifier<any>; }[]): T;\n}\n\nexport interface IConstructorSignature3<A1, A2, A3, T> {\n\tnew (first: A1, second: A2, third: A3, ...services: { serviceId: ServiceIdentifier<any>; }[]): T;\n}\n\nexport interface IConstructorSignature4<A1, A2, A3, A4, T> {\n\tnew (first: A1, second: A2, third: A3, forth: A4, ...services: { serviceId: ServiceIdentifier<any>; }[]): T;\n}\n\nexport interface IConstructorSignature5<A1, A2, A3, A4, A5, T> {\n\tnew (first: A1, second: A2, third: A3, forth: A4, fifth: A5, ...services: { serviceId: ServiceIdentifier<any>; }[]): T;\n}\n\nexport interface IConstructorSignature6<A1, A2, A3, A4, A5, A6, T> {\n\tnew (first: A1, second: A2, third: A3, forth: A4, fifth: A5, sixth: A6, ...services: { serviceId: ServiceIdentifier<any>; }[]): T;\n}\n\nexport interface IConstructorSignature7<A1, A2, A3, A4, A5, A6, A7, T> {\n\tnew (first: A1, second: A2, third: A3, forth: A4, fifth: A5, sixth: A6, seventh: A7, ...services: { serviceId: ServiceIdentifier<any>; }[]): T;\n}\n\nexport interface IConstructorSignature8<A1, A2, A3, A4, A5, A6, A7, A8, T> {\n\tnew (first: A1, second: A2, third: A3, forth: A4, fifth: A5, sixth: A6, seventh: A7, eigth: A8, ...services: { serviceId: ServiceIdentifier<any>; }[]): T;\n}\n\nexport interface ServicesAccessor {\n\tget<T>(id: ServiceIdentifier<T>): T;\n}\n\nexport interface IFunctionSignature0<R> {\n\t(accessor: ServicesAccessor): R;\n}\n\nexport interface IFunctionSignature1<A1, R> {\n\t(accessor: ServicesAccessor, first: A1): R;\n}\n\nexport interface IFunctionSignature2<A1, A2, R> {\n\t(accessor: ServicesAccessor, first: A1, second: A2): R;\n}\n\nexport interface IFunctionSignature3<A1, A2, A3, R> {\n\t(accessor: ServicesAccessor, first: A1, second: A2, third: A3): R;\n}\n\nexport interface IFunctionSignature4<A1, A2, A3, A4, R> {\n\t(accessor: ServicesAccessor, first: A1, second: A2, third: A3, forth: A4): R;\n}\n\nexport interface IFunctionSignature5<A1, A2, A3, A4, A5, R> {\n\t(accessor: ServicesAccessor, first: A1, second: A2, third: A3, forth: A4, fifth: A5): R;\n}\n\nexport interface IFunctionSignature6<A1, A2, A3, A4, A5, A6, R> {\n\t(accessor: ServicesAccessor, first: A1, second: A2, third: A3, forth: A4, fifth: A5, sixth: A6): R;\n}\n\nexport interface IFunctionSignature7<A1, A2, A3, A4, A5, A6, A7, R> {\n\t(accessor: ServicesAccessor, first: A1, second: A2, third: A3, forth: A4, fifth: A5, sixth: A6, seventh: A7): R;\n}\n\nexport interface IFunctionSignature8<A1, A2, A3, A4, A5, A6, A7, A8, R> {\n\t(accessor: ServicesAccessor, first: A1, second: A2, third: A3, forth: A4, fifth: A5, sixth: A6, seventh: A7, eigth: A8): R;\n}\n\n\nexport var IInstantiationService = createDecorator<IInstantiationService>('instantiationService');\n\nexport interface IInstantiationService {\n\tserviceId: ServiceIdentifier<any>;\n\n\t/**\n\t * Returns an instance of the service identified by\n\t * {{id}}. If the service is not known {{undefined}}\n\t * is returned. If the service has not been created\n\t * yet it will be created.\n\t */\n\tgetInstance<T>(id: ServiceIdentifier<T>): T;\n\n\n\t/**\n\t * Synchronously creates an instance that is denoted by\n\t * the descriptor\n\t */\n\tcreateInstance<T>(descriptor: descriptors.SyncDescriptor0<T>): T;\n\tcreateInstance<A1, T>(descriptor: descriptors.SyncDescriptor1<A1, T>, a1: A1): T;\n\tcreateInstance<A1, A2, T>(descriptor: descriptors.SyncDescriptor2<A1, A2, T>, a1: A1, a2: A2): T;\n\tcreateInstance<A1, A2, A3, T>(descriptor: descriptors.SyncDescriptor3<A1, A2, A3, T>, a1: A1, a2: A2, a3: A3): T;\n\tcreateInstance<A1, A2, A3, A4, T>(descriptor: descriptors.SyncDescriptor4<A1, A2, A3, A4, T>, a1: A1, a2: A2, a3: A3, a4: A4): T;\n\tcreateInstance<A1, A2, A3, A4, A5, T>(descriptor: descriptors.SyncDescriptor5<A1, A2, A3, A4, A5, T>, a1: A1, a2: A2, a3: A3, a4: A4, a5: A5): T;\n\tcreateInstance<A1, A2, A3, A4, A5, A6, T>(descriptor: descriptors.SyncDescriptor6<A1, A2, A3, A4, A5, A6, T>, a1: A1, a2: A2, a3: A3, a4: A4, a5: A5, a6: A6): T;\n\tcreateInstance<A1, A2, A3, A4, A5, A6, A7, T>(descriptor: descriptors.SyncDescriptor7<A1, A2, A3, A4, A5, A6, A7, T>, a1: A1, a2: A2, a3: A3, a4: A4, a5: A5, a6: A6, a7: A7): T;\n\tcreateInstance<A1, A2, A3, A4, A5, A6, A7, A8, T>(descriptor: descriptors.SyncDescriptor8<A1, A2, A3, A4, A5, A6, A7, A8, T>, a1: A1, a2: A2, a3: A3, a4: A4, a5: A5, a6: A6, a7: A7, a8: A8): T;\n\n\tcreateInstance<T>(ctor: IConstructorSignature0<T>): T;\n\tcreateInstance<A1, T>(ctor: IConstructorSignature1<A1, T>, first: A1): T;\n\tcreateInstance<A1, A2, T>(ctor: IConstructorSignature2<A1, A2, T>, first: A1, second: A2): T;\n\tcreateInstance<A1, A2, A3, T>(ctor: IConstructorSignature3<A1, A2, A3, T>, first: A1, second: A2, third: A3): T;\n\tcreateInstance<A1, A2, A3, A4, T>(ctor: IConstructorSignature4<A1, A2, A3, A4, T>, first: A1, second: A2, third: A3, fourth: A4): T;\n\tcreateInstance<A1, A2, A3, A4, A5, T>(ctor: IConstructorSignature5<A1, A2, A3, A4, A5, T>, first: A1, second: A2, third: A3, fourth: A4, fifth: A5): T;\n\tcreateInstance<A1, A2, A3, A4, A5, A6, T>(ctor: IConstructorSignature6<A1, A2, A3, A4, A5, A6, T>, first: A1, second: A2, third: A3, fourth: A4, fifth: A5, sixth: A6): T;\n\tcreateInstance<A1, A2, A3, A4, A5, A6, A7, T>(ctor: IConstructorSignature7<A1, A2, A3, A4, A5, A6, A7, T>, first: A1, second: A2, third: A3, fourth: A4, fifth: A5, sixth: A6, seventh: A7): T;\n\tcreateInstance<A1, A2, A3, A4, A5, A6, A7, A8, T>(ctor: IConstructorSignature8<A1, A2, A3, A4, A5, A6, A7, A8, T>, first: A1, second: A2, third: A3, fourth: A4, fifth: A5, sixth: A6, seventh: A7, eigth: A8): T;\n\n\t/**\n\t * Asynchronously creates an instance that is denoted by\n\t * the descriptor\n\t */\n\tcreateInstance<T>(descriptor: descriptors.AsyncDescriptor0<T>): TPromise<T>;\n\tcreateInstance<A1, T>(descriptor: descriptors.AsyncDescriptor1<A1, T>, a1: A1): TPromise<T>;\n\tcreateInstance<A1, A2, T>(descriptor: descriptors.AsyncDescriptor2<A1, A2, T>, a1: A1, a2: A2): TPromise<T>;\n\tcreateInstance<A1, A2, A3, T>(descriptor: descriptors.AsyncDescriptor3<A1, A2, A3, T>, a1: A1, a2: A2, a3: A3): TPromise<T>;\n\tcreateInstance<A1, A2, A3, A4, T>(descriptor: descriptors.AsyncDescriptor4<A1, A2, A3, A4, T>, a1: A1, a2: A2, a3: A3, a4: A4): TPromise<T>;\n\tcreateInstance<A1, A2, A3, A4, A5, T>(descriptor: descriptors.AsyncDescriptor5<A1, A2, A3, A4, A5, T>, a1: A1, a2: A2, a3: A3, a4: A4, a5: A5): TPromise<T>;\n\tcreateInstance<A1, A2, A3, A4, A5, A6, T>(descriptor: descriptors.AsyncDescriptor6<A1, A2, A3, A4, A5, A6, T>, a1: A1, a2: A2, a3: A3, a4: A4, a5: A5, a6: A6): TPromise<T>;\n\tcreateInstance<A1, A2, A3, A4, A5, A6, A7, T>(descriptor: descriptors.AsyncDescriptor7<A1, A2, A3, A4, A5, A6, A7, T>, a1: A1, a2: A2, a3: A3, a4: A4, a5: A5, a6: A6, a7: A7): TPromise<T>;\n\tcreateInstance<A1, A2, A3, A4, A5, A6, A7, A8, T>(descriptor: descriptors.AsyncDescriptor8<A1, A2, A3, A4, A5, A6, A7, A8, T>, a1: A1, a2: A2, a3: A3, a4: A4, a5: A5, a6: A6, a7: A7, a8: A8): TPromise<T>;\n\n\tcreateInstance<T>(descriptor: descriptors.AsyncDescriptor<T>, ...args: any[]): TPromise<T>;\n\n\t/**\n\t *\n\t */\n\tinvokeFunction<R>(ctor: IFunctionSignature0<R>): R;\n\tinvokeFunction<A1, R>(ctor: IFunctionSignature1<A1, R>, first: A1): R;\n\tinvokeFunction<A1, A2, R>(ctor: IFunctionSignature2<A1, A2, R>, first: A1, second: A2): R;\n\tinvokeFunction<A1, A2, A3, R>(ctor: IFunctionSignature3<A1, A2, A3, R>, first: A1, second: A2, third: A3): R;\n\tinvokeFunction<A1, A2, A3, A4, R>(ctor: IFunctionSignature4<A1, A2, A3, A4, R>, first: A1, second: A2, third: A3, fourth: A4): R;\n\tinvokeFunction<A1, A2, A3, A4, A5, R>(ctor: IFunctionSignature5<A1, A2, A3, A4, A5, R>, first: A1, second: A2, third: A3, fourth: A4, fifth: A5): R;\n\tinvokeFunction<A1, A2, A3, A4, A5, A6, R>(ctor: IFunctionSignature6<A1, A2, A3, A4, A5, A6, R>, first: A1, second: A2, third: A3, fourth: A4, fifth: A5, sixth: A6): R;\n\tinvokeFunction<A1, A2, A3, A4, A5, A6, A7, R>(ctor: IFunctionSignature7<A1, A2, A3, A4, A5, A6, A7, R>, first: A1, second: A2, third: A3, fourth: A4, fifth: A5, sixth: A6, seventh: A7): R;\n\tinvokeFunction<A1, A2, A3, A4, A5, A6, A7, A8, R>(ctor: IFunctionSignature8<A1, A2, A3, A4, A5, A6, A7, A8, R>, first: A1, second: A2, third: A3, fourth: A4, fifth: A5, sixth: A6, seventh: A7, eigth: A8): R;\n\n\t/**\n\t * Creates a child of this service which inherts all current services\n\t * and adds/overwrites the given services\n\t */\n\tcreateChild(services: any): IInstantiationService;\n\n\t/**\n\t * Registers a new service to this instantation service.\n\t */\n\tregisterService(name: string, service: any): void;\n\n\t/**\n\t * Adds a service or a descriptor to the collection of services and\n\t * treats it as a singleton which means every consumer will receive\n\t * the same instance.\n\t */\n\taddSingleton<T>(id: ServiceIdentifier<T>, instanceOrDescriptor: T | descriptors.SyncDescriptor<T>): void;\n}\n\n\n/**\n * Identifies a service of type T\n */\nexport interface ServiceIdentifier<T> {\n\t(...args: any[]): void;\n\ttype: T;\n}\n\n/**\n * A *only* valid way to create a {{ServiceIdentifier}}.\n */\nexport function createDecorator<T>(serviceId: string): { (...args: any[]): void; type: T; } {\n\n\tlet ret = function(target: any, key: string, index: number): any {\n\n\t\tif (arguments.length !== 3) {\n\t\t\tthrow new Error('@IServiceName-decorator can only be used to decorate a parameter');\n\t\t}\n\n\t\tif (target[_util.DI_TARGET] === target) {\n\t\t\ttarget[_util.DI_DEPENDENCIES].push({ serviceId, index });\n\t\t} else {\n\t\t\ttarget[_util.DI_DEPENDENCIES] = [{ serviceId, index }];\n\t\t\ttarget[_util.DI_TARGET] = target;\n\t\t}\n\t};\n\n\tret[_util.DI_PROVIDES] = serviceId;\n\t// ret['type'] = undefined;\n\treturn <any>ret;\n}\n\n/**\n * A service context which can be used to retrieve services\n * given a valid service identifer is being presented\n */\nexport interface Context {\n\tget<T>(id: ServiceIdentifier<T>): T;\n}\n"]}