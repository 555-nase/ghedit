{"version":3,"file":"extensions.js","sourceRoot":"","sources":["../../../../../src/vs/platform/instantiation/common/extensions.ts"],"names":[],"mappings":";IAAA;;;oGAGgG;IAChG,YAAY,CAAC;IAKA,gBAAQ,GAAG,aAAa,CAAC;IAOtC,IAAM,SAAS,GAAgC,EAAE,CAAC;IAElD,2BAAqC,EAAwB,EAAE,IAA+B;QAC7F,SAAS,CAAC,IAAI,CAAC,EAAE,IAAA,EAAE,EAAE,UAAU,EAAE,IAAI,4BAAc,CAAI,IAAI,CAAC,EAAE,CAAC,CAAC;IACjE,CAAC;IAFe,yBAAiB,oBAEhC,CAAA;IAED;QACC,MAAM,CAAC,SAAS,CAAC;IAClB,CAAC;IAFe,mBAAW,cAE1B,CAAA","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {SyncDescriptor} from './descriptors';\nimport {ServiceIdentifier, IConstructorSignature0} from './instantiation';\n\nexport const Services = 'di.services';\n\nexport interface IServiceContribution<T> {\n\tid: ServiceIdentifier<T>;\n\tdescriptor: SyncDescriptor<T>;\n}\n\nconst _registry: IServiceContribution<any>[] = [];\n\nexport function registerSingleton<T>(id: ServiceIdentifier<T>, ctor: IConstructorSignature0<T>): void {\n\t_registry.push({ id, descriptor: new SyncDescriptor<T>(ctor) });\n}\n\nexport function getServices(): IServiceContribution<any>[] {\n\treturn _registry;\n}"]}