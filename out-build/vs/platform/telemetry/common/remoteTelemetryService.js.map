{"version":3,"file":"remoteTelemetryService.js","sourceRoot":"","sources":["../../../../../src/vs/platform/telemetry/common/remoteTelemetryService.ts"],"names":[],"mappings":";;;;;;;;;;IAAA;;;oGAGgG;IAChG,YAAY,CAAC;IAOb;;OAEG;IAEH;QAIC,sCAAgC,gBAAmC;YAClE,IAAI,CAAC,iBAAiB,GAAG,gBAAgB,CAAC;QAC3C,CAAC;QAEM,iDAAU,GAAjB,UAAkB,SAAiB,EAAE,IAAU;YAC9C,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;QACnD,CAAC;QAEM,wDAAiB,GAAxB;YACC,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,gBAAgB,EAAE,CAAC;QAClD,CAAC;QAfF;YAAC,kBAAS,CAAC,WAAW,CAAC,8BAA8B,CAAC;uBAKvC,6BAAiB;wCALsB;QAgBtD,mCAAC;IAAD,CAAC,AAfD,IAeC;IAfY,oCAA4B,+BAexC,CAAA;IAED;QAOC,gCAAY,IAAY,EAAE,aAA6B;YACtD,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;YAClB,IAAI,CAAC,MAAM,GAAG,aAAa,CAAC,YAAY,CAAC,4BAA4B,CAAC,CAAC;QACxE,CAAC;QAED,iDAAgB,GAAhB;YACC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,iBAAiB,EAAE,CAAC;QACxC,CAAC;QAED,0CAAS,GAAT,UAAU,SAAiB,EAAE,IAAU;YACtC,IAAI,GAAG,IAAI,IAAI,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YACnC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC;YACxB,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;QACzC,CAAC;QAED,+CAAc,GAAd;YACC,MAAM,uBAAc,EAAE,CAAC;QACxB,CAAC;QAED,qDAAoB,GAApB;YACC,MAAM,uBAAc,EAAE,CAAC;QACxB,CAAC;QACF,6BAAC;IAAD,CAAC,AA7BD,IA6BC;IA7BY,8BAAsB,yBA6BlC,CAAA","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {notImplemented} from 'vs/base/common/errors';\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport {ITelemetryService, ITelemetryInfo} from 'vs/platform/telemetry/common/telemetry';\nimport {Remotable, IThreadService} from 'vs/platform/thread/common/thread';\n\n/**\n * Helper always instantiated in the main process to receive telemetry events from remote telemetry services\n */\n@Remotable.MainContext('RemoteTelemetryServiceHelper')\nexport class RemoteTelemetryServiceHelper {\n\n\tprivate _telemetryService: ITelemetryService;\n\n\tconstructor( @ITelemetryService telemetryService: ITelemetryService) {\n\t\tthis._telemetryService = telemetryService;\n\t}\n\n\tpublic $publicLog(eventName: string, data?: any): void {\n\t\tthis._telemetryService.publicLog(eventName, data);\n\t}\n\n\tpublic $getTelemetryInfo(): TPromise<ITelemetryInfo> {\n\t\treturn this._telemetryService.getTelemetryInfo();\n\t}\n}\n\nexport class RemoteTelemetryService implements ITelemetryService {\n\n\tserviceId: any;\n\n\tprivate _name: string;\n\tprivate _proxy: RemoteTelemetryServiceHelper;\n\n\tconstructor(name: string, threadService: IThreadService) {\n\t\tthis._name = name;\n\t\tthis._proxy = threadService.getRemotable(RemoteTelemetryServiceHelper);\n\t}\n\n\tgetTelemetryInfo(): TPromise<ITelemetryInfo> {\n\t\treturn this._proxy.$getTelemetryInfo();\n\t}\n\n\tpublicLog(eventName: string, data?: any): void {\n\t\tdata = data || Object.create(null);\n\t\tdata[this._name] = true;\n\t\tthis._proxy.$publicLog(eventName, data);\n\t}\n\n\ttimedPublicLog(): any {\n\t\tthrow notImplemented();\n\t}\n\n\taddTelemetryAppender(): any {\n\t\tthrow notImplemented();\n\t}\n}\n"]}