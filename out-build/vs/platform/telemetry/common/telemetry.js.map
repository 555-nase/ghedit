{"version":3,"file":"vs/platform/telemetry/common/telemetry.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/platform/telemetry/common/telemetry.ts"],"names":[],"mappings":";IAAA;;;oGAGgG;IAChG,YAAY,CAAC;IAQA,yBAAiB,GAAG,+BAAe,CAAoB,kBAAkB,CAAC,CAAC;IA2B3E,mBAAW,GAAG;QAC1B,kBAAkB,EAAE,qBAAqB;KACzC,CAAC;IAOW,4BAAoB,GAAsB;QACtD,SAAS,EAAE,SAAS;QACpB,cAAc,YAAC,IAAY,EAAE,IAAU,IAAiB,MAAM,CAAC,iBAAS,CAAC,CAAC,CAAC;QAC3E,SAAS,YAAC,SAAiB,EAAE,IAAU,IAAU,CAAC;QAClD,oBAAoB,YAAC,QAAQ,IAAiB,MAAM,CAAC,EAAE,OAAO,gBAAK,CAAC,EAAE,CAAC,CAAC,CAAC;QACzE,gBAAgB;YACf,MAAM,CAAC,qBAAQ,CAAC,EAAE,CAAC;gBAClB,UAAU,EAAE,sBAAsB;gBAClC,SAAS,EAAE,qBAAqB;gBAChC,SAAS,EAAE,qBAAqB;aAChC,CAAC,CAAC;QACJ,CAAC;KACD,CAAC;IAMF;QAIC;YACC,IAAI,CAAC,uBAAuB,GAAG,EAAE,CAAC;QACnC,CAAC;QAEM,wEAAmC,GAA1C,UAA2C,IAAgD;YAC1F,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACzC,CAAC;QAEM,6CAAQ,GAAf,UAAgB,oBAA2C;YAC1D,IAAM,OAAO,GAAG,oBAAoB,CAAC,WAAW,CAAC,yBAAiB,CAAC,CAAC;YACpE,GAAG,CAAC,CAAa,UAA4B,EAA5B,KAAA,IAAI,CAAC,uBAAuB,EAA5B,cAA4B,EAA5B,IAA4B,CAAC;gBAAzC,IAAI,IAAI,SAAA;gBACZ,IAAM,QAAQ,GAAG,oBAAoB,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;gBAC3D,OAAO,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAC;aACvC;YAED,wBAAwB;YACxB,IAAI,CAAC,uBAAuB,GAAG,SAAS,CAAC;QAC1C,CAAC;QACF,iCAAC;IAAD,CAAC,AAtBD,IAsBC;IAtBY,kCAA0B,6BAsBtC,CAAA;IAED,mBAAQ,CAAC,GAAG,CAAC,mBAAW,CAAC,kBAAkB,EAAE,IAAI,0BAA0B,EAAE,CAAC,CAAC;IAE/E,WAAW;IAEX,mBAA0B,KAAa;QACtC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YACZ,MAAM,CAAC,KAAK,CAAC;QACd,CAAC;QAED,IAAI,CAAC,GAAG,EAAE,CAAC;QACX,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YACvC,IAAI,EAAE,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;YAClB,EAAE,CAAC,CAAC,EAAE,IAAI,GAAG,IAAI,EAAE,IAAI,GAAG,CAAC,CAAC,CAAC;gBAC5B,CAAC,IAAI,GAAG,CAAC;gBACT,QAAQ,CAAC;YACV,CAAC;YACD,EAAE,CAAC,CAAC,EAAE,IAAI,GAAG,IAAI,EAAE,IAAI,GAAG,CAAC,CAAC,CAAC;gBAC5B,CAAC,IAAI,GAAG,CAAC;gBACT,QAAQ,CAAC;YACV,CAAC;YACD,EAAE,CAAC,CAAC,EAAE,IAAI,GAAG,IAAI,EAAE,IAAI,GAAG,CAAC,CAAC,CAAC;gBAC5B,CAAC,IAAI,GAAG,CAAC;gBACT,QAAQ,CAAC;YACV,CAAC;YACD,CAAC,IAAI,EAAE,CAAC;QACT,CAAC;QACD,MAAM,CAAC,CAAC,CAAC;IACV,CAAC;IAvBe,iBAAS,YAuBxB,CAAA","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {Registry} from 'vs/platform/platform';\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport {IDisposable} from 'vs/base/common/lifecycle';\nimport {ITimerEvent, nullEvent} from 'vs/base/common/timer';\nimport {createDecorator, ServiceIdentifier, IInstantiationService, IConstructorSignature0} from 'vs/platform/instantiation/common/instantiation';\n\nexport const ITelemetryService = createDecorator<ITelemetryService>('telemetryService');\n\nexport interface ITelemetryInfo {\n\tsessionId: string;\n\tmachineId: string;\n\tinstanceId: string;\n}\n\nexport interface ITelemetryService {\n\tserviceId: ServiceIdentifier<any>;\n\n\t/**\n\t * Sends a telemetry event that has been privacy approved.\n\t * Do not call this unless you have been given approval.\n\t */\n\tpublicLog(eventName: string, data?: any): void;\n\n\t/**\n\t * Starts a telemetry timer. Call stop() to send the event.\n\t */\n\ttimedPublicLog(name: string, data?: any): ITimerEvent;\n\n\tgetTelemetryInfo(): TPromise<ITelemetryInfo>;\n\n\taddTelemetryAppender(appender: ITelemetryAppender): IDisposable;\n}\n\nexport const Extenstions = {\n\tTelemetryAppenders: 'telemetry.appenders'\n};\n\nexport interface ITelemetryAppendersRegistry {\n\tregisterTelemetryAppenderDescriptor(ctor: IConstructorSignature0<ITelemetryAppender>): void;\n\tactivate(instantiationService: IInstantiationService): void;\n}\n\nexport const NullTelemetryService: ITelemetryService = {\n\tserviceId: undefined,\n\ttimedPublicLog(name: string, data?: any): ITimerEvent { return nullEvent; },\n\tpublicLog(eventName: string, data?: any): void { },\n\taddTelemetryAppender(appender): IDisposable { return { dispose() { } }; },\n\tgetTelemetryInfo(): TPromise<ITelemetryInfo> {\n\t\treturn TPromise.as({\n\t\t\tinstanceId: 'someValue.instanceId',\n\t\t\tsessionId: 'someValue.sessionId',\n\t\t\tmachineId: 'someValue.machineId'\n\t\t});\n\t}\n};\n\nexport interface ITelemetryAppender extends IDisposable {\n\tlog(eventName: string, data?: any): void;\n}\n\nexport class TelemetryAppendersRegistry implements ITelemetryAppendersRegistry {\n\n\tprivate _telemetryAppenderCtors: IConstructorSignature0<ITelemetryAppender>[];\n\n\tconstructor() {\n\t\tthis._telemetryAppenderCtors = [];\n\t}\n\n\tpublic registerTelemetryAppenderDescriptor(ctor: IConstructorSignature0<ITelemetryAppender>): void {\n\t\tthis._telemetryAppenderCtors.push(ctor);\n\t}\n\n\tpublic activate(instantiationService: IInstantiationService): void {\n\t\tconst service = instantiationService.getInstance(ITelemetryService);\n\t\tfor (let ctor of this._telemetryAppenderCtors) {\n\t\t\tconst instance = instantiationService.createInstance(ctor);\n\t\t\tservice.addTelemetryAppender(instance);\n\t\t}\n\n\t\t// can only be done once\n\t\tthis._telemetryAppenderCtors = undefined;\n\t}\n}\n\nRegistry.add(Extenstions.TelemetryAppenders, new TelemetryAppendersRegistry());\n\n// --- util\n\nexport function anonymize(input: string): string {\n\tif (!input) {\n\t\treturn input;\n\t}\n\n\tlet r = '';\n\tfor (let i = 0; i < input.length; i++) {\n\t\tlet ch = input[i];\n\t\tif (ch >= '0' && ch <= '9') {\n\t\t\tr += '0';\n\t\t\tcontinue;\n\t\t}\n\t\tif (ch >= 'a' && ch <= 'z') {\n\t\t\tr += 'a';\n\t\t\tcontinue;\n\t\t}\n\t\tif (ch >= 'A' && ch <= 'Z') {\n\t\t\tr += 'A';\n\t\t\tcontinue;\n\t\t}\n\t\tr += ch;\n\t}\n\treturn r;\n}"]}