{"version":3,"file":"vs/platform/telemetry/common/errorTelemetry.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/platform/telemetry/common/errorTelemetry.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport {binarySearch} from 'vs/base/common/arrays';\nimport {globals} from 'vs/base/common/platform';\nimport {ITelemetryService} from 'vs/platform/telemetry/common/telemetry';\nimport {IDisposable, toDisposable, dispose} from 'vs/base/common/lifecycle';\nimport Errors = require('vs/base/common/errors');\nimport {safeStringify} from 'vs/base/common/objects';\n\ninterface ErrorEvent {\n\tstack: string;\n\tmessage?: string;\n\tfilename?: string;\n\tline?: number;\n\tcolumn?: number;\n\terror?: { name: string; message: string; };\n\n\tcount?: number;\n}\n\nnamespace ErrorEvent {\n\texport function compare(a: ErrorEvent, b: ErrorEvent) {\n\t\tif (a.stack < b.stack) {\n\t\t\treturn -1;\n\t\t} else if (a.stack > b.stack) {\n\t\t\treturn 1;\n\t\t}\n\t\treturn 0;\n\t}\n}\n\nexport default class ErrorTelemetry {\n\n\tprivate _telemetryService: ITelemetryService;\n\tprivate _flushDelay: number;\n\tprivate _flushHandle = -1;\n\tprivate _buffer: ErrorEvent[] = [];\n\tprivate _disposables: IDisposable[] = [];\n\n\tconstructor(telemetryService: ITelemetryService, flushDelay) {\n\t\tthis._telemetryService = telemetryService;\n\t\tthis._flushDelay = flushDelay;\n\n\t\t// (1) check for unexpected but handled errors\n\t\tconst unbind = Errors.errorHandler.addListener((err) => this._onErrorEvent(err));\n\t\tthis._disposables.push(toDisposable(unbind));\n\n\t\t// (2) check for uncaught global errors\n\t\tlet oldOnError: Function;\n\t\tlet that = this;\n\t\tif (typeof globals.onerror === 'function') {\n\t\t\toldOnError = globals.onerror;\n\t\t}\n\t\tglobals.onerror = function (message: string, filename: string, line: number, column?: number, e?: any) {\n\t\t\tthat._onUncaughtError(message, filename, line, column, e);\n\t\t\tif (oldOnError) {\n\t\t\t\toldOnError.apply(this, arguments);\n\t\t\t}\n\t\t};\n\t\tthis._disposables.push(toDisposable(function () {\n\t\t\tif (oldOnError) {\n\t\t\t\tglobals.onerror = oldOnError;\n\t\t\t}\n\t\t}));\n\t}\n\n\tdispose() {\n\t\tclearTimeout(this._flushHandle);\n\t\tthis._flushBuffer();\n\t\tthis._disposables = dispose(this._disposables);\n\t}\n\n\tprivate _onErrorEvent(err: any): void {\n\n\t\tif (!err) {\n\t\t\treturn;\n\t\t}\n\n\t\t// unwrap nested errors from loader\n\t\tif (err.detail && err.detail.stack) {\n\t\t\terr = err.detail;\n\t\t}\n\n\t\t// work around behavior in workerServer.ts that breaks up Error.stack\n\t\tlet stack = Array.isArray(err.stack) ? err.stack.join('\\n') : err.stack;\n\t\tlet message = err.message ? err.message : safeStringify(err);\n\n\t\t// errors without a stack are not useful telemetry\n\t\tif (!stack) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._enqueue({ message, stack });\n\t}\n\n\tprivate _onUncaughtError(message: string, filename: string, line: number, column?: number, err?: any): void {\n\n\t\tlet data: ErrorEvent = {\n\t\t\tstack: message,\n\t\t\tmessage,\n\t\t\tfilename,\n\t\t\tline,\n\t\t\tcolumn\n\t\t};\n\n\t\tif (err) {\n\t\t\tlet {name, message, stack} = err;\n\t\t\tdata.error = { name, message };\n\t\t\tif (stack) {\n\t\t\t\tdata.stack = Array.isArray(err.stack)\n\t\t\t\t\t? err.stack = err.stack.join('\\n')\n\t\t\t\t\t: err.stack;\n\t\t\t}\n\t\t}\n\n\t\tthis._enqueue(data);\n\t}\n\n\tprivate _enqueue(e: ErrorEvent): void {\n\n\t\tconst idx = binarySearch(this._buffer, e, ErrorEvent.compare);\n\t\tif (idx < 0) {\n\t\t\te.count = 1;\n\t\t\tthis._buffer.splice(~idx, 0, e);\n\t\t} else {\n\t\t\tthis._buffer[idx].count += 1;\n\t\t}\n\n\t\tif (this._flushHandle === -1) {\n\t\t\tthis._flushHandle = setTimeout(() => {\n\t\t\t\tthis._flushBuffer();\n\t\t\t\tthis._flushHandle = -1;\n\t\t\t}, this._flushDelay);\n\t\t}\n\t}\n\n\tprivate _flushBuffer(): void {\n\t\tfor (let error of this._buffer) {\n\t\t\tthis._telemetryService.publicLog('UnhandledError', error);\n\t\t}\n\t\tthis._buffer.length = 0;\n\t}\n}\n"]}