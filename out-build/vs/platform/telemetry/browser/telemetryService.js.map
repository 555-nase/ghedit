{"version":3,"file":"vs/platform/telemetry/browser/telemetryService.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/platform/telemetry/browser/telemetryService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport * as Platform from 'vs/base/common/platform';\nimport * as uuid from 'vs/base/common/uuid';\nimport {ITelemetryService, ITelemetryAppender, ITelemetryInfo} from 'vs/platform/telemetry/common/telemetry';\nimport ErrorTelemetry from 'vs/platform/telemetry/common/errorTelemetry';\nimport {IdleMonitor, UserStatus} from 'vs/base/browser/idleMonitor';\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport {IDisposable, dispose} from 'vs/base/common/lifecycle';\nimport {TimeKeeper, ITimerEvent} from 'vs/base/common/timer';\nimport {withDefaults, cloneAndChange} from 'vs/base/common/objects';\n\nexport interface ITelemetryServiceConfig {\n\tuserOptIn?: boolean;\n\n\tenableHardIdle?: boolean;\n\tenableSoftIdle?: boolean;\n\tsessionID?: string;\n\tcommitHash?: string;\n\tversion?: string;\n\n\tcleanupPatterns?: [RegExp,string][];\n}\n\nexport class TelemetryService implements ITelemetryService {\n\n\t// how long of inactivity before a user is considered 'inactive' - 2 minutes\n\tpublic static SOFT_IDLE_TIME = 2 * 60 * 1000;\n\tpublic static IDLE_START_EVENT_NAME = 'UserIdleStart';\n\tpublic static IDLE_STOP_EVENT_NAME = 'UserIdleStop';\n\n\tpublic static ERROR_FLUSH_TIMEOUT: number = 5 * 1000;\n\n\tpublic serviceId = ITelemetryService;\n\n\tprotected _telemetryInfo: ITelemetryInfo;\n\tprotected _configuration: ITelemetryServiceConfig;\n\tprotected _appenders: ITelemetryAppender[] = [];\n\tprotected _disposables: IDisposable[] = [];\n\n\tprivate _timeKeeper: TimeKeeper;\n\tprivate _hardIdleMonitor: IdleMonitor;\n\tprivate _softIdleMonitor: IdleMonitor;\n\tprivate _eventCount = 0;\n\tprivate _startTime = new Date();\n\tprivate _optInFriendly = ['optInStatus']; //holds a cache of predefined events that can be sent regardress of user optin status\n\tprivate _userIdHash: string;\n\n\tconstructor(config?: ITelemetryServiceConfig) {\n\t\tthis._configuration = withDefaults(config, <ITelemetryServiceConfig>{\n\t\t\tcleanupPatterns: [],\n\t\t\tsessionID: uuid.generateUuid() + Date.now(),\n\t\t\tenableHardIdle: true,\n\t\t\tenableSoftIdle: true,\n\t\t\tuserOptIn: true,\n\t\t});\n\n\t\t// static cleanup patterns for:\n\t\t// #1 `file:///DANGEROUS/PATH/resources/app/Useful/Information`\n\t\t// #2 // Any other file path that doesn't match the approved form above should be cleaned.\n\t\t// #3 \"Error: ENOENT; no such file or directory\" is often followed with PII, clean it\n\t\tthis._configuration.cleanupPatterns.push(\n\t\t\t[/file:\\/\\/\\/.*?\\/resources\\/app\\//gi, '<APP_ROOT>'],\n\t\t\t[/file:\\/\\/\\/.*/gi, '<SOME_FILE_URI>'],\n\t\t\t[/ENOENT: no such file or directory.*?\\'([^\\']+)\\'/gi, 'ENOENT: no such file or directory']\n\t\t);\n\n\t\tthis._telemetryInfo = {\n\t\t\tsessionId: this._configuration.sessionID,\n\t\t\tinstanceId: undefined,\n\t\t\tmachineId: undefined\n\t\t};\n\n\t\tthis._timeKeeper = new TimeKeeper();\n\t\tthis._disposables.push(this._timeKeeper);\n\t\tthis._disposables.push(this._timeKeeper.addListener(events => this._onTelemetryTimerEventStop(events)));\n\n\t\tconst errorTelemetry = new ErrorTelemetry(this, TelemetryService.ERROR_FLUSH_TIMEOUT);\n\t\tthis._disposables.push(errorTelemetry);\n\n\t\tif (this._configuration.enableHardIdle) {\n\t\t\tthis._hardIdleMonitor = new IdleMonitor();\n\t\t\tthis._disposables.push(this._hardIdleMonitor);\n\t\t}\n\t\tif (this._configuration.enableSoftIdle) {\n\t\t\tthis._softIdleMonitor = new IdleMonitor(TelemetryService.SOFT_IDLE_TIME);\n\t\t\tthis._softIdleMonitor.addOneTimeActiveListener(() => this._onUserActive());\n\t\t\tthis._softIdleMonitor.addOneTimeIdleListener(() => this._onUserIdle());\n\t\t\tthis._disposables.push(this._softIdleMonitor);\n\t\t}\n\t}\n\n\tprivate _onUserIdle(): void {\n\t\tthis.publicLog(TelemetryService.IDLE_START_EVENT_NAME);\n\t\tthis._softIdleMonitor.addOneTimeIdleListener(() => this._onUserIdle());\n\t}\n\n\tprivate _onUserActive(): void {\n\t\tthis.publicLog(TelemetryService.IDLE_STOP_EVENT_NAME);\n\t\tthis._softIdleMonitor.addOneTimeActiveListener(() => this._onUserActive());\n\t}\n\n\tprivate _onTelemetryTimerEventStop(events: ITimerEvent[]): void {\n\t\tfor (let i = 0; i < events.length; i++) {\n\t\t\tlet event = events[i];\n\t\t\tlet data = event.data || {};\n\t\t\tdata.duration = event.timeTaken();\n\t\t\tthis.publicLog(event.name, data);\n\t\t}\n\t}\n\n\tpublic getTelemetryInfo(): TPromise<ITelemetryInfo> {\n\t\treturn TPromise.as(this._telemetryInfo);\n\t}\n\n\tpublic dispose(): void {\n\t\tthis._disposables = dispose(this._disposables);\n\t\tfor (let appender of this._appenders) {\n\t\t\tappender.dispose();\n\t\t}\n\t}\n\n\tpublic timedPublicLog(name: string, data?: any): ITimerEvent {\n\t\tlet topic = 'public';\n\t\tlet event = this._timeKeeper.start(topic, name);\n\t\tif (data) {\n\t\t\tevent.data = data;\n\t\t}\n\t\treturn event;\n\t}\n\n\tpublic publicLog(eventName: string, data?: any): void {\n\t\tthis._handleEvent(eventName, data);\n\t}\n\n\tprivate _handleEvent(eventName: string, data?: any): void {\n\t\tif (this._hardIdleMonitor && this._hardIdleMonitor.getStatus() === UserStatus.Idle) {\n\t\t\treturn;\n\t\t}\n\n\t\t// don't send events when the user is optout unless the event is flaged as optin friendly\n\t\tif (!this._configuration.userOptIn && this._optInFriendly.indexOf(eventName) === -1) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._eventCount++;\n\n\t\tif (!data) {\n\t\t\tdata = Object.create(null);\n\t\t}\n\n\t\t// (first) add common properties\n\t\tlet eventDate: Date = new Date();\n\t\tdata['sessionID'] = this._telemetryInfo.sessionId;\n\t\tdata['timestamp'] = eventDate;\n\t\tdata['version'] = this._configuration.version;\n\t\tdata['userId'] = this._userIdHash;\n\t\tdata['commitHash'] = this._configuration.commitHash;\n\t\tdata['common.platform'] = Platform.Platform[Platform.platform];\n\t\tdata['common.timesincesessionstart'] = (eventDate.getTime() - this._startTime.getTime());\n\t\tdata['common.sequence'] = this._eventCount;\n\t\tdata['common.instanceId'] = this._telemetryInfo.instanceId;\n\t\tdata['common.machineId'] = this._telemetryInfo.machineId;\n\n\t\t// (last) remove all PII from data\n\t\tdata = cloneAndChange(data, value => {\n\t\t\tif (typeof value === 'string') {\n\t\t\t\treturn this._cleanupInfo(value);\n\t\t\t}\n\t\t});\n\n\t\tfor (let appender of this._appenders) {\n\t\t\tappender.log(eventName, data);\n\t\t}\n\t}\n\n\tprivate _cleanupInfo(stack: string): string {\n\n\t\t// sanitize with configured cleanup patterns\n\t\tfor (let tuple of this._configuration.cleanupPatterns) {\n\t\t\tlet [regexp, replaceValue] = tuple;\n\t\t\tstack = stack.replace(regexp, replaceValue);\n\t\t}\n\n\t\treturn stack;\n\t}\n\n\tpublic addTelemetryAppender(appender: ITelemetryAppender): IDisposable {\n\t\tthis._appenders.push(appender);\n\t\treturn {\n\t\t\tdispose: () => {\n\t\t\t\tlet index = this._appenders.indexOf(appender);\n\t\t\t\tif (index > -1) {\n\t\t\t\t\tthis._appenders.splice(index, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n}\n\n"]}