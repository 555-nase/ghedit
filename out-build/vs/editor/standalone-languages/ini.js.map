{"version":3,"file":"vs/editor/standalone-languages/ini.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/editor/standalone-languages/ini.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;IAEhG,YAAY,CAAC;IAIF,gBAAQ,GAAe;QACjC,WAAW,EAAK,KAAK;QACrB,IAAI,EAAY,KAAK;QACrB,YAAY,EAAE,EAAE;QAEhB,WAAW,EAAO,GAAG;QACrB,iBAAiB,EAAE,GAAG;QACtB,eAAe,EAAI,GAAG;QAEtB,8CAA8C;QAC9C,OAAO,EAAG,uEAAuE;QAEjF,uCAAuC;QACvC,SAAS,EAAE;YACV,IAAI,EAAE;gBAEL,WAAW;gBACX,CAAC,aAAa,EAAE,SAAS,CAAC;gBAE1B,OAAO;gBACP,CAAC,iBAAiB,EAAE,CAAC,KAAK,EAAE,EAAE,EAAE,WAAW,CAAC,CAAC;gBAE7C,aAAa;gBACb,EAAE,OAAO,EAAE,aAAa,EAAE;gBAE1B,UAAU;gBACV,CAAC,KAAK,EAAE,QAAQ,CAAC;gBAEjB,6CAA6C;gBAC7C,CAAC,iBAAiB,EAAE,gBAAgB,CAAE;gBACtC,CAAC,iBAAiB,EAAE,gBAAgB,CAAE;gBACtC,CAAC,GAAG,EAAG,QAAQ,EAAE,WAAW,CAAE;gBAC9B,CAAC,GAAG,EAAE,QAAQ,EAAE,YAAY,CAAC;aAC7B;YAED,UAAU,EAAE;gBACX,CAAC,YAAY,EAAE,EAAE,CAAC;gBAClB,CAAC,aAAa,EAAO,SAAS,CAAC;aAC/B;YAED,MAAM,EAAE;gBACP,CAAC,UAAU,EAAE,QAAQ,CAAC;gBACtB,CAAC,UAAU,EAAE,eAAe,CAAC;gBAC7B,CAAC,KAAK,EAAO,uBAAuB,CAAC;gBACrC,CAAC,MAAM,EAAM,EAAE,KAAK,EAAE,EAAE,SAAS,EAAG,EAAE,KAAK,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE;4BACzD,UAAU,EAAE,QAAQ,EAAE,EAAC,CAAE;aACrC;SACD;KACD,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport {ILanguage} from './types';\n\nexport var language = <ILanguage> {\n\tdisplayName:    'Ini',\n\tname:           'ini',\n\tdefaultToken: '',\n\n\tlineComment:      '#',\n\tblockCommentStart: '#',\n\tblockCommentEnd:   ' ',\n\n\t// we include these common regular expressions\n\tescapes:  /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n\n\t// The main tokenizer for our languages\n\ttokenizer: {\n\t\troot: [\n\n\t\t\t// sections\n\t\t\t[/^\\[[^\\]]*\\]/, 'metatag'],\n\n\t\t\t// keys\n\t\t\t[/(^\\w+)(\\s*)(\\=)/, ['key', '', 'delimiter']],\n\n\t\t\t// whitespace\n\t\t\t{ include: '@whitespace' },\n\n\t\t\t// numbers\n\t\t\t[/\\d+/, 'number'],\n\n\t\t\t// strings: recover on non-terminated strings\n\t\t\t[/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid' ],  // non-teminated string\n\t\t\t[/'([^'\\\\]|\\\\.)*$/, 'string.invalid' ],  // non-teminated string\n\t\t\t[/\"/,  'string', '@string.\"' ],\n\t\t\t[/'/, 'string', '@string.\\''],\n\t\t],\n\n\t\twhitespace: [\n\t\t\t[/[ \\t\\r\\n]+/, ''],\n\t\t\t[/^\\s*[#;].*$/,    \t\t'comment'],\n\t\t],\n\n\t\tstring: [\n\t\t\t[/[^\\\\\"']+/, 'string'],\n\t\t\t[/@escapes/, 'string.escape'],\n\t\t\t[/\\\\./,      'string.escape.invalid'],\n\t\t\t[/[\"']/,     { cases: { '$#==$S2' : { token: 'string', next: '@pop' },\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'@default': 'string' }} ]\n\t\t],\n\t},\n};"]}