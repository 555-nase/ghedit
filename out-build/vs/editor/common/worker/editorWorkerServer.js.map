{"version":3,"file":"vs/editor/common/worker/editorWorkerServer.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/editor/common/worker/editorWorkerServer.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\n// include these in the editor bundle because they are widely used by many languages\nimport 'vs/editor/common/languages.common';\nimport 'vs/editor/common/worker/validationHelper';\nimport Severity from 'vs/base/common/severity';\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport {WorkerServer} from 'vs/base/common/worker/workerServer';\nimport {EventService} from 'vs/platform/event/common/eventService';\nimport {AbstractExtensionService, ActivatedExtension} from 'vs/platform/extensions/common/abstractExtensionService';\nimport {IExtensionDescription} from 'vs/platform/extensions/common/extensions';\nimport {createInstantiationService} from 'vs/platform/instantiation/common/instantiationService';\nimport {SecondaryMarkerService} from 'vs/platform/markers/common/markerService';\nimport {BaseRequestService} from 'vs/platform/request/common/baseRequestService';\nimport {RemoteTelemetryService} from 'vs/platform/telemetry/common/remoteTelemetryService';\nimport {WorkerThreadService} from 'vs/platform/thread/common/workerThreadService';\nimport {BaseWorkspaceContextService} from 'vs/platform/workspace/common/baseWorkspaceContextService';\nimport {IWorkspace} from 'vs/platform/workspace/common/workspace';\nimport {ModeServiceImpl, ModeServiceWorkerHelper} from 'vs/editor/common/services/modeServiceImpl';\nimport {ModelServiceWorkerHelper} from 'vs/editor/common/services/modelServiceImpl';\nimport {ResourceService} from 'vs/editor/common/services/resourceServiceImpl';\n\nexport interface IInitData {\n\tcontextService: {\n\t\tworkspace:any;\n\t\tconfiguration:any;\n\t\toptions:any;\n\t};\n}\n\ninterface IWorkspaceWithTelemetry extends IWorkspace {\n\ttelemetry?:string;\n}\n\ninterface IWorkspaceWithSearch extends IWorkspace {\n\tsearch?:string;\n}\n\nexport interface ICallback {\n\t(something:any):void;\n}\n\nclass WorkerExtensionService extends AbstractExtensionService<ActivatedExtension> {\n\n\tconstructor() {\n\t\tsuper(true);\n\t}\n\n\tprotected _showMessage(severity:Severity, msg:string): void {\n\t\tswitch (severity) {\n\t\t\tcase Severity.Error:\n\t\t\t\tconsole.error(msg);\n\t\t\t\tbreak;\n\t\t\tcase Severity.Warning:\n\t\t\t\tconsole.warn(msg);\n\t\t\t\tbreak;\n\t\t\tcase Severity.Info:\n\t\t\t\tconsole.info(msg);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tconsole.log(msg);\n\t\t}\n\t}\n\n\tprotected _createFailedExtension(): ActivatedExtension {\n\t\tthrow new Error('unexpected');\n\t}\n\n\tprotected _actualActivateExtension(extensionDescription: IExtensionDescription): TPromise<ActivatedExtension> {\n\t\tthrow new Error('unexpected');\n\t}\n\n}\n\nexport class EditorWorkerServer {\n\n\tprivate threadService:WorkerThreadService;\n\n\tconstructor() {\n\t}\n\n\tpublic initialize(mainThread:WorkerServer, complete:ICallback, error:ICallback, progress:ICallback, initData:IInitData):void {\n\n\t\tvar extensionService = new WorkerExtensionService();\n\n\t\tvar contextService = new BaseWorkspaceContextService(initData.contextService.workspace, initData.contextService.configuration, initData.contextService.options);\n\n\t\tthis.threadService = new WorkerThreadService(mainThread.getRemoteCom());\n\t\tthis.threadService.setInstantiationService(createInstantiationService({ threadService: this.threadService }));\n\n\t\tvar telemetryServiceInstance = new RemoteTelemetryService('workerTelemetry', this.threadService);\n\n\t\tvar resourceService = new ResourceService();\n\t\tvar markerService = new SecondaryMarkerService(this.threadService);\n\n\t\tvar modeService = new ModeServiceImpl(this.threadService, extensionService);\n\n\t\tvar requestService = new BaseRequestService(contextService, telemetryServiceInstance);\n\n\t\tvar _services : any = {\n\t\t\tthreadService: this.threadService,\n\t\t\textensionService: extensionService,\n\t\t\tmodeService: modeService,\n\t\t\tcontextService: contextService,\n\t\t\teventService: new EventService(),\n\t\t\tresourceService: resourceService,\n\t\t\tmarkerService: markerService,\n\t\t\ttelemetryService: telemetryServiceInstance,\n\t\t\trequestService: requestService\n\t\t};\n\n\t\tvar instantiationService = createInstantiationService(_services);\n\t\tthis.threadService.setInstantiationService(instantiationService);\n\n\t\t// Instantiate thread actors\n\t\tthis.threadService.getRemotable(ModeServiceWorkerHelper);\n\t\tthis.threadService.getRemotable(ModelServiceWorkerHelper);\n\n\t\tcomplete(undefined);\n\t}\n\n\tpublic request(mainThread:WorkerServer, complete:ICallback, error:ICallback, progress:ICallback, data:any):void {\n\t\tthis.threadService.dispatch(data).then(complete, error, progress);\n\t}\n}\n\nexport var value = new EditorWorkerServer();\n"]}