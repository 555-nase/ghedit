{"version":3,"file":"vs/editor/common/viewLayout/viewLineParts.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/editor/common/viewLayout/viewLineParts.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport * as strings from 'vs/base/common/strings';\nimport {Arrays} from 'vs/editor/common/core/arrays';\nimport {ViewLineToken, IEditorRange, ViewLineTokens} from 'vs/editor/common/editorCommon';\nimport {Range} from 'vs/editor/common/core/range';\n\nfunction cmpLineDecorations(a:ILineDecoration, b:ILineDecoration): number {\n\treturn Range.compareRangesUsingStarts(a.range, b.range);\n}\n\nexport function createLineParts(lineNumber:number, minLineColumn:number, lineContent:string, tabSize:number, lineTokens:ViewLineTokens, rawLineDecorations:ILineDecoration[], renderWhitespace:boolean, indentGuides:boolean): LineParts {\n\tif (indentGuides || renderWhitespace) {\n\t\tlet oldLength = rawLineDecorations.length;\n\t\trawLineDecorations = insertCustomLineDecorations(indentGuides, renderWhitespace, lineNumber, lineContent, tabSize, lineTokens.getFauxIndentLength(), rawLineDecorations);\n\t\tif (rawLineDecorations.length !== oldLength) {\n\t\t\trawLineDecorations.sort(cmpLineDecorations);\n\t\t}\n\t}\n\n\tif (rawLineDecorations.length > 0) {\n\t\treturn createViewLineParts(lineNumber, minLineColumn, lineTokens, lineContent, rawLineDecorations);\n\t} else {\n\t\treturn createFastViewLineParts(lineTokens, lineContent);\n\t}\n}\n\nexport function getColumnOfLinePartOffset(stopRenderingLineAfter:number, lineParts:ViewLineToken[], lineMaxColumn:number, charOffsetInPart:number[], partIndex:number, partLength:number, offset:number): number {\n\tif (partIndex >= lineParts.length) {\n\t\treturn stopRenderingLineAfter;\n\t}\n\n\tif (offset === 0) {\n\t\treturn lineParts[partIndex].startIndex + 1;\n\t}\n\n\tif (offset === partLength) {\n\t\treturn (partIndex + 1 < lineParts.length ? lineParts[partIndex + 1].startIndex + 1 : lineMaxColumn);\n\t}\n\n\tlet originalMin = lineParts[partIndex].startIndex;\n\tlet originalMax = (partIndex + 1 < lineParts.length ? lineParts[partIndex + 1].startIndex : lineMaxColumn - 1);\n\n\tlet min = originalMin;\n\tlet max = originalMax;\n\n\t// invariant: offsetOf(min) <= offset <= offsetOf(max)\n\twhile (min + 1 < max) {\n\t\tlet mid = Math.floor( (min + max) / 2 );\n\t\tlet midOffset = charOffsetInPart[mid];\n\n\t\tif (midOffset === offset) {\n\t\t\treturn mid + 1;\n\t\t} else if (midOffset > offset) {\n\t\t\tmax = mid;\n\t\t} else {\n\t\t\tmin = mid;\n\t\t}\n\t}\n\n\tif (min === max) {\n\t\treturn min + 1;\n\t}\n\n\tlet minOffset = charOffsetInPart[min];\n\tlet maxOffset = (max < originalMax ? charOffsetInPart[max] : partLength);\n\n\tlet distanceToMin = offset - minOffset;\n\tlet distanceToMax = maxOffset - offset;\n\n\tif (distanceToMin <= distanceToMax) {\n\t\treturn min + 1;\n\t} else {\n\t\treturn max + 1;\n\t}\n}\n\nfunction trimEmptyTrailingPart(parts: ViewLineToken[], lineContent: string): ViewLineToken[] {\n\tif (parts.length <= 1) {\n\t\treturn parts;\n\t}\n\tvar lastPartStartIndex = parts[parts.length - 1].startIndex;\n\tif (lastPartStartIndex < lineContent.length) {\n\t\t// All is good\n\t\treturn parts;\n\t}\n\t// Remove last line part\n\treturn parts.slice(0, parts.length - 1);\n}\n\nconst _tab = '\\t'.charCodeAt(0);\nconst _space = ' '.charCodeAt(0);\n\nfunction insertOneCustomLineDecoration(dest:ILineDecoration[], lineNumber:number, startColumn:number, endColumn:number, className:string): void {\n\tdest.push({\n\t\trange: new Range(lineNumber, startColumn, lineNumber, endColumn),\n\t\toptions: {\n\t\t\tinlineClassName: className\n\t\t}\n\t});\n}\n\nfunction insertCustomLineDecorations(indentGuides:boolean, renderWhitespace:boolean, lineNumber:number, lineContent: string, tabSize:number, fauxIndentLength: number, rawLineDecorations: ILineDecoration[]): ILineDecoration[] {\n\tif (!indentGuides && !renderWhitespace) {\n\t\treturn rawLineDecorations;\n\t}\n\n\tlet lineLength = lineContent.length;\n\tif (lineLength === fauxIndentLength) {\n\t\treturn rawLineDecorations;\n\t}\n\n\tlet firstChar = indentGuides ? lineContent.charCodeAt(0) : lineContent.charCodeAt(fauxIndentLength);\n\tlet lastChar = lineContent.charCodeAt(lineLength - 1);\n\n\tif (firstChar !== _tab && firstChar !== _space && lastChar !== _tab && lastChar !== _space) {\n\t\t// This line contains no leading nor trailing whitespace => fast path\n\t\treturn rawLineDecorations;\n\t}\n\n\tlet firstNonWhitespaceIndex = strings.firstNonWhitespaceIndex(lineContent);\n\tlet lastNonWhitespaceIndex: number;\n\tif (firstNonWhitespaceIndex === -1) {\n\t\t// The entire line is whitespace\n\t\tfirstNonWhitespaceIndex = lineLength;\n\t\tlastNonWhitespaceIndex = lineLength;\n\t} else {\n\t\tlastNonWhitespaceIndex = strings.lastNonWhitespaceIndex(lineContent);\n\t}\n\n\tlet sm_endIndex: number[] = [];\n\tlet sm_decoration: string[] = [];\n\n\tif (fauxIndentLength > 0) {\n\t\t// add faux indent state\n\t\tsm_endIndex.push(fauxIndentLength - 1);\n\t\tsm_decoration.push(indentGuides ? 'indent-guide' : null);\n\t}\n\tif (firstNonWhitespaceIndex > fauxIndentLength) {\n\t\t// add leading whitespace state\n\t\tsm_endIndex.push(firstNonWhitespaceIndex - 1);\n\n\t\tlet leadingClassName:string = null;\n\n\t\tif (fauxIndentLength > 0) {\n\t\t\tleadingClassName = (renderWhitespace ? 'leading whitespace' : null);\n\t\t} else {\n\t\t\tif (indentGuides && renderWhitespace) {\n\t\t\t\tleadingClassName = 'leading whitespace indent-guide';\n\t\t\t} else if (indentGuides) {\n\t\t\t\tleadingClassName = 'indent-guide';\n\t\t\t} else {\n\t\t\t\tleadingClassName = 'leading whitespace';\n\t\t\t}\n\t\t}\n\t\tsm_decoration.push(leadingClassName);\n\n\t}\n\t// add content state\n\tsm_endIndex.push(lastNonWhitespaceIndex);\n\tsm_decoration.push(null);\n\n\t// add trailing whitespace state\n\tsm_endIndex.push(lineLength - 1);\n\tsm_decoration.push(renderWhitespace ? 'trailing whitespace' : null);\n\n\t// add dummy state to avoid array length checks\n\tsm_endIndex.push(lineLength);\n\tsm_decoration.push(null);\n\n\treturn insertCustomLineDecorationsWithStateMachine(lineNumber, lineContent, tabSize, rawLineDecorations, sm_endIndex, sm_decoration);\n}\n\nfunction insertCustomLineDecorationsWithStateMachine(lineNumber:number, lineContent: string, tabSize:number, rawLineDecorations: ILineDecoration[], sm_endIndex: number[], sm_decoration: string[]): ILineDecoration[] {\n\tlet lineLength = lineContent.length;\n\tlet currentStateIndex = 0;\n\tlet stateEndIndex = sm_endIndex[currentStateIndex];\n\tlet stateDecoration = sm_decoration[currentStateIndex];\n\n\tlet result = rawLineDecorations.slice(0);\n\tlet tmpIndent = 0;\n\tlet whitespaceStartColumn = 1;\n\n\tfor (let index = 0; index < lineLength; index++) {\n\t\tlet chCode = lineContent.charCodeAt(index);\n\n\t\tif (chCode === _tab) {\n\t\t\ttmpIndent = tabSize;\n\t\t} else {\n\t\t\ttmpIndent++;\n\t\t}\n\n\t\tif (index === stateEndIndex) {\n\t\t\tif (stateDecoration !== null) {\n\t\t\t\tinsertOneCustomLineDecoration(result, lineNumber, whitespaceStartColumn, index + 2, stateDecoration);\n\t\t\t}\n\t\t\twhitespaceStartColumn = index + 2;\n\t\t\ttmpIndent = tmpIndent % tabSize;\n\n\t\t\tcurrentStateIndex++;\n\t\t\tstateEndIndex = sm_endIndex[currentStateIndex];\n\t\t\tstateDecoration = sm_decoration[currentStateIndex];\n\t\t} else {\n\t\t\tif (stateDecoration !== null && tmpIndent >= tabSize) {\n\t\t\t\tinsertOneCustomLineDecoration(result, lineNumber, whitespaceStartColumn, index + 2, stateDecoration);\n\t\t\t\twhitespaceStartColumn = index + 2;\n\t\t\t\ttmpIndent = tmpIndent % tabSize;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result;\n}\n\nexport class LineParts {\n\t_linePartsTrait: void;\n\tprivate _parts: ViewLineToken[];\n\n\tconstructor(parts: ViewLineToken[]) {\n\t\tthis._parts = parts;\n\t}\n\n\tpublic getParts(): ViewLineToken[] {\n\t\treturn this._parts;\n\t}\n\n\tpublic equals(other:LineParts): boolean {\n\t\treturn ViewLineToken.equalsArray(this._parts, other._parts);\n\t}\n\n\tpublic findIndexOfOffset(offset:number): number {\n\t\treturn Arrays.findIndexInSegmentsArray(this._parts, offset);\n\t}\n}\n\nfunction createFastViewLineParts(lineTokens:ViewLineTokens, lineContent:string): LineParts {\n\tlet parts = lineTokens.getTokens();\n\tparts = trimEmptyTrailingPart(parts, lineContent);\n\treturn new LineParts(parts);\n}\n\nfunction createViewLineParts(lineNumber:number, minLineColumn:number, lineTokens:ViewLineTokens, lineContent:string, rawLineDecorations:ILineDecoration[]): LineParts {\n\t// lineDecorations might overlap on top of each other, so they need to be normalized\n\tvar lineDecorations = LineDecorationsNormalizer.normalize(lineNumber, minLineColumn, rawLineDecorations),\n\t\tlineDecorationsIndex = 0,\n\t\tlineDecorationsLength = lineDecorations.length;\n\n\tvar actualLineTokens = lineTokens.getTokens(),\n\t\tnextStartOffset:number,\n\t\tcurrentTokenEndOffset:number,\n\t\tcurrentTokenClassName:string;\n\n\tvar parts:ViewLineToken[] = [];\n\n\tfor (var i = 0, len = actualLineTokens.length; i < len; i++) {\n\t\tnextStartOffset = actualLineTokens[i].startIndex;\n\t\tcurrentTokenEndOffset = (i + 1 < len ? actualLineTokens[i + 1].startIndex : lineTokens.getTextLength());\n\t\tcurrentTokenClassName = actualLineTokens[i].type;\n\n\t\twhile (lineDecorationsIndex < lineDecorationsLength && lineDecorations[lineDecorationsIndex].startOffset < currentTokenEndOffset) {\n\t\t\tif (lineDecorations[lineDecorationsIndex].startOffset > nextStartOffset) {\n\t\t\t\t// the first decorations starts after the token\n\t\t\t\tparts.push(new ViewLineToken(nextStartOffset, currentTokenClassName));\n\t\t\t\tnextStartOffset = lineDecorations[lineDecorationsIndex].startOffset;\n\t\t\t}\n\n\t\t\tparts.push(new ViewLineToken(nextStartOffset, currentTokenClassName + ' ' + lineDecorations[lineDecorationsIndex].className));\n\n\t\t\tif (lineDecorations[lineDecorationsIndex].endOffset >= currentTokenEndOffset) {\n\t\t\t\t// this decoration goes on to the next token\n\t\t\t\tnextStartOffset = currentTokenEndOffset;\n\t\t\t\tbreak;\n\t\t\t} else {\n\t\t\t\t// this decorations stops inside this token\n\t\t\t\tnextStartOffset = lineDecorations[lineDecorationsIndex].endOffset + 1;\n\t\t\t\tlineDecorationsIndex++;\n\t\t\t}\n\t\t}\n\n\t\tif (nextStartOffset < currentTokenEndOffset) {\n\t\t\tparts.push(new ViewLineToken(nextStartOffset, currentTokenClassName));\n\t\t}\n\t}\n\n\treturn new LineParts(parts);\n}\n\nexport class DecorationSegment {\n\tstartOffset:number;\n\tendOffset:number;\n\tclassName:string;\n\n\tconstructor(startOffset:number, endOffset:number, className:string) {\n\t\tthis.startOffset = startOffset;\n\t\tthis.endOffset = endOffset;\n\t\tthis.className = className;\n\t}\n}\n\nclass Stack {\n\tpublic count:number;\n\tprivate stopOffsets:number[];\n\tprivate classNames:string[];\n\n\tconstructor() {\n\t\tthis.stopOffsets = [];\n\t\tthis.classNames = [];\n\t\tthis.count = 0;\n\t}\n\n\tpublic consumeLowerThan(maxStopOffset:number, nextStartOffset:number, result:DecorationSegment[]): number {\n\n\t\twhile (this.count > 0 && this.stopOffsets[0] < maxStopOffset) {\n\t\t\tvar i = 0;\n\n\t\t\t// Take all equal stopping offsets\n\t\t\twhile(i + 1 < this.count && this.stopOffsets[i] === this.stopOffsets[i + 1]) {\n\t\t\t\ti++;\n\t\t\t}\n\n\t\t\t// Basically we are consuming the first i + 1 elements of the stack\n\t\t\tresult.push(new DecorationSegment(nextStartOffset, this.stopOffsets[i], this.classNames.join(' ')));\n\t\t\tnextStartOffset = this.stopOffsets[i] + 1;\n\n\t\t\t// Consume them\n\t\t\tthis.stopOffsets.splice(0, i + 1);\n\t\t\tthis.classNames.splice(0, i + 1);\n\t\t\tthis.count -= (i + 1);\n\t\t}\n\n\t\tif (this.count > 0 && nextStartOffset < maxStopOffset) {\n\t\t\tresult.push(new DecorationSegment(nextStartOffset, maxStopOffset - 1, this.classNames.join(' ')));\n\t\t\tnextStartOffset = maxStopOffset;\n\t\t}\n\n\t\treturn nextStartOffset;\n\t}\n\n\tpublic insert(stopOffset:number, className:string): void {\n\t\tif (this.count === 0 || this.stopOffsets[this.count - 1] <= stopOffset) {\n\t\t\t// Insert at the end\n\t\t\tthis.stopOffsets.push(stopOffset);\n\t\t\tthis.classNames.push(className);\n\t\t} else {\n\t\t\t// Find the insertion position for `stopOffset`\n\t\t\tfor (var i = 0; i < this.count; i++) {\n\t\t\t\tif (this.stopOffsets[i] >= stopOffset) {\n\t\t\t\t\tthis.stopOffsets.splice(i, 0, stopOffset);\n\t\t\t\t\tthis.classNames.splice(i, 0, className);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.count++;\n\t\treturn;\n\t}\n}\n\nexport interface ILineDecoration {\n\trange: IEditorRange;\n\toptions: {\n\t\tinlineClassName?: string;\n\t};\n}\n\nexport class LineDecorationsNormalizer {\n\t/**\n\t * A number that is guaranteed to be larger than the maximum line column\n\t */\n\tprivate static MAX_LINE_LENGTH = 10000000;\n\n\t/**\n\t * Normalize line decorations. Overlapping decorations will generate multiple segments\n\t */\n\tpublic static normalize(lineNumber:number, minLineColumn:number, lineDecorations:ILineDecoration[]): DecorationSegment[] {\n\n\t\tvar result:DecorationSegment[] = [];\n\n\t\tif (lineDecorations.length === 0) {\n\t\t\treturn result;\n\t\t}\n\n\t\tvar stack = new Stack(),\n\t\t\tnextStartOffset = 0,\n\t\t\td:ILineDecoration,\n\t\t\tcurrentStartOffset:number,\n\t\t\tcurrentEndOffset:number,\n\t\t\ti:number,\n\t\t\tlen:number;\n\n\t\tfor (i = 0, len = lineDecorations.length; i < len; i++) {\n\t\t\td = lineDecorations[i];\n\n\t\t\tif (d.range.endLineNumber < lineNumber || d.range.startLineNumber > lineNumber) {\n\t\t\t\t// Ignore decorations that sit outside this line\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (d.range.startLineNumber === d.range.endLineNumber && d.range.startColumn === d.range.endColumn) {\n\t\t\t\t// Ignore empty range decorations\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tcurrentStartOffset = (d.range.startLineNumber === lineNumber ? d.range.startColumn - 1 : minLineColumn - 1);\n\t\t\tcurrentEndOffset = (d.range.endLineNumber === lineNumber ? d.range.endColumn - 2 : LineDecorationsNormalizer.MAX_LINE_LENGTH - 1);\n\n\t\t\tif (currentEndOffset < 0) {\n\t\t\t\t// An empty decoration (endColumn === 1)\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tnextStartOffset = stack.consumeLowerThan(currentStartOffset, nextStartOffset, result);\n\n\t\t\tif (stack.count === 0) {\n\t\t\t\tnextStartOffset = currentStartOffset;\n\t\t\t}\n\t\t\tstack.insert(currentEndOffset, d.options.inlineClassName);\n\t\t}\n\n\t\tstack.consumeLowerThan(LineDecorationsNormalizer.MAX_LINE_LENGTH, nextStartOffset, result);\n\n\t\treturn result;\n\t}\n\n}\n\n"]}