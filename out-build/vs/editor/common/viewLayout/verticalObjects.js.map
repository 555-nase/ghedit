{"version":3,"file":"verticalObjects.js","sourceRoot":"","sources":["../../../../../src/vs/editor/common/viewLayout/verticalObjects.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {IEditorWhitespace, IPartialViewLinesViewportData, IViewWhitespaceViewportData} from 'vs/editor/common/editorCommon';\nimport {WhitespaceComputer} from 'vs/editor/common/viewLayout/whitespaceComputer';\n\n/**\n * Layouting of objects that take vertical space (by having a height) and push down other objects.\n *\n * These objects are basically either text (lines) or spaces between those lines (whitespaces).\n * This provides commodity operations for working with lines that contain whitespace that pushes lines lower (vertically).\n * This is written with no knowledge of an editor in mind.\n */\nexport class VerticalObjects {\n\n\t/**\n\t * Keep track of the total number of lines.\n\t * This is useful for doing binary searches or for doing hit-testing.\n\t */\n\tprivate linesCount:number;\n\n\t/**\n\t * Contains whitespace information in pixels\n\t */\n\tprivate whitespaces:WhitespaceComputer;\n\n\tconstructor() {\n\t\tthis.linesCount = 0;\n\t\tthis.whitespaces = new WhitespaceComputer();\n\t}\n\n\t/**\n\t * Set the number of lines.\n\t *\n\t * @param newLineCount New number of lines.\n\t */\n\tpublic replaceLines(newLineCount:number): void {\n\t\tthis.linesCount = newLineCount;\n\t}\n\n\t/**\n\t * Insert a new whitespace of a certain height after a line number.\n\t * The whitespace has a \"sticky\" characteristic.\n\t * Irrespective of edits above or below `afterLineNumber`, the whitespace will follow the initial line.\n\t *\n\t * @param afterLineNumber The conceptual position of this whitespace. The whitespace will follow this line as best as possible even when deleting/inserting lines above/below.\n\t * @param heightInPx The height of the whitespace, in pixels.\n\t * @return An id that can be used later to mutate or delete the whitespace\n\t */\n\tpublic insertWhitespace(afterLineNumber:number, ordinal:number, heightInPx:number): number {\n\t\treturn this.whitespaces.insertWhitespace(afterLineNumber, ordinal, heightInPx);\n\t}\n\n\tpublic changeWhitespace(id:number, newAfterLineNumber:number, newHeight:number): boolean {\n\t\treturn this.whitespaces.changeWhitespace(id, newAfterLineNumber, newHeight);\n\t}\n\n\t/**\n\t * Remove an existing whitespace.\n\t *\n\t * @param id The whitespace to remove\n\t * @return Returns true if the whitespace is found and it is removed.\n\t */\n\tpublic removeWhitespace(id:number): boolean {\n\t\treturn this.whitespaces.removeWhitespace(id);\n\t}\n\n\t/**\n\t * Notify the layouter that lines have been deleted (a continuous zone of lines).\n\t *\n\t * @param fromLineNumber The line number at which the deletion started, inclusive\n\t * @param toLineNumber The line number at which the deletion ended, inclusive\n\t */\n\tpublic onModelLinesDeleted(fromLineNumber:number, toLineNumber:number): void {\n\t\tthis.linesCount -= (toLineNumber - fromLineNumber + 1);\n\t\tthis.whitespaces.onModelLinesDeleted(fromLineNumber, toLineNumber);\n\t}\n\n\t/**\n\t * Notify the layouter that lines have been inserted (a continuous zone of lines).\n\t *\n\t * @param fromLineNumber The line number at which the insertion started, inclusive\n\t * @param toLineNumber The line number at which the insertion ended, inclusive.\n\t */\n\tpublic onModelLinesInserted(fromLineNumber:number, toLineNumber:number): void {\n\t\tthis.linesCount += (toLineNumber - fromLineNumber + 1);\n\t\tthis.whitespaces.onModelLinesInserted(fromLineNumber, toLineNumber);\n\t}\n\n\t/**\n\t * Get the sum of heights for all objects.\n\t *\n\t * @param deviceLineHeight The height, in pixels, for one rendered line.\n\t * @return The sum of heights for all objects.\n\t */\n\tpublic getTotalHeight(deviceLineHeight:number): number {\n\t\tdeviceLineHeight = deviceLineHeight|0;\n\n\t\tlet linesHeight = deviceLineHeight * this.linesCount;\n\t\tlet whitespacesHeight = this.whitespaces.getTotalHeight();\n\t\treturn linesHeight + whitespacesHeight;\n\t}\n\n\t/**\n\t * Get the vertical offset (the sum of heights for all objects above) a certain line number.\n\t *\n\t * @param lineNumber The line number\n\t * @param deviceLineHeight The height, in pixels, for one rendered line.\n\t * @return The sum of heights for all objects above `lineNumber`.\n\t */\n\tpublic getVerticalOffsetForLineNumber(lineNumber:number, deviceLineHeight:number): number {\n\t\tlineNumber = lineNumber|0;\n\t\tdeviceLineHeight = deviceLineHeight|0;\n\n\t\tlet previousLinesHeight:number;\n\t\tif (lineNumber > 1) {\n\t\t\tpreviousLinesHeight = deviceLineHeight * (lineNumber - 1);\n\t\t} else {\n\t\t\tpreviousLinesHeight = 0;\n\t\t}\n\n\t\tlet previousWhitespacesHeight = this.whitespaces.getAccumulatedHeightBeforeLineNumber(lineNumber);\n\n\t\treturn previousLinesHeight + previousWhitespacesHeight;\n\t}\n\n\t/**\n\t * Returns the accumulated height of whitespaces before the given line number.\n\t *\n\t * @param lineNumber The line number\n\t */\n\tpublic getWhitespaceAccumulatedHeightBeforeLineNumber(lineNumber:number): number {\n\t\treturn this.whitespaces.getAccumulatedHeightBeforeLineNumber(lineNumber);\n\t}\n\n\t/**\n\t * Returns if there is any whitespace in the document.\n\t */\n\tpublic hasWhitespace(): boolean {\n\t\treturn this.whitespaces.getCount() > 0;\n\t}\n\n\tpublic isAfterLines(verticalOffset:number, deviceLineHeight:number): boolean {\n\t\tlet totalHeight = this.getTotalHeight(deviceLineHeight);\n\t\treturn verticalOffset > totalHeight;\n\t}\n\n\t/**\n\t * Find the first line number that is at or after vertical offset `verticalOffset`.\n\t * i.e. if getVerticalOffsetForLine(line) is x and getVerticalOffsetForLine(line + 1) is y, then\n\t * getLineNumberAtOrAfterVerticalOffset(i) = line, x <= i < y.\n\t *\n\t * @param verticalOffset The vertical offset to search at.\n\t * @param deviceLineHeight The height, in piexels, for one rendered line.\n\t * @return The line number at or after vertical offset `verticalOffset`.\n\t */\n\tpublic getLineNumberAtOrAfterVerticalOffset(verticalOffset:number, deviceLineHeight:number): number {\n\t\tverticalOffset = verticalOffset|0;\n\t\tdeviceLineHeight = deviceLineHeight|0;\n\n\t\tif (verticalOffset < 0) {\n\t\t\treturn 1;\n\t\t}\n\n\t\tlet minLineNumber = 1;\n\t\tlet linesCount = this.linesCount|0;\n\t\tlet maxLineNumber = linesCount;\n\n\t\twhile (minLineNumber < maxLineNumber) {\n\t\t\tlet midLineNumber = ((minLineNumber + maxLineNumber) / 2)|0;\n\n\t\t\tlet midLineNumberVerticalOffset = this.getVerticalOffsetForLineNumber(midLineNumber, deviceLineHeight)|0;\n\n\t\t\tif (verticalOffset >= midLineNumberVerticalOffset + deviceLineHeight) {\n\t\t\t\t// vertical offset is after mid line number\n\t\t\t\tminLineNumber = midLineNumber + 1;\n\t\t\t} else if (verticalOffset >= midLineNumberVerticalOffset) {\n\t\t\t\t// Hit\n\t\t\t\treturn midLineNumber;\n\t\t\t} else {\n\t\t\t\t// vertical offset is before mid line number, but mid line number could still be what we're searching for\n\t\t\t\tmaxLineNumber = midLineNumber;\n\t\t\t}\n\t\t}\n\n\t\tif (minLineNumber > linesCount) {\n\t\t\treturn linesCount;\n\t\t}\n\n\t\treturn minLineNumber;\n\t}\n\n\t/**\n\t * Get the line that appears visually in the center between `verticalOffset1` and `verticalOffset2`.\n\t *\n\t * @param verticalOffset1 The beginning of the viewport\n\t * @param verticalOffset2 The end of the viewport.\n\t * @param deviceLineHeight The height, in pixels, for one rendered line.\n\t * @return The line number that is closest to the center between `verticalOffset1` and `verticalOffset2`.\n\t */\n\tpublic getCenteredLineInViewport(verticalOffset1:number, verticalOffset2:number, deviceLineHeight:number): number {\n\t\tverticalOffset1 = verticalOffset1|0;\n\t\tverticalOffset2 = verticalOffset2|0;\n\t\tdeviceLineHeight = deviceLineHeight|0;\n\n\t\tlet viewportData = this.getLinesViewportData(verticalOffset1, verticalOffset2, deviceLineHeight);\n\n\t\tlet verticalCenter = (verticalOffset2 - verticalOffset1) / 2;\n\t\tlet currentLineActualTop: number,\n\t\t\tcurrentLineActualBottom: number;\n\n\t\tfor (let lineNumber = viewportData.startLineNumber; lineNumber <= viewportData.endLineNumber; lineNumber++) {\n\n\t\t\tcurrentLineActualTop = viewportData.visibleRangesDeltaTop + viewportData.relativeVerticalOffset[lineNumber - viewportData.startLineNumber];\n\t\t\tcurrentLineActualBottom = currentLineActualTop + deviceLineHeight;\n\n\t\t\tif ( (currentLineActualTop <= verticalCenter && verticalCenter < currentLineActualBottom) || currentLineActualTop > verticalCenter) {\n\t\t\t\treturn lineNumber;\n\t\t\t}\n\t\t}\n\n\t\treturn viewportData.endLineNumber;\n\t}\n\n\t/**\n\t * Get all the lines and their relative vertical offsets that are positioned between `verticalOffset1` and `verticalOffset2`.\n\t *\n\t * @param verticalOffset1 The beginning of the viewport.\n\t * @param verticalOffset2 The end of the viewport.\n\t * @param deviceLineHeight The height, in pixels, for one rendered line.\n\t * @return A structure describing the lines positioned between `verticalOffset1` and `verticalOffset2`.\n\t */\n\tpublic getLinesViewportData(verticalOffset1:number, verticalOffset2:number, deviceLineHeight:number): IPartialViewLinesViewportData {\n\t\tverticalOffset1 = verticalOffset1|0;\n\t\tverticalOffset2 = verticalOffset2|0;\n\t\tdeviceLineHeight = deviceLineHeight|0;\n\n\t\t// Find first line number\n\t\t// We don't live in a perfect world, so the line number might start before or after verticalOffset1\n\t\tlet startLineNumber = this.getLineNumberAtOrAfterVerticalOffset(verticalOffset1, deviceLineHeight)|0;\n\n\t\tlet endLineNumber = this.linesCount|0;\n\t\tlet startLineNumberVerticalOffset = this.getVerticalOffsetForLineNumber(startLineNumber, deviceLineHeight)|0;\n\n\t\t// Also keep track of what whitespace we've got\n\t\tlet whitespaceIndex = this.whitespaces.getFirstWhitespaceIndexAfterLineNumber(startLineNumber)|0;\n\t\tlet whitespaceCount = this.whitespaces.getCount()|0;\n\t\tlet currentWhitespaceHeight: number;\n\t\tlet currentWhitespaceAfterLineNumber: number;\n\n\t\tif (whitespaceIndex === -1) {\n\t\t\twhitespaceIndex = whitespaceCount;\n\t\t\tcurrentWhitespaceAfterLineNumber = endLineNumber + 1;\n\t\t\tcurrentWhitespaceHeight = 0;\n\t\t} else {\n\t\t\tcurrentWhitespaceAfterLineNumber = this.whitespaces.getAfterLineNumberForWhitespaceIndex(whitespaceIndex)|0;\n\t\t\tcurrentWhitespaceHeight = this.whitespaces.getHeightForWhitespaceIndex(whitespaceIndex)|0;\n\t\t}\n\n\t\tlet currentVerticalOffset = startLineNumberVerticalOffset;\n\t\tlet currentLineRelativeOffset = currentVerticalOffset;\n\n\t\t// IE (all versions) cannot handle units above about 1,533,908 px, so every 500k pixels bring numbers down\n\t\tconst STEP_SIZE = 500000;\n\t\tlet bigNumbersDelta = 0;\n\t\tif (startLineNumberVerticalOffset >= STEP_SIZE) {\n\t\t\t// Compute a delta that guarantees that lines are positioned at `lineHeight` increments\n\t\t\tbigNumbersDelta = Math.floor(startLineNumberVerticalOffset / STEP_SIZE) * STEP_SIZE;\n\t\t\tbigNumbersDelta = Math.floor(bigNumbersDelta / deviceLineHeight) * deviceLineHeight;\n\n\t\t\tcurrentLineRelativeOffset -= bigNumbersDelta;\n\t\t}\n\n\t\tlet linesOffsets:number[] = [];\n\n\t\t// Figure out how far the lines go\n\t\tfor (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n\n\t\t\t// Count current line height in the vertical offsets\n\t\t\tcurrentVerticalOffset += deviceLineHeight;\n\t\t\tlinesOffsets.push(currentLineRelativeOffset);\n\n\t\t\t// Next line starts immediately after this one\n\t\t\tcurrentLineRelativeOffset += deviceLineHeight;\n\t\t\twhile (currentWhitespaceAfterLineNumber === lineNumber) {\n\t\t\t\t// Push down next line with the height of the current whitespace\n\t\t\t\tcurrentLineRelativeOffset += currentWhitespaceHeight;\n\n\t\t\t\t// Count current whitespace in the vertical offsets\n\t\t\t\tcurrentVerticalOffset += currentWhitespaceHeight;\n\t\t\t\twhitespaceIndex++;\n\n\t\t\t\tif (whitespaceIndex >= whitespaceCount) {\n\t\t\t\t\tcurrentWhitespaceAfterLineNumber = endLineNumber + 1;\n\t\t\t\t} else {\n\t\t\t\t\tcurrentWhitespaceAfterLineNumber = this.whitespaces.getAfterLineNumberForWhitespaceIndex(whitespaceIndex)|0;\n\t\t\t\t\tcurrentWhitespaceHeight = this.whitespaces.getHeightForWhitespaceIndex(whitespaceIndex)|0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (currentVerticalOffset > verticalOffset2) {\n\t\t\t\t// We have covered the entire viewport area, time to stop\n\t\t\t\tendLineNumber = lineNumber;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tviewportTop: verticalOffset1 - bigNumbersDelta,\n\t\t\tviewportHeight: verticalOffset2 - verticalOffset1,\n\t\t\tbigNumbersDelta: bigNumbersDelta,\n\t\t\tstartLineNumber: startLineNumber,\n\t\t\tendLineNumber: endLineNumber,\n\t\t\tvisibleRangesDeltaTop: -(verticalOffset1 - bigNumbersDelta),\n\t\t\trelativeVerticalOffset: linesOffsets\n\t\t};\n\t}\n\n\tpublic getVerticalOffsetForWhitespaceIndex(whitespaceIndex:number, deviceLineHeight:number): number {\n\t\twhitespaceIndex = whitespaceIndex|0;\n\t\tdeviceLineHeight = deviceLineHeight|0;\n\n\t\tlet afterLineNumber = this.whitespaces.getAfterLineNumberForWhitespaceIndex(whitespaceIndex);\n\n\t\tlet previousLinesHeight:number;\n\t\tif (afterLineNumber >= 1) {\n\t\t\tpreviousLinesHeight = deviceLineHeight * afterLineNumber;\n\t\t} else {\n\t\t\tpreviousLinesHeight = 0;\n\t\t}\n\n\t\tlet previousWhitespacesHeight:number;\n\t\tif (whitespaceIndex > 0) {\n\t\t\tpreviousWhitespacesHeight = this.whitespaces.getAccumulatedHeight(whitespaceIndex - 1);\n\t\t} else {\n\t\t\tpreviousWhitespacesHeight = 0;\n\t\t}\n\t\treturn previousLinesHeight + previousWhitespacesHeight;\n\t}\n\n\tpublic getWhitespaceIndexAtOrAfterVerticallOffset(verticalOffset:number, deviceLineHeight:number): number {\n\t\tverticalOffset = verticalOffset|0;\n\t\tdeviceLineHeight = deviceLineHeight|0;\n\n\t\tlet midWhitespaceIndex:number,\n\t\t\tminWhitespaceIndex = 0,\n\t\t\tmaxWhitespaceIndex = this.whitespaces.getCount() - 1,\n\t\t\tmidWhitespaceVerticalOffset:number,\n\t\t\tmidWhitespaceHeight:number;\n\n\t\tif (maxWhitespaceIndex < 0) {\n\t\t\treturn -1;\n\t\t}\n\n\t\t// Special case: nothing to be found\n\t\tlet maxWhitespaceVerticalOffset = this.getVerticalOffsetForWhitespaceIndex(maxWhitespaceIndex, deviceLineHeight);\n\t\tlet maxWhitespaceHeight = this.whitespaces.getHeightForWhitespaceIndex(maxWhitespaceIndex);\n\t\tif (verticalOffset >= maxWhitespaceVerticalOffset + maxWhitespaceHeight) {\n\t\t\treturn -1;\n\t\t}\n\n\t\twhile (minWhitespaceIndex < maxWhitespaceIndex) {\n\t\t\tmidWhitespaceIndex = Math.floor((minWhitespaceIndex + maxWhitespaceIndex) / 2);\n\n\t\t\tmidWhitespaceVerticalOffset = this.getVerticalOffsetForWhitespaceIndex(midWhitespaceIndex, deviceLineHeight);\n\t\t\tmidWhitespaceHeight = this.whitespaces.getHeightForWhitespaceIndex(midWhitespaceIndex);\n\n\t\t\tif (verticalOffset >= midWhitespaceVerticalOffset + midWhitespaceHeight) {\n\t\t\t\t// vertical offset is after whitespace\n\t\t\t\tminWhitespaceIndex = midWhitespaceIndex + 1;\n\t\t\t} else if (verticalOffset >= midWhitespaceVerticalOffset) {\n\t\t\t\t// Hit\n\t\t\t\treturn midWhitespaceIndex;\n\t\t\t} else {\n\t\t\t\t// vertical offset is before whitespace, but midWhitespaceIndex might still be what we're searching for\n\t\t\t\tmaxWhitespaceIndex = midWhitespaceIndex;\n\t\t\t}\n\t\t}\n\t\treturn minWhitespaceIndex;\n\t}\n\n\t/**\n\t * Get exactly the whitespace that is layouted at `verticalOffset`.\n\t *\n\t * @param verticalOffset The vertical offset.\n\t * @param deviceLineHeight The height, in pixels, for one rendered line.\n\t * @return Precisely the whitespace that is layouted at `verticaloffset` or null.\n\t */\n\tpublic getWhitespaceAtVerticalOffset(verticalOffset:number, deviceLineHeight:number): IViewWhitespaceViewportData {\n\t\tverticalOffset = verticalOffset|0;\n\t\tdeviceLineHeight = deviceLineHeight|0;\n\n\t\tlet candidateIndex = this.getWhitespaceIndexAtOrAfterVerticallOffset(verticalOffset, deviceLineHeight);\n\n\t\tif (candidateIndex < 0) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif (candidateIndex >= this.whitespaces.getCount()) {\n\t\t\treturn null;\n\t\t}\n\n\t\tlet candidateTop = this.getVerticalOffsetForWhitespaceIndex(candidateIndex, deviceLineHeight);\n\n\t\tif (candidateTop > verticalOffset) {\n\t\t\treturn null;\n\t\t}\n\n\t\tlet candidateHeight = this.whitespaces.getHeightForWhitespaceIndex(candidateIndex);\n\t\tlet candidateId = this.whitespaces.getIdForWhitespaceIndex(candidateIndex);\n\t\tlet candidateAfterLineNumber = this.whitespaces.getAfterLineNumberForWhitespaceIndex(candidateIndex);\n\n\t\treturn {\n\t\t\tid: candidateId,\n\t\t\tafterLineNumber: candidateAfterLineNumber,\n\t\t\tverticalOffset: candidateTop,\n\t\t\theight: candidateHeight\n\t\t};\n\t}\n\n\t/**\n\t * Get a list of whitespaces that are positioned between `verticalOffset1` and `verticalOffset2`.\n\t *\n\t * @param verticalOffset1 The beginning of the viewport.\n\t * @param verticalOffset2 The end of the viewport.\n\t * @param deviceLineHeight The height, in pixels, for one rendered line.\n\t * @return An array with all the whitespaces in the viewport. If no whitespace is in viewport, the array is empty.\n\t */\n\tpublic getWhitespaceViewportData(verticalOffset1:number, verticalOffset2:number, deviceLineHeight:number): IViewWhitespaceViewportData[] {\n\t\tverticalOffset1 = verticalOffset1|0;\n\t\tverticalOffset2 = verticalOffset2|0;\n\t\tdeviceLineHeight = deviceLineHeight|0;\n\n\t\tlet startIndex = this.getWhitespaceIndexAtOrAfterVerticallOffset(verticalOffset1, deviceLineHeight);\n\t\tlet endIndex = this.whitespaces.getCount() - 1;\n\n\t\tif (startIndex < 0) {\n\t\t\treturn [];\n\t\t}\n\n\t\tlet result: IViewWhitespaceViewportData[] = [],\n\t\t\ti:number,\n\t\t\ttop:number,\n\t\t\theight:number;\n\n\t\tfor (i = startIndex; i <= endIndex; i++) {\n\t\t\ttop = this.getVerticalOffsetForWhitespaceIndex(i, deviceLineHeight);\n\t\t\theight = this.whitespaces.getHeightForWhitespaceIndex(i);\n\t\t\tif (top >= verticalOffset2) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tresult.push({\n\t\t\t\tid: this.whitespaces.getIdForWhitespaceIndex(i),\n\t\t\t\tafterLineNumber: this.whitespaces.getAfterLineNumberForWhitespaceIndex(i),\n\t\t\t\tverticalOffset: top,\n\t\t\t\theight: height\n\t\t\t});\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tpublic getWhitespaces(deviceLineHeight:number): IEditorWhitespace[] {\n\t\treturn this.whitespaces.getWhitespaces(deviceLineHeight);\n\t}\n}"]}