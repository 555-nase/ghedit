{"version":3,"file":"vs/editor/common/viewLayout/linesLayout.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/editor/common/viewLayout/linesLayout.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport * as editorCommon from 'vs/editor/common/editorCommon';\nimport {VerticalObjects} from 'vs/editor/common/viewLayout/verticalObjects';\nimport {Range} from 'vs/editor/common/core/range';\n\n/**\n * Layouting of objects that take vertical space (by having a height) and push down other objects.\n *\n * These objects are basically either text (lines) or spaces between those lines (whitespaces).\n * This provides commodity operations for working with lines that contain whitespace that pushes lines lower (vertically).\n * This is a thin wrapper around VerticalObjects.VerticalObjects, with knowledge of the editor.\n */\nexport class LinesLayout {\n\n\tprivate configuration: editorCommon.IConfiguration;\n\tprivate model: editorCommon.IViewModel;\n\tprivate verticalObjects:VerticalObjects;\n\n\tprivate _lineHeight: number;\n\tprivate _scrollBeyondLastLine: boolean;\n\n\tconstructor(configuration: editorCommon.IConfiguration, model:editorCommon.IViewModel) {\n\t\tthis.configuration = configuration;\n\t\tthis._lineHeight = this.configuration.editor.lineHeight;\n\t\tthis._scrollBeyondLastLine = this.configuration.editor.scrollBeyondLastLine;\n\n\t\tthis.model = model;\n\t\tthis.verticalObjects = new VerticalObjects();\n\t\tthis.verticalObjects.replaceLines(model.getLineCount());\n\t}\n\n\tpublic onConfigurationChanged(e:editorCommon.IConfigurationChangedEvent): void {\n\t\tif (e.lineHeight) {\n\t\t\tthis._lineHeight = this.configuration.editor.lineHeight;\n\t\t}\n\t\tif (e.scrollBeyondLastLine) {\n\t\t\tthis._scrollBeyondLastLine = this.configuration.editor.scrollBeyondLastLine;\n\t\t}\n\t}\n\n\t/**\n\t * Insert a new whitespace of a certain height after a line number.\n\t * The whitespace has a \"sticky\" characteristic.\n\t * Irrespective of edits above or below `afterLineNumber`, the whitespace will follow the initial line.\n\t *\n\t * @param afterLineNumber The conceptual position of this whitespace. The whitespace will follow this line as best as possible even when deleting/inserting lines above/below.\n\t * @param heightInPx The height of the whitespace, in pixels.\n\t * @return An id that can be used later to mutate or delete the whitespace\n\t */\n\tpublic insertWhitespace(afterLineNumber:number, ordinal:number, height:number): number {\n\t\treturn this.verticalObjects.insertWhitespace(afterLineNumber, ordinal, height);\n\t}\n\n\tpublic changeWhitespace(id:number, newAfterLineNumber:number, newHeight:number): boolean {\n\t\treturn this.verticalObjects.changeWhitespace(id, newAfterLineNumber, newHeight);\n\t}\n\n\t/**\n\t * Remove an existing whitespace.\n\t *\n\t * @param id The whitespace to remove\n\t * @return Returns true if the whitespace is found and it is removed.\n\t */\n\tpublic removeWhitespace(id:number): boolean {\n\t\treturn this.verticalObjects.removeWhitespace(id);\n\t}\n\n\t/**\n\t * Event handler, call when the model associated to this view has been flushed.\n\t */\n\tpublic onModelFlushed(): void {\n\t\tthis.verticalObjects.replaceLines(this.model.getLineCount());\n\t}\n\n\t/**\n\t * Event handler, call when the model has had lines deleted.\n\t */\n\tpublic onModelLinesDeleted(e:editorCommon.IViewLinesDeletedEvent): void {\n\t\tthis.verticalObjects.onModelLinesDeleted(e.fromLineNumber, e.toLineNumber);\n\t}\n\n\t/**\n\t * Event handler, call when the model has had lines inserted.\n\t */\n\tpublic onModelLinesInserted(e:editorCommon.IViewLinesInsertedEvent): void {\n\t\tthis.verticalObjects.onModelLinesInserted(e.fromLineNumber, e.toLineNumber);\n\t}\n\n\t/**\n\t * Get the vertical offset (the sum of heights for all objects above) a certain line number.\n\t *\n\t * @param lineNumber The line number\n\t * @return The sum of heights for all objects above `lineNumber`.\n\t */\n\tpublic getVerticalOffsetForLineNumber(lineNumber:number): number {\n\t\treturn this.verticalObjects.getVerticalOffsetForLineNumber(lineNumber, this._lineHeight);\n\t}\n\n\tpublic getLinesTotalHeight(): number {\n\t\treturn this.verticalObjects.getTotalHeight(this._lineHeight);\n\t}\n\n\t/**\n\t * Get the sum of heights for all objects and compute basically the `scrollHeight` for the editor content.\n\t *\n\t * Take into account the `scrollBeyondLastLine` and `reserveHorizontalScrollbarHeight` and produce a scrollHeight that is at least as large as `viewport`.height.\n\t *\n\t * @param viewport The viewport.\n\t * @param reserveHorizontalScrollbarHeight The height of the horizontal scrollbar.\n\t * @return Basically, the `scrollHeight` for the editor content.\n\t */\n\tpublic getTotalHeight(viewport:editorCommon.Viewport, reserveHorizontalScrollbarHeight:number): number {\n\t\tvar totalLinesHeight = this.getLinesTotalHeight();\n\n//\t\tif (this.context.configuration.editor.autoSize) {\n//\t\t\treturn linesHeight;\n//\t\t}\n\n\t\tif (this._scrollBeyondLastLine) {\n\t\t\ttotalLinesHeight += viewport.height - this._lineHeight;\n\t\t} else {\n\t\t\ttotalLinesHeight += reserveHorizontalScrollbarHeight;\n\t\t}\n\n\t\treturn Math.max(viewport.height, totalLinesHeight);\n\t}\n\n\tpublic isAfterLines(verticalOffset:number): boolean {\n\t\treturn this.verticalObjects.isAfterLines(verticalOffset, this._lineHeight);\n\t}\n\n\t/**\n\t * Find the first line number that is at or after vertical offset `verticalOffset`.\n\t * i.e. if getVerticalOffsetForLine(line) is x and getVerticalOffsetForLine(line + 1) is y, then\n\t * getLineNumberAtOrAfterVerticalOffset(i) = line, x <= i < y.\n\t *\n\t * @param verticalOffset The vertical offset to search at.\n\t * @return The line number at or after vertical offset `verticalOffset`.\n\t */\n\tpublic getLineNumberAtOrAfterVerticalOffset(verticalOffset:number): number {\n\t\treturn this.verticalObjects.getLineNumberAtOrAfterVerticalOffset(verticalOffset, this._lineHeight);\n\t}\n\n\t/**\n\t * Get the height, in pixels, for line `lineNumber`.\n\t *\n\t * @param lineNumber The line number\n\t * @return The height, in pixels, for line `lineNumber`.\n\t */\n\tpublic getHeightForLineNumber(lineNumber:number): number {\n\t\treturn this._lineHeight;\n\t}\n\n\t/**\n\t * Get a list of whitespaces that are positioned inside `viewport`.\n\t *\n\t * @param viewport The viewport.\n\t * @return An array with all the whitespaces in the viewport. If no whitespace is in viewport, the array is empty.\n\t */\n\tpublic getWhitespaceViewportData(visibleBox:editorCommon.Viewport): editorCommon.IViewWhitespaceViewportData[] {\n\t\treturn this.verticalObjects.getWhitespaceViewportData(visibleBox.top, visibleBox.top + visibleBox.height, this._lineHeight);\n\t}\n\n\tpublic getWhitespaces(): editorCommon.IEditorWhitespace[] {\n\t\treturn this.verticalObjects.getWhitespaces(this._lineHeight);\n\t}\n\n\t/**\n\t * Get exactly the whitespace that is layouted at `verticalOffset`.\n\t *\n\t * @param verticalOffset The vertical offset.\n\t * @return Precisely the whitespace that is layouted at `verticaloffset` or null.\n\t */\n\tpublic getWhitespaceAtVerticalOffset(verticalOffset:number): editorCommon.IViewWhitespaceViewportData {\n\t\treturn this.verticalObjects.getWhitespaceAtVerticalOffset(verticalOffset, this._lineHeight);\n\t}\n\n\t/**\n\t * Get all the lines and their relative vertical offsets that are positioned inside `viewport`.\n\t *\n\t * @param viewport The viewport.\n\t * @return A structure describing the lines positioned between `verticalOffset1` and `verticalOffset2`.\n\t */\n\tpublic getLinesViewportData(visibleBox:editorCommon.Viewport): editorCommon.ViewLinesViewportData {\n\t\tlet partialData = this.verticalObjects.getLinesViewportData(visibleBox.top, visibleBox.top + visibleBox.height, this._lineHeight);\n\t\tlet decorationsData = this.model.getDecorationsViewportData(partialData.startLineNumber, partialData.endLineNumber);\n\t\tlet visibleRange = new Range(\n\t\t\tpartialData.startLineNumber,\n\t\t\t1,\n\t\t\tpartialData.endLineNumber,\n\t\t\tthis.model.getLineMaxColumn(partialData.endLineNumber)\n\t\t);\n\n\t\treturn new editorCommon.ViewLinesViewportData(partialData, visibleRange, decorationsData);\n\t}\n\n\t/**\n\t * Get the line that appears visually in the center of `viewport`.\n\t *\n\t * @param viewport The viewport.\n\t * @return The line number that is closest to the center of `viewport`.\n\t */\n\tpublic getCenteredLineInViewport(visibleBox:editorCommon.Viewport): number {\n\t\treturn this.verticalObjects.getCenteredLineInViewport(visibleBox.top, visibleBox.top + visibleBox.height, this._lineHeight);\n\t}\n\n\t/**\n\t * Returns the accumulated height of whitespaces before the given line number.\n\t *\n\t * @param lineNumber The line number\n\t */\n\tpublic getWhitespaceAccumulatedHeightBeforeLineNumber(lineNumber:number): number {\n\t\treturn this.verticalObjects.getWhitespaceAccumulatedHeightBeforeLineNumber(lineNumber);\n\t}\n\n\t/**\n\t * Returns if there is any whitespace in the document.\n\t */\n\tpublic hasWhitespace(): boolean {\n\t\treturn this.verticalObjects.hasWhitespace();\n\t}\n}\n"]}