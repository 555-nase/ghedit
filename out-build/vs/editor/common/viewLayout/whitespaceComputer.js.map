{"version":3,"file":"vs/editor/common/viewLayout/whitespaceComputer.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/editor/common/viewLayout/whitespaceComputer.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {IEditorWhitespace} from 'vs/editor/common/editorCommon';\n\n/**\n * Represent whitespaces in between lines and provide fast CRUD management methods.\n * The whitespaces are sorted ascending by `afterLineNumber`.\n */\nexport class WhitespaceComputer {\n\n\t/**\n\t * heights[i] is the height in pixels for whitespace at index i\n\t */\n\tprivate heights:number[];\n\n\t/**\n\t * afterLineNumbers[i] is the line number whitespace at index i is after\n\t */\n\tprivate afterLineNumbers:number[];\n\n\t/**\n\t * ordinals[i] is the orinal of the whitespace at index i\n\t */\n\tprivate ordinals:number[];\n\n\t/**\n\t * prefixSum[i] = SUM(heights[j]), 1 <= j <= i\n\t */\n\tprivate prefixSum:number[];\n\n\t/**\n\t * prefixSum[i], 1 <= i <= prefixSumValidIndex can be trusted\n\t */\n\tprivate prefixSumValidIndex:number;\n\n\t/**\n\t * ids[i] is the whitespace id of whitespace at index i\n\t */\n\tprivate ids:number[];\n\n\t/**\n\t * index at which a whitespace is positioned (inside heights, afterLineNumbers, prefixSum members)\n\t */\n\tprivate whitespaceId2Index:{\n\t\t[id:string]:number;\n\t};\n\n\t/**\n\t * last whitespace id issued\n\t */\n\tprivate lastWhitespaceId:number;\n\n\tconstructor() {\n\t\tthis.heights = [];\n\t\tthis.ids = [];\n\t\tthis.afterLineNumbers = [];\n\t\tthis.ordinals = [];\n\t\tthis.prefixSum = [];\n\t\tthis.prefixSumValidIndex = -1;\n\t\tthis.whitespaceId2Index = {};\n\t\tthis.lastWhitespaceId = 0;\n\t}\n\n\t/**\n\t * Find the insertion index for a new value inside a sorted array of values.\n\t * If the value is already present in the sorted array, the insertion index will be after the already existing value.\n\t */\n\tpublic static findInsertionIndex(sortedArray:number[], value:number, ordinals:number[], valueOrdinal:number): number {\n\t\tvar low = 0,\n\t\t\thigh = sortedArray.length,\n\t\t\tmid:number;\n\n\t\twhile (low < high) {\n\t\t\tmid = Math.floor( (low + high) / 2 );\n\n\t\t\tif (value === sortedArray[mid]) {\n\t\t\t\tif (valueOrdinal < ordinals[mid]) {\n\t\t\t\t\thigh = mid;\n\t\t\t\t} else {\n\t\t\t\t\tlow = mid + 1;\n\t\t\t\t}\n\t\t\t} else if (value < sortedArray[mid]) {\n\t\t\t\thigh = mid;\n\t\t\t} else {\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t}\n\n\t\treturn low;\n\t}\n\n\t/**\n\t * Insert a new whitespace of a certain height after a line number.\n\t * The whitespace has a \"sticky\" characteristic.\n\t * Irrespective of edits above or below `afterLineNumber`, the whitespace will follow the initial line.\n\t *\n\t * @param afterLineNumber The conceptual position of this whitespace. The whitespace will follow this line as best as possible even when deleting/inserting lines above/below.\n\t * @param heightInPx The height of the whitespace, in pixels.\n\t * @return An id that can be used later to mutate or delete the whitespace\n\t */\n\tpublic insertWhitespace(afterLineNumber:number, ordinal:number, heightInPx:number): number {\n\t\tafterLineNumber = afterLineNumber|0;\n\t\tordinal = ordinal|0;\n\t\theightInPx = heightInPx|0;\n\n\t\tvar id = (++this.lastWhitespaceId);\n\t\tvar insertionIndex = WhitespaceComputer.findInsertionIndex(this.afterLineNumbers, afterLineNumber, this.ordinals, ordinal);\n\t\tthis.insertWhitespaceAtIndex(id, insertionIndex, afterLineNumber, ordinal, heightInPx);\n\t\treturn id;\n\t}\n\n\tprivate insertWhitespaceAtIndex(id:number, insertIndex:number, afterLineNumber:number, ordinal:number, heightInPx:number): void {\n\t\tid = id|0;\n\t\tinsertIndex = insertIndex|0;\n\t\tafterLineNumber = afterLineNumber|0;\n\t\tordinal = ordinal|0;\n\t\theightInPx = heightInPx|0;\n\n\t\tthis.heights.splice(insertIndex, 0, heightInPx);\n\t\tthis.ids.splice(insertIndex, 0, id);\n\t\tthis.afterLineNumbers.splice(insertIndex, 0, afterLineNumber);\n\t\tthis.ordinals.splice(insertIndex, 0, ordinal);\n\t\tthis.prefixSum.splice(insertIndex, 0, 0);\n\n\t\tlet keys = Object.keys(this.whitespaceId2Index);\n\t\tfor (let i = 0, len = keys.length; i < len; i++) {\n\t\t\tlet sid = keys[i];\n\t\t\tlet oldIndex = this.whitespaceId2Index[sid];\n\t\t\tif (oldIndex >= insertIndex) {\n\t\t\t\tthis.whitespaceId2Index[sid] = oldIndex + 1;\n\t\t\t}\n\t\t}\n\n\t\tthis.whitespaceId2Index[id.toString()] = insertIndex;\n\t\tthis.prefixSumValidIndex = Math.min(this.prefixSumValidIndex, insertIndex - 1);\n\t}\n\n\tpublic changeWhitespace(id:number, newAfterLineNumber:number, newHeight:number): boolean {\n\t\tid = id|0;\n\t\tnewAfterLineNumber = newAfterLineNumber|0;\n\t\tnewHeight = newHeight|0;\n\n\t\tlet hasChanges = false;\n\t\thasChanges = this.changeWhitespaceHeight(id, newHeight) || hasChanges;\n\t\thasChanges = this.changeWhitespaceAfterLineNumber(id, newAfterLineNumber) || hasChanges;\n\t\treturn hasChanges;\n\t}\n\n\t/**\n\t * Change the height of an existing whitespace\n\t *\n\t * @param id The whitespace to change\n\t * @param newHeightInPx The new height of the whitespace, in pixels\n\t * @return Returns true if the whitespace is found and if the new height is different than the old height\n\t */\n\tpublic changeWhitespaceHeight(id:number, newHeightInPx:number): boolean {\n\t\tid = id|0;\n\t\tnewHeightInPx = newHeightInPx|0;\n\n\t\tvar sid = id.toString();\n\t\tif (this.whitespaceId2Index.hasOwnProperty(sid)) {\n\t\t\tvar index = this.whitespaceId2Index[sid];\n\t\t\tif (this.heights[index] !== newHeightInPx) {\n\t\t\t\tthis.heights[index] = newHeightInPx;\n\t\t\t\tthis.prefixSumValidIndex = Math.min(this.prefixSumValidIndex, index - 1);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Change the line number after which an existing whitespace flows.\n\t *\n\t * @param id The whitespace to change\n\t * @param newAfterLineNumber The new line number the whitespace will follow\n\t * @return Returns true if the whitespace is found and if the new line number is different than the old line number\n\t */\n\tpublic changeWhitespaceAfterLineNumber(id:number, newAfterLineNumber:number): boolean {\n\t\tid = id|0;\n\t\tnewAfterLineNumber = newAfterLineNumber|0;\n\n\t\tvar sid = id.toString();\n\t\tif (this.whitespaceId2Index.hasOwnProperty(sid)) {\n\t\t\tvar index = this.whitespaceId2Index[sid];\n\t\t\tif (this.afterLineNumbers[index] !== newAfterLineNumber) {\n\t\t\t\t// `afterLineNumber` changed for this whitespace\n\n\t\t\t\t// Record old ordinal\n\t\t\t\tvar ordinal = this.ordinals[index];\n\n\t\t\t\t// Record old height\n\t\t\t\tvar heightInPx = this.heights[index];\n\n\t\t\t\t// Since changing `afterLineNumber` can trigger a reordering, we're gonna remove this whitespace\n\t\t\t\tthis.removeWhitespace(id);\n\n\t\t\t\t// And add it again\n\t\t\t\tvar insertionIndex = WhitespaceComputer.findInsertionIndex(this.afterLineNumbers, newAfterLineNumber, this.ordinals, ordinal);\n\t\t\t\tthis.insertWhitespaceAtIndex(id, insertionIndex, newAfterLineNumber, ordinal, heightInPx);\n\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Remove an existing whitespace.\n\t *\n\t * @param id The whitespace to remove\n\t * @return Returns true if the whitespace is found and it is removed.\n\t */\n\tpublic removeWhitespace(id:number): boolean {\n\t\tid = id|0;\n\n\t\tvar sid = id.toString();\n\n\t\tif (this.whitespaceId2Index.hasOwnProperty(sid)) {\n\t\t\tvar index = this.whitespaceId2Index[sid];\n\t\t\tdelete this.whitespaceId2Index[sid];\n\t\t\tthis.removeWhitespaceAtIndex(index);\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tprivate removeWhitespaceAtIndex(removeIndex:number): void {\n\t\tremoveIndex = removeIndex|0;\n\n\t\tthis.heights.splice(removeIndex, 1);\n\t\tthis.ids.splice(removeIndex, 1);\n\t\tthis.afterLineNumbers.splice(removeIndex, 1);\n\t\tthis.ordinals.splice(removeIndex, 1);\n\t\tthis.prefixSum.splice(removeIndex, 1);\n\t\tthis.prefixSumValidIndex = Math.min(this.prefixSumValidIndex, removeIndex - 1);\n\n\t\tlet keys = Object.keys(this.whitespaceId2Index);\n\t\tfor (let i = 0, len = keys.length; i < len; i++) {\n\t\t\tlet sid = keys[i];\n\t\t\tlet oldIndex = this.whitespaceId2Index[sid];\n\t\t\tif (oldIndex >= removeIndex) {\n\t\t\t\tthis.whitespaceId2Index[sid] = oldIndex - 1;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Notify the computer that lines have been deleted (a continuous zone of lines).\n\t * This gives it a chance to update `afterLineNumber` for whitespaces, giving the \"sticky\" characteristic.\n\t *\n\t * @param fromLineNumber The line number at which the deletion started, inclusive\n\t * @param toLineNumber The line number at which the deletion ended, inclusive\n\t */\n\tpublic onModelLinesDeleted(fromLineNumber:number, toLineNumber:number): void {\n\t\tfromLineNumber = fromLineNumber|0;\n\t\ttoLineNumber = toLineNumber|0;\n\n\t\tvar afterLineNumber:number,\n\t\t\ti:number,\n\t\t\tlen:number;\n\n\t\tfor (i = 0, len = this.afterLineNumbers.length; i < len; i++) {\n\t\t\tafterLineNumber = this.afterLineNumbers[i];\n\n\t\t\tif (fromLineNumber <= afterLineNumber && afterLineNumber <= toLineNumber) {\n\t\t\t\t// The line this whitespace was after has been deleted\n\t\t\t\t//  => move whitespace to before first deleted line\n\t\t\t\tthis.afterLineNumbers[i] = fromLineNumber - 1;\n\t\t\t} else if (afterLineNumber > toLineNumber) {\n\t\t\t\t// The line this whitespace was after has been moved up\n\t\t\t\t//  => move whitespace up\n\t\t\t\tthis.afterLineNumbers[i] -= (toLineNumber - fromLineNumber + 1);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Notify the computer that lines have been inserted (a continuous zone of lines).\n\t * This gives it a chance to update `afterLineNumber` for whitespaces, giving the \"sticky\" characteristic.\n\t *\n\t * @param fromLineNumber The line number at which the insertion started, inclusive\n\t * @param toLineNumber The line number at which the insertion ended, inclusive.\n\t */\n\tpublic onModelLinesInserted(fromLineNumber:number, toLineNumber:number): void {\n\t\tfromLineNumber = fromLineNumber|0;\n\t\ttoLineNumber = toLineNumber|0;\n\n\t\tvar afterLineNumber:number,\n\t\t\ti:number,\n\t\t\tlen:number;\n\n\t\tfor (i = 0, len = this.afterLineNumbers.length; i < len; i++) {\n\t\t\tafterLineNumber = this.afterLineNumbers[i];\n\n\t\t\tif (fromLineNumber <= afterLineNumber) {\n\t\t\t\tthis.afterLineNumbers[i] += (toLineNumber - fromLineNumber + 1);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Get the sum of all the whitespaces.\n\t */\n\tpublic getTotalHeight(): number {\n\t\tif (this.heights.length === 0) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn this.getAccumulatedHeight(this.heights.length - 1);\n\t}\n\n\t/**\n\t * Return the sum of the heights of the whitespaces at [0..index].\n\t * This includes the whitespace at `index`.\n\t *\n\t * @param index The index of the whitespace.\n\t * @return The sum of the heights of all whitespaces before the one at `index`, including the one at `index`.\n\t */\n\tpublic getAccumulatedHeight(index:number): number {\n\t\tindex = index|0;\n\n\t\tvar startIndex = Math.max(0, this.prefixSumValidIndex + 1);\n\t\tif (startIndex === 0) {\n\t\t\tthis.prefixSum[0] = this.heights[0];\n\t\t\tstartIndex++;\n\t\t}\n\n\t\tfor (var i = startIndex; i <= index; i++) {\n\t\t\tthis.prefixSum[i] = this.prefixSum[i - 1] + this.heights[i];\n\t\t}\n\t\tthis.prefixSumValidIndex = Math.max(this.prefixSumValidIndex, index);\n\t\treturn this.prefixSum[index];\n\t}\n\n\t/**\n\t * Find all whitespaces with `afterLineNumber` < `lineNumber` and return the sum of their heights.\n\t *\n\t * @param lineNumber The line number whitespaces should be before.\n\t * @return The sum of the heights of the whitespaces before `lineNumber`.\n\t */\n\tpublic getAccumulatedHeightBeforeLineNumber(lineNumber:number): number {\n\t\tlineNumber = lineNumber|0;\n\n\t\tvar lastWhitespaceBeforeLineNumber = this.findLastWhitespaceBeforeLineNumber(lineNumber);\n\n\t\tif (lastWhitespaceBeforeLineNumber === -1) {\n\t\t\treturn 0;\n\t\t}\n\n\t\treturn this.getAccumulatedHeight(lastWhitespaceBeforeLineNumber);\n\t}\n\n\tprivate findLastWhitespaceBeforeLineNumber(lineNumber:number): number {\n\t\tlineNumber = lineNumber|0;\n\n\t\t// Find the whitespace before line number\n\t\tlet afterLineNumbers = this.afterLineNumbers;\n\t\tlet low = 0;\n\t\tlet high = afterLineNumbers.length - 1;\n\n\t\twhile (low <= high) {\n\t\t\tlet delta = (high - low)|0;\n\t\t\tlet halfDelta = (delta / 2)|0;\n\t\t\tlet mid = (low + halfDelta)|0;\n\n\t\t\tif (afterLineNumbers[mid] < lineNumber) {\n\t\t\t\tif (mid + 1 >= afterLineNumbers.length || afterLineNumbers[mid + 1] >= lineNumber) {\n\t\t\t\t\treturn mid;\n\t\t\t\t} else {\n\t\t\t\t\tlow = (mid + 1)|0;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\thigh = (mid - 1)|0;\n\t\t\t}\n\t\t}\n\n\t\treturn -1;\n\t}\n\n\tprivate findFirstWhitespaceAfterLineNumber(lineNumber:number): number {\n\t\tlineNumber = lineNumber|0;\n\n\t\tvar lastWhitespaceBeforeLineNumber = this.findLastWhitespaceBeforeLineNumber(lineNumber);\n\t\tvar firstWhitespaceAfterLineNumber = lastWhitespaceBeforeLineNumber + 1;\n\n\t\tif (firstWhitespaceAfterLineNumber < this.heights.length) {\n\t\t\treturn firstWhitespaceAfterLineNumber;\n\t\t}\n\n\t\treturn -1;\n\t}\n\n\t/**\n\t * Find the index of the first whitespace which has `afterLineNumber` >= `lineNumber`.\n\t * @return The index of the first whitespace with `afterLineNumber` >= `lineNumber` or -1 if no whitespace is found.\n\t */\n\tpublic getFirstWhitespaceIndexAfterLineNumber(lineNumber:number): number {\n\t\tlineNumber = lineNumber|0;\n\n\t\treturn this.findFirstWhitespaceAfterLineNumber(lineNumber);\n\t}\n\n\t/**\n\t * The number of whitespaces.\n\t */\n\tpublic getCount(): number {\n\t\treturn this.heights.length;\n\t}\n\n\t/**\n\t * Get the `afterLineNumber` for whitespace at index `index`.\n\t *\n\t * @param index The index of the whitespace.\n\t * @return `afterLineNumber` of whitespace at `index`.\n\t */\n\tpublic getAfterLineNumberForWhitespaceIndex(index:number): number {\n\t\tindex = index|0;\n\n\t\treturn this.afterLineNumbers[index];\n\t}\n\n\t/**\n\t * Get the `id` for whitespace at index `index`.\n\t *\n\t * @param index The index of the whitespace.\n\t * @return `id` of whitespace at `index`.\n\t */\n\tpublic getIdForWhitespaceIndex(index:number): number {\n\t\tindex = index|0;\n\n\t\treturn this.ids[index];\n\t}\n\n\t/**\n\t * Get the `height` for whitespace at index `index`.\n\t *\n\t * @param index The index of the whitespace.\n\t * @return `height` of whitespace at `index`.\n\t */\n\tpublic getHeightForWhitespaceIndex(index:number): number {\n\t\tindex = index|0;\n\n\t\treturn this.heights[index];\n\t}\n\n\tpublic getWhitespaces(deviceLineHeight:number): IEditorWhitespace[] {\n\t\tdeviceLineHeight = deviceLineHeight|0;\n\n\t\tvar result: IEditorWhitespace[] = [];\n\t\tfor (var i = 0; i < this.heights.length; i++) {\n\t\t\tresult.push({\n\t\t\t\tid: this.ids[i],\n\t\t\t\tafterLineNumber: this.afterLineNumbers[i],\n\t\t\t\theightInLines: this.heights[i] / deviceLineHeight\n\t\t\t});\n\t\t}\n\t\treturn result;\n\t}\n}"]}