{"version":3,"file":"textAreaState.js","sourceRoot":"","sources":["../../../../../src/vs/editor/common/controller/textAreaState.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport Event from 'vs/base/common/event';\nimport {commonPrefixLength, commonSuffixLength} from 'vs/base/common/strings';\nimport {Range} from 'vs/editor/common/core/range';\nimport {EndOfLinePreference, IEditorPosition, IEditorRange, IRange} from 'vs/editor/common/editorCommon';\n\nexport interface IClipboardEvent {\n\tcanUseTextData(): boolean;\n\tsetTextData(text:string): void;\n\tgetTextData(): string;\n}\n\nexport interface IKeyboardEventWrapper {\n\t_actual: any;\n\tequals(keybinding:number): boolean;\n\tpreventDefault(): void;\n\tisDefaultPrevented(): boolean;\n}\n\nexport interface ITextAreaWrapper {\n\tonKeyDown: Event<IKeyboardEventWrapper>;\n\tonKeyUp: Event<IKeyboardEventWrapper>;\n\tonKeyPress: Event<IKeyboardEventWrapper>;\n\tonCompositionStart: Event<void>;\n\tonCompositionEnd: Event<void>;\n\tonInput: Event<void>;\n\tonCut: Event<IClipboardEvent>;\n\tonCopy: Event<IClipboardEvent>;\n\tonPaste: Event<IClipboardEvent>;\n\n\tgetValue(): string;\n\tsetValue(reason:string, value:string): void;\n\tgetSelectionStart(): number;\n\tgetSelectionEnd(): number;\n\n\tsetSelectionRange(selectionStart:number, selectionEnd:number): void;\n\tisInOverwriteMode(): boolean;\n}\n\nexport interface ISimpleModel {\n\tgetLineMaxColumn(lineNumber:number): number;\n\tgetEOL(): string;\n\tgetValueInRange(range:IRange, eol:EndOfLinePreference): string;\n\tgetModelLineContent(lineNumber:number): string;\n\tgetLineCount(): number;\n\tconvertViewPositionToModelPosition(viewLineNumber:number, viewColumn:number): IEditorPosition;\n}\n\nexport interface ITypeData {\n\ttext: string;\n\treplaceCharCnt: number;\n}\n\nexport enum TextAreaStrategy {\n\tIENarrator,\n\tNVDA\n}\n\nconst USE_NVDA_FULL_TEXT = false;\n\nexport function createTextAreaState(strategy:TextAreaStrategy): TextAreaState {\n\tif (strategy === TextAreaStrategy.IENarrator) {\n\t\treturn IENarratorTextAreaState.EMPTY;\n\t}\n\tif (USE_NVDA_FULL_TEXT) {\n\t\treturn NVDAFullTextAreaState.EMPTY;\n\t}\n\treturn NVDAPagedTextAreaState.EMPTY;\n}\n\nexport abstract class TextAreaState {\n\n\tprotected previousState:TextAreaState;\n\tprotected value:string;\n\tprotected selectionStart:number;\n\tprotected selectionEnd:number;\n\tprotected isInOverwriteMode:boolean;\n\n\tconstructor(previousState:TextAreaState, value:string, selectionStart:number, selectionEnd:number, isInOverwriteMode:boolean) {\n\t\tthis.previousState = previousState ? previousState.shallowClone() : null;\n\t\tthis.value = value;\n\t\tthis.selectionStart = selectionStart;\n\t\tthis.selectionEnd = selectionEnd;\n\t\tthis.isInOverwriteMode = isInOverwriteMode;\n\t}\n\n\tprotected abstract shallowClone(): TextAreaState;\n\n\tpublic abstract toEmpty(): TextAreaState;\n\n\tpublic abstract toString(): string;\n\n\tpublic abstract toStrategy(strategy:TextAreaStrategy): TextAreaState;\n\n\tpublic abstract equals(other:TextAreaState): boolean;\n\n\tpublic abstract fromTextArea(textArea:ITextAreaWrapper): TextAreaState;\n\n\tpublic abstract fromEditorSelection(model:ISimpleModel, selection:IEditorRange);\n\n\tpublic abstract fromText(text:string): TextAreaState;\n\n\tpublic abstract resetSelection(): TextAreaState;\n\n\tpublic getSelectionStart(): number {\n\t\treturn this.selectionStart;\n\t}\n\n\tpublic getValue(): string {\n\t\treturn this.value;\n\t}\n\n\tpublic applyToTextArea(reason:string, textArea:ITextAreaWrapper, select:boolean): void {\n\t\t// console.log(Date.now() + ': applyToTextArea ' + reason + ': ' + this.toString());\n\t\tif (textArea.getValue() !== this.value) {\n\t\t\ttextArea.setValue(reason, this.value);\n\t\t}\n\t\tif (select) {\n\t\t\ttextArea.setSelectionRange(this.selectionStart, this.selectionEnd);\n\t\t}\n\t}\n\n\tpublic deduceInput(): ITypeData {\n\t\tif (!this.previousState) {\n\t\t\t// This is the EMPTY state\n\t\t\treturn {\n\t\t\t\ttext: '',\n\t\t\t\treplaceCharCnt: 0\n\t\t\t};\n\t\t}\n\n\t\t// console.log('------------------------deduceInput');\n\t\t// console.log('CURRENT STATE: ' + this.toString());\n\t\t// console.log('PREVIOUS STATE: ' + this.previousState.toString());\n\n\t\tlet previousValue = this.previousState.value;\n\t\tlet previousSelectionStart = this.previousState.selectionStart;\n\t\tlet previousSelectionEnd = this.previousState.selectionEnd;\n\t\tlet currentValue = this.value;\n\t\tlet currentSelectionStart = this.selectionStart;\n\t\tlet currentSelectionEnd = this.selectionEnd;\n\n\t\t// Strip the previous suffix from the value (without interfering with the current selection)\n\t\tlet previousSuffix = previousValue.substring(previousSelectionEnd);\n\t\tlet currentSuffix = currentValue.substring(currentSelectionEnd);\n\t\tlet suffixLength = commonSuffixLength(previousSuffix, currentSuffix);\n\t\tcurrentValue = currentValue.substring(0, currentValue.length - suffixLength);\n\t\tpreviousValue = previousValue.substring(0, previousValue.length - suffixLength);\n\n\t\tlet previousPrefix = previousValue.substring(0, previousSelectionStart);\n\t\tlet currentPrefix = currentValue.substring(0, currentSelectionStart);\n\t\tlet prefixLength = commonPrefixLength(previousPrefix, currentPrefix);\n\t\tcurrentValue = currentValue.substring(prefixLength);\n\t\tpreviousValue = previousValue.substring(prefixLength);\n\t\tcurrentSelectionStart -= prefixLength;\n\t\tpreviousSelectionStart -= prefixLength;\n\t\tcurrentSelectionEnd -= prefixLength;\n\t\tpreviousSelectionEnd -= prefixLength;\n\n\t\t// console.log('AFTER DIFFING CURRENT STATE: <' + currentValue + '>, selectionStart: ' + currentSelectionStart + ', selectionEnd: ' + currentSelectionEnd);\n\t\t// console.log('AFTER DIFFING PREVIOUS STATE: <' + previousValue + '>, selectionStart: ' + previousSelectionStart + ', selectionEnd: ' + previousSelectionEnd);\n\n\t\tif (currentSelectionStart === currentSelectionEnd) {\n\t\t\t// composition accept case\n\t\t\t// [blahblah] => blahblah|\n\t\t\tif (\n\t\t\t\tpreviousValue === currentValue\n\t\t\t\t&& previousSelectionStart === 0\n\t\t\t\t&& previousSelectionEnd === previousValue.length\n\t\t\t\t&& currentSelectionStart === currentValue.length\n\t\t\t\t&& currentValue.indexOf('\\n') === -1\n\t\t\t) {\n\t\t\t\treturn {\n\t\t\t\t\ttext: '',\n\t\t\t\t\treplaceCharCnt: 0\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t// no current selection\n\t\t\tlet replacePreviousCharacters = (previousPrefix.length - prefixLength);\n\t\t\t// console.log('REMOVE PREVIOUS: ' + (previousPrefix.length - prefixLength) + ' chars');\n\n\t\t\treturn {\n\t\t\t\ttext: currentValue,\n\t\t\t\treplaceCharCnt: replacePreviousCharacters\n\t\t\t};\n\t\t}\n\n\t\t// there is a current selection => composition case\n\t\tlet replacePreviousCharacters = previousSelectionEnd - previousSelectionStart;\n\t\treturn {\n\t\t\ttext: currentValue,\n\t\t\treplaceCharCnt: replacePreviousCharacters\n\t\t};\n\t}\n}\n\nexport class IENarratorTextAreaState extends TextAreaState {\n\tpublic static EMPTY = new IENarratorTextAreaState(null, '', 0, 0, false, 0);\n\n\tprivate selectionToken:number;\n\n\tconstructor(previousState:TextAreaState, value:string, selectionStart:number, selectionEnd:number, isInOverwriteMode:boolean, selectionToken:number) {\n\t\tsuper(previousState, value, selectionStart, selectionEnd, isInOverwriteMode);\n\t\tthis.selectionToken = selectionToken;\n\t}\n\n\tprotected shallowClone(): TextAreaState {\n\t\treturn new IENarratorTextAreaState(null, this.value, this.selectionStart, this.selectionEnd, this.isInOverwriteMode, this.selectionToken);\n\t}\n\n\tpublic toEmpty(): TextAreaState {\n\t\treturn IENarratorTextAreaState.EMPTY;\n\t}\n\n\tpublic toString(): string {\n\t\treturn '[ <' + this.value + '>, selectionStart: ' + this.selectionStart + ', selectionEnd: ' + this.selectionEnd + ', isInOverwriteMode: ' + this.isInOverwriteMode + ', selectionToken: ' + this.selectionToken + ']';\n\t}\n\n\tpublic toStrategy(strategy:TextAreaStrategy): TextAreaState {\n\t\tif (strategy === TextAreaStrategy.IENarrator) {\n\t\t\treturn this;\n\t\t}\n\t\tif (USE_NVDA_FULL_TEXT) {\n\t\t\treturn new NVDAFullTextAreaState(this.previousState, this.value, this.selectionStart, this.selectionEnd, this.isInOverwriteMode);\n\t\t}\n\t\treturn new NVDAPagedTextAreaState(this.previousState, this.value, this.selectionStart, this.selectionEnd, this.isInOverwriteMode);\n\t}\n\n\tpublic equals(other:TextAreaState): boolean {\n\t\tif (other instanceof IENarratorTextAreaState) {\n\t\t\treturn (\n\t\t\t\tthis.value === other.value\n\t\t\t\t&& this.selectionStart === other.selectionStart\n\t\t\t\t&& this.selectionEnd === other.selectionEnd\n\t\t\t\t&& this.isInOverwriteMode === other.isInOverwriteMode\n\t\t\t\t&& this.selectionToken === other.selectionToken\n\t\t\t);\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic fromTextArea(textArea:ITextAreaWrapper): TextAreaState {\n\t\treturn new IENarratorTextAreaState(this, textArea.getValue(), textArea.getSelectionStart(), textArea.getSelectionEnd(), textArea.isInOverwriteMode(), this.selectionToken);\n\t}\n\n\tpublic fromEditorSelection(model:ISimpleModel, selection:IEditorRange): TextAreaState {\n\t\tlet LIMIT_CHARS = 100;\n\t\tlet PADDING_LINES_COUNT = 0;\n\n\t\tlet selectionStartLineNumber = selection.startLineNumber,\n\t\t\tselectionStartColumn = selection.startColumn,\n\t\t\tselectionEndLineNumber = selection.endLineNumber,\n\t\t\tselectionEndColumn = selection.endColumn,\n\t\t\tselectionEndLineNumberMaxColumn = model.getLineMaxColumn(selectionEndLineNumber);\n\n\t\t// If the selection is empty and we have switched line numbers, expand selection to full line (helps Narrator trigger a full line read)\n\t\tif (selection.isEmpty() && this.selectionToken !== selectionStartLineNumber) {\n\t\t\tselectionStartColumn = 1;\n\t\t\tselectionEndColumn = selectionEndLineNumberMaxColumn;\n\t\t}\n\n\t\t// `pretext` contains the text before the selection\n\t\tlet pretext = '';\n\t\tlet startLineNumber = Math.max(1, selectionStartLineNumber - PADDING_LINES_COUNT);\n\t\tif (startLineNumber < selectionStartLineNumber) {\n\t\t\tpretext = model.getValueInRange(new Range(startLineNumber, 1, selectionStartLineNumber, 1), EndOfLinePreference.LF);\n\t\t}\n\t\tpretext += model.getValueInRange(new Range(selectionStartLineNumber, 1, selectionStartLineNumber, selectionStartColumn), EndOfLinePreference.LF);\n\t\tif (pretext.length > LIMIT_CHARS) {\n\t\t\tpretext = pretext.substring(pretext.length - LIMIT_CHARS, pretext.length);\n\t\t}\n\n\n\t\t// `posttext` contains the text after the selection\n\t\tlet posttext = '';\n\t\tlet endLineNumber = Math.min(selectionEndLineNumber + PADDING_LINES_COUNT, model.getLineCount());\n\t\tposttext += model.getValueInRange(new Range(selectionEndLineNumber, selectionEndColumn, selectionEndLineNumber, selectionEndLineNumberMaxColumn), EndOfLinePreference.LF);\n\t\tif (endLineNumber > selectionEndLineNumber) {\n\t\t\tposttext = '\\n' + model.getValueInRange(new Range(selectionEndLineNumber + 1, 1, endLineNumber, model.getLineMaxColumn(endLineNumber)), EndOfLinePreference.LF);\n\t\t}\n\t\tif (posttext.length > LIMIT_CHARS) {\n\t\t\tposttext = posttext.substring(0, LIMIT_CHARS);\n\t\t}\n\n\n\t\t// `text` contains the text of the selection\n\t\tlet text = model.getValueInRange(new Range(selectionStartLineNumber, selectionStartColumn, selectionEndLineNumber, selectionEndColumn), EndOfLinePreference.LF);\n\t\tif (text.length > 2 * LIMIT_CHARS) {\n\t\t\ttext = text.substring(0, LIMIT_CHARS) + String.fromCharCode(8230) + text.substring(text.length - LIMIT_CHARS, text.length);\n\t\t}\n\n\t\treturn new IENarratorTextAreaState(this, pretext + text + posttext, pretext.length, pretext.length + text.length, false, selectionStartLineNumber);\n\t}\n\n\tpublic fromText(text:string): TextAreaState {\n\t\treturn new IENarratorTextAreaState(this, text, 0, text.length, false, 0);\n\t}\n\n\tpublic resetSelection(): TextAreaState {\n\t\treturn new IENarratorTextAreaState(this.previousState, this.value, this.value.length, this.value.length, this.isInOverwriteMode, this.selectionToken);\n\t}\n}\n\nexport class NVDAPagedTextAreaState extends TextAreaState {\n\tpublic static EMPTY = new NVDAPagedTextAreaState(null, '', 0, 0, false);\n\tprivate static _LINES_PER_PAGE = 10;\n\n\tconstructor(previousState:TextAreaState, value:string, selectionStart:number, selectionEnd:number, isInOverwriteMode:boolean) {\n\t\tsuper(previousState, value, selectionStart, selectionEnd, isInOverwriteMode);\n\t}\n\n\tprotected shallowClone(): TextAreaState {\n\t\treturn new NVDAPagedTextAreaState(null, this.value, this.selectionStart, this.selectionEnd, this.isInOverwriteMode);\n\t}\n\n\tpublic toEmpty(): TextAreaState {\n\t\treturn NVDAPagedTextAreaState.EMPTY;\n\t}\n\n\tpublic toString(): string {\n\t\treturn '[ <' + this.value + '>, selectionStart: ' + this.selectionStart + ', selectionEnd: ' + this.selectionEnd + ', isInOverwriteMode: ' + this.isInOverwriteMode + ']';\n\t}\n\n\tpublic toStrategy(strategy:TextAreaStrategy): TextAreaState {\n\t\tif (strategy === TextAreaStrategy.NVDA) {\n\t\t\treturn this;\n\t\t}\n\t\treturn new IENarratorTextAreaState(this.previousState, this.value, this.selectionStart, this.selectionEnd, this.isInOverwriteMode, 0);\n\t}\n\n\tpublic equals(other:TextAreaState): boolean {\n\t\tif (other instanceof NVDAPagedTextAreaState) {\n\t\t\treturn (\n\t\t\t\tthis.value === other.value\n\t\t\t\t&& this.selectionStart === other.selectionStart\n\t\t\t\t&& this.selectionEnd === other.selectionEnd\n\t\t\t\t&& this.isInOverwriteMode === other.isInOverwriteMode\n\t\t\t);\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic fromTextArea(textArea:ITextAreaWrapper): TextAreaState {\n\t\treturn new NVDAPagedTextAreaState(this, textArea.getValue(), textArea.getSelectionStart(), textArea.getSelectionEnd(), textArea.isInOverwriteMode());\n\t}\n\n\tprivate static _getPageOfLine(lineNumber:number): number {\n\t\treturn Math.floor((lineNumber - 1) / NVDAPagedTextAreaState._LINES_PER_PAGE);\n\t}\n\n\tprivate static _getRangeForPage(page:number): Range {\n\t\tlet offset = page * NVDAPagedTextAreaState._LINES_PER_PAGE;\n\t\tlet startLineNumber = offset + 1;\n\t\tlet endLineNumber = offset + NVDAPagedTextAreaState._LINES_PER_PAGE;\n\t\treturn new Range(startLineNumber, 1, endLineNumber, Number.MAX_VALUE);\n\t}\n\n\tpublic fromEditorSelection(model:ISimpleModel, selection:IEditorRange): TextAreaState {\n\n\t\tlet selectionStartPage = NVDAPagedTextAreaState._getPageOfLine(selection.startLineNumber);\n\t\tlet selectionStartPageRange = NVDAPagedTextAreaState._getRangeForPage(selectionStartPage);\n\n\t\tlet selectionEndPage = NVDAPagedTextAreaState._getPageOfLine(selection.endLineNumber);\n\t\tlet selectionEndPageRange = NVDAPagedTextAreaState._getRangeForPage(selectionEndPage);\n\n\t\tlet pretextRange = selectionStartPageRange.intersectRanges(new Range(1, 1, selection.startLineNumber, selection.startColumn));\n\t\tlet pretext = model.getValueInRange(pretextRange, EndOfLinePreference.LF);\n\n\t\tlet lastLine = model.getLineCount();\n\t\tlet lastLineMaxColumn = model.getLineMaxColumn(lastLine);\n\t\tlet posttextRange = selectionEndPageRange.intersectRanges(new Range(selection.endLineNumber, selection.endColumn, lastLine, lastLineMaxColumn));\n\t\tlet posttext = model.getValueInRange(posttextRange, EndOfLinePreference.LF);\n\n\t\tlet text:string = null;\n\t\tif (selectionStartPage <= selectionEndPage) {\n\t\t\t// take full selection\n\t\t\ttext = model.getValueInRange(selection, EndOfLinePreference.LF);\n\t\t} else {\n\t\t\tlet selectionRange1 = selectionStartPageRange.intersectRanges(selection);\n\t\t\tlet selectionRange2 = selectionEndPageRange.intersectRanges(selection);\n\t\t\ttext = (\n\t\t\t\tmodel.getValueInRange(selectionRange1, EndOfLinePreference.LF)\n\t\t\t\t+ String.fromCharCode(8230)\n\t\t\t\t+ model.getValueInRange(selectionRange2, EndOfLinePreference.LF)\n\t\t\t);\n\t\t}\n\n\t\treturn new NVDAPagedTextAreaState(this, pretext + text + posttext, pretext.length, pretext.length + text.length, false);\n\t}\n\n\tpublic fromText(text:string): TextAreaState {\n\t\treturn new NVDAPagedTextAreaState(this, text, 0, text.length, false);\n\t}\n\n\tpublic resetSelection(): TextAreaState {\n\t\treturn new NVDAPagedTextAreaState(this.previousState, this.value, this.value.length, this.value.length, this.isInOverwriteMode);\n\t}\n}\n\n\nexport class NVDAFullTextAreaState extends TextAreaState {\n\tpublic static EMPTY = new NVDAFullTextAreaState(null, '', 0, 0, false);\n\n\tconstructor(previousState:TextAreaState, value:string, selectionStart:number, selectionEnd:number, isInOverwriteMode:boolean) {\n\t\tsuper(previousState, value, selectionStart, selectionEnd, isInOverwriteMode);\n\t}\n\n\tprotected shallowClone(): TextAreaState {\n\t\treturn new NVDAFullTextAreaState(null, this.value, this.selectionStart, this.selectionEnd, this.isInOverwriteMode);\n\t}\n\n\tpublic toEmpty(): TextAreaState {\n\t\treturn NVDAFullTextAreaState.EMPTY;\n\t}\n\n\tpublic toString(): string {\n\t\treturn '[ <ENTIRE TEXT' + /*this.value +*/ '>, selectionStart: ' + this.selectionStart + ', selectionEnd: ' + this.selectionEnd + ', isInOverwriteMode: ' + this.isInOverwriteMode + ']';\n\t}\n\n\tpublic toStrategy(strategy:TextAreaStrategy): TextAreaState {\n\t\tif (strategy === TextAreaStrategy.NVDA) {\n\t\t\treturn this;\n\t\t}\n\t\treturn new IENarratorTextAreaState(this.previousState, this.value, this.selectionStart, this.selectionEnd, this.isInOverwriteMode, 0);\n\t}\n\n\tpublic equals(other:TextAreaState): boolean {\n\t\tif (other instanceof NVDAFullTextAreaState) {\n\t\t\treturn (\n\t\t\t\tthis.value === other.value\n\t\t\t\t&& this.selectionStart === other.selectionStart\n\t\t\t\t&& this.selectionEnd === other.selectionEnd\n\t\t\t\t&& this.isInOverwriteMode === other.isInOverwriteMode\n\t\t\t);\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic fromTextArea(textArea:ITextAreaWrapper): TextAreaState {\n\t\treturn new NVDAFullTextAreaState(this, textArea.getValue(), textArea.getSelectionStart(), textArea.getSelectionEnd(), textArea.isInOverwriteMode());\n\t}\n\n\tpublic fromEditorSelection(model:ISimpleModel, selection:IEditorRange): TextAreaState {\n\t\tlet pretext = model.getValueInRange(new Range(1, 1, selection.startLineNumber, selection.startColumn), EndOfLinePreference.LF);\n\t\tlet text = model.getValueInRange(selection, EndOfLinePreference.LF);\n\t\tlet lastLine = model.getLineCount();\n\t\tlet lastLineMaxColumn = model.getLineMaxColumn(lastLine);\n\t\tlet posttext = model.getValueInRange(new Range(selection.endLineNumber, selection.endColumn, lastLine, lastLineMaxColumn), EndOfLinePreference.LF);\n\n\t\treturn new NVDAFullTextAreaState(this, pretext + text + posttext, pretext.length, pretext.length + text.length, false);\n\t}\n\n\tpublic fromText(text:string): TextAreaState {\n\t\treturn new NVDAFullTextAreaState(this, text, 0, text.length, false);\n\t}\n\n\tpublic resetSelection(): TextAreaState {\n\t\treturn new NVDAFullTextAreaState(this.previousState, this.value, this.value.length, this.value.length, this.isInOverwriteMode);\n\t}\n}\n"]}