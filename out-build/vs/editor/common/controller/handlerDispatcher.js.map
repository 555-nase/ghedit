{"version":3,"file":"handlerDispatcher.js","sourceRoot":"","sources":["../../../../../src/vs/editor/common/controller/handlerDispatcher.ts"],"names":[],"mappings":";IAAA;;;oGAGgG;IAChG,YAAY,CAAC;IAIb;QAKC,yBAAY,MAAa,EAAE,IAAQ;YAClC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;YACrB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QAClB,CAAC;QAEM,mCAAS,GAAhB;YACC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;QACpB,CAAC;QAEM,iCAAO,GAAd;YACC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;QAClB,CAAC;QACF,sBAAC;IAAD,CAAC,AAjBD,IAiBC;IAjBY,uBAAe,kBAiB3B,CAAA;IAMD;QAGC;YACC,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;QACpB,CAAC;QAEM,sCAAU,GAAjB,UAAkB,SAAgB,EAAE,eAAwB;YAC3D,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,GAAG,eAAe,CAAC;QAC5C,CAAC;QAEM,yCAAa,GAApB;YACC,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;QACpB,CAAC;QAEO,sCAAU,GAAlB,UAAmB,SAAgB;YAClC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC;QAClF,CAAC;QAEM,mCAAO,GAAd,UAAe,MAAa,EAAE,SAAgB,EAAE,OAAW;YAC1D,IAAI,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;YACzC,IAAI,OAAO,GAAG,KAAK,CAAC;YACpB,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;gBACb,IAAI,CAAC,GAAG,IAAI,eAAe,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;gBAC7C,OAAO,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;YACtB,CAAC;YACD,MAAM,CAAC,OAAO,CAAC;QAChB,CAAC;QACF,wBAAC;IAAD,CAAC,AA5BD,IA4BC;IA5BY,yBAAiB,oBA4B7B,CAAA","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {IDispatcherEvent, IHandler} from 'vs/editor/common/editorCommon';\n\nexport class DispatcherEvent implements IDispatcherEvent {\n\n\tprivate source:string;\n\tprivate data:any;\n\n\tconstructor(source:string, data:any) {\n\t\tthis.source = source;\n\t\tthis.data = data;\n\t}\n\n\tpublic getSource(): string {\n\t\treturn this.source;\n\t}\n\n\tpublic getData(): any {\n\t\treturn this.data;\n\t}\n}\n\ninterface IHandlersMap {\n\t[key:string]:IHandler;\n}\n\nexport class HandlerDispatcher {\n\tprivate registry:IHandlersMap;\n\n\tconstructor() {\n\t\tthis.registry = {};\n\t}\n\n\tpublic setHandler(handlerId:string, handlerCallback:IHandler): void {\n\t\tthis.registry[handlerId] = handlerCallback;\n\t}\n\n\tpublic clearHandlers(): void {\n\t\tthis.registry = {};\n\t}\n\n\tprivate getHandler(handlerId:string): IHandler {\n\t\treturn this.registry.hasOwnProperty(handlerId) ? this.registry[handlerId] : null;\n\t}\n\n\tpublic trigger(source:string, handlerId:string, payload:any): boolean {\n\t\tvar handler = this.getHandler(handlerId);\n\t\tvar handled = false;\n\t\tif (handler) {\n\t\t\tvar e = new DispatcherEvent(source, payload);\n\t\t\thandled = handler(e);\n\t\t}\n\t\treturn handled;\n\t}\n}\n"]}