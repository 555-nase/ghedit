{"version":3,"file":"cursorMoveHelper.js","sourceRoot":"","sources":["../../../../../src/vs/editor/common/controller/cursorMoveHelper.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {IInternalIndentationOptions, IPosition, IEditorSelection} from 'vs/editor/common/editorCommon';\nimport {Selection} from 'vs/editor/common/core/selection';\n\nexport interface IMoveResult {\n\tlineNumber:number;\n\tcolumn:number;\n\tleftoverVisibleColumns: number;\n}\n\nexport interface IViewColumnSelectResult {\n\tviewSelections: IEditorSelection[];\n\treversed: boolean;\n}\nexport interface IColumnSelectResult extends IViewColumnSelectResult {\n\tselections: IEditorSelection[];\n\ttoLineNumber: number;\n\ttoVisualColumn: number;\n}\n\nexport interface ICursorMoveHelperModel {\n\tgetLineCount(): number;\n\tgetLineFirstNonWhitespaceColumn(lineNumber:number): number;\n\tgetLineMinColumn(lineNumber:number): number;\n\tgetLineMaxColumn(lineNumber:number): number;\n\tgetLineLastNonWhitespaceColumn(lineNumber:number): number;\n\tgetLineContent(lineNumber:number): string;\n}\n\nexport interface IConfiguration {\n\tgetIndentationOptions(): IInternalIndentationOptions;\n}\n\nfunction isHighSurrogate(model, lineNumber, column) {\n\tvar code = model.getLineContent(lineNumber).charCodeAt(column - 1);\n\treturn 0xD800 <= code && code <= 0xDBFF;\n}\n\nfunction isLowSurrogate(model, lineNumber, column) {\n\tvar code = model.getLineContent(lineNumber).charCodeAt(column - 1);\n\treturn 0xDC00 <= code && code <= 0xDFFF;\n}\n\nexport class CursorMoveHelper {\n\n\tprivate configuration: IConfiguration;\n\n\tconstructor(configuration:IConfiguration) {\n\t\tthis.configuration = configuration;\n\t}\n\n\tpublic getLeftOfPosition(model:ICursorMoveHelperModel, lineNumber:number, column:number): IPosition {\n\n\t\tif (column > model.getLineMinColumn(lineNumber)) {\n\t\t\tcolumn = column - (isLowSurrogate(model, lineNumber, column - 1) ? 2 : 1);\n\t\t} else if (lineNumber > 1) {\n\t\t\tlineNumber = lineNumber - 1;\n\t\t\tcolumn = model.getLineMaxColumn(lineNumber);\n\t\t}\n\n\t\treturn {\n\t\t\tlineNumber: lineNumber,\n\t\t\tcolumn: column\n\t\t};\n\t}\n\n\tpublic getRightOfPosition(model:ICursorMoveHelperModel, lineNumber:number, column:number): IPosition {\n\n\t\tif (column < model.getLineMaxColumn(lineNumber)) {\n\t\t\tcolumn = column + (isHighSurrogate(model, lineNumber, column) ? 2 : 1);\n\t\t} else if (lineNumber < model.getLineCount()) {\n\t\t\tlineNumber = lineNumber + 1;\n\t\t\tcolumn = model.getLineMinColumn(lineNumber);\n\t\t}\n\n\t\treturn {\n\t\t\tlineNumber: lineNumber,\n\t\t\tcolumn: column\n\t\t};\n\t}\n\n\tpublic getPositionUp(model:ICursorMoveHelperModel, lineNumber:number, column:number, leftoverVisibleColumns:number, count:number, allowMoveOnFirstLine:boolean): IMoveResult {\n\t\tvar currentVisibleColumn = this.visibleColumnFromColumn(model, lineNumber, column) + leftoverVisibleColumns;\n\n\t\tlineNumber = lineNumber - count;\n\t\tif (lineNumber < 1) {\n\t\t\tlineNumber = 1;\n\t\t\tif (allowMoveOnFirstLine) {\n\t\t\t\tcolumn = model.getLineMinColumn(lineNumber);\n\t\t\t} else {\n\t\t\t\tcolumn = Math.min(model.getLineMaxColumn(lineNumber), column);\n\t\t\t}\n\t\t} else {\n\t\t\tcolumn = this.columnFromVisibleColumn(model, lineNumber, currentVisibleColumn);\n\t\t}\n\t\tleftoverVisibleColumns = currentVisibleColumn - this.visibleColumnFromColumn(model, lineNumber, column);\n\n\n\t\treturn {\n\t\t\tlineNumber: lineNumber,\n\t\t\tcolumn: column,\n\t\t\tleftoverVisibleColumns: leftoverVisibleColumns\n\t\t};\n\t}\n\n\tpublic getPositionDown(model:ICursorMoveHelperModel, lineNumber:number, column:number, leftoverVisibleColumns:number, count:number, allowMoveOnLastLine:boolean): IMoveResult {\n\t\tvar currentVisibleColumn = this.visibleColumnFromColumn(model, lineNumber, column) + leftoverVisibleColumns;\n\n\t\tlineNumber = lineNumber + count;\n\t\tvar lineCount = model.getLineCount();\n\t\tif (lineNumber > lineCount) {\n\t\t\tlineNumber = lineCount;\n\t\t\tif (allowMoveOnLastLine) {\n\t\t\t\tcolumn = model.getLineMaxColumn(lineNumber);\n\t\t\t} else {\n\t\t\t\tcolumn = Math.min(model.getLineMaxColumn(lineNumber), column);\n\t\t\t}\n\t\t} else {\n\t\t\tcolumn = this.columnFromVisibleColumn(model, lineNumber, currentVisibleColumn);\n\t\t}\n\t\tleftoverVisibleColumns = currentVisibleColumn - this.visibleColumnFromColumn(model, lineNumber, column);\n\n\t\treturn {\n\t\t\tlineNumber: lineNumber,\n\t\t\tcolumn: column,\n\t\t\tleftoverVisibleColumns: leftoverVisibleColumns\n\t\t};\n\t}\n\n\tpublic columnSelect(model:ICursorMoveHelperModel, fromLineNumber:number, fromVisibleColumn:number, toLineNumber:number, toVisibleColumn:number): IViewColumnSelectResult {\n\t\tlet lineCount = Math.abs(toLineNumber - fromLineNumber) + 1;\n\t\tlet reversed = (fromLineNumber > toLineNumber);\n\t\tlet isRTL = (fromVisibleColumn > toVisibleColumn);\n\t\tlet isLTR = (fromVisibleColumn < toVisibleColumn);\n\n\t\tlet result: IEditorSelection[] = [];\n\n\t\t// console.log(`fromVisibleColumn: ${fromVisibleColumn}, toVisibleColumn: ${toVisibleColumn}`);\n\n\t\tfor (let i = 0; i < lineCount; i++) {\n\t\t\tlet lineNumber = fromLineNumber + (reversed ? -i : i);\n\n\t\t\tlet startColumn = this.columnFromVisibleColumn(model, lineNumber, fromVisibleColumn);\n\t\t\tlet endColumn = this.columnFromVisibleColumn(model, lineNumber, toVisibleColumn);\n\t\t\tlet visibleStartColumn = this.visibleColumnFromColumn(model, lineNumber, startColumn);\n\t\t\tlet visibleEndColumn = this.visibleColumnFromColumn(model, lineNumber, endColumn);\n\n\t\t\t// console.log(`lineNumber: ${lineNumber}: visibleStartColumn: ${visibleStartColumn}, visibleEndColumn: ${visibleEndColumn}`);\n\n\t\t\tif (isLTR) {\n\t\t\t\tif (visibleStartColumn > toVisibleColumn) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (visibleEndColumn < fromVisibleColumn) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (isRTL) {\n\t\t\t\tif (visibleEndColumn > fromVisibleColumn) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (visibleStartColumn < toVisibleColumn) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tresult.push(new Selection(lineNumber, startColumn, lineNumber, endColumn));\n\t\t}\n\n\t\treturn {\n\t\t\tviewSelections: result,\n\t\t\treversed: reversed\n\t\t};\n\t}\n\n\tpublic getColumnAtBeginningOfLine(model:ICursorMoveHelperModel, lineNumber:number, column:number): number {\n\t\tvar firstNonBlankColumn = model.getLineFirstNonWhitespaceColumn(lineNumber) || 1;\n\t\tvar minColumn = model.getLineMinColumn(lineNumber);\n\n\t\tif (column !== minColumn && column <= firstNonBlankColumn) {\n\t\t\tcolumn = minColumn;\n\t\t} else {\n\t\t\tcolumn = firstNonBlankColumn;\n\t\t}\n\n\t\treturn column;\n\t}\n\n\tpublic getColumnAtEndOfLine(model:ICursorMoveHelperModel, lineNumber:number, column:number): number {\n\t\tvar maxColumn = model.getLineMaxColumn(lineNumber);\n\t\tvar lastNonBlankColumn = model.getLineLastNonWhitespaceColumn(lineNumber) || maxColumn;\n\n\t\tif (column !== maxColumn && column >= lastNonBlankColumn) {\n\t\t\tcolumn = maxColumn;\n\t\t} else {\n\t\t\tcolumn = lastNonBlankColumn;\n\t\t}\n\n\t\treturn column;\n\t}\n\n\tpublic visibleColumnFromColumn(model:ICursorMoveHelperModel, lineNumber:number, column:number): number {\n\t\treturn CursorMoveHelper.visibleColumnFromColumn(model, lineNumber, column, this.configuration.getIndentationOptions().tabSize);\n\t}\n\n\tpublic static visibleColumnFromColumn(model:ICursorMoveHelperModel, lineNumber:number, column:number, tabSize:number): number {\n\t\treturn CursorMoveHelper.visibleColumnFromColumn2(model.getLineContent(lineNumber), column, tabSize);\n\t}\n\n\tpublic static visibleColumnFromColumn2(line:string, column:number, tabSize:number): number {\n\t\tvar result = 0;\n\t\tfor (var i = 0; i < column - 1; i++) {\n\t\t\tresult = (line.charAt(i) === '\\t') ? CursorMoveHelper.nextTabColumn(result, tabSize) : result + 1;\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic columnFromVisibleColumn(model:ICursorMoveHelperModel, lineNumber:number, visibleColumn:number): number {\n\t\tvar line = model.getLineContent(lineNumber);\n\n\t\tvar lastVisibleColumn = -1;\n\t\tvar thisVisibleColumn = 0;\n\n\t\tfor (var i = 0; i < line.length && thisVisibleColumn <= visibleColumn; i++) {\n\t\t\tlastVisibleColumn = thisVisibleColumn;\n\t\t\tthisVisibleColumn = (line.charAt(i) === '\\t') ? CursorMoveHelper.nextTabColumn(thisVisibleColumn, this.configuration.getIndentationOptions().tabSize) : thisVisibleColumn + 1;\n\t\t}\n\n\t\t// Choose the closest\n\t\tthisVisibleColumn = Math.abs(visibleColumn - thisVisibleColumn);\n\t\tlastVisibleColumn = Math.abs(visibleColumn - lastVisibleColumn);\n\n\t\tvar result: number;\n\t\tif (thisVisibleColumn < lastVisibleColumn) {\n\t\t\tresult = i + 1;\n\t\t} else {\n\t\t\tresult = i;\n\t\t}\n\n\t\tvar minColumn = model.getLineMinColumn(lineNumber);\n\t\tif (result < minColumn) {\n\t\t\tresult = minColumn;\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n\t * ATTENTION: This works with 0-based columns (as oposed to the regular 1-based columns)\n\t */\n\tpublic static nextTabColumn(column:number, tabSize:number): number {\n\t\treturn column + tabSize - column % tabSize;\n\t}\n\n\t/**\n\t * ATTENTION: This works with 0-based columns (as oposed to the regular 1-based columns)\n\t */\n\tpublic static prevTabColumn(column:number, tabSize:number): number {\n\t\treturn column - 1 - ( column - 1 ) % tabSize;\n\t}\n}"]}