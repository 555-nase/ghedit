{"version":3,"file":"vs/editor/common/diff/diffComputer.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/editor/common/diff/diffComputer.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {IDiffChange, ISequence, LcsDiff} from 'vs/base/common/diff/diff';\nimport * as strings from 'vs/base/common/strings';\nimport {ICharChange, ILineChange} from 'vs/editor/common/editorCommon';\n\nvar MAXIMUM_RUN_TIME = 5000; // 5 seconds\nvar MINIMUM_MATCHING_CHARACTER_LENGTH = 3;\n\ninterface IMarker {\n\tlineNumber: number;\n\tcolumn: number;\n\toffset: number;\n}\n\nfunction computeDiff(originalSequence:ISequence, modifiedSequence:ISequence, continueProcessingPredicate:()=>boolean): IDiffChange[] {\n\tvar diffAlgo = new LcsDiff(originalSequence, modifiedSequence, continueProcessingPredicate);\n\treturn diffAlgo.ComputeDiff();\n}\n\nclass MarkerSequence implements ISequence {\n\n\tpublic buffer:string;\n\tpublic startMarkers:IMarker[];\n\tpublic endMarkers:IMarker[];\n\n\tconstructor(buffer:string, startMarkers:IMarker[], endMarkers:IMarker[]) {\n\t\tthis.buffer = buffer;\n\t\tthis.startMarkers = startMarkers;\n\t\tthis.endMarkers = endMarkers;\n\t}\n\n\tpublic equals(other:any): boolean {\n\t\tif (!(other instanceof MarkerSequence)) {\n\t\t\treturn false;\n\t\t}\n\t\tvar otherMarkerSequence = <MarkerSequence>other;\n\t\tif (this.getLength() !== otherMarkerSequence.getLength()) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (var i = 0, len = this.getLength(); i < len; i++) {\n\t\t\tvar myElement = this.getElementHash(i);\n\t\t\tvar otherElement = otherMarkerSequence.getElementHash(i);\n\t\t\tif (myElement !== otherElement) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\tpublic getLength(): number {\n\t\treturn this.startMarkers.length;\n\t}\n\n\tpublic getElementHash(i:number): string {\n\t\treturn this.buffer.substring(this.startMarkers[i].offset, this.endMarkers[i].offset);\n\t}\n\n\tpublic getStartLineNumber(i:number): number {\n\t\tif (i === this.startMarkers.length) {\n\t\t\t// This is the special case where a change happened after the last marker\n\t\t\treturn this.startMarkers[i - 1].lineNumber + 1;\n\t\t}\n\t\treturn this.startMarkers[i].lineNumber;\n\t}\n\n\tpublic getStartColumn(i:number): number {\n\t\treturn this.startMarkers[i].column;\n\t}\n\n\tpublic getEndLineNumber(i:number): number {\n\t\treturn this.endMarkers[i].lineNumber;\n\t}\n\n\tpublic getEndColumn(i:number): number {\n\t\treturn this.endMarkers[i].column;\n\t}\n\n}\n\nclass LineMarkerSequence extends MarkerSequence {\n\n\tconstructor(lines:string[], shouldIgnoreTrimWhitespace:boolean) {\n\t\tvar i:number, length:number, pos:number;\n\t\tvar buffer = '';\n\t\tvar startMarkers:IMarker[] = [], endMarkers:IMarker[] = [], startColumn:number, endColumn:number;\n\n\t\tfor (pos = 0, i = 0, length = lines.length; i < length; i++) {\n\t\t\tbuffer += lines[i];\n\t\t\tstartColumn = 1;\n\t\t\tendColumn = lines[i].length + 1;\n\n\t\t\tif (shouldIgnoreTrimWhitespace) {\n\t\t\t\tstartColumn = LineMarkerSequence._getFirstNonBlankColumn(lines[i], 1);\n\t\t\t\tendColumn = LineMarkerSequence._getLastNonBlankColumn(lines[i], 1);\n\t\t\t}\n\n\t\t\tstartMarkers.push({\n\t\t\t\toffset: pos + startColumn - 1,\n\t\t\t\tlineNumber: i + 1,\n\t\t\t\tcolumn: startColumn\n\t\t\t});\n\n\t\t\tendMarkers.push({\n\t\t\t\toffset: pos + endColumn - 1,\n\t\t\t\tlineNumber: i+1,\n\t\t\t\tcolumn: endColumn\n\t\t\t});\n\n\t\t\tpos += lines[i].length;\n\t\t}\n\n\t\tsuper(buffer, startMarkers, endMarkers);\n\t}\n\n\tprivate static _getFirstNonBlankColumn(txt:string, defaultValue:number): number {\n\t\tvar r = strings.firstNonWhitespaceIndex(txt);\n\t\tif (r === -1) {\n\t\t\treturn defaultValue;\n\t\t}\n\t\treturn r + 1;\n\t}\n\n\tprivate static _getLastNonBlankColumn(txt:string, defaultValue:number): number {\n\t\tvar r = strings.lastNonWhitespaceIndex(txt);\n\t\tif (r === -1) {\n\t\t\treturn defaultValue;\n\t\t}\n\t\treturn r + 2;\n\t}\n\n\tpublic getCharSequence(startIndex:number, endIndex:number):MarkerSequence {\n\t\tvar startMarkers:IMarker[] = [], endMarkers:IMarker[] = [], index:number, i:number, startMarker:IMarker, endMarker:IMarker;\n\t\tfor (index = startIndex; index <= endIndex; index++) {\n\t\t\tstartMarker = this.startMarkers[index];\n\t\t\tendMarker = this.endMarkers[index];\n\t\t\tfor (i = startMarker.offset; i < endMarker.offset; i++) {\n\t\t\t\tstartMarkers.push({\n\t\t\t\t\toffset: i,\n\t\t\t\t\tlineNumber: startMarker.lineNumber,\n\t\t\t\t\tcolumn: startMarker.column + (i - startMarker.offset)\n\t\t\t\t});\n\t\t\t\tendMarkers.push({\n\t\t\t\t\toffset: i + 1,\n\t\t\t\t\tlineNumber: startMarker.lineNumber,\n\t\t\t\t\tcolumn: startMarker.column + (i - startMarker.offset) + 1\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\treturn new MarkerSequence(this.buffer, startMarkers, endMarkers);\n\t}\n}\n\nclass CharChange implements ICharChange {\n\n\tpublic originalStartLineNumber:number;\n\tpublic originalStartColumn:number;\n\tpublic originalEndLineNumber:number;\n\tpublic originalEndColumn:number;\n\n\tpublic modifiedStartLineNumber:number;\n\tpublic modifiedStartColumn:number;\n\tpublic modifiedEndLineNumber:number;\n\tpublic modifiedEndColumn:number;\n\n\tconstructor(diffChange:IDiffChange, originalCharSequence:MarkerSequence, modifiedCharSequence:MarkerSequence) {\n\t\tif (diffChange.originalLength === 0) {\n\t\t\tthis.originalStartLineNumber = 0;\n\t\t\tthis.originalStartColumn = 0;\n\t\t\tthis.originalEndLineNumber = 0;\n\t\t\tthis.originalEndColumn = 0;\n\t\t} else {\n\t\t\tthis.originalStartLineNumber = originalCharSequence.getStartLineNumber(diffChange.originalStart);\n\t\t\tthis.originalStartColumn = originalCharSequence.getStartColumn(diffChange.originalStart);\n\t\t\tthis.originalEndLineNumber = originalCharSequence.getEndLineNumber(diffChange.originalStart + diffChange.originalLength - 1);\n\t\t\tthis.originalEndColumn = originalCharSequence.getEndColumn(diffChange.originalStart + diffChange.originalLength - 1);\n\t\t}\n\n\t\tif (diffChange.modifiedLength === 0) {\n\t\t\tthis.modifiedStartLineNumber = 0;\n\t\t\tthis.modifiedStartColumn = 0;\n\t\t\tthis.modifiedEndLineNumber = 0;\n\t\t\tthis.modifiedEndColumn = 0;\n\t\t} else {\n\t\t\tthis.modifiedStartLineNumber = modifiedCharSequence.getStartLineNumber(diffChange.modifiedStart);\n\t\t\tthis.modifiedStartColumn = modifiedCharSequence.getStartColumn(diffChange.modifiedStart);\n\t\t\tthis.modifiedEndLineNumber = modifiedCharSequence.getEndLineNumber(diffChange.modifiedStart + diffChange.modifiedLength - 1);\n\t\t\tthis.modifiedEndColumn = modifiedCharSequence.getEndColumn(diffChange.modifiedStart + diffChange.modifiedLength - 1);\n\t\t}\n\t}\n\n}\n\nfunction postProcessCharChanges(rawChanges:IDiffChange[]): IDiffChange[] {\n\tif (rawChanges.length <= 1) {\n\t\treturn rawChanges;\n\t}\n\tvar result = [ rawChanges[0] ];\n\n\tvar i:number, len:number, originalMatchingLength:number, modifiedMatchingLength:number, matchingLength:number, prevChange = result[0], currChange:IDiffChange;\n\tfor (i = 1, len = rawChanges.length; i < len; i++) {\n\t\tcurrChange = rawChanges[i];\n\n\t\toriginalMatchingLength = currChange.originalStart - (prevChange.originalStart + prevChange.originalLength);\n\t\tmodifiedMatchingLength = currChange.modifiedStart - (prevChange.modifiedStart + prevChange.modifiedLength);\n\t\t// Both of the above should be equal, but the continueProcessingPredicate may prevent this from being true\n\t\tmatchingLength = Math.min(originalMatchingLength, modifiedMatchingLength);\n\n\t\tif (matchingLength < MINIMUM_MATCHING_CHARACTER_LENGTH) {\n\t\t\t// Merge the current change into the previous one\n\t\t\tprevChange.originalLength = (currChange.originalStart + currChange.originalLength) - prevChange.originalStart;\n\t\t\tprevChange.modifiedLength = (currChange.modifiedStart + currChange.modifiedLength) - prevChange.modifiedStart;\n\t\t} else {\n\t\t\t// Add the current change\n\t\t\tresult.push(currChange);\n\t\t\tprevChange = currChange;\n\t\t}\n\t}\n\n\treturn result;\n}\n\nclass LineChange implements ILineChange {\n\tpublic originalStartLineNumber:number;\n\tpublic originalEndLineNumber:number;\n\tpublic modifiedStartLineNumber:number;\n\tpublic modifiedEndLineNumber:number;\n\tpublic charChanges:CharChange[];\n\n\tconstructor(diffChange:IDiffChange, originalLineSequence:LineMarkerSequence, modifiedLineSequence:LineMarkerSequence, continueProcessingPredicate:()=>boolean, shouldPostProcessCharChanges:boolean) {\n\t\tif (diffChange.originalLength === 0) {\n\t\t\tthis.originalStartLineNumber = originalLineSequence.getStartLineNumber(diffChange.originalStart) - 1;\n\t\t\tthis.originalEndLineNumber = 0;\n\t\t} else {\n\t\t\tthis.originalStartLineNumber = originalLineSequence.getStartLineNumber(diffChange.originalStart);\n\t\t\tthis.originalEndLineNumber = originalLineSequence.getEndLineNumber(diffChange.originalStart + diffChange.originalLength - 1);\n\t\t}\n\n\t\tif (diffChange.modifiedLength === 0) {\n\t\t\tthis.modifiedStartLineNumber = modifiedLineSequence.getStartLineNumber(diffChange.modifiedStart) - 1;\n\t\t\tthis.modifiedEndLineNumber = 0;\n\t\t} else {\n\t\t\tthis.modifiedStartLineNumber = modifiedLineSequence.getStartLineNumber(diffChange.modifiedStart);\n\t\t\tthis.modifiedEndLineNumber = modifiedLineSequence.getEndLineNumber(diffChange.modifiedStart + diffChange.modifiedLength - 1);\n\t\t}\n\n\t\tif (diffChange.originalLength !== 0 && diffChange.modifiedLength !== 0 && continueProcessingPredicate()) {\n\t\t\tvar originalCharSequence = originalLineSequence.getCharSequence(diffChange.originalStart, diffChange.originalStart + diffChange.originalLength - 1);\n\t\t\tvar modifiedCharSequence = modifiedLineSequence.getCharSequence(diffChange.modifiedStart, diffChange.modifiedStart + diffChange.modifiedLength - 1);\n\n\t\t\tvar rawChanges = computeDiff(originalCharSequence, modifiedCharSequence, continueProcessingPredicate);\n\n\t\t\tif (shouldPostProcessCharChanges) {\n\t\t\t\trawChanges = postProcessCharChanges(rawChanges);\n\t\t\t}\n\n\t\t\tthis.charChanges = [];\n\t\t\tfor (var i = 0, length = rawChanges.length; i < length; i++) {\n\t\t\t\tthis.charChanges.push(new CharChange(rawChanges[i], originalCharSequence, modifiedCharSequence));\n\t\t\t}\n\t\t}\n\t}\n\n}\n\nexport interface IDiffComputerOpts {\n\tshouldPostProcessCharChanges: boolean;\n\tshouldIgnoreTrimWhitespace: boolean;\n\tshouldConsiderTrimWhitespaceInEmptyCase: boolean;\n}\n\nexport class DiffComputer {\n\n\tprivate shouldPostProcessCharChanges:boolean;\n\tprivate shouldIgnoreTrimWhitespace:boolean;\n\tprivate maximumRunTimeMs:number;\n\tprivate original:LineMarkerSequence;\n\tprivate modified:LineMarkerSequence;\n\n\tprivate computationStartTime:number;\n\n\tconstructor(originalLines:string[], modifiedLines:string[], opts:IDiffComputerOpts) {\n\t\tthis.shouldPostProcessCharChanges = opts.shouldPostProcessCharChanges;\n\t\tthis.shouldIgnoreTrimWhitespace = opts.shouldIgnoreTrimWhitespace;\n\t\tthis.maximumRunTimeMs = MAXIMUM_RUN_TIME;\n\t\tthis.original = new LineMarkerSequence(originalLines, this.shouldIgnoreTrimWhitespace);\n\t\tthis.modified = new LineMarkerSequence(modifiedLines, this.shouldIgnoreTrimWhitespace);\n\t\tif (opts.shouldConsiderTrimWhitespaceInEmptyCase && this.shouldIgnoreTrimWhitespace && this.original.equals(this.modified)) {\n\t\t\t// Diff would be empty with `shouldIgnoreTrimWhitespace`\n\t\t\tthis.shouldIgnoreTrimWhitespace = false;\n\t\t\tthis.original = new LineMarkerSequence(originalLines, this.shouldIgnoreTrimWhitespace);\n\t\t\tthis.modified = new LineMarkerSequence(modifiedLines, this.shouldIgnoreTrimWhitespace);\n\t\t}\n\t}\n\n\tpublic computeDiff():ILineChange[] {\n\t\tthis.computationStartTime = (new Date()).getTime();\n\n\t\tvar rawChanges = computeDiff(this.original, this.modified, this._continueProcessingPredicate.bind(this));\n\n\t\tvar lineChanges: ILineChange[] = [];\n\t\tfor (var i = 0, length = rawChanges.length; i < length; i++) {\n\t\t\tlineChanges.push(new LineChange(rawChanges[i], this.original, this.modified, this._continueProcessingPredicate.bind(this), this.shouldPostProcessCharChanges));\n\t\t}\n\t\treturn lineChanges;\n\t}\n\n\tprivate _continueProcessingPredicate(): boolean {\n\t\tif (this.maximumRunTimeMs === 0) {\n\t\t\treturn true;\n\t\t}\n\t\tvar now = (new Date()).getTime();\n\t\treturn now - this.computationStartTime < this.maximumRunTimeMs;\n\t}\n\n}\n"]}