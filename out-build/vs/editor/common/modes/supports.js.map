{"version":3,"file":"supports.js","sourceRoot":"","sources":["../../../../../src/vs/editor/common/modes/supports.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport * as strings from 'vs/base/common/strings';\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport {IModel, IPosition} from 'vs/editor/common/editorCommon';\nimport * as modes from 'vs/editor/common/modes';\nimport {ModeTransition} from 'vs/editor/common/core/modeTransition';\n\nexport class Token implements modes.IToken {\n\t_tokenTrait: void;\n\n\tpublic startIndex:number;\n\tpublic type:string;\n\n\tconstructor(startIndex:number, type:string) {\n\t\tthis.startIndex = startIndex;\n\t\tthis.type = type;\n\t}\n\n\tpublic toString(): string {\n\t\treturn '(' + this.startIndex + ', ' + this.type + ')';\n\t}\n}\n\nexport class LineTokens implements modes.ILineTokens {\n\t_lineTokensTrait: void;\n\n\ttokens: Token[];\n\tmodeTransitions: ModeTransition[];\n\tactualStopOffset: number;\n\tendState: modes.IState;\n\tretokenize: TPromise<void>;\n\n\tconstructor(tokens:Token[], modeTransitions: ModeTransition[], actualStopOffset:number, endState:modes.IState) {\n\t\tthis.tokens = tokens;\n\t\tthis.modeTransitions = modeTransitions;\n\t\tthis.actualStopOffset = actualStopOffset;\n\t\tthis.endState = endState;\n\t\tthis.retokenize = null;\n\t}\n}\n\nexport function handleEvent<T>(context:modes.ILineContext, offset:number, runner:(mode:modes.IMode, newContext:modes.ILineContext, offset:number)=>T):T {\n\tvar modeTransitions = context.modeTransitions;\n\tif (modeTransitions.length === 1) {\n\t\treturn runner(modeTransitions[0].mode, context, offset);\n\t}\n\n\tvar modeIndex = ModeTransition.findIndexInSegmentsArray(modeTransitions, offset);\n\tvar nestedMode = modeTransitions[modeIndex].mode;\n\tvar modeStartIndex = modeTransitions[modeIndex].startIndex;\n\n\tvar firstTokenInModeIndex = context.findIndexOfOffset(modeStartIndex);\n\tvar nextCharacterAfterModeIndex = -1;\n\tvar nextTokenAfterMode = -1;\n\tif (modeIndex + 1 < modeTransitions.length) {\n\t\tnextTokenAfterMode = context.findIndexOfOffset(modeTransitions[modeIndex + 1].startIndex);\n\t\tnextCharacterAfterModeIndex = context.getTokenStartIndex(nextTokenAfterMode);\n\t} else {\n\t\tnextTokenAfterMode = context.getTokenCount();\n\t\tnextCharacterAfterModeIndex = context.getLineContent().length;\n\t}\n\n\tvar firstTokenCharacterOffset = context.getTokenStartIndex(firstTokenInModeIndex);\n\tvar newCtx = new FilteredLineContext(context, nestedMode, firstTokenInModeIndex, nextTokenAfterMode, firstTokenCharacterOffset, nextCharacterAfterModeIndex);\n\treturn runner(nestedMode, newCtx, offset - firstTokenCharacterOffset);\n}\n\n/**\n * Returns {{true}} if the line token at the specified\n * offset matches one of the provided types. Matching\n * happens on a substring start from the end, unless\n * anywhereInToken is set to true in which case matches\n * happen on a substring at any position.\n */\nexport function isLineToken(context:modes.ILineContext, offset:number, types:string[], anywhereInToken:boolean = false):boolean {\n\n\tif (!Array.isArray(types) || types.length === 0) {\n\t\treturn false;\n\t}\n\n\tif (context.getLineContent().length <= offset) {\n\t\treturn false;\n\t}\n\n\tvar tokenIdx = context.findIndexOfOffset(offset);\n\tvar type = context.getTokenType(tokenIdx);\n\n\tfor (var i = 0, len = types.length; i < len; i++) {\n\t\tif (anywhereInToken) {\n\t\t\tif (type.indexOf(types[i]) >= 0) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tif (strings.endsWith(type, types[i])) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn false;\n}\n\nexport class FilteredLineContext implements modes.ILineContext {\n\n\tpublic modeTransitions: ModeTransition[];\n\n\tprivate _actual:modes.ILineContext;\n\tprivate _firstTokenInModeIndex:number;\n\tprivate _nextTokenAfterMode:number;\n\tprivate _firstTokenCharacterOffset:number;\n\tprivate _nextCharacterAfterModeIndex:number;\n\n\tconstructor(actual:modes.ILineContext, mode:modes.IMode,\n\t\t\tfirstTokenInModeIndex:number, nextTokenAfterMode:number,\n\t\t\tfirstTokenCharacterOffset:number, nextCharacterAfterModeIndex:number) {\n\n\t\tthis.modeTransitions = [new ModeTransition(0, mode)];\n\t\tthis._actual = actual;\n\t\tthis._firstTokenInModeIndex = firstTokenInModeIndex;\n\t\tthis._nextTokenAfterMode = nextTokenAfterMode;\n\t\tthis._firstTokenCharacterOffset = firstTokenCharacterOffset;\n\t\tthis._nextCharacterAfterModeIndex = nextCharacterAfterModeIndex;\n\t}\n\n\tpublic getLineContent(): string {\n\t\tvar actualLineContent = this._actual.getLineContent();\n\t\treturn actualLineContent.substring(this._firstTokenCharacterOffset, this._nextCharacterAfterModeIndex);\n\t}\n\n\tpublic getTokenCount(): number {\n\t\treturn this._nextTokenAfterMode - this._firstTokenInModeIndex;\n\t}\n\n\tpublic findIndexOfOffset(offset:number): number {\n\t\treturn this._actual.findIndexOfOffset(offset + this._firstTokenCharacterOffset) - this._firstTokenInModeIndex;\n\t}\n\n\tpublic getTokenStartIndex(tokenIndex:number): number {\n\t\treturn this._actual.getTokenStartIndex(tokenIndex + this._firstTokenInModeIndex) - this._firstTokenCharacterOffset;\n\t}\n\n\tpublic getTokenEndIndex(tokenIndex:number): number {\n\t\treturn this._actual.getTokenEndIndex(tokenIndex + this._firstTokenInModeIndex) - this._firstTokenCharacterOffset;\n\t}\n\n\tpublic getTokenType(tokenIndex:number): string {\n\t\treturn this._actual.getTokenType(tokenIndex + this._firstTokenInModeIndex);\n\t}\n\n\tpublic getTokenText(tokenIndex:number): string {\n\t\treturn this._actual.getTokenText(tokenIndex + this._firstTokenInModeIndex);\n\t}\n}\n\nconst IGNORE_IN_TOKENS = /\\b(comment|string|regex)\\b/;\nexport function ignoreBracketsInToken(tokenType:string): boolean {\n\treturn IGNORE_IN_TOKENS.test(tokenType);\n}\n\n// TODO@Martin: find a better home for this code:\n// TODO@Martin: modify suggestSupport to return a boolean if snippets should be presented or not\n//       and turn this into a real registry\nexport class SnippetsRegistry {\n\n\tprivate static _defaultSnippets: { [modeId: string]: modes.ISuggestion[] } = Object.create(null);\n\tprivate static _snippets: { [modeId: string]: { [path: string]: modes.ISuggestion[] } } = Object.create(null);\n\n\tpublic static registerDefaultSnippets(modeId: string, snippets: modes.ISuggestion[]): void {\n\t\tthis._defaultSnippets[modeId] = (this._defaultSnippets[modeId] || []).concat(snippets);\n\t}\n\n\tpublic static registerSnippets(modeId: string, path: string, snippets: modes.ISuggestion[]): void {\n\t\tlet snippetsByMode = this._snippets[modeId];\n\t\tif (!snippetsByMode) {\n\t\t\tthis._snippets[modeId] = snippetsByMode = {};\n\t\t}\n\t\tsnippetsByMode[path] = snippets;\n\t}\n\n\tpublic static getSnippets(model: IModel, position: IPosition): modes.ISuggestResult {\n\t\tlet word = model.getWordAtPosition(position);\n\t\tlet currentPrefix = word ? word.word.substring(0, position.column - word.startColumn) : '';\n\t\tlet result : modes.ISuggestResult = {\n\t\t\tcurrentWord: currentPrefix,\n\t\t\tsuggestions: []\n\t\t};\n\n\t\t// to avoid that snippets are too prominent in the intellisense proposals:\n\t\t// - force that the current prefix matches with the snippet prefix\n\t\t// if there's no prfix, only show snippets at the beginning of the line, or after a whitespace\n\t\tlet filter = null;\n\t\tif (currentPrefix.length === 0) {\n\t\t\tif (position.column > 1) {\n\t\t\t\tlet previousCharacter = model.getValueInRange({ startLineNumber: position.lineNumber, startColumn: position.column - 1, endLineNumber: position.lineNumber, endColumn: position.column });\n\t\t\t\tif (previousCharacter.trim().length !== 0) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tlet lowerCasePrefix = currentPrefix.toLowerCase();\n\t\t\tfilter = (p: modes.ISuggestion) => {\n\t\t\t\treturn strings.startsWith(p.label.toLowerCase(), lowerCasePrefix);\n\t\t\t};\n\t\t}\n\n\t\tlet modeId = model.getMode().getId();\n\t\tlet snippets : modes.ISuggestion[]= [];\n\t\tlet snipppetsByMode = this._snippets[modeId];\n\t\tif (snipppetsByMode) {\n\t\t\tfor (let s in snipppetsByMode) {\n\t\t\t\tsnippets = snippets.concat(snipppetsByMode[s]);\n\t\t\t}\n\t\t}\n\t\tlet defaultSnippets = this._defaultSnippets[modeId];\n\t\tif (defaultSnippets) {\n\t\t\tsnippets = snippets.concat(defaultSnippets);\n\t\t}\n\t\tresult.suggestions = filter ? snippets.filter(filter) : snippets;\n\n\t\t// if (result.suggestions.length > 0) {\n\t\t// \tif (word) {\n\t\t// \t\t// Push also the current word as first suggestion, to avoid unexpected snippet acceptance on Enter.\n\t\t// \t\tresult.suggestions = result.suggestions.slice(0);\n\t\t// \t\tresult.suggestions.unshift({\n\t\t// \t\t\tcodeSnippet: word.word,\n\t\t// \t\t\tlabel: word.word,\n\t\t// \t\t\ttype: 'text'\n\t\t// \t\t});\n\t\t// \t}\n\t\t// \tresult.incomplete = true;\n\t\t// }\n\n\t\treturn result;\n\n\t}\n\n\n}\n"]}