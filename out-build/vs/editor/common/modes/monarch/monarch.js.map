{"version":3,"file":"vs/editor/common/modes/monarch/monarch.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/editor/common/modes/monarch/monarch.ts"],"names":[],"mappings":";;;;;;IAAA;;;oGAGgG;IAChG,YAAY,CAAC;IAiBb;;OAEG;IACH;QAA0C,+BAAY;QAMrD,qBACC,MAAa,EACb,KAAa,EACb,WAAyB,EACzB,YAA2B,EAC3B,mBAAyC;YAEzC,kBAAM,MAAM,CAAC,CAAC;YAEd,IAAI,CAAC,mBAAmB,GAAG,wCAAyB,CAAC,WAAW,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;YAE/E,IAAI,CAAC,eAAe,GAAG,IAAI,iCAAe,CAAC,IAAI,CAAC,KAAK,EAAE,EAAE,IAAI,EAAE,yCAAqB,CAAC,KAAK,CAAC,CAAC,CAAC;YAE7F,IAAI,CAAC,cAAc,GAAG,wCAAoB,CAAC,YAAY,EAAE,mBAAmB,EAAE,IAAI,CAAC,KAAK,EAAE,EAAE,KAAK,CAAC,CAAC;QACpG,CAAC;QACF,kBAAC;IAAD,CAAC,AArBD,CAA0C,2BAAY,GAqBrD;IArBqB,mBAAW,cAqBhC,CAAA","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\n/**\n * Create a syntax highighter with a fully declarative JSON style lexer description\n * using regular expressions.\n */\n\nimport {IRichEditSupport, ISuggestSupport, ITokenizationSupport} from 'vs/editor/common/modes';\nimport {AbstractMode} from 'vs/editor/common/modes/abstractMode';\nimport {ILexer} from 'vs/editor/common/modes/monarch/monarchCommon';\nimport {createRichEditSupport, createSuggestSupport} from 'vs/editor/common/modes/monarch/monarchDefinition';\nimport {createTokenizationSupport} from 'vs/editor/common/modes/monarch/monarchLexer';\nimport {RichEditSupport} from 'vs/editor/common/modes/supports/richEditSupport';\nimport {IEditorWorkerService} from 'vs/editor/common/services/editorWorkerService';\nimport {IModeService} from 'vs/editor/common/services/modeService';\nimport {IModelService} from 'vs/editor/common/services/modelService';\n\n/**\n * The MonarchMode creates a Monaco language mode given a certain language description\n */\nexport abstract class MonarchMode extends AbstractMode {\n\n\tpublic suggestSupport:ISuggestSupport;\n\tpublic tokenizationSupport: ITokenizationSupport;\n\tpublic richEditSupport: IRichEditSupport;\n\n\tconstructor(\n\t\tmodeId:string,\n\t\tlexer: ILexer,\n\t\tmodeService: IModeService,\n\t\tmodelService: IModelService,\n\t\teditorWorkerService: IEditorWorkerService\n\t) {\n\t\tsuper(modeId);\n\n\t\tthis.tokenizationSupport = createTokenizationSupport(modeService, this, lexer);\n\n\t\tthis.richEditSupport = new RichEditSupport(this.getId(), null, createRichEditSupport(lexer));\n\n\t\tthis.suggestSupport = createSuggestSupport(modelService, editorWorkerService, this.getId(), lexer);\n\t}\n}\n"]}