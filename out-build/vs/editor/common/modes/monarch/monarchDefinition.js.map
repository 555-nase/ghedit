{"version":3,"file":"monarchDefinition.js","sourceRoot":"","sources":["../../../../../../src/vs/editor/common/modes/monarch/monarchDefinition.ts"],"names":[],"mappings":";IAAA;;;oGAGgG;IAChG,YAAY,CAAC;IAcb,+BAAsC,KAAa;QAElD,MAAM,CAAC;YAEN,WAAW,EAAE,KAAK,CAAC,cAAc;YAEjC,QAAQ,EAAE;gBACT,WAAW,EAAE,KAAK,CAAC,WAAW;gBAC9B,YAAY,EAAE,CAAC,KAAK,CAAC,iBAAiB,EAAE,KAAK,CAAC,eAAe,CAAC;aAC9D;YAED,QAAQ,EAAE,KAAK,CAAC,gBAAgB;YAEhC,0BAA0B,EAAE;gBAC3B,yCAAyC;gBACzC,eAAe,EAAE,KAAK,CAAC,UAAU;gBACjC,0BAA0B,EAAE,KAAK,CAAC,eAAe,CAAC,KAAK,CAAC,EAAE,CAAC;aAC3D;YAED,sBAAsB,EAAE;gBACvB,gBAAgB,EAAE,KAAK,CAAC,gBAAgB;aACxC;SACD,CAAC;IACH,CAAC;IAvBe,6BAAqB,wBAuBpC,CAAA;IAED,8BAAqC,YAA2B,EAAE,mBAAyC,EAAE,MAAa,EAAE,KAAY;QACvI,EAAE,CAAC,CAAC,KAAK,CAAC,cAAc,CAAC,kBAAkB,CAAC,CAAC,CAAC;YAC7C,MAAM,CAAC,IAAI,yDAAwC,CAClD,MAAM,EACN,YAAY,EACZ,mBAAmB,EACnB,KAAK,CAAC,cAAc,CAAC,QAAQ,EAC7B,KAAK,CAAC,cAAc,CAAC,iBAAiB,EACtC,KAAK,CAAC,cAAc,CAAC,kBAAkB,CACvC,CAAC;QACH,CAAC;QAAC,IAAI,CAAC,CAAC;YACP,MAAM,CAAC,IAAI,+CAA8B,CACxC,MAAM,EACN,YAAY,EACZ,KAAK,CAAC,cAAc,CAAC,QAAQ,EAC7B,KAAK,CAAC,cAAc,CAAC,iBAAiB,EACtC,KAAK,CAAC,cAAc,CAAC,kBAAkB,CACvC,CAAC;QACH,CAAC;IACF,CAAC;IAnBe,4BAAoB,uBAmBnC,CAAA","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\n/**\n * Create a syntax highighter with a fully declarative JSON style lexer description\n * using regular expressions.\n */\n\nimport {ISuggestSupport} from 'vs/editor/common/modes';\nimport {ILexer} from 'vs/editor/common/modes/monarch/monarchCommon';\nimport {IRichEditConfiguration} from 'vs/editor/common/modes/supports/richEditSupport';\nimport {PredefinedResultSuggestSupport, TextualAndPredefinedResultSuggestSupport} from 'vs/editor/common/modes/supports/suggestSupport';\nimport {IEditorWorkerService} from 'vs/editor/common/services/editorWorkerService';\nimport {IModelService} from 'vs/editor/common/services/modelService';\n\nexport function createRichEditSupport(lexer: ILexer): IRichEditConfiguration {\n\n\treturn {\n\n\t\twordPattern: lexer.wordDefinition,\n\n\t\tcomments: {\n\t\t\tlineComment: lexer.lineComment,\n\t\t\tblockComment: [lexer.blockCommentStart, lexer.blockCommentEnd]\n\t\t},\n\n\t\tbrackets: lexer.standardBrackets,\n\n\t\t__electricCharacterSupport: {\n\t\t\t// regexBrackets: lexer.enhancedBrackets,\n\t\t\tcaseInsensitive: lexer.ignoreCase,\n\t\t\tembeddedElectricCharacters: lexer.outdentTriggers.split('')\n\t\t},\n\n\t\t__characterPairSupport: {\n\t\t\tautoClosingPairs: lexer.autoClosingPairs\n\t\t}\n\t};\n}\n\nexport function createSuggestSupport(modelService: IModelService, editorWorkerService: IEditorWorkerService, modeId:string, lexer:ILexer): ISuggestSupport {\n\tif (lexer.suggestSupport.textualCompletions) {\n\t\treturn new TextualAndPredefinedResultSuggestSupport(\n\t\t\tmodeId,\n\t\t\tmodelService,\n\t\t\teditorWorkerService,\n\t\t\tlexer.suggestSupport.snippets,\n\t\t\tlexer.suggestSupport.triggerCharacters,\n\t\t\tlexer.suggestSupport.disableAutoTrigger\n\t\t);\n\t} else {\n\t\treturn new PredefinedResultSuggestSupport(\n\t\t\tmodeId,\n\t\t\tmodelService,\n\t\t\tlexer.suggestSupport.snippets,\n\t\t\tlexer.suggestSupport.triggerCharacters,\n\t\t\tlexer.suggestSupport.disableAutoTrigger\n\t\t);\n\t}\n}\n"]}