{"version":3,"file":"vs/editor/common/modes/monarch/monarchLexer.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/editor/common/modes/monarch/monarchLexer.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\n/**\n * Create a syntax highighter with a fully declarative JSON style lexer description\n * using regular expressions.\n */\n\nimport * as modes from 'vs/editor/common/modes';\nimport {AbstractState} from 'vs/editor/common/modes/abstractState';\nimport {LineStream} from 'vs/editor/common/modes/lineStream';\nimport * as monarchCommon from 'vs/editor/common/modes/monarch/monarchCommon';\nimport {IEnteringNestedModeData, TokenizationSupport} from 'vs/editor/common/modes/supports/tokenizationSupport';\nimport {IModeService} from 'vs/editor/common/services/modeService';\n\n/**\n * The MonarchLexer class implements a monaco lexer that highlights source code.\n * It takes a compiled lexer to guide the tokenizer and maintains a stack of\n * lexer states.\n */\nexport class MonarchLexer extends AbstractState {\n\n\tstatic ID = 0;\n\n\tprivate modeService:IModeService;\n\n\tprivate id: number;\n\tprivate lexer: monarchCommon.ILexer;\n\tprivate stack: string[];\n\n\tpublic embeddedMode: string;\n\tpublic embeddedEntered: boolean;\n\n\tprivate groupActions: monarchCommon.IAction[];\n\tprivate groupMatches: string[];\n\tprivate groupMatched: string[];\n\tprivate groupRule: monarchCommon.IRule;\n\n\tconstructor(mode: modes.IMode, modeService:IModeService, lexer: monarchCommon.ILexer, stack?: string[], embeddedMode?: string) {\n\t\tsuper(mode);\n\t\tthis.id = MonarchLexer.ID++; // for debugging, assigns unique id to each instance\n\t\tthis.modeService = modeService;\n\n\t\tthis.lexer = lexer; // (compiled) lexer description\n\t\tthis.stack = (stack ? stack : [lexer.start]); // stack of states\n\t\tthis.embeddedMode = (embeddedMode ? embeddedMode : null); // are we scanning an embedded section?\n\n\t\t// did we encounter an embedded start on this line?\n\t\t// no need for cloning or equality since it is used only within a line\n\t\tthis.embeddedEntered = false;\n\n\t\t// regular expression group matching\n\t\t// these never need cloning or equality since they are only used within a line match\n\t\tthis.groupActions = null;\n\t\tthis.groupMatches = null;\n\t\tthis.groupMatched = null;\n\t\tthis.groupRule = null;\n\t}\n\n\tpublic makeClone(): MonarchLexer {\n\t\treturn new MonarchLexer(this.getMode(), this.modeService, this.lexer, this.stack.slice(0), this.embeddedMode);\n\t}\n\n\tpublic equals(other: modes.IState): boolean {\n\t\tif (!super.equals(other)) {\n\t\t\treturn false;\n\t\t}\n\t\tif (!(other instanceof MonarchLexer)) {\n\t\t\treturn false;\n\t\t}\n\t\tvar otherm: MonarchLexer = <MonarchLexer>other;\n\t\tif ((this.stack.length !== otherm.stack.length) || (this.lexer.name !== otherm.lexer.name) ||\n\t\t\t(this.embeddedMode !== otherm.embeddedMode)) {\n\t\t\treturn false;\n\t\t}\n\t\tvar idx: string;\n\t\tfor (idx in this.stack) {\n\t\t\tif (this.stack.hasOwnProperty(idx)) {\n\t\t\t\tif (this.stack[idx] !== otherm.stack[idx]) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * The main tokenizer: this function gets called by monaco to tokenize lines\n\t * Note: we don't want to raise exceptions here and always keep going..\n\t *\n\t * TODO: there are many optimizations possible here for the common cases\n\t * but for now I concentrated on functionality and correctness.\n\t */\n\tpublic tokenize(stream: modes.IStream, noConsumeIsOk?: boolean): modes.ITokenizationResult {\n\t\tvar stackLen0 = this.stack.length;  // these are saved to check progress\n\t\tvar groupLen0 = 0;\n\t\tvar state: string = this.stack[0];  // the current state\n\t\tthis.embeddedEntered = false;\n\n\t\tvar matches: string[] = null;\n\t\tvar matched: string = null;\n\t\tvar action: monarchCommon.IAction = null;\n\t\tvar next: string = null;\n\t\tvar rule: monarchCommon.IRule = null;\n\n\t\t// check if we need to process group matches first\n\t\tif (this.groupActions) {\n\t\t\tgroupLen0 = this.groupActions.length;\n\t\t\tmatches = this.groupMatches;\n\t\t\tmatched = this.groupMatched.shift();\n\t\t\taction = this.groupActions.shift();\n\t\t\trule = this.groupRule;\n\n\t\t\t// cleanup if necessary\n\t\t\tif (this.groupActions.length === 0) {\n\t\t\t\tthis.groupActions = null;\n\t\t\t\tthis.groupMatches = null;\n\t\t\t\tthis.groupMatched = null;\n\t\t\t\tthis.groupRule = null;\n\t\t\t}\n\t\t}\n\t\t\t// otherwise we match on the token stream\n\t\telse {\n\t\t\t// nothing to do\n\t\t\tif (stream.eos()) {\n\t\t\t\treturn { type: '' };\n\t\t\t}\n\n\t\t\t// get the entire line\n\t\t\tvar line = stream.advanceToEOS();\n\t\t\tstream.goBack(line.length);\n\n\t\t\t// get the rules for this state\n\t\t\tvar rules = this.lexer.tokenizer[state];\n\t\t\tif (!rules) {\n\t\t\t\trules = monarchCommon.findRules(this.lexer, state); // do parent matching\n\t\t\t}\n\n\t\t\tif (!rules) {\n\t\t\t\tmonarchCommon.throwError(this.lexer, 'tokenizer state is not defined: ' + state);\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// try each rule until we match\n\t\t\t\trule = null;\n\t\t\t\tvar pos = stream.pos();\n\t\t\t\tvar idx: string;\n\t\t\t\tfor (idx in rules) {\n\t\t\t\t\tif (rules.hasOwnProperty(idx)) {\n\t\t\t\t\t\trule = rules[idx];\n\t\t\t\t\t\tif (pos === 0 || !rule.matchOnlyAtLineStart) {\n\t\t\t\t\t\t\tmatches = line.match(rule.regex);\n\t\t\t\t\t\t\tif (matches) {\n\t\t\t\t\t\t\t\tmatched = matches[0];\n\t\t\t\t\t\t\t\taction = rule.action;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// We matched 'rule' with 'matches' and 'action'\n\t\tif (!matches) {\n\t\t\tmatches = [''];\n\t\t\tmatched = '';\n\t\t}\n\t\tif (!action) {\n\t\t\t// bad: we didn't match anything, and there is no action to take\n\t\t\t// we need to advance the stream or we get progress trouble\n\t\t\tif (!stream.eos()) {\n\t\t\t\tmatches = [stream.peek()];\n\t\t\t\tmatched = matches[0];\n\t\t\t}\n\t\t\taction = this.lexer.defaultToken;\n\t\t}\n\n\t\t// advance stream\n\t\tstream.advance(matched.length);\n\n\t\t// maybe call action function (used for 'cases')\n\t\twhile (action.test) {\n\t\t\tvar callres = action.test(matched, matches, state, stream.eos());\n\t\t\taction = callres;\n\t\t}\n\n\t\t// set the result: either a string or an array of actions\n\t\tvar result = null;\n\t\tif (typeof (action) === 'string' || Array.isArray(action)) {\n\t\t\tresult = action;\n\t\t}\n\t\telse if (action.group) {\n\t\t\tresult = action.group;\n\t\t}\n\t\telse if (action.token !== null && action.token !== undefined) {\n\t\t\tresult = action.token;\n\n\t\t\t// do $n replacements?\n\t\t\tif (action.tokenSubst) {\n\t\t\t\tresult = monarchCommon.substituteMatches(this.lexer, result, matched, matches, state);\n\t\t\t}\n\n\t\t\t// enter embedded mode?\n\t\t\tif (action.nextEmbedded) {\n\t\t\t\tif (action.nextEmbedded === '@pop') {\n\t\t\t\t\tif (!this.embeddedMode) {\n\t\t\t\t\t\tmonarchCommon.throwError(this.lexer, 'cannot pop embedded mode if not inside one');\n\t\t\t\t\t}\n\t\t\t\t\tthis.embeddedMode = null;\n\t\t\t\t}\n\t\t\t\telse if (this.embeddedMode) {\n\t\t\t\t\tmonarchCommon.throwError(this.lexer, 'cannot enter embedded mode from within an embedded mode');\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthis.embeddedMode = monarchCommon.substituteMatches(this.lexer, action.nextEmbedded, matched, matches, state);\n\n\t\t\t\t\t// substitute language alias to known modes to support syntax highlighting\n\t\t\t\t\tvar embeddedMode = this.modeService.getModeIdForLanguageName(this.embeddedMode);\n\t\t\t\t\tif (this.embeddedMode && embeddedMode) {\n\t\t\t\t\t\tthis.embeddedMode = embeddedMode;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.embeddedEntered = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// state transformations\n\t\t\tif (action.goBack) { // back up the stream..\n\t\t\t\tstream.goBack(action.goBack);\n\t\t\t}\n\t\t\tif (action.switchTo && typeof action.switchTo === 'string') {\n\t\t\t\tvar nextState = monarchCommon.substituteMatches(this.lexer, action.switchTo, matched, matches, state);  // switch state without a push...\n\t\t\t\tif (nextState[0] === '@') {\n\t\t\t\t\tnextState = nextState.substr(1); // peel off starting '@'\n\t\t\t\t}\n\t\t\t\tif (!monarchCommon.findRules(this.lexer, nextState)) {\n\t\t\t\t\tmonarchCommon.throwError(this.lexer, 'trying to switch to a state \\'' + nextState + '\\' that is undefined in rule: ' + rule.name);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthis.stack[0] = nextState;\n\t\t\t\t}\n\t\t\t\tnext = null;\n\t\t\t}\n\t\t\telse if (action.transform && typeof action.transform === 'function') {\n\t\t\t\tthis.stack = action.transform(this.stack); // if you need to do really funky stuff...\n\t\t\t\tnext = null;\n\t\t\t}\n\t\t\telse if (action.next) {\n\t\t\t\tif (action.next === '@push') {\n\t\t\t\t\tif (this.stack.length >= this.lexer.maxStack) {\n\t\t\t\t\t\tmonarchCommon.throwError(this.lexer, 'maximum tokenizer stack size reached: [' +\n\t\t\t\t\t\t\tthis.stack[0] + ',' + this.stack[1] + ',...,' +\n\t\t\t\t\t\t\tthis.stack[this.stack.length - 2] + ',' + this.stack[this.stack.length - 1] + ']');\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tthis.stack.unshift(state);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (action.next === '@pop') {\n\t\t\t\t\tif (this.stack.length <= 1) {\n\t\t\t\t\t\tmonarchCommon.throwError(this.lexer, 'trying to pop an empty stack in rule: ' + rule.name);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tthis.stack.shift();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (action.next === '@popall') {\n\t\t\t\t\tif (this.stack.length > 1) {\n\t\t\t\t\t\tthis.stack = [this.stack[this.stack.length - 1]];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tvar nextState = monarchCommon.substituteMatches(this.lexer, action.next, matched, matches, state);\n\t\t\t\t\tif (nextState[0] === '@') {\n\t\t\t\t\t\tnextState = nextState.substr(1); // peel off starting '@'\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!monarchCommon.findRules(this.lexer, nextState)) {\n\t\t\t\t\t\tmonarchCommon.throwError(this.lexer, 'trying to set a next state \\'' + nextState + '\\' that is undefined in rule: ' + rule.name);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tthis.stack.unshift(nextState);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (action.log && typeof (action.log) === 'string') {\n\t\t\t\tmonarchCommon.log(this.lexer, this.lexer.displayName + ': ' + monarchCommon.substituteMatches(this.lexer, action.log, matched, matches, state));\n\t\t\t}\n\t\t}\n\n\t\t// check result\n\t\tif (result === null) {\n\t\t\tmonarchCommon.throwError(this.lexer, 'lexer rule has no well-defined action in rule: ' + rule.name);\n\t\t\tresult = this.lexer.defaultToken;\n\t\t}\n\n\t\t// is the result a group match?\n\t\tif (Array.isArray(result)) {\n\t\t\tif (this.groupActions && this.groupActions.length > 0) {\n\t\t\t\tmonarchCommon.throwError(this.lexer, 'groups cannot be nested: ' + rule.name);\n\t\t\t}\n\t\t\tif (matches.length !== result.length + 1) {\n\t\t\t\tmonarchCommon.throwError(this.lexer, 'matched number of groups does not match the number of actions in rule: ' + rule.name);\n\t\t\t}\n\t\t\tvar totalLen = 0;\n\t\t\tfor (var i = 1; i < matches.length; i++) {\n\t\t\t\ttotalLen += matches[i].length;\n\t\t\t}\n\t\t\tif (totalLen !== matched.length) {\n\t\t\t\tmonarchCommon.throwError(this.lexer, 'with groups, all characters should be matched in consecutive groups in rule: ' + rule.name);\n\t\t\t}\n\t\t\tthis.groupMatches = matches;\n\t\t\tthis.groupMatched = matches.slice(1);\n\t\t\tthis.groupActions = result.slice(0);\n\t\t\tthis.groupRule = rule;\n\t\t\tstream.goBack(matched.length);\n\t\t\treturn this.tokenize(stream);  // call recursively to initiate first result match\n\t\t}\n\t\t\t// regular result\n\t\telse {\n\t\t\t// check for '@rematch'\n\t\t\tif (result === '@rematch') {\n\t\t\t\tstream.goBack(matched.length);\n\t\t\t\tmatched = '';  // better set the next state too..\n\t\t\t\tmatches = null;\n\t\t\t\tresult = '';\n\t\t\t}\n\n\t\t\t// check progress\n\t\t\tif (matched.length === 0) {\n\t\t\t\tif (stackLen0 !== this.stack.length || state !== this.stack[0]\n\t\t\t\t\t|| (!this.groupActions ? 0 : this.groupActions.length) !== groupLen0) {\n\t\t\t\t\tif (!noConsumeIsOk) { // used for nested modes..\n\t\t\t\t\t\treturn this.tokenize(stream); // tokenize again in the new state\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tmonarchCommon.throwError(this.lexer, 'no progress in tokenizer in rule: ' + rule.name);\n\t\t\t\t\tstream.advanceToEOS(); // must make progress or editor loops\n\t\t\t\t\t// result='';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// return the result (and check for brace matching)\n\t\t\t// todo: for efficiency we could pre-sanitize tokenPostfix and substitutions\n\t\t\tif (result.indexOf('@brackets') === 0) {\n\t\t\t\tvar rest = result.substr('@brackets'.length);\n\t\t\t\tvar bracket = findBracket(this.lexer, matched);\n\t\t\t\tif (!bracket) {\n\t\t\t\t\tmonarchCommon.throwError(this.lexer, '@brackets token returned but no bracket defined as: ' + matched);\n\t\t\t\t\tbracket = { token: '', bracketType: monarchCommon.MonarchBracket.None };\n\t\t\t\t}\n\t\t\t\treturn { type: monarchCommon.sanitize(bracket.token + rest) };\n\t\t\t}\n\t\t\telse {\n\t\t\t\tvar token = (result === '' ? '' : result + this.lexer.tokenPostfix);\n\t\t\t\treturn { type: monarchCommon.sanitize(token) };\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * Searches for a bracket in the 'brackets' attribute that matches the input.\n */\nfunction findBracket(lexer: monarchCommon.ILexer, matched: string) {\n\tif (!matched) {\n\t\treturn null;\n\t}\n\tmatched = monarchCommon.fixCase(lexer, matched);\n\n\tvar brackets = lexer.brackets;\n\tfor (var i = 0; i < brackets.length; i++) {\n\t\tvar bracket = brackets[i];\n\t\tif (bracket.open === matched) {\n\t\t\treturn { token: bracket.token, bracketType: monarchCommon.MonarchBracket.Open };\n\t\t}\n\t\telse if (bracket.close === matched) {\n\t\t\treturn { token: bracket.token, bracketType: monarchCommon.MonarchBracket.Close };\n\t\t}\n\t}\n\treturn null;\n}\n\nexport function createTokenizationSupport(modeService:IModeService, mode:modes.IMode, lexer: monarchCommon.ILexer): modes.ITokenizationSupport {\n\treturn new TokenizationSupport(mode, {\n\t\tgetInitialState: (): modes.IState => {\n\t\t\treturn new MonarchLexer(mode, modeService, lexer);\n\t\t},\n\n\t\tenterNestedMode: (state: modes.IState): boolean => {\n\t\t\tif (state instanceof MonarchLexer) {\n\t\t\t\treturn state.embeddedEntered;\n\t\t\t}\n\t\t\treturn false;\n\t\t},\n\n\t\tgetNestedMode: (rawState: modes.IState): IEnteringNestedModeData => {\n\t\t\tvar mime = (<MonarchLexer>rawState).embeddedMode;\n\n\t\t\tif (!modeService.isRegisteredMode(mime)) {\n\t\t\t\t// unknown mode\n\t\t\t\treturn {\n\t\t\t\t\tmode: modeService.getMode('text/plain'),\n\t\t\t\t\tmissingModePromise: null\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tvar mode = modeService.getMode(mime);\n\t\t\tif (mode) {\n\t\t\t\t// mode is available\n\t\t\t\treturn {\n\t\t\t\t\tmode: mode,\n\t\t\t\t\tmissingModePromise: null\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t// mode is not yet loaded\n\t\t\treturn {\n\t\t\t\tmode: modeService.getMode('text/plain'),\n\t\t\t\tmissingModePromise: modeService.getOrCreateMode(mime).then(() => null)\n\t\t\t};\n\t\t},\n\n\t\tgetLeavingNestedModeData: (line: string, state: modes.IState) => {\n\t\t\t// state = state.clone();\n\t\t\tvar mstate = <MonarchLexer>state.clone();\n\t\t\tvar stream = new LineStream(line);\n\t\t\twhile (!stream.eos() && mstate.embeddedMode) {\n\t\t\t\tmstate.tokenize(stream, true); // allow no consumption for @rematch\n\t\t\t}\n\t\t\tif (mstate.embeddedMode) {\n\t\t\t\treturn null;  // don't leave yet\n\t\t\t}\n\n\t\t\tvar end = stream.pos();\n\t\t\treturn {\n\t\t\t\tnestedModeBuffer: line.substring(0, end),\n\t\t\t\tbufferAfterNestedMode: line.substring(end),\n\t\t\t\tstateAfterNestedMode: mstate\n\t\t\t};\n\t\t}\n\t}, lexer.usesEmbedded, false);\n}\n"]}