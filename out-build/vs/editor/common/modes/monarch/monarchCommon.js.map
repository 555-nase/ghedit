{"version":3,"file":"vs/editor/common/modes/monarch/monarchCommon.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/editor/common/modes/monarch/monarchCommon.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {CharacterPair, IAutoClosingPairConditional, ISuggestion} from 'vs/editor/common/modes';\n\n/*\n * This module exports common types and functionality shared between\n * the Monarch compiler that compiles JSON to ILexer, and the Monarch\n * Tokenizer (that highlights at runtime)\n */\n\n/*\n * Type definitions to be used internally to Monarch.\n * Inside monarch we use fully typed definitions and compiled versions of the more abstract JSON descriptions.\n */\n\nexport enum MonarchBracket {\n\tNone = 0,\n\tOpen = 1,\n\tClose = -1\n}\n\nexport interface ILexerMin {\n\tnoThrow: boolean;\n\tignoreCase: boolean;\n\tdisplayName: string;\n\tname: string;\n\tusesEmbedded: boolean;\n\tdefaultToken: string;\n\tstateNames: Object;\n}\n\nexport interface ILexer extends ILexerMin {\n\tmaxStack: number;\n\tstart: string;\n\tignoreCase: boolean;\n\tlineComment: string;\n\tblockCommentStart: string;\n\tblockCommentEnd: string;\n\ttokenPostfix: string;\n\tsuggestSupport: {\n\t\ttextualCompletions: boolean;\n\t\tdisableAutoTrigger: boolean;\n\t\ttriggerCharacters: string[];\n\t\tsnippets: ISuggestion[];\n\t};\n\n\ttokenizer: IRule[][];\n\tbrackets: IBracket[];\n\twordDefinition: RegExp;\n\tautoClosingPairs: IAutoClosingPairConditional[];\n\n\tstandardBrackets: CharacterPair[];\n\t// enhancedBrackets: IRegexBracketPair[];\n\toutdentTriggers: string;\n}\n\nexport interface IAutoIndent {\n\tmatch: RegExp;\n\tmatchAfter: RegExp;\n}\n\nexport interface IAutoComplete {\n\ttriggers: string;\n\tmatch: RegExp;\n\tcomplete: string;\n}\n\nexport interface IBracket {\n\ttoken: string;\n\topen: string;\n\tclose: string;\n}\n\nexport interface IRule {\n\tregex: RegExp;\n\taction: IAction;\n\tmatchOnlyAtLineStart: boolean;\n\tname: string;\n}\n\nexport interface IAction {\n\t// an action is either a group of actions\n\tgroup?: IAction[];\n\n\t// or a function that returns a fresh action\n\ttest?: (id: string, matches: string[], state: string, eos: boolean) => IAction;\n\n\t// or it is a declarative action with a token value and various other attributes\n\ttoken?: string;\n\ttokenSubst?: boolean;\n\tnext?: string;\n\tnextEmbedded?: string;\n\tbracket?: MonarchBracket;\n\tlog?: string;\n\tswitchTo?: string;\n\tgoBack?: number;\n\ttransform?: (states: string[]) => string[];\n}\n\nexport interface IBranch {\n\tname: string;\n\tvalue: IAction;\n\ttest: (id: string, matches: string[], state: string, eos: boolean) => boolean;\n}\n\n// Small helper functions\n\n/**\n * Is a string null, undefined, or empty?\n */\nexport function empty(s: string): boolean {\n\treturn (s ? false : true);\n}\n\n/**\n * Puts a string to lower case if 'ignoreCase' is set.\n */\nexport function fixCase(lexer: ILexerMin, str: string): string {\n\treturn (lexer.ignoreCase && str ? str.toLowerCase() : str);\n}\n\n/**\n * Ensures there are no bad characters in a CSS token class.\n */\nexport function sanitize(s: string) {\n\treturn s.replace(/[&<>'\"_]/g, '-'); // used on all output token CSS classes\n}\n\n// Logging\n\n/**\n * Logs a message.\n */\nexport function log(lexer: ILexerMin, msg: string) {\n\tconsole.log(`${lexer.name}: ${msg}`);\n}\n\n// Throwing errors\n\n/**\n * Throws error. May actually just log the error and continue.\n */\nexport function throwError(lexer: ILexerMin, msg: string) {\n\tthrow new Error(`${lexer.name}: ${msg}`);\n}\n\n// Helper functions for rule finding and substitution\n\n/**\n * substituteMatches is used on lexer strings and can substitutes predefined patterns:\n * \t\t$$  => $\n * \t\t$#  => id\n * \t\t$n  => matched entry n\n * \t\t@attr => contents of lexer[attr]\n *\n * See documentation for more info\n */\nexport function substituteMatches(lexer: ILexerMin, str: string, id: string, matches: string[], state: string) {\n\tvar re = /\\$((\\$)|(#)|(\\d\\d?)|[sS](\\d\\d?)|@(\\w+))/g;\n\tvar stateMatches: string[] = null;\n\treturn str.replace(re, function(full, sub?, dollar?, hash?, n?, s?, attr?, ofs?, total?) {\n\t\tif (!empty(dollar)) {\n\t\t\treturn '$'; // $$\n\t\t}\n\t\tif (!empty(hash)) {\n\t\t\treturn fixCase(lexer, id);   // default $#\n\t\t}\n\t\tif (!empty(n) && n < matches.length) {\n\t\t\treturn fixCase(lexer, matches[n]); // $n\n\t\t}\n\t\tif (!empty(attr) && lexer && typeof (lexer[attr]) === 'string') {\n\t\t\treturn lexer[attr]; //@attribute\n\t\t}\n\t\tif (stateMatches === null) { // split state on demand\n\t\t\tstateMatches = state.split('.');\n\t\t\tstateMatches.unshift(state);\n\t\t}\n\t\tif (!empty(s) && s < stateMatches.length) {\n\t\t\treturn fixCase(lexer, stateMatches[s]); //$Sn\n\t\t}\n\t\treturn '';\n\t});\n}\n\n/**\n * Find the tokenizer rules for a specific state (i.e. next action)\n */\nexport function findRules(lexer: ILexer, state: string): IRule[] {\n\twhile (state && state.length > 0) {\n\t\tvar rules = lexer.tokenizer[state];\n\t\tif (rules) {\n\t\t\treturn rules;\n\t\t}\n\n\t\tvar idx = state.lastIndexOf('.');\n\t\tif (idx < 0) {\n\t\t\tstate = null; // no further parent\n\t\t} else {\n\t\t\tstate = state.substr(0, idx);\n\t\t}\n\t}\n\treturn null;\n}\n\n/**\n * Is a certain state defined? In contrast to 'findRules' this works on a ILexerMin.\n * This is used during compilation where we may know the defined states\n * but not yet whether the corresponding rules are correct.\n */\nexport function stateExists(lexer: ILexerMin, state: string): boolean {\n\twhile (state && state.length > 0) {\n\t\tvar exist = lexer.stateNames[state];\n\t\tif (exist) {\n\t\t\treturn true;\n\t\t}\n\n\t\tvar idx = state.lastIndexOf('.');\n\t\tif (idx < 0) {\n\t\t\tstate = null; // no further parent\n\t\t} else {\n\t\t\tstate = state.substr(0, idx);\n\t\t}\n\t}\n\treturn false;\n}\n"]}