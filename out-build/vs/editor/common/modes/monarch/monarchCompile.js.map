{"version":3,"file":"vs/editor/common/modes/monarch/monarchCompile.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/editor/common/modes/monarch/monarchCompile.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\n/*\n * This module only exports 'compile' which compiles a JSON langauge definition\n * into a typed and checked ILexer definition.\n */\n\nimport * as objects from 'vs/base/common/objects';\nimport {IAutoClosingPairConditional, CharacterPair} from 'vs/editor/common/modes';\nimport * as monarchCommon from 'vs/editor/common/modes/monarch/monarchCommon';\nimport {ILanguage, ILanguageBracket} from 'vs/editor/common/modes/monarch/monarchTypes';\n\n/*\n * Type helpers\n *\n * Note: this is just for sanity checks on the JSON description which is\n * helpful for the programmer. No checks are done anymore once the lexer is\n * already 'compiled and checked'.\n *\n */\n\nfunction isArrayOf(elemType: (x: any) => boolean, obj: any): boolean {\n\tif (!obj) {\n\t\treturn false;\n\t}\n\tif (!(Array.isArray(obj))) {\n\t\treturn false;\n\t}\n\tvar idx: any;\n\tfor (idx in obj) {\n\t\tif (obj.hasOwnProperty(idx)) {\n\t\t\tif (!(elemType(obj[idx]))) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\n\nfunction bool(prop: any, def?: boolean, onerr?: () => void ): boolean {\n\tif (typeof (prop) === 'boolean') {\n\t\treturn prop;\n\t}\n\tif (onerr && (prop || def === undefined)) {\n\t\tonerr(); // type is wrong, or there is no default\n\t}\n\treturn (def === undefined ? null : def);\n}\n\nfunction string(prop: any, def?: string, onerr?: () => void ): string {\n\tif (typeof (prop) === 'string') {\n\t\treturn prop;\n\t}\n\tif (onerr && (prop || def === undefined)) {\n\t\tonerr(); // type is wrong, or there is no default\n\t}\n\treturn (def === undefined ? null : def);\n\n}\n\n// Lexer helpers\n\n/**\n * Compiles a regular expression string, adding the 'i' flag if 'ignoreCase' is set.\n * Also replaces @\\w+ or sequences with the content of the specified attribute\n */\nfunction compileRegExp(lexer: monarchCommon.ILexerMin, str: string): RegExp {\n\tif (typeof (str) !== 'string') {\n\t\treturn null;\n\t}\n\n\tvar n = 0;\n\twhile (str.indexOf('@') >= 0 && n < 5) { // at most 5 expansions\n\t\tn++;\n\t\tstr = str.replace(/@(\\w+)/g, function(s, attr?) {\n\t\t\tvar sub = '';\n\t\t\tif (typeof (lexer[attr]) === 'string') {\n\t\t\t\tsub = lexer[attr];\n\t\t\t} else if (lexer[attr] && lexer[attr] instanceof RegExp) {\n\t\t\t\tsub = lexer[attr].source;\n\t\t\t} else {\n\t\t\t\tif (lexer[attr] === undefined) {\n\t\t\t\t\tmonarchCommon.throwError(lexer, 'language definition does not contain attribute \\'' + attr + '\\', used at: ' + str);\n\t\t\t\t} else {\n\t\t\t\t\tmonarchCommon.throwError(lexer, 'attribute reference \\'' + attr + '\\' must be a string, used at: ' + str);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn (monarchCommon.empty(sub) ? '' : '(?:' + sub + ')');\n\t\t});\n\t}\n\n\treturn new RegExp(str, (lexer.ignoreCase ? 'i' : ''));\n}\n\n/**\n * Compiles guard functions for case matches.\n * This compiles 'cases' attributes into efficient match functions.\n *\n */\nfunction selectScrutinee(id: string, matches: string[], state: string, num: number): string {\n\tif (num < 0) {\n\t\treturn id;\n\t}\n\tif (num < matches.length) {\n\t\treturn matches[num];\n\t}\n\tif (num >= 100) {\n\t\tnum = num - 100;\n\t\tvar parts = state.split('.');\n\t\tparts.unshift(state);\n\t\tif (num < parts.length) {\n\t\t\treturn parts[num];\n\t\t}\n\t}\n\treturn null;\n}\n\nfunction createGuard(lexer: monarchCommon.ILexerMin, ruleName: string, tkey: string, val: monarchCommon.IAction): monarchCommon.IBranch {\n\t// get the scrutinee and pattern\n\tvar scrut = -1; // -1: $!, 0-99: $n, 100+n: $Sn\n\tvar oppat = tkey;\n\tvar matches: string[] = tkey.match(/^\\$(([sS]?)(\\d\\d?)|#)(.*)$/);\n\tif (matches) {\n\t\tif (matches[3]) { // if digits\n\t\t\tscrut = parseInt(matches[3]);\n\t\t\tif (matches[2]) {\n\t\t\t\tscrut = scrut + 100; // if [sS] present\n\t\t\t}\n\t\t}\n\t\toppat = matches[4];\n\t}\n\t// get operator\n\tvar op = '~';\n\tvar pat = oppat;\n\tif (!oppat || oppat.length === 0) {\n\t\top = '!=';\n\t\tpat = '';\n\t}\n\telse if (/^\\w*$/.test(pat)) {  // just a word\n\t\top = '==';\n\t}\n\telse {\n\t\tmatches = oppat.match(/^(@|!@|~|!~|==|!=)(.*)$/);\n\t\tif (matches) {\n\t\t\top = matches[1];\n\t\t\tpat = matches[2];\n\t\t}\n\t}\n\n\t// set the tester function\n\tvar tester: (s: string, id: string, matches: string[], state: string, eos: boolean) => boolean;\n\n\t// special case a regexp that matches just words\n\tif ((op === '~' || op === '!~') && /^(\\w|\\|)*$/.test(pat)) {\n\t\tvar inWords = objects.createKeywordMatcher(pat.split('|'), lexer.ignoreCase);\n\t\ttester = function(s) { return (op === '~' ? inWords(s) : !inWords(s)); };\n\t}\n\telse if (op === '@' || op === '!@') {\n\t\tvar words = lexer[pat];\n\t\tif (!words) {\n\t\t\tmonarchCommon.throwError(lexer, 'the @ match target \\'' + pat + '\\' is not defined, in rule: ' + ruleName);\n\t\t}\n\t\tif (!(isArrayOf(function(elem) { return (typeof (elem) === 'string'); }, words))) {\n\t\t\tmonarchCommon.throwError(lexer, 'the @ match target \\'' + pat + '\\' must be an array of strings, in rule: ' + ruleName);\n\t\t}\n\t\tvar inWords = objects.createKeywordMatcher(words, lexer.ignoreCase);\n\t\ttester = function(s) { return (op === '@' ? inWords(s) : !inWords(s)); };\n\t}\n\telse if (op === '~' || op === '!~') {\n\t\tif (pat.indexOf('$') < 0) {\n\t\t\t// precompile regular expression\n\t\t\tvar re = compileRegExp(lexer, '^' + pat + '$');\n\t\t\ttester = function(s) { return (op === '~' ? re.test(s) : !re.test(s)); };\n\t\t}\n\t\telse {\n\t\t\ttester = function(s, id, matches, state) {\n\t\t\t\tvar re = compileRegExp(lexer, '^' + monarchCommon.substituteMatches(lexer, pat, id, matches, state) + '$');\n\t\t\t\treturn re.test(s);\n\t\t\t};\n\t\t}\n\t}\n\telse { // if (op==='==' || op==='!=') {\n\t\tif (pat.indexOf('$') < 0) {\n\t\t\tvar patx = monarchCommon.fixCase(lexer, pat);\n\t\t\ttester = function(s) { return (op === '==' ? s === patx : s !== patx); };\n\t\t}\n\t\telse {\n\t\t\tvar patx = monarchCommon.fixCase(lexer, pat);\n\t\t\ttester = function(s, id, matches, state, eos) {\n\t\t\t\tvar patexp = monarchCommon.substituteMatches(lexer, patx, id, matches, state);\n\t\t\t\treturn (op === '==' ? s === patexp : s !== patexp);\n\t\t\t};\n\t\t}\n\t}\n\n\t// return the branch object\n\tif (scrut === -1) {\n\t\treturn {\n\t\t\tname: tkey, value: val, test: function(id, matches, state, eos) {\n\t\t\t\treturn tester(id, id, matches, state, eos);\n\t\t\t}\n\t\t};\n\t}\n\telse {\n\t\treturn {\n\t\t\tname: tkey, value: val, test: function(id, matches, state, eos) {\n\t\t\t\tvar scrutinee = selectScrutinee(id, matches, state, scrut);\n\t\t\t\treturn tester(!scrutinee ? '' : scrutinee, id, matches, state, eos);\n\t\t\t}\n\t\t};\n\t}\n}\n\n/**\n * Compiles an action: i.e. optimize regular expressions and case matches\n * and do many sanity checks.\n *\n * This is called only during compilation but if the lexer definition\n * contains user functions as actions (which is usually not allowed), then this\n * may be called during lexing. It is important therefore to compile common cases efficiently\n */\nfunction compileAction(lexer: monarchCommon.ILexerMin, ruleName: string, action: any): monarchCommon.IAction {\n\tif (!action) {\n\t\treturn { token: '' };\n\t}\n\telse if (typeof (action) === 'string') {\n\t\treturn action; // { token: action };\n\t}\n\telse if (action.token || action.token === '') {\n\t\tif (typeof (action.token) !== 'string') {\n\t\t\tmonarchCommon.throwError(lexer, 'a \\'token\\' attribute must be of type string, in rule: ' + ruleName);\n\t\t\treturn { token: '' };\n\t\t}\n\t\telse {\n\t\t\t// only copy specific typed fields (only happens once during compile Lexer)\n\t\t\tvar newAction: monarchCommon.IAction = { token: action.token };\n\t\t\tif (action.token.indexOf('$') >= 0) {\n\t\t\t\tnewAction.tokenSubst = true;\n\t\t\t}\n\t\t\tif (typeof (action.bracket) === 'string') {\n\t\t\t\tif (action.bracket === '@open') {\n\t\t\t\t\tnewAction.bracket = monarchCommon.MonarchBracket.Open;\n\t\t\t\t} else if (action.bracket === '@close') {\n\t\t\t\t\tnewAction.bracket = monarchCommon.MonarchBracket.Close;\n\t\t\t\t} else {\n\t\t\t\t\tmonarchCommon.throwError(lexer, 'a \\'bracket\\' attribute must be either \\'@open\\' or \\'@close\\', in rule: ' + ruleName);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (action.next) {\n\t\t\t\tif (typeof (action.next) !== 'string') {\n\t\t\t\t\tmonarchCommon.throwError(lexer, 'the next state must be a string value in rule: ' + ruleName);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tvar next: string = action.next;\n\t\t\t\t\tif (!/^(@pop|@push|@popall)$/.test(next)) {\n\t\t\t\t\t\tif (next[0] === '@') {\n\t\t\t\t\t\t\tnext = next.substr(1); // peel off starting @ sign\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (next.indexOf('$') < 0) {  // no dollar substitution, we can check if the state exists\n\t\t\t\t\t\t\tif (!monarchCommon.stateExists(lexer, monarchCommon.substituteMatches(lexer, next, '', [], ''))) {\n\t\t\t\t\t\t\t\tmonarchCommon.throwError(lexer, 'the next state \\'' + action.next + '\\' is not defined in rule: ' + ruleName);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tnewAction.next = next;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (typeof (action.goBack) === 'number') {\n\t\t\t\tnewAction.goBack = action.goBack;\n\t\t\t}\n\t\t\tif (typeof (action.switchTo) === 'string') {\n\t\t\t\tnewAction.switchTo = action.switchTo;\n\t\t\t}\n\t\t\tif (typeof (action.log) === 'string') {\n\t\t\t\tnewAction.log = action.log;\n\t\t\t}\n\t\t\tif (typeof (action.nextEmbedded) === 'string') {\n\t\t\t\tnewAction.nextEmbedded = action.nextEmbedded;\n\t\t\t\tlexer.usesEmbedded = true;\n\t\t\t}\n\t\t\treturn newAction;\n\t\t}\n\t}\n\telse if (Array.isArray(action)) {\n\t\tvar results = [];\n\t\tvar idx: string;\n\t\tfor (idx in action) {\n\t\t\tif (action.hasOwnProperty(idx)) {\n\t\t\t\tresults[idx] = compileAction(lexer, ruleName, action[idx]);\n\t\t\t}\n\t\t}\n\t\treturn { group: results };\n\t}\n\telse if (action.cases) {\n\t\t// build an array of test cases\n\t\tvar cases: monarchCommon.IBranch[] = [];\n\n\t\t// for each case, push a test function and result value\n\t\tvar tkey: string;\n\t\tfor (tkey in action.cases) {\n\t\t\tif (action.cases.hasOwnProperty(tkey)) {\n\t\t\t\tvar val = compileAction(lexer, ruleName, action.cases[tkey]);\n\n\t\t\t\t// what kind of case\n\t\t\t\tif (tkey === '@default' || tkey === '@' || tkey === '') {\n\t\t\t\t\tcases.push({ test: null, value: val, name: tkey });\n\t\t\t\t}\n\t\t\t\telse if (tkey === '@eos') {\n\t\t\t\t\tcases.push({ test: function(id, matches, state, eos) { return eos; }, value: val, name: tkey });\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tcases.push(createGuard(lexer, ruleName, tkey, val));  // call separate function to avoid local variable capture\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// create a matching function\n\t\tvar def = lexer.defaultToken;\n\t\treturn {\n\t\t\ttest: function(id, matches, state, eos) {\n\t\t\t\tvar idx: string;\n\t\t\t\tfor (idx in cases) {\n\t\t\t\t\tif (cases.hasOwnProperty(idx)) {\n\t\t\t\t\t\tvar didmatch = (!cases[idx].test || cases[idx].test(id, matches, state, eos));\n\t\t\t\t\t\tif (didmatch) {\n\t\t\t\t\t\t\treturn cases[idx].value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn def;\n\t\t\t}\n\t\t};\n\t}\n\telse {\n\t\tmonarchCommon.throwError(lexer, 'an action must be a string, an object with a \\'token\\' or \\'cases\\' attribute, or an array of actions; in rule: ' + ruleName);\n\t\treturn '';\n\t}\n}\n\n/**\n * Helper class for creating matching rules\n */\nclass Rule implements monarchCommon.IRule {\n\tpublic regex: RegExp = new RegExp('');\n\tpublic action: monarchCommon.IAction = { token: '' };\n\tpublic matchOnlyAtLineStart: boolean = false;\n\tpublic name: string = '';\n\n\tconstructor(name: string) {\n\t\tthis.name = name;\n\t}\n\n\tpublic setRegex(lexer: monarchCommon.ILexerMin, re: string);\n\tpublic setRegex(lexer: monarchCommon.ILexerMin, re: RegExp);\n\tpublic setRegex(lexer: monarchCommon.ILexerMin, re: any) {\n\t\tvar sregex: string;\n\t\tif (typeof (re) === 'string') {\n\t\t\tsregex = re;\n\t\t}\n\t\telse if (re instanceof RegExp) {\n\t\t\tsregex = (<RegExp>re).source;\n\t\t}\n\t\telse {\n\t\t\tmonarchCommon.throwError(lexer, 'rules must start with a match string or regular expression: ' + this.name);\n\t\t}\n\n\t\tthis.matchOnlyAtLineStart = (sregex.length > 0 && sregex[0] === '^');\n\t\tthis.name = this.name + ': ' + sregex;\n\t\tthis.regex = compileRegExp(lexer, '^(?:' + (this.matchOnlyAtLineStart ? sregex.substr(1) : sregex) + ')');\n\t}\n\n\tpublic setAction(lexer: monarchCommon.ILexerMin, act: monarchCommon.IAction) {\n\t\tthis.action = compileAction(lexer, this.name, act);\n\t}\n}\n\n/**\n * Compiles a json description function into json where all regular expressions,\n * case matches etc, are compiled and all include rules are expanded.\n * We also compile the bracket definitions, supply defaults, and do many sanity checks.\n * If the 'jsonStrict' parameter is 'false', we allow at certain locations\n * regular expression objects and functions that get called during lexing.\n * (Currently we have no samples that need this so perhaps we should always have\n * jsonStrict to true).\n */\nexport function compile(json: ILanguage): monarchCommon.ILexer {\n\tif (!json || typeof (json) !== 'object') {\n\t\tthrow new Error('Monarch: expecting a language definition object');\n\t}\n\n\t// Get names\n\tif (typeof (json.name) !== 'string') {\n\t\tthrow new Error('Monarch: a language definition must include a string \\'name\\' attribute');\n\t}\n\n\t// Create our lexer\n\tvar lexer: monarchCommon.ILexer = <monarchCommon.ILexer>{};\n\tlexer.name = json.name;\n\tlexer.displayName = string(json.displayName, lexer.name);\n\tlexer.noThrow = false; // raise exceptions during compilation\n\tlexer.maxStack = 100;\n\n\t// Set standard fields: be defensive about types\n\tlexer.start = string(json.start);\n\tlexer.ignoreCase = bool(json.ignoreCase, false);\n\n\tlexer.lineComment = string(json.lineComment, '//');\n\tlexer.blockCommentStart = string(json.blockCommentStart, '/*');\n\tlexer.blockCommentEnd = string(json.blockCommentEnd, '*/');\n\tlexer.tokenPostfix = string(json.tokenPostfix, '.' + lexer.name);\n\tlexer.defaultToken = string(json.defaultToken, 'source', function () { monarchCommon.throwError(lexer, 'the \\'defaultToken\\' must be a string'); });\n\n\tlexer.usesEmbedded = false; // becomes true if we find a nextEmbedded action\n\tlexer.wordDefinition = json.wordDefinition || undefined;\n\n\t// COMPAT: with earlier monarch versions\n\tif (!lexer.lineComment && (<any>json).lineComments) {\n\t\tif (typeof ((<any>json).lineComments) === 'string') {\n\t\t\tlexer.lineComment = (<any>json).lineComments;\n\t\t}\n\t\telse if (typeof ((<any>json).lineComments[0]) === 'string') {\n\t\t\tlexer.lineComment = (<any>json).lineComments[0];\n\t\t}\n\t}\n\n\tlexer.suggestSupport = {\n\t\ttextualCompletions: true,\n\t\tdisableAutoTrigger: false,\n\t\ttriggerCharacters: [],\n\t\tsnippets: []\n\t};\n\tif (typeof (<any>json).suggestSupport !== 'undefined') {\n\t\tvar suggestSupport = (<any>json).suggestSupport;\n\n\t\tif (Array.isArray(suggestSupport.snippets)) {\n\t\t\tvar _snippets: any[] = suggestSupport.snippets;\n\t\t\tfor (var i = 0, len = _snippets.length; i < len; i++) {\n\t\t\t\tif (typeof _snippets[i] === 'string') {\n\t\t\t\t\tlexer.suggestSupport.snippets.push({\n\t\t\t\t\t\ttype: 'snippet',\n\t\t\t\t\t\tlabel: _snippets[i],\n\t\t\t\t\t\tcodeSnippet: _snippets[i]\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tlexer.suggestSupport.snippets.push(_snippets[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (Array.isArray(suggestSupport.triggerCharacters)) {\n\t\t\tlexer.suggestSupport.triggerCharacters = suggestSupport.triggerCharacters;\n\t\t}\n\n\t\tif (typeof suggestSupport.textualCompletions !== 'undefined') {\n\t\t\tlexer.suggestSupport.textualCompletions = suggestSupport.textualCompletions;\n\t\t}\n\n\t\tif (typeof suggestSupport.disableAutoTrigger !== 'undefined') {\n\t\t\tlexer.suggestSupport.disableAutoTrigger = suggestSupport.disableAutoTrigger;\n\t\t}\n\t}\n\n\t// For calling compileAction later on\n\tvar lexerMin: monarchCommon.ILexerMin = <any>json;\n\tlexerMin.name = lexer.name;\n\tlexerMin.displayName = lexer.displayName;\n\tlexerMin.ignoreCase = lexer.ignoreCase;\n\tlexerMin.noThrow = lexer.noThrow;\n\tlexerMin.usesEmbedded = lexer.usesEmbedded;\n\tlexerMin.stateNames = json.tokenizer;\n\tlexerMin.defaultToken = lexer.defaultToken;\n\n\n\t// Compile an array of rules into newrules where RegExp objects are created.\n\tfunction addRules(state: string, newrules: monarchCommon.IRule[], rules: any[]) {\n\t\tvar idx: string;\n\t\tfor (idx in rules) {\n\t\t\tif (rules.hasOwnProperty(idx)) {\n\t\t\t\tvar rule = rules[idx];\n\t\t\t\tvar include = rule.include;\n\t\t\t\tif (include) {\n\t\t\t\t\tif (typeof (include) !== 'string') {\n\t\t\t\t\t\tmonarchCommon.throwError(lexer, 'an \\'include\\' attribute must be a string at: ' + state);\n\t\t\t\t\t}\n\t\t\t\t\tif (include[0] === '@') {\n\t\t\t\t\t\tinclude = include.substr(1); // peel off starting @\n\t\t\t\t\t}\n\t\t\t\t\tif (!json.tokenizer[include]) {\n\t\t\t\t\t\tmonarchCommon.throwError(lexer, 'include target \\'' + include + '\\' is not defined at: ' + state);\n\t\t\t\t\t}\n\t\t\t\t\taddRules(state + '.' + include, newrules, json.tokenizer[include]);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tvar newrule = new Rule(state);\n\n\n\t\t\t\t\t// Set up new rule attributes\n\t\t\t\t\tif (Array.isArray(rule) && rule.length >= 1 && rule.length <= 3) {\n\t\t\t\t\t\tnewrule.setRegex(lexerMin, rule[0]);\n\t\t\t\t\t\tif (rule.length >= 3) {\n\t\t\t\t\t\t\tif (typeof (rule[1]) === 'string') {\n\t\t\t\t\t\t\t\tnewrule.setAction(lexerMin, { token: rule[1], next: rule[2] });\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (typeof (rule[1]) === 'object') {\n\t\t\t\t\t\t\t\tvar rule1 = rule[1];\n\t\t\t\t\t\t\t\trule1.next = rule[2];\n\t\t\t\t\t\t\t\tnewrule.setAction(lexerMin, rule1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tmonarchCommon.throwError(lexer, 'a next state as the last element of a rule can only be given if the action is either an object or a string, at: ' + state);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tnewrule.setAction(lexerMin, rule[1]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tif (!rule.regex) {\n\t\t\t\t\t\t\tmonarchCommon.throwError(lexer, 'a rule must either be an array, or an object with a \\'regex\\' or \\'include\\' field at: ' + state);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (rule.name) {\n\t\t\t\t\t\t\tnewrule.name = string(rule.name);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (rule.matchOnlyAtStart) {\n\t\t\t\t\t\t\tnewrule.matchOnlyAtLineStart = bool(rule.matchOnlyAtLineStart);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tnewrule.setRegex(lexerMin, rule.regex);\n\t\t\t\t\t\tnewrule.setAction(lexerMin, rule.action);\n\t\t\t\t\t}\n\n\t\t\t\t\tnewrules.push(newrule);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// compile the tokenizer rules\n\tif (!json.tokenizer || typeof (json.tokenizer) !== 'object') {\n\t\tmonarchCommon.throwError(lexer, 'a language definition must define the \\'tokenizer\\' attribute as an object');\n\t}\n\n\tlexer.tokenizer = [];\n\tvar key: string;\n\tfor (key in json.tokenizer) {\n\t\tif (json.tokenizer.hasOwnProperty(key)) {\n\t\t\tif (!lexer.start) {\n\t\t\t\tlexer.start = key;\n\t\t\t}\n\n\t\t\tvar rules = json.tokenizer[key];\n\t\t\tlexer.tokenizer[key] = new Array();\n\t\t\taddRules('tokenizer.' + key, lexer.tokenizer[key], rules);\n\t\t}\n\t}\n\tlexer.usesEmbedded = lexerMin.usesEmbedded;  // can be set during compileAction\n\n\t// Set simple brackets\n\tif (json.brackets) {\n\t\tif (!(Array.isArray(<any>json.brackets))) {\n\t\t\tmonarchCommon.throwError(lexer, 'the \\'brackets\\' attribute must be defined as an array');\n\t\t}\n\t}\n\telse {\n\t\tjson.brackets = [\n\t\t\t{ open: '{', close: '}', token: 'delimiter.curly' },\n\t\t\t{ open: '[', close: ']', token: 'delimiter.square' },\n\t\t\t{ open: '(', close: ')', token: 'delimiter.parenthesis' },\n\t\t\t{ open: '<', close: '>', token: 'delimiter.angle' }];\n\t}\n\tvar brackets : ILanguageBracket[] = [];\n\tfor (var bracketIdx in json.brackets) {\n\t\tif (json.brackets.hasOwnProperty(bracketIdx)) {\n\t\t\tvar desc = <any> json.brackets[bracketIdx];\n\t\t\tif (desc && Array.isArray(desc) && desc.length === 3) {\n\t\t\t\tdesc = { token: desc[2], open: desc[0], close: desc[1] };\n\t\t\t}\n\t\t\tif (desc.open === desc.close) {\n\t\t\t\tmonarchCommon.throwError(lexer, 'open and close brackets in a \\'brackets\\' attribute must be different: ' + desc.open +\n\t\t\t\t\t'\\n hint: use the \\'bracket\\' attribute if matching on equal brackets is required.');\n\t\t\t}\n\t\t\tif (typeof (desc.open) === 'string' && typeof (desc.token) === 'string') {\n\t\t\t\tbrackets.push({\n\t\t\t\t\ttoken: string(desc.token) + lexer.tokenPostfix\n\t\t\t\t\t, open: monarchCommon.fixCase(lexer, string(desc.open))\n\t\t\t\t\t, close: monarchCommon.fixCase(lexer, string(desc.close))\n\t\t\t\t});\n\t\t\t}\n\t\t\telse {\n\t\t\t\tmonarchCommon.throwError(lexer, 'every element in the \\'brackets\\' array must be a \\'{open,close,token}\\' object or array');\n\t\t\t}\n\t\t}\n\t}\n\tlexer.brackets = brackets;\n\n\t// Set default auto closing pairs\n\tvar autoClosingPairs: any/*string[][]*/;\n\tif (json.autoClosingPairs) {\n\t\tif (!(Array.isArray(<any>json.autoClosingPairs))) {\n\t\t\tmonarchCommon.throwError(lexer, 'the \\'autoClosingPairs\\' attribute must be an array of string pairs (as arrays)');\n\t\t}\n\t\tautoClosingPairs = json.autoClosingPairs.slice(0);\n\t}\n\telse {\n\t\tautoClosingPairs = [['\"', '\"'], ['\\'', '\\''], ['@brackets']];\n\t}\n\n\t// set auto closing pairs\n\tlexer.autoClosingPairs = [];\n\tif (autoClosingPairs) {\n\t\tfor (var autoClosingPairIdx in autoClosingPairs) {\n\t\t\tif (autoClosingPairs.hasOwnProperty(autoClosingPairIdx)) {\n\t\t\t\tvar pair = autoClosingPairs[autoClosingPairIdx];\n\t\t\t\tvar openClose: IAutoClosingPairConditional;\n\t\t\t\tif (pair === '@brackets' || pair[0] === '@brackets') {\n\t\t\t\t\tvar bidx: string;\n\t\t\t\t\tfor (bidx in brackets) {\n\t\t\t\t\t\tif (brackets.hasOwnProperty(bidx)) {\n\t\t\t\t\t\t\tif (brackets[bidx].open && brackets[bidx].open.length === 1 &&\n\t\t\t\t\t\t\t\tbrackets[bidx].close && brackets[bidx].close.length === 1) {\n\t\t\t\t\t\t\t\topenClose = { open: brackets[bidx].open, close: brackets[bidx].close, notIn:['string', 'comment'] };\n\t\t\t\t\t\t\t\tlexer.autoClosingPairs.push(openClose);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (Array.isArray(pair) && pair.length === 2 &&\n\t\t\t\t\ttypeof (pair[0]) === 'string' && pair[0].length === 1 &&\n\t\t\t\t\ttypeof (pair[1]) === 'string' && pair[1].length === 1) {\n\t\t\t\t\topenClose = { open: monarchCommon.fixCase(lexer, pair[0]), close: monarchCommon.fixCase(lexer, pair[1]), notIn:['string', 'comment'] };\n\t\t\t\t\tlexer.autoClosingPairs.push(openClose);\n\t\t\t\t}\n\t\t\t\telse if (typeof (pair.open) === 'string' && pair.open.length === 1 &&\n\t\t\t\t\ttypeof (pair.close) === 'string' && pair.close.length === 1) {\n\t\t\t\t\topenClose = { open: monarchCommon.fixCase(lexer, pair.open[0]), close: monarchCommon.fixCase(lexer, pair.close[0]), notIn:['string', 'comment'] };\n\t\t\t\t\tlexer.autoClosingPairs.push(openClose);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tmonarchCommon.throwError(lexer, 'every element in an \\'autoClosingPairs\\' array must be a pair of 1 character strings, or a \\'@brackets\\' directive');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Set enhanced brackets\n\t// var enhancedBrackets : IRegexBracketPair[] = [];\n\t// if (json.enhancedBrackets) {\n\t// \tif (!(Array.isArray(<any>json.enhancedBrackets))) {\n\t// \t\tmonarchCommon.throwError(lexer, 'the \\'enhancedBrackets\\' attribute must be defined as an array');\n\t// \t}\n\n\t// \tfor (var bracketIdx in json.enhancedBrackets) {\n\t// \t\tif (json.enhancedBrackets.hasOwnProperty(bracketIdx)) {\n\t// \t\t\tvar desc = <any> json.enhancedBrackets[bracketIdx];\n\t// \t\t\tif (desc.hasOwnProperty('openTrigger') && typeof (desc.openTrigger) !== 'string') {\n\t// \t\t\t\tmonarchCommon.throwError(lexer, 'openTrigger in the \\'enhancedBrackets\\' array must be a string');\n\t// \t\t\t}\n\t// \t\t\tif (desc.hasOwnProperty('open') && !(desc.open instanceof RegExp)) {\n\t// \t\t\t\tmonarchCommon.throwError(lexer, 'open in the \\'enhancedBrackets\\' array must be a regex');\n\t// \t\t\t}\n\t// \t\t\tif (desc.hasOwnProperty('closeComplete') && typeof (desc.closeComplete) !== 'string') {\n\t// \t\t\t\tmonarchCommon.throwError(lexer, 'closeComplete in the \\'enhancedBrackets\\' array must be a string');\n\t// \t\t\t}\n\t// \t\t\tif (desc.hasOwnProperty('matchCase') && typeof (desc.matchCase) !== 'boolean') {\n\t// \t\t\t\tmonarchCommon.throwError(lexer, 'matchCase in the \\'enhancedBrackets\\' array must be a boolean');\n\t// \t\t\t}\n\t// \t\t\tif (desc.hasOwnProperty('closeTrigger') && typeof (desc.closeTrigger) !== 'string') {\n\t// \t\t\t\tmonarchCommon.throwError(lexer, 'closeTrigger in the \\'enhancedBrackets\\' array must be a string');\n\t// \t\t\t}\n\t// \t\t\tif (desc.hasOwnProperty('close') && !(desc.close instanceof RegExp)) {\n\t// \t\t\t\tmonarchCommon.throwError(lexer, 'close in the \\'enhancedBrackets\\' array must be a regex');\n\t// \t\t\t}\n\t// \t\t\tif (desc.hasOwnProperty('tokenType')) {\n\t// \t\t\t\tif (typeof (desc.tokenType) !== 'string') {\n\t// \t\t\t\t\tmonarchCommon.throwError(lexer, 'tokenType in the \\'enhancedBrackets\\' array must be a string');\n\t// \t\t\t\t}\n\t// \t\t\t\telse {\n\t// \t\t\t\t\tdesc.tokenType += lexer.tokenPostfix;\n\t// \t\t\t\t}\n\t// \t\t\t}\n\t// \t\t\tenhancedBrackets.push(desc);\n\t// \t\t}\n\t// \t}\n\t// }\n\t// lexer.enhancedBrackets = enhancedBrackets;\n\n\tvar standardBrackets: CharacterPair[] = [];\n\tfor (var i = 0; i < brackets.length; ++i) {\n\t\tstandardBrackets.push([brackets[i].open, brackets[i].close]);\n\t}\n\tlexer.standardBrackets = standardBrackets;\n\n\tlexer.outdentTriggers = string(json.outdentTriggers, '');\n\n\t// Disable throw so the syntax highlighter goes, no matter what\n\tlexer.noThrow = true;\n\treturn lexer;\n}\n"]}