{"version":3,"file":"vs/editor/common/modes/monarch/monarchTypes.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/editor/common/modes/monarch/monarchTypes.ts"],"names":[],"mappings":";IAAA;;;oGAGgG;IAChG,YAAY,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {ISuggestion} from 'vs/editor/common/modes';\n\n/*\n * Interface types for Monarch language definitions\n * These descriptions are really supposed to be JSON values but if using typescript\n * to describe them, these type definitions can help check the validity.\n */\n\n/**\n * A Monarch language definition\n */\nexport interface ILanguage {\n\t/**\n\t * unique name to identify the language.\n\t */\n\tname: string;\n\t/**\n\t * map from string to ILanguageRule[]\n\t */\n\ttokenizer: Object;\n\n\t/**\n\t * nice display name\n\t */\n\tdisplayName?: string;\n\t/**\n\t * is the language case insensitive?\n\t */\n\tignoreCase?: boolean;\n\t/**\n\t * used to insert/delete line comments in the editor\n\t */\n\tlineComment?: string;\n\t/**\n\t * used to insert/delete block comments in the editor\n\t */\n\tblockCommentStart?: string;\n\t/**\n\t * used to insert/delete block comments in the editor\n\t */\n\tblockCommentEnd?: string;\n\t/**\n\t * if no match in the tokenizer assign this token class (default 'source')\n\t */\n\tdefaultToken?: string;\n\t/**\n\t * for example [['{','}','delimiter.curly']]\n\t */\n\tbrackets?: ILanguageBracket[];\n\n\t// advanced\n\t/**\n\t * start symbol in the tokenizer (by default the first entry is used)\n\t */\n\tstart?: string;\n\t/**\n\t * attach this to every token class (by default '.' + name)\n\t */\n\ttokenPostfix?: string;\n\t/**\n\t * for example [['\"','\"']]\n\t */\n\tautoClosingPairs?: string[][];\n\t/**\n\t * word definition regular expression\n\t */\n\twordDefinition?: RegExp;\n\t/**\n\t * characters that could potentially cause outdentation\n\t */\n\toutdentTriggers?: string;\n\t// /**\n\t//  * Advanced auto completion, auto indenting, and bracket matching\n\t//  */\n\t// enhancedBrackets?: IRegexBracketPair[];\n\n\tsuggestSupport?: {\n\t\ttextualCompletions?: boolean;\n\t\tdisableAutoTrigger?: boolean;\n\t\ttriggerCharacters?: string[];\n\t\tsnippets?: ISuggestion[];\n\t};\n}\n\n/**\n * A rule is either a regular expression and an action\n * \t\tshorthands: [reg,act] == { regex: reg, action: act}\n *\t\tand       : [reg,act,nxt] == { regex: reg, action: act{ next: nxt }}\n */\nexport interface ILanguageRule {\n\t/**\n\t * match tokens\n\t */\n\tregex?: string|RegExp;\n\t/**\n\t * action to take on match\n\t */\n\taction?: ILanguageAction;\n\n\t/**\n\t * or an include rule. include all rules from the included state\n\t */\n\tinclude?: string;\n}\n\n/**\n * An action is either an array of actions...\n * ... or a case statement with guards...\n * ... or a basic action with a token value.\n */\nexport interface ILanguageAction {\n\t/**\n\t * array of actions for each parenthesized match group\n\t */\n\tgroup?: ILanguageAction[];\n\n\t/**\n\t * map from string to ILanguageAction\n\t */\n\tcases?: Object;\n\n\t/**\n\t * token class (ie. css class) (or \"@brackets\" or \"@rematch\")\n\t */\n\ttoken?: string;\n\t/**\n\t * the next state to push, or \"@push\", \"@pop\", \"@popall\"\n\t */\n\tnext?: string;\n\t/**\n\t * switch to this state\n\t */\n\tswitchTo?: string;\n\t/**\n\t * go back n characters in the stream\n\t */\n\tgoBack?: number;\n\t/**\n\t * @open or @close\n\t */\n\tbracket?: string;\n\t/**\n\t * switch to embedded language (useing the mimetype) or get out using \"@pop\"\n\t */\n\tnextEmbedded?: string;\n\t/**\n\t * log a message to the browser console window\n\t */\n\tlog?: string;\n}\n\n/**\n * This interface can be shortened as an array, ie. ['{','}','delimiter.curly']\n */\nexport interface ILanguageBracket {\n\t/**\n\t * open bracket\n\t */\n\topen: string;\n\t/**\n\t * closeing bracket\n\t */\n\tclose: string;\n\t/**\n\t * token class\n\t */\n\ttoken: string;\n}\n"]}