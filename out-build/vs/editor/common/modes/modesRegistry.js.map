{"version":3,"file":"modesRegistry.js","sourceRoot":"","sources":["../../../../../src/vs/editor/common/modes/modesRegistry.ts"],"names":[],"mappings":";IAAA;;;oGAGgG;IAChG,YAAY,CAAC;IAkBb,6BAA6B;IAClB,kBAAU,GAAG;QACvB,aAAa,EAAE,sBAAsB;KACrC,CAAC;IAEF;QAWC;YANQ,yBAAoB,GAAyC,IAAI,eAAO,EAA+B,CAAC;YACzG,wBAAmB,GAAuC,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC;YAEzF,uBAAkB,GAAuC,IAAI,eAAO,EAA6B,CAAC;YACnG,sBAAiB,GAAqC,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC;YAG1F,IAAI,CAAC,YAAY,GAAG,EAAE,CAAC;YACvB,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;QACtB,CAAC;QAED,mBAAmB;QAGZ,iDAAmB,GAA1B,UAA2B,GAA+B;YACzD,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAClD,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACrC,CAAC;QACM,gDAAkB,GAAzB,UAA0B,GAA6B;YACtD,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAC5B,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QACvC,CAAC;QACM,4CAAc,GAArB;YACC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QACnC,CAAC;QAED,gBAAgB;QAET,8CAAgB,GAAvB,UAAwB,GAA2B;YAClD,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAC1B,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QACrC,CAAC;QACM,+CAAiB,GAAxB,UAAyB,GAA6B;YACrD,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAC9C,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACnC,CAAC;QACM,0CAAY,GAAnB;YACC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QACjC,CAAC;QACF,0BAAC;IAAD,CAAC,AA5CD,IA4CC;IA5CY,2BAAmB,sBA4C/B,CAAA;IAEU,qBAAa,GAAG,IAAI,mBAAmB,EAAE,CAAC;IACrD,mBAAQ,CAAC,GAAG,CAAC,kBAAU,CAAC,aAAa,EAAE,qBAAa,CAAC,CAAC;IAEtD,qBAAa,CAAC,gBAAgB,CAAC;QAC9B,EAAE,EAAE,WAAW;QACf,UAAU,EAAE,CAAC,MAAM,EAAE,YAAY,CAAC;QAClC,OAAO,EAAE,CAAC,GAAG,CAAC,QAAQ,CAAC,iBAAiB,EAAE,YAAY,CAAC,EAAE,MAAM,CAAC;QAChE,SAAS,EAAE,CAAC,YAAY,CAAC;KACzB,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport * as nls from 'vs/nls';\nimport Event, {Emitter} from 'vs/base/common/event';\nimport {Registry} from 'vs/platform/platform';\nimport {ILanguageExtensionPoint} from 'vs/editor/common/services/modeService';\n\nexport interface ILegacyLanguageDefinition {\n\tid: string;\n\textensions: string[];\n\tfilenames?: string[];\n\tfirstLine?: string;\n\taliases: string[];\n\tmimetypes: string[];\n\tmoduleId: string;\n\tctorName: string;\n}\n\n// Define extension point ids\nexport var Extensions = {\n\tModesRegistry: 'editor.modesRegistry'\n};\n\nexport class EditorModesRegistry {\n\n\tprivate _compatModes: ILegacyLanguageDefinition[];\n\tprivate _languages: ILanguageExtensionPoint[];\n\n\tprivate _onDidAddCompatModes: Emitter<ILegacyLanguageDefinition[]> = new Emitter<ILegacyLanguageDefinition[]>();\n\tpublic onDidAddCompatModes: Event<ILegacyLanguageDefinition[]> = this._onDidAddCompatModes.event;\n\n\tprivate _onDidAddLanguages: Emitter<ILanguageExtensionPoint[]> = new Emitter<ILanguageExtensionPoint[]>();\n\tpublic onDidAddLanguages: Event<ILanguageExtensionPoint[]> = this._onDidAddLanguages.event;\n\n\tconstructor() {\n\t\tthis._compatModes = [];\n\t\tthis._languages = [];\n\t}\n\n\t// --- compat modes\n\n\n\tpublic registerCompatModes(def:ILegacyLanguageDefinition[]): void {\n\t\tthis._compatModes = this._compatModes.concat(def);\n\t\tthis._onDidAddCompatModes.fire(def);\n\t}\n\tpublic registerCompatMode(def:ILegacyLanguageDefinition): void {\n\t\tthis._compatModes.push(def);\n\t\tthis._onDidAddCompatModes.fire([def]);\n\t}\n\tpublic getCompatModes(): ILegacyLanguageDefinition[] {\n\t\treturn this._compatModes.slice(0);\n\t}\n\n\t// --- languages\n\n\tpublic registerLanguage(def:ILanguageExtensionPoint): void {\n\t\tthis._languages.push(def);\n\t\tthis._onDidAddLanguages.fire([def]);\n\t}\n\tpublic registerLanguages(def:ILanguageExtensionPoint[]): void {\n\t\tthis._languages = this._languages.concat(def);\n\t\tthis._onDidAddLanguages.fire(def);\n\t}\n\tpublic getLanguages(): ILanguageExtensionPoint[] {\n\t\treturn this._languages.slice(0);\n\t}\n}\n\nexport var ModesRegistry = new EditorModesRegistry();\nRegistry.add(Extensions.ModesRegistry, ModesRegistry);\n\nModesRegistry.registerLanguage({\n\tid: 'plaintext',\n\textensions: ['.txt', '.gitignore'],\n\taliases: [nls.localize('plainText.alias', \"Plain Text\"), 'text'],\n\tmimetypes: ['text/plain']\n});\n"]}