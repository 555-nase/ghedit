{"version":3,"file":"vs/editor/common/modes/supports/tokenizationSupport.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/editor/common/modes/supports/tokenizationSupport.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {IDisposable} from 'vs/base/common/lifecycle';\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport * as modes from 'vs/editor/common/modes';\nimport {LineStream} from 'vs/editor/common/modes/lineStream';\nimport {NullMode, NullState, nullTokenize} from 'vs/editor/common/modes/nullMode';\nimport {Token} from 'vs/editor/common/modes/supports';\n\nexport interface ILeavingNestedModeData {\n\t/**\n\t * The part of the line that will be tokenized by the nested mode\n\t */\n\tnestedModeBuffer: string;\n\n\t/**\n\t * The part of the line that will be tokenized by the parent mode when it continues after the nested mode\n\t */\n\tbufferAfterNestedMode: string;\n\n\t/**\n\t * The state that will be used for continuing tokenization by the parent mode after the nested mode\n\t */\n\tstateAfterNestedMode: modes.IState;\n}\n\nexport interface IEnteringNestedModeData {\n\tmode:modes.IMode;\n\tmissingModePromise:TPromise<void>;\n}\n\nexport interface ITokenizationCustomization {\n\n\tgetInitialState():modes.IState;\n\n\tenterNestedMode?: (state:modes.IState) => boolean;\n\n\tgetNestedMode?: (state:modes.IState) => IEnteringNestedModeData;\n\n\tgetNestedModeInitialState?: (myState:modes.IState) => { state:modes.IState; missingModePromise:TPromise<void>; };\n\n\t/**\n\t * Return null if the line does not leave the nested mode\n\t */\n\tgetLeavingNestedModeData?: (line:string, state:modes.IState) => ILeavingNestedModeData;\n\n\t/**\n\t * Callback for when leaving a nested mode and returning to the outer mode.\n\t * @param myStateAfterNestedMode The outer mode's state that will begin to tokenize\n\t * @param lastNestedModeState The nested mode's last state\n\t */\n\tonReturningFromNestedMode?: (myStateAfterNestedMode:modes.IState, lastNestedModeState:modes.IState)=> void;\n}\n\nfunction isFunction(something) {\n\treturn typeof something === 'function';\n}\n\nexport class TokenizationSupport implements modes.ITokenizationSupport, IDisposable {\n\n\tstatic MAX_EMBEDDED_LEVELS = 5;\n\n\tprivate customization:ITokenizationCustomization;\n\tprivate defaults: {\n\t\tenterNestedMode: boolean;\n\t\tgetNestedMode: boolean;\n\t\tgetNestedModeInitialState: boolean;\n\t\tgetLeavingNestedModeData: boolean;\n\t\tonReturningFromNestedMode: boolean;\n\t};\n\n\tpublic shouldGenerateEmbeddedModels:boolean;\n\tpublic supportsNestedModes:boolean;\n\n\tprivate _mode:modes.IMode;\n\tprivate _embeddedModesListeners: { [modeId:string]: IDisposable; };\n\n\tconstructor(mode:modes.IMode, customization:ITokenizationCustomization, supportsNestedModes:boolean, shouldGenerateEmbeddedModels:boolean) {\n\t\tthis._mode = mode;\n\t\tthis.customization = customization;\n\t\tthis.supportsNestedModes = supportsNestedModes;\n\t\tthis._embeddedModesListeners = {};\n\t\tif (this.supportsNestedModes) {\n\t\t\tif (!this._mode.registerSupport) {\n\t\t\t\tthrow new Error('Cannot be a mode with nested modes unless I can emit a tokenizationSupport changed event!');\n\t\t\t}\n\t\t}\n\t\tthis.shouldGenerateEmbeddedModels = shouldGenerateEmbeddedModels;\n\t\tthis.defaults = {\n\t\t\tenterNestedMode: !isFunction(customization.enterNestedMode),\n\t\t\tgetNestedMode: !isFunction(customization.getNestedMode),\n\t\t\tgetNestedModeInitialState: !isFunction(customization.getNestedModeInitialState),\n\t\t\tgetLeavingNestedModeData: !isFunction(customization.getLeavingNestedModeData),\n\t\t\tonReturningFromNestedMode: !isFunction(customization.onReturningFromNestedMode)\n\t\t};\n\t}\n\n\tpublic dispose() : void {\n\t\tfor (var listener in this._embeddedModesListeners) {\n\t\t\tthis._embeddedModesListeners[listener].dispose();\n\t\t\tdelete this._embeddedModesListeners[listener];\n\t\t}\n\t}\n\n\tpublic getInitialState(): modes.IState {\n\t\treturn this.customization.getInitialState();\n\t}\n\n\tpublic tokenize(line:string, state:modes.IState, deltaOffset:number = 0, stopAtOffset:number = deltaOffset + line.length):modes.ILineTokens {\n\t\tif (state.getMode() !== this._mode) {\n\t\t\treturn this._nestedTokenize(line, state, deltaOffset, stopAtOffset, [], []);\n\t\t} else {\n\t\t\treturn this._myTokenize(line, state, deltaOffset, stopAtOffset, [], []);\n\t\t}\n\t}\n\n\t/**\n\t * Precondition is: nestedModeState.getMode() !== this\n\t * This means we are in a nested mode when parsing starts on this line.\n\t */\n\tprivate _nestedTokenize(buffer:string, nestedModeState:modes.IState, deltaOffset:number, stopAtOffset:number, prependTokens:modes.IToken[], prependModeTransitions:modes.IModeTransition[]):modes.ILineTokens {\n\t\tvar myStateBeforeNestedMode = nestedModeState.getStateData();\n\t\tvar leavingNestedModeData = this.getLeavingNestedModeData(buffer, myStateBeforeNestedMode);\n\n\t\t// Be sure to give every embedded mode the\n\t\t// opportunity to leave nested mode.\n\t\t// i.e. Don't go straight to the most nested mode\n\t\tvar stepOnceNestedState = nestedModeState;\n\t\twhile (stepOnceNestedState.getStateData() && stepOnceNestedState.getStateData().getMode() !== this._mode) {\n\t\t\tstepOnceNestedState = stepOnceNestedState.getStateData();\n\t\t}\n\t\tvar nestedMode = stepOnceNestedState.getMode();\n\n\t\tif (!leavingNestedModeData) {\n\t\t\t// tokenization will not leave nested mode\n\t\t\tvar result:modes.ILineTokens;\n\t\t\tif (nestedMode.tokenizationSupport) {\n\t\t\t\tresult = nestedMode.tokenizationSupport.tokenize(buffer, nestedModeState, deltaOffset, stopAtOffset);\n\t\t\t} else {\n\t\t\t\t// The nested mode doesn't have tokenization support,\n\t\t\t\t// unfortunatelly this means we have to fake it\n\t\t\t\tresult = nullTokenize(nestedMode, buffer, nestedModeState, deltaOffset);\n\t\t\t}\n\t\t\tresult.tokens = prependTokens.concat(result.tokens);\n\t\t\tresult.modeTransitions = prependModeTransitions.concat(result.modeTransitions);\n\t\t\treturn result;\n\t\t}\n\n\t\tvar nestedModeBuffer = leavingNestedModeData.nestedModeBuffer;\n\t\tif (nestedModeBuffer.length > 0) {\n\t\t\t// Tokenize with the nested mode\n\t\t\tvar nestedModeLineTokens:modes.ILineTokens;\n\t\t\tif (nestedMode.tokenizationSupport) {\n\t\t\t\tnestedModeLineTokens = nestedMode.tokenizationSupport.tokenize(nestedModeBuffer, nestedModeState, deltaOffset, stopAtOffset);\n\t\t\t} else {\n\t\t\t\t// The nested mode doesn't have tokenization support,\n\t\t\t\t// unfortunatelly this means we have to fake it\n\t\t\t\tnestedModeLineTokens = nullTokenize(nestedMode, nestedModeBuffer, nestedModeState, deltaOffset);\n\t\t\t}\n\n\t\t\t// Save last state of nested mode\n\t\t\tnestedModeState = nestedModeLineTokens.endState;\n\n\t\t\t// Prepend nested mode's result to our result\n\t\t\tprependTokens = prependTokens.concat(nestedModeLineTokens.tokens);\n\t\t\tprependModeTransitions = prependModeTransitions.concat(nestedModeLineTokens.modeTransitions);\n\t\t}\n\n\t\tvar bufferAfterNestedMode = leavingNestedModeData.bufferAfterNestedMode;\n\t\tvar myStateAfterNestedMode = leavingNestedModeData.stateAfterNestedMode;\n\t\tmyStateAfterNestedMode.setStateData(myStateBeforeNestedMode.getStateData());\n\t\tthis.onReturningFromNestedMode(myStateAfterNestedMode, nestedModeState);\n\n\t\treturn this._myTokenize(bufferAfterNestedMode, myStateAfterNestedMode, deltaOffset + nestedModeBuffer.length, stopAtOffset, prependTokens, prependModeTransitions);\n\t}\n\n\t/**\n\t * Precondition is: state.getMode() === this\n\t * This means we are in the current mode when parsing starts on this line.\n\t */\n\tprivate _myTokenize(buffer:string, myState:modes.IState, deltaOffset:number, stopAtOffset:number, prependTokens:modes.IToken[], prependModeTransitions:modes.IModeTransition[]):modes.ILineTokens {\n\t\tvar lineStream = new LineStream(buffer);\n\t\tvar tokenResult:modes.ITokenizationResult, beforeTokenizeStreamPos:number;\n\t\tvar previousType:string = null;\n\t\tvar retokenize:TPromise<void> = null;\n\n\t\tmyState = myState.clone();\n\t\tif (prependModeTransitions.length <= 0 || prependModeTransitions[prependModeTransitions.length-1].mode !== this._mode) {\n\t\t\t// Avoid transitioning to the same mode (this can happen in case of empty embedded modes)\n\t\t\tprependModeTransitions.push({\n\t\t\t\tstartIndex: deltaOffset,\n\t\t\t\tmode: this._mode\n\t\t\t});\n\t\t}\n\n\t\tvar maxPos = Math.min(stopAtOffset - deltaOffset, buffer.length);\n\t\twhile (lineStream.pos() < maxPos) {\n\t\t\tbeforeTokenizeStreamPos = lineStream.pos();\n\n\t\t\tdo {\n\t\t\t\ttokenResult = myState.tokenize(lineStream);\n\t\t\t\tif (tokenResult === null || tokenResult === undefined ||\n\t\t\t\t\t((tokenResult.type === undefined || tokenResult.type === null) &&\n\t\t\t\t\t(tokenResult.nextState === undefined || tokenResult.nextState === null))) {\n\t\t\t\t\tthrow new Error('Tokenizer must return a valid state');\n\t\t\t\t}\n\n\t\t\t\tif (tokenResult.nextState) {\n\t\t\t\t\ttokenResult.nextState.setStateData(myState.getStateData());\n\t\t\t\t\tmyState = tokenResult.nextState;\n\t\t\t\t}\n\t\t\t\tif (lineStream.pos() <= beforeTokenizeStreamPos) {\n\t\t\t\t\tthrow new Error('Stream did not advance while tokenizing. Mode id is ' + this._mode.getId() + ' (stuck at token type: \"' + tokenResult.type + '\", prepend tokens: \"' + (prependTokens.map(t => t.type).join(',')) + '\").');\n\t\t\t\t}\n\t\t\t} while (!tokenResult.type && tokenResult.type !== '');\n\n\t\t\tif (previousType !== tokenResult.type || tokenResult.dontMergeWithPrev || previousType === null) {\n\t\t\t\tprependTokens.push(new Token(beforeTokenizeStreamPos + deltaOffset, tokenResult.type));\n\t\t\t}\n\n\t\t\tpreviousType = tokenResult.type;\n\n\t\t\tif (this.supportsNestedModes && this.enterNestedMode(myState)) {\n\t\t\t\tvar currentEmbeddedLevels = this._getEmbeddedLevel(myState);\n\t\t\t\tif (currentEmbeddedLevels < TokenizationSupport.MAX_EMBEDDED_LEVELS) {\n\t\t\t\t\tvar nestedModeState = this.getNestedModeInitialState(myState);\n\n\t\t\t\t\t// Re-emit tokenizationSupport change events from all modes that I ever embedded\n\t\t\t\t\tvar embeddedMode = nestedModeState.state.getMode();\n\t\t\t\t\tif (typeof embeddedMode.addSupportChangedListener === 'function' && !this._embeddedModesListeners.hasOwnProperty(embeddedMode.getId())) {\n\t\t\t\t\t\tvar emitting = false;\n\t\t\t\t\t\tthis._embeddedModesListeners[embeddedMode.getId()] = embeddedMode.addSupportChangedListener((e) => {\n\t\t\t\t\t\t\tif (emitting) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (e.tokenizationSupport) {\n\t\t\t\t\t\t\t\temitting = true;\n\t\t\t\t\t\t\t\tthis._mode.registerSupport('tokenizationSupport', (mode) => {\n\t\t\t\t\t\t\t\t\treturn mode.tokenizationSupport;\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\temitting = false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\n\t\t\t\t\tif (!lineStream.eos()) {\n\t\t\t\t\t\t// There is content from the embedded mode\n\t\t\t\t\t\tvar restOfBuffer = buffer.substr(lineStream.pos());\n\t\t\t\t\t\tvar result = this._nestedTokenize(restOfBuffer, nestedModeState.state, deltaOffset + lineStream.pos(), stopAtOffset, prependTokens, prependModeTransitions);\n\t\t\t\t\t\tresult.retokenize = result.retokenize || nestedModeState.missingModePromise;\n\t\t\t\t\t\treturn result;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Transition to the nested mode state\n\t\t\t\t\t\tmyState = nestedModeState.state;\n\t\t\t\t\t\tretokenize = nestedModeState.missingModePromise;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\ttokens: prependTokens,\n\t\t\tactualStopOffset: lineStream.pos() + deltaOffset,\n\t\t\tmodeTransitions: prependModeTransitions,\n\t\t\tendState: myState,\n\t\t\tretokenize: retokenize\n\t\t};\n\t}\n\n\tprivate _getEmbeddedLevel(state:modes.IState): number {\n\t\tvar result = -1;\n\t\twhile(state) {\n\t\t\tresult++;\n\t\t\tstate = state.getStateData();\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate enterNestedMode(state:modes.IState): boolean {\n\t\tif (this.defaults.enterNestedMode) {\n\t\t\treturn false;\n\t\t}\n\t\treturn this.customization.enterNestedMode(state);\n\n\t}\n\n\tprivate getNestedMode(state:modes.IState): IEnteringNestedModeData {\n\t\tif (this.defaults.getNestedMode) {\n\t\t\treturn null;\n\t\t}\n\t\treturn this.customization.getNestedMode(state);\n\t}\n\n\tprivate static _validatedNestedMode(input:IEnteringNestedModeData): IEnteringNestedModeData {\n\t\tvar mode: modes.IMode = new NullMode(),\n\t\t\tmissingModePromise: TPromise<void> = null;\n\n\t\tif (input && input.mode) {\n\t\t\tmode = input.mode;\n\t\t}\n\t\tif (input && input.missingModePromise) {\n\t\t\tmissingModePromise = input.missingModePromise;\n\t\t}\n\n\t\treturn {\n\t\t\tmode: mode,\n\t\t\tmissingModePromise: missingModePromise\n\t\t};\n\t}\n\n\tprivate getNestedModeInitialState(state:modes.IState): { state:modes.IState; missingModePromise:TPromise<void>; } {\n\t\tif (this.defaults.getNestedModeInitialState) {\n\t\t\tvar nestedMode = TokenizationSupport._validatedNestedMode(this.getNestedMode(state));\n\t\t\tvar missingModePromise = nestedMode.missingModePromise;\n\t\t\tvar nestedModeState: modes.IState;\n\n\t\t\tif (nestedMode.mode.tokenizationSupport) {\n\t\t\t\tnestedModeState = nestedMode.mode.tokenizationSupport.getInitialState();\n\t\t\t} else {\n\t\t\t\tnestedModeState = new NullState(nestedMode.mode, null);\n\t\t\t}\n\n\t\t\tnestedModeState.setStateData(state);\n\n\t\t\treturn {\n\t\t\t\tstate: nestedModeState,\n\t\t\t\tmissingModePromise: missingModePromise\n\t\t\t};\n\t\t}\n\t\treturn this.customization.getNestedModeInitialState(state);\n\t}\n\n\tprivate getLeavingNestedModeData(line:string, state:modes.IState): ILeavingNestedModeData {\n\t\tif (this.defaults.getLeavingNestedModeData) {\n\t\t\treturn null;\n\t\t}\n\t\treturn this.customization.getLeavingNestedModeData(line, state);\n\t}\n\n\tprivate onReturningFromNestedMode(myStateAfterNestedMode:modes.IState, lastNestedModeState:modes.IState): void {\n\t\tif (this.defaults.onReturningFromNestedMode) {\n\t\t\treturn null;\n\t\t}\n\t\treturn this.customization.onReturningFromNestedMode(myStateAfterNestedMode, lastNestedModeState);\n\t}\n}\n"]}