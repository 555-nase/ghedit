{"version":3,"file":"vs/editor/common/modes/supports/parameterHintsSupport.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/editor/common/modes/supports/parameterHintsSupport.ts"],"names":[],"mappings":";IAAA;;;oGAGgG;IAChG,YAAY,CAAC;IAcb;QAKC,+BAAY,MAAc,EAAE,YAAyC;YACpE,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;YACtB,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QAClC,CAAC;QAEM,kEAAkC,GAAzC;YAEC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,iBAAiB,CAAC;QAC5C,CAAC;QAEM,2DAA2B,GAAlC,UAAmC,OAAqB,EAAE,MAAc;YAAxE,iBAiBC;YAfA,MAAM,CAAC,sBAAW,CAAC,OAAO,EAAE,MAAM,EAAE,UAAC,UAAgB,EAAE,OAAoB,EAAE,MAAa;gBACzF,EAAE,CAAC,CAAC,KAAI,CAAC,OAAO,KAAK,UAAU,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;oBACzC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,KAAI,CAAC,YAAY,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;wBACrD,MAAM,CAAC,IAAI,CAAC;oBACb,CAAC;oBACD,EAAE,CAAC,CAAC,KAAI,CAAC,YAAY,CAAC,aAAa,CAAC,MAAM,KAAK,CAAC,IAAI,KAAI,CAAC,YAAY,CAAC,aAAa,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;wBAChG,MAAM,CAAC,KAAK,CAAC;oBACd,CAAC;oBACD,MAAM,CAAC,CAAC,sBAAW,CAAC,OAAO,EAAE,MAAM,GAAC,CAAC,EAAE,KAAI,CAAC,YAAY,CAAC,aAAa,CAAC,CAAC;gBACzE,CAAC;gBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,UAAU,CAAC,qBAAqB,CAAC,CAAC,CAAC;oBAC7C,MAAM,CAAC,UAAU,CAAC,qBAAqB,CAAC,2BAA2B,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;gBACtF,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACP,MAAM,CAAC,KAAK,CAAC;gBACd,CAAC;YACF,CAAC,CAAC,CAAC;QACJ,CAAC;QACM,iDAAiB,GAAxB,UAAyB,QAAa,EAAE,QAAmB;YAC1D,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,iBAAiB,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;QAChE,CAAC;QACF,4BAAC;IAAD,CAAC,AApCD,IAoCC;IApCY,6BAAqB,wBAoCjC,CAAA","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport URI from 'vs/base/common/uri';\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport {IPosition} from 'vs/editor/common/editorCommon';\nimport {ILineContext, IMode, IParameterHints, IParameterHintsSupport} from 'vs/editor/common/modes';\nimport {handleEvent, isLineToken} from 'vs/editor/common/modes/supports';\n\nexport interface IParameterHintsContribution {\n\ttriggerCharacters: string[];\n\texcludeTokens: string[];\n\tgetParameterHints: (resource: URI, position: IPosition) => TPromise<IParameterHints>;\n}\n\nexport class ParameterHintsSupport implements IParameterHintsSupport {\n\n\tprivate _modeId: string;\n\tprivate contribution: IParameterHintsContribution;\n\n\tconstructor(modeId: string, contribution: IParameterHintsContribution) {\n\t\tthis._modeId = modeId;\n\t\tthis.contribution = contribution;\n\t}\n\n\tpublic getParameterHintsTriggerCharacters(): string[]\n\t{\n\t\treturn this.contribution.triggerCharacters;\n\t}\n\n\tpublic shouldTriggerParameterHints(context: ILineContext, offset: number): boolean\n\t{\n\t\treturn handleEvent(context, offset, (nestedMode:IMode, context:ILineContext, offset:number) => {\n\t\t\tif (this._modeId === nestedMode.getId()) {\n\t\t\t\tif (!Array.isArray(this.contribution.excludeTokens)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\tif (this.contribution.excludeTokens.length === 1 && this.contribution.excludeTokens[0] === '*') {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\treturn !isLineToken(context, offset-1, this.contribution.excludeTokens);\n\t\t\t} else if (nestedMode.parameterHintsSupport) {\n\t\t\t\treturn nestedMode.parameterHintsSupport.shouldTriggerParameterHints(context, offset);\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t});\n\t}\n\tpublic getParameterHints(resource: URI, position: IPosition): TPromise<IParameterHints> {\n\t\treturn this.contribution.getParameterHints(resource, position);\n\t}\n}\n"]}