{"version":3,"file":"vs/editor/common/modes/supports/richEditBrackets.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/editor/common/modes/supports/richEditBrackets.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport * as strings from 'vs/base/common/strings';\nimport {Range} from 'vs/editor/common/core/range';\nimport {IRichEditBracket} from 'vs/editor/common/editorCommon';\nimport * as modes from 'vs/editor/common/modes';\n\ninterface ISimpleInternalBracket {\n\topen: string;\n\tclose: string;\n}\n\nexport class RichEditBrackets implements modes.IRichEditBrackets {\n\n\tpublic brackets: IRichEditBracket[];\n\tpublic forwardRegex: RegExp;\n\tpublic reversedRegex: RegExp;\n\tpublic maxBracketLength: number;\n\tpublic textIsBracket: {[text:string]:IRichEditBracket;};\n\tpublic textIsOpenBracket: {[text:string]:boolean;};\n\n\tconstructor(modeId: string, brackets: modes.CharacterPair[]) {\n\t\tthis.brackets = brackets.map((b) => {\n\t\t\treturn {\n\t\t\t\tmodeId: modeId,\n\t\t\t\topen: b[0],\n\t\t\t\tclose: b[1],\n\t\t\t\tforwardRegex: getRegexForBracketPair({ open: b[0], close: b[1] }),\n\t\t\t\treversedRegex: getReversedRegexForBracketPair({ open: b[0], close: b[1] })\n\t\t\t};\n\t\t});\n\t\tthis.forwardRegex = getRegexForBrackets(this.brackets);\n\t\tthis.reversedRegex = getReversedRegexForBrackets(this.brackets);\n\n\t\tthis.textIsBracket = {};\n\t\tthis.textIsOpenBracket = {};\n\t\tthis.maxBracketLength = 0;\n\t\tthis.brackets.forEach((b) => {\n\t\t\tthis.textIsBracket[b.open] = b;\n\t\t\tthis.textIsBracket[b.close] = b;\n\t\t\tthis.textIsOpenBracket[b.open] = true;\n\t\t\tthis.textIsOpenBracket[b.close] = false;\n\t\t\tthis.maxBracketLength = Math.max(this.maxBracketLength, b.open.length);\n\t\t\tthis.maxBracketLength = Math.max(this.maxBracketLength, b.close.length);\n\t\t});\n\t}\n}\n\nfunction once<T, R>(keyFn:(input:T)=>string, computeFn:(input:T)=>R):(input:T)=>R {\n\tlet cache: {[key:string]:R;} = {};\n\treturn (input:T):R => {\n\t\tlet key = keyFn(input);\n\t\tif (!cache.hasOwnProperty(key)) {\n\t\t\tcache[key] = computeFn(input);\n\t\t}\n\t\treturn cache[key];\n\t};\n}\n\nvar getRegexForBracketPair = once<ISimpleInternalBracket,RegExp>(\n\t(input) => `${input.open};${input.close}`,\n\t(input) => {\n\t\treturn createOrRegex([input.open, input.close]);\n\t}\n);\n\nvar getReversedRegexForBracketPair = once<ISimpleInternalBracket,RegExp>(\n\t(input) => `${input.open};${input.close}`,\n\t(input) => {\n\t\treturn createOrRegex([toReversedString(input.open), toReversedString(input.close)]);\n\t}\n);\n\nvar getRegexForBrackets = once<ISimpleInternalBracket[],RegExp>(\n\t(input) => input.map(b => `${b.open};${b.close}`).join(';'),\n\t(input) => {\n\t\tlet pieces: string[] = [];\n\t\tinput.forEach((b) => {\n\t\t\tpieces.push(b.open);\n\t\t\tpieces.push(b.close);\n\t\t});\n\t\treturn createOrRegex(pieces);\n\t}\n);\n\nvar getReversedRegexForBrackets = once<ISimpleInternalBracket[],RegExp>(\n\t(input) => input.map(b => `${b.open};${b.close}`).join(';'),\n\t(input) => {\n\t\tlet pieces: string[] = [];\n\t\tinput.forEach((b) => {\n\t\t\tpieces.push(toReversedString(b.open));\n\t\t\tpieces.push(toReversedString(b.close));\n\t\t});\n\t\treturn createOrRegex(pieces);\n\t}\n);\n\nfunction createOrRegex(pieces:string[]): RegExp {\n\tlet regexStr = `(${pieces.map(strings.escapeRegExpCharacters).join(')|(')})`;\n\treturn strings.createRegExp(regexStr, true, false, false, false);\n}\n\nfunction toReversedString(str:string): string {\n\tlet reversedStr = '';\n\tfor (let i = str.length - 1; i >= 0; i--) {\n\t\treversedStr += str.charAt(i);\n\t}\n\treturn reversedStr;\n}\n\nexport class BracketsUtils {\n\n\tprivate static _findPrevBracketInText(reversedBracketRegex:RegExp, lineNumber:number, reversedText:string, offset:number): Range {\n\t\tlet m = reversedText.match(reversedBracketRegex);\n\n\t\tif (!m) {\n\t\t\treturn null;\n\t\t}\n\n\t\tlet matchOffset = reversedText.length - m.index;\n\t\tlet matchLength = m[0].length;\n\t\tlet absoluteMatchOffset = offset + matchOffset;\n\n\t\treturn new Range(lineNumber, absoluteMatchOffset - matchLength + 1, lineNumber, absoluteMatchOffset + 1);\n\t}\n\n\tpublic static findPrevBracketInToken(reversedBracketRegex:RegExp, lineNumber:number, lineText:string, currentTokenStart:number, currentTokenEnd:number): Range {\n\t\t// Because JS does not support backwards regex search, we search forwards in a reversed string with a reversed regex ;)\n\t\tlet currentTokenReversedText = '';\n\t\tfor (let index = currentTokenEnd - 1; index >= currentTokenStart; index--) {\n\t\t\tcurrentTokenReversedText += lineText.charAt(index);\n\t\t}\n\n\t\treturn this._findPrevBracketInText(reversedBracketRegex, lineNumber, currentTokenReversedText, currentTokenStart);\n\t}\n\n\tpublic static findNextBracketInText(bracketRegex:RegExp, lineNumber:number, text:string, offset:number): Range {\n\t\tlet m = text.match(bracketRegex);\n\n\t\tif (!m) {\n\t\t\treturn null;\n\t\t}\n\n\t\tlet matchOffset = m.index;\n\t\tlet matchLength = m[0].length;\n\t\tlet absoluteMatchOffset = offset + matchOffset;\n\n\t\treturn new Range(lineNumber, absoluteMatchOffset + 1, lineNumber, absoluteMatchOffset + 1 + matchLength);\n\t}\n\n\tpublic static findNextBracketInToken(bracketRegex:RegExp, lineNumber:number, lineText:string, currentTokenStart:number, currentTokenEnd:number): Range {\n\t\tlet currentTokenText = lineText.substring(currentTokenStart, currentTokenEnd);\n\n\t\treturn this.findNextBracketInText(bracketRegex, lineNumber, currentTokenText, currentTokenStart);\n\t}\n\n}\n"]}