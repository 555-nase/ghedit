{"version":3,"file":"vs/editor/common/modes/supports/referenceSupport.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/editor/common/modes/supports/referenceSupport.ts"],"names":[],"mappings":";IAAA;;;oGAGgG;IAChG,YAAY,CAAC;IAab;QAKC;;WAEG;QACH,0BAAY,MAAc,EAAE,YAAoC;YAC/D,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;YACtB,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QAClC,CAAC;QAEM,4CAAiB,GAAxB,UAAyB,OAAqB,EAAE,MAAa;YAA7D,iBAYC;YAXA,MAAM,CAAC,sBAAW,CAAC,OAAO,EAAE,MAAM,EAAE,UAAC,UAAgB,EAAE,OAAoB,EAAE,MAAa;gBACzF,EAAE,CAAC,CAAC,KAAI,CAAC,OAAO,KAAK,UAAU,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;oBACzC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,KAAI,CAAC,YAAY,CAAC,MAAM,CAAC;wBAC/C,KAAI,CAAC,YAAY,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC;wBACnC,sBAAW,CAAC,OAAO,EAAE,MAAM,EAAE,KAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC;gBAC1D,CAAC;gBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,UAAU,CAAC,gBAAgB,CAAC,CAAC,CAAC;oBACxC,MAAM,CAAC,UAAU,CAAC,gBAAgB,CAAC,iBAAiB,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;gBACvE,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACP,MAAM,CAAC,KAAK,CAAC;gBACd,CAAC;YACF,CAAC,CAAC,CAAC;QACJ,CAAC;QAEM,yCAAc,GAArB,UAAsB,QAAa,EAAE,QAAmB,EAAE,kBAA2B;YACpF,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,QAAQ,EAAE,QAAQ,EAAE,kBAAkB,CAAC,CAAC;QACjF,CAAC;QACF,uBAAC;IAAD,CAAC,AA9BD,IA8BC;IA9BY,wBAAgB,mBA8B5B,CAAA","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport URI from 'vs/base/common/uri';\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport {IPosition} from 'vs/editor/common/editorCommon';\nimport {ILineContext, IMode, IReference, IReferenceSupport} from 'vs/editor/common/modes';\nimport {handleEvent, isLineToken} from 'vs/editor/common/modes/supports';\n\nexport interface IReferenceContribution {\n\ttokens: string[];\n\tfindReferences: (resource: URI, position: IPosition, includeDeclaration: boolean) => TPromise<IReference[]>;\n}\n\nexport class ReferenceSupport implements IReferenceSupport {\n\n\tprivate _modeId: string;\n\tprivate contribution: IReferenceContribution;\n\n\t/**\n\t * Provide the token type postfixes for the tokens where a reference can be found in the 'tokens' argument.\n\t */\n\tconstructor(modeId: string, contribution: IReferenceContribution) {\n\t\tthis._modeId = modeId;\n\t\tthis.contribution = contribution;\n\t}\n\n\tpublic canFindReferences(context: ILineContext, offset:number):boolean {\n\t\treturn handleEvent(context, offset, (nestedMode:IMode, context:ILineContext, offset:number) => {\n\t\t\tif (this._modeId === nestedMode.getId()) {\n\t\t\t\treturn (!Array.isArray(this.contribution.tokens) ||\n\t\t\t\t\tthis.contribution.tokens.length < 1 ||\n\t\t\t\t\tisLineToken(context, offset, this.contribution.tokens));\n\t\t\t} else if (nestedMode.referenceSupport) {\n\t\t\t\treturn nestedMode.referenceSupport.canFindReferences(context, offset);\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic findReferences(resource: URI, position: IPosition, includeDeclaration: boolean): TPromise<IReference[]> {\n\t\treturn this.contribution.findReferences(resource, position, includeDeclaration);\n\t}\n}\n"]}