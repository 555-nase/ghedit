{"version":3,"file":"vs/editor/common/modes/supports/electricCharacter.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/editor/common/modes/supports/electricCharacter.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport * as strings from 'vs/base/common/strings';\nimport * as modes from 'vs/editor/common/modes';\nimport {handleEvent, ignoreBracketsInToken} from 'vs/editor/common/modes/supports';\nimport {BracketsUtils} from 'vs/editor/common/modes/supports/richEditBrackets';\n\n/**\n * Definition of documentation comments (e.g. Javadoc/JSdoc)\n */\nexport interface IDocComment {\n\tscope: string; // What tokens should be used to detect a doc comment (e.g. 'comment.documentation').\n\topen: string; // The string that starts a doc comment (e.g. '/**')\n\tlineStart: string; // The string that appears at the start of each line, except the first and last (e.g. ' * ').\n\tclose?: string; // The string that appears on the last line and closes the doc comment (e.g. ' */').\n}\n\nexport interface IBracketElectricCharacterContribution {\n\tdocComment?: IDocComment;\n\tcaseInsensitive?: boolean;\n\tembeddedElectricCharacters?: string[];\n}\n\nexport class BracketElectricCharacterSupport implements modes.IRichEditElectricCharacter {\n\n\tprivate _modeId: string;\n\tprivate contribution: IBracketElectricCharacterContribution;\n\tprivate brackets: Brackets;\n\n\tconstructor(modeId: string, brackets: modes.IRichEditBrackets, contribution: IBracketElectricCharacterContribution) {\n\t\tthis._modeId = modeId;\n\t\tthis.contribution = contribution || {};\n\t\tthis.brackets = new Brackets(modeId, brackets, this.contribution.docComment, this.contribution.caseInsensitive);\n\t}\n\n\tpublic getElectricCharacters(): string[]{\n\t\tif (Array.isArray(this.contribution.embeddedElectricCharacters)) {\n\t\t\treturn this.contribution.embeddedElectricCharacters.concat(this.brackets.getElectricCharacters());\n\t\t}\n\t\treturn this.brackets.getElectricCharacters();\n\t}\n\n\tpublic onElectricCharacter(context:modes.ILineContext, offset:number): modes.IElectricAction {\n\t\treturn handleEvent(context, offset, (nestedMode:modes.IMode, context:modes.ILineContext, offset:number) => {\n\t\t\tif (this._modeId === nestedMode.getId()) {\n\t\t\t\treturn this.brackets.onElectricCharacter(context, offset);\n\t\t\t} else if (nestedMode.richEditSupport && nestedMode.richEditSupport.electricCharacter) {\n\t\t\t\treturn nestedMode.richEditSupport.electricCharacter.onElectricCharacter(context, offset);\n\t\t\t} else {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t});\n\t}\n}\n\n\n\nexport class Brackets {\n\n\tprivate _modeId: string;\n\tprivate _richEditBrackets: modes.IRichEditBrackets;\n\tprivate _docComment: IDocComment;\n\n\tconstructor(modeId: string, richEditBrackets: modes.IRichEditBrackets, docComment: IDocComment = null, caseInsensitive: boolean = false) {\n\t\tthis._modeId = modeId;\n\t\tthis._richEditBrackets = richEditBrackets;\n\t\tthis._docComment = docComment ? docComment : null;\n\t}\n\n\tpublic getElectricCharacters():string[] {\n\t\tvar result: string[] = [];\n\n\t\tif (this._richEditBrackets) {\n\t\t\tfor (let i = 0, len = this._richEditBrackets.brackets.length; i < len; i++) {\n\t\t\t\tlet bracketPair = this._richEditBrackets.brackets[i];\n\t\t\t\tlet lastChar = bracketPair.close.charAt(bracketPair.close.length - 1);\n\t\t\t\tresult.push(lastChar);\n\t\t\t}\n\t\t}\n\n\t\t// Doc comments\n\t\tif (this._docComment){\n\t\t\tresult.push(this._docComment.open.charAt(this._docComment.open.length - 1));\n\t\t}\n\n\t\t// Filter duplicate entries\n\t\tresult = result.filter((item, pos, array) => {\n\t\t\treturn array.indexOf(item) === pos;\n\t\t});\n\n\t\treturn result;\n\t}\n\n\tpublic onElectricCharacter(context: modes.ILineContext, offset: number): modes.IElectricAction {\n\t\tif (context.getTokenCount() === 0) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn (this._onElectricCharacterDocComment(context, offset) ||\n\t\t\tthis._onElectricCharacterStandardBrackets(context, offset));\n\t}\n\n\tprivate containsTokenTypes(fullTokenSpec: string, tokensToLookFor: string): boolean {\n\t\tvar array = tokensToLookFor.split('.');\n\t\tfor (var i = 0; i < array.length; ++i) {\n\t\t\tif (fullTokenSpec.indexOf(array[i]) < 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\tprivate _onElectricCharacterStandardBrackets(context: modes.ILineContext, offset: number): modes.IElectricAction {\n\n\t\tif (!this._richEditBrackets || this._richEditBrackets.brackets.length === 0) {\n\t\t\treturn null;\n\t\t}\n\n\t\tlet reversedBracketRegex = this._richEditBrackets.reversedRegex;\n\n\t\tlet lineText = context.getLineContent();\n\t\tlet tokenIndex = context.findIndexOfOffset(offset);\n\t\tlet tokenStart = context.getTokenStartIndex(tokenIndex);\n\t\tlet tokenEnd = offset + 1;\n\n\t\tvar firstNonWhitespaceIndex = strings.firstNonWhitespaceIndex(context.getLineContent());\n\t\tif (firstNonWhitespaceIndex !== -1 && firstNonWhitespaceIndex < tokenStart) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif (!ignoreBracketsInToken(context.getTokenType(tokenIndex))) {\n\t\t\tlet r = BracketsUtils.findPrevBracketInToken(reversedBracketRegex, 1, lineText, tokenStart, tokenEnd);\n\t\t\tif (r) {\n\t\t\t\tlet text = lineText.substring(r.startColumn - 1, r.endColumn - 1);\n\t\t\t\tlet isOpen = this._richEditBrackets.textIsOpenBracket[text];\n\t\t\t\tif (!isOpen) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tmatchOpenBracket: text\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tprivate _onElectricCharacterDocComment(context: modes.ILineContext, offset: number): modes.IElectricAction {\n\t\t// We only auto-close, so do nothing if there is no closing part.\n\t\tif (!this._docComment || !this._docComment.close) {\n\t\t\treturn null;\n\t\t}\n\n\t\tvar line = context.getLineContent();\n\t\tvar char: string = line[offset];\n\n\t\t// See if the right electric character was pressed\n\t\tif (char !== this._docComment.open.charAt(this._docComment.open.length - 1)) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// If this line already contains the closing tag, do nothing.\n\t\tif (line.indexOf(this._docComment.close, offset) >= 0) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// If we're not in a documentation comment, do nothing.\n\t\tvar lastTokenIndex = context.findIndexOfOffset(offset);\n\t\tif (! this.containsTokenTypes(context.getTokenType(lastTokenIndex), this._docComment.scope)) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif (line.substring(context.getTokenStartIndex(lastTokenIndex), offset+1/* include electric char*/) !== this._docComment.open) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn { appendText: this._docComment.close};\n\t}\n}\n"]}