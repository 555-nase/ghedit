{"version":3,"sources":["vs/editor/common/model/textModelWithTokens.ts"],"names":[],"mappings":"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","file":"vs/editor/common/model/textModelWithTokens.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport * as nls from 'vs/nls';\nimport {RunOnceScheduler} from 'vs/base/common/async';\nimport {onUnexpectedError} from 'vs/base/common/errors';\nimport {IDisposable, dispose} from 'vs/base/common/lifecycle';\nimport {StopWatch} from 'vs/base/common/stopwatch';\nimport * as timer from 'vs/base/common/timer';\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport {DefaultConfig} from 'vs/editor/common/config/defaultConfig';\nimport {Range} from 'vs/editor/common/core/range';\nimport * as editorCommon from 'vs/editor/common/editorCommon';\nimport {ModelLine} from 'vs/editor/common/model/modelLine';\nimport {TextModel} from 'vs/editor/common/model/textModel';\nimport {WordHelper} from 'vs/editor/common/model/textModelWithTokensHelpers';\nimport {TokenIterator} from 'vs/editor/common/model/tokenIterator';\nimport {ILineContext, ILineTokens, IToken, IModeTransition, IMode, IState} from 'vs/editor/common/modes';\nimport {NullMode, NullState, nullTokenize} from 'vs/editor/common/modes/nullMode';\nimport {ignoreBracketsInToken} from 'vs/editor/common/modes/supports';\nimport {BracketsUtils} from 'vs/editor/common/modes/supports/richEditBrackets';\nimport * as TokensBinaryEncoding from 'vs/editor/common/model/tokensBinaryEncoding';\nimport {ModeTransition} from 'vs/editor/common/core/modeTransition';\n\nexport class TokensInflatorMap implements editorCommon.ITokensInflatorMap {\n\n\tpublic _inflate:string[];\n\n\tpublic _deflate: {\n\t\t[token:string]:number;\n\t};\n\n\tconstructor() {\n\t\tthis._inflate = [ '' ];\n\t\tthis._deflate = { '': 0 };\n\t}\n}\n\nclass ModeToModelBinder implements IDisposable {\n\n\tprivate _modePromise:TPromise<IMode>;\n\tprivate _externalModePromise:TPromise<boolean>;\n\tprivate _externalModePromise_c:(value:boolean)=>void;\n\tprivate _externalModePromise_e:(err:any)=>void;\n\tprivate _model:TextModelWithTokens;\n\tprivate _isDisposed:boolean;\n\n\tconstructor(modePromise:TPromise<IMode>, model:TextModelWithTokens) {\n\t\tthis._modePromise = modePromise;\n\t\t// Create an external mode promise that fires after the mode is set to the model\n\t\tthis._externalModePromise = new TPromise<boolean>((c, e, p) => {\n\t\t\tthis._externalModePromise_c = c;\n\t\t\tthis._externalModePromise_e = e;\n\t\t}, () => {\n\t\t\t// this promise cannot be canceled\n\t\t});\n\t\tthis._model = model;\n\t\tthis._isDisposed = false;\n\n\t\t// Ensure asynchronicity\n\t\tTPromise.timeout(0).then(() => {\n\t\t\treturn this._modePromise;\n\t\t}).then((mode:IMode) => {\n\t\t\tif (this._isDisposed) {\n\t\t\t\tthis._externalModePromise_c(false);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar model = this._model;\n\t\t\tthis.dispose();\n\t\t\tmodel.setMode(mode);\n\t\t\tmodel._warmUpTokens();\n\t\t\tthis._externalModePromise_c(true);\n\t\t}).done(null, (err) => {\n\t\t\tthis._externalModePromise_e(err);\n\t\t\tonUnexpectedError(err);\n\t\t});\n\t}\n\n\tpublic getModePromise(): TPromise<boolean> {\n\t\treturn this._externalModePromise;\n\t}\n\n\tpublic dispose(): void {\n\t\tthis._modePromise = null;\n\t\tthis._model = null;\n\t\tthis._isDisposed = true;\n\t}\n}\n\nexport interface IRetokenizeRequest extends IDisposable {\n\n\tisFulfilled: boolean;\n\n\t/**\n\t * If null, the entire model will be retokenzied, use null with caution\n\t */\n\tgetRange(): editorCommon.IRange;\n}\n\nexport class FullModelRetokenizer implements IRetokenizeRequest {\n\n\tpublic isFulfilled: boolean;\n\n\t_model:TextModelWithTokens;\n\tprivate _retokenizePromise:TPromise<void>;\n\tprivate _isDisposed: boolean;\n\n\tconstructor(retokenizePromise:TPromise<void>, model:TextModelWithTokens) {\n\t\tthis._retokenizePromise = retokenizePromise;\n\t\tthis._model = model;\n\t\tthis._isDisposed = false;\n\t\tthis.isFulfilled = false;\n\n\t\t// Ensure asynchronicity\n\t\tTPromise.timeout(0).then(() => {\n\t\t\treturn this._retokenizePromise;\n\t\t}).then(() => {\n\t\t\tif (this._isDisposed) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.isFulfilled = true;\n\t\t\tthis._model.onRetokenizerFulfilled();\n\t\t}).done(null, onUnexpectedError);\n\t}\n\n\tpublic getRange(): editorCommon.IRange {\n\t\treturn null;\n\t}\n\n\tpublic dispose(): void {\n\t\tthis._retokenizePromise = null;\n\t\tthis._model = null;\n\t\tthis._isDisposed = true;\n\t}\n}\n\nclass LineContext implements ILineContext {\n\n\tpublic modeTransitions:ModeTransition[];\n\tprivate _text:string;\n\tprivate _lineTokens:editorCommon.ILineTokens;\n\n\tconstructor (topLevelMode:IMode, line:ModelLine) {\n\t\tthis.modeTransitions = line.getModeTransitions(topLevelMode);\n\t\tthis._text = line.text;\n\t\tthis._lineTokens = line.getTokens();\n\t}\n\n\tpublic getLineContent(): string {\n\t\treturn this._text;\n\t}\n\n\tpublic getTokenCount(): number {\n\t\treturn this._lineTokens.getTokenCount();\n\t}\n\n\tpublic getTokenStartIndex(tokenIndex:number): number {\n\t\treturn this._lineTokens.getTokenStartIndex(tokenIndex);\n\t}\n\n\tpublic getTokenEndIndex(tokenIndex:number): number {\n\t\treturn this._lineTokens.getTokenEndIndex(tokenIndex, this._text.length);\n\t}\n\n\tpublic getTokenType(tokenIndex:number): string {\n\t\treturn this._lineTokens.getTokenType(tokenIndex);\n\t}\n\n\tpublic getTokenText(tokenIndex:number): string {\n\t\tvar startIndex = this._lineTokens.getTokenStartIndex(tokenIndex);\n\t\tvar endIndex = this._lineTokens.getTokenEndIndex(tokenIndex, this._text.length);\n\t\treturn this._text.substring(startIndex, endIndex);\n\t}\n\n\tpublic findIndexOfOffset(offset:number): number {\n\t\treturn this._lineTokens.findIndexOfOffset(offset);\n\t}\n}\n\nexport class TextModelWithTokens extends TextModel implements editorCommon.ITokenizedModel {\n\n\tprivate static MODE_TOKENIZATION_FAILED_MSG = nls.localize('mode.tokenizationSupportFailed', \"The mode has failed while tokenizing the input.\");\n\tprivate static MODEL_SYNC_LIMIT = 5 * 1024 * 1024; // 5 MB\n\tprivate static MODEL_TOKENIZATION_LIMIT = 20 * 1024 * 1024; // 20 MB\n\n\tprivate _shouldAutoTokenize:boolean;\n\tprivate _mode: IMode;\n\tprivate _modeListener: IDisposable;\n\tprivate _modeToModelBinder:ModeToModelBinder;\n\tprivate _tokensInflatorMap:editorCommon.ITokensInflatorMap;\n\tprivate _stopLineTokenizationAfter:number;\n\n\tprivate _invalidLineStartIndex:number;\n\tprivate _lastState:IState;\n\n\tprivate _revalidateTokensTimeout:number;\n\tprivate _scheduleRetokenizeNow: RunOnceScheduler;\n\tprivate _retokenizers:IRetokenizeRequest[];\n\n\tprivate _shouldSimplifyMode: boolean;\n\tprivate _shouldDenyMode: boolean;\n\n\tconstructor(allowedEventTypes:string[], rawText:editorCommon.IRawText, shouldAutoTokenize:boolean, modeOrPromise:IMode|TPromise<IMode>) {\n\t\tallowedEventTypes.push(editorCommon.EventType.ModelTokensChanged);\n\t\tallowedEventTypes.push(editorCommon.EventType.ModelModeChanged);\n\t\tallowedEventTypes.push(editorCommon.EventType.ModelModeSupportChanged);\n\t\tsuper(allowedEventTypes, rawText);\n\n\t\tthis._shouldAutoTokenize = shouldAutoTokenize;\n\t\tthis._mode = null;\n\t\tthis._modeListener = null;\n\t\tthis._modeToModelBinder = null;\n\t\tthis._tokensInflatorMap = null;\n\t\tthis._stopLineTokenizationAfter = DefaultConfig.editor.stopLineTokenizationAfter;\n\n\t\tthis._invalidLineStartIndex = 0;\n\t\tthis._lastState = null;\n\n\t\tthis._revalidateTokensTimeout = -1;\n\t\tthis._scheduleRetokenizeNow = null;\n\t\tthis._retokenizers = null;\n\n\t\tthis._shouldSimplifyMode = (rawText.length > TextModelWithTokens.MODEL_SYNC_LIMIT);\n\t\tthis._shouldDenyMode = (rawText.length > TextModelWithTokens.MODEL_TOKENIZATION_LIMIT);\n\n\t\tif (!modeOrPromise) {\n\t\t\tthis._mode = new NullMode();\n\t\t} else if (TPromise.is(modeOrPromise)) {\n\t\t\t// TODO@Alex: To avoid mode id changes, we check if this promise is resolved\n\t\t\tlet promiseValue = <IMode>(<any>modeOrPromise)._value;\n\n\t\t\tif (promiseValue && typeof promiseValue.getId === 'function') {\n\t\t\t\t// The promise is already resolved\n\t\t\t\tthis._mode = this._massageMode(promiseValue);\n\t\t\t\tthis._resetModeListener(this._mode);\n\t\t\t} else {\n\t\t\t\tvar modePromise = <TPromise<IMode>>modeOrPromise;\n\t\t\t\tthis._modeToModelBinder = new ModeToModelBinder(modePromise, this);\n\t\t\t\tthis._mode = new NullMode();\n\t\t\t}\n\t\t} else {\n\t\t\tthis._mode = this._massageMode(<IMode>modeOrPromise);\n\t\t\tthis._resetModeListener(this._mode);\n\t\t}\n\n\t\tthis._revalidateTokensTimeout = -1;\n\t\tthis._scheduleRetokenizeNow = new RunOnceScheduler(() => this._retokenizeNow(), 200);\n\t\tthis._retokenizers = [];\n\n\t\tthis._resetTokenizationState();\n\t}\n\n\tpublic dispose(): void {\n\t\tif (this._modeToModelBinder) {\n\t\t\tthis._modeToModelBinder.dispose();\n\t\t\tthis._modeToModelBinder = null;\n\t\t}\n\t\tthis._resetModeListener(null);\n\t\tthis._clearTimers();\n\t\tthis._mode = null;\n\t\tthis._lastState = null;\n\t\tthis._tokensInflatorMap = null;\n\t\tthis._retokenizers = dispose(this._retokenizers);\n\t\tthis._scheduleRetokenizeNow.dispose();\n\n\t\tsuper.dispose();\n\t}\n\n\tpublic isTooLargeForHavingAMode(): boolean {\n\t\treturn this._shouldDenyMode;\n\t}\n\n\tpublic isTooLargeForHavingARichMode(): boolean {\n\t\treturn this._shouldSimplifyMode;\n\t}\n\n\tprivate _massageMode(mode: IMode): IMode {\n\t\tif (this.isTooLargeForHavingAMode()) {\n\t\t\treturn new NullMode();\n\t\t}\n\t\tif (this.isTooLargeForHavingARichMode()) {\n\t\t\treturn mode.toSimplifiedMode();\n\t\t}\n\t\treturn mode;\n\t}\n\n\tpublic whenModeIsReady(): TPromise<IMode> {\n\t\tif (this._modeToModelBinder) {\n\t\t\t// Still waiting for some mode to load\n\t\t\treturn this._modeToModelBinder.getModePromise().then(() => this._mode);\n\t\t}\n\t\treturn TPromise.as(this._mode);\n\t}\n\n\tpublic onRetokenizerFulfilled(): void {\n\t\tthis._scheduleRetokenizeNow.schedule();\n\t}\n\n\tprivate _retokenizeNow(): void {\n\t\tvar fulfilled = this._retokenizers.filter(r => r.isFulfilled);\n\t\tthis._retokenizers = this._retokenizers.filter(r => !r.isFulfilled);\n\n\t\tvar hasFullModel = false;\n\t\tfor (var i = 0; i < fulfilled.length; i++) {\n\t\t\tif (!fulfilled[i].getRange()) {\n\t\t\t\thasFullModel = true;\n\t\t\t}\n\t\t}\n\n\t\tif (hasFullModel) {\n\t\t\t// Just invalidate all the lines\n\t\t\tfor (var i = 0, len = this._lines.length; i < len; i++) {\n\t\t\t\tthis._lines[i].isInvalid = true;\n\t\t\t}\n\t\t\tthis._invalidLineStartIndex = 0;\n\t\t} else {\n\t\t\tvar minLineNumber = Number.MAX_VALUE;\n\t\t\tfor (var i = 0; i < fulfilled.length; i++) {\n\t\t\t\tvar range = fulfilled[i].getRange();\n\t\t\t\tminLineNumber = Math.min(minLineNumber, range.startLineNumber);\n\t\t\t\tfor (var lineNumber = range.startLineNumber; lineNumber <= range.endLineNumber; lineNumber++) {\n\t\t\t\t\tthis._lines[lineNumber - 1].isInvalid = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (minLineNumber - 1 < this._invalidLineStartIndex) {\n\t\t\t\tif (this._invalidLineStartIndex < this._lines.length) {\n\t\t\t\t\tthis._lines[this._invalidLineStartIndex].isInvalid = true;\n\t\t\t\t}\n\t\t\t\tthis._invalidLineStartIndex = minLineNumber - 1;\n\t\t\t}\n\t\t}\n\n\t\tthis._beginBackgroundTokenization();\n\n\t\tfor (var i = 0; i < fulfilled.length; i++) {\n\t\t\tfulfilled[i].dispose();\n\t\t}\n\t}\n\n\t_createRetokenizer(retokenizePromise:TPromise<void>, lineNumber:number): IRetokenizeRequest {\n\t\treturn new FullModelRetokenizer(retokenizePromise, this);\n\t}\n\n\t_resetValue(e:editorCommon.IModelContentChangedFlushEvent, newValue:editorCommon.IRawText): void {\n\t\tsuper._resetValue(e, newValue);\n\t\t// Cancel tokenization, clear all tokens and begin tokenizing\n\t\tthis._resetTokenizationState();\n\t}\n\n\t_resetMode(e:editorCommon.IModelModeChangedEvent, newMode:IMode): void {\n\t\t// Cancel tokenization, clear all tokens and begin tokenizing\n\t\tthis._mode = newMode;\n\t\tthis._resetModeListener(newMode);\n\t\tthis._resetTokenizationState();\n\n\t\tthis.emitModelTokensChangedEvent(1, this.getLineCount());\n\t}\n\n\tprivate _resetModeListener(newMode: IMode): void {\n\t\tif (this._modeListener) {\n\t\t\tthis._modeListener.dispose();\n\t\t\tthis._modeListener = null;\n\t\t}\n\t\tif (newMode && typeof newMode.addSupportChangedListener === 'function') {\n\t\t\tthis._modeListener = newMode.addSupportChangedListener( (e) => this._onModeSupportChanged(e) );\n\t\t}\n\t}\n\n\tprivate _onModeSupportChanged(e: editorCommon.IModeSupportChangedEvent): void {\n\t\tthis._emitModelModeSupportChangedEvent(e);\n\t\tif (e.tokenizationSupport) {\n\t\t\tthis._resetTokenizationState();\n\t\t\tthis.emitModelTokensChangedEvent(1, this.getLineCount());\n\t\t}\n\t}\n\n\t_resetTokenizationState(): void {\n\t\tthis._retokenizers = dispose(this._retokenizers);\n\t\tthis._scheduleRetokenizeNow.cancel();\n\t\tthis._clearTimers();\n\t\tfor (var i = 0; i < this._lines.length; i++) {\n\t\t\tthis._lines[i].setState(null);\n\t\t}\n\t\tthis._initializeTokenizationState();\n\t}\n\n\tprivate _clearTimers(): void {\n\t\tif (this._revalidateTokensTimeout !== -1) {\n\t\t\tclearTimeout(this._revalidateTokensTimeout);\n\t\t\tthis._revalidateTokensTimeout = -1;\n\t\t}\n\t}\n\n\tprivate _initializeTokenizationState(): void {\n\t\t// Initialize tokenization states\n\t\tvar initialState:IState = null;\n\t\tif (this._mode.tokenizationSupport) {\n\t\t\ttry {\n\t\t\t\tinitialState = this._mode.tokenizationSupport.getInitialState();\n\t\t\t} catch (e) {\n\t\t\t\te.friendlyMessage = TextModelWithTokens.MODE_TOKENIZATION_FAILED_MSG;\n\t\t\t\tonUnexpectedError(e);\n\t\t\t\tthis._mode = new NullMode();\n\t\t\t}\n\t\t}\n\t\tif (!initialState) {\n\t\t\tinitialState = new NullState(this._mode, null);\n\t\t}\n\n\t\tthis._lines[0].setState(initialState);\n\t\tthis._lastState = null;\n\t\tthis._tokensInflatorMap = new TokensInflatorMap();\n\t\tthis._invalidLineStartIndex = 0;\n\t\tthis._beginBackgroundTokenization();\n\t}\n\n\tpublic setStopLineTokenizationAfter(stopLineTokenizationAfter:number): void {\n\t\tthis._stopLineTokenizationAfter = stopLineTokenizationAfter;\n\t}\n\n\tpublic getLineTokens(lineNumber:number, inaccurateTokensAcceptable:boolean = false): editorCommon.ILineTokens {\n\t\tif (lineNumber < 1 || lineNumber > this.getLineCount()) {\n\t\t\tthrow new Error('Illegal value ' + lineNumber + ' for `lineNumber`');\n\t\t}\n\n\t\tif (!inaccurateTokensAcceptable) {\n\t\t\tthis._updateTokensUntilLine(lineNumber, true);\n\t\t}\n\t\treturn this._lines[lineNumber - 1].getTokens();\n\t}\n\n\tpublic getLineContext(lineNumber:number): ILineContext {\n\t\tif (lineNumber < 1 || lineNumber > this.getLineCount()) {\n\t\t\tthrow new Error('Illegal value ' + lineNumber + ' for `lineNumber`');\n\t\t}\n\n\t\tthis._updateTokensUntilLine(lineNumber, true);\n\n\t\treturn new LineContext(this._mode, this._lines[lineNumber - 1]);\n\t}\n\n\t_getInternalTokens(lineNumber:number): editorCommon.ILineTokens {\n\t\tthis._updateTokensUntilLine(lineNumber, true);\n\t\treturn this._lines[lineNumber - 1].getTokens();\n\t}\n\n\tpublic setValue(value:string, newMode?:IMode): void;\n\tpublic setValue(value:string, newModePromise?:TPromise<IMode>): void;\n\tpublic setValue(value:string, newModeOrPromise:any=null): void {\n\t\tlet rawText: editorCommon.IRawText = null;\n\t\tif (value !== null) {\n\t\t\trawText = TextModel.toRawText(value, {\n\t\t\t\ttabSize: this._options.tabSize,\n\t\t\t\tinsertSpaces: this._options.insertSpaces,\n\t\t\t\tdetectIndentation: false,\n\t\t\t\tdefaultEOL: this._options.defaultEOL\n\t\t\t});\n\t\t}\n\t\tthis.setValueFromRawText(rawText, newModeOrPromise);\n\t}\n\n\tpublic setValueFromRawText(value:editorCommon.IRawText, newMode?:IMode): void;\n\tpublic setValueFromRawText(value:editorCommon.IRawText, newModePromise?:TPromise<IMode>): void;\n\tpublic setValueFromRawText(value:editorCommon.IRawText, newModeOrPromise:any=null): void {\n\t\tif (value !== null) {\n\t\t\tsuper.setValueFromRawText(value);\n\t\t}\n\n\t\tif (newModeOrPromise) {\n\t\t\tif (this._modeToModelBinder) {\n\t\t\t\tthis._modeToModelBinder.dispose();\n\t\t\t\tthis._modeToModelBinder = null;\n\t\t\t}\n\t\t\tif (TPromise.is(newModeOrPromise)) {\n\t\t\t\tthis._modeToModelBinder = new ModeToModelBinder(<TPromise<IMode>>newModeOrPromise, this);\n\t\t\t} else {\n\t\t\t\tvar actualNewMode = this._massageMode(<IMode>newModeOrPromise);\n\t\t\t\tif (this._mode !== actualNewMode) {\n\t\t\t\t\tvar e2:editorCommon.IModelModeChangedEvent = {\n\t\t\t\t\t\toldMode: this._mode,\n\t\t\t\t\t\tnewMode: actualNewMode\n\t\t\t\t\t};\n\t\t\t\t\tthis._resetMode(e2, actualNewMode);\n\t\t\t\t\tthis._emitModelModeChangedEvent(e2);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic getMode(): IMode {\n\t\treturn this._mode;\n\t}\n\n\tpublic setMode(newMode:IMode): void;\n\tpublic setMode(newModePromise:TPromise<IMode>): void;\n\tpublic setMode(newModeOrPromise:any): void {\n\t\tif (!newModeOrPromise) {\n\t\t\t// There's nothing to do\n\t\t\treturn;\n\t\t}\n\t\tthis.setValueFromRawText(null, newModeOrPromise);\n\t}\n\n\tpublic getModeAtPosition(_lineNumber:number, _column:number): IMode {\n\t\tvar validPosition = this.validatePosition({\n\t\t\tlineNumber: _lineNumber,\n\t\t\tcolumn: _column\n\t\t});\n\n\t\tvar lineNumber = validPosition.lineNumber;\n\t\tvar column = validPosition.column;\n\n\t\tif (column === 1) {\n\t\t\treturn this.getStateBeforeLine(lineNumber).getMode();\n\t\t} else if (column === this.getLineMaxColumn(lineNumber)) {\n\t\t\treturn this.getStateAfterLine(lineNumber).getMode();\n\t\t} else {\n\t\t\tvar modeTransitions = this._getLineModeTransitions(lineNumber);\n\t\t\tvar modeTransitionIndex = ModeTransition.findIndexInSegmentsArray(modeTransitions, column - 1);\n\t\t\treturn modeTransitions[modeTransitionIndex].mode;\n\t\t}\n\t}\n\n\t_invalidateLine(lineIndex:number): void {\n\t\tthis._lines[lineIndex].isInvalid = true;\n\t\tif (lineIndex < this._invalidLineStartIndex) {\n\t\t\tif (this._invalidLineStartIndex < this._lines.length) {\n\t\t\t\tthis._lines[this._invalidLineStartIndex].isInvalid = true;\n\t\t\t}\n\t\t\tthis._invalidLineStartIndex = lineIndex;\n\t\t\tthis._beginBackgroundTokenization();\n\t\t}\n\t}\n\n\tprivate static _toLineTokens(tokens:IToken[]): editorCommon.LineToken[] {\n\t\tif (!tokens || tokens.length === 0) {\n\t\t\treturn [];\n\t\t}\n\t\tif (tokens[0] instanceof editorCommon.LineToken) {\n\t\t\treturn <editorCommon.LineToken[]>tokens;\n\t\t}\n\t\tlet result:editorCommon.LineToken[] = [];\n\t\tfor (let i = 0, len = tokens.length; i < len; i++) {\n\t\t\tresult[i] = new editorCommon.LineToken(tokens[i].startIndex, tokens[i].type);\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate static _toModeTransitions(modeTransitions:IModeTransition[]): ModeTransition[] {\n\t\tif (!modeTransitions || modeTransitions.length === 0) {\n\t\t\treturn [];\n\t\t}\n\t\tif (modeTransitions[0] instanceof ModeTransition) {\n\t\t\treturn <ModeTransition[]>modeTransitions;\n\t\t}\n\t\tlet result:ModeTransition[] = [];\n\t\tfor (let i = 0, len = modeTransitions.length; i < len; i++) {\n\t\t\tresult[i] = new ModeTransition(modeTransitions[i].startIndex, modeTransitions[i].mode);\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate _updateLineTokens(lineIndex:number, map:editorCommon.ITokensInflatorMap, topLevelMode:IMode, r:ILineTokens): void {\n\t\tthis._lines[lineIndex].setTokens(map, TextModelWithTokens._toLineTokens(r.tokens), topLevelMode, TextModelWithTokens._toModeTransitions(r.modeTransitions));\n\t}\n\n\tprivate _beginBackgroundTokenization(): void {\n\t\tif (this._shouldAutoTokenize && this._revalidateTokensTimeout === -1) {\n\t\t\tthis._revalidateTokensTimeout = setTimeout(() => {\n\t\t\t\tthis._revalidateTokensTimeout = -1;\n\t\t\t\tthis._revalidateTokensNow();\n\t\t\t}, 0);\n\t\t}\n\t}\n\n\t_warmUpTokens(): void {\n\t\t// Warm up first 100 lines (if it takes less than 50ms)\n\t\tvar maxLineNumber = Math.min(100, this.getLineCount());\n\t\tvar toLineNumber = maxLineNumber;\n\t\tfor (var lineNumber = 1; lineNumber <= maxLineNumber; lineNumber++) {\n\t\t\tvar text = this._lines[lineNumber - 1].text;\n\t\t\tif (text.length >= 200) {\n\t\t\t\t// This line is over 200 chars long, so warm up without it\n\t\t\t\ttoLineNumber = lineNumber - 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tthis._revalidateTokensNow(toLineNumber);\n\t}\n\n\tprivate _revalidateTokensNow(toLineNumber:number = this._invalidLineStartIndex + 1000000): void {\n\n\t\tvar t1 = timer.start(timer.Topic.EDITOR, 'backgroundTokenization');\n\t\ttoLineNumber = Math.min(this._lines.length, toLineNumber);\n\n\t\tvar MAX_ALLOWED_TIME = 20,\n\t\t\tfromLineNumber = this._invalidLineStartIndex + 1,\n\t\t\ttokenizedChars = 0,\n\t\t\tcurrentCharsToTokenize = 0,\n\t\t\tcurrentEstimatedTimeToTokenize = 0,\n\t\t\tstopLineTokenizationAfter = this._stopLineTokenizationAfter,\n\t\t\tsw = StopWatch.create(false),\n\t\t\telapsedTime: number;\n\n\t\t// Tokenize at most 1000 lines. Estimate the tokenization speed per character and stop when:\n\t\t// - MAX_ALLOWED_TIME is reached\n\t\t// - tokenizing the next line would go above MAX_ALLOWED_TIME\n\n\t\tfor (var lineNumber = fromLineNumber; lineNumber <= toLineNumber; lineNumber++) {\n\t\t\telapsedTime = sw.elapsed();\n\t\t\tif (elapsedTime > MAX_ALLOWED_TIME) {\n\t\t\t\t// Stop if MAX_ALLOWED_TIME is reached\n\t\t\t\ttoLineNumber = lineNumber - 1;\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// Compute how many characters will be tokenized for this line\n\t\t\tcurrentCharsToTokenize = this._lines[lineNumber - 1].text.length;\n\t\t\tif (stopLineTokenizationAfter !== -1 && currentCharsToTokenize > stopLineTokenizationAfter) {\n\t\t\t\tcurrentCharsToTokenize = stopLineTokenizationAfter;\n\t\t\t}\n\n\t\t\tif (tokenizedChars > 0) {\n\t\t\t\t// If we have enough history, estimate how long tokenizing this line would take\n\t\t\t\tcurrentEstimatedTimeToTokenize = (elapsedTime / tokenizedChars) * currentCharsToTokenize;\n\t\t\t\tif (elapsedTime + currentEstimatedTimeToTokenize > MAX_ALLOWED_TIME) {\n\t\t\t\t\t// Tokenizing this line will go above MAX_ALLOWED_TIME\n\t\t\t\t\ttoLineNumber = lineNumber - 1;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis._updateTokensUntilLine(lineNumber, false);\n\t\t\ttokenizedChars += currentCharsToTokenize;\n\t\t}\n\n\t\telapsedTime = sw.elapsed();\n\n\t\tif (fromLineNumber <= toLineNumber) {\n\t\t\tthis.emitModelTokensChangedEvent(fromLineNumber, toLineNumber);\n\t\t}\n\n\t\tif (this._invalidLineStartIndex < this._lines.length) {\n\t\t\tthis._beginBackgroundTokenization();\n\t\t}\n\n\t\tt1.stop();\n\t}\n\n\tprivate getStateBeforeLine(lineNumber:number): IState {\n\t\tthis._updateTokensUntilLine(lineNumber - 1, true);\n\t\treturn this._lines[lineNumber - 1].getState();\n\t}\n\n\tprivate getStateAfterLine(lineNumber:number): IState {\n\t\tthis._updateTokensUntilLine(lineNumber, true);\n\t\treturn lineNumber < this._lines.length ? this._lines[lineNumber].getState() : this._lastState;\n\t}\n\n\t_getLineModeTransitions(lineNumber:number): ModeTransition[] {\n\t\tif (lineNumber < 1 || lineNumber > this.getLineCount()) {\n\t\t\tthrow new Error('Illegal value ' + lineNumber + ' for `lineNumber`');\n\t\t}\n\t\tthis._updateTokensUntilLine(lineNumber, true);\n\t\treturn this._lines[lineNumber - 1].getModeTransitions(this._mode);\n\t}\n\n\tprivate _updateTokensUntilLine(lineNumber:number, emitEvents:boolean): void {\n\t\tvar linesLength = this._lines.length;\n\t\tvar endLineIndex = lineNumber - 1;\n\t\tvar stopLineTokenizationAfter = this._stopLineTokenizationAfter;\n\t\tif (stopLineTokenizationAfter === -1) {\n\t\t\tstopLineTokenizationAfter = 1000000000; // 1 billion, if a line is so long, you have other trouble :).\n\t\t}\n\n\t\tvar fromLineNumber = this._invalidLineStartIndex + 1, toLineNumber = lineNumber;\n\n\t\t// Validate all states up to and including endLineIndex\n\t\tfor (var lineIndex = this._invalidLineStartIndex; lineIndex <= endLineIndex; lineIndex++) {\n\t\t\tvar endStateIndex = lineIndex + 1;\n\t\t\tvar r:ILineTokens = null;\n\t\t\tvar text = this._lines[lineIndex].text;\n\t\t\tif (this._mode.tokenizationSupport) {\n\n\t\t\t\ttry {\n\t\t\t\t\t// Tokenize only the first X characters\n\t\t\t\t\tr = this._mode.tokenizationSupport.tokenize(this._lines[lineIndex].text, this._lines[lineIndex].getState(), 0, stopLineTokenizationAfter);\n\t\t\t\t} catch (e) {\n\t\t\t\t\te.friendlyMessage = TextModelWithTokens.MODE_TOKENIZATION_FAILED_MSG;\n\t\t\t\t\tonUnexpectedError(e);\n\t\t\t\t}\n\n\t\t\t\tif (r && r.retokenize) {\n\t\t\t\t\tthis._retokenizers.push(this._createRetokenizer(r.retokenize, lineIndex + 1));\n\t\t\t\t}\n\n\t\t\t\tif (r && r.tokens && r.tokens.length > 0) {\n\t\t\t\t\t// Cannot have a stop offset before the last token\n\t\t\t\t\tr.actualStopOffset = Math.max(r.actualStopOffset, r.tokens[r.tokens.length - 1].startIndex + 1);\n\t\t\t\t}\n\n\t\t\t\tif (r && r.actualStopOffset < text.length) {\n\t\t\t\t\t// Treat the rest of the line (if above limit) as one default token\n\t\t\t\t\tr.tokens.push({\n\t\t\t\t\t\tstartIndex: r.actualStopOffset,\n\t\t\t\t\t\ttype: ''\n\t\t\t\t\t});\n\n\t\t\t\t\t// Use as end state the starting state\n\t\t\t\t\tr.endState = this._lines[lineIndex].getState();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!r) {\n\t\t\t\tr = nullTokenize(this._mode, text, this._lines[lineIndex].getState());\n\t\t\t}\n\t\t\tif (!r.modeTransitions) {\n\t\t\t\tr.modeTransitions = [];\n\t\t\t}\n\t\t\tif (r.modeTransitions.length === 0) {\n\t\t\t\t// Make sure there is at least the transition to the top-most mode\n\t\t\t\tr.modeTransitions.push({\n\t\t\t\t\tstartIndex: 0,\n\t\t\t\t\tmode: this._mode\n\t\t\t\t});\n\t\t\t}\n\t\t\tthis._updateLineTokens(lineIndex, this._tokensInflatorMap, this._mode, r);\n\n\t\t\tif (this._lines[lineIndex].isInvalid) {\n\t\t\t\tthis._lines[lineIndex].isInvalid = false;\n\t\t\t}\n\n\t\t\tif (endStateIndex < linesLength) {\n\t\t\t\tif (this._lines[endStateIndex].getState() !== null && r.endState.equals(this._lines[endStateIndex].getState())) {\n\t\t\t\t\t// The end state of this line remains the same\n\t\t\t\t\tvar nextInvalidLineIndex = lineIndex + 1;\n\t\t\t\t\twhile (nextInvalidLineIndex < linesLength) {\n\t\t\t\t\t\tif (this._lines[nextInvalidLineIndex].isInvalid) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (nextInvalidLineIndex + 1 < linesLength) {\n\t\t\t\t\t\t\tif (this._lines[nextInvalidLineIndex + 1].getState() === null) {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (this._lastState === null) {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tnextInvalidLineIndex++;\n\t\t\t\t\t}\n\t\t\t\t\tthis._invalidLineStartIndex = Math.max(this._invalidLineStartIndex, nextInvalidLineIndex);\n\t\t\t\t\tlineIndex = nextInvalidLineIndex - 1; // -1 because the outer loop increments it\n\t\t\t\t} else {\n\t\t\t\t\tthis._lines[endStateIndex].setState(r.endState);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._lastState = r.endState;\n\t\t\t}\n\t\t}\n\t\tthis._invalidLineStartIndex = Math.max(this._invalidLineStartIndex, endLineIndex + 1);\n\n\t\tif (emitEvents && fromLineNumber <= toLineNumber) {\n\t\t\tthis.emitModelTokensChangedEvent(fromLineNumber, toLineNumber);\n\t\t}\n\t}\n\n\tprivate emitModelTokensChangedEvent(fromLineNumber:number, toLineNumber:number): void {\n\t\tvar e:editorCommon.IModelTokensChangedEvent = {\n\t\t\tfromLineNumber: fromLineNumber,\n\t\t\ttoLineNumber: toLineNumber\n\t\t};\n\t\tif (!this._isDisposing) {\n\t\t\tthis.emit(editorCommon.EventType.ModelTokensChanged, e);\n\t\t}\n\t}\n\n\tprivate _emitModelModeChangedEvent(e:editorCommon.IModelModeChangedEvent): void {\n\t\tif (!this._isDisposing) {\n\t\t\tthis.emit(editorCommon.EventType.ModelModeChanged, e);\n\t\t}\n\t}\n\n\tprivate _emitModelModeSupportChangedEvent(e:editorCommon.IModeSupportChangedEvent): void {\n\t\tif (!this._isDisposing) {\n\t\t\tthis.emit(editorCommon.EventType.ModelModeSupportChanged, e);\n\t\t}\n\t}\n\n\t// Having tokens allows implementing additional helper methods\n\n\t_lineIsTokenized(lineNumber:number): boolean {\n\t\treturn this._invalidLineStartIndex > lineNumber - 1;\n\t}\n\n\t_getWordDefinition(): RegExp {\n\t\treturn WordHelper.massageWordDefinitionOf(this._mode);\n\t}\n\n\tpublic getWordAtPosition(position:editorCommon.IPosition): editorCommon.IWordAtPosition {\n\t\treturn WordHelper.getWordAtPosition(this, this.validatePosition(position));\n\t}\n\n\tpublic getWordUntilPosition(position: editorCommon.IPosition): editorCommon.IWordAtPosition {\n\t\tvar wordAtPosition = this.getWordAtPosition(position);\n\t\tif (!wordAtPosition) {\n\t\t\treturn {\n\t\t\t\tword: '',\n\t\t\t\tstartColumn: position.column,\n\t\t\t\tendColumn: position.column\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\tword: wordAtPosition.word.substr(0, position.column - wordAtPosition.startColumn),\n\t\t\tstartColumn: wordAtPosition.startColumn,\n\t\t\tendColumn: position.column\n\t\t};\n\t}\n\n\tpublic getWords(lineNumber:number): editorCommon.IWordRange[] {\n\t\tif (lineNumber < 1 || lineNumber > this.getLineCount()) {\n\t\t\tthrow new Error('Illegal value ' + lineNumber + ' for `lineNumber`');\n\t\t}\n\n\t\treturn WordHelper.getWords(this, this.validateLineNumber(lineNumber));\n\t}\n\n\tpublic tokenIterator(position:editorCommon.IPosition, callback:(it:TokenIterator)=>any): any {\n\t\tvar iter = new TokenIterator(this, this.validatePosition(position));\n\t\tvar result = callback(iter);\n\t\titer._invalidate();\n\t\treturn result;\n\t}\n\n\tpublic findMatchingBracketUp(bracket:string, _position:editorCommon.IPosition): editorCommon.IEditorRange {\n\t\tlet position = this.validatePosition(_position);\n\t\tlet modeTransitions = this._lines[position.lineNumber - 1].getModeTransitions(this._mode);\n\t\tlet currentModeIndex = ModeTransition.findIndexInSegmentsArray(modeTransitions, position.column - 1);\n\t\tlet currentMode = modeTransitions[currentModeIndex];\n\t\tlet currentModeBrackets = currentMode.mode.richEditSupport ? currentMode.mode.richEditSupport.brackets : null;\n\n\t\tif (!currentModeBrackets) {\n\t\t\treturn null;\n\t\t}\n\n\t\tlet data = currentModeBrackets.textIsBracket[bracket];\n\n\t\tif (!data) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn this._findMatchingBracketUp(data, position);\n\t}\n\n\tpublic matchBracket(position:editorCommon.IPosition, inaccurateResultAcceptable:boolean = false): editorCommon.IMatchBracketResult {\n\t\treturn this._matchBracket(this.validatePosition(position));\n\t}\n\n\tprivate _matchBracket(position:editorCommon.IEditorPosition): editorCommon.IMatchBracketResult {\n\t\tlet tokensMap = this._tokensInflatorMap;\n\t\tlet lineNumber = position.lineNumber;\n\t\tlet lineText = this._lines[lineNumber - 1].text;\n\n\t\tlet lineTokens = this._lines[lineNumber - 1].getTokens();\n\t\tlet tokens = lineTokens.getBinaryEncodedTokens();\n\t\tlet currentTokenIndex = lineTokens.findIndexOfOffset(position.column - 1);\n\t\tlet currentTokenStart = getStartIndex(tokens[currentTokenIndex]);\n\n\t\tlet modeTransitions = this._lines[lineNumber - 1].getModeTransitions(this._mode);\n\t\tlet currentModeIndex = ModeTransition.findIndexInSegmentsArray(modeTransitions, position.column - 1);\n\t\tlet currentMode = modeTransitions[currentModeIndex];\n\t\tlet currentModeBrackets = currentMode.mode.richEditSupport ? currentMode.mode.richEditSupport.brackets : null;\n\n\t\t// If position is in between two tokens, try first looking in the previous token\n\t\tif (currentTokenIndex > 0 && currentTokenStart === position.column - 1) {\n\t\t\tlet prevTokenIndex = currentTokenIndex - 1;\n\t\t\tlet prevTokenType = getType(tokensMap, tokens[prevTokenIndex]);\n\n\t\t\t// check that previous token is not to be ignored\n\t\t\tif (!ignoreBracketsInToken(prevTokenType)) {\n\t\t\t\tlet prevTokenStart = getStartIndex(tokens[prevTokenIndex]);\n\n\t\t\t\tlet prevMode = currentMode;\n\t\t\t\tlet prevModeBrackets = currentModeBrackets;\n\t\t\t\t// check if previous token is in a different mode\n\t\t\t\tif (currentModeIndex > 0 && currentMode.startIndex === position.column - 1) {\n\t\t\t\t\tprevMode = modeTransitions[currentModeIndex - 1];\n\t\t\t\t\tprevModeBrackets = prevMode.mode.richEditSupport ? prevMode.mode.richEditSupport.brackets : null;\n\t\t\t\t}\n\n\t\t\t\tif (prevModeBrackets) {\n\t\t\t\t\t// limit search in case previous token is very large, there's no need to go beyond `maxBracketLength`\n\t\t\t\t\tprevTokenStart = Math.max(prevTokenStart, position.column - 1 - prevModeBrackets.maxBracketLength);\n\n\t\t\t\t\tlet foundBracket = BracketsUtils.findPrevBracketInToken(prevModeBrackets.reversedRegex, lineNumber, lineText, prevTokenStart, currentTokenStart);\n\n\t\t\t\t\t// check that we didn't hit a bracket too far away from position\n\t\t\t\t\tif (foundBracket && foundBracket.startColumn <= position.column && position.column <= foundBracket.endColumn) {\n\t\t\t\t\t\tlet foundBracketText = lineText.substring(foundBracket.startColumn - 1, foundBracket.endColumn - 1);\n\t\t\t\t\t\tlet r = this._matchFoundBracket(foundBracket, prevModeBrackets.textIsBracket[foundBracketText], prevModeBrackets.textIsOpenBracket[foundBracketText]);\n\n\t\t\t\t\t\t// check that we can actually match this bracket\n\t\t\t\t\t\tif (r) {\n\t\t\t\t\t\t\treturn r;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// check that the token is not to be ignored\n\t\tif (!ignoreBracketsInToken(getType(tokensMap, tokens[currentTokenIndex]))) {\n\n\t\t\tif (currentModeBrackets) {\n\t\t\t\t// limit search to not go before `maxBracketLength`\n\t\t\t\tcurrentTokenStart = Math.max(currentTokenStart, position.column - 1 - currentModeBrackets.maxBracketLength);\n\n\t\t\t\t// limit search to not go after `maxBracketLength`\n\t\t\t\tlet currentTokenEnd = (currentTokenIndex + 1 < tokens.length ? getStartIndex(tokens[currentTokenIndex + 1]) : lineText.length);\n\t\t\t\tcurrentTokenEnd = Math.min(currentTokenEnd, position.column - 1 + currentModeBrackets.maxBracketLength);\n\n\t\t\t\t// it might still be the case that [currentTokenStart -> currentTokenEnd] contains multiple brackets\n\t\t\t\twhile(true) {\n\t\t\t\t\tlet foundBracket = BracketsUtils.findNextBracketInText(currentModeBrackets.forwardRegex, lineNumber, lineText.substring(currentTokenStart, currentTokenEnd), currentTokenStart);\n\t\t\t\t\tif (!foundBracket) {\n\t\t\t\t\t\t// there are no brackets in this text\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\t// check that we didn't hit a bracket too far away from position\n\t\t\t\t\tif (foundBracket.startColumn <= position.column && position.column <= foundBracket.endColumn) {\n\t\t\t\t\t\tlet foundBracketText = lineText.substring(foundBracket.startColumn - 1, foundBracket.endColumn - 1);\n\t\t\t\t\t\tlet r = this._matchFoundBracket(foundBracket, currentModeBrackets.textIsBracket[foundBracketText], currentModeBrackets.textIsOpenBracket[foundBracketText]);\n\n\t\t\t\t\t\t// check that we can actually match this bracket\n\t\t\t\t\t\tif (r) {\n\t\t\t\t\t\t\treturn r;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tcurrentTokenStart = foundBracket.endColumn - 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tbrackets: null,\n\t\t\tisAccurate: true\n\t\t};\n\t}\n\n\tprivate _matchFoundBracket(foundBracket:Range, data:editorCommon.IRichEditBracket, isOpen:boolean): editorCommon.IMatchBracketResult {\n\t\tif (isOpen) {\n\t\t\tlet matched = this._findMatchingBracketDown(data, foundBracket.getEndPosition());\n\t\t\tif (matched) {\n\t\t\t\treturn {\n\t\t\t\t\tbrackets: [foundBracket, matched],\n\t\t\t\t\tisAccurate: true\n\t\t\t\t};\n\t\t\t}\n\t\t} else {\n\t\t\tlet matched = this._findMatchingBracketUp(data, foundBracket.getStartPosition());\n\t\t\tif (matched) {\n\t\t\t\treturn {\n\t\t\t\t\tbrackets: [foundBracket, matched],\n\t\t\t\t\tisAccurate: true\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tprivate _findMatchingBracketUp(bracket:editorCommon.IRichEditBracket, position:editorCommon.IEditorPosition): Range {\n\t\t// console.log('_findMatchingBracketUp: ', 'bracket: ', JSON.stringify(bracket), 'startPosition: ', String(position));\n\n\t\tlet modeId = bracket.modeId;\n\t\tlet tokensMap = this._tokensInflatorMap;\n\t\tlet reversedBracketRegex = bracket.reversedRegex;\n\t\tlet count = -1;\n\n\t\tfor (let lineNumber = position.lineNumber; lineNumber >= 1; lineNumber--) {\n\t\t\tlet lineTokens = this._lines[lineNumber - 1].getTokens();\n\t\t\tlet lineText = this._lines[lineNumber - 1].text;\n\t\t\tlet tokens = lineTokens.getBinaryEncodedTokens();\n\t\t\tlet modeTransitions = this._lines[lineNumber - 1].getModeTransitions(this._mode);\n\t\t\tlet currentModeIndex = modeTransitions.length - 1;\n\t\t\tlet currentModeStart = modeTransitions[currentModeIndex].startIndex;\n\t\t\tlet currentModeId = modeTransitions[currentModeIndex].mode.getId();\n\n\t\t\tlet tokensLength = tokens.length - 1;\n\t\t\tlet currentTokenEnd = lineText.length;\n\t\t\tif (lineNumber === position.lineNumber) {\n\t\t\t\ttokensLength = lineTokens.findIndexOfOffset(position.column - 1);\n\t\t\t\tcurrentTokenEnd = position.column - 1;\n\n\t\t\t\tcurrentModeIndex = ModeTransition.findIndexInSegmentsArray(modeTransitions, position.column - 1);\n\t\t\t\tcurrentModeStart = modeTransitions[currentModeIndex].startIndex;\n\t\t\t\tcurrentModeId = modeTransitions[currentModeIndex].mode.getId();\n\t\t\t}\n\n\t\t\tfor (let tokenIndex = tokensLength; tokenIndex >= 0; tokenIndex--) {\n\t\t\t\tlet currentToken = tokens[tokenIndex];\n\t\t\t\tlet currentTokenType = getType(tokensMap, currentToken);\n\t\t\t\tlet currentTokenStart = getStartIndex(currentToken);\n\n\t\t\t\tif (currentTokenStart < currentModeStart) {\n\t\t\t\t\tcurrentModeIndex--;\n\t\t\t\t\tcurrentModeStart = modeTransitions[currentModeIndex].startIndex;\n\t\t\t\t\tcurrentModeId = modeTransitions[currentModeIndex].mode.getId();\n\t\t\t\t}\n\n\t\t\t\tif (currentModeId === modeId && !ignoreBracketsInToken(currentTokenType)) {\n\n\t\t\t\t\twhile (true) {\n\t\t\t\t\t\tlet r = BracketsUtils.findPrevBracketInToken(reversedBracketRegex, lineNumber, lineText, currentTokenStart, currentTokenEnd);\n\t\t\t\t\t\tif (!r) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tlet hitText = lineText.substring(r.startColumn - 1, r.endColumn - 1);\n\n\t\t\t\t\t\tif (hitText === bracket.open) {\n\t\t\t\t\t\t\tcount++;\n\t\t\t\t\t\t} else if (hitText === bracket.close) {\n\t\t\t\t\t\t\tcount--;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (count === 0) {\n\t\t\t\t\t\t\treturn r;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcurrentTokenEnd = r.startColumn - 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tcurrentTokenEnd = currentTokenStart;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tprivate _findMatchingBracketDown(bracket:editorCommon.IRichEditBracket, position:editorCommon.IEditorPosition): Range {\n\t\t// console.log('_findMatchingBracketDown: ', 'bracket: ', JSON.stringify(bracket), 'startPosition: ', String(position));\n\n\t\tlet modeId = bracket.modeId;\n\t\tlet tokensMap = this._tokensInflatorMap;\n\t\tlet bracketRegex = bracket.forwardRegex;\n\t\tlet count = 1;\n\n\t\tfor (let lineNumber = position.lineNumber, lineCount = this.getLineCount(); lineNumber <= lineCount; lineNumber++) {\n\t\t\tlet lineTokens = this._lines[lineNumber - 1].getTokens();\n\t\t\tlet lineText = this._lines[lineNumber - 1].text;\n\t\t\tlet tokens = lineTokens.getBinaryEncodedTokens();\n\t\t\tlet modeTransitions = this._lines[lineNumber - 1].getModeTransitions(this._mode);\n\t\t\tlet currentModeIndex = 0;\n\t\t\tlet nextModeStart = (currentModeIndex + 1 < modeTransitions.length ? modeTransitions[currentModeIndex + 1].startIndex : lineText.length + 1);\n\t\t\tlet currentModeId = modeTransitions[currentModeIndex].mode.getId();\n\n\t\t\tlet startTokenIndex = 0;\n\t\t\tlet currentTokenStart = getStartIndex(startTokenIndex);\n\t\t\tif (lineNumber === position.lineNumber) {\n\t\t\t\tstartTokenIndex = lineTokens.findIndexOfOffset(position.column - 1);\n\t\t\t\tcurrentTokenStart = Math.max(currentTokenStart, position.column - 1);\n\n\t\t\t\tcurrentModeIndex = ModeTransition.findIndexInSegmentsArray(modeTransitions, position.column - 1);\n\t\t\t\tnextModeStart = (currentModeIndex + 1 < modeTransitions.length ? modeTransitions[currentModeIndex + 1].startIndex : lineText.length + 1);\n\t\t\t\tcurrentModeId = modeTransitions[currentModeIndex].mode.getId();\n\t\t\t}\n\n\t\t\tfor (let tokenIndex = startTokenIndex, tokensLength = tokens.length; tokenIndex < tokensLength; tokenIndex++) {\n\t\t\t\tlet currentToken = tokens[tokenIndex];\n\t\t\t\tlet currentTokenType = getType(tokensMap, currentToken);\n\t\t\t\tlet currentTokenEnd = tokenIndex + 1 < tokensLength ? getStartIndex(tokens[tokenIndex + 1]) : lineText.length;\n\n\t\t\t\tif (currentTokenStart >= nextModeStart) {\n\t\t\t\t\tcurrentModeIndex++;\n\t\t\t\t\tnextModeStart = (currentModeIndex + 1 < modeTransitions.length ? modeTransitions[currentModeIndex + 1].startIndex : lineText.length + 1);\n\t\t\t\t\tcurrentModeId = modeTransitions[currentModeIndex].mode.getId();\n\t\t\t\t}\n\n\t\t\t\tif (currentModeId === modeId && !ignoreBracketsInToken(currentTokenType)) {\n\t\t\t\t\twhile (true) {\n\t\t\t\t\t\tlet r = BracketsUtils.findNextBracketInToken(bracketRegex, lineNumber, lineText, currentTokenStart, currentTokenEnd);\n\t\t\t\t\t\tif (!r) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tlet hitText = lineText.substring(r.startColumn - 1, r.endColumn - 1);\n\n\t\t\t\t\t\tif (hitText === bracket.open) {\n\t\t\t\t\t\t\tcount++;\n\t\t\t\t\t\t} else if (hitText === bracket.close) {\n\t\t\t\t\t\t\tcount--;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (count === 0) {\n\t\t\t\t\t\t\treturn r;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcurrentTokenStart = r.endColumn - 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tcurrentTokenStart = currentTokenEnd;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tpublic findPrevBracket(_position:editorCommon.IPosition): editorCommon.IFoundBracket {\n\t\tlet position = this.validatePosition(_position);\n\n\t\tlet tokensMap = this._tokensInflatorMap;\n\t\tlet reversedBracketRegex = /[\\(\\)\\[\\]\\{\\}]/; // TODO@Alex: use mode's brackets\n\n\t\tfor (let lineNumber = position.lineNumber; lineNumber >= 1; lineNumber--) {\n\t\t\tlet lineTokens = this._lines[lineNumber - 1].getTokens();\n\t\t\tlet lineText = this._lines[lineNumber - 1].text;\n\t\t\tlet tokens = lineTokens.getBinaryEncodedTokens();\n\n\t\t\tlet tokensLength = tokens.length - 1;\n\t\t\tlet currentTokenEnd = lineText.length;\n\t\t\tif (lineNumber === position.lineNumber) {\n\t\t\t\ttokensLength = lineTokens.findIndexOfOffset(position.column - 1);\n\t\t\t\tcurrentTokenEnd = position.column - 1;\n\t\t\t}\n\n\t\t\tfor (let tokenIndex = tokensLength; tokenIndex >= 0; tokenIndex--) {\n\t\t\t\tlet currentToken = tokens[tokenIndex];\n\t\t\t\tlet currentTokenType = getType(tokensMap, currentToken);\n\t\t\t\tlet currentTokenStart = getStartIndex(currentToken);\n\n\t\t\t\tif (!ignoreBracketsInToken(currentTokenType)) {\n\t\t\t\t\tlet r = BracketsUtils.findPrevBracketInToken(reversedBracketRegex, lineNumber, lineText, currentTokenStart, currentTokenEnd);\n\t\t\t\t\tif (r) {\n\t\t\t\t\t\treturn this._toFoundBracket(r);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tcurrentTokenEnd = currentTokenStart;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tpublic findNextBracket(_position:editorCommon.IPosition): editorCommon.IFoundBracket {\n\t\tlet position = this.validatePosition(_position);\n\n\t\tlet tokensMap = this._tokensInflatorMap;\n\t\tlet bracketRegex = /[\\(\\)\\[\\]\\{\\}]/; // TODO@Alex: use mode's brackets\n\n\t\tfor (let lineNumber = position.lineNumber, lineCount = this.getLineCount(); lineNumber <= lineCount; lineNumber++) {\n\t\t\tlet lineTokens = this._lines[lineNumber - 1].getTokens();\n\t\t\tlet lineText = this._lines[lineNumber - 1].text;\n\t\t\tlet tokens = lineTokens.getBinaryEncodedTokens();\n\n\t\t\tlet startTokenIndex = 0;\n\t\t\tlet currentTokenStart = getStartIndex(startTokenIndex);\n\t\t\tif (lineNumber === position.lineNumber) {\n\t\t\t\tstartTokenIndex = lineTokens.findIndexOfOffset(position.column - 1);\n\t\t\t\tcurrentTokenStart = Math.max(currentTokenStart, position.column - 1);\n\t\t\t}\n\n\t\t\tfor (let tokenIndex = startTokenIndex, tokensLength = tokens.length; tokenIndex < tokensLength; tokenIndex++) {\n\t\t\t\tlet currentToken = tokens[tokenIndex];\n\t\t\t\tlet currentTokenType = getType(tokensMap, currentToken);\n\t\t\t\tlet currentTokenEnd = tokenIndex + 1 < tokensLength ? getStartIndex(tokens[tokenIndex + 1]) : lineText.length;\n\n\t\t\t\tif (!ignoreBracketsInToken(currentTokenType)) {\n\t\t\t\t\tlet r = BracketsUtils.findNextBracketInToken(bracketRegex, lineNumber, lineText, currentTokenStart, currentTokenEnd);\n\t\t\t\t\tif (r) {\n\t\t\t\t\t\treturn this._toFoundBracket(r);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tcurrentTokenStart = currentTokenEnd;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tprivate _toFoundBracket(r:Range): editorCommon.IFoundBracket {\n\t\tif (!r) {\n\t\t\treturn null;\n\t\t}\n\n\t\tlet text = this.getValueInRange(r);\n\n\t\t// TODO@Alex: use mode's brackets\n\t\tswitch (text) {\n\t\t\tcase '(': return { range: r, open: '(', close: ')', isOpen: true };\n\t\t\tcase ')': return { range: r, open: '(', close: ')', isOpen: false };\n\t\t\tcase '[': return { range: r, open: '[', close: ']', isOpen: true };\n\t\t\tcase ']': return { range: r, open: '[', close: ']', isOpen: false };\n\t\t\tcase '{': return { range: r, open: '{', close: '}', isOpen: true };\n\t\t\tcase '}': return { range: r, open: '{', close: '}', isOpen: false };\n\t\t}\n\t\treturn null;\n\t}\n}\n\nvar getType = TokensBinaryEncoding.getType;\nvar getStartIndex = TokensBinaryEncoding.getStartIndex;\n"]}