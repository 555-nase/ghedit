{"version":3,"file":"tokenIterator.js","sourceRoot":"","sources":["../../../../../src/vs/editor/common/model/tokenIterator.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport * as editorCommon from 'vs/editor/common/editorCommon';\nimport * as TokensBinaryEncoding from 'vs/editor/common/model/tokensBinaryEncoding';\n\nvar getStartIndex = TokensBinaryEncoding.getStartIndex;\nvar inflate = TokensBinaryEncoding.inflate;\n\nexport class TokenIterator implements editorCommon.ITokenIterator {\n\n\tprivate _model:editorCommon.ITokenizedModel;\n\tprivate _currentLineNumber:number;\n\tprivate _currentTokenIndex:number;\n\tprivate _currentLineTokens:editorCommon.ILineTokens;\n\tprivate _currentTokens:number[];\n\tprivate _map:editorCommon.ITokensInflatorMap;\n\tprivate _next:editorCommon.ITokenInfo;\n\tprivate _prev:editorCommon.ITokenInfo;\n\n\tconstructor(model:editorCommon.ITokenizedModel, position:editorCommon.IPosition) {\n\t\tthis._model = model;\n\t\tthis._currentLineNumber = position.lineNumber;\n\t\tthis._currentTokenIndex = 0;\n\t\tthis._readLineTokens(this._currentLineNumber);\n\t\tthis._next = null;\n\t\tthis._prev = null;\n\n\t\t// start with a position to next/prev run\n\t\tvar columnIndex = position.column - 1, tokenEndIndex = Number.MAX_VALUE;\n\n\t\tfor (var i = this._currentTokens.length - 1; i >= 0; i--) {\n\t\t\tif (getStartIndex(this._currentTokens[i]) <= columnIndex && columnIndex <= tokenEndIndex) {\n\t\t\t\tthis._currentTokenIndex = i;\n\t\t\t\tthis._next = this._current();\n\t\t\t\tthis._prev = this._current();\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ttokenEndIndex = getStartIndex(this._currentTokens[i]);\n\t\t}\n\t}\n\n\tprivate _readLineTokens(lineNumber:number): void {\n\t\tthis._currentLineTokens = this._model.getLineTokens(lineNumber, false);\n\t\tthis._currentTokens = this._currentLineTokens.getBinaryEncodedTokens();\n\t\tthis._map = this._currentLineTokens.getBinaryEncodedTokensMap();\n\t}\n\n\tprivate _advanceNext() {\n\t\tthis._prev = this._next;\n\t\tthis._next = null;\n\t\tif (this._currentTokenIndex + 1 < this._currentTokens.length) {\n\t\t\t// There are still tokens on current line\n\t\t\tthis._currentTokenIndex++;\n\t\t\tthis._next = this._current();\n\n\t\t} else {\n\t\t\t// find the next line with tokens\n\t\t\twhile (this._currentLineNumber + 1 <= this._model.getLineCount()) {\n\t\t\t\tthis._currentLineNumber++;\n\t\t\t\tthis._readLineTokens(this._currentLineNumber);\n\t\t\t\tif (this._currentTokens.length > 0) {\n\t\t\t\t\tthis._currentTokenIndex = 0;\n\t\t\t\t\tthis._next = this._current();\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (this._next === null) {\n\t\t\t\t// prepare of a previous run\n\t\t\t\tthis._readLineTokens(this._currentLineNumber);\n\t\t\t\tthis._currentTokenIndex = this._currentTokens.length;\n\t\t\t\tthis._advancePrev();\n\t\t\t\tthis._next = null;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _advancePrev() {\n\t\tthis._next = this._prev;\n\t\tthis._prev = null;\n\t\tif (this._currentTokenIndex > 0) {\n\t\t\t// There are still tokens on current line\n\t\t\tthis._currentTokenIndex--;\n\t\t\tthis._prev = this._current();\n\n\t\t} else {\n\t\t\t// find previous line with tokens\n\t\t\twhile (this._currentLineNumber > 1) {\n\t\t\t\tthis._currentLineNumber--;\n\t\t\t\tthis._readLineTokens(this._currentLineNumber);\n\t\t\t\tif (this._currentTokens.length > 0) {\n\t\t\t\t\tthis._currentTokenIndex = this._currentTokens.length - 1;\n\t\t\t\t\tthis._prev = this._current();\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _current(): editorCommon.ITokenInfo {\n\t\treturn {\n\t\t\ttoken: inflate(this._map, this._currentTokens[this._currentTokenIndex]),\n\t\t\tlineNumber: this._currentLineNumber,\n\t\t\tstartColumn: getStartIndex(this._currentTokens[this._currentTokenIndex]) + 1,\n\t\t\tendColumn: this._currentTokenIndex + 1 < this._currentTokens.length ? getStartIndex(this._currentTokens[this._currentTokenIndex + 1]) + 1 : this._model.getLineContent(this._currentLineNumber).length + 1\n\t\t};\n\t}\n\n\tpublic hasNext(): boolean {\n\t\treturn this._next !== null;\n\t}\n\n\tpublic next(): editorCommon.ITokenInfo {\n\t\tvar result = this._next;\n\t\tthis._advanceNext();\n\t\treturn result;\n\t}\n\n\tpublic hasPrev(): boolean {\n\t\treturn this._prev !== null;\n\t}\n\n\tpublic prev(): editorCommon.ITokenInfo {\n\t\tvar result = this._prev;\n\t\tthis._advancePrev();\n\t\treturn result;\n\t}\n\n\tpublic _invalidate() {\n\t\t// replace all public functions with errors\n\t\tvar errorFn = function(): any {\n\t\t\tthrow new Error('iteration isn\\'t valid anymore');\n\t\t};\n\t\tthis.hasNext = errorFn;\n\t\tthis.next = errorFn;\n\t\tthis.hasPrev = errorFn;\n\t\tthis.prev = errorFn;\n\t}\n}\n"]}