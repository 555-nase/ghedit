{"version":3,"file":"textModelWithTokensHelpers.js","sourceRoot":"","sources":["../../../../../src/vs/editor/common/model/textModelWithTokensHelpers.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {ILineTokens, IPosition, IWordAtPosition, IWordRange} from 'vs/editor/common/editorCommon';\nimport {IMode, IModeTransition} from 'vs/editor/common/modes';\nimport {NullMode} from 'vs/editor/common/modes/nullMode';\nimport {ModeTransition} from 'vs/editor/common/core/modeTransition';\n\nexport interface ITextSource {\n\n\t_lineIsTokenized(lineNumber:number): boolean;\n\n\tgetLineContent(lineNumber:number): string;\n\n\tgetLineCount(): number;\n\n\tgetMode(): IMode;\n\n\tgetModeAtPosition(lineNumber:number, column:number): IMode;\n\n\t_getLineModeTransitions(lineNumber:number): ModeTransition[];\n\n\tgetLineTokens(lineNumber:number, inaccurateTokensAcceptable:boolean): ILineTokens;\n}\n\nexport interface INonWordTokenMap {\n\t[key:string]:boolean;\n}\n\nexport class WordHelper {\n\n\tprivate static _safeGetWordDefinition(mode:IMode): RegExp {\n\t\treturn (mode.richEditSupport ? mode.richEditSupport.wordDefinition : null);\n\t}\n\n\tpublic static ensureValidWordDefinition(wordDefinition?:RegExp): RegExp {\n\t\tvar result: RegExp = NullMode.DEFAULT_WORD_REGEXP;\n\n\t\tif (wordDefinition && (wordDefinition instanceof RegExp)) {\n\t\t\tif (!wordDefinition.global) {\n\t\t\t\tvar flags = 'g';\n\t\t\t\tif (wordDefinition.ignoreCase) {\n\t\t\t\t\tflags += 'i';\n\t\t\t\t}\n\t\t\t\tif (wordDefinition.multiline) {\n\t\t\t\t\tflags += 'm';\n\t\t\t\t}\n\t\t\t\tresult = new RegExp(wordDefinition.source, flags);\n\t\t\t} else {\n\t\t\t\tresult = wordDefinition;\n\t\t\t}\n\t\t}\n\n\t\tresult.lastIndex = 0;\n\n\t\treturn result;\n\t}\n\n\tpublic static massageWordDefinitionOf(mode:IMode): RegExp {\n\t\treturn WordHelper.ensureValidWordDefinition(WordHelper._safeGetWordDefinition(mode));\n\t}\n\n\tpublic static getWords(textSource:ITextSource, lineNumber:number): IWordRange[] {\n\t\tif (!textSource._lineIsTokenized(lineNumber)) {\n\t\t\treturn WordHelper._getWordsInText(textSource.getLineContent(lineNumber), WordHelper.massageWordDefinitionOf(textSource.getMode()));\n\t\t}\n\n\t\tvar r: IWordRange[] = [],\n\t\t\ttxt = textSource.getLineContent(lineNumber);\n\n\t\tif (txt.length > 0) {\n\n\t\t\tvar modeTransitions = textSource._getLineModeTransitions(lineNumber),\n\t\t\t\ti:number,\n\t\t\t\tlen:number,\n\t\t\t\tk:number,\n\t\t\t\tlenK:number,\n\t\t\t\tcurrentModeStartIndex: number,\n\t\t\t\tcurrentModeEndIndex: number,\n\t\t\t\tcurrentWordDefinition:RegExp,\n\t\t\t\tcurrentModeText: string,\n\t\t\t\twords: RegExpMatchArray,\n\t\t\t\tstartWord: number,\n\t\t\t\tendWord: number,\n\t\t\t\tword: string;\n\n\t\t\t// Go through all the modes\n\t\t\tfor (i = 0, currentModeStartIndex = 0, len = modeTransitions.length; i < len; i++) {\n\t\t\t\tcurrentWordDefinition = WordHelper.massageWordDefinitionOf(modeTransitions[i].mode);\n\t\t\t\tcurrentModeStartIndex = modeTransitions[i].startIndex;\n\t\t\t\tcurrentModeEndIndex = (i + 1 < len ? modeTransitions[i + 1].startIndex : txt.length);\n\t\t\t\tcurrentModeText = txt.substring(currentModeStartIndex, currentModeEndIndex);\n\t\t\t\twords = currentModeText.match(currentWordDefinition);\n\n\t\t\t\tif (!words) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tendWord = 0;\n\t\t\t\tfor (k = 0, lenK = words.length; k < lenK; k++) {\n\t\t\t\t\tword = words[k];\n\t\t\t\t\tif (word.length > 0) {\n\t\t\t\t\t\tstartWord = currentModeText.indexOf(word, endWord);\n\t\t\t\t\t\tendWord = startWord + word.length;\n\n\t\t\t\t\t\tr.push({\n\t\t\t\t\t\t\tstart: currentModeStartIndex + startWord,\n\t\t\t\t\t\t\tend: currentModeStartIndex + endWord\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn r;\n\t}\n\n\tstatic _getWordsInText(text:string, wordDefinition:RegExp): IWordRange[] {\n\t\tvar words = text.match(wordDefinition) || [],\n\t\t\tk:number,\n\t\t\tstartWord:number,\n\t\t\tendWord:number,\n\t\t\tstartColumn:number,\n\t\t\tendColumn:number,\n\t\t\tword:string,\n\t\t\tr: IWordRange[] = [];\n\n\t\tfor (k = 0; k < words.length; k++) {\n\t\t\tword = words[k].trim();\n\t\t\tif (word.length > 0) {\n\t\t\t\tstartWord = text.indexOf(word, endWord);\n\t\t\t\tendWord = startWord + word.length;\n\n\t\t\t\tstartColumn = startWord;\n\t\t\t\tendColumn = endWord;\n\n\t\t\t\tr.push({\n\t\t\t\t\tstart: startColumn,\n\t\t\t\t\tend: endColumn\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\treturn r;\n\t}\n\n\tprivate static _getWordAtColumn(txt:string, column:number, modeIndex: number, modeTransitions:IModeTransition[]): IWordAtPosition {\n\t\tvar modeStartIndex = modeTransitions[modeIndex].startIndex,\n\t\t\tmodeEndIndex = (modeIndex + 1 < modeTransitions.length ? modeTransitions[modeIndex + 1].startIndex : txt.length),\n\t\t\tmode = modeTransitions[modeIndex].mode;\n\n\t\treturn WordHelper._getWordAtText(\n\t\t\tcolumn, WordHelper.massageWordDefinitionOf(mode),\n\t\t\ttxt.substring(modeStartIndex, modeEndIndex), modeStartIndex\n\t\t);\n\t}\n\n\tpublic static getWordAtPosition(textSource:ITextSource, position:IPosition): IWordAtPosition {\n\n\t\tif (!textSource._lineIsTokenized(position.lineNumber)) {\n\t\t\treturn WordHelper._getWordAtText(position.column, WordHelper.massageWordDefinitionOf(textSource.getMode()), textSource.getLineContent(position.lineNumber), 0);\n\t\t}\n\n\t\tvar result: IWordAtPosition = null;\n\t\tvar txt = textSource.getLineContent(position.lineNumber),\n\t\t\tmodeTransitions = textSource._getLineModeTransitions(position.lineNumber),\n\t\t\tcolumnIndex = position.column - 1,\n\t\t\tmodeIndex = ModeTransition.findIndexInSegmentsArray(modeTransitions, columnIndex);\n\n\t\tresult = WordHelper._getWordAtColumn(txt, position.column, modeIndex, modeTransitions);\n\n\t\tif (!result && modeIndex > 0 && modeTransitions[modeIndex].startIndex === columnIndex) {\n\t\t\t// The position is right at the beginning of `modeIndex`, so try looking at `modeIndex` - 1 too\n\t\t\tresult = WordHelper._getWordAtColumn(txt, position.column, modeIndex - 1, modeTransitions);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tstatic _getWordAtText(column:number, wordDefinition:RegExp, text:string, textOffset:number): IWordAtPosition {\n\n\t\t// console.log('_getWordAtText: ', column, text, textOffset);\n\n\t\tvar words = text.match(wordDefinition),\n\t\t\tk:number,\n\t\t\tstartWord:number,\n\t\t\tendWord:number,\n\t\t\tstartColumn:number,\n\t\t\tendColumn:number,\n\t\t\tword:string;\n\n\t\tif (words) {\n\t\t\tfor (k = 0; k < words.length; k++) {\n\t\t\t\tword = words[k].trim();\n\t\t\t\tif (word.length > 0) {\n\t\t\t\t\tstartWord = text.indexOf(word, endWord);\n\t\t\t\t\tendWord = startWord + word.length;\n\n\t\t\t\t\tstartColumn = textOffset + startWord + 1;\n\t\t\t\t\tendColumn = textOffset + endWord + 1;\n\n\t\t\t\t\tif (startColumn <= column && column <= endColumn) {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tword: word,\n\t\t\t\t\t\t\tstartColumn: startColumn,\n\t\t\t\t\t\t\tendColumn: endColumn\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n}\n"]}