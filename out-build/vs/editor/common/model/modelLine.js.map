{"version":3,"file":"modelLine.js","sourceRoot":"","sources":["../../../../../src/vs/editor/common/model/modelLine.ts"],"names":[],"mappings":";IAAA;;;oGAGgG;IAChG,YAAY,CAAC;IA8Cb,IAAI,qBAAqB,GAAoB;QAC5C,MAAM,EAAE,cAAO,CAAC;QAChB,MAAM,EAAE,cAAO,CAAC;KAChB,CAAC;IACF,IAAI,sBAAsB,GAAqB;QAC9C,WAAW,EAAE,cAAO,CAAC;QACrB,SAAS,EAAE,cAAO,CAAC;QACnB,MAAM,EAAE,cAAO,CAAC;KAChB,CAAC;IAEF,IAAK,mBAIJ;IAJD,WAAK,mBAAmB;QACvB,+EAAiB,CAAA;QACjB,uEAAa,CAAA;QACb,uEAAa,CAAA;IACd,CAAC,EAJI,mBAAmB,KAAnB,mBAAmB,QAIvB;IAED;QAgBC,mBAAY,UAAiB,EAAE,IAAW;YACzC,IAAI,CAAC,WAAW,GAAG,UAAU,GAAC,CAAC,CAAC;YAChC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;YAClB,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;YACxB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;YACnB,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;YAC7B,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;YACxB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QACtB,CAAC;QAtBD,sBAAW,iCAAU;iBAArB,cAAiC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;;;WAAA;QAG3D,sBAAW,2BAAI;iBAAf,cAA2B,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;;;WAAA;QAG/C,sBAAW,gCAAS;iBAApB,cAAiC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;iBAC1D,UAAqB,KAAa,IAAI,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC,CAAC,CAAC;;;WADN;QAkB1D,kBAAkB;QAEX,4BAAQ,GAAf,UAAgB,KAAa;YAC5B,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACrB,CAAC;QAEM,4BAAQ,GAAf;YACC,MAAM,CAAC,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC;QAC5B,CAAC;QAED,gBAAgB;QAEhB,6BAA6B;QAEtB,sCAAkB,GAAzB,UAA0B,YAAkB;YAC3C,EAAE,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC;gBAC3B,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC;YAC9B,CAAC;YAAC,IAAI,CAAC,CAAC;gBACP,MAAM,CAAC,CAAC,IAAI,+BAAc,CAAC,CAAC,EAAE,YAAY,CAAC,CAAC,CAAC;YAC9C,CAAC;QACF,CAAC;QAED,2BAA2B;QAE3B,mBAAmB;QAEZ,6BAAS,GAAhB,UAAiB,GAAuB,EAAE,MAAmB,EAAE,YAAkB,EAAE,eAAgC;YAClH,IAAI,CAAC,WAAW,GAAG,wBAAwB,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;YAC5E,IAAI,CAAC,gBAAgB,GAAG,iBAAiB,CAAC,YAAY,EAAE,eAAe,CAAC,CAAC;QAC1E,CAAC;QAEO,8CAA0B,GAAlC,UAAmC,GAAsB,EAAE,MAAe;YACzE,IAAI,CAAC,WAAW,GAAG,wBAAwB,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QAC7E,CAAC;QAEM,6BAAS,GAAhB;YACC,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;gBACtB,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC;YACzB,CAAC;YACD,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;gBAC7B,MAAM,CAAC,eAAe,CAAC,QAAQ,CAAC;YACjC,CAAC;YACD,MAAM,CAAC,iBAAiB,CAAC,QAAQ,CAAC;QACnC,CAAC;QAED,iBAAiB;QAET,yCAAqB,GAA7B;YACC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;gBACvB,qEAAqE;gBACrE,MAAM,CAAC,qBAAqB,CAAC;YAC9B,CAAC;YAED,IAAI,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC;YAElC,IAAI,GAAG,GAAG,oBAAoB,CAAC;YAC/B,IAAI,MAAM,GAAG,UAAU,CAAC,sBAAsB,EAAE,CAAC;YACjD,IAAI,YAAY,GAAG,MAAM,CAAC,MAAM,CAAC;YACjC,IAAI,WAAW,GAAG,CAAC,CAAC;YACpB,IAAI,sBAAsB,GAAG,CAAC,CAAC;YAE/B,IAAI,MAAM,GAAG,UAAC,QAAe,EAAE,KAAY,EAAE,oBAA2B;gBACvE,6FAA6F;gBAC7F,8GAA8G;gBAC9G,oEAAoE;gBACpE,IAAI,mBAAmB,GAAG,oBAAoB,GAAG,CAAC,CAAC;gBAEnD,OAAO,sBAAsB,GAAG,QAAQ,IAAI,WAAW,GAAG,YAAY,EAAE,CAAC;oBAExE,EAAE,CAAC,CAAC,sBAAsB,GAAG,CAAC,IAAI,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC;wBAC/C,yCAAyC;wBACzC,IAAI,YAAY,GAAG,CAAC,MAAM,CAAC,WAAW,CAAC,GAAG,GAAG,CAAC,WAAW,CAAC,GAAG,GAAG,CAAC,SAAS,CAAC;wBAC3E,IAAI,aAAa,GAAG,IAAI,CAAC,GAAG,CAAC,mBAAmB,EAAE,sBAAsB,GAAG,KAAK,CAAC,CAAC;wBAClF,IAAI,QAAQ,GAAG,YAAY,GAAG,GAAG,CAAC,WAAW,GAAG,aAAa,GAAG,GAAG,CAAC,kBAAkB,CAAC;wBAEvF,EAAE,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC;4BACf,uDAAuD;4BACvD,OAAO,WAAW,GAAG,CAAC,EAAE,CAAC;gCACxB,IAAI,mBAAmB,GAAG,CAAC,MAAM,CAAC,WAAW,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,kBAAkB,CAAC,GAAG,GAAG,CAAC,gBAAgB,CAAC;gCACpG,EAAE,CAAC,CAAC,mBAAmB,IAAI,aAAa,CAAC,CAAC,CAAC;oCAC1C,0DAA0D;oCAC1D,MAAM,CAAC,MAAM,CAAC,WAAW,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;oCAClC,YAAY,EAAE,CAAC;oCACf,WAAW,EAAE,CAAC;gCACf,CAAC;gCAAC,IAAI,CAAC,CAAC;oCACP,KAAK,CAAC;gCACP,CAAC;4BACF,CAAC;wBACF,CAAC;wBACD,MAAM,CAAC,WAAW,CAAC,GAAG,QAAQ,CAAC;oBAChC,CAAC;oBAED,WAAW,EAAE,CAAC;oBAEd,EAAE,CAAC,CAAC,WAAW,GAAG,YAAY,CAAC,CAAC,CAAC;wBAChC,sBAAsB,GAAG,CAAC,MAAM,CAAC,WAAW,CAAC,GAAG,GAAG,CAAC,kBAAkB,CAAC,GAAG,GAAG,CAAC,gBAAgB,CAAC;oBAChG,CAAC;gBACF,CAAC;gBACD,4FAA4F;YAC7F,CAAC,CAAC;YAEF,IAAI,MAAM,GAAG,UAAC,KAAY,EAAE,cAAqB;gBAChD,MAAM,CAAC,MAAM,CAAC,SAAS,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;YACpC,CAAC,CAAC;YAEF,MAAM,CAAC;gBACN,MAAM,EAAE,MAAM;gBACd,MAAM,EAAE,MAAM;aACd,CAAC;QACH,CAAC;QAEO,4BAAQ,GAAhB,UAAiB,IAAW;YAC3B,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;YAElB,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;gBACtB,IAAI,GAAG,GAAG,oBAAoB,EAC7B,GAAG,GAAG,IAAI,CAAC,WAAW,CAAC,yBAAyB,EAAE,EAClD,MAAM,GAAG,IAAI,CAAC,WAAW,CAAC,sBAAsB,EAAE,EAClD,cAAc,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;gBAEpC,4BAA4B;gBAC5B,OAAO,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;oBAC1B,IAAI,mBAAmB,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,kBAAkB,CAAC,GAAG,GAAG,CAAC,gBAAgB,CAAC;oBACtG,EAAE,CAAC,CAAC,mBAAmB,GAAG,cAAc,CAAC,CAAC,CAAC;wBAC1C,cAAc;wBACd,KAAK,CAAC;oBACP,CAAC;oBACD,iDAAiD;oBACjD,MAAM,CAAC,GAAG,EAAE,CAAC;gBACd,CAAC;gBAED,IAAI,CAAC,0BAA0B,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;YAC9C,CAAC;QACF,CAAC;QAED,oCAAoC;QACpC,yBAAyB;QACzB,iBAAiB;QACjB,KAAK;QACL,qCAAqC;QACrC,iBAAiB;QACjB,KAAK;QAEL,gCAAgC;QAEhC,0CAA0C;QAC1C,sCAAsC;QACtC,4BAA4B;QAC5B,MAAM;QACN,2BAA2B;QAC3B,MAAM;QACN,2DAA2D;QAC3D,IAAI;QAEI,0CAAsB,GAA9B,UAA+B,cAA8B;YAA7D,iBA2FC;YA1FA,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACpB,MAAM,CAAC,sBAAsB,CAAC;YAC/B,CAAC;YACD,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;gBAChC,MAAM,CAAC,sBAAsB,CAAC;YAC/B,CAAC;YAED,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC;YAE9C,IAAI,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC;YAC5B,IAAI,aAAa,GAAG,OAAO,CAAC,MAAM,CAAC;YACnC,IAAI,YAAY,GAAG,CAAC,CAAC;YACrB,IAAI,MAAM,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;YAEnC,yEAAyE;YAEzE,IAAI,wBAAwB,GAAG,UAAC,QAAe,EAAE,aAAiC;gBACjF,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,GAAG,QAAQ,CAAC,CAAC,CAAC;oBAC9B,MAAM,CAAC,IAAI,CAAC;gBACb,CAAC;gBACD,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,GAAG,QAAQ,CAAC,CAAC,CAAC;oBAC9B,MAAM,CAAC,KAAK,CAAC;gBACd,CAAC;gBACD,EAAE,CAAC,CAAC,aAAa,KAAK,mBAAmB,CAAC,SAAS,CAAC,CAAC,CAAC;oBACrD,MAAM,CAAC,KAAK,CAAC;gBACd,CAAC;gBACD,EAAE,CAAC,CAAC,aAAa,KAAK,mBAAmB,CAAC,SAAS,CAAC,CAAC,CAAC;oBACrD,MAAM,CAAC,IAAI,CAAC;gBACb,CAAC;gBACD,MAAM,CAAC,MAAM,CAAC,wBAAwB,CAAC;YACxC,CAAC,CAAC;YAEF,IAAI,WAAW,GAAG,UAAC,QAAe,EAAE,KAAY,EAAE,oBAA2B,EAAE,aAAiC;gBAC/G,iDAAiD;gBACjD,iMAAiM;gBACjM,yFAAyF;gBAEzF,OAAO,YAAY,GAAG,aAAa,IAAI,wBAAwB,CAAC,QAAQ,EAAE,aAAa,CAAC,EAAE,CAAC;oBAC1F,EAAE,CAAC,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC;wBACjB,IAAI,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC,oBAAoB,EAAE,MAAM,CAAC,MAAM,GAAG,KAAK,CAAC,CAAC;wBACtE,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,KAAK,SAAS,CAAC,CAAC,CAAC;4BACjC,cAAc,CAAC,MAAM,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC;4BACjC,MAAM,CAAC,aAAa,GAAG,MAAM,CAAC,aAAa,IAAI,KAAI,CAAC,WAAW,CAAC;4BAChE,MAAM,CAAC,SAAS,GAAG,MAAM,CAAC,SAAS,IAAI,MAAM,CAAC,MAAM,CAAC;4BACrD,MAAM,CAAC,MAAM,GAAG,SAAS,CAAC;wBAC3B,CAAC;oBACF,CAAC;oBAED,YAAY,EAAE,CAAC;oBACf,EAAE,CAAC,CAAC,YAAY,GAAG,aAAa,CAAC,CAAC,CAAC;wBAClC,MAAM,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;oBAChC,CAAC;gBACF,CAAC;gBAED,wFAAwF;YACzF,CAAC,CAAC;YAEF,IAAI,SAAS,GAAG,UAAC,QAAe,EAAE,SAAgB,EAAE,aAAiC;gBACpF,iDAAiD;gBACjD,mJAAmJ;gBACnJ,yFAAyF;gBAEzF,OAAO,YAAY,GAAG,aAAa,IAAI,wBAAwB,CAAC,QAAQ,EAAE,aAAa,CAAC,EAAE,CAAC;oBAC1F,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,KAAK,SAAS,CAAC,CAAC,CAAC;wBACjC,cAAc,CAAC,MAAM,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC;wBACjC,MAAM,CAAC,aAAa,GAAG,MAAM,CAAC,aAAa,IAAI,KAAI,CAAC,WAAW,CAAC;wBAChE,MAAM,CAAC,SAAS,GAAG,MAAM,CAAC,SAAS,IAAI,MAAM,CAAC,MAAM,CAAC;wBACrD,MAAM,CAAC,MAAM,GAAG,SAAS,CAAC;oBAC3B,CAAC;oBAED,YAAY,EAAE,CAAC;oBACf,EAAE,CAAC,CAAC,YAAY,GAAG,aAAa,CAAC,CAAC,CAAC;wBAClC,MAAM,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;oBAChC,CAAC;gBACF,CAAC;gBAED,wFAAwF;YACzF,CAAC,CAAC;YAEF,IAAI,MAAM,GAAG,UAAC,KAAY,EAAE,cAAqB;gBAChD,WAAW,CAAC,MAAM,CAAC,SAAS,EAAE,KAAK,EAAE,CAAC,EAAE,mBAAmB,CAAC,aAAa,CAAC,CAAC;gBAE3E,uEAAuE;YACxE,CAAC,CAAC;YAEF,MAAM,CAAC;gBACN,WAAW,EAAE,WAAW;gBACxB,SAAS,EAAE,SAAS;gBACpB,MAAM,EAAE,MAAM;aACd,CAAC;QACH,CAAC;QAEM,8BAAU,GAAjB,UAAkB,cAA+B,EAAE,KAAiB;YACnE,IAAI,WAAW,GAAG,CAAC,CAAC;YACpB,IAAI,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC;YAE5B,IAAI,cAAc,GAAG,IAAI,CAAC,qBAAqB,EAAE,CAAC;YAClD,IAAI,eAAe,GAAG,IAAI,CAAC,sBAAsB,CAAC,cAAc,CAAC,CAAC;YAElE,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC;gBAClD,IAAI,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;gBAEpB,iBAAiB;gBACjB,gDAAgD;gBAChD,+JAA+J;gBAC/J,8CAA8C;gBAE9C,IAAI,WAAW,GAAG,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;gBACjD,IAAI,SAAS,GAAG,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC;gBAC7C,IAAI,WAAW,GAAG,SAAS,GAAG,WAAW,CAAC;gBAC1C,IAAI,YAAY,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;gBAEpC,2CAA2C;gBAC3C,2DAA2D;gBAC3D,cAAc,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,GAAG,CAAC,EAAE,WAAW,EAAE,CAAC,CAAC,CAAC;gBAC5D,eAAe,CAAC,WAAW,CAAC,IAAI,CAAC,WAAW,EAAE,WAAW,EAAE,CAAC,EAAE,IAAI,CAAC,gBAAgB,GAAG,mBAAmB,CAAC,SAAS,GAAG,CAAC,WAAW,GAAG,CAAC,GAAG,mBAAmB,CAAC,SAAS,GAAG,mBAAmB,CAAC,aAAa,CAAC,CAAC,CAAC;gBAE7M,2DAA2D;gBAC3D,IAAI,YAAY,GAAG,IAAI,CAAC,GAAG,CAAC,WAAW,EAAE,YAAY,CAAC,CAAC;gBACvD,EAAE,CAAC,CAAC,YAAY,GAAG,CAAC,CAAC,CAAC,CAAC;oBACtB,2EAA2E;oBAC3E,cAAc,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,GAAG,CAAC,GAAG,YAAY,EAAE,WAAW,EAAE,WAAW,CAAC,CAAC;oBAErF,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC;wBAC5B,eAAe,CAAC,WAAW,CAAC,IAAI,CAAC,WAAW,GAAG,YAAY,EAAE,WAAW,EAAE,WAAW,EAAE,IAAI,CAAC,gBAAgB,GAAG,mBAAmB,CAAC,SAAS,GAAG,CAAC,WAAW,GAAG,YAAY,GAAG,mBAAmB,CAAC,SAAS,GAAG,mBAAmB,CAAC,aAAa,CAAC,CAAC,CAAC;oBAClP,CAAC;gBACF,CAAC;gBAED,0CAA0C;gBAC1C,UAAU,GAAG,UAAU,CAAC,SAAS,CAAC,CAAC,EAAE,WAAW,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,GAAG,UAAU,CAAC,SAAS,CAAC,SAAS,GAAG,CAAC,CAAC,CAAC;gBACxG,WAAW,IAAI,YAAY,GAAG,WAAW,CAAC;gBAE1C,2CAA2C;gBAC3C,2DAA2D;gBAC3D,cAAc,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,EAAE,WAAW,EAAE,WAAW,CAAC,CAAC;gBAChE,eAAe,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,EAAE,WAAW,GAAG,YAAY,EAAE,IAAI,CAAC,gBAAgB,GAAG,mBAAmB,CAAC,SAAS,GAAG,mBAAmB,CAAC,aAAa,CAAC,CAAC;YAClK,CAAC;YAED,uDAAuD;YACvD,cAAc,CAAC,MAAM,CAAC,WAAW,EAAE,UAAU,CAAC,MAAM,CAAC,CAAC;YACtD,eAAe,CAAC,MAAM,CAAC,WAAW,EAAE,UAAU,CAAC,MAAM,CAAC,CAAC;YAEvD,0BAA0B;YAC1B,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;YAE1B,MAAM,CAAC,WAAW,CAAC;QACpB,CAAC;QAEM,yBAAK,GAAZ,UAAa,cAA+B,EAAE,WAAkB,EAAE,gBAAwB;YACzF,6EAA6E;YAC7E,IAAI,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,EAAE,WAAW,GAAG,CAAC,CAAC,CAAC;YACtD,IAAI,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,WAAW,GAAG,CAAC,CAAC,CAAC;YAEtD,IAAI,YAAY,GAAkB,IAAI,CAAC;YAEvC,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACnB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC;gBAC9C,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC;oBAC1D,IAAI,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;oBAE9B,EAAE,CAAC,CACF,MAAM,CAAC,MAAM,GAAG,WAAW;2BACxB,CACF,MAAM,CAAC,MAAM,KAAK,WAAW;+BAC1B,CACF,gBAAgB;mCACb,CAAC,MAAM,CAAC,wBAAwB,CACnC,CAEH,CAAC,CAAC,CAAC;wBACF,IAAI,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;wBAC1C,YAAY,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;wBACtC,IAAI,CAAC,QAAQ,GAAG,SAAS,CAAC;wBAC1B,KAAK,CAAC;oBACP,CAAC;gBACF,CAAC;gBAED,EAAE,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;oBAClB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,YAAY,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC;wBACzD,IAAI,MAAM,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC;wBAE7B,cAAc,CAAC,MAAM,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC;wBACjC,MAAM,CAAC,aAAa,GAAG,MAAM,CAAC,aAAa,IAAI,IAAI,CAAC,WAAW,CAAC;wBAChE,MAAM,CAAC,SAAS,GAAG,MAAM,CAAC,SAAS,IAAI,MAAM,CAAC,MAAM,CAAC;wBACrD,MAAM,CAAC,MAAM,IAAI,WAAW,GAAG,CAAC,CAAC;oBAClC,CAAC;gBACF,CAAC;YACF,CAAC;YAED,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;YAEtB,IAAI,SAAS,GAAG,IAAI,SAAS,CAAC,IAAI,CAAC,WAAW,GAAG,CAAC,EAAE,SAAS,CAAC,CAAC;YAC/D,EAAE,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;gBAClB,SAAS,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC;YACpC,CAAC;YACD,MAAM,CAAC,SAAS,CAAC;QAClB,CAAC;QAEM,0BAAM,GAAb,UAAc,cAA+B,EAAE,KAAe;YAC7D,8DAA8D;YAC9D,+DAA+D;YAC/D,IAAI,cAAc,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;YACvC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC;YAExC,IAAI,eAAe,GAAG,KAAK,CAAC,WAAW,CAAC;YACxC,EAAE,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC;gBACrB,wBAAwB;gBACxB,IAAI,WAAW,GAAG,eAAe,CAAC,sBAAsB,EAAE,CAAC;gBAE3D,sBAAsB;gBACtB,EAAE,CAAC,CAAC,cAAc,GAAG,CAAC,CAAC,CAAC,CAAC;oBACxB,IAAI,GAAG,GAAG,oBAAoB,CAAC;oBAE/B,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,WAAW,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC;wBACxD,IAAI,KAAK,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC;wBAE3B,IAAI,kBAAkB,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,kBAAkB,CAAC,GAAG,GAAG,CAAC,gBAAgB,CAAC;wBACjF,IAAI,YAAY,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,WAAW,CAAC,GAAG,GAAG,CAAC,SAAS,CAAC;wBAC7D,IAAI,aAAa,GAAG,kBAAkB,GAAG,cAAc,CAAC;wBACxD,IAAI,QAAQ,GAAG,YAAY,GAAG,GAAG,CAAC,WAAW,GAAG,aAAa,GAAG,GAAG,CAAC,kBAAkB,CAAC;wBAEvF,WAAW,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC;oBAC3B,CAAC;gBACF,CAAC;gBAED,sBAAsB;gBACtB,IAAI,YAAY,GAAG,IAAI,CAAC,WAAW,CAAC;gBACpC,EAAE,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;oBAClB,qBAAqB;oBACrB,IAAI,CAAC,0BAA0B,CAAC,YAAY,CAAC,yBAAyB,EAAE,EAAE,YAAY,CAAC,sBAAsB,EAAE,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC;gBACtI,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACP,2BAA2B;oBAC3B,IAAI,CAAC,0BAA0B,CAAC,eAAe,CAAC,yBAAyB,EAAE,EAAE,WAAW,CAAC,CAAC;gBAC3F,CAAC;YACF,CAAC;YAED,EAAE,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACpB,oBAAoB;gBACpB,IAAI,YAAY,GAAG,KAAK,CAAC,QAAQ,CAAC;gBAElC,uBAAuB;gBACvB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,YAAY,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC;oBACzD,IAAI,MAAM,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC;oBAE7B,cAAc,CAAC,MAAM,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC;oBACjC,MAAM,CAAC,aAAa,GAAG,MAAM,CAAC,aAAa,IAAI,KAAK,CAAC,UAAU,CAAC;oBAChE,MAAM,CAAC,SAAS,GAAG,MAAM,CAAC,SAAS,IAAI,MAAM,CAAC,MAAM,CAAC;oBACrD,MAAM,CAAC,MAAM,IAAI,cAAc,CAAC;gBACjC,CAAC;gBAED,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC;YAC/B,CAAC;QACF,CAAC;QAEM,6BAAS,GAAhB,UAAiB,MAAkB;YAClC,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC;YACnB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACpB,IAAI,CAAC,QAAQ,GAAG,CAAC,MAAM,CAAC,CAAC;YAC1B,CAAC;YAAC,IAAI,CAAC,CAAC;gBACP,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAC5B,CAAC;QACF,CAAC;QAEM,8BAAU,GAAjB,UAAkB,OAAqB;YACtC,EAAE,CAAC,CAAC,OAAO,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;gBAC1B,MAAM,CAAC;YACR,CAAC;YAED,IAAI,CAAQ,EACX,GAAU,CAAC;YAEZ,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC;gBAChD,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,IAAI,CAAC;YACxB,CAAC;YAED,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACpB,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YAClC,CAAC;YAAC,IAAI,CAAC,CAAC;gBACP,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;YAC/C,CAAC;QACF,CAAC;QAEc,yBAAe,GAA9B,UAA+B,CAAa,EAAE,CAAa;YAC1D,EAAE,CAAC,CAAC,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;gBAC3B,MAAM,CAAC,CAAC,CAAC,CAAC,wBAAwB,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,wBAAwB,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;YACpF,CAAC;YACD,MAAM,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,MAAM,CAAC;QAC5B,CAAC;QAEM,gCAAY,GAAnB,UAAoB,MAAkB;YACrC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACpB,MAAM,CAAC;YACR,CAAC;YACD,IAAI,KAAK,GAAG,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;YAC7C,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC;gBAChB,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC;gBACnB,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;YAChC,CAAC;YACD,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;gBAChC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;YACtB,CAAC;QACF,CAAC;QAEM,iCAAa,GAApB,UAAqB,aAA2C;YAC/D,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACpB,MAAM,CAAC;YACR,CAAC;YACD,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC;gBAC1D,IAAI,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;gBAE9B,EAAE,CAAC,CAAC,aAAa,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;oBAC9B,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC;oBACnB,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;oBAC3B,GAAG,EAAE,CAAC;oBACN,CAAC,EAAE,CAAC;gBACL,CAAC;YACF,CAAC;YACD,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;gBAChC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;YACtB,CAAC;QACF,CAAC;QAEM,8BAAU,GAAjB;YACC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACpB,MAAM,CAAC,EAAE,CAAC;YACX,CAAC;YACD,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QAC/B,CAAC;QAEM,oCAAgB,GAAvB,UAAwB,cAA+B,EAAE,aAAqB;YAC7E,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACnB,IAAI,OAAO,GAAG,IAAI,CAAC,QAAQ,EAC1B,CAAS,EACT,GAAW,EACX,MAAmB,CAAC;gBAErB,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC;oBAChD,MAAM,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;oBAEpB,cAAc,CAAC,MAAM,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC;oBACjC,MAAM,CAAC,aAAa,GAAG,MAAM,CAAC,aAAa,IAAI,IAAI,CAAC,WAAW,CAAC;gBACjE,CAAC;YACF,CAAC;YAED,IAAI,CAAC,WAAW,GAAG,aAAa,CAAC;QAClC,CAAC;QAEM,8BAAU,GAAjB,UAAkB,cAA+B,EAAE,gBAAuB,EAAE,uBAA8B;YACzG,mCAAmC;YACnC,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACnB,IAAI,OAAO,GAAG,IAAI,CAAC,QAAQ,EAC1B,CAAS,EACT,GAAW,EACX,MAAmB,CAAC;gBAErB,oCAAoC;gBACpC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC;oBAChD,MAAM,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;oBAEpB,cAAc,CAAC,MAAM,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC;oBACjC,MAAM,CAAC,SAAS,GAAG,MAAM,CAAC,SAAS,IAAI,MAAM,CAAC,MAAM,CAAC;oBACrD,MAAM,CAAC,aAAa,GAAG,MAAM,CAAC,aAAa,IAAI,uBAAuB,CAAC;oBACvE,MAAM,CAAC,MAAM,GAAG,gBAAgB,CAAC;gBAClC,CAAC;gBAED,MAAM,CAAC,OAAO,CAAC;YAChB,CAAC;YACD,MAAM,CAAC,EAAE,CAAC;QACX,CAAC;QAEO,oCAAgB,GAAxB,UAAyB,QAAe;YACvC,IAAI,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC;YAC5B,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC;gBACpD,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;oBAChC,MAAM,CAAC,CAAC,CAAC;gBACV,CAAC;YACF,CAAC;QACF,CAAC;QACF,gBAAC;IAAD,CAAC,AA/iBD,IA+iBC;IA/iBY,iBAAS,YA+iBrB,CAAA;IAED,kCAAkC,GAAsB,EAAE,MAAkB,EAAE,UAAiB;QAC9F,EAAE,CAAC,CAAC,UAAU,KAAK,CAAC,CAAC,CAAC,CAAC;YACtB,MAAM,CAAC,IAAI,CAAC;QACb,CAAC;QACD,EAAE,CAAC,CAAC,CAAC,MAAM,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;YACpC,MAAM,CAAC,IAAI,CAAC;QACb,CAAC;QACD,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;YACzB,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,UAAU,KAAK,CAAC,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,EAAE,CAAC,CAAC,CAAC;gBACzD,MAAM,CAAC,IAAI,CAAC;YACb,CAAC;QACF,CAAC;QAED,IAAI,QAAQ,GAAG,oBAAoB,CAAC,UAAU,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;QAC5D,MAAM,CAAC,IAAI,UAAU,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;IACtC,CAAC;IAED,kCAAkC,GAAsB,EAAE,MAAe,EAAE,UAAiB;QAC3F,EAAE,CAAC,CAAC,UAAU,KAAK,CAAC,CAAC,CAAC,CAAC;YACtB,MAAM,CAAC,IAAI,CAAC;QACb,CAAC;QACD,EAAE,CAAC,CAAC,CAAC,MAAM,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;YACpC,MAAM,CAAC,IAAI,CAAC;QACb,CAAC;QACD,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;YACzB,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBACrB,MAAM,CAAC,IAAI,CAAC;YACb,CAAC;QACF,CAAC;QACD,MAAM,CAAC,IAAI,UAAU,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;IACpC,CAAC;IAED,IAAI,aAAa,GAAG,oBAAoB,CAAC,aAAa,CAAC;IACvD,IAAI,OAAO,GAAG,oBAAoB,CAAC,OAAO,CAAC;IAC3C,IAAI,iBAAiB,GAAG,oBAAoB,CAAC,iBAAiB,CAAC;IAE/D;QAKC,oBAAY,GAAsB,EAAE,MAAe;YAClD,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;YACf,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACvB,CAAC;QAEM,8CAAyB,GAAhC;YACC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC;QACjB,CAAC;QAEM,2CAAsB,GAA7B;YACC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;QACrB,CAAC;QAEM,kCAAa,GAApB;YACC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;QAC5B,CAAC;QAEM,uCAAkB,GAAzB,UAA0B,UAAiB;YAC1C,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC;QAChD,CAAC;QAEM,iCAAY,GAAnB,UAAoB,UAAiB;YACpC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC;QACpD,CAAC;QAEM,qCAAgB,GAAvB,UAAwB,UAAiB,EAAE,UAAiB;YAC3D,EAAE,CAAC,CAAC,UAAU,GAAG,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;gBAC1C,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,GAAG,CAAC,CAAC,CAAC,CAAC;YACpD,CAAC;YACD,MAAM,CAAC,UAAU,CAAC;QACnB,CAAC;QAEM,2BAAM,GAAb,UAAc,KAAiB;YAC9B,MAAM,CAAC,IAAI,KAAK,KAAK,CAAC;QACvB,CAAC;QAEM,sCAAiB,GAAxB,UAAyB,MAAa;YACrC,MAAM,CAAC,iBAAiB,CAAC,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;QAChD,CAAC;QACF,iBAAC;IAAD,CAAC,AA5CD,IA4CC;IA5CY,kBAAU,aA4CtB,CAAA;IAED;QAAA;QAoCA,CAAC;QA/BO,gDAAsB,GAA7B;YACC,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC;QAC/B,CAAC;QAEM,mDAAyB,GAAhC;YACC,MAAM,CAAC,IAAI,CAAC;QACb,CAAC;QAEM,uCAAa,GAApB;YACC,MAAM,CAAC,CAAC,CAAC;QACV,CAAC;QAEM,4CAAkB,GAAzB,UAA0B,UAAiB;YAC1C,MAAM,CAAC,CAAC,CAAC;QACV,CAAC;QAEM,sCAAY,GAAnB,UAAoB,UAAiB;YACpC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC;QACtB,CAAC;QAEM,0CAAgB,GAAvB,UAAwB,UAAiB,EAAE,UAAiB;YAC3D,MAAM,CAAC,CAAC,CAAC;QACV,CAAC;QAEM,gCAAM,GAAb,UAAc,KAAiB;YAC9B,MAAM,CAAC,KAAK,KAAK,IAAI,CAAC;QACvB,CAAC;QAEM,2CAAiB,GAAxB,UAAyB,MAAa;YACrC,MAAM,CAAC,CAAC,CAAC;QACV,CAAC;QAjCa,wBAAQ,GAAG,IAAI,eAAe,EAAE,CAAC;QAChC,sBAAM,GAAa,EAAE,CAAC;QAiCtC,sBAAC;IAAD,CAAC,AApCD,IAoCC;IAED;QAAA;QAqCA,CAAC;QAhCO,qDAAyB,GAAhC;YACC,MAAM,CAAC,IAAI,CAAC;QACb,CAAC;QAEM,kDAAsB,GAA7B;YACC,MAAM,CAAC,iBAAiB,CAAC,MAAM,CAAC;QACjC,CAAC;QAEM,yCAAa,GAApB;YACC,MAAM,CAAC,CAAC,CAAC;QACV,CAAC;QAEM,8CAAkB,GAAzB,UAA0B,UAAiB;YAC1C,MAAM,CAAC,CAAC,CAAC;QACV,CAAC;QAEM,wCAAY,GAAnB,UAAoB,UAAiB;YACpC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC;QACtB,CAAC;QAEM,4CAAgB,GAAvB,UAAwB,UAAiB,EAAE,UAAiB;YAC3D,MAAM,CAAC,UAAU,CAAC;QACnB,CAAC;QAEM,kCAAM,GAAb,UAAc,KAAiB;YAC9B,MAAM,CAAC,IAAI,KAAK,KAAK,CAAC;QACvB,CAAC;QAEM,6CAAiB,GAAxB,UAAyB,MAAa;YACrC,MAAM,CAAC,CAAC,CAAC;QACV,CAAC;QAjCa,0BAAQ,GAAG,IAAI,iBAAiB,EAAE,CAAC;QAClC,wBAAM,GAAc,CAAC,CAAC,CAAC,CAAC;QAkCxC,wBAAC;IAAD,CAAC,AArCD,IAqCC;IArCY,yBAAiB,oBAqC7B,CAAA;IAED,2BAA2B,YAAkB,EAAE,eAAgC;QAE9E,EAAE,CAAC,CAAC,CAAC,eAAe,IAAI,eAAe,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;YACtD,MAAM,CAAC,IAAI,CAAC;QACb,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,eAAe,CAAC,MAAM,KAAK,CAAC,IAAI,eAAe,CAAC,CAAC,CAAC,CAAC,UAAU,KAAK,CAAC,IAAI,eAAe,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,YAAY,CAAC,CAAC,CAAC;YAC5H,MAAM,CAAC,IAAI,CAAC;QACb,CAAC;QAED,MAAM,CAAC,eAAe,CAAC;IACxB,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport * as strings from 'vs/base/common/strings';\nimport {ILineTokens, IReadOnlyLineMarker, ITokensInflatorMap, LineToken} from 'vs/editor/common/editorCommon';\nimport {IMode, IState} from 'vs/editor/common/modes';\nimport * as TokensBinaryEncoding from 'vs/editor/common/model/tokensBinaryEncoding';\nimport {ModeTransition} from 'vs/editor/common/core/modeTransition';\n\nexport interface ILineEdit {\n\tstartColumn: number;\n\tendColumn: number;\n\ttext: string;\n\tforceMoveMarkers: boolean;\n}\n\nexport interface ILineMarker extends IReadOnlyLineMarker {\n\tid:string;\n\tcolumn:number;\n\tstickToPreviousCharacter:boolean;\n\n\toldLineNumber:number;\n\toldColumn:number;\n\n\tline:ModelLine;\n}\n\nexport interface IChangedMarkers {\n\t[markerId:string]: boolean;\n}\n\nexport interface ITextWithMarkers {\n\ttext: string;\n\tmarkers: ILineMarker[];\n}\n\ninterface ITokensAdjuster {\n\tadjust(toColumn:number, delta:number, minimumAllowedColumn:number): void;\n\tfinish(delta:number, lineTextLength:number): void;\n}\n\ninterface IMarkersAdjuster {\n\tadjustDelta(toColumn:number, delta:number, minimumAllowedColumn:number, moveSemantics:MarkerMoveSemantics): void;\n\tadjustSet(toColumn:number, newColumn:number, moveSemantics:MarkerMoveSemantics): void;\n\tfinish(delta:number, lineTextLength:number): void;\n}\n\nvar NO_OP_TOKENS_ADJUSTER: ITokensAdjuster = {\n\tadjust: () => {},\n\tfinish: () => {}\n};\nvar NO_OP_MARKERS_ADJUSTER: IMarkersAdjuster = {\n\tadjustDelta: () => {},\n\tadjustSet: () => {},\n\tfinish: () => {}\n};\n\nenum MarkerMoveSemantics {\n\tMarkerDefined = 0,\n\tForceMove = 1,\n\tForceStay = 2\n}\n\nexport class ModelLine {\n\tprivate _lineNumber:number;\n\tpublic get lineNumber():number { return this._lineNumber; }\n\n\tprivate _text:string;\n\tpublic get text():string { return this._text; }\n\n\tprivate _isInvalid:boolean;\n\tpublic get isInvalid():boolean { return this._isInvalid; }\n\tpublic set isInvalid(value:boolean) { this._isInvalid = value; }\n\n\tprivate _state:IState;\n\tprivate _modeTransitions:ModeTransition[];\n\tprivate _lineTokens:ILineTokens;\n\tprivate _markers:ILineMarker[];\n\n\tconstructor(lineNumber:number, text:string) {\n\t\tthis._lineNumber = lineNumber|0;\n\t\tthis._text = text;\n\t\tthis._isInvalid = false;\n\t\tthis._state = null;\n\t\tthis._modeTransitions = null;\n\t\tthis._lineTokens = null;\n\t\tthis._markers = null;\n\t}\n\n\t// --- BEGIN STATE\n\n\tpublic setState(state: IState): void {\n\t\tthis._state = state;\n\t}\n\n\tpublic getState(): IState {\n\t\treturn this._state || null;\n\t}\n\n\t// --- END STATE\n\n\t// --- BEGIN MODE TRANSITIONS\n\n\tpublic getModeTransitions(topLevelMode:IMode): ModeTransition[] {\n\t\tif (this._modeTransitions) {\n\t\t\treturn this._modeTransitions;\n\t\t} else {\n\t\t\treturn [new ModeTransition(0, topLevelMode)];\n\t\t}\n\t}\n\n\t// --- END MODE TRANSITIONS\n\n\t// --- BEGIN TOKENS\n\n\tpublic setTokens(map: ITokensInflatorMap, tokens: LineToken[], topLevelMode:IMode, modeTransitions:ModeTransition[]): void {\n\t\tthis._lineTokens = toLineTokensFromInflated(map, tokens, this._text.length);\n\t\tthis._modeTransitions = toModeTransitions(topLevelMode, modeTransitions);\n\t}\n\n\tprivate _setLineTokensFromDeflated(map:ITokensInflatorMap, tokens:number[]): void {\n\t\tthis._lineTokens = toLineTokensFromDeflated(map, tokens, this._text.length);\n\t}\n\n\tpublic getTokens(): ILineTokens {\n\t\tif (this._lineTokens) {\n\t\t\treturn this._lineTokens;\n\t\t}\n\t\tif (this._text.length === 0) {\n\t\t\treturn EmptyLineTokens.INSTANCE;\n\t\t}\n\t\treturn DefaultLineTokens.INSTANCE;\n\t}\n\n\t// --- END TOKENS\n\n\tprivate _createTokensAdjuster(): ITokensAdjuster {\n\t\tif (!this._lineTokens) {\n\t\t\t// This line does not have real tokens, so there is nothing to adjust\n\t\t\treturn NO_OP_TOKENS_ADJUSTER;\n\t\t}\n\n\t\tvar lineTokens = this._lineTokens;\n\n\t\tlet BIN = TokensBinaryEncoding;\n\t\tlet tokens = lineTokens.getBinaryEncodedTokens();\n\t\tlet tokensLength = tokens.length;\n\t\tlet tokensIndex = 0;\n\t\tlet currentTokenStartIndex = 0;\n\n\t\tlet adjust = (toColumn:number, delta:number, minimumAllowedColumn:number) => {\n\t\t\t// console.log('before call: tokensIndex: ' + tokensIndex + ': ' + String(this.getTokens()));\n\t\t\t// console.log('adjustTokens: ' + toColumn + ' with delta: ' + delta + ' and [' + minimumAllowedColumn + ']');\n\t\t\t// console.log('currentTokenStartIndex: ' + currentTokenStartIndex);\n\t\t\tlet minimumAllowedIndex = minimumAllowedColumn - 1;\n\n\t\t\twhile (currentTokenStartIndex < toColumn && tokensIndex < tokensLength) {\n\n\t\t\t\tif (currentTokenStartIndex > 0 && delta !== 0) {\n\t\t\t\t\t// adjust token's `startIndex` by `delta`\n\t\t\t\t\tlet deflatedType = (tokens[tokensIndex] / BIN.TYPE_OFFSET) & BIN.TYPE_MASK;\n\t\t\t\t\tlet newStartIndex = Math.max(minimumAllowedIndex, currentTokenStartIndex + delta);\n\t\t\t\t\tlet newToken = deflatedType * BIN.TYPE_OFFSET + newStartIndex * BIN.START_INDEX_OFFSET;\n\n\t\t\t\t\tif (delta < 0) {\n\t\t\t\t\t\t// pop all previous tokens that have become `collapsed`\n\t\t\t\t\t\twhile (tokensIndex > 0) {\n\t\t\t\t\t\t\tlet prevTokenStartIndex = (tokens[tokensIndex - 1] / BIN.START_INDEX_OFFSET) & BIN.START_INDEX_MASK;\n\t\t\t\t\t\t\tif (prevTokenStartIndex >= newStartIndex) {\n\t\t\t\t\t\t\t\t// Token at `tokensIndex` - 1 is now `collapsed` => pop it\n\t\t\t\t\t\t\t\ttokens.splice(tokensIndex - 1, 1);\n\t\t\t\t\t\t\t\ttokensLength--;\n\t\t\t\t\t\t\t\ttokensIndex--;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\ttokens[tokensIndex] = newToken;\n\t\t\t\t}\n\n\t\t\t\ttokensIndex++;\n\n\t\t\t\tif (tokensIndex < tokensLength) {\n\t\t\t\t\tcurrentTokenStartIndex = (tokens[tokensIndex] / BIN.START_INDEX_OFFSET) & BIN.START_INDEX_MASK;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// console.log('after call: tokensIndex: ' + tokensIndex + ': ' + String(this.getTokens()));\n\t\t};\n\n\t\tlet finish = (delta:number, lineTextLength:number) => {\n\t\t\tadjust(Number.MAX_VALUE, delta, 1);\n\t\t};\n\n\t\treturn {\n\t\t\tadjust: adjust,\n\t\t\tfinish: finish\n\t\t};\n\t}\n\n\tprivate _setText(text:string): void {\n\t\tthis._text = text;\n\n\t\tif (this._lineTokens) {\n\t\t\tlet BIN = TokensBinaryEncoding,\n\t\t\t\tmap = this._lineTokens.getBinaryEncodedTokensMap(),\n\t\t\t\ttokens = this._lineTokens.getBinaryEncodedTokens(),\n\t\t\t\tlineTextLength = this._text.length;\n\n\t\t\t// Remove overflowing tokens\n\t\t\twhile (tokens.length > 0) {\n\t\t\t\tlet lastTokenStartIndex = (tokens[tokens.length - 1] / BIN.START_INDEX_OFFSET) & BIN.START_INDEX_MASK;\n\t\t\t\tif (lastTokenStartIndex < lineTextLength) {\n\t\t\t\t\t// Valid token\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t// This token now overflows the text => remove it\n\t\t\t\ttokens.pop();\n\t\t\t}\n\n\t\t\tthis._setLineTokensFromDeflated(map, tokens);\n\t\t}\n\t}\n\n\t// private _printMarkers(): string {\n\t// \tif (!this._markers) {\n\t// \t\treturn '[]';\n\t// \t}\n\t// \tif (this._markers.length === 0) {\n\t// \t\treturn '[]';\n\t// \t}\n\n\t// \tvar markers = this._markers;\n\n\t// \tvar printMarker = (m:ILineMarker) => {\n\t// \t\tif (m.stickToPreviousCharacter) {\n\t// \t\t\treturn '|' + m.column;\n\t// \t\t}\n\t// \t\treturn m.column + '|';\n\t// \t};\n\t// \treturn '[' + markers.map(printMarker).join(', ') + ']';\n\t// }\n\n\tprivate _createMarkersAdjuster(changedMarkers:IChangedMarkers): IMarkersAdjuster {\n\t\tif (!this._markers) {\n\t\t\treturn NO_OP_MARKERS_ADJUSTER;\n\t\t}\n\t\tif (this._markers.length === 0) {\n\t\t\treturn NO_OP_MARKERS_ADJUSTER;\n\t\t}\n\n\t\tthis._markers.sort(ModelLine._compareMarkers);\n\n\t\tvar markers = this._markers;\n\t\tvar markersLength = markers.length;\n\t\tvar markersIndex = 0;\n\t\tvar marker = markers[markersIndex];\n\n\t\t// console.log('------------- INITIAL MARKERS: ' + this._printMarkers());\n\n\t\tlet adjustMarkerBeforeColumn = (toColumn:number, moveSemantics:MarkerMoveSemantics) => {\n\t\t\tif (marker.column < toColumn) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tif (marker.column > toColumn) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (moveSemantics === MarkerMoveSemantics.ForceMove) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (moveSemantics === MarkerMoveSemantics.ForceStay) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn marker.stickToPreviousCharacter;\n\t\t};\n\n\t\tlet adjustDelta = (toColumn:number, delta:number, minimumAllowedColumn:number, moveSemantics:MarkerMoveSemantics) => {\n\t\t\t// console.log('------------------------------');\n\t\t\t// console.log('adjustDelta called: toColumn: ' + toColumn + ', delta: ' + delta + ', minimumAllowedColumn: ' + minimumAllowedColumn + ', moveSemantics: ' + MarkerMoveSemantics[moveSemantics]);\n\t\t\t// console.log('BEFORE::: markersIndex: ' + markersIndex + ' : ' + this._printMarkers());\n\n\t\t\twhile (markersIndex < markersLength && adjustMarkerBeforeColumn(toColumn, moveSemantics)) {\n\t\t\t\tif (delta !== 0) {\n\t\t\t\t\tlet newColumn = Math.max(minimumAllowedColumn, marker.column + delta);\n\t\t\t\t\tif (marker.column !== newColumn) {\n\t\t\t\t\t\tchangedMarkers[marker.id] = true;\n\t\t\t\t\t\tmarker.oldLineNumber = marker.oldLineNumber || this._lineNumber;\n\t\t\t\t\t\tmarker.oldColumn = marker.oldColumn || marker.column;\n\t\t\t\t\t\tmarker.column = newColumn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tmarkersIndex++;\n\t\t\t\tif (markersIndex < markersLength) {\n\t\t\t\t\tmarker = markers[markersIndex];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// console.log('AFTER::: markersIndex: ' + markersIndex + ' : ' + this._printMarkers());\n\t\t};\n\n\t\tlet adjustSet = (toColumn:number, newColumn:number, moveSemantics:MarkerMoveSemantics) => {\n\t\t\t// console.log('------------------------------');\n\t\t\t// console.log('adjustSet called: toColumn: ' + toColumn + ', newColumn: ' + newColumn + ', moveSemantics: ' + MarkerMoveSemantics[moveSemantics]);\n\t\t\t// console.log('BEFORE::: markersIndex: ' + markersIndex + ' : ' + this._printMarkers());\n\n\t\t\twhile (markersIndex < markersLength && adjustMarkerBeforeColumn(toColumn, moveSemantics)) {\n\t\t\t\tif (marker.column !== newColumn) {\n\t\t\t\t\tchangedMarkers[marker.id] = true;\n\t\t\t\t\tmarker.oldLineNumber = marker.oldLineNumber || this._lineNumber;\n\t\t\t\t\tmarker.oldColumn = marker.oldColumn || marker.column;\n\t\t\t\t\tmarker.column = newColumn;\n\t\t\t\t}\n\n\t\t\t\tmarkersIndex++;\n\t\t\t\tif (markersIndex < markersLength) {\n\t\t\t\t\tmarker = markers[markersIndex];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// console.log('AFTER::: markersIndex: ' + markersIndex + ' : ' + this._printMarkers());\n\t\t};\n\n\t\tlet finish = (delta:number, lineTextLength:number) => {\n\t\t\tadjustDelta(Number.MAX_VALUE, delta, 1, MarkerMoveSemantics.MarkerDefined);\n\n\t\t\t// console.log('------------- FINAL MARKERS: ' + this._printMarkers());\n\t\t};\n\n\t\treturn {\n\t\t\tadjustDelta: adjustDelta,\n\t\t\tadjustSet: adjustSet,\n\t\t\tfinish: finish\n\t\t};\n\t}\n\n\tpublic applyEdits(changedMarkers: IChangedMarkers, edits:ILineEdit[]): number {\n\t\tlet deltaColumn = 0;\n\t\tlet resultText = this._text;\n\n\t\tlet tokensAdjuster = this._createTokensAdjuster();\n\t\tlet markersAdjuster = this._createMarkersAdjuster(changedMarkers);\n\n\t\tfor (let i = 0, len = edits.length; i < len; i++) {\n\t\t\tlet edit = edits[i];\n\n\t\t\t// console.log();\n\t\t\t// console.log('=============================');\n\t\t\t// console.log('EDIT #' + i + ' [ ' + edit.startColumn + ' -> ' + edit.endColumn + ' ] : <<<' + edit.text + '>>>, forceMoveMarkers: ' + edit.forceMoveMarkers);\n\t\t\t// console.log('deltaColumn: ' + deltaColumn);\n\n\t\t\tlet startColumn = deltaColumn + edit.startColumn;\n\t\t\tlet endColumn = deltaColumn + edit.endColumn;\n\t\t\tlet deletingCnt = endColumn - startColumn;\n\t\t\tlet insertingCnt = edit.text.length;\n\n\t\t\t// Adjust tokens & markers before this edit\n\t\t\t// console.log('Adjust tokens & markers before this edit');\n\t\t\ttokensAdjuster.adjust(edit.startColumn - 1, deltaColumn, 1);\n\t\t\tmarkersAdjuster.adjustDelta(edit.startColumn, deltaColumn, 1, edit.forceMoveMarkers ? MarkerMoveSemantics.ForceMove : (deletingCnt > 0 ? MarkerMoveSemantics.ForceStay : MarkerMoveSemantics.MarkerDefined));\n\n\t\t\t// Adjust tokens & markers for the common part of this edit\n\t\t\tlet commonLength = Math.min(deletingCnt, insertingCnt);\n\t\t\tif (commonLength > 0) {\n\t\t\t\t// console.log('Adjust tokens & markers for the common part of this edit');\n\t\t\t\ttokensAdjuster.adjust(edit.startColumn - 1 + commonLength, deltaColumn, startColumn);\n\n\t\t\t\tif (!edit.forceMoveMarkers) {\n\t\t\t\t\tmarkersAdjuster.adjustDelta(edit.startColumn + commonLength, deltaColumn, startColumn, edit.forceMoveMarkers ? MarkerMoveSemantics.ForceMove : (deletingCnt > insertingCnt ? MarkerMoveSemantics.ForceStay : MarkerMoveSemantics.MarkerDefined));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Perform the edit & update `deltaColumn`\n\t\t\tresultText = resultText.substring(0, startColumn - 1) + edit.text + resultText.substring(endColumn - 1);\n\t\t\tdeltaColumn += insertingCnt - deletingCnt;\n\n\t\t\t// Adjust tokens & markers inside this edit\n\t\t\t// console.log('Adjust tokens & markers inside this edit');\n\t\t\ttokensAdjuster.adjust(edit.endColumn, deltaColumn, startColumn);\n\t\t\tmarkersAdjuster.adjustSet(edit.endColumn, startColumn + insertingCnt, edit.forceMoveMarkers ? MarkerMoveSemantics.ForceMove : MarkerMoveSemantics.MarkerDefined);\n\t\t}\n\n\t\t// Wrap up tokens & markers; adjust remaining if needed\n\t\ttokensAdjuster.finish(deltaColumn, resultText.length);\n\t\tmarkersAdjuster.finish(deltaColumn, resultText.length);\n\n\t\t// Save the resulting text\n\t\tthis._setText(resultText);\n\n\t\treturn deltaColumn;\n\t}\n\n\tpublic split(changedMarkers: IChangedMarkers, splitColumn:number, forceMoveMarkers:boolean): ModelLine {\n\t\t// console.log('--> split @ ' + splitColumn + '::: ' + this._printMarkers());\n\t\tvar myText = this._text.substring(0, splitColumn - 1);\n\t\tvar otherText = this._text.substring(splitColumn - 1);\n\n\t\tvar otherMarkers: ILineMarker[] = null;\n\n\t\tif (this._markers) {\n\t\t\tthis._markers.sort(ModelLine._compareMarkers);\n\t\t\tfor (let i = 0, len = this._markers.length; i < len; i++) {\n\t\t\t\tlet marker = this._markers[i];\n\n\t\t\t\tif (\n\t\t\t\t\tmarker.column > splitColumn\n\t\t\t\t\t|| (\n\t\t\t\t\t\tmarker.column === splitColumn\n\t\t\t\t\t\t&& (\n\t\t\t\t\t\t\tforceMoveMarkers\n\t\t\t\t\t\t\t|| !marker.stickToPreviousCharacter\n\t\t\t\t\t\t)\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\tlet myMarkers = this._markers.slice(0, i);\n\t\t\t\t\totherMarkers = this._markers.slice(i);\n\t\t\t\t\tthis._markers = myMarkers;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (otherMarkers) {\n\t\t\t\tfor (let i = 0, len = otherMarkers.length; i < len; i++) {\n\t\t\t\t\tlet marker = otherMarkers[i];\n\n\t\t\t\t\tchangedMarkers[marker.id] = true;\n\t\t\t\t\tmarker.oldLineNumber = marker.oldLineNumber || this._lineNumber;\n\t\t\t\t\tmarker.oldColumn = marker.oldColumn || marker.column;\n\t\t\t\t\tmarker.column -= splitColumn - 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis._setText(myText);\n\n\t\tvar otherLine = new ModelLine(this._lineNumber + 1, otherText);\n\t\tif (otherMarkers) {\n\t\t\totherLine.addMarkers(otherMarkers);\n\t\t}\n\t\treturn otherLine;\n\t}\n\n\tpublic append(changedMarkers: IChangedMarkers, other:ModelLine): void {\n\t\t// console.log('--> append: THIS :: ' + this._printMarkers());\n\t\t// console.log('--> append: OTHER :: ' + this._printMarkers());\n\t\tvar thisTextLength = this._text.length;\n\t\tthis._setText(this._text + other._text);\n\n\t\tlet otherLineTokens = other._lineTokens;\n\t\tif (otherLineTokens) {\n\t\t\t// Other has real tokens\n\t\t\tlet otherTokens = otherLineTokens.getBinaryEncodedTokens();\n\n\t\t\t// Adjust other tokens\n\t\t\tif (thisTextLength > 0) {\n\t\t\t\tlet BIN = TokensBinaryEncoding;\n\n\t\t\t\tfor (let i = 0, len = otherTokens.length; i < len; i++) {\n\t\t\t\t\tlet token = otherTokens[i];\n\n\t\t\t\t\tlet deflatedStartIndex = (token / BIN.START_INDEX_OFFSET) & BIN.START_INDEX_MASK;\n\t\t\t\t\tlet deflatedType = (token / BIN.TYPE_OFFSET) & BIN.TYPE_MASK;\n\t\t\t\t\tlet newStartIndex = deflatedStartIndex + thisTextLength;\n\t\t\t\t\tlet newToken = deflatedType * BIN.TYPE_OFFSET + newStartIndex * BIN.START_INDEX_OFFSET;\n\n\t\t\t\t\totherTokens[i] = newToken;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Append other tokens\n\t\t\tlet myLineTokens = this._lineTokens;\n\t\t\tif (myLineTokens) {\n\t\t\t\t// I have real tokens\n\t\t\t\tthis._setLineTokensFromDeflated(myLineTokens.getBinaryEncodedTokensMap(), myLineTokens.getBinaryEncodedTokens().concat(otherTokens));\n\t\t\t} else {\n\t\t\t\t// I don't have real tokens\n\t\t\t\tthis._setLineTokensFromDeflated(otherLineTokens.getBinaryEncodedTokensMap(), otherTokens);\n\t\t\t}\n\t\t}\n\n\t\tif (other._markers) {\n\t\t\t// Other has markers\n\t\t\tlet otherMarkers = other._markers;\n\n\t\t\t// Adjust other markers\n\t\t\tfor (let i = 0, len = otherMarkers.length; i < len; i++) {\n\t\t\t\tlet marker = otherMarkers[i];\n\n\t\t\t\tchangedMarkers[marker.id] = true;\n\t\t\t\tmarker.oldLineNumber = marker.oldLineNumber || other.lineNumber;\n\t\t\t\tmarker.oldColumn = marker.oldColumn || marker.column;\n\t\t\t\tmarker.column += thisTextLength;\n\t\t\t}\n\n\t\t\tthis.addMarkers(otherMarkers);\n\t\t}\n\t}\n\n\tpublic addMarker(marker:ILineMarker): void {\n\t\tmarker.line = this;\n\t\tif (!this._markers) {\n\t\t\tthis._markers = [marker];\n\t\t} else {\n\t\t\tthis._markers.push(marker);\n\t\t}\n\t}\n\n\tpublic addMarkers(markers:ILineMarker[]): void {\n\t\tif (markers.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar i:number,\n\t\t\tlen:number;\n\n\t\tfor (i = 0, len = markers.length; i < len; i++) {\n\t\t\tmarkers[i].line = this;\n\t\t}\n\n\t\tif (!this._markers) {\n\t\t\tthis._markers = markers.slice(0);\n\t\t} else {\n\t\t\tthis._markers = this._markers.concat(markers);\n\t\t}\n\t}\n\n\tprivate static _compareMarkers(a:ILineMarker, b:ILineMarker): number {\n\t\tif (a.column === b.column) {\n\t\t\treturn (a.stickToPreviousCharacter ? 0 : 1) - (b.stickToPreviousCharacter ? 0 : 1);\n\t\t}\n\t\treturn a.column - b.column;\n\t}\n\n\tpublic removeMarker(marker:ILineMarker): void {\n\t\tif (!this._markers) {\n\t\t\treturn;\n\t\t}\n\t\tlet index = this._indexOfMarkerId(marker.id);\n\t\tif (index >= 0) {\n\t\t\tmarker.line = null;\n\t\t\tthis._markers.splice(index, 1);\n\t\t}\n\t\tif (this._markers.length === 0) {\n\t\t\tthis._markers = null;\n\t\t}\n\t}\n\n\tpublic removeMarkers(deleteMarkers: {[markerId:string]:boolean;}): void {\n\t\tif (!this._markers) {\n\t\t\treturn;\n\t\t}\n\t\tfor (let i = 0, len = this._markers.length; i < len; i++) {\n\t\t\tlet marker = this._markers[i];\n\n\t\t\tif (deleteMarkers[marker.id]) {\n\t\t\t\tmarker.line = null;\n\t\t\t\tthis._markers.splice(i, 1);\n\t\t\t\tlen--;\n\t\t\t\ti--;\n\t\t\t}\n\t\t}\n\t\tif (this._markers.length === 0) {\n\t\t\tthis._markers = null;\n\t\t}\n\t}\n\n\tpublic getMarkers(): ILineMarker[] {\n\t\tif (!this._markers) {\n\t\t\treturn [];\n\t\t}\n\t\treturn this._markers.slice(0);\n\t}\n\n\tpublic updateLineNumber(changedMarkers: IChangedMarkers, newLineNumber: number): void {\n\t\tif (this._markers) {\n\t\t\tvar markers = this._markers,\n\t\t\t\ti: number,\n\t\t\t\tlen: number,\n\t\t\t\tmarker: ILineMarker;\n\n\t\t\tfor (i = 0, len = markers.length; i < len; i++) {\n\t\t\t\tmarker = markers[i];\n\n\t\t\t\tchangedMarkers[marker.id] = true;\n\t\t\t\tmarker.oldLineNumber = marker.oldLineNumber || this._lineNumber;\n\t\t\t}\n\t\t}\n\n\t\tthis._lineNumber = newLineNumber;\n\t}\n\n\tpublic deleteLine(changedMarkers: IChangedMarkers, setMarkersColumn:number, setMarkersOldLineNumber:number): ILineMarker[] {\n\t\t// console.log('--> deleteLine: ');\n\t\tif (this._markers) {\n\t\t\tvar markers = this._markers,\n\t\t\t\ti: number,\n\t\t\t\tlen: number,\n\t\t\t\tmarker: ILineMarker;\n\n\t\t\t// Mark all these markers as changed\n\t\t\tfor (i = 0, len = markers.length; i < len; i++) {\n\t\t\t\tmarker = markers[i];\n\n\t\t\t\tchangedMarkers[marker.id] = true;\n\t\t\t\tmarker.oldColumn = marker.oldColumn || marker.column;\n\t\t\t\tmarker.oldLineNumber = marker.oldLineNumber || setMarkersOldLineNumber;\n\t\t\t\tmarker.column = setMarkersColumn;\n\t\t\t}\n\n\t\t\treturn markers;\n\t\t}\n\t\treturn [];\n\t}\n\n\tprivate _indexOfMarkerId(markerId:string): number {\n\t\tlet markers = this._markers;\n\t\tfor (let i = 0, len = markers.length; i < len; i++) {\n\t\t\tif (markers[i].id === markerId) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction toLineTokensFromInflated(map:ITokensInflatorMap, tokens:LineToken[], textLength:number): ILineTokens {\n\tif (textLength === 0) {\n\t\treturn null;\n\t}\n\tif (!tokens || tokens.length === 0) {\n\t\treturn null;\n\t}\n\tif (tokens.length === 1) {\n\t\tif (tokens[0].startIndex === 0 && tokens[0].type === '') {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tlet deflated = TokensBinaryEncoding.deflateArr(map, tokens);\n\treturn new LineTokens(map, deflated);\n}\n\nfunction toLineTokensFromDeflated(map:ITokensInflatorMap, tokens:number[], textLength:number): ILineTokens {\n\tif (textLength === 0) {\n\t\treturn null;\n\t}\n\tif (!tokens || tokens.length === 0) {\n\t\treturn null;\n\t}\n\tif (tokens.length === 1) {\n\t\tif (tokens[0] === 0) {\n\t\t\treturn null;\n\t\t}\n\t}\n\treturn new LineTokens(map, tokens);\n}\n\nvar getStartIndex = TokensBinaryEncoding.getStartIndex;\nvar getType = TokensBinaryEncoding.getType;\nvar findIndexOfOffset = TokensBinaryEncoding.findIndexOfOffset;\n\nexport class LineTokens implements ILineTokens {\n\n\tprivate map:ITokensInflatorMap;\n\tprivate _tokens:number[];\n\n\tconstructor(map:ITokensInflatorMap, tokens:number[]) {\n\t\tthis.map = map;\n\t\tthis._tokens = tokens;\n\t}\n\n\tpublic getBinaryEncodedTokensMap(): ITokensInflatorMap {\n\t\treturn this.map;\n\t}\n\n\tpublic getBinaryEncodedTokens(): number[] {\n\t\treturn this._tokens;\n\t}\n\n\tpublic getTokenCount(): number {\n\t\treturn this._tokens.length;\n\t}\n\n\tpublic getTokenStartIndex(tokenIndex:number): number {\n\t\treturn getStartIndex(this._tokens[tokenIndex]);\n\t}\n\n\tpublic getTokenType(tokenIndex:number): string {\n\t\treturn getType(this.map, this._tokens[tokenIndex]);\n\t}\n\n\tpublic getTokenEndIndex(tokenIndex:number, textLength:number): number {\n\t\tif (tokenIndex + 1 < this._tokens.length) {\n\t\t\treturn getStartIndex(this._tokens[tokenIndex + 1]);\n\t\t}\n\t\treturn textLength;\n\t}\n\n\tpublic equals(other:ILineTokens): boolean {\n\t\treturn this === other;\n\t}\n\n\tpublic findIndexOfOffset(offset:number): number {\n\t\treturn findIndexOfOffset(this._tokens, offset);\n\t}\n}\n\nclass EmptyLineTokens implements ILineTokens {\n\n\tpublic static INSTANCE = new EmptyLineTokens();\n\tprivate static TOKENS = <number[]>[];\n\n\tpublic getBinaryEncodedTokens(): number[] {\n\t\treturn EmptyLineTokens.TOKENS;\n\t}\n\n\tpublic getBinaryEncodedTokensMap(): ITokensInflatorMap {\n\t\treturn null;\n\t}\n\n\tpublic getTokenCount(): number {\n\t\treturn 0;\n\t}\n\n\tpublic getTokenStartIndex(tokenIndex:number): number {\n\t\treturn 0;\n\t}\n\n\tpublic getTokenType(tokenIndex:number): string {\n\t\treturn strings.empty;\n\t}\n\n\tpublic getTokenEndIndex(tokenIndex:number, textLength:number): number {\n\t\treturn 0;\n\t}\n\n\tpublic equals(other:ILineTokens): boolean {\n\t\treturn other === this;\n\t}\n\n\tpublic findIndexOfOffset(offset:number): number {\n\t\treturn 0;\n\t}\n}\n\nexport class DefaultLineTokens implements ILineTokens {\n\n\tpublic static INSTANCE = new DefaultLineTokens();\n\tprivate static TOKENS = <number[]> [0];\n\n\tpublic getBinaryEncodedTokensMap(): ITokensInflatorMap {\n\t\treturn null;\n\t}\n\n\tpublic getBinaryEncodedTokens(): number[] {\n\t\treturn DefaultLineTokens.TOKENS;\n\t}\n\n\tpublic getTokenCount(): number {\n\t\treturn 1;\n\t}\n\n\tpublic getTokenStartIndex(tokenIndex:number): number {\n\t\treturn 0;\n\t}\n\n\tpublic getTokenType(tokenIndex:number): string {\n\t\treturn strings.empty;\n\t}\n\n\tpublic getTokenEndIndex(tokenIndex:number, textLength:number): number {\n\t\treturn textLength;\n\t}\n\n\tpublic equals(other:ILineTokens): boolean {\n\t\treturn this === other;\n\t}\n\n\tpublic findIndexOfOffset(offset:number): number {\n\t\treturn 0;\n\t}\n\n}\n\nfunction toModeTransitions(topLevelMode:IMode, modeTransitions:ModeTransition[]): ModeTransition[] {\n\n\tif (!modeTransitions || modeTransitions.length === 0) {\n\t\treturn null;\n\t} else if (modeTransitions.length === 1 && modeTransitions[0].startIndex === 0 && modeTransitions[0].mode === topLevelMode) {\n\t\treturn null;\n\t}\n\n\treturn modeTransitions;\n}\n"]}