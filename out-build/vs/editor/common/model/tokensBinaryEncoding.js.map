{"version":3,"file":"vs/editor/common/model/tokensBinaryEncoding.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/editor/common/model/tokensBinaryEncoding.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {onUnexpectedError} from 'vs/base/common/errors';\nimport * as strings from 'vs/base/common/strings';\nimport {ITokensInflatorMap, LineToken, ViewLineToken} from 'vs/editor/common/editorCommon';\n\nexport const START_INDEX_MASK = 0xffffffff;\nexport const TYPE_MASK = 0xffff;\nexport const START_INDEX_OFFSET = 1;\nexport const TYPE_OFFSET = Math.pow(2, 32);\n\nconst DEFAULT_TOKEN = new LineToken(0, '');\nconst DEFAULT_VIEW_TOKEN = new ViewLineToken(0, '');\nconst INFLATED_TOKENS_EMPTY_TEXT:ViewLineToken[] = [];\nconst DEFLATED_TOKENS_EMPTY_TEXT:number[] = [];\nconst INFLATED_TOKENS_NON_EMPTY_TEXT:ViewLineToken[] = [DEFAULT_VIEW_TOKEN];\nconst DEFLATED_TOKENS_NON_EMPTY_TEXT:number[] = [0];\n\nexport function deflateArr(map:ITokensInflatorMap, tokens:LineToken[]): number[] {\n\tif (tokens.length === 0) {\n\t\treturn DEFLATED_TOKENS_EMPTY_TEXT;\n\t}\n\tif (tokens.length === 1 && tokens[0].startIndex === 0 && !tokens[0].type) {\n\t\treturn DEFLATED_TOKENS_NON_EMPTY_TEXT;\n\t}\n\n\tvar i:number,\n\t\tlen:number,\n\t\tdeflatedToken:number,\n\t\tdeflated:number,\n\t\ttoken:LineToken,\n\t\tinflateMap = map._inflate,\n\t\tdeflateMap = map._deflate,\n\t\tprevStartIndex:number = -1,\n\t\tresult:number[] = new Array(tokens.length);\n\n\tfor (i = 0, len = tokens.length; i < len; i++) {\n\t\ttoken = tokens[i];\n\n\t\tif (token.startIndex <= prevStartIndex) {\n\t\t\ttoken.startIndex = prevStartIndex + 1;\n\t\t\tonUnexpectedError({\n\t\t\t\tmessage: 'Invalid tokens detected',\n\t\t\t\ttokens: tokens\n\t\t\t});\n\t\t}\n\n\t\tif (deflateMap.hasOwnProperty(token.type)) {\n\t\t\tdeflatedToken = deflateMap[token.type];\n\t\t} else {\n\t\t\tdeflatedToken = inflateMap.length;\n\t\t\tdeflateMap[token.type] = deflatedToken;\n\t\t\tinflateMap.push(token.type);\n\t\t}\n\n\t\t// http://stackoverflow.com/a/2803010\n\t\t// All numbers in JavaScript are actually IEEE-754 compliant floating-point doubles.\n\t\t// These have a 53-bit mantissa which should mean that any integer value with a magnitude\n\t\t// of approximately 9 quadrillion or less -- more specifically, 9,007,199,254,740,991 --\n\t\t// will be represented accurately.\n\n\t\t// http://stackoverflow.com/a/6729252\n\t\t// Bitwise operations cast numbers to 32bit representation in JS\n\n\t\t// 32 bits for startIndex => up to 2^32 = 4,294,967,296\n\t\t// 16 bits for token => up to 2^16 = 65,536\n\n\t\t// [token][startIndex]\n\t\tdeflated = deflatedToken * TYPE_OFFSET + token.startIndex * START_INDEX_OFFSET;\n\n\t\tresult[i] = deflated;\n\n\t\tprevStartIndex = token.startIndex;\n\t}\n\n\treturn result;\n}\n\nexport function inflate(map:ITokensInflatorMap, binaryEncodedToken:number): LineToken {\n\tif (binaryEncodedToken === 0) {\n\t\treturn DEFAULT_TOKEN;\n\t}\n\n\tvar startIndex = (binaryEncodedToken / START_INDEX_OFFSET) & START_INDEX_MASK;\n\tvar deflatedType = (binaryEncodedToken / TYPE_OFFSET) & TYPE_MASK;\n\n\treturn new LineToken(startIndex, map._inflate[deflatedType]);\n}\n\nexport function getStartIndex(binaryEncodedToken:number): number {\n\treturn (binaryEncodedToken / START_INDEX_OFFSET) & START_INDEX_MASK;\n}\n\nexport function getType(map:ITokensInflatorMap, binaryEncodedToken:number): string {\n\tvar deflatedType = (binaryEncodedToken / TYPE_OFFSET) & TYPE_MASK;\n\tif (deflatedType === 0) {\n\t\treturn strings.empty;\n\t}\n\treturn map._inflate[deflatedType];\n}\n\nexport function inflateArr(map:ITokensInflatorMap, binaryEncodedTokens:number[]): ViewLineToken[] {\n\tif (binaryEncodedTokens.length === 0) {\n\t\treturn INFLATED_TOKENS_EMPTY_TEXT;\n\t}\n\tif (binaryEncodedTokens.length === 1 && binaryEncodedTokens[0] === 0) {\n\t\treturn INFLATED_TOKENS_NON_EMPTY_TEXT;\n\t}\n\n\tlet result: ViewLineToken[] = [];\n\tconst inflateMap = map._inflate;\n\n\tfor (let i = 0, len = binaryEncodedTokens.length; i < len; i++) {\n\t\tlet deflated = binaryEncodedTokens[i];\n\n\t\tlet startIndex = (deflated / START_INDEX_OFFSET) & START_INDEX_MASK;\n\t\tlet deflatedType = (deflated / TYPE_OFFSET) & TYPE_MASK;\n\n\t\tresult.push(new ViewLineToken(startIndex, inflateMap[deflatedType]));\n\t}\n\n\treturn result;\n}\n\nexport function findIndexOfOffset(binaryEncodedTokens:number[], offset:number): number {\n\treturn findIndexInSegmentsArray(binaryEncodedTokens, offset);\n}\n\nexport function sliceAndInflate(map:ITokensInflatorMap, binaryEncodedTokens:number[], startOffset:number, endOffset:number, deltaStartIndex:number): ViewLineToken[] {\n\tif (binaryEncodedTokens.length === 0) {\n\t\treturn INFLATED_TOKENS_EMPTY_TEXT;\n\t}\n\tif (binaryEncodedTokens.length === 1 && binaryEncodedTokens[0] === 0) {\n\t\treturn INFLATED_TOKENS_NON_EMPTY_TEXT;\n\t}\n\n\tlet startIndex = findIndexInSegmentsArray(binaryEncodedTokens, startOffset);\n\tlet result: ViewLineToken[] = [];\n\tconst inflateMap = map._inflate;\n\n\tlet originalToken = binaryEncodedTokens[startIndex];\n\tlet deflatedType = (originalToken / TYPE_OFFSET) & TYPE_MASK;\n\tlet newStartIndex = 0;\n\tresult.push(new ViewLineToken(newStartIndex, inflateMap[deflatedType]));\n\n\tfor (let i = startIndex + 1, len = binaryEncodedTokens.length; i < len; i++) {\n\t\toriginalToken = binaryEncodedTokens[i];\n\t\tlet originalStartIndex = (originalToken / START_INDEX_OFFSET) & START_INDEX_MASK;\n\n\t\tif (originalStartIndex >= endOffset) {\n\t\t\tbreak;\n\t\t}\n\n\t\tdeflatedType = (originalToken / TYPE_OFFSET) & TYPE_MASK;\n\t\tnewStartIndex = originalStartIndex - startOffset + deltaStartIndex;\n\t\tresult.push(new ViewLineToken(newStartIndex, inflateMap[deflatedType]));\n\t}\n\n\treturn result;\n}\n\nexport function findIndexInSegmentsArray(arr:number[], desiredIndex: number):number {\n\n\tvar low = 0,\n\t\thigh = arr.length - 1,\n\t\tmid:number,\n\t\tvalue:number;\n\n\twhile (low < high) {\n\n\t\tmid = low + Math.ceil((high - low)/2);\n\n\t\tvalue = arr[mid] & 0xffffffff;\n\n\t\tif (value > desiredIndex) {\n\t\t\thigh = mid - 1;\n\t\t} else {\n\t\t\tlow = mid;\n\t\t}\n\t}\n\n\treturn low;\n}"]}