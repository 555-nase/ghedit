{"version":3,"file":"indentationGuesser.js","sourceRoot":"","sources":["../../../../../src/vs/editor/common/model/indentationGuesser.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport * as editorCommon from 'vs/editor/common/editorCommon';\n\nconst __space = ' '.charCodeAt(0);\nconst __tab = '\\t'.charCodeAt(0);\n\n/**\n * Compute the diff in spaces between two line's indentation.\n */\nfunction spacesDiff(a:string, aLength:number, b:string, bLength:number): number {\n\n\t// This can go both ways (e.g.):\n\t//  - a: \"\\t\"\n\t//  - b: \"\\t    \"\n\t//  => This should count 1 tab and 4 spaces\n\n\tlet i:number;\n\n\tfor (i = 0; i < aLength && i < bLength; i++) {\n\t\tlet aCharCode = a.charCodeAt(i);\n\t\tlet bCharCode = b.charCodeAt(i);\n\n\t\tif (aCharCode !== bCharCode) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tlet aSpacesCnt = 0, aTabsCount = 0;\n\tfor (let j = i; j < aLength; j++) {\n\t\tlet aCharCode = a.charCodeAt(j);\n\t\tif (aCharCode === __space) {\n\t\t\taSpacesCnt++;\n\t\t} else {\n\t\t\taTabsCount++;\n\t\t}\n\t}\n\n\tlet bSpacesCnt = 0, bTabsCount = 0;\n\tfor (let j = i; j < bLength; j++) {\n\t\tlet bCharCode = b.charCodeAt(j);\n\t\tif (bCharCode === __space) {\n\t\t\tbSpacesCnt++;\n\t\t} else {\n\t\t\tbTabsCount++;\n\t\t}\n\t}\n\n\tif (aSpacesCnt > 0 && aTabsCount > 0) {\n\t\treturn 0;\n\t}\n\tif (bSpacesCnt > 0 && bTabsCount > 0) {\n\t\treturn 0;\n\t}\n\n\tlet tabsDiff = Math.abs(aTabsCount - bTabsCount);\n\tlet spacesDiff = Math.abs(aSpacesCnt - bSpacesCnt);\n\n\tif (tabsDiff === 0) {\n\t\treturn spacesDiff;\n\t}\n\tif (spacesDiff % tabsDiff === 0) {\n\t\treturn spacesDiff / tabsDiff;\n\t}\n\treturn 0;\n}\n\nexport function guessIndentation(lines:string[], defaultTabSize:number, defaultInsertSpaces:boolean): editorCommon.IGuessedIndentation {\n\tlet linesIndentedWithTabsCount = 0;\t\t\t\t// number of lines that contain at least one tab in indentation\n\tlet linesIndentedWithSpacesCount = 0;\t\t\t// number of lines that contain only spaces in indentation\n\n\tlet previousLineText = '';\t\t\t\t\t\t// content of latest line that contained non-whitespace chars\n\tlet previousLineIndentation = 0;\t\t\t\t// index at which latest line contained the first non-whitespace char\n\n\tconst ALLOWED_TAB_SIZE_GUESSES = [2, 4, 6, 8];\t// limit guesses for `tabSize` to 2, 4, 6 or 8.\n\tconst MAX_ALLOWED_TAB_SIZE_GUESS = 8;\t\t\t// max(2,4,6,8) = 8\n\n\tlet spacesDiffCount = [0,0,0,0,0,0,0,0,0];\t\t// `tabSize` scores\n\n\tfor (let i = 0, len = lines.length; i < len; i++) {\n\t\tlet currentLineText = lines[i];\n\n\t\tlet currentLineHasContent = false;\t\t\t// does `currentLineText` contain non-whitespace chars\n\t\tlet currentLineIndentation = 0;\t\t\t\t// index at which `currentLineText` contains the first non-whitespace char\n\t\tlet currentLineSpacesCount = 0;\t\t\t\t// count of spaces found in `currentLineText` indentation\n\t\tlet currentLineTabsCount = 0;\t\t\t\t// count of tabs found in `currentLineText` indentation\n\t\tfor (let j = 0, lenJ = currentLineText.length; j < lenJ; j++) {\n\t\t\tlet charCode = currentLineText.charCodeAt(j);\n\n\t\t\tif (charCode === __tab) {\n\t\t\t\tcurrentLineTabsCount++;\n\t\t\t} else if (charCode === __space) {\n\t\t\t\tcurrentLineSpacesCount++;\n\t\t\t} else {\n\t\t\t\t// Hit non whitespace character on this line\n\t\t\t\tcurrentLineHasContent = true;\n\t\t\t\tcurrentLineIndentation = j;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// Ignore empty or only whitespace lines\n\t\tif (!currentLineHasContent) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (currentLineTabsCount > 0) {\n\t\t\tlinesIndentedWithTabsCount++;\n\t\t} else if (currentLineSpacesCount > 1) {\n\t\t\tlinesIndentedWithSpacesCount++;\n\t\t}\n\n\t\tlet currentSpacesDiff = spacesDiff(previousLineText, previousLineIndentation, currentLineText, currentLineIndentation);\n\t\tif (currentSpacesDiff <= MAX_ALLOWED_TAB_SIZE_GUESS) {\n\t\t\tspacesDiffCount[currentSpacesDiff]++;\n\t\t}\n\n\t\tpreviousLineText = currentLineText;\n\t\tpreviousLineIndentation = currentLineIndentation;\n\t}\n\n\t// Take into account the last line as well\n\tlet deltaSpacesCount = spacesDiff(previousLineText, previousLineIndentation, '', 0);\n\tif (deltaSpacesCount <= MAX_ALLOWED_TAB_SIZE_GUESS) {\n\t\tspacesDiffCount[deltaSpacesCount]++;\n\t}\n\n\tlet insertSpaces = defaultInsertSpaces;\n\tif (linesIndentedWithTabsCount !== linesIndentedWithSpacesCount) {\n\t\tinsertSpaces = (linesIndentedWithTabsCount < linesIndentedWithSpacesCount);\n\t}\n\n\tlet tabSize = defaultTabSize;\n\tlet tabSizeScore = (insertSpaces ? 0 : 0.1 * lines.length);\n\n\t// console.log(\"score threshold: \" + tabSizeScore);\n\n\tALLOWED_TAB_SIZE_GUESSES.forEach((possibleTabSize) => {\n\t\tlet possibleTabSizeScore = spacesDiffCount[possibleTabSize];\n\t\tif (possibleTabSizeScore > tabSizeScore) {\n\t\t\ttabSizeScore = possibleTabSizeScore;\n\t\t\ttabSize = possibleTabSize;\n\t\t}\n\t});\n\n\n\t// console.log('--------------------------');\n\t// console.log('linesIndentedWithTabsCount: ' + linesIndentedWithTabsCount + ', linesIndentedWithSpacesCount: ' + linesIndentedWithSpacesCount);\n\t// console.log('spacesDiffCount: ' + spacesDiffCount);\n\t// console.log('tabSize: ' + tabSize + ', tabSizeScore: ' + tabSizeScore);\n\n\treturn {\n\t\tinsertSpaces: insertSpaces,\n\t\ttabSize: tabSize\n\t};\n}\n"]}