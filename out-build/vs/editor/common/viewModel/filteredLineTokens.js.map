{"version":3,"file":"vs/editor/common/viewModel/filteredLineTokens.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/editor/common/viewModel/filteredLineTokens.ts"],"names":[],"mappings":";IAAA;;;oGAGgG;IAChG,YAAY,CAAC;IAKb;QAAA;QAYA,CAAC;QAXA;;WAEG;QACW,yBAAM,GAApB,UAAqB,QAAoB,EAAE,WAAkB,EAAE,SAAgB,EAAE,eAAsB;YACtG,IAAI,cAAc,GAAG,oBAAoB,CAAC,eAAe,CAAC,QAAQ,CAAC,yBAAyB,EAAE,EAAE,QAAQ,CAAC,sBAAsB,EAAE,EAAE,WAAW,EAAE,SAAS,EAAE,eAAe,CAAC,CAAC;YAC5K,MAAM,CAAC,IAAI,6BAAc,CACxB,cAAc,EACd,eAAe,EACf,SAAS,GAAG,WAAW,GAAG,eAAe,CACzC,CAAC;QACH,CAAC;QACF,yBAAC;IAAD,CAAC,AAZD,IAYC;IAZY,0BAAkB,qBAY9B,CAAA;IAED;QAAA;QAUA,CAAC;QARc,iCAAM,GAApB,UAAqB,QAAoB,EAAE,UAAiB;YAC3D,IAAI,cAAc,GAAG,oBAAoB,CAAC,UAAU,CAAC,QAAQ,CAAC,yBAAyB,EAAE,EAAE,QAAQ,CAAC,sBAAsB,EAAE,CAAC,CAAC;YAC9H,MAAM,CAAC,IAAI,6BAAc,CACxB,cAAc,EACd,CAAC,EACD,UAAU,CACV,CAAC;QACH,CAAC;QACF,iCAAC;IAAD,CAAC,AAVD,IAUC;IAVY,kCAA0B,6BAUtC,CAAA","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {ILineTokens, ViewLineTokens} from 'vs/editor/common/editorCommon';\nimport * as TokensBinaryEncoding from 'vs/editor/common/model/tokensBinaryEncoding';\n\nexport class FilteredLineTokens {\n\t/**\n\t * [startOffset; endOffset) (i.e. do not include endOffset)\n\t */\n\tpublic static create(original:ILineTokens, startOffset:number, endOffset:number, deltaStartIndex:number): ViewLineTokens {\n\t\tlet inflatedTokens = TokensBinaryEncoding.sliceAndInflate(original.getBinaryEncodedTokensMap(), original.getBinaryEncodedTokens(), startOffset, endOffset, deltaStartIndex);\n\t\treturn new ViewLineTokens(\n\t\t\tinflatedTokens,\n\t\t\tdeltaStartIndex,\n\t\t\tendOffset - startOffset + deltaStartIndex\n\t\t);\n\t}\n}\n\nexport class IdentityFilteredLineTokens {\n\n\tpublic static create(original:ILineTokens, textLength:number): ViewLineTokens {\n\t\tlet inflatedTokens = TokensBinaryEncoding.inflateArr(original.getBinaryEncodedTokensMap(), original.getBinaryEncodedTokens());\n\t\treturn new ViewLineTokens(\n\t\t\tinflatedTokens,\n\t\t\t0,\n\t\t\ttextLength\n\t\t);\n\t}\n}\n"]}