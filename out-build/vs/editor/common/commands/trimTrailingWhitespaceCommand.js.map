{"version":3,"file":"vs/editor/common/commands/trimTrailingWhitespaceCommand.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/editor/common/commands/trimTrailingWhitespaceCommand.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport * as strings from 'vs/base/common/strings';\nimport {EditOperation} from 'vs/editor/common/core/editOperation';\nimport {Range} from 'vs/editor/common/core/range';\nimport * as editorCommon from 'vs/editor/common/editorCommon';\n\nexport class TrimTrailingWhitespaceCommand implements editorCommon.ICommand {\n\n\tprivate selection:editorCommon.IEditorSelection;\n\tprivate selectionId:string;\n\n\tconstructor(selection:editorCommon.IEditorSelection) {\n\t\tthis.selection = selection;\n\t}\n\n\tpublic getEditOperations(model:editorCommon.ITokenizedModel, builder:editorCommon.IEditOperationBuilder):void {\n\t\tvar ops = trimTrailingWhitespace(model, []);\n\t\tfor (var i = 0, len = ops.length; i < len; i++) {\n\t\t\tvar op = ops[i];\n\n\t\t\tbuilder.addEditOperation(op.range, op.text);\n\t\t}\n\n\t\tthis.selectionId = builder.trackSelection(this.selection);\n\t}\n\n\tpublic computeCursorState(model:editorCommon.ITokenizedModel, helper: editorCommon.ICursorStateComputerData):editorCommon.IEditorSelection {\n\t\treturn helper.getTrackedSelection(this.selectionId);\n\t}\n}\n\n/**\n * Generate commands for trimming trailing whitespace on a model and ignore lines on which cursors are sitting.\n */\nexport function trimTrailingWhitespace(model:editorCommon.ITextModel, cursors: editorCommon.IPosition[]): editorCommon.IIdentifiedSingleEditOperation[] {\n\t// Sort cursors ascending\n\tcursors.sort((a, b) => {\n\t\tif (a.lineNumber === b.lineNumber) {\n\t\t\treturn a.column - b.column;\n\t\t}\n\t\treturn a.lineNumber - b.lineNumber;\n\t});\n\n\t// Reduce multiple cursors on the same line and only keep the last one on the line\n\tfor (var i = cursors.length - 2; i >= 0; i--) {\n\t\tif (cursors[i].lineNumber === cursors[i + 1].lineNumber) {\n\t\t\t// Remove cursor at `i`\n\t\t\tcursors.splice(i, 1);\n\t\t}\n\t}\n\n\tvar r:editorCommon.IIdentifiedSingleEditOperation[] = [],\n\t\tcursorIndex = 0,\n\t\tcursorLen = cursors.length,\n\t\tlineNumber:number,\n\t\tlineCount:number,\n\t\tlineContent:string,\n\t\tminEditColumn:number,\n\t\tmaxLineColumn:number,\n\t\tfromColumn:number,\n\t\t// toColumn:number,\n\t\tlastNonWhitespaceIndex:number;\n\n\tfor (lineNumber = 1, lineCount = model.getLineCount(); lineNumber <= lineCount; lineNumber++) {\n\t\tlineContent = model.getLineContent(lineNumber);\n\t\tmaxLineColumn = lineContent.length + 1;\n\t\tminEditColumn = 0;\n\n\t\tif (cursorIndex < cursorLen && cursors[cursorIndex].lineNumber === lineNumber) {\n\t\t\tminEditColumn = cursors[cursorIndex].column;\n\t\t\tcursorIndex++;\n\t\t\tif (minEditColumn === maxLineColumn) {\n\t\t\t\t// The cursor is at the end of the line => no edits for sure on this line\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\n\t\tif (lineContent.length === 0) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tlastNonWhitespaceIndex = strings.lastNonWhitespaceIndex(lineContent);\n\n\t\tfromColumn = 0;\n\t\tif (lastNonWhitespaceIndex === -1) {\n\t\t\t// Entire line is whitespace\n\t\t\tfromColumn = 1;\n\t\t} else if (lastNonWhitespaceIndex !== lineContent.length - 1) {\n\t\t\t// There is trailing whitespace\n\t\t\tfromColumn = lastNonWhitespaceIndex + 2;\n\t\t} else {\n\t\t\t// There is no trailing whitespace\n\t\t\tcontinue;\n\t\t}\n\n\t\tfromColumn = Math.max(minEditColumn, fromColumn);\n\t\tr.push(EditOperation.delete(new Range(\n\t\t\tlineNumber, fromColumn,\n\t\t\tlineNumber, maxLineColumn\n\t\t)));\n\t}\n\n\treturn r;\n}"]}