{"version":3,"file":"vs/editor/common/commands/surroundSelectionCommand.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/editor/common/commands/surroundSelectionCommand.ts"],"names":[],"mappings":";IAAA;;;oGAGgG;IAChG,YAAY,CAAC;IAMb;QAKC,kCAAY,KAAsB,EAAE,mBAA0B,EAAE,kBAAyB;YACxF,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;YACpB,IAAI,CAAC,oBAAoB,GAAG,mBAAmB,CAAC;YAChD,IAAI,CAAC,mBAAmB,GAAG,kBAAkB,CAAC;QAC/C,CAAC;QAEM,oDAAiB,GAAxB,UAAyB,KAAqB,EAAE,OAA6B;YAC5E,OAAO,CAAC,gBAAgB,CAAC,IAAI,aAAK,CACjC,IAAI,CAAC,MAAM,CAAC,eAAe,EAC3B,IAAI,CAAC,MAAM,CAAC,WAAW,EACvB,IAAI,CAAC,MAAM,CAAC,eAAe,EAC3B,IAAI,CAAC,MAAM,CAAC,WAAW,CACvB,EAAE,IAAI,CAAC,oBAAoB,CAAC,CAAC;YAE9B,OAAO,CAAC,gBAAgB,CAAC,IAAI,aAAK,CACjC,IAAI,CAAC,MAAM,CAAC,aAAa,EACzB,IAAI,CAAC,MAAM,CAAC,SAAS,EACrB,IAAI,CAAC,MAAM,CAAC,aAAa,EACzB,IAAI,CAAC,MAAM,CAAC,SAAS,CACrB,EAAE,IAAI,CAAC,mBAAmB,CAAC,CAAC;QAC9B,CAAC;QAEM,qDAAkB,GAAzB,UAA0B,KAAsB,EAAE,MAAgC;YACjF,IAAI,qBAAqB,GAAG,MAAM,CAAC,wBAAwB,EAAE,CAAC;YAC9D,IAAI,mBAAmB,GAAG,qBAAqB,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;YACzD,IAAI,oBAAoB,GAAG,qBAAqB,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;YAE1D,MAAM,CAAC,IAAI,qBAAS,CACnB,mBAAmB,CAAC,aAAa,EACjC,mBAAmB,CAAC,SAAS,EAC7B,oBAAoB,CAAC,aAAa,EAClC,oBAAoB,CAAC,SAAS,GAAG,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAChE,CAAC;QACH,CAAC;QACF,+BAAC;IAAD,CAAC,AAvCD,IAuCC;IAvCY,gCAAwB,2BAuCpC,CAAA","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {Range} from 'vs/editor/common/core/range';\nimport {Selection} from 'vs/editor/common/core/selection';\nimport {ICommand, ICursorStateComputerData, IEditOperationBuilder, IEditorSelection, ITokenizedModel} from 'vs/editor/common/editorCommon';\n\nexport class SurroundSelectionCommand implements ICommand {\n\tprivate _range: IEditorSelection;\n\tprivate _charBeforeSelection: string;\n\tprivate _charAfterSelection: string;\n\n\tconstructor(range:IEditorSelection, charBeforeSelection:string, charAfterSelection:string) {\n\t\tthis._range = range;\n\t\tthis._charBeforeSelection = charBeforeSelection;\n\t\tthis._charAfterSelection = charAfterSelection;\n\t}\n\n\tpublic getEditOperations(model:ITokenizedModel, builder:IEditOperationBuilder): void {\n\t\tbuilder.addEditOperation(new Range(\n\t\t\tthis._range.startLineNumber,\n\t\t\tthis._range.startColumn,\n\t\t\tthis._range.startLineNumber,\n\t\t\tthis._range.startColumn\n\t\t), this._charBeforeSelection);\n\n\t\tbuilder.addEditOperation(new Range(\n\t\t\tthis._range.endLineNumber,\n\t\t\tthis._range.endColumn,\n\t\t\tthis._range.endLineNumber,\n\t\t\tthis._range.endColumn\n\t\t), this._charAfterSelection);\n\t}\n\n\tpublic computeCursorState(model: ITokenizedModel, helper: ICursorStateComputerData): IEditorSelection {\n\t\tvar inverseEditOperations = helper.getInverseEditOperations();\n\t\tvar firstOperationRange = inverseEditOperations[0].range;\n\t\tvar secondOperationRange = inverseEditOperations[1].range;\n\n\t\treturn new Selection(\n\t\t\tfirstOperationRange.endLineNumber,\n\t\t\tfirstOperationRange.endColumn,\n\t\t\tsecondOperationRange.endLineNumber,\n\t\t\tsecondOperationRange.endColumn - this._charAfterSelection.length\n\t\t);\n\t}\n}\n"]}