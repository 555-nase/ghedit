{"version":3,"file":"vs/editor/common/commands/replaceCommand.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/editor/common/commands/replaceCommand.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {Selection} from 'vs/editor/common/core/selection';\nimport * as editorCommon from 'vs/editor/common/editorCommon';\n\nexport class ReplaceCommand implements editorCommon.ICommand {\n\n\tprivate _range: editorCommon.IEditorRange;\n\tprivate _text: string;\n\n\tconstructor(range: editorCommon.IEditorRange, text: string) {\n\t\tthis._range = range;\n\t\tthis._text = text;\n\t}\n\n\tpublic getText():string {\n\t\treturn this._text;\n\t}\n\n\tpublic getRange():editorCommon.IEditorRange {\n\t\treturn this._range;\n\t}\n\n\tpublic setRange(newRange:editorCommon.IEditorRange): void {\n\t\tthis._range = newRange;\n\t}\n\n\tpublic getEditOperations(model: editorCommon.ITokenizedModel, builder: editorCommon.IEditOperationBuilder): void {\n\t\tbuilder.addEditOperation(this._range, this._text);\n\t}\n\n\tpublic computeCursorState(model: editorCommon.ITokenizedModel, helper: editorCommon.ICursorStateComputerData): editorCommon.IEditorSelection {\n\t\tvar inverseEditOperations = helper.getInverseEditOperations();\n\t\tvar srcRange = inverseEditOperations[0].range;\n\t\treturn new Selection(\n\t\t\tsrcRange.endLineNumber,\n\t\t\tsrcRange.endColumn,\n\t\t\tsrcRange.endLineNumber,\n\t\t\tsrcRange.endColumn\n\t\t);\n\t}\n}\n\nexport class ReplaceCommandWithoutChangingPosition extends ReplaceCommand {\n\n\tconstructor(range: editorCommon.IEditorRange, text: string) {\n\t\tsuper(range, text);\n\t}\n\n\tpublic computeCursorState(model: editorCommon.ITokenizedModel, helper: editorCommon.ICursorStateComputerData): editorCommon.IEditorSelection {\n\t\tvar inverseEditOperations = helper.getInverseEditOperations();\n\t\tvar srcRange = inverseEditOperations[0].range;\n\t\treturn new Selection(\n\t\t\tsrcRange.startLineNumber,\n\t\t\tsrcRange.startColumn,\n\t\t\tsrcRange.startLineNumber,\n\t\t\tsrcRange.startColumn\n\t\t);\n\t}\n}\n\nexport class ReplaceCommandWithOffsetCursorState extends ReplaceCommand {\n\n\tprivate _columnDeltaOffset: number;\n\tprivate _lineNumberDeltaOffset: number;\n\n\tconstructor(range: editorCommon.IEditorRange, text: string, lineNumberDeltaOffset: number, columnDeltaOffset: number) {\n\t\tsuper(range, text);\n\t\tthis._columnDeltaOffset = columnDeltaOffset;\n\t\tthis._lineNumberDeltaOffset = lineNumberDeltaOffset;\n\t}\n\n\tpublic computeCursorState(model: editorCommon.ITokenizedModel, helper: editorCommon.ICursorStateComputerData): editorCommon.IEditorSelection {\n\t\tvar inverseEditOperations = helper.getInverseEditOperations();\n\t\tvar srcRange = inverseEditOperations[0].range;\n\t\treturn new Selection(\n\t\t\tsrcRange.endLineNumber + this._lineNumberDeltaOffset,\n\t\t\tsrcRange.endColumn + this._columnDeltaOffset,\n\t\t\tsrcRange.endLineNumber + this._lineNumberDeltaOffset,\n\t\t\tsrcRange.endColumn + this._columnDeltaOffset\n\t\t);\n\t}\n}\n\nexport class ReplaceCommandThatPreservesSelection extends ReplaceCommand {\n\n\tprivate _initialSelection: editorCommon.IEditorSelection;\n\tprivate _selectionId: string;\n\n\tconstructor(editRange: editorCommon.IEditorRange, text: string, initialSelection: editorCommon.IEditorSelection) {\n\t\tsuper(editRange, text);\n\t\tthis._initialSelection = initialSelection;\n\t}\n\n\tpublic getEditOperations(model: editorCommon.ITokenizedModel, builder: editorCommon.IEditOperationBuilder): void {\n\t\tsuper.getEditOperations(model, builder);\n\n\t\tthis._selectionId = builder.trackSelection(this._initialSelection);\n\t}\n\n\tpublic computeCursorState(model: editorCommon.ITokenizedModel, helper: editorCommon.ICursorStateComputerData): editorCommon.IEditorSelection {\n\t\treturn helper.getTrackedSelection(this._selectionId);\n\t}\n}\n"]}