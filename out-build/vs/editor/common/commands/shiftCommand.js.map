{"version":3,"file":"shiftCommand.js","sourceRoot":"","sources":["../../../../../src/vs/editor/common/commands/shiftCommand.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport * as strings from 'vs/base/common/strings';\nimport {CursorMoveHelper} from 'vs/editor/common/controller/cursorMoveHelper';\nimport {Range} from 'vs/editor/common/core/range';\nimport {Selection} from 'vs/editor/common/core/selection';\nimport {ICommand, ICursorStateComputerData, IEditOperationBuilder, IEditorSelection, ITokenizedModel} from 'vs/editor/common/editorCommon';\nimport {getRawEnterActionAtPosition} from 'vs/editor/common/modes/supports/onEnter';\n\nexport interface IShiftCommandOpts {\n\tisUnshift: boolean;\n\ttabSize: number;\n\toneIndent: string;\n}\n\nexport class ShiftCommand implements ICommand {\n\n\tpublic static unshiftIndentCount(line:string, column:number, tabSize:number): number {\n\t\t// Determine the visible column where the content starts\n\t\tvar contentStartVisibleColumn = CursorMoveHelper.visibleColumnFromColumn2(line, column, tabSize);\n\n\t\tvar desiredTabStop = CursorMoveHelper.prevTabColumn(contentStartVisibleColumn, tabSize);\n\n\t\t// The `desiredTabStop` is a multiple of `tabSize` => determine the number of indents\n\t\treturn desiredTabStop / tabSize;\n\t}\n\n\tpublic static shiftIndentCount(line:string, column:number, tabSize:number): number {\n\t\t// Determine the visible column where the content starts\n\t\tvar contentStartVisibleColumn = CursorMoveHelper.visibleColumnFromColumn2(line, column, tabSize);\n\n\t\tvar desiredTabStop = CursorMoveHelper.nextTabColumn(contentStartVisibleColumn, tabSize);\n\n\t\t// The `desiredTabStop` is a multiple of `tabSize` => determine the number of indents\n\t\treturn desiredTabStop / tabSize;\n\t}\n\n\tprivate _opts: IShiftCommandOpts;\n\tprivate _selection: IEditorSelection;\n\tprivate _selectionId: string;\n\tprivate _useLastEditRangeForCursorEndPosition: boolean;\n\n\tconstructor(range: IEditorSelection, opts:IShiftCommandOpts) {\n\t\tthis._opts = opts;\n\t\tthis._selection = range;\n\t\tthis._useLastEditRangeForCursorEndPosition = false;\n\t}\n\n\tpublic getEditOperations(model: ITokenizedModel, builder: IEditOperationBuilder): void {\n\t\tlet startLine = this._selection.startLineNumber,\n\t\t\tendLine = this._selection.endLineNumber,\n\t\t\t_SPACE = ' '.charCodeAt(0);\n\n\t\tif (this._selection.endColumn === 1 && startLine !== endLine) {\n\t\t\tendLine = endLine - 1;\n\t\t}\n\n\t\tlet lineNumber:number,\n\t\t\ttabSize = this._opts.tabSize,\n\t\t\toneIndent = this._opts.oneIndent,\n\t\t\tshouldIndentEmptyLines = (startLine === endLine);\n\n\t\t// indents[i] represents i * oneIndent\n\t\tlet indents: string[] = ['', oneIndent];\n\n\t\t// if indenting or outdenting on a whitespace only line\n\t\tif (this._selection.isEmpty()) {\n\t\t\tif (/^\\s*$/.test(model.getLineContent(startLine))) {\n\t\t\t\tthis._useLastEditRangeForCursorEndPosition = true;\n\t\t\t}\n\t\t}\n\n\t\t// keep track of previous line's \"miss-alignment\"\n\t\tlet previousLineExtraSpaces = 0, extraSpaces = 0;\n\t\tfor (lineNumber = startLine; lineNumber <= endLine; lineNumber++, previousLineExtraSpaces = extraSpaces) {\n\t\t\textraSpaces = 0;\n\t\t\tlet lineText = model.getLineContent(lineNumber);\n\t\t\tlet indentationEndIndex = strings.firstNonWhitespaceIndex(lineText);\n\n\t\t\tif (this._opts.isUnshift && (lineText.length === 0 || indentationEndIndex === 0)) {\n\t\t\t\t// empty line or line with no leading whitespace => nothing to do\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (!shouldIndentEmptyLines && !this._opts.isUnshift && lineText.length === 0) {\n\t\t\t\t// do not indent empty lines => nothing to do\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (indentationEndIndex === -1) {\n\t\t\t\t// the entire line is whitespace\n\t\t\t\tindentationEndIndex = lineText.length;\n\t\t\t}\n\n\t\t\tif (lineNumber > 1) {\n\t\t\t\tlet contentStartVisibleColumn = CursorMoveHelper.visibleColumnFromColumn2(lineText, indentationEndIndex + 1, tabSize);\n\t\t\t\tif (contentStartVisibleColumn % tabSize !== 0) {\n\t\t\t\t\t// The current line is \"miss-aligned\", so let's see if this is expected...\n\t\t\t\t\t// This can only happen when it has trailing commas in the indent\n\t\t\t\t\tlet enterAction = getRawEnterActionAtPosition(model, lineNumber - 1, model.getLineMaxColumn(lineNumber - 1));\n\t\t\t\t\tif (enterAction) {\n\t\t\t\t\t\textraSpaces = previousLineExtraSpaces;\n\t\t\t\t\t\tif (enterAction.appendText) {\n\t\t\t\t\t\t\tfor (let j = 0, lenJ = enterAction.appendText.length; j < lenJ && extraSpaces < tabSize; j++) {\n\t\t\t\t\t\t\t\tif (enterAction.appendText.charCodeAt(j) === _SPACE) {\n\t\t\t\t\t\t\t\t\textraSpaces++;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (enterAction.removeText) {\n\t\t\t\t\t\t\textraSpaces = Math.max(0, extraSpaces - enterAction.removeText);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Act as if `prefixSpaces` is not part of the indentation\n\t\t\t\t\t\tfor (let j = 0; j < extraSpaces; j++) {\n\t\t\t\t\t\t\tif (indentationEndIndex === 0 || lineText.charCodeAt(indentationEndIndex - 1) !== _SPACE) {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tindentationEndIndex--;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tif (this._opts.isUnshift && indentationEndIndex === 0) {\n\t\t\t\t// line with no leading whitespace => nothing to do\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tlet desiredIndentCount: number;\n\t\t\tif (this._opts.isUnshift) {\n\t\t\t\tdesiredIndentCount = ShiftCommand.unshiftIndentCount(lineText, indentationEndIndex + 1, tabSize);\n\t\t\t} else {\n\t\t\t\tdesiredIndentCount = ShiftCommand.shiftIndentCount(lineText, indentationEndIndex + 1, tabSize);\n\t\t\t}\n\n\t\t\t// Fill `indents`, as needed\n\t\t\tfor (let j = indents.length; j <= desiredIndentCount; j++) {\n\t\t\t\tindents[j] = indents[j-1] + oneIndent;\n\t\t\t}\n\n\t\t\tbuilder.addEditOperation(new Range(lineNumber, 1, lineNumber, indentationEndIndex + 1), indents[desiredIndentCount]);\n\t\t}\n\n\t\tthis._selectionId = builder.trackSelection(this._selection);\n\t}\n\n\tpublic computeCursorState(model: ITokenizedModel, helper: ICursorStateComputerData): IEditorSelection {\n\t\tif (this._useLastEditRangeForCursorEndPosition) {\n\t\t\tvar lastOp = helper.getInverseEditOperations()[0];\n\t\t\treturn new Selection(lastOp.range.endLineNumber, lastOp.range.endColumn, lastOp.range.endLineNumber, lastOp.range.endColumn);\n\t\t}\n\t\treturn helper.getTrackedSelection(this._selectionId);\n\t}\n}\n"]}