{"version":3,"file":"arrays.js","sourceRoot":"","sources":["../../../../../src/vs/editor/common/core/arrays.ts"],"names":[],"mappings":";IAAA;;;oGAGgG;IAChG,YAAY,CAAC;IAEb,IAAiB,MAAM,CAoCtB;IApCD,WAAiB,MAAM,EAAC,CAAC;QAExB;;;;;;;;;;WAUG;QACH,kCAAyC,GAA8B,EAAE,YAAoB;YAE5F,IAAI,GAAG,GAAG,CAAC,CAAC;YACZ,IAAI,IAAI,GAAG,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC;YAE1B,EAAE,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC;gBACf,MAAM,CAAC,CAAC,CAAC;YACV,CAAC;YAED,OAAO,GAAG,GAAG,IAAI,EAAE,CAAC;gBAEnB,IAAI,GAAG,GAAG,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;gBAE5C,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,UAAU,GAAG,YAAY,CAAC,CAAC,CAAC;oBACxC,IAAI,GAAG,GAAG,GAAG,CAAC,CAAC;gBAChB,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACP,GAAG,GAAG,GAAG,CAAC;gBACX,CAAC;YACF,CAAC;YAED,MAAM,CAAC,GAAG,CAAC;QACZ,CAAC;QArBe,+BAAwB,2BAqBvC,CAAA;IAEF,CAAC,EApCgB,MAAM,GAAN,cAAM,KAAN,cAAM,QAoCtB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nexport namespace Arrays {\n\n\t/**\n\t * Given a sorted array of natural number segments, find the segment containing a natural number.\n\t *    For example, the segments [0, 5), [5, 9), [9, infinity) will be represented in the following manner:\n\t *       [{ startIndex: 0 }, { startIndex: 5 }, { startIndex: 9 }]\n\t *    Searching for 0, 1, 2, 3 or 4 will return 0.\n\t *    Searching for 5, 6, 7 or 8 will return 1.\n\t *    Searching for 9, 10, 11, ... will return 2.\n\t * @param arr A sorted array representing natural number segments\n\t * @param desiredIndex The search\n\t * @return The index of the containing segment in the array.\n\t */\n\texport function findIndexInSegmentsArray(arr: { startIndex: number; }[], desiredIndex: number): number {\n\n\t\tlet low = 0;\n\t\tlet high = arr.length - 1;\n\n\t\tif (high <= 0) {\n\t\t\treturn 0;\n\t\t}\n\n\t\twhile (low < high) {\n\n\t\t\tlet mid = low + Math.ceil((high - low) / 2);\n\n\t\t\tif (arr[mid].startIndex > desiredIndex) {\n\t\t\t\thigh = mid - 1;\n\t\t\t} else {\n\t\t\t\tlow = mid;\n\t\t\t}\n\t\t}\n\n\t\treturn low;\n\t}\n\n}\n"]}