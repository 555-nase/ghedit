{"version":3,"file":"vs/editor/common/services/resourceService.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/editor/common/services/resourceService.ts"],"names":[],"mappings":";IAAA;;;oGAGgG;IAChG,YAAY,CAAC;IAQb,mBAAmB;IAER,sBAAc,GAAG;QAC3B,KAAK,EAAE,gBAAgB;QACvB,OAAO,EAAE,kBAAkB;QAC3B,OAAO,EAAE,kBAAkB;KAC3B,CAAC;IAiBS,wBAAgB,GAAG,+BAAe,CAAmB,iBAAiB,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {IEmitterEvent, ListenerCallback, ListenerUnbind} from 'vs/base/common/eventEmitter';\nimport {IDisposable} from 'vs/base/common/lifecycle';\nimport URI from 'vs/base/common/uri';\nimport {ServiceIdentifier, createDecorator} from 'vs/platform/instantiation/common/instantiation';\nimport {IMirrorModel} from 'vs/editor/common/editorCommon';\n\n// Resource Service\n\nexport var ResourceEvents = {\n\tADDED: 'resource.added',\n\tREMOVED: 'resource.removed',\n\tCHANGED: 'resource.changed'\n};\n\nexport interface IResourceAddedEvent {\n\turl: URI;\n\taddedElement: IMirrorModel;\n}\n\nexport interface IResourceRemovedEvent {\n\turl: URI;\n\tremovedElement: IMirrorModel;\n}\n\nexport interface IResourceChangedEvent {\n\turl: URI;\n\toriginalEvents: IEmitterEvent[];\n}\n\nexport var IResourceService = createDecorator<IResourceService>('resourceService');\n\nexport interface IResourceService {\n\tserviceId: ServiceIdentifier<any>;\n\tinsert(url: URI, element: IMirrorModel): void;\n\tget(url: URI): IMirrorModel;\n\tall(): IMirrorModel[];\n\tcontains(url: URI): boolean;\n\tremove(url: URI): void;\n\taddListener_(eventType: 'resource.added', listener: (event: IResourceAddedEvent) => void): ListenerUnbind;\n\taddListener_(eventType: 'resource.removed', listener: (event: IResourceRemovedEvent) => void): ListenerUnbind;\n\taddListener_(eventType: 'resource.changed', listener: (event: IResourceChangedEvent) => void): ListenerUnbind;\n\taddListener_(eventType: string, listener: ListenerCallback): ListenerUnbind;\n\taddListener2_(eventType: 'resource.added', listener: (event: IResourceAddedEvent) => void): IDisposable;\n\taddListener2_(eventType: 'resource.removed', listener: (event: IResourceRemovedEvent) => void): IDisposable;\n\taddListener2_(eventType: 'resource.changed', listener: (event: IResourceChangedEvent) => void): IDisposable;\n\taddListener2_(eventType: string, listener: ListenerCallback): IDisposable;\n}\n\n"]}