{"version":3,"file":"modeService.js","sourceRoot":"","sources":["../../../../../src/vs/editor/common/services/modeService.ts"],"names":[],"mappings":";IAAA;;;oGAGgG;IAChG,YAAY,CAAC;IAYF,oBAAY,GAAG,+BAAe,CAAe,aAAa,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport Event from 'vs/base/common/event';\nimport {IDisposable} from 'vs/base/common/lifecycle';\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport {ServiceIdentifier, createDecorator} from 'vs/platform/instantiation/common/instantiation';\nimport * as modes from 'vs/editor/common/modes';\nimport {ILanguage} from 'vs/editor/common/modes/monarch/monarchTypes';\nimport {IRichEditConfiguration} from 'vs/editor/common/modes/supports/richEditSupport';\nimport {IEditorWorkerService} from 'vs/editor/common/services/editorWorkerService';\nimport {IModelService} from 'vs/editor/common/services/modelService';\n\nexport var IModeService = createDecorator<IModeService>('modeService');\n\nexport interface IModeLookupResult {\n\tmodeId: string;\n\tisInstantiated: boolean;\n}\n\nexport interface ILanguageExtensionPoint {\n\tid: string;\n\textensions?: string[];\n\tfilenames?: string[];\n\tfilenamePatterns?: string[];\n\tfirstLine?: string;\n\taliases?: string[];\n\tmimetypes?: string[];\n\tconfiguration?: string;\n}\n\nexport interface IValidLanguageExtensionPoint {\n\tid: string;\n\textensions: string[];\n\tfilenames: string[];\n\tfilenamePatterns: string[];\n\tfirstLine: string;\n\taliases: string[];\n\tmimetypes: string[];\n\tconfiguration: string;\n}\n\nexport interface IModeService {\n\tserviceId: ServiceIdentifier<any>;\n\n\tonDidAddModes: Event<string[]>;\n\tonDidCreateMode: Event<modes.IMode>;\n\n\tconfigureMode(modeName: string, options: any): void;\n\tconfigureModeById(modeId: string, options: any): void;\n\tconfigureAllModes(config:any): void;\n\tgetConfigurationForMode(modeId:string): any;\n\n\t// --- reading\n\tisRegisteredMode(mimetypeOrModeId: string): boolean;\n\tisCompatMode(modeId: string): boolean;\n\tgetRegisteredModes(): string[];\n\tgetRegisteredLanguageNames(): string[];\n\tgetExtensions(alias: string): string[];\n\tgetMimeForMode(modeId: string): string;\n\tgetLanguageName(modeId:string): string;\n\tgetModeIdForLanguageName(alias:string): string;\n\tgetModeId(commaSeparatedMimetypesOrCommaSeparatedIds: string): string;\n\tgetConfigurationFiles(modeId: string): string[];\n\n\t// --- instantiation\n\tlookup(commaSeparatedMimetypesOrCommaSeparatedIds: string): IModeLookupResult[];\n\tgetMode(commaSeparatedMimetypesOrCommaSeparatedIds: string): modes.IMode;\n\tgetOrCreateMode(commaSeparatedMimetypesOrCommaSeparatedIds: string): TPromise<modes.IMode>;\n\tgetOrCreateModeByLanguageName(languageName: string): TPromise<modes.IMode>;\n\tgetOrCreateModeByFilenameOrFirstLine(filename: string, firstLine?:string): TPromise<modes.IMode>;\n\n\tregisterRichEditSupport(modeId: string, support: IRichEditConfiguration): IDisposable;\n\tregisterTokenizationSupport(modeId: string, callback: (mode: modes.IMode) => modes.ITokenizationSupport): IDisposable;\n\tregisterMonarchDefinition(modelService: IModelService, editorWorkerService: IEditorWorkerService, modeId:string, language:ILanguage): IDisposable;\n}\n"]}