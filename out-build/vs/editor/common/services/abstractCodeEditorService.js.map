{"version":3,"file":"vs/editor/common/services/abstractCodeEditorService.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/editor/common/services/abstractCodeEditorService.ts"],"names":[],"mappings":";IAAA;;;oGAGgG;IAChG,YAAY,CAAC;IAMb;QAQC;YAPO,cAAS,GAAG,sCAAkB,CAAC;YAQrC,IAAI,CAAC,YAAY,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YACxC,IAAI,CAAC,gBAAgB,GAAG,IAAI,eAAO,EAAqB,CAAC;YACzD,IAAI,CAAC,mBAAmB,GAAG,IAAI,eAAO,EAAqB,CAAC;QAC7D,CAAC;QAEM,iDAAa,GAApB,UAAqB,MAAyB;YAC7C,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,GAAG,MAAM,CAAC;YAC3C,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACpC,CAAC;QAED,sBAAW,sDAAe;iBAA1B;gBACC,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC;YACpC,CAAC;;;WAAA;QAEM,oDAAgB,GAAvB,UAAwB,MAAyB;YAChD,EAAE,CAAC,CAAC,OAAO,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC;gBAC9C,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACvC,CAAC;QACF,CAAC;QAED,sBAAW,yDAAkB;iBAA7B;gBACC,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC;YACvC,CAAC;;;WAAA;QAEM,iDAAa,GAApB,UAAqB,QAAgB;YACpC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,CAAC;QAC5C,CAAC;QAEM,mDAAe,GAAtB;YAAA,iBAEC;YADA,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,GAAG,CAAC,UAAA,EAAE,IAAI,OAAA,KAAI,CAAC,YAAY,CAAC,EAAE,CAAC,EAArB,CAAqB,CAAC,CAAC;QACxE,CAAC;QAKF,gCAAC;IAAD,CAAC,AA5CD,IA4CC;IA5CqB,iCAAyB,4BA4C9C,CAAA","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport Event, {Emitter} from 'vs/base/common/event';\nimport {ICommonCodeEditor, IDecorationRenderOptions, IModelDecorationOptions} from 'vs/editor/common/editorCommon';\nimport {ICodeEditorService} from 'vs/editor/common/services/codeEditorService';\n\nexport abstract class AbstractCodeEditorService implements ICodeEditorService {\n\tpublic serviceId = ICodeEditorService;\n\tprivate _onCodeEditorAdd: Emitter<ICommonCodeEditor>;\n\tprivate _onCodeEditorRemove: Emitter<ICommonCodeEditor>;\n\tprivate _codeEditors: {\n\t\t[editorId: string]: ICommonCodeEditor;\n\t};\n\n\tconstructor() {\n\t\tthis._codeEditors = Object.create(null);\n\t\tthis._onCodeEditorAdd = new Emitter<ICommonCodeEditor>();\n\t\tthis._onCodeEditorRemove = new Emitter<ICommonCodeEditor>();\n\t}\n\n\tpublic addCodeEditor(editor: ICommonCodeEditor): void {\n\t\tthis._codeEditors[editor.getId()] = editor;\n\t\tthis._onCodeEditorAdd.fire(editor);\n\t}\n\n\tpublic get onCodeEditorAdd(): Event<ICommonCodeEditor> {\n\t\treturn this._onCodeEditorAdd.event;\n\t}\n\n\tpublic removeCodeEditor(editor: ICommonCodeEditor): void {\n\t\tif (delete this._codeEditors[editor.getId()]) {\n\t\t\tthis._onCodeEditorRemove.fire(editor);\n\t\t}\n\t}\n\n\tpublic get onCodeEditorRemove(): Event<ICommonCodeEditor>{\n\t\treturn this._onCodeEditorRemove.event;\n\t}\n\n\tpublic getCodeEditor(editorId: string): ICommonCodeEditor {\n\t\treturn this._codeEditors[editorId] || null;\n\t}\n\n\tpublic listCodeEditors(): ICommonCodeEditor[] {\n\t\treturn Object.keys(this._codeEditors).map(id => this._codeEditors[id]);\n\t}\n\n\tpublic abstract registerDecorationType(key:string, options: IDecorationRenderOptions): void;\n\tpublic abstract removeDecorationType(key:string): void;\n\tpublic abstract resolveDecorationType(key:string): IModelDecorationOptions;\n}\n"]}