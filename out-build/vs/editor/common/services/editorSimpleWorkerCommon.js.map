{"version":3,"file":"vs/editor/common/services/editorSimpleWorkerCommon.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/editor/common/services/editorSimpleWorkerCommon.ts"],"names":[],"mappings":";IAAA;;;oGAGgG;IAChG,YAAY,CAAC;IAkBb;QAAA;QAiCA,CAAC;QA/BO,2CAAc,GAArB,UAAsB,IAAkB;YACvC,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;QACrC,CAAC;QAEM,+CAAkB,GAAzB,UAA0B,QAAgB,EAAE,MAAiD;YAC5F,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;QACrC,CAAC;QAEM,+CAAkB,GAAzB,UAA0B,QAAgB;YACzC,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;QACrC,CAAC;QAEM,wCAAW,GAAlB,UAAmB,WAAkB,EAAE,WAAkB,EAAE,oBAA4B;YACtF,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;QACrC,CAAC;QAEM,6CAAgB,GAAvB,UAAwB,WAAkB,EAAE,WAAkB,EAAE,oBAA4B;YAC3F,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;QACrC,CAAC;QAEM,yCAAY,GAAnB,UAAoB,QAAe;YAClC,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;QACrC,CAAC;QAEM,2CAAc,GAArB,UAAsB,QAAe,EAAE,QAAgC,EAAE,OAAc,EAAE,YAAmB;YAC3G,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;QACrC,CAAC;QAEM,6CAAgB,GAAvB,UAAwB,QAAe,EAAE,KAAyB,EAAE,EAAU,EAAE,OAAc,EAAE,YAAmB;YAClH,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;QACrC,CAAC;QACF,yBAAC;IAAD,CAAC,AAjCD,IAiCC;IAjCqB,0BAAkB,qBAiCvC,CAAA","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport * as editorCommon from 'vs/editor/common/editorCommon';\nimport {IInplaceReplaceSupportResult, ILink, ISuggestResult} from 'vs/editor/common/modes';\n\nexport interface IRawModelData {\n\turl:string;\n\tversionId:number;\n\tvalue:editorCommon.IRawText;\n}\n\nexport interface IEditorModelWorker {\n\tacceptNewModel(data: IRawModelData): void;\n\tacceptModelChanged(modelUrl: string, events: editorCommon.IModelContentChangedEvent2[]);\n\tacceptRemovedModel(modelUrl: string): void;\n}\n\nexport abstract class EditorSimpleWorker implements IEditorModelWorker {\n\n\tpublic acceptNewModel(data:IRawModelData): void {\n\t\tthrow new Error('Not implemented!');\n\t}\n\n\tpublic acceptModelChanged(modelUrl: string, events: editorCommon.IModelContentChangedEvent2[]): void {\n\t\tthrow new Error('Not implemented!');\n\t}\n\n\tpublic acceptRemovedModel(modelUrl: string): void {\n\t\tthrow new Error('Not implemented!');\n\t}\n\n\tpublic computeDiff(originalUrl:string, modifiedUrl:string, ignoreTrimWhitespace:boolean):TPromise<editorCommon.ILineChange[]> {\n\t\tthrow new Error('Not implemented!');\n\t}\n\n\tpublic computeDirtyDiff(originalUrl:string, modifiedUrl:string, ignoreTrimWhitespace:boolean):TPromise<editorCommon.IChange[]> {\n\t\tthrow new Error('Not implemented!');\n\t}\n\n\tpublic computeLinks(modelUrl:string):TPromise<ILink[]> {\n\t\tthrow new Error('Not implemented!');\n\t}\n\n\tpublic textualSuggest(modelUrl:string, position: editorCommon.IPosition, wordDef:string, wordDefFlags:string): TPromise<ISuggestResult[]> {\n\t\tthrow new Error('Not implemented!');\n\t}\n\n\tpublic navigateValueSet(modelUrl:string, range:editorCommon.IRange, up:boolean, wordDef:string, wordDefFlags:string): TPromise<IInplaceReplaceSupportResult> {\n\t\tthrow new Error('Not implemented!');\n\t}\n}\n"]}