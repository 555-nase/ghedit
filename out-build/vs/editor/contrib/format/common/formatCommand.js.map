{"version":3,"file":"vs/editor/contrib/format/common/formatCommand.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/editor/contrib/format/common/formatCommand.ts"],"names":[],"mappings":";IAAA;;;oGAGgG;IAChG,YAAY,CAAC;IAMb;QAMC,+BAAY,KAAyC,EAAE,gBAA+C;YACrG,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;YACpB,IAAI,CAAC,iBAAiB,GAAG,gBAAgB,CAAC;QAC3C,CAAC;QAEM,iDAAiB,GAAxB,UAAyB,KAAmC,EAAE,OAA2C;YACxG,IAAI,CAAC,MAAM;iBAET,GAAG,CAAC,UAAC,IAAI,IAAK,OAAA,qBAAqB,CAAC,QAAQ,CAAC,IAAI,EAAE,KAAK,CAAC,EAA3C,CAA2C,CAAC;iBAC1D,MAAM,CAAC,UAAC,IAAI,IAAK,OAAA,IAAI,KAAK,IAAI,EAAb,CAAa,CAAC,CAAC,yEAAyE;iBACzG,OAAO,CAAC,UAAC,IAAI,IAAK,OAAA,OAAO,CAAC,gBAAgB,CAAC,aAAK,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,EAA3D,CAA2D,CAAC,CAAC;YAEjF,IAAI,cAAc,GAAG,KAAK,CAAC;YAC3B,EAAE,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,KAAK,CAAC,IAAI,IAAI,CAAC,iBAAiB,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;gBAChG,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,WAAW,KAAK,IAAI,CAAC,iBAAiB,CAAC,SAAS;oBACvE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,eAAe,KAAK,IAAI,CAAC,iBAAiB,CAAC,aAAa,CAAC,CAAC,CAAC;oBACjF,cAAc,GAAG,IAAI,CAAC;oBACtB,IAAI,CAAC,YAAY,GAAG,OAAO,CAAC,cAAc,CAAC,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAAC,CAAC;gBAC1E,CAAC;gBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,SAAS,KAAK,IAAI,CAAC,iBAAiB,CAAC,WAAW;oBAC9E,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,aAAa,KAAK,IAAI,CAAC,iBAAiB,CAAC,eAAe,CAAC,CAAC,CAAC;oBACjF,cAAc,GAAG,IAAI,CAAC;oBACtB,IAAI,CAAC,YAAY,GAAG,OAAO,CAAC,cAAc,CAAC,IAAI,CAAC,iBAAiB,EAAE,KAAK,CAAC,CAAC;gBAC3E,CAAC;YACF,CAAC;YAED,EAAE,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC;gBACrB,IAAI,CAAC,YAAY,GAAG,OAAO,CAAC,cAAc,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;YACpE,CAAC;QACF,CAAC;QAEM,kDAAkB,GAAzB,UAA0B,KAAmC,EAAE,MAA6C;YAC3G,MAAM,CAAC,MAAM,CAAC,mBAAmB,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QACtD,CAAC;QAEM,wCAAkB,GAAzB,UAA0B,IAAuC,EAAE,KAAmC;YACrG,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC;QAC9D,CAAC;QAED;;;;;;;WAOG;QACI,8BAAQ,GAAf,UAAgB,IAAsC,EAAE,KAAmC;YAE1F,IAAI,CAAC,kBAAkB,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;YAErC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,gBAAgB,EAAE,KAAK,CAAC,CAAC;QACjG,CAAC;QAEM,+BAAS,GAAhB,UAAiB,SAAe,EAAE,QAAe,EAAE,oBAA4B,EAAE,KAAmC;YAEnH,IAAI,WAAW,GAAG,KAAK,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;YAEnD,yCAAyC;YACzC,IAAI,kBAAkB,GAAG,OAAO,CAAC,kBAAkB,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;YAE3E,2DAA2D;YAC3D,EAAE,CAAC,CAAC,kBAAkB,KAAK,WAAW,CAAC,MAAM,IAAI,kBAAkB,KAAK,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;gBACzF,MAAM,CAAC,IAAI,CAAC;YACb,CAAC;YAED,EAAE,CAAC,CAAC,kBAAkB,GAAG,CAAC,CAAC,CAAC,CAAC;gBAC5B,uBAAuB;gBACvB,IAAI,gBAAgB,GAAG,KAAK,CAAC,cAAc,CAAC,SAAS,CAAC,gBAAgB,EAAE,EAAE,kBAAkB,CAAC,CAAC;gBAC9F,SAAS,GAAG,IAAI,aAAK,CAAC,gBAAgB,CAAC,UAAU,EAAE,gBAAgB,CAAC,MAAM,EAAE,SAAS,CAAC,aAAa,EAAE,SAAS,CAAC,SAAS,CAAC,CAAC;gBAC1H,QAAQ,GAAG,QAAQ,CAAC,SAAS,CAAC,kBAAkB,CAAC,CAAC;gBAClD,WAAW,GAAG,WAAW,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAAC;YACtD,CAAC;YAED,wCAAwC;YACxC,IAAI,kBAAkB,GAAG,OAAO,CAAC,kBAAkB,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;YAE3E,EAAE,CAAC,CAAC,kBAAkB,GAAG,CAAC,CAAC,CAAC,CAAC;gBAC5B,sBAAsB;gBACtB,IAAI,cAAc,GAAG,KAAK,CAAC,cAAc,CAAC,SAAS,CAAC,cAAc,EAAE,EAAE,CAAC,kBAAkB,CAAC,CAAC;gBAC3F,SAAS,GAAG,IAAI,aAAK,CAAC,SAAS,CAAC,eAAe,EAAE,SAAS,CAAC,WAAW,EAAE,cAAc,CAAC,UAAU,EAAE,cAAc,CAAC,MAAM,CAAC,CAAC;gBAC1H,QAAQ,GAAG,QAAQ,CAAC,SAAS,CAAC,CAAC,EAAE,QAAQ,CAAC,MAAM,GAAG,kBAAkB,CAAC,CAAC;gBACvE,WAAW,GAAG,WAAW,CAAC,SAAS,CAAC,CAAC,EAAE,WAAW,CAAC,MAAM,GAAG,kBAAkB,CAAC,CAAC;YACjF,CAAC;YAED,MAAM,CAAC;gBACN,IAAI,EAAE,QAAQ;gBACd,KAAK,EAAE,SAAS;gBAChB,gBAAgB,EAAE,oBAAoB;aACtC,CAAC;QACH,CAAC;QACF,4BAAC;IAAD,CAAC,AAhGD,IAgGC;IAhGY,6BAAqB,wBAgGjC,CAAA","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport * as strings from 'vs/base/common/strings';\nimport {Range} from 'vs/editor/common/core/range';\nimport * as editorCommon from 'vs/editor/common/editorCommon';\n\nexport class EditOperationsCommand implements editorCommon.ICommand {\n\n\tprivate _edits:editorCommon.ISingleEditOperation[];\n\tprivate _initialSelection: editorCommon.IEditorSelection;\n\tprivate _selectionId: string;\n\n\tconstructor(edits:editorCommon.ISingleEditOperation[], initialSelection: editorCommon.IEditorSelection) {\n\t\tthis._edits = edits;\n\t\tthis._initialSelection = initialSelection;\n\t}\n\n\tpublic getEditOperations(model: editorCommon.ITokenizedModel, builder: editorCommon.IEditOperationBuilder): void {\n\t\tthis._edits\n\t\t\t// We know that this edit.range comes from the mirror model, so it should only contain \\n and no \\r's\n\t\t\t.map((edit) => EditOperationsCommand.trimEdit(edit, model))\n\t\t\t.filter((edit) => edit !== null) // produced above in case the edit.text is identical to the existing text\n\t\t\t.forEach((edit) => builder.addEditOperation(Range.lift(edit.range), edit.text));\n\n\t\tvar selectionIsSet = false;\n\t\tif (Array.isArray(this._edits) && this._edits.length === 1 && this._initialSelection.isEmpty()) {\n\t\t\tif (this._edits[0].range.startColumn === this._initialSelection.endColumn &&\n\t\t\t\t\tthis._edits[0].range.startLineNumber === this._initialSelection.endLineNumber) {\n\t\t\t\tselectionIsSet = true;\n\t\t\t\tthis._selectionId = builder.trackSelection(this._initialSelection, true);\n\t\t\t} else if (this._edits[0].range.endColumn === this._initialSelection.startColumn &&\n\t\t\t\t\tthis._edits[0].range.endLineNumber === this._initialSelection.startLineNumber) {\n\t\t\t\tselectionIsSet = true;\n\t\t\t\tthis._selectionId = builder.trackSelection(this._initialSelection, false);\n\t\t\t}\n\t\t}\n\n\t\tif (!selectionIsSet) {\n\t\t\tthis._selectionId = builder.trackSelection(this._initialSelection);\n\t\t}\n\t}\n\n\tpublic computeCursorState(model: editorCommon.ITokenizedModel, helper: editorCommon.ICursorStateComputerData): editorCommon.IEditorSelection {\n\t\treturn helper.getTrackedSelection(this._selectionId);\n\t}\n\n\tstatic fixLineTerminators(edit: editorCommon.ISingleEditOperation, model: editorCommon.ITokenizedModel): void {\n\t\tedit.text = edit.text.replace(/\\r\\n|\\r|\\n/g, model.getEOL());\n\t}\n\n\t/**\n\t * This is used to minimize the edits by removing changes that appear on the edges of the range which are identical\n\t * to the current text.\n\t *\n\t * The reason this was introduced is to allow better selection tracking of the current cursor and solve\n\t * bug #15108. There the cursor was jumping since the tracked selection was in the middle of the range edit\n\t * and was lost.\n\t */\n\tstatic trimEdit(edit:editorCommon.ISingleEditOperation, model: editorCommon.ITokenizedModel): editorCommon.ISingleEditOperation {\n\n\t\tthis.fixLineTerminators(edit, model);\n\n\t\treturn this._trimEdit(model.validateRange(edit.range), edit.text, edit.forceMoveMarkers, model);\n\t}\n\n\tstatic _trimEdit(editRange:Range, editText:string, editForceMoveMarkers:boolean, model: editorCommon.ITokenizedModel): editorCommon.ISingleEditOperation {\n\n\t\tlet currentText = model.getValueInRange(editRange);\n\n\t\t// Find the equal characters in the front\n\t\tlet commonPrefixLength = strings.commonPrefixLength(editText, currentText);\n\n\t\t// If the two strings are identical, return no edit (no-op)\n\t\tif (commonPrefixLength === currentText.length && commonPrefixLength === editText.length) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif (commonPrefixLength > 0) {\n\t\t\t// Apply front trimming\n\t\t\tlet newStartPosition = model.modifyPosition(editRange.getStartPosition(), commonPrefixLength);\n\t\t\teditRange = new Range(newStartPosition.lineNumber, newStartPosition.column, editRange.endLineNumber, editRange.endColumn);\n\t\t\teditText = editText.substring(commonPrefixLength);\n\t\t\tcurrentText = currentText.substr(commonPrefixLength);\n\t\t}\n\n\t\t// Find the equal characters in the rear\n\t\tlet commonSuffixLength = strings.commonSuffixLength(editText, currentText);\n\n\t\tif (commonSuffixLength > 0) {\n\t\t\t// Apply rear trimming\n\t\t\tlet newEndPosition = model.modifyPosition(editRange.getEndPosition(), -commonSuffixLength);\n\t\t\teditRange = new Range(editRange.startLineNumber, editRange.startColumn, newEndPosition.lineNumber, newEndPosition.column);\n\t\t\teditText = editText.substring(0, editText.length - commonSuffixLength);\n\t\t\tcurrentText = currentText.substring(0, currentText.length - commonSuffixLength);\n\t\t}\n\n\t\treturn {\n\t\t\ttext: editText,\n\t\t\trange: editRange,\n\t\t\tforceMoveMarkers: editForceMoveMarkers\n\t\t};\n\t}\n}\n"]}