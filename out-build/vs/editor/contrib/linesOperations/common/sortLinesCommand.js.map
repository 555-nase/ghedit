{"version":3,"file":"vs/editor/contrib/linesOperations/common/sortLinesCommand.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/editor/contrib/linesOperations/common/sortLinesCommand.ts"],"names":[],"mappings":";IAAA;;;oGAGgG;IAChG,YAAY,CAAC;IAMb;QAMC,0BAAY,SAAuC,EAAE,UAAkB;YACtE,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;YAC3B,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC9B,CAAC;QAEM,4CAAiB,GAAxB,UAAyB,KAAkC,EAAE,OAA0C;YACtG,IAAI,EAAE,GAAG,SAAS,CAAC,KAAK,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;YAC3D,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gBACR,OAAO,CAAC,gBAAgB,CAAC,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC;YAC7C,CAAC;YAED,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC,cAAc,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAC3D,CAAC;QAEM,6CAAkB,GAAzB,UAA0B,KAAkC,EAAE,MAA6C;YAC1G,MAAM,CAAC,MAAM,CAAC,mBAAmB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QACrD,CAAC;QACF,uBAAC;IAAD,CAAC,AAvBD,IAuBC;IAvBY,wBAAgB,mBAuB5B,CAAA;IAED;;OAEG;IACH,mBAA0B,KAA6B,EAAE,SAAuC,EAAE,UAAkB;QACnH,IAAI,eAAe,GAAG,SAAS,CAAC,eAAe,CAAC;QAChD,IAAI,aAAa,GAAG,SAAS,CAAC,aAAa,CAAC;QAE5C,EAAE,CAAC,CAAC,SAAS,CAAC,SAAS,KAAK,CAAC,CAAC,CAAC,CAAC;YAC/B,aAAa,EAAE,CAAC;QACjB,CAAC;QAED,kDAAkD;QAClD,EAAE,CAAC,CAAC,eAAe,IAAI,aAAa,CAAC,CAAC,CAAC;YACtC,MAAM,CAAC,IAAI,CAAC;QACb,CAAC;QAED,IAAI,WAAW,GAAG,EAAE,CAAC;QAErB,kDAAkD;QAClD,GAAG,CAAC,CAAC,IAAI,UAAU,GAAG,eAAe,EAAE,UAAU,IAAI,aAAa,EAAE,UAAU,EAAE,EAAE,CAAC;YAClF,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC;QACpD,CAAC;QAED,IAAI,MAAM,GAAG,WAAW,CAAC,IAAI,CAAC,UAAC,CAAC,EAAE,CAAC;YAClC,MAAM,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC,aAAa,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC,CAAC;QACvD,CAAC,CAAC,CAAC;QAEH,oCAAoC;QACpC,EAAE,CAAC,CAAC,UAAU,KAAK,IAAI,CAAC,CAAC,CAAC;YACzB,MAAM,GAAG,MAAM,CAAC,OAAO,EAAE,CAAC;QAC3B,CAAC;QAED,MAAM,CAAC,6BAAa,CAAC,OAAO,CAC3B,IAAI,aAAK,CAAC,eAAe,EAAE,CAAC,EAAE,aAAa,EAAE,KAAK,CAAC,gBAAgB,CAAC,aAAa,CAAC,CAAC,EACnF,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CACjB,CAAC;IACH,CAAC;IAjCe,iBAAS,YAiCxB,CAAA","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {EditOperation} from 'vs/editor/common/core/editOperation';\nimport * as editorCommon from 'vs/editor/common/editorCommon';\nimport {Range} from 'vs/editor/common/core/range';\n\nexport class SortLinesCommand implements editorCommon.ICommand {\n\n\tprivate selection:editorCommon.IEditorSelection;\n\tprivate selectionId:string;\n\tprivate descending:boolean;\n\n\tconstructor(selection:editorCommon.IEditorSelection, descending:boolean) {\n\t\tthis.selection = selection;\n\t\tthis.descending = descending;\n\t}\n\n\tpublic getEditOperations(model:editorCommon.ITokenizedModel, builder:editorCommon.IEditOperationBuilder):void {\n\t\tlet op = sortLines(model, this.selection, this.descending);\n\t\tif (op) {\n\t\t\tbuilder.addEditOperation(op.range, op.text);\n\t\t}\n\n\t\tthis.selectionId = builder.trackSelection(this.selection);\n\t}\n\n\tpublic computeCursorState(model:editorCommon.ITokenizedModel, helper: editorCommon.ICursorStateComputerData):editorCommon.IEditorSelection {\n\t\treturn helper.getTrackedSelection(this.selectionId);\n\t}\n}\n\n/**\n * Generate commands for sorting lines on a model.\n */\nexport function sortLines(model:editorCommon.ITextModel, selection:editorCommon.IEditorSelection, descending:boolean): editorCommon.IIdentifiedSingleEditOperation {\n\tlet startLineNumber = selection.startLineNumber;\n\tlet endLineNumber = selection.endLineNumber;\n\n\tif (selection.endColumn === 1) {\n\t\tendLineNumber--;\n\t}\n\n\t// Nothing to sort if user didn't select anything.\n\tif (startLineNumber >= endLineNumber) {\n\t\treturn null;\n\t}\n\n\tlet linesToSort = [];\n\n\t// Get the contents of the selection to be sorted.\n\tfor (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n\t\tlinesToSort.push(model.getLineContent(lineNumber));\n\t}\n\n\tlet sorted = linesToSort.sort((a, b) => {\n\t\treturn a.toLowerCase().localeCompare(b.toLowerCase());\n\t});\n\n\t// If descending, reverse the order.\n\tif (descending === true) {\n\t\tsorted = sorted.reverse();\n\t}\n\n\treturn EditOperation.replace(\n\t\tnew Range(startLineNumber, 1, endLineNumber, model.getLineMaxColumn(endLineNumber)),\n\t\tsorted.join('\\n')\n\t);\n}\n"]}