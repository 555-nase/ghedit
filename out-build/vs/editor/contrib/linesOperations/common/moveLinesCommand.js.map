{"version":3,"file":"vs/editor/contrib/linesOperations/common/moveLinesCommand.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/editor/contrib/linesOperations/common/moveLinesCommand.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {Range} from 'vs/editor/common/core/range';\nimport {Selection} from 'vs/editor/common/core/selection';\nimport {ICommand, ICursorStateComputerData, IEditOperationBuilder, IEditorSelection, ITokenizedModel} from 'vs/editor/common/editorCommon';\n\nexport class MoveLinesCommand implements ICommand {\n\n\tprivate _selection: IEditorSelection;\n\tprivate _isMovingDown: boolean;\n\n\tprivate _selectionId: string;\n\tprivate _moveEndPositionDown: boolean;\n\n\tconstructor(selection: IEditorSelection, isMovingDown: boolean) {\n\t\tthis._selection = selection;\n\t\tthis._isMovingDown = isMovingDown;\n\t}\n\n\tpublic getEditOperations(model:ITokenizedModel, builder:IEditOperationBuilder):void {\n\n\t\tvar modelLineCount = model.getLineCount();\n\n\t\tif (this._isMovingDown && this._selection.endLineNumber === modelLineCount) {\n\t\t\treturn;\n\t\t}\n\t\tif (!this._isMovingDown && this._selection.startLineNumber === 1) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._moveEndPositionDown = false;\n\t\tvar s = this._selection;\n\n\t\tif (s.startLineNumber < s.endLineNumber && s.endColumn === 1) {\n\t\t\tthis._moveEndPositionDown = true;\n\t\t\ts = s.setEndPosition(s.endLineNumber - 1, model.getLineMaxColumn(s.endLineNumber - 1));\n\t\t}\n\n\t\tif (s.startLineNumber === s.endLineNumber && model.getLineMaxColumn(s.startLineNumber) === 1) {\n\t\t\t// Current line is empty\n\t\t\tvar lineNumber = s.startLineNumber;\n\t\t\tvar otherLineNumber = (this._isMovingDown ? lineNumber + 1 : lineNumber - 1);\n\n\t\t\tif (model.getLineMaxColumn(otherLineNumber) === 1) {\n\t\t\t\t// Other line number is empty too, so no editing is needed\n\t\t\t\t// Add a no-op to force running by the model\n\t\t\t\tbuilder.addEditOperation(new Range(1, 1, 1, 1), null);\n\t\t\t} else {\n\t\t\t\t// Type content from other line number on line number\n\t\t\t\tbuilder.addEditOperation(new Range(lineNumber, 1, lineNumber, 1), model.getLineContent(otherLineNumber));\n\n\t\t\t\t// Remove content from other line number\n\t\t\t\tbuilder.addEditOperation(new Range(otherLineNumber, 1, otherLineNumber, model.getLineMaxColumn(otherLineNumber)), null);\n\t\t\t}\n\t\t\t// Track selection at the other line number\n\t\t\ts = Selection.createSelection(otherLineNumber, 1, otherLineNumber, 1);\n\n\t\t} else {\n\n\t\t\tvar movingLineNumber: number,\n\t\t\t\tmovingLineText: string;\n\n\t\t\tif (this._isMovingDown) {\n\t\t\t\tmovingLineNumber = s.endLineNumber + 1;\n\t\t\t\tmovingLineText = model.getLineContent(movingLineNumber);\n\n\t\t\t\t// Delete line that needs to be moved\n\t\t\t\tbuilder.addEditOperation(new Range(movingLineNumber - 1, model.getLineMaxColumn(movingLineNumber - 1), movingLineNumber, model.getLineMaxColumn(movingLineNumber)), null);\n\n\t\t\t\t// Insert line that needs to be moved before\n\t\t\t\tbuilder.addEditOperation(new Range(s.startLineNumber, 1, s.startLineNumber, 1), movingLineText + '\\n');\n\t\t\t} else {\n\t\t\t\tmovingLineNumber = s.startLineNumber - 1;\n\t\t\t\tmovingLineText = model.getLineContent(movingLineNumber);\n\n\t\t\t\t// Delete line that needs to be moved\n\t\t\t\tbuilder.addEditOperation(new Range(movingLineNumber, 1, movingLineNumber + 1, 1), null);\n\n\t\t\t\t// Insert line that needs to be moved after\n\t\t\t\tbuilder.addEditOperation(new Range(s.endLineNumber, model.getLineMaxColumn(s.endLineNumber), s.endLineNumber, model.getLineMaxColumn(s.endLineNumber)), '\\n' + movingLineText);\n\t\t\t}\n\t\t}\n\n\t\tthis._selectionId = builder.trackSelection(s);\n\t}\n\n\tpublic computeCursorState(model:ITokenizedModel, helper: ICursorStateComputerData):IEditorSelection {\n\t\tvar result = helper.getTrackedSelection(this._selectionId);\n\n\t\tif (this._moveEndPositionDown) {\n\t\t\tresult = result.setEndPosition(result.endLineNumber + 1, 1);\n\t\t}\n\n\t\treturn result;\n\t}\n}\n"]}