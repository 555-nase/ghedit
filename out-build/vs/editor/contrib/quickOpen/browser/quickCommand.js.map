{"version":3,"sources":["vs/editor/contrib/quickOpen/browser/quickCommand.ts"],"names":[],"mappings":"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","file":"vs/editor/contrib/quickOpen/browser/quickCommand.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport * as nls from 'vs/nls';\nimport {IAction} from 'vs/base/common/actions';\nimport {onUnexpectedError} from 'vs/base/common/errors';\nimport {matchesFuzzy} from 'vs/base/common/filters';\nimport * as strings from 'vs/base/common/strings';\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport {IContext, IHighlight, QuickOpenEntryGroup, QuickOpenModel} from 'vs/base/parts/quickopen/browser/quickOpenModel';\nimport {IAutoFocus, Mode} from 'vs/base/parts/quickopen/common/quickOpen';\nimport {IKeybindingService} from 'vs/platform/keybinding/common/keybindingService';\nimport {EditorAction} from 'vs/editor/common/editorAction';\nimport {Behaviour} from 'vs/editor/common/editorActionEnablement';\nimport {ICommonCodeEditor, IEditor, IEditorActionDescriptorData} from 'vs/editor/common/editorCommon';\nimport {BaseEditorQuickOpenAction} from './editorQuickOpen';\n\nexport class EditorActionCommandEntry extends QuickOpenEntryGroup {\n\tprivate key: string;\n\tprivate action: IAction;\n\tprivate editor: IEditor;\n\n\tconstructor(key: string, highlights: IHighlight[], action: IAction, editor: IEditor) {\n\t\tsuper();\n\n\t\tthis.key = key;\n\t\tthis.setHighlights(highlights);\n\t\tthis.action = action;\n\t\tthis.editor = editor;\n\t}\n\n\tpublic getLabel(): string {\n\t\treturn this.action.label;\n\t}\n\n\tpublic getAriaLabel(): string {\n\t\treturn nls.localize('ariaLabelEntry', \"{0}, commands\", this.getLabel());\n\t}\n\n\tpublic getGroupLabel(): string {\n\t\treturn this.key;\n\t}\n\n\tpublic run(mode: Mode, context: IContext): boolean {\n\t\tif (mode === Mode.OPEN) {\n\n\t\t\t// Use a timeout to give the quick open widget a chance to close itself first\n\t\t\tTPromise.timeout(50).done(() => {\n\n\t\t\t\t// Some actions are enabled only when editor has focus\n\t\t\t\tthis.editor.focus();\n\n\t\t\t\tif (this.action.enabled) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tlet promise = this.action.run() || TPromise.as(null);\n\t\t\t\t\t\tpromise.done(null, onUnexpectedError);\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tonUnexpectedError(error);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}, onUnexpectedError);\n\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n}\n\nexport class QuickCommandAction extends BaseEditorQuickOpenAction {\n\n\tpublic static ID = 'editor.action.quickCommand';\n\n\tprivate _keybindingService: IKeybindingService;\n\n\tconstructor(descriptor: IEditorActionDescriptorData, editor: ICommonCodeEditor, @IKeybindingService keybindingService: IKeybindingService) {\n\t\tsuper(descriptor, editor, nls.localize('QuickCommandAction.label', \"Command Palette\"), Behaviour.WidgetFocus | Behaviour.ShowInContextMenu);\n\t\tthis._keybindingService = keybindingService;\n\t}\n\n\t_getModel(value: string): QuickOpenModel {\n\t\treturn new QuickOpenModel(this._editorActionsToEntries(this.editor.getActions(), value));\n\t}\n\n\tpublic getGroupId(): string {\n\t\treturn '4_tools/1_commands';\n\t}\n\n\t_sort(elementA: QuickOpenEntryGroup, elementB: QuickOpenEntryGroup): number {\n\t\tlet elementAName = elementA.getLabel().toLowerCase();\n\t\tlet elementBName = elementB.getLabel().toLowerCase();\n\n\t\treturn strings.localeCompare(elementAName, elementBName);\n\t}\n\n\t_editorActionsToEntries(actions: IAction[], searchValue: string): EditorActionCommandEntry[] {\n\t\tlet entries: EditorActionCommandEntry[] = [];\n\n\t\tfor (let i = 0; i < actions.length; i++) {\n\t\t\tlet action = actions[i];\n\n\t\t\tlet editorAction = <EditorAction>action;\n\n\t\t\tif (!editorAction.isSupported()) {\n\t\t\t\tcontinue; // do not show actions that are not supported in this context\n\t\t\t}\n\n\t\t\tlet keys = this._keybindingService.lookupKeybindings(editorAction.id).map(k => this._keybindingService.getLabelFor(k));\n\n\t\t\tif (action.label) {\n\t\t\t\tlet highlights = matchesFuzzy(searchValue, action.label);\n\t\t\t\tif (highlights) {\n\t\t\t\t\tentries.push(new EditorActionCommandEntry(keys.length > 0 ? keys.join(', ') : '', highlights, action, this.editor));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Sort by name\n\t\tentries = entries.sort(this._sort);\n\n\t\treturn entries;\n\t}\n\n\t_getAutoFocus(searchValue: string): IAutoFocus {\n\t\treturn {\n\t\t\tautoFocusFirstEntry: true,\n\t\t\tautoFocusPrefixMatch: searchValue\n\t\t};\n\t}\n\n\t_getInputAriaLabel(): string {\n\t\treturn nls.localize('quickCommandActionInput', \"Type the name of an action you want to execute\");\n\t}\n}"]}