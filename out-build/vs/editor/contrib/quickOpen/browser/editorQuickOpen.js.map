{"version":3,"file":"vs/editor/contrib/quickOpen/browser/editorQuickOpen.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/editor/contrib/quickOpen/browser/editorQuickOpen.ts"],"names":[],"mappings":";;;;;;IAAA;;;oGAGgG;IAChG,YAAY,CAAC;IAoBb;QAWC,6BAAY,MAAkB;YAC7B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACtB,CAAC;QATa,uBAAG,GAAjB,UAAkB,MAAqC;YACtD,MAAM,CAAsB,MAAM,CAAC,eAAe,CAAC,mBAAmB,CAAC,EAAE,CAAC,CAAC;QAC5E,CAAC;QASM,mCAAK,GAAZ;YACC,MAAM,CAAC,mBAAmB,CAAC,EAAE,CAAC;QAC/B,CAAC;QAEM,qCAAO,GAAd;YACC,iBAAiB;YACjB,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;gBACjB,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;gBACtB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;YACpB,CAAC;QACF,CAAC;QAEM,iCAAG,GAAV,UAAW,IAA6B;YAAxC,iBAsBC;YArBA,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;gBACjB,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;gBACtB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;YACpB,CAAC;YACD,0BAA0B;YAC1B,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;gBAClB,IAAI,CAAC,MAAM,GAAG,IAAI,6CAAqB,CACtC,IAAI,CAAC,MAAM,EACX,cAAI,OAAA,IAAI,CAAC,IAAI,EAAE,EAAX,CAAW,EACf,cAAI,OAAA,IAAI,CAAC,QAAQ,EAAE,EAAf,CAAe,EACnB,UAAC,KAAY;oBACZ,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC;gBACtE,CAAC,EACD;oBACC,cAAc,EAAE,IAAI,CAAC,cAAc;iBACnC,CACD,CAAC;gBAEF,OAAO;gBACP,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YACtB,CAAC;QACF,CAAC;QA/CM,sBAAE,GAAG,uCAAuC,CAAC;QAgDrD,0BAAC;IAAD,CAAC,AAlDD,IAkDC;IAlDY,2BAAmB,sBAkD/B,CAAA;IAED;;OAEG;IACH;QAA+C,6CAAY;QAI1D,mCAAY,UAAmD,EAAE,MAAqC,EAAE,KAAY,EAAE,SAA2C;YAA3C,yBAA2C,GAA3C,YAAsB,kCAAS,CAAC,WAAW;YAChK,kBAAM,UAAU,EAAE,MAAM,EAAE,SAAS,CAAC,CAAC;YAErC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACpB,CAAC;QAEM,uCAAG,GAAV;YAAA,iBAgCC;YA/BA,mBAAmB,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC;gBACxC,cAAc,EAAE,IAAI,CAAC,kBAAkB,EAAE;gBACzC,QAAQ,EAAE,UAAC,KAAY,IAAoB,OAAA,KAAI,CAAC,SAAS,CAAC,KAAK,CAAC,EAArB,CAAqB;gBAChE,YAAY,EAAE,UAAC,WAAkB,IAAgB,OAAA,KAAI,CAAC,aAAa,CAAC,WAAW,CAAC,EAA/B,CAA+B;gBAChF,IAAI,EAAE,cAAW,OAAA,KAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,EAApB,CAAoB;gBACrC,QAAQ,EAAE,cAAW,OAAA,KAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAnB,CAAmB;aACxC,CAAC,CAAC;YACH,IAAI;YACJ,6BAA6B;YAC7B,4BAA4B;YAC5B,uCAAuC;YACvC,IAAI;YACJ,4BAA4B;YAC5B,2CAA2C;YAC3C,iBAAiB;YACjB,8BAA8B;YAC9B,6BAA6B;YAC7B,wCAAwC;YACxC,MAAM;YACN,+CAA+C;YAC/C,MAAM;YACN,MAAM;YAEN,qDAAqD;YACrD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,wBAAwB,CAAC,CAAC,CAAC;gBACpC,IAAI,CAAC,wBAAwB,GAAG,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE,CAAC;YAC5D,CAAC;YAID,MAAM,CAAC,qBAAQ,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;QAC1B,CAAC;QAED;;WAEG;QACH,6CAAS,GAAT,UAAU,KAAY;YACrB,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;QAC5C,CAAC;QAED;;WAEG;QACH,iDAAa,GAAb,UAAc,WAAkB;YAC/B,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;QAC5C,CAAC;QAED,sDAAkB,GAAlB;YACC,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;QAC5C,CAAC;QAIM,gDAAY,GAAnB,UAAoB,KAAyB,EAAE,MAAkB;YAAjE,iBAqBC;YApBA,MAAM,CAAC,iBAAiB,CAAC,UAAC,cAA2D;gBACpF,IAAI,cAAc,GAAa,EAAE,CAAC;gBAClC,EAAE,CAAC,CAAC,KAAI,CAAC,yBAAyB,CAAC,CAAC,CAAC;oBACpC,cAAc,CAAC,IAAI,CAAC,KAAI,CAAC,yBAAyB,CAAC,CAAC;oBACpD,KAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC;gBACvC,CAAC;gBAED,IAAI,cAAc,GAAyC;oBAC1D;wBACC,KAAK,EAAE,KAAK;wBACZ,OAAO,EAAE;4BACR,SAAS,EAAE,eAAe;4BAC1B,WAAW,EAAE,IAAI;yBACjB;qBACD;iBACD,CAAC;gBAEF,IAAI,WAAW,GAAG,cAAc,CAAC,gBAAgB,CAAC,cAAc,EAAE,cAAc,CAAC,CAAC;gBAClF,KAAI,CAAC,yBAAyB,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC;YACjD,CAAC,CAAC,CAAC;QACJ,CAAC;QAEM,oDAAgB,GAAvB;YAAA,iBAOC;YANA,EAAE,CAAC,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC,CAAC;gBACpC,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,UAAC,cAA2D;oBACzF,cAAc,CAAC,gBAAgB,CAAC,CAAC,KAAI,CAAC,yBAAyB,CAAC,EAAE,EAAE,CAAC,CAAC;oBACtE,KAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC;gBACvC,CAAC,CAAC,CAAC;YACJ,CAAC;QACF,CAAC;QAED;;WAEG;QACH,4CAAQ,GAAR,UAAS,QAAgB;YAExB,yCAAyC;YACzC,IAAI,CAAC,gBAAgB,EAAE,CAAC;YAExB,gCAAgC;YAChC,EAAE,CAAC,CAAC,QAAQ,IAAI,IAAI,CAAC,wBAAwB,CAAC,CAAC,CAAC;gBAC/C,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,wBAAwB,CAAC,CAAC;gBACxD,IAAI,CAAC,MAAM,CAAC,oCAAoC,CAAC,IAAI,CAAC,wBAAwB,CAAC,CAAC;YACjF,CAAC;YAED,IAAI,CAAC,wBAAwB,GAAG,IAAI,CAAC;YACrC,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;QACrB,CAAC;QAEM,2CAAO,GAAd;YACC,gBAAK,CAAC,OAAO,WAAE,CAAC;QAGjB,CAAC;QACF,gCAAC;IAAD,CAAC,AAvHD,CAA+C,2BAAY,GAuH1D;IAvHY,iCAAyB,4BAuHrC,CAAA;IAOD,+CAAqB,CAAC,0BAA0B,CAAC,mBAAmB,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport {QuickOpenModel} from 'vs/base/parts/quickopen/browser/quickOpenModel';\nimport {IAutoFocus} from 'vs/base/parts/quickopen/common/quickOpen';\nimport {EditorAction} from 'vs/editor/common/editorAction';\nimport {Behaviour} from 'vs/editor/common/editorActionEnablement';\nimport * as editorCommon from 'vs/editor/common/editorCommon';\nimport {ICodeEditor} from 'vs/editor/browser/editorBrowser';\nimport {EditorBrowserRegistry} from 'vs/editor/browser/editorBrowserExtensions';\nimport {QuickOpenEditorWidget} from './quickOpenEditorWidget';\n\nexport interface IQuickOpenControllerOpts {\n\tinputAriaLabel: string;\n\tgetModel(value:string):QuickOpenModel;\n\tgetAutoFocus(searchValue:string):IAutoFocus;\n\tonOk():void;\n\tonCancel():void;\n}\n\nexport class QuickOpenController implements editorCommon.IEditorContribution {\n\n\tstatic ID = 'editor.controller.quickOpenController';\n\n\tpublic static get(editor:editorCommon.ICommonCodeEditor): QuickOpenController {\n\t\treturn <QuickOpenController>editor.getContribution(QuickOpenController.ID);\n\t}\n\n\tprivate editor:ICodeEditor;\n\tprivate widget:QuickOpenEditorWidget;\n\n\tconstructor(editor:ICodeEditor) {\n\t\tthis.editor = editor;\n\t}\n\n\tpublic getId(): string {\n\t\treturn QuickOpenController.ID;\n\t}\n\n\tpublic dispose(): void {\n\t\t// Dispose widget\n\t\tif (this.widget) {\n\t\t\tthis.widget.destroy();\n\t\t\tthis.widget = null;\n\t\t}\n\t}\n\n\tpublic run(opts:IQuickOpenControllerOpts): void {\n\t\tif (this.widget) {\n\t\t\tthis.widget.destroy();\n\t\t\tthis.widget = null;\n\t\t}\n\t\t// Create goto line widget\n\t\tif (!this.widget) {\n\t\t\tthis.widget = new QuickOpenEditorWidget(\n\t\t\t\tthis.editor,\n\t\t\t\t()=>opts.onOk(),\n\t\t\t\t()=>opts.onCancel(),\n\t\t\t\t(value:string)=>{\n\t\t\t\t\tthis.widget.setInput(opts.getModel(value), opts.getAutoFocus(value));\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tinputAriaLabel: opts.inputAriaLabel\n\t\t\t\t}\n\t\t\t);\n\n\t\t\t// Show\n\t\t\tthis.widget.show('');\n\t\t}\n\t}\n}\n\n/**\n * Base class for providing quick open in the editor.\n */\nexport class BaseEditorQuickOpenAction extends EditorAction {\n\tprivate lineHighlightDecorationId:string;\n\tprivate lastKnownEditorSelection:editorCommon.IEditorSelection;\n\n\tconstructor(descriptor:editorCommon.IEditorActionDescriptorData, editor:editorCommon.ICommonCodeEditor, label:string, condition:Behaviour = Behaviour.WidgetFocus) {\n\t\tsuper(descriptor, editor, condition);\n\n\t\tthis.label = label;\n\t}\n\n\tpublic run():TPromise<boolean> {\n\t\tQuickOpenController.get(this.editor).run({\n\t\t\tinputAriaLabel: this._getInputAriaLabel(),\n\t\t\tgetModel: (value:string):QuickOpenModel => this._getModel(value),\n\t\t\tgetAutoFocus: (searchValue:string):IAutoFocus => this._getAutoFocus(searchValue),\n\t\t\tonOk: ():void => this._onClose(false),\n\t\t\tonCancel: ():void => this._onClose(true)\n\t\t});\n\t\t// }\n\t\t// \t()=>this._onClose(false),\n\t\t// \t()=>this._onClose(true),\n\t\t// \t(value:string)=>this.onType(value),\n\t\t// )\n\t\t// this._getInputAriaLabel()\n\t\t// this.widget = new QuickOpenEditorWidget(\n\t\t// \t\tthis.editor,\n\t\t// \t\t()=>this._onClose(false),\n\t\t// \t\t()=>this._onClose(true),\n\t\t// \t\t(value:string)=>this.onType(value),\n\t\t// \t\t{\n\t\t// \t\t\tinputAriaLabel: this._getInputAriaLabel()\n\t\t// \t\t}\n\t\t// \t);\n\n\t\t// Remember selection to be able to restore on cancel\n\t\tif (!this.lastKnownEditorSelection) {\n\t\t\tthis.lastKnownEditorSelection = this.editor.getSelection();\n\t\t}\n\n\n\n\t\treturn TPromise.as(true);\n\t}\n\n\t/**\n\t * Subclasses to override to provide the quick open model for the given search value.\n\t */\n\t_getModel(value:string):QuickOpenModel {\n\t\tthrow new Error('Subclasses to implement');\n\t}\n\n\t/**\n\t * Subclasses to override to provide the quick open auto focus mode for the given search value.\n\t */\n\t_getAutoFocus(searchValue:string):IAutoFocus {\n\t\tthrow new Error('Subclasses to implement');\n\t}\n\n\t_getInputAriaLabel(): string {\n\t\tthrow new Error('Subclasses to implement');\n\t}\n\n\n\n\tpublic decorateLine(range:editorCommon.IRange, editor:ICodeEditor):void {\n\t\teditor.changeDecorations((changeAccessor:editorCommon.IModelDecorationsChangeAccessor)=>{\n\t\t\tvar oldDecorations: string[] = [];\n\t\t\tif (this.lineHighlightDecorationId) {\n\t\t\t\toldDecorations.push(this.lineHighlightDecorationId);\n\t\t\t\tthis.lineHighlightDecorationId = null;\n\t\t\t}\n\n\t\t\tvar newDecorations: editorCommon.IModelDeltaDecoration[] = [\n\t\t\t\t{\n\t\t\t\t\trange: range,\n\t\t\t\t\toptions: {\n\t\t\t\t\t\tclassName: 'lineHighlight',\n\t\t\t\t\t\tisWholeLine: true\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t];\n\n\t\t\tvar decorations = changeAccessor.deltaDecorations(oldDecorations, newDecorations);\n\t\t\tthis.lineHighlightDecorationId = decorations[0];\n\t\t});\n\t}\n\n\tpublic clearDecorations():void {\n\t\tif (this.lineHighlightDecorationId) {\n\t\t\tthis.editor.changeDecorations((changeAccessor:editorCommon.IModelDecorationsChangeAccessor)=>{\n\t\t\t\tchangeAccessor.deltaDecorations([this.lineHighlightDecorationId], []);\n\t\t\t\tthis.lineHighlightDecorationId = null;\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Subclasses can override this to participate in the close of quick open.\n\t */\n\t_onClose(canceled:boolean):void {\n\n\t\t// Clear Highlight Decorations if present\n\t\tthis.clearDecorations();\n\n\t\t// Restore selection if canceled\n\t\tif (canceled && this.lastKnownEditorSelection) {\n\t\t\tthis.editor.setSelection(this.lastKnownEditorSelection);\n\t\t\tthis.editor.revealRangeInCenterIfOutsideViewport(this.lastKnownEditorSelection);\n\t\t}\n\n\t\tthis.lastKnownEditorSelection = null;\n\t\tthis.editor.focus();\n\t}\n\n\tpublic dispose(): void {\n\t\tsuper.dispose();\n\n\n\t}\n}\n\nexport interface IDecorator {\n\tdecorateLine(range:editorCommon.IRange, editor:editorCommon.IEditor):void;\n\tclearDecorations():void;\n}\n\nEditorBrowserRegistry.registerEditorContribution(QuickOpenController);\n"]}