{"version":3,"file":"vs/editor/contrib/indentation/common/indentationCommands.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/editor/contrib/indentation/common/indentationCommands.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport {Range} from 'vs/editor/common/core/range';\nimport {ICommand, ICursorStateComputerData, IEditOperationBuilder, IEditorSelection, ITokenizedModel} from 'vs/editor/common/editorCommon';\n\nfunction getIndentationEditOperations(model: ITokenizedModel, builder: IEditOperationBuilder, tabSize: number, tabsToSpaces: boolean): void {\n\tif (model.getLineCount() === 1 && model.getLineMaxColumn(1) === 1) {\n\t\t// Model is empty\n\t\treturn;\n\t}\n\n\tlet spaces = '';\n\tfor (let i = 0; i < tabSize; i++) {\n\t\tspaces += ' ';\n\t}\n\n\tconst content = model.getLinesContent();\n\tfor (let i = 0; i < content.length; i++) {\n\t\tlet lastIndentationColumn = model.getLineFirstNonWhitespaceColumn(i + 1);\n\t\tif (lastIndentationColumn === 0) {\n\t\t\tlastIndentationColumn = model.getLineMaxColumn(i + 1);\n\t\t}\n\n\t\tconst text = (tabsToSpaces ? content[i].substr(0, lastIndentationColumn).replace(/\\t/ig, spaces) :\n\t\t\tcontent[i].substr(0, lastIndentationColumn).replace(new RegExp(spaces, 'gi'), '\\t')) +\n\t\t\tcontent[i].substr(lastIndentationColumn);\n\n\t\tbuilder.addEditOperation(new Range(i + 1, 1, i + 1, model.getLineMaxColumn(i + 1)), text);\n\t}\n}\n\nexport class IndentationToSpacesCommand implements ICommand {\n\n\tprivate selectionId: string;\n\n\tconstructor(private selection: IEditorSelection, private tabSize: number) { }\n\n\tpublic getEditOperations(model: ITokenizedModel, builder: IEditOperationBuilder): void {\n\t\tthis.selectionId = builder.trackSelection(this.selection);\n\t\tgetIndentationEditOperations(model, builder, this.tabSize, true);\n\t}\n\n\tpublic computeCursorState(model: ITokenizedModel, helper: ICursorStateComputerData): IEditorSelection {\n\t\treturn helper.getTrackedSelection(this.selectionId);\n\t}\n}\n\nexport class IndentationToTabsCommand implements ICommand {\n\n\tprivate selectionId: string;\n\n\tconstructor(private selection: IEditorSelection, private tabSize: number) { }\n\n\tpublic getEditOperations(model: ITokenizedModel, builder: IEditOperationBuilder): void {\n\t\tthis.selectionId = builder.trackSelection(this.selection);\n\t\tgetIndentationEditOperations(model, builder, this.tabSize, false);\n\t}\n\n\tpublic computeCursorState(model: ITokenizedModel, helper: ICursorStateComputerData): IEditorSelection {\n\t\treturn helper.getTrackedSelection(this.selectionId);\n\t}\n}\n"]}