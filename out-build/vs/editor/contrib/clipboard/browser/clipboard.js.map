{"version":3,"sources":["vs/editor/contrib/clipboard/browser/clipboard.ts"],"names":[],"mappings":"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","file":"vs/editor/contrib/clipboard/browser/clipboard.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport 'vs/css!./clipboard';\nimport * as nls from 'vs/nls';\nimport {KeyCode, KeyMod} from 'vs/base/common/keyCodes';\nimport {cAll} from 'vs/base/common/lifecycle';\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport * as browser from 'vs/base/browser/browser';\nimport {ServicesAccessor} from 'vs/platform/instantiation/common/instantiation';\nimport {IKeybindings} from 'vs/platform/keybinding/common/keybindingService';\nimport {findFocusedEditor} from 'vs/editor/common/config/config';\nimport {EditorAction} from 'vs/editor/common/editorAction';\nimport {Behaviour} from 'vs/editor/common/editorActionEnablement';\nimport * as editorCommon from 'vs/editor/common/editorCommon';\nimport {CommonEditorRegistry, ContextKey, EditorActionDescriptor} from 'vs/editor/common/editorCommonExtensions';\n\nclass ClipboardWritingAction extends EditorAction {\n\n\tprivate toUnhook:Function[];\n\n\tconstructor(descriptor:editorCommon.IEditorActionDescriptorData, editor:editorCommon.ICommonCodeEditor, condition:Behaviour) {\n\t\tsuper(descriptor, editor, condition);\n\t\tthis.toUnhook = [];\n\t\tthis.toUnhook.push(this.editor.addListener(editorCommon.EventType.CursorSelectionChanged, (e:editorCommon.ICursorSelectionChangedEvent) => {\n\t\t\tthis.resetEnablementState();\n\t\t}));\n\t}\n\n\tpublic dispose(): void {\n\t\tthis.toUnhook = cAll(this.toUnhook);\n\t\tsuper.dispose();\n\t}\n\n\tpublic getEnablementState(): boolean {\n\t\tif (browser.enableEmptySelectionClipboard) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn !this.editor.getSelection().isEmpty();\n\t\t}\n\t}\n}\n\nfunction editorCursorIsInEditableRange(editor:editorCommon.ICommonCodeEditor): boolean {\n\tvar model = editor.getModel();\n\tif (!model) {\n\t\treturn false;\n\t}\n\tvar hasEditableRange = model.hasEditableRange();\n\tif (!hasEditableRange) {\n\t\treturn true;\n\t}\n\tvar editableRange = model.getEditableRange();\n\tvar editorPosition = editor.getPosition();\n\treturn editableRange.containsPosition(editorPosition);\n}\n\nclass ExecCommandCutAction extends ClipboardWritingAction {\n\n\tconstructor(descriptor:editorCommon.IEditorActionDescriptorData, editor:editorCommon.ICommonCodeEditor) {\n\t\tsuper(descriptor, editor, Behaviour.Writeable | Behaviour.WidgetFocus | Behaviour.ShowInContextMenu | Behaviour.UpdateOnCursorPositionChange);\n\t}\n\n\tpublic getGroupId(): string {\n\t\treturn '3_edit/1_cut';\n\t}\n\n\tpublic getEnablementState(): boolean {\n\t\treturn super.getEnablementState() && editorCursorIsInEditableRange(this.editor);\n\t}\n\n\tpublic run(): TPromise<boolean> {\n\t\tthis.editor.focus();\n\t\tdocument.execCommand('cut');\n\t\treturn TPromise.as(true);\n\t}\n}\n\nclass ExecCommandCopyAction extends ClipboardWritingAction {\n\n\tconstructor(descriptor:editorCommon.IEditorActionDescriptorData, editor:editorCommon.ICommonCodeEditor) {\n\t\tsuper(descriptor, editor, Behaviour.WidgetFocus | Behaviour.ShowInContextMenu);\n\t}\n\n\tpublic getGroupId(): string {\n\t\treturn '3_edit/2_copy';\n\t}\n\n\tpublic run(): TPromise<boolean> {\n\t\tthis.editor.focus();\n\t\tdocument.execCommand('copy');\n\t\treturn TPromise.as(true);\n\t}\n}\n\nclass ExecCommandPasteAction extends EditorAction {\n\n\tconstructor(descriptor:editorCommon.IEditorActionDescriptorData, editor:editorCommon.ICommonCodeEditor) {\n\t\tsuper(descriptor, editor, Behaviour.Writeable | Behaviour.WidgetFocus | Behaviour.ShowInContextMenu | Behaviour.UpdateOnCursorPositionChange);\n\t}\n\n\tpublic getGroupId(): string {\n\t\treturn '3_edit/3_paste';\n\t}\n\n\tpublic getEnablementState(): boolean {\n\t\treturn editorCursorIsInEditableRange(this.editor);\n\t}\n\n\tpublic run(): TPromise<boolean> {\n\t\tthis.editor.focus();\n\t\tdocument.execCommand('paste');\n\t\treturn null;\n\t}\n}\n\ninterface IClipboardCommand extends IKeybindings {\n\tctor: editorCommon.IEditorActionContributionCtor;\n\tid: string;\n\tlabel: string;\n\texecCommand: string;\n}\nfunction registerClipboardAction(desc:IClipboardCommand) {\n\tif (!browser.supportsExecCommand(desc.execCommand)) {\n\t\treturn;\n\t}\n\n\tCommonEditorRegistry.registerEditorAction(new EditorActionDescriptor(desc.ctor, desc.id, desc.label, {\n\t\thandler: execCommandToHandler.bind(null, desc.id, desc.execCommand),\n\t\tcontext: ContextKey.None,\n\t\tprimary: desc.primary,\n\t\tsecondary: desc.secondary,\n\t\twin: desc.win,\n\t\tlinux: desc.linux,\n\t\tmac: desc.mac\n\t}));\n}\n\nregisterClipboardAction({\n\tctor: ExecCommandCutAction,\n\tid: 'editor.action.clipboardCutAction',\n\tlabel: nls.localize('actions.clipboard.cutLabel', \"Cut\"),\n\texecCommand: 'cut',\n\tprimary: KeyMod.CtrlCmd | KeyCode.KEY_X,\n\twin: { primary: KeyMod.CtrlCmd | KeyCode.KEY_X, secondary: [KeyMod.Shift | KeyCode.Delete] }\n});\nregisterClipboardAction({\n\tctor: ExecCommandCopyAction,\n\tid: 'editor.action.clipboardCopyAction',\n\tlabel: nls.localize('actions.clipboard.copyLabel', \"Copy\"),\n\texecCommand: 'copy',\n\tprimary: KeyMod.CtrlCmd | KeyCode.KEY_C,\n\twin: { primary: KeyMod.CtrlCmd | KeyCode.KEY_C, secondary: [KeyMod.CtrlCmd | KeyCode.Insert] }\n});\nregisterClipboardAction({\n\tctor: ExecCommandPasteAction,\n\tid: 'editor.action.clipboardPasteAction',\n\tlabel: nls.localize('actions.clipboard.pasteLabel', \"Paste\"),\n\texecCommand: 'paste',\n\tprimary: KeyMod.CtrlCmd | KeyCode.KEY_V,\n\twin: { primary: KeyMod.CtrlCmd | KeyCode.KEY_V, secondary: [KeyMod.Shift | KeyCode.Insert] }\n});\n\nfunction execCommandToHandler(actionId: string, browserCommand: string, accessor: ServicesAccessor, args: any): void {\n\t// If editor text focus\n\tif (args.context[editorCommon.KEYBINDING_CONTEXT_EDITOR_TEXT_FOCUS]) {\n\t\tvar focusedEditor = findFocusedEditor(actionId, accessor, args, false);\n\t\tif (focusedEditor) {\n\t\t\tfocusedEditor.trigger('keyboard', actionId, args);\n\t\t\treturn;\n\t\t}\n\t}\n\n\tdocument.execCommand(browserCommand);\n}\n"]}