{"version":3,"file":"vs/editor/contrib/codelens/common/codelens.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/editor/contrib/codelens/common/codelens.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;IAEhG,YAAY,CAAC;IAeb,yBAAgC,KAAa;QAE5C,IAAM,OAAO,GAAoB,EAAE,CAAC;QACpC,IAAM,QAAQ,GAAG,wBAAgB,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,UAAA,OAAO;YACvD,MAAM,CAAC,OAAO,CAAC,mBAAmB,CAAC,KAAK,CAAC,qBAAqB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAA,MAAM;gBAC5E,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;oBAC5B,MAAM,CAAC;gBACR,CAAC;gBACD,GAAG,CAAC,CAAe,UAAM,EAAN,iBAAM,EAAN,oBAAM,EAAN,IAAM,CAAC;oBAArB,IAAI,MAAM,eAAA;oBACd,OAAO,CAAC,IAAI,CAAC,EAAE,QAAA,MAAM,EAAE,SAAA,OAAO,EAAE,CAAC,CAAC;iBAClC;YACF,CAAC,EAAE,UAAA,GAAG;gBACL,EAAE,CAAC,CAAC,CAAC,+BAAsB,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;oBAClC,0BAAiB,CAAC,GAAG,CAAC,CAAC;gBACxB,CAAC;YACF,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,qBAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,cAAM,OAAA,OAAO,EAAP,CAAO,CAAC,CAAC;IACpD,CAAC;IAnBe,uBAAe,kBAmB9B,CAAA;IAED,6CAAoB,CAAC,uBAAuB,CAAC,0BAA0B,EAAE,UAAS,QAAQ,EAAE,IAAI;QAExF,4BAAQ,CAAS;QACxB,EAAE,CAAC,CAAC,CAAC,CAAC,QAAQ,YAAY,aAAG,CAAC,CAAC,CAAC,CAAC;YAChC,MAAM,wBAAe,EAAE,CAAC;QACzB,CAAC;QAED,IAAM,KAAK,GAAG,QAAQ,CAAC,GAAG,CAAC,4BAAa,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QAC7D,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YACZ,MAAM,wBAAe,EAAE,CAAC;QACzB,CAAC;QAED,MAAM,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;IAC/B,CAAC,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport {illegalArgument, isPromiseCanceledError, onUnexpectedError} from 'vs/base/common/errors';\nimport URI from 'vs/base/common/uri';\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport {IModel} from 'vs/editor/common/editorCommon';\nimport {CommonEditorRegistry} from 'vs/editor/common/editorCommonExtensions';\nimport {CodeLensRegistry, ICodeLensSupport, ICodeLensSymbol} from 'vs/editor/common/modes';\nimport {IModelService} from 'vs/editor/common/services/modelService';\n\nexport interface ICodeLensData {\n\tsymbol: ICodeLensSymbol;\n\tsupport: ICodeLensSupport;\n}\n\nexport function getCodeLensData(model: IModel): TPromise<ICodeLensData[]> {\n\n\tconst symbols: ICodeLensData[] = [];\n\tconst promises = CodeLensRegistry.all(model).map(support => {\n\t\treturn support.findCodeLensSymbols(model.getAssociatedResource()).then(result => {\n\t\t\tif (!Array.isArray(result)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tfor (let symbol of result) {\n\t\t\t\tsymbols.push({ symbol, support });\n\t\t\t}\n\t\t}, err => {\n\t\t\tif (!isPromiseCanceledError(err)) {\n\t\t\t\tonUnexpectedError(err);\n\t\t\t}\n\t\t});\n\t});\n\n\treturn TPromise.join(promises).then(() => symbols);\n}\n\nCommonEditorRegistry.registerLanguageCommand('_executeCodeLensProvider', function(accessor, args) {\n\n\tconst {resource} = args;\n\tif (!(resource instanceof URI)) {\n\t\tthrow illegalArgument();\n\t}\n\n\tconst model = accessor.get(IModelService).getModel(resource);\n\tif (!model) {\n\t\tthrow illegalArgument();\n\t}\n\n\treturn getCodeLensData(model);\n});\n"]}