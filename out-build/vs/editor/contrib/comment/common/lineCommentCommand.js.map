{"version":3,"file":"vs/editor/contrib/comment/common/lineCommentCommand.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/editor/contrib/comment/common/lineCommentCommand.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport * as strings from 'vs/base/common/strings';\nimport {EditOperation} from 'vs/editor/common/core/editOperation';\nimport {Position} from 'vs/editor/common/core/position';\nimport {Range} from 'vs/editor/common/core/range';\nimport {Selection} from 'vs/editor/common/core/selection';\nimport * as editorCommon from 'vs/editor/common/editorCommon';\nimport {ICommentsConfiguration, IMode} from 'vs/editor/common/modes';\nimport {BlockCommentCommand} from './blockCommentCommand';\n\nexport interface IInsertionPoint {\n\tignore: boolean;\n\tcommentStrOffset: number;\n}\n\nexport interface ILinePreflightData {\n\tignore: boolean;\n\tcommentStr: string;\n\tcommentStrOffset: number;\n\tcommentStrLength: number;\n}\n\nexport interface IPreflightData {\n\tsupported: boolean;\n\tshouldRemoveComments: boolean;\n\tlines: ILinePreflightData[];\n}\n\nexport interface ISimpleModel {\n\tgetLineContent(lineNumber:number): string;\n}\n\nexport enum Type {\n\tToggle = 0,\n\tForceAdd = 1,\n\tForceRemove = 2\n}\n\nexport class LineCommentCommand implements editorCommon.ICommand {\n\n\tprivate _selection: editorCommon.IEditorSelection;\n\tprivate _selectionId: string;\n\tprivate _deltaColumn:number;\n\tprivate _moveEndPositionDown: boolean;\n\tprivate _tabSize: number;\n\tprivate _type:Type;\n\n\tconstructor(selection:editorCommon.IEditorSelection, tabSize:number, type:Type) {\n\t\tthis._selection = selection;\n\t\tthis._tabSize = tabSize;\n\t\tthis._type = type;\n\t\tthis._deltaColumn = 0;\n\t}\n\n\t/**\n\t * Do an initial pass over the lines and gather info about the line comment string.\n\t * Returns null if any of the lines doesn't support a line comment string.\n\t */\n\tpublic static _gatherPreflightCommentStrings(model:editorCommon.ITokenizedModel, startLineNumber: number, endLineNumber: number): ILinePreflightData[] {\n\t\tvar lines: ILinePreflightData[] = [],\n\t\t\tconfig:ICommentsConfiguration,\n\t\t\tcommentStr:string,\n\t\t\tseenModes: {[modeId:string]:string;} = Object.create(null),\n\t\t\ti:number,\n\t\t\tlineCount:number,\n\t\t\tlineNumber:number,\n\t\t\tmode: IMode,\n\t\t\tmodeId: string;\n\n\t\tfor (i = 0, lineCount = endLineNumber - startLineNumber + 1; i < lineCount; i++) {\n\t\t\tlineNumber = startLineNumber + i;\n\t\t\tmode = model.getModeAtPosition(lineNumber, 1);\n\t\t\tmodeId = mode.getId();\n\n\t\t\t// Find the commentStr for this line, if none is found then bail out: we cannot do line comments\n\t\t\tif (seenModes[modeId]) {\n\t\t\t\tcommentStr = seenModes[modeId];\n\t\t\t} else {\n\t\t\t\tconfig = (mode.richEditSupport ? mode.richEditSupport.comments : null);\n\t\t\t\tcommentStr = (config ? config.lineCommentToken : null);\n\t\t\t\tif (!commentStr) {\n\t\t\t\t\t// Mode does not support line comments\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\tseenModes[modeId] = commentStr;\n\t\t\t}\n\n\t\t\tlines.push({\n\t\t\t\tignore: false,\n\t\t\t\tcommentStr: commentStr,\n\t\t\t\tcommentStrOffset: 0,\n\t\t\t\tcommentStrLength: commentStr.length\n\t\t\t});\n\t\t}\n\n\t\treturn lines;\n\t}\n\n\t/**\n\t * Analyze lines and decide which lines are relevant and what the toggle should do.\n\t * Also, build up several offsets and lengths useful in the generation of editor operations.\n\t */\n\tpublic static _analyzeLines(type:Type, model:ISimpleModel, lines:ILinePreflightData[], startLineNumber:number): IPreflightData {\n\t\tvar lineData: ILinePreflightData,\n\t\t\tlineContentStartOffset:number,\n\t\t\tcommentStrEndOffset:number,\n\t\t\ti:number,\n\t\t\tlineCount:number,\n\t\t\tlineNumber:number,\n\t\t\tshouldRemoveComments:boolean,\n\t\t\tlineContent: string,\n\t\t\t_space = ' '.charCodeAt(0),\n\t\t\tonlyWhitespaceLines = true;\n\n\t\tif (type === Type.Toggle) {\n\t\t\tshouldRemoveComments = true;\n\t\t} else if (type === Type.ForceAdd) {\n\t\t\tshouldRemoveComments = false;\n\t\t} else {\n\t\t\tshouldRemoveComments = true;\n\t\t}\n\n\t\tfor (i = 0, lineCount = lines.length; i < lineCount; i++) {\n\t\t\tlineData = lines[i];\n\t\t\tlineNumber = startLineNumber + i;\n\n\t\t\tlineContent = model.getLineContent(lineNumber);\n\t\t\tlineContentStartOffset = strings.firstNonWhitespaceIndex(lineContent);\n\n\t\t\tif (lineContentStartOffset === -1) {\n\t\t\t\t// Empty or whitespace only line\n\t\t\t\tif (type === Type.Toggle) {\n\t\t\t\t\tlineData.ignore = true;\n\t\t\t\t} else if (type === Type.ForceAdd) {\n\t\t\t\t\tlineData.ignore = true;\n\t\t\t\t} else {\n\t\t\t\t\tlineData.ignore = true;\n\t\t\t\t}\n\t\t\t\tlineData.commentStrOffset = lineContent.length;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tonlyWhitespaceLines = false;\n\t\t\tlineData.ignore = false;\n\t\t\tlineData.commentStrOffset = lineContentStartOffset;\n\n\t\t\tif (shouldRemoveComments && !BlockCommentCommand._haystackHasNeedleAtOffset(lineContent, lineData.commentStr, lineContentStartOffset)) {\n\t\t\t\tif (type === Type.Toggle) {\n\t\t\t\t\t// Every line so far has been a line comment, but this one is not\n\t\t\t\t\tshouldRemoveComments = false;\n\t\t\t\t} else if (type === Type.ForceAdd) {\n\t\t\t\t\t// Will not happen\n\t\t\t\t} else {\n\t\t\t\t\tlineData.ignore = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (shouldRemoveComments) {\n\t\t\t\tcommentStrEndOffset = lineContentStartOffset + lineData.commentStrLength;\n\t\t\t\tif (commentStrEndOffset < lineContent.length && lineContent.charCodeAt(commentStrEndOffset) === _space) {\n\t\t\t\t\tlineData.commentStrLength += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (type === Type.Toggle && onlyWhitespaceLines) {\n\t\t\t// For only whitespace lines, we insert comments\n\t\t\tshouldRemoveComments = false;\n\n\t\t\t// Also, no longer ignore them\n\t\t\tfor (i = 0, lineCount = lines.length; i < lineCount; i++) {\n\t\t\t\tlines[i].ignore = false;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tsupported: true,\n\t\t\tshouldRemoveComments: shouldRemoveComments,\n\t\t\tlines: lines\n\t\t};\n\t}\n\n\t/**\n\t * Analyze all lines and decide exactly what to do => not supported | insert line comments | remove line comments\n\t */\n\tpublic static _gatherPreflightData(type:Type, model:editorCommon.ITokenizedModel, startLineNumber: number, endLineNumber: number): IPreflightData {\n\t\tvar lines = LineCommentCommand._gatherPreflightCommentStrings(model, startLineNumber, endLineNumber);\n\t\tif (lines === null) {\n\t\t\treturn {\n\t\t\t\tsupported: false,\n\t\t\t\tshouldRemoveComments: false,\n\t\t\t\tlines: null\n\t\t\t};\n\t\t}\n\n\t\treturn LineCommentCommand._analyzeLines(type, model, lines, startLineNumber);\n\t}\n\n\t/**\n\t * Given a successful analysis, execute either insert line comments, either remove line comments\n\t */\n\tprivate _executeLineComments(model:ISimpleModel, builder:editorCommon.IEditOperationBuilder, data:IPreflightData, s:editorCommon.IEditorSelection): void {\n\n\t\tvar ops:editorCommon.IIdentifiedSingleEditOperation[];\n\n\t\tif (data.shouldRemoveComments) {\n\t\t\tops = LineCommentCommand._createRemoveLineCommentsOperations(data.lines, s.startLineNumber);\n\t\t} else {\n\t\t\tLineCommentCommand._normalizeInsertionPoint(model, data.lines, s.startLineNumber, this._tabSize);\n\t\t\tops = LineCommentCommand._createAddLineCommentsOperations(data.lines, s.startLineNumber);\n\t\t}\n\n\t\tvar cursorPosition = new Position(s.positionLineNumber, s.positionColumn);\n\n\t\tfor (var i = 0, len = ops.length; i < len; i++) {\n\t\t\tbuilder.addEditOperation(ops[i].range, ops[i].text);\n\t\t\tif (ops[i].range.isEmpty() && ops[i].range.getStartPosition().equals(cursorPosition)) {\n\t\t\t\tthis._deltaColumn = ops[i].text.length;\n\t\t\t}\n\t\t}\n\n\t\tthis._selectionId = builder.trackSelection(s);\n\t}\n\n\tprivate _attemptRemoveBlockComment(model:editorCommon.ITokenizedModel, s:editorCommon.IEditorSelection, startToken: string, endToken: string): editorCommon.IIdentifiedSingleEditOperation[] {\n\t\tlet startLineNumber = s.startLineNumber;\n\t\tlet endLineNumber = s.endLineNumber;\n\n\t\tlet startTokenAllowedBeforeColumn = endToken.length + Math.max(\n\t\t\tmodel.getLineFirstNonWhitespaceColumn(s.startLineNumber),\n\t\t\ts.startColumn\n\t\t);\n\n\t\tlet startTokenIndex = model.getLineContent(startLineNumber).lastIndexOf(startToken, startTokenAllowedBeforeColumn - 1);\n\t\tlet endTokenIndex = model.getLineContent(endLineNumber).indexOf(endToken, s.endColumn - 1 - startToken.length);\n\n\t\tif (startTokenIndex !== -1 && endTokenIndex === -1) {\n\t\t\tendTokenIndex = model.getLineContent(startLineNumber).indexOf(endToken, startTokenIndex + startToken.length);\n\t\t\tendLineNumber = startLineNumber;\n\t\t}\n\n\t\tif (startTokenIndex === -1 && endTokenIndex !== -1) {\n\t\t\tstartTokenIndex = model.getLineContent(endLineNumber).lastIndexOf(startToken, endTokenIndex);\n\t\t\tstartLineNumber = endLineNumber;\n\t\t}\n\n\t\tif (s.isEmpty() && (startTokenIndex === -1 || endTokenIndex === -1)) {\n\t\t\tstartTokenIndex = model.getLineContent(startLineNumber).indexOf(startToken);\n\t\t\tif (startTokenIndex !== -1) {\n\t\t\t\tendTokenIndex = model.getLineContent(startLineNumber).indexOf(endToken, startTokenIndex + startToken.length);\n\t\t\t}\n\t\t}\n\n\t\tif (startTokenIndex !== -1 && endTokenIndex !== -1) {\n\t\t\treturn BlockCommentCommand._createRemoveBlockCommentOperations({\n\t\t\t\tstartLineNumber: startLineNumber,\n\t\t\t\tstartColumn: startTokenIndex + startToken.length + 1,\n\t\t\t\tendLineNumber: endLineNumber,\n\t\t\t\tendColumn: endTokenIndex + 1\n\t\t\t}, startToken, endToken);\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Given an unsuccessful analysis, delegate to the block comment command\n\t */\n\tprivate _executeBlockComment(model:editorCommon.ITokenizedModel, builder:editorCommon.IEditOperationBuilder, s:editorCommon.IEditorSelection): void {\n\t\tlet richEditSupport = model.getModeAtPosition(s.startLineNumber, s.startColumn).richEditSupport;\n\t\tlet config = richEditSupport ? richEditSupport.comments : null;\n\t\tif (!config || !config.blockCommentStartToken || !config.blockCommentEndToken) {\n\t\t\t// Mode does not support block comments\n\t\t\treturn;\n\t\t}\n\n\t\tvar startToken = config.blockCommentStartToken;\n\t\tvar endToken = config.blockCommentEndToken;\n\n\t\tvar ops = this._attemptRemoveBlockComment(model, s, startToken, endToken);\n\t\tif (!ops) {\n\t\t\tif (s.isEmpty()) {\n\t\t\t\tvar lineContent = model.getLineContent(s.startLineNumber);\n\t\t\t\tvar firstNonWhitespaceIndex = strings.firstNonWhitespaceIndex(lineContent);\n\t\t\t\tif (firstNonWhitespaceIndex === -1) {\n\t\t\t\t\t// Line is empty or contains only whitespace\n\t\t\t\t\tfirstNonWhitespaceIndex = lineContent.length;\n\t\t\t\t}\n\t\t\t\tops = BlockCommentCommand._createAddBlockCommentOperations({\n\t\t\t\t\tstartLineNumber: s.startLineNumber,\n\t\t\t\t\tstartColumn: firstNonWhitespaceIndex + 1,\n\t\t\t\t\tendLineNumber: s.startLineNumber,\n\t\t\t\t\tendColumn: lineContent.length + 1\n\t\t\t\t}, startToken, endToken);\n\t\t\t} else {\n\t\t\t\tops = BlockCommentCommand._createAddBlockCommentOperations({\n\t\t\t\t\tstartLineNumber: s.startLineNumber,\n\t\t\t\t\tstartColumn: model.getLineFirstNonWhitespaceColumn(s.startLineNumber),\n\t\t\t\t\tendLineNumber: s.endLineNumber,\n\t\t\t\t\tendColumn: model.getLineMaxColumn(s.endLineNumber)\n\t\t\t\t}, startToken, endToken);\n\t\t\t}\n\n\t\t\tif (ops.length === 1) {\n\t\t\t\tthis._deltaColumn = startToken.length;\n\t\t\t}\n\t\t}\n\t\tthis._selectionId = builder.trackSelection(s);\n\t\tfor (var i = 0; i < ops.length; i++) {\n\t\t\tbuilder.addEditOperation(ops[i].range, ops[i].text);\n\t\t}\n\t}\n\n\tpublic getEditOperations(model:editorCommon.ITokenizedModel, builder:editorCommon.IEditOperationBuilder): void {\n\n\t\tvar s = this._selection;\n\t\tthis._moveEndPositionDown = false;\n\n\t\tif (s.startLineNumber < s.endLineNumber && s.endColumn === 1) {\n\t\t\tthis._moveEndPositionDown = true;\n\t\t\ts = s.setEndPosition(s.endLineNumber - 1, model.getLineMaxColumn(s.endLineNumber - 1));\n\t\t}\n\n\t\tvar data = LineCommentCommand._gatherPreflightData(this._type, model, s.startLineNumber, s.endLineNumber);\n\t\tif (data.supported) {\n\t\t\treturn this._executeLineComments(model, builder, data, s);\n\t\t}\n\n\t\treturn this._executeBlockComment(model, builder, s);\n\t}\n\n\tpublic computeCursorState(model:editorCommon.ITokenizedModel, helper: editorCommon.ICursorStateComputerData): editorCommon.IEditorSelection {\n\t\tvar result = helper.getTrackedSelection(this._selectionId);\n\n\t\tif (this._moveEndPositionDown) {\n\t\t\tresult = result.setEndPosition(result.endLineNumber + 1, 1);\n\t\t}\n\n\t\treturn Selection.createSelection(\n\t\t\tresult.startLineNumber,\n\t\t\tresult.startColumn + this._deltaColumn,\n\t\t\tresult.endLineNumber,\n\t\t\tresult.endColumn + this._deltaColumn\n\t\t);\n\t}\n\n\t/**\n\t * Generate edit operations in the remove line comment case\n\t */\n\tpublic static _createRemoveLineCommentsOperations(lines:ILinePreflightData[], startLineNumber:number): editorCommon.IIdentifiedSingleEditOperation[] {\n\t\tvar i: number,\n\t\t\tlen: number,\n\t\t\tlineData: ILinePreflightData,\n\t\t\tres: editorCommon.IIdentifiedSingleEditOperation[] = [];\n\n\t\tfor (i = 0, len = lines.length; i < len; i++) {\n\t\t\tlineData = lines[i];\n\n\t\t\tif (lineData.ignore) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tres.push(EditOperation.delete(new Range(\n\t\t\t\tstartLineNumber + i, lineData.commentStrOffset + 1,\n\t\t\t\tstartLineNumber + i, lineData.commentStrOffset + lineData.commentStrLength + 1\n\t\t\t)));\n\t\t}\n\n\t\treturn res;\n\t}\n\n\t/**\n\t * Generate edit operations in the add line comment case\n\t */\n\tpublic static _createAddLineCommentsOperations(lines:ILinePreflightData[], startLineNumber:number): editorCommon.IIdentifiedSingleEditOperation[] {\n\t\tvar i: number,\n\t\t\tlen: number,\n\t\t\tlineData: ILinePreflightData,\n\t\t\tres: editorCommon.IIdentifiedSingleEditOperation[] = [];\n\n\t\tfor (i = 0, len = lines.length; i < len; i++) {\n\t\t\tlineData = lines[i];\n\n\t\t\tif (lineData.ignore) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tres.push(EditOperation.insert(new Position(startLineNumber + i, lineData.commentStrOffset + 1), lineData.commentStr + ' '));\n\t\t}\n\n\t\treturn res;\n\t}\n\n\t// TODO@Alex -> duplicated in characterHardWrappingLineMapper\n\tprivate static nextVisibleColumn(currentVisibleColumn:number, tabSize:number, isTab:boolean, columnSize:number): number {\n\t\tif (isTab) {\n\t\t\treturn currentVisibleColumn + (tabSize - (currentVisibleColumn % tabSize));\n\t\t}\n\t\treturn currentVisibleColumn + columnSize;\n\t}\n\n\t/**\n\t * Adjust insertion points to have them vertically aligned in the add line comment case\n\t */\n\tpublic static _normalizeInsertionPoint(model:ISimpleModel, lines:IInsertionPoint[], startLineNumber:number, tabSize:number): void {\n\t\tvar minVisibleColumn = Number.MAX_VALUE,\n\t\t\ti: number,\n\t\t\tlen: number,\n\t\t\tlineContent: string,\n\t\t\tj: number,\n\t\t\tlenJ: number,\n\t\t\tcurrentVisibleColumn: number,\n\t\t\t_tab = '\\t'.charCodeAt(0);\n\n\t\tfor (i = 0, len = lines.length; i < len; i++) {\n\t\t\tif (lines[i].ignore) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tlineContent = model.getLineContent(startLineNumber + i);\n\n\t\t\tcurrentVisibleColumn = 0;\n\t\t\tfor (j = 0, lenJ = lines[i].commentStrOffset; currentVisibleColumn < minVisibleColumn && j < lenJ; j++) {\n\t\t\t\tcurrentVisibleColumn = LineCommentCommand.nextVisibleColumn(currentVisibleColumn, tabSize, lineContent.charCodeAt(j) === _tab, 1);\n\t\t\t}\n\n\t\t\tif (currentVisibleColumn < minVisibleColumn) {\n\t\t\t\tminVisibleColumn = currentVisibleColumn;\n\t\t\t}\n\t\t}\n\n\t\tminVisibleColumn = Math.floor(minVisibleColumn / tabSize) * tabSize;\n\n\t\tfor (i = 0, len = lines.length; i < len; i++) {\n\t\t\tif (lines[i].ignore) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tlineContent = model.getLineContent(startLineNumber + i);\n\n\t\t\tcurrentVisibleColumn = 0;\n\t\t\tfor (j = 0, lenJ = lines[i].commentStrOffset; currentVisibleColumn < minVisibleColumn && j < lenJ; j++) {\n\t\t\t\tcurrentVisibleColumn = LineCommentCommand.nextVisibleColumn(currentVisibleColumn, tabSize, lineContent.charCodeAt(j) === _tab, 1);\n\t\t\t}\n\n\t\t\tif (currentVisibleColumn > minVisibleColumn) {\n\t\t\t\tlines[i].commentStrOffset = j - 1;\n\t\t\t} else {\n\t\t\t\tlines[i].commentStrOffset = j;\n\t\t\t}\n\t\t}\n\t}\n}\n"]}