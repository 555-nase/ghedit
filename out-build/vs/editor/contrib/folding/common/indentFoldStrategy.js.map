{"version":3,"file":"vs/editor/contrib/folding/common/indentFoldStrategy.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/editor/contrib/folding/common/indentFoldStrategy.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport {IModel} from 'vs/editor/common/editorCommon';\nimport {IFoldingRange} from 'vs/editor/contrib/folding/common/foldingRange';\n\nexport function computeRanges(model: IModel, tabSize: number, minimumRangeSize: number = 1): IFoldingRange[] {\n\n\tlet result: IFoldingRange[] = [];\n\n\tlet previousRegions: { indent: number, line: number }[] = [];\n\tpreviousRegions.push({ indent: -1, line: model.getLineCount() + 1 }); // sentinel, to make sure there's at least one entry\n\n\tfor (let line = model.getLineCount(); line > 0; line--) {\n\t\tlet indent = computeIndentLevel(model.getLineContent(line), tabSize);\n\t\tif (indent === -1) {\n\t\t\tcontinue; // only whitespace\n\t\t}\n\n\t\tlet previous = previousRegions[previousRegions.length - 1];\n\n\t\tif (previous.indent > indent) {\n\t\t\t// discard all regions with larger indent\n\t\t\tdo {\n\t\t\t\tpreviousRegions.pop();\n\t\t\t\tprevious = previousRegions[previousRegions.length - 1];\n\t\t\t} while (previous.indent > indent);\n\n\t\t\t// new folding range\n\t\t\tlet endLineNumber = previous.line - 1;\n\t\t\tif (endLineNumber - line >= minimumRangeSize) {\n\t\t\t\tresult.push({ startLineNumber: line, endLineNumber, indent: indent });\n\t\t\t}\n\t\t}\n\t\tif (previous.indent === indent) {\n\t\t\tprevious.line = line;\n\t\t} else { // previous.indent < indent\n\t\t\t// new region with a bigger indent\n\t\t\tpreviousRegions.push({ indent, line });\n\t\t}\n\t}\n\treturn result.reverse();\n}\n\n\nexport function computeIndentLevel(line: string, tabSize: number): number {\n\tlet i = 0;\n\tlet indent = 0;\n\twhile (i < line.length) {\n\t\tlet ch = line.charAt(i);\n\t\tif (ch === ' ') {\n\t\t\tindent++;\n\t\t} else if (ch === '\\t') {\n\t\t\tindent = indent - indent % tabSize + tabSize;\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (i === line.length) {\n\t\treturn -1; // line only consists of whitespace\n\t}\n\treturn indent;\n}\n\n/**\n * Limits the number of folding ranges by removing ranges with larger indent levels\n */\nexport function limitByIndent(ranges: IFoldingRange[], maxEntries: number): IFoldingRange[] {\n\tif (ranges.length <= maxEntries) {\n\t\treturn ranges;\n\t}\n\n\tlet indentOccurrences = [];\n\tranges.forEach(r => {\n\t\tif (r.indent < 1000) {\n\t\t\tindentOccurrences[r.indent] = (indentOccurrences[r.indent] || 0) + 1;\n\t\t}\n\t});\n\tlet maxIndent = indentOccurrences.length;\n\tfor (let i = 0; i < indentOccurrences.length; i++) {\n\t\tif (indentOccurrences[i]) {\n\t\t\tmaxEntries -= indentOccurrences[i];\n\t\t\tif (maxEntries < 0) {\n\t\t\t\tmaxIndent = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t}\n\treturn ranges.filter(r => r.indent < maxIndent);\n}"]}