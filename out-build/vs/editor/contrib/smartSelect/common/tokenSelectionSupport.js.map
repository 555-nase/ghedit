{"version":3,"file":"vs/editor/contrib/smartSelect/common/tokenSelectionSupport.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/editor/contrib/smartSelect/common/tokenSelectionSupport.ts"],"names":[],"mappings":";;;;;;;;;;IAAA;;;oGAGgG;IAChG,YAAY,CAAC;IAUb;QAIC,+BAA2B,YAA2B;YACrD,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;QACnC,CAAC;QAEM,mDAAmB,GAA1B,UAA2B,QAAa,EAAE,QAAmB;YAC5D,MAAM,CAAC,qBAAQ,CAAC,EAAE,CAAC,IAAI,CAAC,uBAAuB,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC,CAAC;QACtE,CAAC;QAEM,uDAAuB,GAA9B,UAA+B,QAAa,EAAE,QAAmB;YAChE,IAAI,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAChD,OAAO,GAA6B,EAAE,CAAC;YAExC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBACX,IAAI,CAAC,sBAAsB,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,OAAO,CAAC,UAAA,KAAK;oBACzD,OAAO,CAAC,IAAI,CAAC;wBACZ,IAAI,EAAE,KAAK,CAAC;wBACZ,OAAA,KAAK;qBACL,CAAC,CAAC;gBACJ,CAAC,CAAC,CAAC;YACJ,CAAC;YAED,MAAM,CAAC,OAAO,CAAC;QAChB,CAAC;QAEO,sDAAsB,GAA9B,UAA+B,KAAa,EAAE,QAAmB;YAEhE,IAAI,IAAI,GAAG,iBAAK,CAAC,KAAK,CAAC,EACtB,IAAU,EACV,SAAiB,CAAC;YAEnB,IAAI,GAAG,gBAAI,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;YAC5B,IAAI,MAAM,GAAa,EAAE,CAAC;YAC1B,OAAO,IAAI,EAAE,CAAC;gBACb,EAAE,CAAC,CAAC,CAAC,SAAS,IAAI,CAAC,aAAK,CAAC,WAAW,CAAC,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;oBAC7D,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBACzB,CAAC;gBACD,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC;gBACvB,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC;YACpB,CAAC;YACD,MAAM,GAAG,MAAM,CAAC,OAAO,EAAE,CAAC;YAC1B,MAAM,CAAC,MAAM,CAAC;QACf,CAAC;QAzCW;uBAAC,4BAAa;iCAAA;QA2C3B,4BAAC;IAAD,CAAC,AA/CD,IA+CC;IA/CY,6BAAqB,wBA+CjC,CAAA","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport URI from 'vs/base/common/uri';\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport {Range} from 'vs/editor/common/core/range';\nimport {IModel, IPosition, IRange} from 'vs/editor/common/editorCommon';\nimport {ILogicalSelectionEntry, ILogicalSelectionSupport} from 'vs/editor/common/modes';\nimport {IModelService} from 'vs/editor/common/services/modelService';\nimport {Node, build, find} from './tokenTree';\n\nexport class TokenSelectionSupport implements ILogicalSelectionSupport {\n\n\tprivate _modelService: IModelService;\n\n\tconstructor(@IModelService modelService: IModelService) {\n\t\tthis._modelService = modelService;\n\t}\n\n\tpublic getRangesToPosition(resource: URI, position: IPosition): TPromise<ILogicalSelectionEntry[]> {\n\t\treturn TPromise.as(this.getRangesToPositionSync(resource, position));\n\t}\n\n\tpublic getRangesToPositionSync(resource: URI, position: IPosition): ILogicalSelectionEntry[] {\n\t\tvar model = this._modelService.getModel(resource),\n\t\t\tentries: ILogicalSelectionEntry[] = [];\n\n\t\tif (model) {\n\t\t\tthis._doGetRangesToPosition(model, position).forEach(range => {\n\t\t\t\tentries.push({\n\t\t\t\t\ttype: void 0,\n\t\t\t\t\trange\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\treturn entries;\n\t}\n\n\tprivate _doGetRangesToPosition(model: IModel, position: IPosition): IRange[] {\n\n\t\tvar tree = build(model),\n\t\t\tnode: Node,\n\t\t\tlastRange: IRange;\n\n\t\tnode = find(tree, position);\n\t\tvar ranges: IRange[] = [];\n\t\twhile (node) {\n\t\t\tif (!lastRange || !Range.equalsRange(lastRange, node.range)) {\n\t\t\t\tranges.push(node.range);\n\t\t\t}\n\t\t\tlastRange = node.range;\n\t\t\tnode = node.parent;\n\t\t}\n\t\tranges = ranges.reverse();\n\t\treturn ranges;\n\t}\n\n}\n"]}