{"version":3,"file":"vs/editor/contrib/inPlaceReplace/common/inPlaceReplaceCommand.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/editor/contrib/inPlaceReplace/common/inPlaceReplaceCommand.ts"],"names":[],"mappings":";IAAA;;;oGAGgG;IAChG,YAAY,CAAC;IAKb;QAMC,+BAAY,SAAoC,EAAE,iBAAgD,EAAE,IAAW;YAC9G,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;YAC5B,IAAI,CAAC,kBAAkB,GAAG,iBAAiB,CAAC;YAC5C,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QACnB,CAAC;QAEM,iDAAiB,GAAxB,UAAyB,KAAkC,EAAE,OAA0C;YACtG,OAAO,CAAC,gBAAgB,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;QACvD,CAAC;QAEM,kDAAkB,GAAzB,UAA0B,KAAkC,EAAE,MAA6C;YAC1G,IAAI,qBAAqB,GAAG,MAAM,CAAC,wBAAwB,EAAE,CAAC;YAC9D,IAAI,QAAQ,GAAG,qBAAqB,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;YAE9C,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;gBACxC,+CAA+C;gBAC/C,MAAM,CAAC,qBAAS,CAAC,eAAe,CAC/B,QAAQ,CAAC,aAAa,EACtB,QAAQ,CAAC,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,EACtC,QAAQ,CAAC,aAAa,EACtB,QAAQ,CAAC,SAAS,CAClB,CAAC;YACH,CAAC;YAED,MAAM,CAAC,qBAAS,CAAC,eAAe,CAC/B,QAAQ,CAAC,aAAa,EACtB,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,kBAAkB,CAAC,cAAc,EAAE,QAAQ,CAAC,SAAS,CAAC,EACpE,QAAQ,CAAC,aAAa,EACtB,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,kBAAkB,CAAC,cAAc,EAAE,QAAQ,CAAC,SAAS,CAAC,CACpE,CAAC;QACH,CAAC;QACF,4BAAC;IAAD,CAAC,AArCD,IAqCC;IArCY,6BAAqB,wBAqCjC,CAAA","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {Selection} from 'vs/editor/common/core/selection';\nimport * as editorCommon from 'vs/editor/common/editorCommon';\n\nexport class InPlaceReplaceCommand implements editorCommon.ICommand {\n\n\tprivate _editRange: editorCommon.IEditorRange;\n\tprivate _originalSelection: editorCommon.IEditorSelection;\n\tprivate _text:string;\n\n\tconstructor(editRange: editorCommon.IEditorRange, originalSelection: editorCommon.IEditorSelection, text:string) {\n\t\tthis._editRange = editRange;\n\t\tthis._originalSelection = originalSelection;\n\t\tthis._text = text;\n\t}\n\n\tpublic getEditOperations(model:editorCommon.ITokenizedModel, builder:editorCommon.IEditOperationBuilder):void {\n\t\tbuilder.addEditOperation(this._editRange, this._text);\n\t}\n\n\tpublic computeCursorState(model:editorCommon.ITokenizedModel, helper: editorCommon.ICursorStateComputerData):editorCommon.IEditorSelection {\n\t\tvar inverseEditOperations = helper.getInverseEditOperations();\n\t\tvar srcRange = inverseEditOperations[0].range;\n\n\t\tif (!this._originalSelection.isEmpty()) {\n\t\t\t// Preserve selection and extends to typed text\n\t\t\treturn Selection.createSelection(\n\t\t\t\tsrcRange.endLineNumber,\n\t\t\t\tsrcRange.endColumn - this._text.length,\n\t\t\t\tsrcRange.endLineNumber,\n\t\t\t\tsrcRange.endColumn\n\t\t\t);\n\t\t}\n\n\t\treturn Selection.createSelection(\n\t\t\tsrcRange.endLineNumber,\n\t\t\tMath.min(this._originalSelection.positionColumn, srcRange.endColumn),\n\t\t\tsrcRange.endLineNumber,\n\t\t\tMath.min(this._originalSelection.positionColumn, srcRange.endColumn)\n\t\t);\n\t}\n}\n"]}