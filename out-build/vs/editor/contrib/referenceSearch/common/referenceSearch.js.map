{"version":3,"file":"vs/editor/contrib/referenceSearch/common/referenceSearch.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/editor/contrib/referenceSearch/common/referenceSearch.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;IAEhG,YAAY,CAAC;IAQb,wBAA+B,KAAa,EAAE,QAAmB;QAEhE,wCAAwC;QACxC,IAAM,QAAQ,GAAG,+BAAuB,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,UAAA,QAAQ;YACnE,MAAM,CAAC,QAAQ,CAAC,cAAc,CAAC,KAAK,CAAC,qBAAqB,EAAE,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC,IAAI,CAAC,UAAA,MAAM;gBACxF,EAAE,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;oBAC3B,MAAM,CAAgB,MAAM,CAAC;gBAC9B,CAAC;YACF,CAAC,EAAE,UAAA,GAAG;gBACL,0BAAiB,CAAC,GAAG,CAAC,CAAC;YACxB,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,qBAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,UAAA,UAAU;YAC7C,IAAI,MAAM,GAAiB,EAAE,CAAC;YAC9B,GAAG,CAAC,CAAY,UAAU,EAAV,yBAAU,EAAV,wBAAU,EAAV,IAAU,CAAC;gBAAtB,IAAI,GAAG,mBAAA;gBACX,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACT,MAAM,CAAC,IAAI,OAAX,MAAM,EAAS,GAAG,CAAC,CAAC;gBACrB,CAAC;aACD;YACD,MAAM,CAAC,MAAM,CAAC;QACf,CAAC,CAAC,CAAC;IACJ,CAAC;IAtBe,sBAAc,iBAsB7B,CAAA;IAED,6CAAoB,CAAC,8BAA8B,CAAC,2BAA2B,EAAE,cAAc,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport {onUnexpectedError} from 'vs/base/common/errors';\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport {IModel, IPosition} from 'vs/editor/common/editorCommon';\nimport {CommonEditorRegistry} from 'vs/editor/common/editorCommonExtensions';\nimport {IReference, ReferenceSearchRegistry} from 'vs/editor/common/modes';\n\nexport function findReferences(model: IModel, position: IPosition): TPromise<IReference[]> {\n\n\t// collect references from all providers\n\tconst promises = ReferenceSearchRegistry.ordered(model).map(provider => {\n\t\treturn provider.findReferences(model.getAssociatedResource(), position, true).then(result => {\n\t\t\tif (Array.isArray(result)) {\n\t\t\t\treturn <IReference[]> result;\n\t\t\t}\n\t\t}, err => {\n\t\t\tonUnexpectedError(err);\n\t\t});\n\t});\n\n\treturn TPromise.join(promises).then(references => {\n\t\tlet result: IReference[] = [];\n\t\tfor (let ref of references) {\n\t\t\tif (ref) {\n\t\t\t\tresult.push(...ref);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t});\n}\n\nCommonEditorRegistry.registerDefaultLanguageCommand('_executeReferenceProvider', findReferences);"]}