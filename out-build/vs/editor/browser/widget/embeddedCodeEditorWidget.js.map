{"version":3,"file":"vs/editor/browser/widget/embeddedCodeEditorWidget.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/editor/browser/widget/embeddedCodeEditorWidget.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;IAAA;;;oGAGgG;IAChG,YAAY,CAAC;IAWb;QAA8C,4CAAgB;QAK7D,kCACC,UAAsB,EACtB,OAAwC,EACxC,YAAwB,EACD,oBAA2C,EAC9C,iBAAqC,EACrC,iBAAqC,EACtC,gBAAmC;YAZxD,iBAkCC;YApBC,kBAAM,UAAU,EAAE,YAAY,CAAC,mBAAmB,EAAE,EAAE,oBAAoB,EAAE,iBAAiB,EAAE,iBAAiB,EAAE,gBAAgB,CAAC,CAAC;YAEpI,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;YAClC,IAAI,CAAC,iBAAiB,GAAG,OAAO,CAAC;YAEjC,6BAA6B;YAC7B,gBAAK,CAAC,aAAa,YAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;YAE5C,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,wBAAS,CAAC,oBAAoB,EAAE,UAAC,CAA4B,IAAK,OAAA,KAAI,CAAC,6BAA6B,CAAC,CAAC,CAAC,EAArC,CAAqC,CAAC,CAAC,CAAC;QAChK,CAAC;QAEO,gEAA6B,GAArC,UAAsC,CAA4B;YACjE,gBAAK,CAAC,aAAa,YAAC,IAAI,CAAC,aAAa,CAAC,mBAAmB,EAAE,CAAC,CAAC;YAC9D,gBAAK,CAAC,aAAa,YAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;QAC7C,CAAC;QAEM,gDAAa,GAApB,UAAqB,UAAyB;YAC7C,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,iBAAiB,EAAE,UAAU,EAAE,IAAI,CAAC,CAAC;YACxD,gBAAK,CAAC,aAAa,YAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;QAC7C,CAAC;QAxBA;uBAAC,qCAAqB;uBACrB,sCAAkB;uBAClB,sCAAkB;uBAClB,6BAAiB;oCAHI;QAyBxB,+BAAC;IAAD,CAAC,AAlCD,CAA8C,mCAAgB,GAkC7D;IAlCY,gCAAwB,2BAkCpC,CAAA","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport * as objects from 'vs/base/common/objects';\nimport {IInstantiationService} from 'vs/platform/instantiation/common/instantiation';\nimport {IKeybindingService} from 'vs/platform/keybinding/common/keybindingService';\nimport {ITelemetryService} from 'vs/platform/telemetry/common/telemetry';\nimport {EventType, ICodeEditorWidgetCreationOptions, IConfigurationChangedEvent, IEditorOptions} from 'vs/editor/common/editorCommon';\nimport {ICodeEditorService} from 'vs/editor/common/services/codeEditorService';\nimport {ICodeEditor} from 'vs/editor/browser/editorBrowser';\nimport {CodeEditorWidget} from 'vs/editor/browser/widget/codeEditorWidget';\n\nexport class EmbeddedCodeEditorWidget extends CodeEditorWidget {\n\n\tprivate _parentEditor: ICodeEditor;\n\tprivate _overwriteOptions: ICodeEditorWidgetCreationOptions;\n\n\tconstructor(\n\t\tdomElement:HTMLElement,\n\t\toptions:ICodeEditorWidgetCreationOptions,\n\t\tparentEditor:ICodeEditor,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@ICodeEditorService codeEditorService: ICodeEditorService,\n\t\t@IKeybindingService keybindingService: IKeybindingService,\n\t\t@ITelemetryService telemetryService: ITelemetryService\n\t) {\n\t\tsuper(domElement, parentEditor.getRawConfiguration(), instantiationService, codeEditorService, keybindingService, telemetryService);\n\n\t\tthis._parentEditor = parentEditor;\n\t\tthis._overwriteOptions = options;\n\n\t\t// Overwrite parent's options\n\t\tsuper.updateOptions(this._overwriteOptions);\n\n\t\tthis._lifetimeDispose.push(parentEditor.addListener2(EventType.ConfigurationChanged, (e:IConfigurationChangedEvent) => this._onParentConfigurationChanged(e)));\n\t}\n\n\tprivate _onParentConfigurationChanged(e:IConfigurationChangedEvent): void {\n\t\tsuper.updateOptions(this._parentEditor.getRawConfiguration());\n\t\tsuper.updateOptions(this._overwriteOptions);\n\t}\n\n\tpublic updateOptions(newOptions:IEditorOptions): void {\n\t\tobjects.mixin(this._overwriteOptions, newOptions, true);\n\t\tsuper.updateOptions(this._overwriteOptions);\n\t}\n}"]}