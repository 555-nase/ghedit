{"version":3,"file":"colorizer.js","sourceRoot":"","sources":["../../../../../src/vs/editor/browser/standalone/colorizer.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {RunOnceScheduler} from 'vs/base/common/async';\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport {ViewLineToken, IModel} from 'vs/editor/common/editorCommon';\nimport {ILineTokens, IMode} from 'vs/editor/common/modes';\nimport {IModeService} from 'vs/editor/common/services/modeService';\nimport {RenderLineOutput, renderLine, RenderLineInput} from 'vs/editor/common/viewLayout/viewLineRenderer';\nimport * as TokensBinaryEncoding from 'vs/editor/common/model/tokensBinaryEncoding';\n\nexport interface IColorizerOptions {\n\ttabSize?: number;\n}\n\nexport interface IColorizerElementOptions extends IColorizerOptions {\n\ttheme?: string;\n\tmimeType?: string;\n}\n\nexport class Colorizer {\n\n\tpublic static colorizeElement(modeService:IModeService, domNode:HTMLElement, options:IColorizerElementOptions): TPromise<void> {\n\t\toptions = options || {};\n\t\tvar theme = options.theme || 'vs';\n\t\tvar mimeType = options.mimeType || domNode.getAttribute('lang') || domNode.getAttribute('data-lang');\n\t\tif (!mimeType) {\n\t\t\tconsole.error('Mode not detected');\n\t\t\treturn;\n\t\t}\n\t\tvar text = domNode.firstChild.nodeValue;\n\t\tdomNode.className += 'monaco-editor ' + theme;\n\t\tvar render = (str:string) => {\n\t\t\tdomNode.innerHTML = str;\n\t\t};\n\t\treturn this.colorize(modeService, text, mimeType, options).then(render, (err) => console.error(err), render);\n\t}\n\n\tpublic static colorize(modeService:IModeService, text:string, mimeType:string, options:IColorizerOptions): TPromise<string> {\n\t\toptions = options || {};\n\t\tif (typeof options.tabSize === 'undefined') {\n\t\t\toptions.tabSize = 4;\n\t\t}\n\n\t\tvar lines = text.split('\\n'),\n\t\t\tc: (v:string)=>void,\n\t\t\te: (err:any)=>void,\n\t\t\tp: (v:string)=>void,\n\t\t\tisCancelled = false,\n\t\t\tmode: IMode;\n\n\t\tvar result = new TPromise<string>((_c, _e, _p) => {\n\t\t\tc = _c;\n\t\t\te = _e;\n\t\t\tp = _p;\n\t\t}, () => {\n\t\t\tisCancelled = true;\n\t\t});\n\n\t\tvar colorize = new RunOnceScheduler(() => {\n\t\t\tif (isCancelled) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar r = actualColorize(lines, mode, options.tabSize);\n\t\t\tif (r.retokenize.length > 0) {\n\t\t\t\t// There are retokenization requests\n\t\t\t\tr.retokenize.forEach((p) => p.then(scheduleColorize));\n\t\t\t\tp(r.result);\n\t\t\t} else {\n\t\t\t\t// There are no (more) retokenization requests\n\t\t\t\tc(r.result);\n\t\t\t}\n\t\t}, 0);\n\t\tvar scheduleColorize = () => colorize.schedule();\n\n\t\tmodeService.getOrCreateMode(mimeType).then((_mode) => {\n\t\t\tif (!_mode) {\n\t\t\t\te('Mode not found: \"' + mimeType + '\".');\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!_mode.tokenizationSupport) {\n\t\t\t\te('Mode found (\"' + _mode.getId() + '\"), but does not support tokenization.');\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tmode = _mode;\n\t\t\tscheduleColorize();\n\t\t});\n\n\t\treturn result;\n\t}\n\n\tpublic static colorizeLine(line:string, tokens:ViewLineToken[], tabSize:number = 4): string {\n\t\tvar renderResult = renderLine(new RenderLineInput(\n\t\t\tline,\n\t\t\ttabSize,\n\t\t\t0,\n\t\t\t-1,\n\t\t\tfalse,\n\t\t\ttokens\n\t\t));\n\t\treturn renderResult.output;\n\t}\n\n\tpublic static colorizeModelLine(model:IModel, lineNumber:number, tabSize:number = 4): string {\n\t\tvar content = model.getLineContent(lineNumber);\n\t\tvar tokens = model.getLineTokens(lineNumber, false);\n\t\tvar inflatedTokens = TokensBinaryEncoding.inflateArr(tokens.getBinaryEncodedTokensMap(), tokens.getBinaryEncodedTokens());\n\t\treturn this.colorizeLine(content, inflatedTokens, tabSize);\n\t}\n}\n\n\ninterface IActualColorizeResult {\n\tresult:string;\n\tretokenize:TPromise<void>[];\n}\n\nfunction actualColorize(lines:string[], mode:IMode, tabSize:number): IActualColorizeResult {\n\tvar tokenization = mode.tokenizationSupport,\n\t\thtml:string[] = [],\n\t\tstate = tokenization.getInitialState(),\n\t\ti:number,\n\t\tlength:number,\n\t\tline: string,\n\t\ttokenizeResult: ILineTokens,\n\t\trenderResult: RenderLineOutput,\n\t\tretokenize: TPromise<void>[] = [];\n\n\tfor (i = 0, length = lines.length; i < length; i++) {\n\t\tline = lines[i];\n\n\t\ttokenizeResult = tokenization.tokenize(line, state);\n\t\tif (tokenizeResult.retokenize) {\n\t\t\tretokenize.push(tokenizeResult.retokenize);\n\t\t}\n\n\t\trenderResult = renderLine(new RenderLineInput(\n\t\t\tline,\n\t\t\ttabSize,\n\t\t\t0,\n\t\t\t-1,\n\t\t\tfalse,\n\t\t\ttokenizeResult.tokens.map(t => new ViewLineToken(t.startIndex, t.type))\n\t\t));\n\n\t\thtml = html.concat(renderResult.output);\n\t\thtml.push('<br/>');\n\n\t\tstate = tokenizeResult.endState;\n\t}\n\n\treturn {\n\t\tresult: html.join(''),\n\t\tretokenize: retokenize\n\t};\n}"]}