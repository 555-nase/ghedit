{"version":3,"file":"vs/editor/test/common/testModes.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/editor/test/common/testModes.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport * as modes from 'vs/editor/common/modes';\nimport {AbstractState} from 'vs/editor/common/modes/abstractState';\nimport {RichEditSupport} from 'vs/editor/common/modes/supports/richEditSupport';\nimport {TokenizationSupport} from 'vs/editor/common/modes/supports/tokenizationSupport';\nimport {MockMode} from 'vs/editor/test/common/mocks/mockMode';\n\nexport class CommentState extends AbstractState {\n\n\tconstructor(mode:modes.IMode, stateCount:number) {\n\t\tsuper(mode);\n\t}\n\n\tpublic makeClone():CommentState {\n\t\treturn this;\n\t}\n\n\tpublic equals(other:modes.IState):boolean {\n\t\treturn true;\n\t}\n\n\tpublic tokenize(stream:modes.IStream):modes.ITokenizationResult {\n\t\tstream.advanceToEOS();\n\t\treturn { type: 'state' };\n\t}\n}\n\nexport class CommentMode extends MockMode {\n\n\tpublic tokenizationSupport: modes.ITokenizationSupport;\n\tpublic richEditSupport: modes.IRichEditSupport;\n\n\tconstructor(commentsConfig:modes.ICommentsConfiguration) {\n\t\tsuper();\n\t\tthis.tokenizationSupport = new TokenizationSupport(this, {\n\t\t\tgetInitialState: () => new CommentState(this, 0)\n\t\t}, false, false);\n\n\t\tthis.richEditSupport = {\n\t\t\tcomments:commentsConfig\n\t\t};\n\t}\n}\n\nexport abstract class AbstractIndentingMode extends MockMode {\n\n\tpublic getElectricCharacters():string[] {\n\t\treturn null;\n\t}\n\n\tpublic onElectricCharacter(context:modes.ILineContext, offset:number):modes.IElectricAction {\n\t\treturn null;\n\t}\n\n\tpublic onEnter(context:modes.ILineContext, offset:number):modes.IEnterAction {\n\t\treturn null;\n\t}\n\n}\n\nexport class ModelState1 extends AbstractState {\n\n\tconstructor(mode:modes.IMode) {\n\t\tsuper(mode);\n\t}\n\n\tpublic makeClone():ModelState1 {\n\t\treturn this;\n\t}\n\n\tpublic equals(other: modes.IState):boolean {\n\t\treturn this === other;\n\t}\n\n\tpublic tokenize(stream:modes.IStream):modes.ITokenizationResult {\n\t\t(<ModelMode1>this.getMode()).calledFor.push(stream.next());\n\t\tstream.advanceToEOS();\n\t\treturn { type: '' };\n\t}\n}\n\nexport class ModelMode1 extends MockMode {\n\tpublic calledFor:string[];\n\n\tpublic tokenizationSupport: modes.ITokenizationSupport;\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.calledFor = [];\n\t\tthis.tokenizationSupport = new TokenizationSupport(this, {\n\t\t\tgetInitialState: () => new ModelState1(this)\n\t\t}, false, false);\n\t}\n}\n\nexport class ModelState2 extends AbstractState {\n\n\tprivate prevLineContent:string;\n\n\tconstructor(mode:ModelMode2, prevLineContent:string) {\n\t\tsuper(mode);\n\t\tthis.prevLineContent = prevLineContent;\n\t}\n\n\tpublic makeClone():ModelState2 {\n\t\treturn new ModelState2(<ModelMode2>this.getMode(), this.prevLineContent);\n\t}\n\n\tpublic equals(other: modes.IState):boolean {\n\t\treturn (other instanceof ModelState2) && (this.prevLineContent === (<ModelState2>other).prevLineContent);\n\t}\n\n\tpublic tokenize(stream:modes.IStream):modes.ITokenizationResult {\n\t\tvar line= '';\n\t\twhile (!stream.eos()) {\n\t\t\tline+= stream.next();\n\t\t}\n\t\tthis.prevLineContent= line;\n\t\treturn { type: '' };\n\t}\n}\n\nexport class ModelMode2 extends MockMode {\n\tpublic calledFor:any[];\n\n\tpublic tokenizationSupport: modes.ITokenizationSupport;\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.calledFor = null;\n\t\tthis.tokenizationSupport = new TokenizationSupport(this, {\n\t\t\tgetInitialState: () => new ModelState2(this, '')\n\t\t}, false, false);\n\t}\n}\n\nexport class BracketMode extends MockMode {\n\n\tpublic richEditSupport: modes.IRichEditSupport;\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.richEditSupport = new RichEditSupport(this.getId(), null, {\n\t\t\tbrackets: [\n\t\t\t\t['{', '}'],\n\t\t\t\t['[', ']'],\n\t\t\t\t['(', ')'],\n\t\t\t]\n\t\t});\n\t}\n}\n\nexport class NState extends AbstractState {\n\n\tprivate n:number;\n\tprivate allResults:modes.ITokenizationResult[];\n\n\tconstructor(mode:modes.IMode, n:number) {\n\t\tsuper(mode);\n\t\tthis.n = n;\n\t\tthis.allResults = null;\n\t}\n\n\n\tpublic makeClone():NState {\n\t\treturn this;\n\t}\n\n\tpublic equals(other: modes.IState):boolean {\n\t\treturn true;\n\t}\n\n\tpublic tokenize(stream:modes.IStream):modes.ITokenizationResult {\n\t\tvar ndash = this.n, value = '';\n\t\twhile(!stream.eos() && ndash > 0) {\n\t\t\tvalue += stream.next();\n\t\t\tndash--;\n\t\t}\n\t\treturn { type: 'n-' + (this.n - ndash) + '-' + value };\n\t}\n}\n\nexport class NMode extends MockMode {\n\n\tprivate n:number;\n\n\tpublic tokenizationSupport: modes.ITokenizationSupport;\n\n\tconstructor(n:number) {\n\t\tsuper();\n\t\tthis.n = n;\n\t\tthis.tokenizationSupport = new TokenizationSupport(this, {\n\t\t\tgetInitialState: () => new NState(this, this.n)\n\t\t}, false, false);\n\t}\n}"]}