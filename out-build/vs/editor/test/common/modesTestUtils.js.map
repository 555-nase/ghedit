{"version":3,"file":"vs/editor/test/common/modesTestUtils.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/editor/test/common/modesTestUtils.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {Arrays} from 'vs/editor/common/core/arrays';\nimport * as modes from 'vs/editor/common/modes';\nimport {RichEditSupport} from 'vs/editor/common/modes/supports/richEditSupport';\nimport {MockMode} from 'vs/editor/test/common/mocks/mockMode';\nimport {ModeTransition} from 'vs/editor/common/core/modeTransition';\n\nclass ModeWithRichEditSupport extends MockMode {\n\n\tpublic richEditSupport: modes.IRichEditSupport;\n\n\tconstructor(id:string, wordRegExp:RegExp) {\n\t\tsuper(id);\n\t\tthis.richEditSupport = new RichEditSupport(id, null, {\n\t\t\twordPattern: wordRegExp\n\t\t});\n\t}\n}\n\nexport function createMockMode(id:string, wordRegExp:RegExp = null):modes.IMode {\n\treturn new ModeWithRichEditSupport(id, wordRegExp);\n}\n\nexport interface TokenText {\n\ttext: string;\n\ttype: string;\n}\n\nexport function createLineContextFromTokenText(tokens: TokenText[]): modes.ILineContext {\n\tvar line = '';\n\tvar processedTokens: modes.IToken[] = [];\n\n\tvar indexSoFar = 0;\n\tfor (var i = 0; i < tokens.length; ++i){\n\t\tprocessedTokens.push({ startIndex: indexSoFar, type: tokens[i].type });\n\t\tline += tokens[i].text;\n\t\tindexSoFar += tokens[i].text.length;\n\t}\n\n\treturn new TestLineContext(line, processedTokens, null);\n}\n\nexport function createMockLineContext(line:string, tokens:modes.ILineTokens): modes.ILineContext {\n\treturn new TestLineContext(line, tokens.tokens, ModeTransition.create(tokens.modeTransitions));\n}\n\nclass TestLineContext implements modes.ILineContext {\n\n\tpublic modeTransitions: ModeTransition[];\n\tprivate _line:string;\n\tprivate _tokens: modes.IToken[];\n\n\tconstructor(line:string, tokens: modes.IToken[], modeTransitions:ModeTransition[]) {\n\t\tthis.modeTransitions = modeTransitions;\n\t\tthis._line = line;\n\t\tthis._tokens = tokens;\n\t}\n\n\tpublic getLineContent(): string {\n\t\treturn this._line;\n\t}\n\n\tpublic getTokenCount(): number {\n\t\treturn this._tokens.length;\n\t}\n\n\tpublic getTokenStartIndex(tokenIndex:number): number {\n\t\treturn this._tokens[tokenIndex].startIndex;\n\t}\n\n\tpublic getTokenEndIndex(tokenIndex:number): number {\n\t\tif (tokenIndex + 1 < this._tokens.length) {\n\t\t\treturn this._tokens[tokenIndex + 1].startIndex;\n\t\t}\n\t\treturn this._line.length;\n\t}\n\n\tpublic getTokenType(tokenIndex:number): string {\n\t\treturn this._tokens[tokenIndex].type;\n\t}\n\n\tpublic findIndexOfOffset(offset:number): number {\n\t\treturn Arrays.findIndexInSegmentsArray(this._tokens, offset);\n\t}\n\n\tpublic getTokenText(tokenIndex:number): string {\n\t\tvar startIndex = this._tokens[tokenIndex].startIndex;\n\t\tvar endIndex = tokenIndex + 1 < this._tokens.length ? this._tokens[tokenIndex + 1].startIndex : this._line.length;\n\t\treturn this._line.substring(startIndex, endIndex);\n\t}\n}"]}