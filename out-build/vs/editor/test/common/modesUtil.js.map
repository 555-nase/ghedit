{"version":3,"file":"vs/editor/test/common/modesUtil.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/editor/test/common/modesUtil.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport * as assert from 'assert';\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport {Model} from 'vs/editor/common/model/model';\nimport * as modes from 'vs/editor/common/modes';\nimport {compile} from 'vs/editor/common/modes/monarch/monarchCompile';\nimport {createTokenizationSupport} from 'vs/editor/common/modes/monarch/monarchLexer';\nimport {ILanguage} from 'vs/editor/common/modes/monarch/monarchTypes';\nimport {createMockModeService} from 'vs/editor/test/common/servicesTestUtils';\nimport {MockMode} from 'vs/editor/test/common/mocks/mockMode';\n\nexport interface IRelaxedToken {\n\tstartIndex:number;\n\ttype:string;\n}\n\nexport interface ITestItem {\n\tline: string;\n\ttokens: IRelaxedToken[];\n}\n\nexport function assertWords(actual:string[], expected:string[], message?:string): void {\n\tassert.deepEqual(actual, expected, message);\n}\n\nexport function assertTokenization(tokenizationSupport: modes.ITokenizationSupport, tests: ITestItem[]): void {\n\tvar state = tokenizationSupport.getInitialState();\n\tfor (var i = 0, len = tests.length; i < len; i++) {\n\t\tassert.ok(true, tests[i].line);\n\t\tvar result = tokenizationSupport.tokenize(tests[i].line, state);\n\t\tif (tests[i].tokens) {\n\t\t\tassert.deepEqual(toRelaxedTokens(result.tokens), toRelaxedTokens(tests[i].tokens), JSON.stringify(result.tokens, null, '\\t'));\n\t\t}\n\n\t\tstate = result.endState;\n\t}\n}\n\nexport interface IOnEnterAsserter {\n\tnothing(oneLineAboveText:string, beforeText:string, afterText:string): void;\n\tindents(oneLineAboveText:string, beforeText:string, afterText:string): void;\n\toutdents(oneLineAboveText:string, beforeText:string, afterText:string): void;\n\tindentsOutdents(oneLineAboveText:string, beforeText:string, afterText:string): void;\n}\n\nexport function createOnEnterAsserter(modeId:string, richEditSupport: modes.IRichEditSupport): IOnEnterAsserter {\n\tvar assertOne = (oneLineAboveText:string, beforeText:string, afterText:string, expected: modes.IndentAction) => {\n\t\tvar model = new Model(\n\t\t\t[ oneLineAboveText, beforeText + afterText ].join('\\n'),\n\t\t\tModel.DEFAULT_CREATION_OPTIONS,\n\t\t\tnew MockMode(modeId)\n\t\t);\n\t\tvar actual = richEditSupport.onEnter.onEnter(model, { lineNumber: 2, column: beforeText.length + 1 });\n\t\tif (expected === modes.IndentAction.None) {\n\t\t\tassert.equal(actual, null, oneLineAboveText + '\\\\n' + beforeText + '|' + afterText);\n\t\t} else {\n\t\t\tassert.equal(actual.indentAction, expected, oneLineAboveText + '\\\\n' + beforeText + '|' + afterText);\n\t\t}\n\t\tmodel.dispose();\n\t};\n\treturn {\n\t\tnothing: (oneLineAboveText:string, beforeText:string, afterText:string): void => {\n\t\t\tassertOne(oneLineAboveText, beforeText, afterText, modes.IndentAction.None);\n\t\t},\n\t\tindents: (oneLineAboveText:string, beforeText:string, afterText:string): void => {\n\t\t\tassertOne(oneLineAboveText, beforeText, afterText, modes.IndentAction.Indent);\n\t\t},\n\t\toutdents: (oneLineAboveText:string, beforeText:string, afterText:string): void => {\n\t\t\tassertOne(oneLineAboveText, beforeText, afterText, modes.IndentAction.Outdent);\n\t\t},\n\t\tindentsOutdents: (oneLineAboveText:string, beforeText:string, afterText:string): void => {\n\t\t\tassertOne(oneLineAboveText, beforeText, afterText, modes.IndentAction.IndentOutdent);\n\t\t}\n\t};\n}\n\nexport function executeTests(tokenizationSupport: modes.ITokenizationSupport, tests:ITestItem[][]): void {\n\tfor (var i = 0, len = tests.length; i < len; i++) {\n\t\tassert.ok(true, 'TEST #' + i);\n\t\texecuteTest(tokenizationSupport, tests[i]);\n\t}\n}\n\n\nexport function executeMonarchTokenizationTests(name:string, language:ILanguage, tests:ITestItem[][]): void {\n\tvar lexer = compile(language);\n\n\tvar modeService = createMockModeService();\n\n\tvar tokenizationSupport = createTokenizationSupport(modeService, new MockMode(), lexer);\n\n\texecuteTests(tokenizationSupport, tests);\n}\n\nfunction toRelaxedTokens(tokens: modes.IToken[]): IRelaxedToken[] {\n\treturn tokens.map((t) => {\n\t\treturn {\n\t\t\tstartIndex: t.startIndex,\n\t\t\ttype: t.type\n\t\t};\n\t});\n}\n\nfunction executeTest(tokenizationSupport: modes.ITokenizationSupport, tests:ITestItem[]): void {\n\tvar state = tokenizationSupport.getInitialState();\n\tfor (var i = 0, len = tests.length; i < len; i++) {\n\t\tassert.ok(true, tests[i].line);\n\n\t\tvar result = tokenizationSupport.tokenize(tests[i].line, state);\n\n\t\tif (tests[i].tokens) {\n\t\t\tassertTokens(result.tokens, tests[i].tokens, 'Tokenizing line ' + tests[i].line);\n\t\t}\n\n\t\tstate = result.endState;\n\t}\n}\n\nfunction assertTokens(actual:modes.IToken[], expected:IRelaxedToken[], message?:string): void {\n\tassert.deepEqual(toRelaxedTokens(actual), toRelaxedTokens(expected), message + ': ' + JSON.stringify(actual, null, '\\t'));\n}"]}