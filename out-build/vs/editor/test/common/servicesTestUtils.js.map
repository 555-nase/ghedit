{"version":3,"file":"vs/editor/test/common/servicesTestUtils.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/editor/test/common/servicesTestUtils.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport URI from 'vs/base/common/uri';\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport {IConfigurationService} from 'vs/platform/configuration/common/configuration';\nimport {ConfigurationService, IContent, IStat} from 'vs/platform/configuration/common/configurationService';\nimport {IContextMenuService, IContextViewService} from 'vs/platform/contextview/browser/contextView';\nimport {IEditorService} from 'vs/platform/editor/common/editor';\nimport {IEventService} from 'vs/platform/event/common/event';\nimport {EventService} from 'vs/platform/event/common/eventService';\nimport {IExtensionService} from 'vs/platform/extensions/common/extensions';\nimport {IFileService} from 'vs/platform/files/common/files';\nimport {IInstantiationService} from 'vs/platform/instantiation/common/instantiation';\nimport {createInstantiationService} from 'vs/platform/instantiation/common/instantiationService';\nimport {IKeybindingService} from 'vs/platform/keybinding/common/keybindingService';\nimport {ILifecycleService} from 'vs/platform/lifecycle/common/lifecycle';\nimport {IMarkerService} from 'vs/platform/markers/common/markers';\nimport {IMessageService} from 'vs/platform/message/common/message';\nimport {IProgressService} from 'vs/platform/progress/common/progress';\nimport {IRequestService} from 'vs/platform/request/common/request';\nimport {ISearchService} from 'vs/platform/search/common/search';\nimport {IStorageService} from 'vs/platform/storage/common/storage';\nimport {ITelemetryService} from 'vs/platform/telemetry/common/telemetry';\nimport {NULL_THREAD_SERVICE} from 'vs/platform/test/common/nullThreadService';\nimport {IThreadService} from 'vs/platform/thread/common/thread';\nimport {BaseWorkspaceContextService} from 'vs/platform/workspace/common/baseWorkspaceContextService';\nimport {IWorkspaceContextService} from 'vs/platform/workspace/common/workspace';\nimport {IModeService} from 'vs/editor/common/services/modeService';\nimport {ModeServiceImpl} from 'vs/editor/common/services/modeServiceImpl';\nimport {IModelService} from 'vs/editor/common/services/modelService';\nimport {ModelServiceImpl} from 'vs/editor/common/services/modelServiceImpl';\nimport {IResourceService} from 'vs/editor/common/services/resourceService';\nimport {MockExtensionService} from 'vs/editor/test/common/mocks/mockExtensionService';\n\nexport interface IMockPlatformServices {\n\tthreadService?:IThreadService;\n\textensionService?:IExtensionService;\n\tinstantiationService?:IInstantiationService;\n\tlifecycleService?: ILifecycleService;\n\tmessageService?:IMessageService;\n\tmarkerService?: IMarkerService;\n\teditorService?:IEditorService;\n\trequestService?:IRequestService;\n\tkeybindingService?:IKeybindingService;\n\tcontextService?:IWorkspaceContextService;\n\tcontextViewService?:IContextViewService;\n\tcontextMenuService?:IContextMenuService;\n\ttelemetryService?:ITelemetryService;\n\teventService?:IEventService;\n\tstorageService?:IStorageService;\n\tsearchService?:ISearchService;\n\tconfigurationService?:IConfigurationService;\n\tprogressService?:IProgressService;\n\tfileService?:IFileService;\n}\n\nfunction createMockPlatformServices(mockPlatformServices:IMockPlatformServices = {}): any {\n\treturn {\n\t\tthreadService: mockPlatformServices.threadService,\n\t\textensionService: mockPlatformServices.extensionService,\n\t\tinstantiationService: mockPlatformServices.instantiationService,\n\t\tlifecycleService: mockPlatformServices.lifecycleService,\n\t\tmessageService: mockPlatformServices.messageService,\n\t\tmarkerService:mockPlatformServices.markerService,\n\t\teditorService: mockPlatformServices.editorService,\n\t\trequestService: mockPlatformServices.requestService,\n\t\tkeybindingService: mockPlatformServices.keybindingService,\n\t\tcontextService: mockPlatformServices.contextService,\n\t\tcontextViewService: mockPlatformServices.contextViewService,\n\t\tcontextMenuService: mockPlatformServices.contextMenuService,\n\t\ttelemetryService: mockPlatformServices.telemetryService,\n\t\teventService: mockPlatformServices.eventService,\n\t\tstorageService: mockPlatformServices.storageService,\n\t\tconfigurationService: mockPlatformServices.configurationService,\n\t\tsearchService: mockPlatformServices.searchService,\n\t\tprogressService: mockPlatformServices.progressService,\n\t\tfileService: mockPlatformServices.fileService\n\t};\n}\n\nexport interface IMockEditorServices extends IMockPlatformServices {\n\tmodelService?: IModelService;\n\tmodeService?: IModeService;\n}\n\nexport interface IMockEditorWorkerServices extends IMockPlatformServices {\n\tresourceService?: IResourceService;\n}\n\nexport function createMockEditorWorkerServices(mockEditorWorkerServices: IMockEditorWorkerServices = {}):any {\n\tvar ret = createMockPlatformServices(mockEditorWorkerServices);\n\tret['resourceService'] = mockEditorWorkerServices.resourceService;\n\treturn ret;\n}\n\nclass MockModeService extends ModeServiceImpl {}\n\nclass MockModelService extends ModelServiceImpl { }\n\nexport function createMockModeService(): IModeService {\n\tvar threadService = NULL_THREAD_SERVICE;\n\tvar extensionService = new MockExtensionService();\n\tvar modeService = new MockModeService(threadService, extensionService);\n\tvar inst = createInstantiationService({\n\t\tthreadService: threadService,\n\t\textensionService: extensionService,\n\t\tmodeService: modeService\n\t});\n\tthreadService.setInstantiationService(inst);\n\treturn modeService;\n}\n\nexport function createMockModelService(): IModelService {\n\tlet contextService = new BaseWorkspaceContextService({\n\t\tresource: URI.create('inmemory', 'model', '/'),\n\t\tid: null,\n\t\tname: null,\n\t\tuid: null,\n\t\tmtime: null\n\t}, {});\n\tlet eventService = new EventService();\n\tlet configurationService = new MockConfigurationService(contextService, eventService);\n\tvar threadService = NULL_THREAD_SERVICE;\n\tvar extensionService = new MockExtensionService();\n\tvar modeService = new MockModeService(threadService, extensionService);\n\tvar modelService = new MockModelService(threadService, null, modeService, configurationService, null);\n\tvar inst = createInstantiationService({\n\t\tthreadService: threadService,\n\t\textensionService: extensionService,\n\t\tmodeService: modeService,\n\t\tcontextService: contextService,\n\t\teventService: eventService,\n\t\tconfigurationService: configurationService\n\t});\n\tthreadService.setInstantiationService(inst);\n\treturn modelService;\n}\n\nexport class MockConfigurationService extends ConfigurationService {\n\n\tprotected resolveContents(resources: URI[]): TPromise<IContent[]> {\n\t\treturn TPromise.as(resources.map((resource) => {\n\t\t\treturn {\n\t\t\t\tresource: resource,\n\t\t\t\tvalue: ''\n\t\t\t};\n\t\t}));\n\t}\n\n\tprotected resolveContent(resource: URI): TPromise<IContent> {\n\t\treturn TPromise.as({\n\t\t\tresource: resource,\n\t\t\tvalue: ''\n\t\t});\n\t}\n\n\tprotected resolveStat(resource: URI): TPromise<IStat> {\n\t\treturn TPromise.as({\n\t\t\tresource: resource,\n\t\t\tisDirectory: false\n\t\t});\n\t}\n\n}\n"]}