{"version":3,"file":"vs/editor/test/common/mocks/mockCodeEditor.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/editor/test/common/mocks/mockCodeEditor.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {EventEmitter, IEventEmitter} from 'vs/base/common/eventEmitter';\nimport {createInstantiationService} from 'vs/platform/instantiation/common/instantiationService';\nimport {IKeybindingScopeLocation} from 'vs/platform/keybinding/common/keybindingService';\nimport {MockKeybindingService} from 'vs/platform/keybinding/test/common/mockKeybindingService';\nimport {NullTelemetryService} from 'vs/platform/telemetry/common/telemetry';\nimport {CommonCodeEditor} from 'vs/editor/common/commonCodeEditor';\nimport {CommonEditorConfiguration} from 'vs/editor/common/config/commonEditorConfig';\nimport {Cursor} from 'vs/editor/common/controller/cursor';\nimport * as editorCommon from 'vs/editor/common/editorCommon';\nimport {Model} from 'vs/editor/common/model/model';\nimport {MockCodeEditorService} from 'vs/editor/test/common/mocks/mockCodeEditorService';\nimport {MockConfiguration} from 'vs/editor/test/common/mocks/mockConfiguration';\n\nexport class MockCodeEditor extends CommonCodeEditor {\n\tprotected _createConfiguration(options:editorCommon.ICodeEditorWidgetCreationOptions): CommonEditorConfiguration {\n\t\treturn new MockConfiguration(options);\n\t}\n\tpublic getCenteredRangeInViewport(): editorCommon.IEditorRange { return null; }\n\tpublic setScrollTop(newScrollTop:number): void { }\n\tpublic getScrollTop(): number { return 0; }\n\tpublic setScrollLeft(newScrollLeft:number): void { }\n\tpublic getScrollLeft(): number { return 0; }\n\tpublic getScrollWidth(): number { return 0; }\n\tpublic getScrollHeight(): number { return 0; }\n\tpublic saveViewState(): editorCommon.ICodeEditorViewState { return null; }\n\tpublic restoreViewState(state:editorCommon.IEditorViewState): void { }\n\tpublic layout(dimension?:editorCommon.IDimension): void { }\n\tpublic focus(): void { }\n\tpublic isFocused(): boolean { return true; }\n\tprotected _enableEmptySelectionClipboard(): boolean { return false; }\n\tprotected _createView(): void { }\n\tprotected _getViewInternalEventBus(): IEventEmitter { return new EventEmitter(); }\n\n\t// --- test utils\n\tgetCursor(): Cursor {\n\t\treturn this.cursor;\n\t}\n\n\tpublic registerAndInstantiateContribution<T extends editorCommon.IEditorContribution>(ctor:any): T {\n\t\tlet r = <T>this._instantiationService.createInstance(ctor, this);\n\t\tthis.contributions[r.getId()] = r;\n\t\treturn r;\n\t}\n}\n\nexport class MockScopeLocation implements IKeybindingScopeLocation {\n\tsetAttribute(attr:string, value:string): void { }\n\tremoveAttribute(attr:string): void { }\n}\n\nexport function withMockCodeEditor(text:string[], options:editorCommon.ICodeEditorWidgetCreationOptions, callback:(editor:MockCodeEditor, cursor:Cursor)=>void): void {\n\n\tlet codeEditorService = new MockCodeEditorService();\n\tlet keybindingService = new MockKeybindingService();\n\tlet telemetryService = NullTelemetryService;\n\n\tlet instantiationService = createInstantiationService({\n\t\tcodeEditorService: codeEditorService,\n\t\tkeybindingService: keybindingService,\n\t\ttelemetryService: telemetryService\n\t});\n\n\tlet model = new Model(text.join('\\n'), Model.DEFAULT_CREATION_OPTIONS, null);\n\tlet editor = new MockCodeEditor(new MockScopeLocation(), options, instantiationService, codeEditorService, keybindingService, telemetryService);\n\teditor.setModel(model);\n\n\tcallback(editor, editor.getCursor());\n\n\teditor.dispose();\n\tmodel.dispose();\n\tkeybindingService.dispose();\n}\n"]}