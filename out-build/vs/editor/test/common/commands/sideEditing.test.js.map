{"version":3,"file":"vs/editor/test/common/commands/sideEditing.test.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/editor/test/common/commands/sideEditing.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport * as assert from 'assert';\nimport {Cursor} from 'vs/editor/common/controller/cursor';\nimport {EditOperation} from 'vs/editor/common/core/editOperation';\nimport {Position} from 'vs/editor/common/core/position';\nimport {Range} from 'vs/editor/common/core/range';\nimport {Selection} from 'vs/editor/common/core/selection';\nimport {IIdentifiedSingleEditOperation} from 'vs/editor/common/editorCommon';\nimport {Model} from 'vs/editor/common/model/model';\nimport {ILineEdit, ModelLine} from 'vs/editor/common/model/modelLine';\nimport {MockConfiguration} from 'vs/editor/test/common/mocks/mockConfiguration';\n\nfunction testCommand(lines:string[], selection:Selection, edits:IIdentifiedSingleEditOperation[], expectedLines:string[], expectedSelection:Selection): void {\n\tlet model = new Model(lines.join('\\n'), Model.DEFAULT_CREATION_OPTIONS, null);\n\tlet config = new MockConfiguration(null);\n\tlet cursor = new Cursor(0, config, model, null, false);\n\n\tcursor.setSelections('tests', [selection]);\n\n\tmodel.applyEdits(edits);\n\n\tlet actualValue = model.toRawText().lines;\n\tassert.deepEqual(actualValue, expectedLines);\n\n\tlet actualSelection = cursor.getSelection();\n\tassert.deepEqual(actualSelection.toString(), expectedSelection.toString());\n\n\tcursor.dispose();\n\tconfig.dispose();\n\tmodel.dispose();\n}\n\nfunction testLineEditMarker(text:string, column:number, stickToPreviousCharacter:boolean, edit:ILineEdit, expectedColumn: number): void {\n\tvar line = new ModelLine(1, text);\n\tline.addMarker({\n\t\tid: '1',\n\t\tline: null,\n\t\tcolumn: column,\n\t\tstickToPreviousCharacter: stickToPreviousCharacter,\n\t\toldLineNumber: 0,\n\t\toldColumn: 0,\n\t});\n\n\tline.applyEdits({}, [edit]);\n\n\tassert.equal(line.getMarkers()[0].column, expectedColumn);\n}\n\nsuite('Editor Side Editing - collapsed selection', () => {\n\n\ttest('replace at selection', () => {\n\t\ttestCommand(\n\t\t\t[\n\t\t\t\t'first',\n\t\t\t\t'second line',\n\t\t\t\t'third line',\n\t\t\t\t'fourth'\n\t\t\t],\n\t\t\tnew Selection(1,1,1,1),\n\t\t\t[\n\t\t\t\tEditOperation.replace(new Selection(1,1,1,1), 'something ')\n\t\t\t],\n\t\t\t[\n\t\t\t\t'something first',\n\t\t\t\t'second line',\n\t\t\t\t'third line',\n\t\t\t\t'fourth'\n\t\t\t],\n\t\t\tnew Selection(1,1,1,11)\n\t\t);\n\t});\n\n\ttest('replace at selection 2', () => {\n\t\ttestCommand(\n\t\t\t[\n\t\t\t\t'first',\n\t\t\t\t'second line',\n\t\t\t\t'third line',\n\t\t\t\t'fourth'\n\t\t\t],\n\t\t\tnew Selection(1,1,1,6),\n\t\t\t[\n\t\t\t\tEditOperation.replace(new Selection(1,1,1,6), 'something')\n\t\t\t],\n\t\t\t[\n\t\t\t\t'something',\n\t\t\t\t'second line',\n\t\t\t\t'third line',\n\t\t\t\t'fourth'\n\t\t\t],\n\t\t\tnew Selection(1,1,1,10)\n\t\t);\n\t});\n\n\ttest('ModelLine.applyEdits uses `isReplace`', () => {\n\t\ttestLineEditMarker('something', 1, true, { startColumn: 1, endColumn: 1, text: 'asd', forceMoveMarkers: false }, 1);\n\t\ttestLineEditMarker('something', 1, true, { startColumn: 1, endColumn: 1, text: 'asd', forceMoveMarkers: true }, 4);\n\n\t\ttestLineEditMarker('something', 1, false, { startColumn: 1, endColumn: 1, text: 'asd', forceMoveMarkers: false }, 4);\n\t\ttestLineEditMarker('something', 1, false, { startColumn: 1, endColumn: 1, text: 'asd', forceMoveMarkers: true }, 4);\n\t});\n\n\ttest('insert at selection', () => {\n\t\ttestCommand(\n\t\t\t[\n\t\t\t\t'first',\n\t\t\t\t'second line',\n\t\t\t\t'third line',\n\t\t\t\t'fourth'\n\t\t\t],\n\t\t\tnew Selection(1,1,1,1),\n\t\t\t[\n\t\t\t\tEditOperation.insert(new Position(1,1), 'something ')\n\t\t\t],\n\t\t\t[\n\t\t\t\t'something first',\n\t\t\t\t'second line',\n\t\t\t\t'third line',\n\t\t\t\t'fourth'\n\t\t\t],\n\t\t\tnew Selection(1,11,1,11)\n\t\t);\n\t});\n\n\ttest('insert at selection sitting on max column', () => {\n\t\ttestCommand(\n\t\t\t[\n\t\t\t\t'first',\n\t\t\t\t'second line',\n\t\t\t\t'third line',\n\t\t\t\t'fourth'\n\t\t\t],\n\t\t\tnew Selection(1,6,1,6),\n\t\t\t[\n\t\t\t\tEditOperation.insert(new Position(1,6), ' something\\nnew ')\n\t\t\t],\n\t\t\t[\n\t\t\t\t'first something',\n\t\t\t\t'new ',\n\t\t\t\t'second line',\n\t\t\t\t'third line',\n\t\t\t\t'fourth'\n\t\t\t],\n\t\t\tnew Selection(2,5,2,5)\n\t\t);\n\t});\n\n\ttest('issue #3994: replace on top of selection', () => {\n\t\ttestCommand(\n\t\t\t[\n\t\t\t\t'$obj = New-Object \"system.col\"'\n\t\t\t],\n\t\t\tnew Selection(1,30,1,30),\n\t\t\t[\n\t\t\t\tEditOperation.replaceMove(new Range(1,19,1,31), '\"System.Collections\"')\n\t\t\t],\n\t\t\t[\n\t\t\t\t'$obj = New-Object \"System.Collections\"'\n\t\t\t],\n\t\t\tnew Selection(1,39,1,39)\n\t\t);\n\t});\n\n});"]}