{"version":3,"file":"vs/editor/test/common/commands/commandTestUtils.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/editor/test/common/commands/commandTestUtils.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport * as assert from 'assert';\nimport {Cursor} from 'vs/editor/common/controller/cursor';\nimport {Range} from 'vs/editor/common/core/range';\nimport {Selection} from 'vs/editor/common/core/selection';\nimport * as editorCommon from 'vs/editor/common/editorCommon';\nimport {Model} from 'vs/editor/common/model/model';\nimport {IMode} from 'vs/editor/common/modes';\nimport {MockConfiguration} from 'vs/editor/test/common/mocks/mockConfiguration';\n\nexport function testCommand(\n\tlines: string[],\n\tmode: IMode,\n\tselection: Selection,\n\tcommandFactory: (selection:Selection) => editorCommon.ICommand,\n\texpectedLines: string[],\n\texpectedSelection: Selection\n): void {\n\n\tlet model = new Model(lines.join('\\n'), Model.DEFAULT_CREATION_OPTIONS, mode);\n\tlet config = new MockConfiguration(null);\n\tlet cursor = new Cursor(0, config, model, null, false);\n\n\tcursor.setSelections('tests', [selection]);\n\n\tcursor.configuration.handlerDispatcher.trigger('tests', editorCommon.Handler.ExecuteCommand, commandFactory(cursor.getSelection()));\n\n\tlet actualValue = model.toRawText().lines;\n\tassert.deepEqual(actualValue, expectedLines);\n\n\tlet actualSelection = cursor.getSelection();\n\tassert.deepEqual(actualSelection.toString(), expectedSelection.toString());\n\n\tcursor.dispose();\n\tconfig.dispose();\n\tmodel.dispose();\n}\n\n/**\n * Extract edit operations if command `command` were to execute on model `model`\n */\nexport function getEditOperation(model: editorCommon.IModel, command: editorCommon.ICommand): editorCommon.IIdentifiedSingleEditOperation[] {\n\tvar operations: editorCommon.IIdentifiedSingleEditOperation[] = [];\n\tvar editOperationBuilder: editorCommon.IEditOperationBuilder = {\n\t\taddEditOperation: (range: editorCommon.IEditorRange, text: string) => {\n\t\t\toperations.push({\n\t\t\t\tidentifier: null,\n\t\t\t\trange: range,\n\t\t\t\ttext: text,\n\t\t\t\tforceMoveMarkers: false\n\t\t\t});\n\t\t},\n\n\t\ttrackSelection: (selection: editorCommon.IEditorSelection) => {\n\t\t\treturn null;\n\t\t}\n\t};\n\tcommand.getEditOperations(model, editOperationBuilder);\n\treturn operations;\n}\n\n/**\n * Create single edit operation\n */\nexport function createSingleEditOp(text:string, positionLineNumber:number, positionColumn:number, selectionLineNumber:number = positionLineNumber, selectionColumn:number = positionColumn):editorCommon.IIdentifiedSingleEditOperation {\n\treturn {\n\t\tidentifier: null,\n\t\trange: new Range(selectionLineNumber, selectionColumn, positionLineNumber, positionColumn),\n\t\ttext: text,\n\t\tforceMoveMarkers: false\n\t};\n}\n\n/**\n * Create single edit operation\n */\nexport function createInsertDeleteSingleEditOp(text:string, positionLineNumber:number, positionColumn:number, selectionLineNumber:number = positionLineNumber, selectionColumn:number = positionColumn):editorCommon.IIdentifiedSingleEditOperation {\n\treturn {\n\t\tidentifier: null,\n\t\trange: new Range(selectionLineNumber, selectionColumn, positionLineNumber, positionColumn),\n\t\ttext: text,\n\t\tforceMoveMarkers: true\n\t};\n}\n"]}