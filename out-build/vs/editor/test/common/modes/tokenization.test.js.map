{"version":3,"file":"vs/editor/test/common/modes/tokenization.test.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/editor/test/common/modes/tokenization.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport * as assert from 'assert';\nimport {IDisposable, empty as EmptyDisposable} from 'vs/base/common/lifecycle';\nimport {IModeSupportChangedEvent} from 'vs/editor/common/editorCommon';\nimport * as modes from 'vs/editor/common/modes';\nimport {AbstractState} from 'vs/editor/common/modes/abstractState';\nimport {handleEvent} from 'vs/editor/common/modes/supports';\nimport {IEnteringNestedModeData, ILeavingNestedModeData, TokenizationSupport} from 'vs/editor/common/modes/supports/tokenizationSupport';\nimport {createMockLineContext} from 'vs/editor/test/common/modesTestUtils';\nimport {MockMode} from 'vs/editor/test/common/mocks/mockMode';\n\nexport class State extends AbstractState {\n\n\tconstructor(mode:modes.IMode) {\n\t\tsuper(mode);\n\t}\n\n\tpublic makeClone() : AbstractState {\n\t\treturn new State(this.getMode());\n\t}\n\n\tpublic tokenize(stream:modes.IStream):modes.ITokenizationResult {\n\t\treturn { type: stream.next() === '.' ? '' : 'text' };\n\t}\n}\n\nexport class Mode extends MockMode {\n\n\tpublic tokenizationSupport: modes.ITokenizationSupport;\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.tokenizationSupport = new TokenizationSupport(this, {\n\t\t\tgetInitialState: () => new State(this)\n\t\t}, false, false);\n\t}\n}\n\n\n\n\nfunction checkTokens(actual, expected) {\n\tassert.equal(actual.length, expected.length);\n\tfor (var i = 0; i < expected.length; i++) {\n\t\tfor (var key in expected[i]) {\n\t\t\tassert.deepEqual(actual[i][key], expected[i][key]);\n\t\t}\n\t}\n}\n\n\n\nexport interface IModeSwitchingDescriptor {\n\t[character:string]:{\n\t\tendCharacter: string;\n\t\tmode: modes.IMode;\n\t};\n}\n\nexport class StateMemorizingLastWord extends AbstractState {\n\n\tpublic lastWord:string;\n\tprivate descriptor:IModeSwitchingDescriptor;\n\n\tconstructor(mode:modes.IMode, descriptor:IModeSwitchingDescriptor, lastWord:string) {\n\t\tsuper(mode);\n\t\tthis.lastWord = lastWord;\n\t\tthis.descriptor = descriptor;\n\t}\n\n\tpublic makeClone() : AbstractState {\n\t\treturn new StateMemorizingLastWord(this.getMode(), this.descriptor, this.lastWord);\n\t}\n\n\tpublic tokenize(stream:modes.IStream):modes.ITokenizationResult {\n\t\tstream.setTokenRules('[]{}()==--', '\\t \\u00a0');\n\t\tif (stream.skipWhitespace() !== '') {\n\t\t\treturn {\n\t\t\t\ttype: ''\n\t\t\t};\n\t\t}\n\t\tvar word = stream.nextToken();\n\t\treturn {\n\t\t\ttype: this.getMode().getId() + '.' + word,\n\t\t\tnextState: new StateMemorizingLastWord(this.getMode(), this.descriptor, word)\n\t\t};\n\t}\n}\n\nexport class SwitchingMode extends MockMode {\n\n\tprivate _switchingModeDescriptor:IModeSwitchingDescriptor;\n\n\tpublic tokenizationSupport: modes.ITokenizationSupport;\n\n\tconstructor(id:string, descriptor:IModeSwitchingDescriptor) {\n\t\tsuper(id);\n\t\tthis._switchingModeDescriptor = descriptor;\n\t\tthis.tokenizationSupport = new TokenizationSupport(this, this, true, false);\n\t}\n\n\tpublic addSupportChangedListener(callback: (e: IModeSupportChangedEvent) => void): IDisposable {\n\t\treturn EmptyDisposable;\n\t}\n\n\t/**\n\t * Register a support by name. Only optional.\n\t */\n\tpublic registerSupport<T>(support:string, callback:(mode:modes.IMode)=>T): IDisposable {\n\t\treturn EmptyDisposable;\n\t}\n\n\tpublic getInitialState():modes.IState {\n\t\treturn new StateMemorizingLastWord(this, this._switchingModeDescriptor, null);\n\t}\n\n\tpublic enterNestedMode(state:modes.IState):boolean {\n\t\tvar s = <StateMemorizingLastWord>state;\n\t\tif (this._switchingModeDescriptor.hasOwnProperty(s.lastWord)) {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\tpublic getNestedMode(state:modes.IState): IEnteringNestedModeData {\n\t\tvar s = <StateMemorizingLastWord>state;\n\t\treturn {\n\t\t\tmode: this._switchingModeDescriptor[s.lastWord].mode,\n\t\t\tmissingModePromise: null\n\t\t};\n\t}\n\n\tpublic getLeavingNestedModeData(line:string, state:modes.IState): ILeavingNestedModeData {\n\t\tvar s = <StateMemorizingLastWord>state;\n\t\tvar endChar = this._switchingModeDescriptor[s.lastWord].endCharacter;\n\t\tvar endCharPosition = line.indexOf(endChar);\n\t\tif (endCharPosition >= 0) {\n\t\t\treturn {\n\t\t\t\tnestedModeBuffer: line.substring(0, endCharPosition),\n\t\t\t\tbufferAfterNestedMode: line.substring(endCharPosition),\n\t\t\t\tstateAfterNestedMode: new StateMemorizingLastWord(this, this._switchingModeDescriptor, null)\n\t\t\t};\n\t\t}\n\t\treturn null;\n\t}\n}\n\ninterface ITestToken {\n\tstartIndex:number;\n\ttype:string;\n}\nfunction assertTokens(actual:modes.IToken[], expected:ITestToken[], message?:string) {\n\tassert.equal(actual.length, expected.length, 'Lengths mismatch');\n\tfor (var i = 0; i < expected.length; i++) {\n\t\tassert.equal(actual[i].startIndex, expected[i].startIndex, 'startIndex mismatch');\n\t\tassert.equal(actual[i].type, expected[i].type, 'type mismatch');\n\t}\n};\n\ninterface ITestModeTransition {\n\tstartIndex:number;\n\tid:string;\n}\nfunction assertModeTransitions(actual:modes.IModeTransition[], expected:ITestModeTransition[], message?:string) {\n\tvar massagedActual:ITestModeTransition[] = [];\n\tfor (var i = 0; i < actual.length; i++) {\n\t\tmassagedActual.push({\n\t\t\tstartIndex: actual[i].startIndex,\n\t\t\tid: actual[i].mode.getId()\n\t\t});\n\t}\n\tassert.deepEqual(massagedActual, expected, message);\n};\n\nfunction createMode():SwitchingMode {\n\tvar modeB = new SwitchingMode('B', {});\n\tvar modeC = new SwitchingMode('C', {});\n\tvar modeD = new SwitchingMode('D', {\n\t\t'(': {\n\t\t\tendCharacter: ')',\n\t\t\tmode: modeB\n\t\t}\n\t});\n\tvar modeA = new SwitchingMode('A', {\n\t\t'(': {\n\t\t\tendCharacter: ')',\n\t\t\tmode: modeB\n\t\t},\n\t\t'[': {\n\t\t\tendCharacter: ']',\n\t\t\tmode: modeC\n\t\t},\n\t\t'{': {\n\t\t\tendCharacter: '}',\n\t\t\tmode: modeD\n\t\t}\n\t});\n\treturn modeA;\n}\n\nfunction switchingModeTokenize(line:string, mode:modes.IMode = null, state:modes.IState = null) {\n\tif (state && mode) {\n\t\treturn mode.tokenizationSupport.tokenize(line, state);\n\t} else {\n\t\tmode = createMode();\n\t\treturn mode.tokenizationSupport.tokenize(line, mode.tokenizationSupport.getInitialState());\n\t}\n}\n\nsuite('Editor Modes - Tokenization', () => {\n\n\ttest('Syntax engine merges sequential untyped tokens', () => {\n\t\tvar mode = new Mode();\n\t\tvar lineTokens = mode.tokenizationSupport.tokenize('.abc..def...gh', mode.tokenizationSupport.getInitialState());\n\t\tcheckTokens(lineTokens.tokens, [\n\t\t\t{ startIndex: 0, type: '' },\n\t\t\t{ startIndex: 1, type: 'text' },\n\t\t\t{ startIndex: 4, type: '' },\n\t\t\t{ startIndex: 6, type: 'text' },\n\t\t\t{ startIndex: 9, type: '' },\n\t\t\t{ startIndex: 12, type: 'text' }\n\t\t]);\n\t});\n\n\ttest('Warmup', () => {\n\t\tvar lineTokens = switchingModeTokenize('abc def ghi');\n\t\tassertTokens(lineTokens.tokens, [\n\t\t\t{ startIndex:0, type: 'A.abc' },\n\t\t\t{ startIndex:3, type: '' },\n\t\t\t{ startIndex:4, type: 'A.def' },\n\t\t\t{ startIndex:7, type: '' },\n\t\t\t{ startIndex:8, type: 'A.ghi' }\n\t\t]);\n\t\tassert.equal((<StateMemorizingLastWord>lineTokens.endState).lastWord, 'ghi');\n\t\tassertModeTransitions(lineTokens.modeTransitions, [\n\t\t\t{ startIndex:0, id: 'A' }\n\t\t]);\n\t});\n\n\ttest('One embedded', () => {\n\t\tvar lineTokens = switchingModeTokenize('abc (def) ghi');\n\t\tassertTokens(lineTokens.tokens, [\n\t\t\t{ startIndex:0, type: 'A.abc' },\n\t\t\t{ startIndex:3, type: '' },\n\t\t\t{ startIndex:4, type: 'A.(' },\n\t\t\t{ startIndex:5, type: 'B.def' },\n\t\t\t{ startIndex:8, type: 'A.)' },\n\t\t\t{ startIndex:9, type: '' },\n\t\t\t{ startIndex:10, type: 'A.ghi' }\n\t\t]);\n\t\tassert.equal((<StateMemorizingLastWord>lineTokens.endState).lastWord, 'ghi');\n\t\tassertModeTransitions(lineTokens.modeTransitions, [\n\t\t\t{ startIndex: 0, id: 'A' },\n\t\t\t{ startIndex: 5, id: 'B' },\n\t\t\t{ startIndex: 8, id: 'A' }\n\t\t]);\n\t});\n\n\ttest('Empty one embedded', () => {\n\t\tvar lineTokens = switchingModeTokenize('abc () ghi');\n\t\tassertTokens(lineTokens.tokens, [\n\t\t\t{ startIndex:0, type: 'A.abc' },\n\t\t\t{ startIndex:3, type: '' },\n\t\t\t{ startIndex:4, type: 'A.(' },\n\t\t\t{ startIndex:5, type: 'A.)' },\n\t\t\t{ startIndex:6, type: '' },\n\t\t\t{ startIndex:7, type: 'A.ghi' }\n\t\t]);\n\t\tassert.equal((<StateMemorizingLastWord>lineTokens.endState).lastWord, 'ghi');\n\t\tassertModeTransitions(lineTokens.modeTransitions, [\n\t\t\t{ startIndex: 0, id: 'A' }\n\t\t]);\n\t});\n\n\ttest('Finish in embedded', () => {\n\t\tvar lineTokens = switchingModeTokenize('abc (');\n\t\tassertTokens(lineTokens.tokens, [\n\t\t\t{ startIndex:0, type: 'A.abc' },\n\t\t\t{ startIndex:3, type: '' },\n\t\t\t{ startIndex:4, type: 'A.(' }\n\t\t]);\n\t\tassert.equal((<StateMemorizingLastWord>lineTokens.endState).getMode().getId(), 'B');\n\t\tassertModeTransitions(lineTokens.modeTransitions, [\n\t\t\t{ startIndex: 0, id: 'A' }\n\t\t]);\n\t});\n\n\ttest('One embedded over multiple lines 1', () => {\n\t\tvar mode = createMode();\n\t\tvar lineTokens = switchingModeTokenize('abc (def', mode, mode.getInitialState());\n\t\tassertTokens(lineTokens.tokens, [\n\t\t\t{ startIndex:0, type: 'A.abc' },\n\t\t\t{ startIndex:3, type: '' },\n\t\t\t{ startIndex:4, type: 'A.(' },\n\t\t\t{ startIndex:5, type: 'B.def' }\n\t\t]);\n\t\tassertModeTransitions(lineTokens.modeTransitions, [\n\t\t\t{ startIndex: 0, id: 'A' },\n\t\t\t{ startIndex: 5, id: 'B' }\n\t\t]);\n\n\t\tlineTokens = switchingModeTokenize('ghi jkl', mode, lineTokens.endState);\n\t\tassertTokens(lineTokens.tokens, [\n\t\t\t{ startIndex:0, type: 'B.ghi' },\n\t\t\t{ startIndex:3, type: '' },\n\t\t\t{ startIndex:4, type: 'B.jkl' }\n\t\t]);\n\t\tassertModeTransitions(lineTokens.modeTransitions, [\n\t\t\t{ startIndex: 0, id: 'B' }\n\t\t]);\n\n\t\tlineTokens = switchingModeTokenize('mno)pqr', mode, lineTokens.endState);\n\t\tassertTokens(lineTokens.tokens, [\n\t\t\t{ startIndex:0, type: 'B.mno' },\n\t\t\t{ startIndex:3, type: 'A.)' },\n\t\t\t{ startIndex:4, type: 'A.pqr' }\n\t\t]);\n\t\tassertModeTransitions(lineTokens.modeTransitions, [\n\t\t\t{ startIndex: 0, id: 'B' },\n\t\t\t{ startIndex: 3, id: 'A' }\n\t\t]);\n\t});\n\n\ttest('One embedded over multiple lines 2 with handleEvent', () => {\n\t\tvar mode = createMode();\n\t\tvar lineTokens = switchingModeTokenize('abc (def', mode, mode.getInitialState());\n\t\tassertTokens(lineTokens.tokens, [\n\t\t\t{ startIndex:0, type: 'A.abc' },\n\t\t\t{ startIndex:3, type: '' },\n\t\t\t{ startIndex:4, type: 'A.(' },\n\t\t\t{ startIndex:5, type: 'B.def' }\n\t\t]);\n\t\tassertModeTransitions(lineTokens.modeTransitions, [\n\t\t\t{ startIndex: 0, id: 'A' },\n\t\t\t{ startIndex: 5, id: 'B' }\n\t\t]);\n\n\t\thandleEvent(createMockLineContext('abc (def', lineTokens), 0, (mode:modes.IMode, context:modes.ILineContext, offset:number) => {\n\t\t\tassert.deepEqual(mode.getId(), 'A');\n\t\t\tassert.equal(context.getTokenCount(), 3);\n\t\t\tassert.equal(context.getTokenStartIndex(0), 0);\n\t\t\tassert.equal(context.getTokenType(0), 'A.abc');\n\t\t\tassert.equal(context.getTokenStartIndex(1), 3);\n\t\t\tassert.equal(context.getTokenType(1), '');\n\t\t\tassert.equal(context.getTokenStartIndex(2), 4);\n\t\t\tassert.equal(context.getTokenType(2), 'A.(');\n\t\t\tassert.deepEqual(offset, 0);\n\t\t\tassert.equal(context.getLineContent(), 'abc (');\n\t\t});\n\n\t\thandleEvent(createMockLineContext('abc (def', lineTokens), 6, (mode:modes.IMode, context:modes.ILineContext, offset:number) => {\n\t\t\tassert.deepEqual(mode.getId(), 'B');\n\t\t\tassert.equal(context.getTokenCount(), 1);\n\t\t\tassert.equal(context.getTokenStartIndex(0), 0);\n\t\t\tassert.equal(context.getTokenType(0), 'B.def');\n\t\t\tassert.deepEqual(offset, 1);\n\t\t\tassert.equal(context.getLineContent(), 'def');\n\t\t});\n\n\t\tlineTokens = switchingModeTokenize('ghi jkl', mode, lineTokens.endState);\n\t\tassertTokens(lineTokens.tokens, [\n\t\t\t{ startIndex:0, type: 'B.ghi' },\n\t\t\t{ startIndex:3, type: '' },\n\t\t\t{ startIndex:4, type: 'B.jkl' }\n\t\t]);\n\t\tassertModeTransitions(lineTokens.modeTransitions, [\n\t\t\t{ startIndex: 0, id: 'B' }\n\t\t]);\n\n\t\tlineTokens = switchingModeTokenize(')pqr', mode, lineTokens.endState);\n\t\tassertTokens(lineTokens.tokens, [\n\t\t\t{ startIndex:0, type: 'A.)' },\n\t\t\t{ startIndex:1, type: 'A.pqr' }\n\t\t]);\n\t\tassertModeTransitions(lineTokens.modeTransitions, [\n\t\t\t{ startIndex: 0, id: 'A' }\n\t\t]);\n\t});\n\n\ttest('Two embedded in breadth', () => {\n\t\tvar lineTokens = switchingModeTokenize('abc (def) [ghi] jkl');\n\t\tassertTokens(lineTokens.tokens, [\n\t\t\t{ startIndex:0, type: 'A.abc' },\n\t\t\t{ startIndex:3, type: '' },\n\t\t\t{ startIndex:4, type: 'A.(' },\n\t\t\t{ startIndex:5, type: 'B.def' },\n\t\t\t{ startIndex:8, type: 'A.)' },\n\t\t\t{ startIndex:9, type: '' },\n\t\t\t{ startIndex:10, type: 'A.[' },\n\t\t\t{ startIndex:11, type: 'C.ghi' },\n\t\t\t{ startIndex:14, type: 'A.]' },\n\t\t\t{ startIndex:15, type: '' },\n\t\t\t{ startIndex:16, type: 'A.jkl' }\n\t\t]);\n\t\tassert.equal((<StateMemorizingLastWord>lineTokens.endState).lastWord, 'jkl');\n\t\tassertModeTransitions(lineTokens.modeTransitions, [\n\t\t\t{ startIndex: 0, id: 'A' },\n\t\t\t{ startIndex: 5, id: 'B' },\n\t\t\t{ startIndex: 8, id: 'A' },\n\t\t\t{ startIndex: 11, id: 'C' },\n\t\t\t{ startIndex: 14, id: 'A' }\n\t\t]);\n\t});\n\n\ttest('Two embedded in breadth tightly', () => {\n\t\tvar lineTokens = switchingModeTokenize('abc(def)[ghi]jkl');\n\t\tassertTokens(lineTokens.tokens, [\n\t\t\t{ startIndex:0, type: 'A.abc' },\n\t\t\t{ startIndex:3, type: 'A.(' },\n\t\t\t{ startIndex:4, type: 'B.def' },\n\t\t\t{ startIndex:7, type: 'A.)' },\n\t\t\t{ startIndex:8, type: 'A.[' },\n\t\t\t{ startIndex:9, type: 'C.ghi' },\n\t\t\t{ startIndex:12, type: 'A.]' },\n\t\t\t{ startIndex:13, type: 'A.jkl' }\n\t\t]);\n\t\tassert.equal((<StateMemorizingLastWord>lineTokens.endState).lastWord, 'jkl');\n\t\tassertModeTransitions(lineTokens.modeTransitions, [\n\t\t\t{ startIndex: 0, id: 'A' },\n\t\t\t{ startIndex: 4, id: 'B' },\n\t\t\t{ startIndex: 7, id: 'A' },\n\t\t\t{ startIndex: 9, id: 'C' },\n\t\t\t{ startIndex: 12, id: 'A' }\n\t\t]);\n\t});\n\n\ttest('Two embedded in depth tightly', () => {\n\t\tvar lineTokens = switchingModeTokenize('abc{de(efg)hi}jkl');\n\t\tassertTokens(lineTokens.tokens, [\n\t\t\t{ startIndex:0, type: 'A.abc' },\n\t\t\t{ startIndex:3, type: 'A.{' },\n\t\t\t{ startIndex:4, type: 'D.de' },\n\t\t\t{ startIndex:6, type: 'D.(' },\n\t\t\t{ startIndex:7, type: 'B.efg' },\n\t\t\t{ startIndex:10, type: 'D.)' },\n\t\t\t{ startIndex:11, type: 'D.hi' },\n\t\t\t{ startIndex:13, type: 'A.}' },\n\t\t\t{ startIndex:14, type: 'A.jkl' }\n\t\t]);\n\t\tassert.equal((<StateMemorizingLastWord>lineTokens.endState).lastWord, 'jkl');\n\t\tassertModeTransitions(lineTokens.modeTransitions, [\n\t\t\t{ startIndex: 0, id: 'A' },\n\t\t\t{ startIndex: 4, id: 'D' },\n\t\t\t{ startIndex: 7, id: 'B' },\n\t\t\t{ startIndex: 10, id: 'D' },\n\t\t\t{ startIndex: 13, id: 'A' }\n\t\t]);\n\t});\n});\n\n"]}