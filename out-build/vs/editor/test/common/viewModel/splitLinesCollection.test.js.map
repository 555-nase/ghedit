{"version":3,"file":"vs/editor/test/common/viewModel/splitLinesCollection.test.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/editor/test/common/viewModel/splitLinesCollection.test.ts"],"names":[],"mappings":";IAAA;;;oGAGgG;IAChG,YAAY,CAAC;IAWb,KAAK,CAAC,yCAAyC,EAAE;QAChD,IAAI,CAAC,WAAW,EAAE;YACjB,IAAI,MAAM,GAAG,WAAW,CAAC,4CAA4C,CAAC,CAAC;YACvE,IAAI,KAAK,GAAG,eAAe,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;YAE9C,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,kBAAkB,EAAE,EAAE,CAAC,CAAC,CAAC;YAC5C,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,oBAAoB,CAAC,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,eAAe,CAAC,CAAC;YACxE,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,oBAAoB,CAAC,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,gBAAgB,CAAC,CAAC;YACzE,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,oBAAoB,CAAC,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,iBAAiB,CAAC,CAAC;YAC1E,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,sBAAsB,CAAC,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;YAC7D,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,sBAAsB,CAAC,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;YAC7D,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,sBAAsB,CAAC,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;YAC7D,GAAG,CAAC,CAAC,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,IAAI,EAAE,EAAE,GAAG,EAAE,EAAE,CAAC;gBACpC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,8BAA8B,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,GAAG,EAAE,oCAAoC,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;YACnH,CAAC;YACD,GAAG,CAAC,CAAC,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,IAAI,EAAE,EAAE,GAAG,EAAE,EAAE,CAAC;gBACpC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,8BAA8B,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,GAAG,EAAE,oCAAoC,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;YACxH,CAAC;YACD,GAAG,CAAC,CAAC,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,IAAI,EAAE,EAAE,GAAG,EAAE,EAAE,CAAC;gBACpC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,8BAA8B,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,EAAE,GAAG,GAAG,EAAE,oCAAoC,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;YAC7H,CAAC;YACD,GAAG,CAAC,CAAC,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,IAAI,EAAE,EAAE,GAAG,EAAE,EAAE,CAAC;gBACpC,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,gCAAgC,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,mCAAmC,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;YAChI,CAAC;YACD,GAAG,CAAC,CAAC,IAAI,GAAG,GAAG,CAAC,GAAG,EAAE,EAAE,GAAG,IAAI,EAAE,GAAG,EAAE,EAAE,GAAG,EAAE,EAAE,CAAC;gBAC9C,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,gCAAgC,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,GAAG,EAAE,CAAC,EAAE,mCAAmC,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;YACrI,CAAC;YACD,GAAG,CAAC,CAAC,IAAI,GAAG,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,GAAG,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,GAAG,EAAE,EAAE,CAAC;gBACxD,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,gCAAgC,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,mCAAmC,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;YAC1I,CAAC;YAED,MAAM,GAAG,WAAW,CAAC,4CAA4C,CAAC,CAAC;YACnE,KAAK,GAAG,eAAe,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC;YAE5C,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,kBAAkB,EAAE,EAAE,CAAC,CAAC,CAAC;YAC5C,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,oBAAoB,CAAC,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,eAAe,CAAC,CAAC;YACxE,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,oBAAoB,CAAC,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,kBAAkB,CAAC,CAAC;YAC3E,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,oBAAoB,CAAC,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,mBAAmB,CAAC,CAAC;YAC5E,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,sBAAsB,CAAC,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;YAC7D,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,sBAAsB,CAAC,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;YAC7D,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,sBAAsB,CAAC,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;YAC7D,GAAG,CAAC,CAAC,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,IAAI,EAAE,EAAE,GAAG,EAAE,EAAE,CAAC;gBACpC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,8BAA8B,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,GAAG,EAAE,oCAAoC,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;YACnH,CAAC;YACD,GAAG,CAAC,CAAC,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,IAAI,CAAC,EAAE,GAAG,EAAE,EAAE,CAAC;gBACnC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,8BAA8B,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,GAAG,GAAG,EAAE,oCAAoC,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;YACtH,CAAC;YACD,GAAG,CAAC,CAAC,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,IAAI,EAAE,EAAE,GAAG,EAAE,EAAE,CAAC;gBACpC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,8BAA8B,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,GAAG,GAAG,CAAC,EAAE,oCAAoC,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;YAC5H,CAAC;YACD,GAAG,CAAC,CAAC,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,IAAI,CAAC,EAAE,GAAG,EAAE,EAAE,CAAC;gBACnC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,8BAA8B,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,EAAE,GAAG,GAAG,EAAE,oCAAoC,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;YAC7H,CAAC;YACD,GAAG,CAAC,CAAC,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,IAAI,EAAE,EAAE,GAAG,EAAE,EAAE,CAAC;gBACpC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,8BAA8B,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,CAAC,EAAE,oCAAoC,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;YACjI,CAAC;YACD,GAAG,CAAC,CAAC,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,IAAI,EAAE,EAAE,GAAG,EAAE,EAAE,CAAC;gBACpC,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,gCAAgC,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,mCAAmC,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;YAChI,CAAC;YACD,GAAG,CAAC,CAAC,IAAI,GAAG,GAAG,CAAC,GAAG,EAAE,EAAE,GAAG,IAAI,EAAE,GAAG,EAAE,EAAE,GAAG,EAAE,EAAE,CAAC;gBAC9C,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,gCAAgC,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,GAAG,GAAG,EAAE,CAAC,EAAE,mCAAmC,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;YACzI,CAAC;YACD,GAAG,CAAC,CAAC,IAAI,GAAG,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,GAAG,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,GAAG,EAAE,EAAE,CAAC;gBACxD,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,gCAAgC,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,mCAAmC,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;YAC9I,CAAC;QACF,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,aAAa,EAAE;YACnB,IAAI,MAAM,GAAG,IAAI,qCAAiB,CAAC,EAAE,CAAC,CAAC;YAEvC,IAAI,6BAA6B,GAAG,IAAI,wEAAsC,CAC7E,MAAM,CAAC,MAAM,CAAC,6BAA6B,EAC3C,MAAM,CAAC,MAAM,CAAC,4BAA4B,EAC1C,MAAM,CAAC,MAAM,CAAC,gCAAgC,CAC9C,CAAC;YAEF,IAAI,KAAK,GAAG,IAAI,aAAK,CAAC;gBACrB,cAAc;gBACd,2BAA2B;gBAC3B,GAAG;gBACH,cAAc;gBACd,2BAA2B;gBAC3B,GAAG;aACH,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,aAAK,CAAC,wBAAwB,EAAE,IAAI,CAAC,CAAC;YAEpD,IAAI,eAAe,GAAG,IAAI,2CAAoB,CAC7C,KAAK,EACL,6BAA6B,EAC7B,KAAK,CAAC,UAAU,EAAE,CAAC,OAAO,EAC1B,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,cAAc,EACzC,MAAM,CAAC,MAAM,CAAC,8BAA8B,GAAG,MAAM,CAAC,MAAM,CAAC,8BAA8B,EAC3F,YAAY,CAAC,wBAAwB,CAAC,MAAM,CAAC,MAAM,CAAC,cAAc,CAAC,CACnE,CAAC;YAEF,eAAe,CAAC,cAAc,CAAC,CAAC;oBAC/B,eAAe,EAAE,CAAC;oBAClB,WAAW,EAAE,CAAC;oBACd,aAAa,EAAE,CAAC;oBAChB,SAAS,EAAE,CAAC;iBACZ,EAAE;oBACF,eAAe,EAAE,CAAC;oBAClB,WAAW,EAAE,CAAC;oBACd,aAAa,EAAE,CAAC;oBAChB,SAAS,EAAE,CAAC;iBACZ,CAAC,EAAE,UAAC,SAAS,EAAE,OAAO,IAAe,CAAC,CAAC,CAAC;YAEzC,IAAI,aAAa,GAAG,eAAe,CAAC,kBAAkB,EAAE,CAAC;YACzD,MAAM,CAAC,KAAK,CAAC,aAAa,EAAE,CAAC,EAAE,sBAAsB,CAAC,CAAC;YAEvD,IAAI,cAAc,GAAG,KAAK,CAAC,YAAY,EAAE,CAAC;YAC1C,GAAG,CAAC,CAAC,IAAI,UAAU,GAAG,CAAC,EAAE,UAAU,IAAI,cAAc,GAAG,CAAC,EAAE,UAAU,EAAE,EAAE,CAAC;gBACzE,IAAI,aAAa,GAAG,CAAC,UAAU,IAAI,CAAC,IAAI,UAAU,IAAI,cAAc,CAAC,GAAG,KAAK,CAAC,gBAAgB,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;gBAC/G,IAAI,aAAa,GAAG,CAAC,UAAU,IAAI,CAAC,IAAI,UAAU,IAAI,cAAc,CAAC,GAAG,KAAK,CAAC,gBAAgB,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;gBAC/G,GAAG,CAAC,CAAC,IAAI,MAAM,GAAG,aAAa,GAAG,CAAC,EAAE,MAAM,IAAI,aAAa,GAAG,CAAC,EAAE,MAAM,EAAE,EAAE,CAAC;oBAC5E,IAAI,YAAY,GAAG,eAAe,CAAC,oCAAoC,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;oBAE5F,yBAAyB;oBACzB,IAAI,cAAc,GAAG,YAAY,CAAC,UAAU,CAAC;oBAC7C,IAAI,UAAU,GAAG,YAAY,CAAC,MAAM,CAAC;oBACrC,EAAE,CAAC,CAAC,cAAc,GAAG,CAAC,CAAC,CAAC,CAAC;wBACxB,cAAc,GAAG,CAAC,CAAC;oBACpB,CAAC;oBACD,IAAI,SAAS,GAAG,eAAe,CAAC,kBAAkB,EAAE,CAAC;oBACrD,EAAE,CAAC,CAAC,cAAc,GAAG,SAAS,CAAC,CAAC,CAAC;wBAChC,cAAc,GAAG,SAAS,CAAC;oBAC5B,CAAC;oBACD,IAAI,aAAa,GAAG,eAAe,CAAC,sBAAsB,CAAC,cAAc,CAAC,CAAC;oBAC3E,IAAI,aAAa,GAAG,eAAe,CAAC,sBAAsB,CAAC,cAAc,CAAC,CAAC;oBAC3E,EAAE,CAAC,CAAC,UAAU,GAAG,aAAa,CAAC,CAAC,CAAC;wBAChC,UAAU,GAAG,aAAa,CAAC;oBAC5B,CAAC;oBACD,EAAE,CAAC,CAAC,UAAU,GAAG,aAAa,CAAC,CAAC,CAAC;wBAChC,UAAU,GAAG,aAAa,CAAC;oBAC5B,CAAC;oBACD,IAAI,iBAAiB,GAAG,IAAI,mBAAQ,CAAC,cAAc,EAAE,UAAU,CAAC,CAAC;oBACjE,MAAM,CAAC,KAAK,CAAC,YAAY,CAAC,QAAQ,EAAE,EAAE,iBAAiB,CAAC,QAAQ,EAAE,EAAE,kBAAkB,GAAG,UAAU,GAAG,IAAI,GAAG,MAAM,CAAC,CAAC;gBACtH,CAAC;YACF,CAAC;YAED,GAAG,CAAC,CAAC,IAAI,UAAU,GAAG,CAAC,EAAE,UAAU,IAAI,aAAa,GAAG,CAAC,EAAE,UAAU,EAAE,EAAE,CAAC;gBACxE,IAAI,aAAa,GAAG,eAAe,CAAC,sBAAsB,CAAC,UAAU,CAAC,CAAC;gBACvE,IAAI,aAAa,GAAG,eAAe,CAAC,sBAAsB,CAAC,UAAU,CAAC,CAAC;gBACvE,GAAG,CAAC,CAAC,IAAI,MAAM,GAAG,aAAa,GAAG,CAAC,EAAE,MAAM,IAAI,aAAa,GAAG,CAAC,EAAE,MAAM,EAAE,EAAE,CAAC;oBAC5E,IAAI,aAAa,GAAG,eAAe,CAAC,oCAAoC,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;oBAC7F,IAAI,kBAAkB,GAAG,KAAK,CAAC,gBAAgB,CAAC,aAAa,CAAC,CAAC;oBAC/D,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC,QAAQ,EAAE,EAAE,kBAAkB,CAAC,QAAQ,EAAE,EAAE,kBAAkB,GAAG,UAAU,GAAG,IAAI,GAAG,MAAM,CAAC,CAAC;gBACxH,CAAC;YACF,CAAC;YAED,eAAe,CAAC,OAAO,EAAE,CAAC;YAC1B,KAAK,CAAC,OAAO,EAAE,CAAC;YAChB,MAAM,CAAC,OAAO,EAAE,CAAC;QAClB,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC;IAGH,aAAa,UAAkB,EAAE,MAAc;QAC9C,MAAM,CAAC,IAAI,mBAAQ,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;IACzC,CAAC;IAED,yBAAyB,YAAqB,EAAE,kBAAyB,EAAE,SAAyB;QAAzB,yBAAyB,GAAzB,gBAAyB;QACnG,MAAM,CAAC,IAAI,gCAAS,CAAC,iBAAiB,CAAC,YAAY,EAAE,kBAAkB,CAAC,EAAE,SAAS,CAAC,CAAC;IACtF,CAAC;IAED,2BAA2B,eAAwB,EAAE,kBAAyB;QAC7E,MAAM,CAAC,IAAI,kEAAgC,CAAC,IAAI,qCAAiB,CAAC,eAAe,CAAC,EAAE,kBAAkB,CAAC,CAAC;IACzG,CAAC;IAED,qBAAqB,IAAW;QAC/B,MAAM,CAAC;YACN,aAAa,EAAE,UAAC,UAAiB,EAAE,0BAAmC;gBACrE,MAAM,CAAC,IAAI,CAAC;YACb,CAAC;YACD,cAAc,EAAE,UAAC,UAAiB;gBACjC,MAAM,CAAC,IAAI,CAAC;YACb,CAAC;YACD,gBAAgB,EAAE,UAAC,UAAiB;gBACnC,MAAM,CAAC,CAAC,CAAC;YACV,CAAC;YACD,gBAAgB,EAAE,UAAC,UAAiB;gBACnC,MAAM,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;YACxB,CAAC;SACD,CAAC;IACH,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport * as assert from 'assert';\nimport {Position} from 'vs/editor/common/core/position';\nimport {CharacterHardWrappingLineMapping, CharacterHardWrappingLineMapperFactory} from 'vs/editor/common/viewModel/characterHardWrappingLineMapper';\nimport {PrefixSumComputer} from 'vs/editor/common/viewModel/prefixSumComputer';\nimport {ILineMapping, IModel, SplitLine, SplitLinesCollection} from 'vs/editor/common/viewModel/splitLinesCollection';\nimport {MockConfiguration} from 'vs/editor/test/common/mocks/mockConfiguration';\nimport {Model} from 'vs/editor/common/model/model';\nimport * as editorCommon from 'vs/editor/common/editorCommon';\n\nsuite('Editor ViewModel - SplitLinesCollection', () => {\n\ttest('SplitLine', () => {\n\t\tvar model1 = createModel('My First LineMy Second LineAnd another one');\n\t\tvar line1 = createSplitLine([13, 14, 15], '');\n\n\t\tassert.equal(line1.getOutputLineCount(), 3);\n\t\tassert.equal(line1.getOutputLineContent(model1, 1, 0), 'My First Line');\n\t\tassert.equal(line1.getOutputLineContent(model1, 1, 1), 'My Second Line');\n\t\tassert.equal(line1.getOutputLineContent(model1, 1, 2), 'And another one');\n\t\tassert.equal(line1.getOutputLineMaxColumn(model1, 1, 0), 14);\n\t\tassert.equal(line1.getOutputLineMaxColumn(model1, 1, 1), 15);\n\t\tassert.equal(line1.getOutputLineMaxColumn(model1, 1, 2), 16);\n\t\tfor (var col = 1; col <= 14; col++) {\n\t\t\tassert.equal(line1.getInputColumnOfOutputPosition(0, col), col, 'getInputColumnOfOutputPosition(0, ' + col + ')');\n\t\t}\n\t\tfor (var col = 1; col <= 15; col++) {\n\t\t\tassert.equal(line1.getInputColumnOfOutputPosition(1, col), 13 + col, 'getInputColumnOfOutputPosition(1, ' + col + ')');\n\t\t}\n\t\tfor (var col = 1; col <= 16; col++) {\n\t\t\tassert.equal(line1.getInputColumnOfOutputPosition(2, col), 13 + 14 + col, 'getInputColumnOfOutputPosition(2, ' + col + ')');\n\t\t}\n\t\tfor (var col = 1; col <= 13; col++) {\n\t\t\tassert.deepEqual(line1.getOutputPositionOfInputPosition(0, col), pos(0, col), 'getOutputPositionOfInputPosition(' + col + ')');\n\t\t}\n\t\tfor (var col = 1 + 13; col <= 14 + 13; col++) {\n\t\t\tassert.deepEqual(line1.getOutputPositionOfInputPosition(0, col), pos(1, col - 13), 'getOutputPositionOfInputPosition(' + col + ')');\n\t\t}\n\t\tfor (var col = 1 + 13 + 14; col <= 15 + 14 + 13; col++) {\n\t\t\tassert.deepEqual(line1.getOutputPositionOfInputPosition(0, col), pos(2, col - 13 - 14), 'getOutputPositionOfInputPosition(' + col + ')');\n\t\t}\n\n\t\tmodel1 = createModel('My First LineMy Second LineAnd another one');\n\t\tline1 = createSplitLine([13, 14, 15], '\\t');\n\n\t\tassert.equal(line1.getOutputLineCount(), 3);\n\t\tassert.equal(line1.getOutputLineContent(model1, 1, 0), 'My First Line');\n\t\tassert.equal(line1.getOutputLineContent(model1, 1, 1), '\\tMy Second Line');\n\t\tassert.equal(line1.getOutputLineContent(model1, 1, 2), '\\tAnd another one');\n\t\tassert.equal(line1.getOutputLineMaxColumn(model1, 1, 0), 14);\n\t\tassert.equal(line1.getOutputLineMaxColumn(model1, 1, 1), 16);\n\t\tassert.equal(line1.getOutputLineMaxColumn(model1, 1, 2), 17);\n\t\tfor (var col = 1; col <= 14; col++) {\n\t\t\tassert.equal(line1.getInputColumnOfOutputPosition(0, col), col, 'getInputColumnOfOutputPosition(0, ' + col + ')');\n\t\t}\n\t\tfor (var col = 1; col <= 1; col++) {\n\t\t\tassert.equal(line1.getInputColumnOfOutputPosition(1, 1), 13 + col, 'getInputColumnOfOutputPosition(1, ' + col + ')');\n\t\t}\n\t\tfor (var col = 2; col <= 16; col++) {\n\t\t\tassert.equal(line1.getInputColumnOfOutputPosition(1, col), 13 + col - 1, 'getInputColumnOfOutputPosition(1, ' + col + ')');\n\t\t}\n\t\tfor (var col = 1; col <= 1; col++) {\n\t\t\tassert.equal(line1.getInputColumnOfOutputPosition(2, col), 13 + 14 + col, 'getInputColumnOfOutputPosition(2, ' + col + ')');\n\t\t}\n\t\tfor (var col = 2; col <= 17; col++) {\n\t\t\tassert.equal(line1.getInputColumnOfOutputPosition(2, col), 13 + 14 + col - 1, 'getInputColumnOfOutputPosition(2, ' + col + ')');\n\t\t}\n\t\tfor (var col = 1; col <= 13; col++) {\n\t\t\tassert.deepEqual(line1.getOutputPositionOfInputPosition(0, col), pos(0, col), 'getOutputPositionOfInputPosition(' + col + ')');\n\t\t}\n\t\tfor (var col = 1 + 13; col <= 14 + 13; col++) {\n\t\t\tassert.deepEqual(line1.getOutputPositionOfInputPosition(0, col), pos(1, 1 + col - 13), 'getOutputPositionOfInputPosition(' + col + ')');\n\t\t}\n\t\tfor (var col = 1 + 13 + 14; col <= 15 + 14 + 13; col++) {\n\t\t\tassert.deepEqual(line1.getOutputPositionOfInputPosition(0, col), pos(2, 1 + col - 13 - 14), 'getOutputPositionOfInputPosition(' + col + ')');\n\t\t}\n\t});\n\n\ttest('issue #3662', () => {\n\t\tlet config = new MockConfiguration({});\n\n\t\tlet hardWrappingLineMapperFactory = new CharacterHardWrappingLineMapperFactory(\n\t\t\tconfig.editor.wordWrapBreakBeforeCharacters,\n\t\t\tconfig.editor.wordWrapBreakAfterCharacters,\n\t\t\tconfig.editor.wordWrapBreakObtrusiveCharacters\n\t\t);\n\n\t\tlet model = new Model([\n\t\t\t'int main() {',\n\t\t\t'\\tprintf(\"Hello world!\");',\n\t\t\t'}',\n\t\t\t'int main() {',\n\t\t\t'\\tprintf(\"Hello world!\");',\n\t\t\t'}',\n\t\t].join('\\n'), Model.DEFAULT_CREATION_OPTIONS, null);\n\n\t\tlet linesCollection = new SplitLinesCollection(\n\t\t\tmodel,\n\t\t\thardWrappingLineMapperFactory,\n\t\t\tmodel.getOptions().tabSize,\n\t\t\tconfig.editor.wrappingInfo.wrappingColumn,\n\t\t\tconfig.editor.typicalFullwidthCharacterWidth / config.editor.typicalHalfwidthCharacterWidth,\n\t\t\teditorCommon.wrappingIndentFromString(config.editor.wrappingIndent)\n\t\t);\n\n\t\tlinesCollection.setHiddenAreas([{\n\t\t\tstartLineNumber: 1,\n\t\t\tstartColumn: 1,\n\t\t\tendLineNumber: 3,\n\t\t\tendColumn: 1\n\t\t}, {\n\t\t\tstartLineNumber: 5,\n\t\t\tstartColumn: 1,\n\t\t\tendLineNumber: 6,\n\t\t\tendColumn: 1\n\t\t}], (eventType, payload) => {/*no-op*/});\n\n\t\tlet viewLineCount = linesCollection.getOutputLineCount();\n\t\tassert.equal(viewLineCount, 1, 'getOutputLineCount()');\n\n\t\tlet modelLineCount = model.getLineCount();\n\t\tfor (let lineNumber = 0; lineNumber <= modelLineCount + 1; lineNumber++) {\n\t\t\tlet lineMinColumn = (lineNumber >= 1 && lineNumber <= modelLineCount) ? model.getLineMinColumn(lineNumber) : 1;\n\t\t\tlet lineMaxColumn = (lineNumber >= 1 && lineNumber <= modelLineCount) ? model.getLineMaxColumn(lineNumber) : 1;\n\t\t\tfor (let column = lineMinColumn - 1; column <= lineMaxColumn + 1; column++) {\n\t\t\t\tlet viewPosition = linesCollection.convertInputPositionToOutputPosition(lineNumber, column);\n\n\t\t\t\t// validate view position\n\t\t\t\tlet viewLineNumber = viewPosition.lineNumber;\n\t\t\t\tlet viewColumn = viewPosition.column;\n\t\t\t\tif (viewLineNumber < 1) {\n\t\t\t\t\tviewLineNumber = 1;\n\t\t\t\t}\n\t\t\t\tvar lineCount = linesCollection.getOutputLineCount();\n\t\t\t\tif (viewLineNumber > lineCount) {\n\t\t\t\t\tviewLineNumber = lineCount;\n\t\t\t\t}\n\t\t\t\tvar viewMinColumn = linesCollection.getOutputLineMinColumn(viewLineNumber);\n\t\t\t\tvar viewMaxColumn = linesCollection.getOutputLineMaxColumn(viewLineNumber);\n\t\t\t\tif (viewColumn < viewMinColumn) {\n\t\t\t\t\tviewColumn = viewMinColumn;\n\t\t\t\t}\n\t\t\t\tif (viewColumn > viewMaxColumn) {\n\t\t\t\t\tviewColumn = viewMaxColumn;\n\t\t\t\t}\n\t\t\t\tlet validViewPosition = new Position(viewLineNumber, viewColumn);\n\t\t\t\tassert.equal(viewPosition.toString(), validViewPosition.toString(), 'model->view for ' + lineNumber + ', ' + column);\n\t\t\t}\n\t\t}\n\n\t\tfor (let lineNumber = 0; lineNumber <= viewLineCount + 1; lineNumber++) {\n\t\t\tlet lineMinColumn = linesCollection.getOutputLineMinColumn(lineNumber);\n\t\t\tlet lineMaxColumn = linesCollection.getOutputLineMaxColumn(lineNumber);\n\t\t\tfor (let column = lineMinColumn - 1; column <= lineMaxColumn + 1; column++) {\n\t\t\t\tlet modelPosition = linesCollection.convertOutputPositionToInputPosition(lineNumber, column);\n\t\t\t\tlet validModelPosition = model.validatePosition(modelPosition);\n\t\t\t\tassert.equal(modelPosition.toString(), validModelPosition.toString(), 'view->model for ' + lineNumber + ', ' + column);\n\t\t\t}\n\t\t}\n\n\t\tlinesCollection.dispose();\n\t\tmodel.dispose();\n\t\tconfig.dispose();\n\t});\n});\n\n\nfunction pos(lineNumber: number, column: number): Position {\n\treturn new Position(lineNumber, column);\n}\n\nfunction createSplitLine(splitLengths:number[], wrappedLinesPrefix:string, isVisible: boolean = true): SplitLine {\n\treturn new SplitLine(createLineMapping(splitLengths, wrappedLinesPrefix), isVisible);\n}\n\nfunction createLineMapping(breakingLengths:number[], wrappedLinesPrefix:string): ILineMapping {\n\treturn new CharacterHardWrappingLineMapping(new PrefixSumComputer(breakingLengths), wrappedLinesPrefix);\n}\n\nfunction createModel(text:string): IModel {\n\treturn {\n\t\tgetLineTokens: (lineNumber:number, inaccurateTokensAcceptable?:boolean) => {\n\t\t\treturn null;\n\t\t},\n\t\tgetLineContent: (lineNumber:number) => {\n\t\t\treturn text;\n\t\t},\n\t\tgetLineMinColumn: (lineNumber:number) => {\n\t\t\treturn 1;\n\t\t},\n\t\tgetLineMaxColumn: (lineNumber:number) => {\n\t\t\treturn text.length + 1;\n\t\t}\n\t};\n}"]}