{"version":3,"file":"vs/editor/test/common/model/editableTextModelTestUtils.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/editor/test/common/model/editableTextModelTestUtils.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport * as assert from 'assert';\nimport * as editorCommon from 'vs/editor/common/editorCommon';\nimport {EditableTextModel} from 'vs/editor/common/model/editableTextModel';\nimport {IMirrorModelEvents, MirrorModel} from 'vs/editor/common/model/mirrorModel';\nimport {MirrorModel2} from 'vs/editor/common/model/mirrorModel2';\nimport {TextModel} from 'vs/editor/common/model/textModel';\n\nexport function testApplyEditsWithSyncedModels(original:string[], edits:editorCommon.IIdentifiedSingleEditOperation[], expected:string[]): void {\n\tvar originalStr = original.join('\\n');\n\tvar expectedStr = expected.join('\\n');\n\n\tassertSyncedModels(originalStr, (model, assertMirrorModels) => {\n\t\t// Apply edits & collect inverse edits\n\t\tvar inverseEdits = model.applyEdits(edits);\n\n\t\t// Assert edits produced expected result\n\t\tassert.deepEqual(model.getValue(editorCommon.EndOfLinePreference.LF), expectedStr);\n\n\t\tassertMirrorModels();\n\n\t\t// Apply the inverse edits\n\t\tvar inverseInverseEdits = model.applyEdits(inverseEdits);\n\n\t\t// Assert the inverse edits brought back model to original state\n\t\tassert.deepEqual(model.getValue(editorCommon.EndOfLinePreference.LF), originalStr);\n\n\t\t// Assert the inverse of the inverse edits are the original edits\n\t\tassert.deepEqual(inverseInverseEdits, edits);\n\n\t\tassertMirrorModels();\n\t});\n}\n\nexport  function assertSyncedModels(text:string, callback:(model:EditableTextModel, assertMirrorModels:()=>void)=>void, setup:(model:EditableTextModel)=>void = null): void {\n\tvar model = new EditableTextModel([], TextModel.toRawText(text, TextModel.DEFAULT_CREATION_OPTIONS), null);\n\tmodel.setEOL(editorCommon.EndOfLineSequence.LF);\n\n\tif (setup) {\n\t\tsetup(model);\n\t}\n\n\tvar mirrorModel1 = new MirrorModel(null, model.getVersionId(), model.toRawText(), null);\n\tvar mirrorModel1PrevVersionId = model.getVersionId();\n\n\tvar mirrorModel2 = new MirrorModel2(null, model.toRawText().lines, model.toRawText().EOL, model.getVersionId());\n\tvar mirrorModel2PrevVersionId = model.getVersionId();\n\n\tmodel.addListener(editorCommon.EventType.ModelContentChanged, (e:editorCommon.IModelContentChangedEvent) => {\n\t\tlet versionId = e.versionId;\n\t\tif (versionId < mirrorModel1PrevVersionId) {\n\t\t\tconsole.warn('Model version id did not advance between edits (1)');\n\t\t}\n\t\tmirrorModel1PrevVersionId = versionId;\n\t\tlet mirrorModelEvents:IMirrorModelEvents = {\n\t\t\tcontentChanged: [e]\n\t\t};\n\t\tmirrorModel1.onEvents(mirrorModelEvents);\n\t});\n\n\tmodel.addListener(editorCommon.EventType.ModelContentChanged2, (e:editorCommon.IModelContentChangedEvent2) => {\n\t\tlet versionId = e.versionId;\n\t\tif (versionId < mirrorModel2PrevVersionId) {\n\t\t\tconsole.warn('Model version id did not advance between edits (2)');\n\t\t}\n\t\tmirrorModel2PrevVersionId = versionId;\n\t\tmirrorModel2.onEvents([e]);\n\t});\n\n\tvar assertMirrorModels = () => {\n\t\tmodel._assertLineNumbersOK();\n\t\tassert.equal(mirrorModel2.getText(), model.getValue(), 'mirror model 2 text OK');\n\t\tassert.equal(mirrorModel2.version, model.getVersionId(), 'mirror model 2 version OK');\n\t\tassert.equal(mirrorModel1.getValue(), model.getValue(), 'mirror model 1 text OK');\n\t\tassert.equal(mirrorModel1.getVersionId(), model.getVersionId(), 'mirror model 1 version OK');\n\t};\n\n\tcallback(model, assertMirrorModels);\n\n\tmodel.dispose();\n\tmirrorModel1.dispose();\n\tmirrorModel2.dispose();\n}\n"]}