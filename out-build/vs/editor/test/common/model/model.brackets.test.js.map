{"version":3,"file":"vs/editor/test/common/model/model.brackets.test.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/editor/test/common/model/model.brackets.test.ts"],"names":[],"mappings":";IAAA;;;oGAGgG;IAChG,YAAY,CAAC;IAQb,KAAK,CAAC,qBAAqB,EAAE;QAE5B,+BAA+B,CAAe;YAC7C,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACR,MAAM,CAAC,IAAI,CAAC;YACb,CAAC;YACD,MAAM,CAAC;gBACN,KAAK,EAAE,CAAC,CAAC,KAAK,CAAC,QAAQ,EAAE;gBACzB,IAAI,EAAE,CAAC,CAAC,IAAI;gBACZ,KAAK,EAAE,CAAC,CAAC,KAAK;gBACd,MAAM,EAAE,CAAC,CAAC,MAAM;aAChB,CAAC;QACH,CAAC;QAED,sBAAsB,QAAkB,EAAE,QAAmB;YAC5D,IAAI,aAAa,GAA4B,EAAE,CAAC;YAChD,IAAI,iBAAiB,GAA4B,EAAE,CAAC;YACpD,IAAI,WAAW,GAA2B,EAAE,CAAC;YAC7C,IAAI,YAAY,GAA2B,EAAE,CAAC;YAC9C,QAAQ,CAAC,OAAO,CAAC,UAAC,CAAC;gBAClB,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;gBAC3B,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;gBAE3B,iBAAiB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;gBAC/B,iBAAiB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;gBAEhC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;gBACzB,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;gBAE1B,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;gBACzB,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;YAC3B,CAAC,CAAC,CAAC;YAEH,IAAI,gBAAgB,GAAmB,EAAE,CAAC;YAC1C,GAAG,CAAC,CAAC,IAAI,SAAS,GAAG,CAAC,EAAE,SAAS,GAAG,QAAQ,CAAC,MAAM,EAAE,SAAS,EAAE,EAAE,CAAC;gBAClE,IAAI,QAAQ,GAAG,QAAQ,CAAC,SAAS,CAAC,CAAC;gBAEnC,GAAG,CAAC,CAAC,IAAI,SAAS,GAAG,CAAC,EAAE,SAAS,GAAG,QAAQ,CAAC,MAAM,EAAE,SAAS,EAAE,EAAE,CAAC;oBAClE,IAAI,EAAE,GAAG,QAAQ,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;oBACpC,EAAE,CAAC,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;wBACvB,gBAAgB,CAAC,IAAI,CAAC;4BACrB,IAAI,EAAE,WAAW,CAAC,EAAE,CAAC;4BACrB,KAAK,EAAE,YAAY,CAAC,EAAE,CAAC;4BACvB,MAAM,EAAE,iBAAiB,CAAC,EAAE,CAAC;4BAC7B,KAAK,EAAE,IAAI,aAAK,CAAC,SAAS,GAAG,CAAC,EAAE,SAAS,GAAG,CAAC,EAAE,SAAS,GAAG,CAAC,EAAE,SAAS,GAAG,CAAC,CAAC;yBAC5E,CAAC,CAAC;oBACJ,CAAC;gBACF,CAAC;YACF,CAAC;YAED,IAAI,KAAK,GAAG,IAAI,yCAAmB,CAAC,EAAE,EAAE,qBAAS,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,qBAAS,CAAC,wBAAwB,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;YAEnI,kBAAkB;YAClB,CAAC;gBACA,IAAI,oBAAoB,GAAG,gBAAgB,CAAC,MAAM,GAAG,CAAC,CAAC;gBACvD,IAAI,sBAAsB,GAAG,oBAAoB,IAAI,CAAC,GAAG,gBAAgB,CAAC,oBAAoB,CAAC,GAAG,IAAI,CAAC;gBACvG,GAAG,CAAC,CAAC,IAAI,UAAU,GAAG,QAAQ,CAAC,MAAM,EAAE,UAAU,IAAI,CAAC,EAAE,UAAU,EAAE,EAAE,CAAC;oBACtE,IAAI,QAAQ,GAAG,QAAQ,CAAC,UAAU,GAAG,CAAC,CAAC,CAAC;oBAExC,GAAG,CAAC,CAAC,IAAI,MAAM,GAAG,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE,MAAM,IAAI,CAAC,EAAE,MAAM,EAAE,EAAE,CAAC;wBAE9D,EAAE,CAAC,CAAC,sBAAsB,CAAC,CAAC,CAAC;4BAC5B,EAAE,CAAC,CAAC,UAAU,KAAK,sBAAsB,CAAC,KAAK,CAAC,eAAe,IAAI,MAAM,GAAG,sBAAsB,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC;gCACpH,oBAAoB,EAAE,CAAC;gCACvB,sBAAsB,GAAG,oBAAoB,IAAI,CAAC,GAAG,gBAAgB,CAAC,oBAAoB,CAAC,GAAG,IAAI,CAAC;4BACpG,CAAC;wBACF,CAAC;wBAED,IAAI,MAAM,GAAG,KAAK,CAAC,eAAe,CAAC;4BAClC,UAAU,EAAE,UAAU;4BACtB,MAAM,EAAE,MAAM;yBACd,CAAC,CAAC;wBAEH,MAAM,CAAC,SAAS,CAAC,qBAAqB,CAAC,MAAM,CAAC,EAAE,qBAAqB,CAAC,sBAAsB,CAAC,EAAE,qBAAqB,GAAG,UAAU,GAAG,IAAI,GAAG,MAAM,CAAC,CAAC;oBACpJ,CAAC;gBACF,CAAC;YACF,CAAC;YAED,kBAAkB;YAClB,CAAC;gBACA,IAAI,oBAAoB,GAAG,CAAC,CAAC;gBAC7B,IAAI,sBAAsB,GAAG,oBAAoB,GAAG,gBAAgB,CAAC,MAAM,GAAG,gBAAgB,CAAC,oBAAoB,CAAC,GAAG,IAAI,CAAC;gBAC5H,GAAG,CAAC,CAAC,IAAI,UAAU,GAAG,CAAC,EAAE,UAAU,IAAI,QAAQ,CAAC,MAAM,EAAE,UAAU,EAAE,EAAE,CAAC;oBACtE,IAAI,QAAQ,GAAG,QAAQ,CAAC,UAAU,GAAG,CAAC,CAAC,CAAC;oBAExC,GAAG,CAAC,CAAC,IAAI,MAAM,GAAG,CAAC,EAAE,MAAM,IAAI,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE,MAAM,EAAE,EAAE,CAAC;wBAE9D,EAAE,CAAC,CAAC,sBAAsB,CAAC,CAAC,CAAC;4BAC5B,EAAE,CAAC,CAAC,UAAU,KAAK,sBAAsB,CAAC,KAAK,CAAC,eAAe,IAAI,MAAM,GAAG,sBAAsB,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC;gCACtH,oBAAoB,EAAE,CAAC;gCACvB,sBAAsB,GAAG,oBAAoB,GAAG,gBAAgB,CAAC,MAAM,GAAG,gBAAgB,CAAC,oBAAoB,CAAC,GAAG,IAAI,CAAC;4BACzH,CAAC;wBACF,CAAC;wBAED,IAAI,MAAM,GAAG,KAAK,CAAC,eAAe,CAAC;4BAClC,UAAU,EAAE,UAAU;4BACtB,MAAM,EAAE,MAAM;yBACd,CAAC,CAAC;wBAEH,MAAM,CAAC,SAAS,CAAC,qBAAqB,CAAC,MAAM,CAAC,EAAE,qBAAqB,CAAC,sBAAsB,CAAC,EAAE,qBAAqB,GAAG,UAAU,GAAG,IAAI,GAAG,MAAM,CAAC,CAAC;oBACpJ,CAAC;gBACF,CAAC;YACF,CAAC;YAED,KAAK,CAAC,OAAO,EAAE,CAAC;QACjB,CAAC;QAED,IAAI,CAAC,UAAU,EAAE;YAChB,YAAY,CAAC;gBACZ,uCAAuC;aACvC,EAAE;gBACF,CAAC,GAAG,EAAE,GAAG,CAAC;gBACV,CAAC,GAAG,EAAE,GAAG,CAAC;gBACV,CAAC,GAAG,EAAE,GAAG,CAAC;aACV,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;IAEJ,CAAC,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport * as assert from 'assert';\nimport {Range} from 'vs/editor/common/core/range';\nimport {IFoundBracket} from 'vs/editor/common/editorCommon';\nimport {TextModel} from 'vs/editor/common/model/textModel';\nimport {TextModelWithTokens} from 'vs/editor/common/model/textModelWithTokens';\n\nsuite('TextModelWithTokens', () => {\n\n\tfunction toRelaxedFoundBracket(a:IFoundBracket) {\n\t\tif (!a) {\n\t\t\treturn null;\n\t\t}\n\t\treturn {\n\t\t\trange: a.range.toString(),\n\t\t\topen: a.open,\n\t\t\tclose: a.close,\n\t\t\tisOpen: a.isOpen\n\t\t};\n\t}\n\n\tfunction testBrackets(contents: string[], brackets:string[][]): void {\n\t\tlet charIsBracket: {[char:string]:boolean} = {};\n\t\tlet charIsOpenBracket: {[char:string]:boolean} = {};\n\t\tlet openForChar: {[char:string]:string} = {};\n\t\tlet closeForChar: {[char:string]:string} = {};\n\t\tbrackets.forEach((b) => {\n\t\t\tcharIsBracket[b[0]] = true;\n\t\t\tcharIsBracket[b[1]] = true;\n\n\t\t\tcharIsOpenBracket[b[0]] = true;\n\t\t\tcharIsOpenBracket[b[1]] = false;\n\n\t\t\topenForChar[b[0]] = b[0];\n\t\t\tcloseForChar[b[0]] = b[1];\n\n\t\t\topenForChar[b[1]] = b[0];\n\t\t\tcloseForChar[b[1]] = b[1];\n\t\t});\n\n\t\tlet expectedBrackets:IFoundBracket[] = [];\n\t\tfor (let lineIndex = 0; lineIndex < contents.length; lineIndex++) {\n\t\t\tlet lineText = contents[lineIndex];\n\n\t\t\tfor (let charIndex = 0; charIndex < lineText.length; charIndex++) {\n\t\t\t\tlet ch = lineText.charAt(charIndex);\n\t\t\t\tif (charIsBracket[ch]) {\n\t\t\t\t\texpectedBrackets.push({\n\t\t\t\t\t\topen: openForChar[ch],\n\t\t\t\t\t\tclose: closeForChar[ch],\n\t\t\t\t\t\tisOpen: charIsOpenBracket[ch],\n\t\t\t\t\t\trange: new Range(lineIndex + 1, charIndex + 1, lineIndex + 1, charIndex + 2)\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tlet model = new TextModelWithTokens([], TextModel.toRawText(contents.join('\\n'), TextModel.DEFAULT_CREATION_OPTIONS), false, null);\n\n\t\t// findPrevBracket\n\t\t{\n\t\t\tlet expectedBracketIndex = expectedBrackets.length - 1;\n\t\t\tlet currentExpectedBracket = expectedBracketIndex >= 0 ? expectedBrackets[expectedBracketIndex] : null;\n\t\t\tfor (let lineNumber = contents.length; lineNumber >= 1; lineNumber--) {\n\t\t\t\tlet lineText = contents[lineNumber - 1];\n\n\t\t\t\tfor (let column = lineText.length + 1; column >= 1; column--) {\n\n\t\t\t\t\tif (currentExpectedBracket) {\n\t\t\t\t\t\tif (lineNumber === currentExpectedBracket.range.startLineNumber && column < currentExpectedBracket.range.endColumn) {\n\t\t\t\t\t\t\texpectedBracketIndex--;\n\t\t\t\t\t\t\tcurrentExpectedBracket = expectedBracketIndex >= 0 ? expectedBrackets[expectedBracketIndex] : null;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tlet actual = model.findPrevBracket({\n\t\t\t\t\t\tlineNumber: lineNumber,\n\t\t\t\t\t\tcolumn: column\n\t\t\t\t\t});\n\n\t\t\t\t\tassert.deepEqual(toRelaxedFoundBracket(actual), toRelaxedFoundBracket(currentExpectedBracket), 'findPrevBracket of ' + lineNumber + ', ' + column);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// findNextBracket\n\t\t{\n\t\t\tlet expectedBracketIndex = 0;\n\t\t\tlet currentExpectedBracket = expectedBracketIndex < expectedBrackets.length ? expectedBrackets[expectedBracketIndex] : null;\n\t\t\tfor (let lineNumber = 1; lineNumber <= contents.length; lineNumber++) {\n\t\t\t\tlet lineText = contents[lineNumber - 1];\n\n\t\t\t\tfor (let column = 1; column <= lineText.length + 1; column++) {\n\n\t\t\t\t\tif (currentExpectedBracket) {\n\t\t\t\t\t\tif (lineNumber === currentExpectedBracket.range.startLineNumber && column > currentExpectedBracket.range.startColumn) {\n\t\t\t\t\t\t\texpectedBracketIndex++;\n\t\t\t\t\t\t\tcurrentExpectedBracket = expectedBracketIndex < expectedBrackets.length ? expectedBrackets[expectedBracketIndex] : null;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tlet actual = model.findNextBracket({\n\t\t\t\t\t\tlineNumber: lineNumber,\n\t\t\t\t\t\tcolumn: column\n\t\t\t\t\t});\n\n\t\t\t\t\tassert.deepEqual(toRelaxedFoundBracket(actual), toRelaxedFoundBracket(currentExpectedBracket), 'findNextBracket of ' + lineNumber + ', ' + column);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tmodel.dispose();\n\t}\n\n\ttest('brackets', () => {\n\t\ttestBrackets([\n\t\t\t'if (a == 3) { return (7 * (a + 5)); }'\n\t\t], [\n\t\t\t['{', '}'],\n\t\t\t['[', ']'],\n\t\t\t['(', ')']\n\t\t]);\n\t});\n\n});\n"]}