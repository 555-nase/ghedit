{"version":3,"file":"vs/workbench/api/node/extHostOutputService.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/workbench/api/node/extHostOutputService.ts"],"names":[],"mappings":";;;;;;;;;;IAAA;;;oGAGgG;IAChG,YAAY,CAAC;IASb;QASC,8BAAY,IAAY,EAAE,KAA8B;YACvD,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;YAClB,IAAI,CAAC,GAAG,GAAG,oBAAoB,GAAG,CAAC,oBAAoB,CAAC,OAAO,EAAE,CAAC,CAAC;YACnE,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACrB,CAAC;QAED,sBAAI,sCAAI;iBAAR;gBACC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;YACnB,CAAC;;;WAAA;QAED,sCAAO,GAAP;YAAA,iBAMC;YALA,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;gBACrB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC;oBAC5C,KAAI,CAAC,SAAS,GAAG,IAAI,CAAC;gBACvB,CAAC,CAAC,CAAC;YACJ,CAAC;QACF,CAAC;QAED,qCAAM,GAAN,UAAO,KAAa;YACnB,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;QACjD,CAAC;QAED,yCAAU,GAAV,UAAW,KAAa;YACvB,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC,CAAC;QAC3B,CAAC;QAED,oCAAK,GAAL;YACC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;QACzC,CAAC;QAED,mCAAI,GAAJ,UAAK,qBAAmD,EAAE,aAAuB;YAChF,EAAE,CAAC,CAAC,OAAO,qBAAqB,KAAK,SAAS,CAAC,CAAC,CAAC;gBAChD,aAAa,GAAG,qBAAqB,CAAC;YACvC,CAAC;YAED,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,KAAK,EAAE,aAAa,CAAC,CAAC;QACzD,CAAC;QAED,mCAAI,GAAJ;YACC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC7B,CAAC;QA/Cc,4BAAO,GAAG,CAAC,CAAC;QAgD5B,2BAAC;IAAD,CAAC,AAlDD,IAkDC;IAlDY,4BAAoB,uBAkDhC,CAAA;IAED;QAIC,8BAAY,aAA6B;YACxC,IAAI,CAAC,MAAM,GAAG,aAAa,CAAC,YAAY,CAAC,uBAAuB,CAAC,CAAC;QACnE,CAAC;QAED,kDAAmB,GAAnB,UAAoB,IAAY;YAC/B,IAAI,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC;YACnB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;gBACX,MAAM,IAAI,KAAK,CAAC,4CAA4C,CAAC,CAAC;YAC/D,CAAC;YAAC,IAAI,CAAC,CAAC;gBACP,MAAM,CAAC,IAAI,oBAAoB,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;YACpD,CAAC;QACF,CAAC;QACF,2BAAC;IAAD,CAAC,AAhBD,IAgBC;IAhBY,4BAAoB,uBAgBhC,CAAA;IAGD;QAMC,iCAA4B,aAA6B,EAC1C,WAAyB,EACxB,YAA2B;YAE1C,IAAI,CAAC,cAAc,GAAG,aAAa,CAAC;YACpC,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;YAChC,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;QACnC,CAAC;QAEM,wCAAM,GAAb,UAAc,SAAiB,EAAE,KAAa,EAAE,KAAa;YAC5D,IAAI,CAAC,WAAW,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YACjD,MAAM,CAAC,SAAS,CAAC;QAClB,CAAC;QAEM,uCAAK,GAAZ,UAAa,SAAiB,EAAE,KAAa;YAC5C,IAAI,CAAC,WAAW,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC,KAAK,EAAE,CAAC;YAC3C,MAAM,CAAC,SAAS,CAAC;QAClB,CAAC;QAEM,wCAAM,GAAb,UAAc,SAAiB,EAAE,KAAa,EAAE,aAAsB;YACrE,IAAI,CAAC,WAAW,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;YACvD,MAAM,CAAC,SAAS,CAAC;QAClB,CAAC;QAEO,6CAAW,GAAnB,UAAoB,SAAiB,EAAE,KAAa;YACnD,EAAE,CAAC,CAAC,mBAAQ,CAAC,EAAE,CAAyB,mBAAU,CAAC,cAAc,CAAC,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,UAAA,OAAO,IAAI,OAAA,OAAO,CAAC,EAAE,KAAK,SAAS,EAAxB,CAAwB,CAAC,CAAC,CAAC,CAAC;gBAC7H,mBAAQ,CAAC,EAAE,CAAyB,mBAAU,CAAC,cAAc,CAAC,CAAC,eAAe,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;YAClG,CAAC;YAED,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;QAClD,CAAC;QAEM,uCAAK,GAAZ,UAAa,SAAiB;YAC7B,IAAM,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC,cAAc,EAAE,CAAC;YAClD,EAAE,CAAC,CAAC,KAAK,IAAI,KAAK,CAAC,KAAK,EAAE,KAAK,wBAAe,IAAI,SAAS,KAAK,IAAI,CAAC,cAAc,CAAC,gBAAgB,EAAE,CAAC,EAAG,CAAC,CAAC,CAAC;gBAC5G,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;YACxC,CAAC;YAED,MAAM,CAAC,SAAS,CAAC;QAClB,CAAC;QA9CF;YAAC,kBAAS,CAAC,WAAW,CAAC,yBAAyB,CAAC;uBAOnC,uBAAc;uBACzB,0BAAY;uBACZ,4BAAa;mCATiC;QA+CjD,8BAAC;IAAD,CAAC,AA9CD,IA8CC;IA9CY,+BAAuB,0BA8CnC,CAAA","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport {Remotable, IThreadService} from 'vs/platform/thread/common/thread';\nimport {Registry} from 'vs/platform/platform';\nimport {IOutputService, IOutputChannel, OUTPUT_PANEL_ID, Extensions, IOutputChannelRegistry} from 'vs/workbench/parts/output/common/output';\nimport {IPartService} from 'vs/workbench/services/part/common/partService';\nimport {IPanelService} from 'vs/workbench/services/panel/common/panelService';\n\nexport class ExtHostOutputChannel implements vscode.OutputChannel {\n\n\tprivate static _idPool = 1;\n\n\tprivate _proxy: MainThreadOutputService;\n\tprivate _name: string;\n\tprivate _id: string;\n\tprivate _disposed: boolean;\n\n\tconstructor(name: string, proxy: MainThreadOutputService) {\n\t\tthis._name = name;\n\t\tthis._id = 'extension-output-#' + (ExtHostOutputChannel._idPool++);\n\t\tthis._proxy = proxy;\n\t}\n\n\tget name(): string {\n\t\treturn this._name;\n\t}\n\n\tdispose(): void {\n\t\tif (!this._disposed) {\n\t\t\tthis._proxy.clear(this._id, this._name).then(() => {\n\t\t\t\tthis._disposed = true;\n\t\t\t});\n\t\t}\n\t}\n\n\tappend(value: string): void {\n\t\tthis._proxy.append(this._id, this._name, value);\n\t}\n\n\tappendLine(value: string): void {\n\t\tthis.append(value + '\\n');\n\t}\n\n\tclear(): void {\n\t\tthis._proxy.clear(this._id, this._name);\n\t}\n\n\tshow(columnOrPreserveFocus?: vscode.ViewColumn | boolean, preserveFocus?: boolean): void {\n\t\tif (typeof columnOrPreserveFocus === 'boolean') {\n\t\t\tpreserveFocus = columnOrPreserveFocus;\n\t\t}\n\n\t\tthis._proxy.reveal(this._id, this._name, preserveFocus);\n\t}\n\n\thide(): void {\n\t\tthis._proxy.close(this._id);\n\t}\n}\n\nexport class ExtHostOutputService {\n\n\tprivate _proxy: MainThreadOutputService;\n\n\tconstructor(threadService: IThreadService) {\n\t\tthis._proxy = threadService.getRemotable(MainThreadOutputService);\n\t}\n\n\tcreateOutputChannel(name: string): vscode.OutputChannel {\n\t\tname = name.trim();\n\t\tif (!name) {\n\t\t\tthrow new Error('illegal argument `name`. must not be falsy');\n\t\t} else {\n\t\t\treturn new ExtHostOutputChannel(name, this._proxy);\n\t\t}\n\t}\n}\n\n@Remotable.MainContext('MainThreadOutputService')\nexport class MainThreadOutputService {\n\n\tprivate _outputService: IOutputService;\n\tprivate _partService: IPartService;\n\tprivate _panelService: IPanelService;\n\n\tconstructor(@IOutputService outputService: IOutputService,\n\t\t@IPartService partService: IPartService,\n\t\t@IPanelService panelService: IPanelService\n\t) {\n\t\tthis._outputService = outputService;\n\t\tthis._partService = partService;\n\t\tthis._panelService = panelService;\n\t}\n\n\tpublic append(channelId: string, label: string, value: string): TPromise<void> {\n\t\tthis._getChannel(channelId, label).append(value);\n\t\treturn undefined;\n\t}\n\n\tpublic clear(channelId: string, label: string): TPromise<void> {\n\t\tthis._getChannel(channelId, label).clear();\n\t\treturn undefined;\n\t}\n\n\tpublic reveal(channelId: string, label: string, preserveFocus: boolean): TPromise<void> {\n\t\tthis._getChannel(channelId, label).show(preserveFocus);\n\t\treturn undefined;\n\t}\n\n\tprivate _getChannel(channelId: string, label: string): IOutputChannel {\n\t\tif (Registry.as<IOutputChannelRegistry>(Extensions.OutputChannels).getChannels().every(channel => channel.id !== channelId)) {\n\t\t\tRegistry.as<IOutputChannelRegistry>(Extensions.OutputChannels).registerChannel(channelId, label);\n\t\t}\n\n\t\treturn this._outputService.getChannel(channelId);\n\t}\n\n\tpublic close(channelId: string): TPromise<void> {\n\t\tconst panel = this._panelService.getActivePanel();\n\t\tif (panel && panel.getId() === OUTPUT_PANEL_ID && channelId === this._outputService.getActiveChannel().id ) {\n\t\t\tthis._partService.setPanelHidden(true);\n\t\t}\n\n\t\treturn undefined;\n\t}\n}\n"]}