{"version":3,"file":"vs/workbench/api/node/extHostConfiguration.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/workbench/api/node/extHostConfiguration.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {clone} from 'vs/base/common/objects';\nimport {IDisposable, dispose} from 'vs/base/common/lifecycle';\nimport {IThreadService, Remotable} from 'vs/platform/thread/common/thread';\nimport {IConfigurationService, ConfigurationServiceEventTypes, IConfigurationServiceEvent} from 'vs/platform/configuration/common/configuration';\nimport Event, {Emitter} from 'vs/base/common/event';\nimport {WorkspaceConfiguration} from 'vscode';\n\n@Remotable.ExtHostContext('ExtHostConfiguration')\nexport class ExtHostConfiguration {\n\n\tprivate _config: any;\n\tprivate _hasConfig: boolean;\n\tprivate _onDidChangeConfiguration: Emitter<void>;\n\n\tconstructor() {\n\t\tthis._onDidChangeConfiguration = new Emitter<void>();\n\t}\n\n\tget onDidChangeConfiguration(): Event<void> {\n\t\treturn this._onDidChangeConfiguration && this._onDidChangeConfiguration.event;\n\t}\n\n\tpublic _acceptConfigurationChanged(config:any) {\n\t\tthis._config = config;\n\t\tthis._hasConfig = true;\n\t\tthis._onDidChangeConfiguration.fire(undefined);\n\t}\n\n\tpublic getConfiguration(section?: string): WorkspaceConfiguration {\n\t\tif (!this._hasConfig) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst config = section\n\t\t\t? ExtHostConfiguration._lookUp(section, this._config)\n\t\t\t: this._config;\n\n\n\t\tlet result = config ? clone(config) : {};\n\t\t// result = Object.freeze(result);\n\t\tresult.has = function(key: string): boolean {\n\t\t\treturn typeof ExtHostConfiguration._lookUp(key, config) !== 'undefined';\n\t\t};\n\t\tresult.get = function <T>(key: string, defaultValue?: T): T {\n\t\t\tlet result = ExtHostConfiguration._lookUp(key, config);\n\t\t\tif (typeof result === 'undefined') {\n\t\t\t\tresult = defaultValue;\n\t\t\t}\n\t\t\treturn result;\n\t\t};\n\t\treturn result;\n\t}\n\n\tprivate static _lookUp(section: string, config: any) {\n\t\tif (!section) {\n\t\t\treturn;\n\t\t}\n\t\tlet parts = section.split('.');\n\t\tlet node = config;\n\t\twhile (node && parts.length) {\n\t\t\tnode = node[parts.shift()];\n\t\t}\n\n\t\treturn node;\n\t}\n}\n\n@Remotable.MainContext('MainProcessConfigurationServiceHelper')\nexport class MainThreadConfiguration {\n\n\tprivate _configurationService: IConfigurationService;\n\tprivate _toDispose: IDisposable[];\n\tprivate _proxy: ExtHostConfiguration;\n\n\tconstructor(@IConfigurationService configurationService: IConfigurationService,\n\t\t@IThreadService threadService: IThreadService) {\n\n\t\tthis._configurationService = configurationService;\n\t\tthis._proxy = threadService.getRemotable(ExtHostConfiguration);\n\n\t\tthis._toDispose = [];\n\t\tthis._toDispose.push(this._configurationService.addListener2(ConfigurationServiceEventTypes.UPDATED, (e:IConfigurationServiceEvent) => {\n\t\t\tthis._proxy._acceptConfigurationChanged(e.config);\n\t\t}));\n\t\tthis._proxy._acceptConfigurationChanged(this._configurationService.getConfiguration());\n\t}\n\n\tpublic dispose(): void {\n\t\tthis._toDispose = dispose(this._toDispose);\n\t}\n}"]}