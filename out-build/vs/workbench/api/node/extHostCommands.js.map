{"version":3,"file":"vs/workbench/api/node/extHostCommands.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/workbench/api/node/extHostCommands.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {Remotable, IThreadService} from 'vs/platform/thread/common/thread';\nimport {validateConstraint} from 'vs/base/common/types';\nimport {KeybindingsRegistry} from 'vs/platform/keybinding/common/keybindingsRegistry';\nimport {IKeybindingService, ICommandHandlerDescription} from 'vs/platform/keybinding/common/keybindingService';\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport {ExtHostEditors} from 'vs/workbench/api/node/extHostEditors';\nimport * as extHostTypes from 'vs/workbench/api/node/extHostTypes';\nimport * as extHostTypeConverter from 'vs/workbench/api/node/extHostTypeConverters';\nimport {cloneAndChange} from 'vs/base/common/objects';\n\ninterface CommandHandler {\n\tcallback: Function;\n\tthisArg: any;\n\tdescription: ICommandHandlerDescription;\n}\n\n@Remotable.ExtHostContext('ExtHostCommands')\nexport class ExtHostCommands {\n\n\tprivate _commands: { [n: string]: CommandHandler } = Object.create(null);\n\tprivate _proxy: MainThreadCommands;\n\tprivate _extHostEditors: ExtHostEditors;\n\n\tconstructor(@IThreadService threadService: IThreadService) {\n\t\tthis._extHostEditors = threadService.getRemotable(ExtHostEditors);\n\t\tthis._proxy = threadService.getRemotable(MainThreadCommands);\n\t}\n\n\tregisterCommand(id: string, callback: <T>(...args: any[]) => T | Thenable<T>, thisArg?: any, description?: ICommandHandlerDescription): extHostTypes.Disposable {\n\n\t\tif (!id.trim().length) {\n\t\t\tthrow new Error('invalid id');\n\t\t}\n\n\t\tif (this._commands[id]) {\n\t\t\tthrow new Error('command with id already exists');\n\t\t}\n\n\t\tthis._commands[id] = { callback, thisArg, description };\n\t\tthis._proxy.$registerCommand(id);\n\n\t\treturn new extHostTypes.Disposable(() => delete this._commands[id]);\n\t}\n\n\texecuteCommand<T>(id: string, ...args: any[]): Thenable<T> {\n\n\t\tif (this._commands[id]) {\n\t\t\t// we stay inside the extension host and support\n\t\t\t// to pass any kind of parameters around\n\t\t\treturn this.$executeContributedCommand(id, ...args);\n\n\t\t} else {\n\t\t\t// automagically convert some argument types\n\n\t\t\targs = cloneAndChange(args, function(value) {\n\t\t\t\tif (value instanceof extHostTypes.Position) {\n\t\t\t\t\treturn extHostTypeConverter.fromPosition(value);\n\t\t\t\t}\n\t\t\t\tif (value instanceof extHostTypes.Range) {\n\t\t\t\t\treturn extHostTypeConverter.fromRange(value);\n\t\t\t\t}\n\t\t\t\tif (value instanceof extHostTypes.Location) {\n\t\t\t\t\treturn extHostTypeConverter.location.from(value);\n\t\t\t\t}\n\t\t\t\tif (!Array.isArray(value)) {\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn this._proxy.$executeCommand(id, args);\n\t\t}\n\n\t}\n\n\t$executeContributedCommand<T>(id: string, ...args: any[]): Thenable<T> {\n\t\tlet command = this._commands[id];\n\t\tif (!command) {\n\t\t\treturn Promise.reject<T>(`Contributed command '${id}' does not exist.`);\n\t\t}\n\t\ttry {\n\t\t\tlet {callback, thisArg, description} = command;\n\t\t\tif (description) {\n\t\t\t\tfor (let i = 0; i < description.args.length; i++) {\n\t\t\t\t\tvalidateConstraint(args[i], description.args[i].constraint);\n\t\t\t\t}\n\t\t\t}\n\t\t\tlet result = callback.apply(thisArg, args);\n\t\t\treturn Promise.resolve(result);\n\t\t} catch (err) {\n\t\t\t// console.log(err);\n\t\t\t// try {\n\t\t\t// \tconsole.log(toErrorMessage(err));\n\t\t\t// } catch (err) {\n\t\t\t// \t//\n\t\t\t// }\n\t\t\treturn Promise.reject<T>(`Running the contributed command:'${id}' failed.`);\n\t\t}\n\t}\n\n\tgetCommands(filterUnderscoreCommands: boolean = false): Thenable<string[]> {\n\t\treturn this._proxy.$getCommands().then(result => {\n\t\t\tif (filterUnderscoreCommands) {\n\t\t\t\tresult = result.filter(command => command[0] !== '_');\n\t\t\t}\n\t\t\treturn result;\n\t\t});\n\t}\n\n\t$getContributedCommandHandlerDescriptions(): TPromise<{ [id: string]: string | ICommandHandlerDescription }> {\n\t\tconst result: { [id: string]: string | ICommandHandlerDescription } = Object.create(null);\n\t\tfor (let id in this._commands) {\n\t\t\tlet {description} = this._commands[id];\n\t\t\tif (description) {\n\t\t\t\tresult[id] = description;\n\t\t\t}\n\t\t}\n\t\treturn TPromise.as(result);\n\t}\n}\n\n@Remotable.MainContext('MainThreadCommands')\nexport class MainThreadCommands {\n\n\tprivate _threadService: IThreadService;\n\tprivate _keybindingService: IKeybindingService;\n\tprivate _proxy: ExtHostCommands;\n\n\tconstructor( @IThreadService threadService: IThreadService, @IKeybindingService keybindingService: IKeybindingService) {\n\t\tthis._threadService = threadService;\n\t\tthis._keybindingService = keybindingService;\n\t\tthis._proxy = this._threadService.getRemotable(ExtHostCommands);\n\t}\n\n\t$registerCommand(id: string): TPromise<any> {\n\n\t\tKeybindingsRegistry.registerCommandDesc({\n\t\t\tid,\n\t\t\thandler: (serviceAccessor, ...args: any[]) => {\n\t\t\t\treturn this._proxy.$executeContributedCommand(id, ...args);\n\t\t\t},\n\t\t\tweight: undefined,\n\t\t\tcontext: undefined,\n\t\t\twin: undefined,\n\t\t\tmac: undefined,\n\t\t\tlinux: undefined,\n\t\t\tprimary: undefined,\n\t\t\tsecondary: undefined\n\t\t});\n\n\t\treturn undefined;\n\t}\n\n\t$executeCommand<T>(id: string, args: any[]): Thenable<T> {\n\t\treturn this._keybindingService.executeCommand(id, args);\n\t}\n\n\t$getCommands(): Thenable<string[]> {\n\t\treturn TPromise.as(Object.keys(KeybindingsRegistry.getCommands()));\n\t}\n}\n\n\n// --- command doc\n\nKeybindingsRegistry.registerCommandDesc({\n\tid: '_generateCommandsDocumentation',\n\thandler: function(accessor) {\n\t\treturn accessor.get(IThreadService).getRemotable(ExtHostCommands).$getContributedCommandHandlerDescriptions().then(result => {\n\n\t\t\t// add local commands\n\t\t\tconst commands = KeybindingsRegistry.getCommands();\n\t\t\tfor (let id in commands) {\n\t\t\t\tlet {description} = commands[id];\n\t\t\t\tif (description) {\n\t\t\t\t\tresult[id] = description;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// print all as markdown\n\t\t\tconst all: string[] = [];\n\t\t\tfor (let id in result) {\n\t\t\t\tall.push('`' + id + '` - ' + _generateMarkdown(result[id]));\n\t\t\t}\n\t\t\tconsole.log(all.join('\\n'));\n\t\t});\n\t},\n\tcontext: undefined,\n\tweight: KeybindingsRegistry.WEIGHT.builtinExtension(0),\n\tprimary: undefined\n});\n\nfunction _generateMarkdown(description: string | ICommandHandlerDescription): string {\n\tif (typeof description === 'string') {\n\t\treturn description;\n\t} else {\n\t\tlet parts = [description.description];\n\t\tparts.push('\\n\\n');\n\t\tif (description.args) {\n\t\t\tfor (let arg of description.args) {\n\t\t\t\tparts.push(`* _${arg.name}_ ${arg.description || ''}\\n`);\n\t\t\t}\n\t\t}\n\t\tif (description.returns) {\n\t\t\tparts.push(`* _(returns)_ ${description.returns}`);\n\t\t}\n\t\tparts.push('\\n\\n');\n\t\treturn parts.join('');\n\t}\n}\n"]}