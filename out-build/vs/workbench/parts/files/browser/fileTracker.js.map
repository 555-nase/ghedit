{"version":3,"sources":["vs/workbench/parts/files/browser/fileTracker.ts"],"names":[],"mappings":"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","file":"vs/workbench/parts/files/browser/fileTracker.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {IWorkbenchContribution} from 'vs/workbench/common/contributions';\nimport errors = require('vs/base/common/errors');\nimport nls = require('vs/nls');\nimport {MIME_UNKNOWN} from 'vs/base/common/mime';\nimport URI from 'vs/base/common/uri';\nimport paths = require('vs/base/common/paths');\nimport {DiffEditorInput} from 'vs/workbench/common/editor/diffEditorInput';\nimport {EditorInput, EditorOptions} from 'vs/workbench/common/editor';\nimport {BaseEditor} from 'vs/workbench/browser/parts/editor/baseEditor';\nimport {BaseTextEditor} from 'vs/workbench/browser/parts/editor/textEditor';\nimport {LocalFileChangeEvent, VIEWLET_ID, BINARY_FILE_EDITOR_ID, EventType as FileEventType, IWorkingFilesModel, ITextFileService, AutoSaveMode} from 'vs/workbench/parts/files/common/files';\nimport {FileChangeType, FileChangesEvent, EventType as CommonFileEventType} from 'vs/platform/files/common/files';\nimport {FileEditorInput} from 'vs/workbench/parts/files/browser/editors/fileEditorInput';\nimport {IFrameEditorInput} from 'vs/workbench/common/editor/iframeEditorInput';\nimport {State, TextFileEditorModel, CACHE} from 'vs/workbench/parts/files/common/editors/textFileEditorModel';\nimport {IFrameEditor} from 'vs/workbench/browser/parts/editor/iframeEditor';\nimport {EventType as WorkbenchEventType, EditorInputEvent, UntitledEditorEvent} from 'vs/workbench/common/events';\nimport {IUntitledEditorService} from 'vs/workbench/services/untitled/common/untitledEditorService';\nimport {IWorkbenchEditorService} from 'vs/workbench/services/editor/common/editorService';\nimport {IQuickOpenService} from 'vs/workbench/services/quickopen/common/quickOpenService';\nimport {IActivityService, NumberBadge} from 'vs/workbench/services/activity/common/activityService';\nimport {IEditorInput} from 'vs/platform/editor/common/editor';\nimport {IEventService} from 'vs/platform/event/common/event';\nimport {IInstantiationService} from 'vs/platform/instantiation/common/instantiation';\n\n// This extension tracks files for changes to update editors and inputs accordingly.\nexport class FileTracker implements IWorkbenchContribution {\n\n\t// Delay in ms that we wait at minimum before we update a model from a file change event.\n\t// This reduces the chance that a save from the client triggers an update of the editor.\n\tprivate static FILE_CHANGE_UPDATE_DELAY = 2000;\n\n\tprivate lastDirtyCount: number;\n\tprivate workingFiles: IWorkingFilesModel;\n\n\tprivate toUnbind: { (): void; }[];\n\n\tconstructor(\n\t\t@IEventService private eventService: IEventService,\n\t\t@IQuickOpenService private quickOpenService: IQuickOpenService,\n\t\t@IWorkbenchEditorService private editorService: IWorkbenchEditorService,\n\t\t@IActivityService private activityService: IActivityService,\n\t\t@ITextFileService private textFileService: ITextFileService,\n\t\t@IInstantiationService private instantiationService: IInstantiationService,\n\t\t@IUntitledEditorService private untitledEditorService: IUntitledEditorService\n\t) {\n\t\tthis.toUnbind = [];\n\t\tthis.workingFiles = textFileService.getWorkingFilesModel();\n\n\t\tthis.registerListeners();\n\t}\n\n\tpublic getId(): string {\n\t\treturn 'vs.files.filetracker';\n\t}\n\n\tprivate registerListeners(): void {\n\n\t\t// Update editors and inputs from local changes and saves\n\t\tthis.toUnbind.push(this.eventService.addListener(WorkbenchEventType.EDITOR_INPUT_CHANGED, (e: EditorInputEvent) => this.onEditorInputChanged(e)));\n\t\tthis.toUnbind.push(this.eventService.addListener(WorkbenchEventType.UNTITLED_FILE_DELETED, (e: UntitledEditorEvent) => this.onUntitledEditorDeleted(e)));\n\t\tthis.toUnbind.push(this.eventService.addListener(WorkbenchEventType.UNTITLED_FILE_DIRTY, (e: UntitledEditorEvent) => this.onUntitledEditorDirty(e)));\n\t\tthis.toUnbind.push(this.eventService.addListener(FileEventType.FILE_DIRTY, (e: LocalFileChangeEvent) => this.onTextFileDirty(e)));\n\t\tthis.toUnbind.push(this.eventService.addListener(FileEventType.FILE_SAVING, (e: LocalFileChangeEvent) => this.onTextFileSaving(e)));\n\t\tthis.toUnbind.push(this.eventService.addListener(FileEventType.FILE_SAVE_ERROR, (e: LocalFileChangeEvent) => this.onTextFileSaveError(e)));\n\t\tthis.toUnbind.push(this.eventService.addListener(FileEventType.FILE_SAVED, (e: LocalFileChangeEvent) => this.onTextFileSaved(e)));\n\t\tthis.toUnbind.push(this.eventService.addListener(FileEventType.FILE_REVERTED, (e: LocalFileChangeEvent) => this.onTextFileReverted(e)));\n\t\tthis.toUnbind.push(this.eventService.addListener('files.internal:fileChanged', (e: LocalFileChangeEvent) => this.onLocalFileChange(e)));\n\n\t\t// Update editors and inputs from disk changes\n\t\tthis.toUnbind.push(this.eventService.addListener(CommonFileEventType.FILE_CHANGES, (e: FileChangesEvent) => this.onFileChanges(e)));\n\t}\n\n\tprivate onEditorInputChanged(e: EditorInputEvent): void {\n\t\tthis.disposeTextFileModels();\n\t}\n\n\tprivate onTextFileDirty(e: LocalFileChangeEvent): void {\n\t\tthis.emitInputStateChangeEvent(e.getAfter().resource);\n\n\t\tif (this.textFileService.getAutoSaveMode() !== AutoSaveMode.AFTER_SHORT_DELAY) {\n\t\t\tthis.updateActivityBadge(); // no indication needed when auto save is enabled for short delay\n\t\t}\n\t}\n\n\tprivate onTextFileSaving(e: LocalFileChangeEvent): void {\n\t\tthis.emitInputStateChangeEvent(e.getAfter().resource);\n\t}\n\n\tprivate onTextFileSaveError(e: LocalFileChangeEvent): void {\n\t\tthis.emitInputStateChangeEvent(e.getAfter().resource);\n\t\tthis.updateActivityBadge();\n\t}\n\n\tprivate onTextFileSaved(e: LocalFileChangeEvent): void {\n\t\tthis.emitInputStateChangeEvent(e.getAfter().resource);\n\n\t\tif (this.lastDirtyCount > 0) {\n\t\t\tthis.updateActivityBadge();\n\t\t}\n\t}\n\n\tprivate onTextFileReverted(e: LocalFileChangeEvent): void {\n\t\tthis.emitInputStateChangeEvent(e.getAfter().resource);\n\n\t\tif (this.lastDirtyCount > 0) {\n\t\t\tthis.updateActivityBadge();\n\t\t}\n\t}\n\n\tprivate onUntitledEditorDirty(e: UntitledEditorEvent): void {\n\t\tlet input = this.untitledEditorService.get(e.resource);\n\t\tif (input) {\n\t\t\tthis.eventService.emit(WorkbenchEventType.EDITOR_INPUT_STATE_CHANGED, new EditorInputEvent(input));\n\t\t}\n\n\t\tthis.updateActivityBadge();\n\t}\n\n\tprivate onUntitledEditorDeleted(e: UntitledEditorEvent): void {\n\t\tlet input = this.untitledEditorService.get(e.resource);\n\t\tif (input) {\n\t\t\tthis.eventService.emit(WorkbenchEventType.EDITOR_INPUT_STATE_CHANGED, new EditorInputEvent(input));\n\t\t}\n\n\t\tif (this.lastDirtyCount > 0) {\n\t\t\tthis.updateActivityBadge();\n\t\t}\n\t}\n\n\tprivate updateActivityBadge(): void {\n\t\tlet dirtyCount = this.textFileService.getDirty().length;\n\t\tthis.lastDirtyCount = dirtyCount;\n\t\tif (dirtyCount > 0) {\n\t\t\tthis.activityService.showActivity(VIEWLET_ID, new NumberBadge(dirtyCount, (num) => nls.localize('dirtyFiles', \"{0} unsaved files\", dirtyCount)), 'explorer-viewlet-label');\n\t\t} else {\n\t\t\tthis.activityService.clearActivity(VIEWLET_ID);\n\t\t}\n\t}\n\n\tprivate emitInputStateChangeEvent(resource: URI): void {\n\n\t\t// Find all file editor inputs that are open from the given file resource and emit a editor input state change event.\n\t\t// We could do all of this within the file editor input but having all the file change listeners in\n\t\t// one place is more elegant and keeps the logic together at once place.\n\t\tlet editors = this.editorService.getVisibleEditors();\n\t\teditors.forEach((editor) => {\n\t\t\tlet input = editor.input;\n\t\t\tif (input instanceof DiffEditorInput) {\n\t\t\t\tinput = (<DiffEditorInput>input).getModifiedInput();\n\t\t\t}\n\n\t\t\t// File Editor Input\n\t\t\tif (input instanceof FileEditorInput) {\n\t\t\t\tlet fileInput = <FileEditorInput>input;\n\t\t\t\tif (fileInput.getResource().toString() === resource.toString()) {\n\t\t\t\t\tlet inputEvent = editor.input instanceof DiffEditorInput ? <DiffEditorInput>editor.input : fileInput; // make sure to still send around the input from the diff editor if given\n\n\t\t\t\t\tthis.eventService.emit(WorkbenchEventType.EDITOR_INPUT_STATE_CHANGED, new EditorInputEvent(inputEvent));\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\t// Note: there is some duplication with the other file event handler below. Since we cannot always rely on the disk events\n\t// carrying all necessary data in all environments, we also use the local file events to make sure operations are handled.\n\t// In any case there is no guarantee if the local event is fired first or the disk one. Thus, code must handle the case\n\t// that the event ordering is random as well as might not carry all information needed.\n\tprivate onLocalFileChange(e: LocalFileChangeEvent): void {\n\n\t\t// Handle moves specially when file is opened\n\t\tif (e.gotMoved()) {\n\t\t\tlet before = e.getBefore();\n\t\t\tlet after = e.getAfter();\n\n\t\t\tthis.handleMovedFileInVisibleEditors(before ? before.resource : null, after ? after.resource : null, after ? after.mime : null);\n\t\t}\n\n\t\t// Dispose all known inputs passed on resource\n\t\tlet oldFile = e.getBefore();\n\t\tif ((e.gotMoved() || e.gotDeleted())) {\n\t\t\tthis.disposeAll(oldFile.resource, this.quickOpenService.getEditorHistory());\n\t\t}\n\t}\n\n\tprivate onFileChanges(e: FileChangesEvent): void {\n\n\t\t// Dispose inputs that got deleted\n\t\tlet allDeleted = e.getDeleted();\n\t\tif (allDeleted && allDeleted.length > 0) {\n\t\t\tallDeleted.forEach((deleted) => {\n\t\t\t\tthis.disposeAll(deleted.resource, this.quickOpenService.getEditorHistory());\n\t\t\t});\n\t\t}\n\n\t\t// Dispose models that got changed and are not visible. We do this because otherwise\n\t\t// cached file models will be stale from the contents on disk.\n\t\te.getUpdated()\n\t\t\t.map((u) => CACHE.get(u.resource))\n\t\t\t.filter((model) => {\n\t\t\t\tlet canDispose = this.canDispose(model);\n\t\t\t\tif (!canDispose) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tif (new Date().getTime() - model.getLastDirtyTime() < FileTracker.FILE_CHANGE_UPDATE_DELAY) {\n\t\t\t\t\treturn false; // this is a weak check to see if the change came from outside the editor or not\n\t\t\t\t}\n\n\t\t\t\treturn true; // ok boss\n\t\t\t})\n\t\t\t.forEach((model) => CACHE.dispose(model.getResource()));\n\n\t\t// Update inputs that got updated\n\t\tlet editors = this.editorService.getVisibleEditors();\n\t\teditors.forEach((editor) => {\n\t\t\tlet input = editor.input;\n\t\t\tif (input instanceof DiffEditorInput) {\n\t\t\t\tinput = this.getMatchingFileEditorInputFromDiff(<DiffEditorInput>input, e);\n\t\t\t}\n\n\t\t\t// File Editor Input\n\t\t\tif (input instanceof FileEditorInput) {\n\t\t\t\tlet fileInput = <FileEditorInput>input;\n\t\t\t\tlet fileInputResource = fileInput.getResource();\n\n\t\t\t\t// Input got added or updated, so check for model and update\n\t\t\t\t// Note: we also consider the added event because it could be that a file was added\n\t\t\t\t// and updated right after.\n\t\t\t\tif (e.contains(fileInputResource, FileChangeType.UPDATED) || e.contains(fileInputResource, FileChangeType.ADDED)) {\n\t\t\t\t\tlet textModel = CACHE.get(fileInputResource);\n\n\t\t\t\t\t// Text file: check for last dirty time\n\t\t\t\t\tif (textModel) {\n\t\t\t\t\t\tlet state = textModel.getState();\n\n\t\t\t\t\t\t// We only ever update models that are in good saved state\n\t\t\t\t\t\tif (state === State.SAVED) {\n\t\t\t\t\t\t\tlet lastDirtyTime = textModel.getLastDirtyTime();\n\n\t\t\t\t\t\t\t// Force a reopen of the input if this change came in later than our wait interval before we consider it\n\t\t\t\t\t\t\tif (new Date().getTime() - lastDirtyTime > FileTracker.FILE_CHANGE_UPDATE_DELAY) {\n\t\t\t\t\t\t\t\tlet codeEditor = (<BaseTextEditor>editor).getControl();\n\t\t\t\t\t\t\t\tlet viewState = codeEditor.saveViewState();\n\t\t\t\t\t\t\t\tlet currentMtime = textModel.getLastModifiedTime(); // optimize for the case where the file did actually not change\n\t\t\t\t\t\t\t\ttextModel.load().done(() => {\n\t\t\t\t\t\t\t\t\tif (textModel.getLastModifiedTime() !== currentMtime && this.isEditorShowingPath(<BaseEditor>editor, textModel.getResource())) {\n\t\t\t\t\t\t\t\t\t\tcodeEditor.restoreViewState(viewState);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}, errors.onUnexpectedError);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Binary file: always update\n\t\t\t\t\telse if (editor.getId() === BINARY_FILE_EDITOR_ID) {\n\t\t\t\t\t\tlet editorOptions = new EditorOptions();\n\t\t\t\t\t\teditorOptions.forceOpen = true;\n\t\t\t\t\t\teditorOptions.preserveFocus = true;\n\n\t\t\t\t\t\tthis.editorService.openEditor(editor.input, editorOptions, editor.position).done(null, errors.onUnexpectedError);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// IFrame Editor Input\n\t\t\telse if (input instanceof IFrameEditorInput) {\n\t\t\t\tlet iFrameInput = <IFrameEditorInput>input;\n\t\t\t\tif (e.contains(iFrameInput.getResource(), FileChangeType.UPDATED)) {\n\t\t\t\t\t(<IFrameEditor>editor).reload();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate isEditorShowingPath(editor: BaseEditor, resource: URI): boolean {\n\n\t\t// Only relevant if Editor is visible\n\t\tif (!editor.isVisible()) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Only relevant if Input is set\n\t\tlet input = editor.getInput();\n\t\tif (!input) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Support diff editor input too\n\t\tif (input instanceof DiffEditorInput) {\n\t\t\tinput = (<DiffEditorInput>input).getModifiedInput();\n\t\t}\n\n\t\treturn input instanceof FileEditorInput && (<FileEditorInput>input).getResource().toString() === resource.toString();\n\t}\n\n\tprivate handleMovedFileInVisibleEditors(oldResource: URI, newResource: URI, mimeHint?: string): void {\n\t\tlet editors = this.editorService.getVisibleEditors();\n\t\teditors.forEach((editor) => {\n\t\t\tlet input = editor.input;\n\t\t\tif (input instanceof DiffEditorInput) {\n\t\t\t\tinput = (<DiffEditorInput>input).getModifiedInput();\n\t\t\t}\n\n\t\t\tlet inputResource: URI;\n\t\t\tif (input instanceof FileEditorInput) {\n\t\t\t\tinputResource = (<FileEditorInput>input).getResource();\n\t\t\t} else if (input instanceof IFrameEditorInput) {\n\t\t\t\tinputResource = (<IFrameEditorInput>input).getResource();\n\t\t\t}\n\n\t\t\t// Editor Input with associated Resource\n\t\t\tif (inputResource) {\n\n\t\t\t\t// Update Editor if file (or any parent of the input) got renamed or moved\n\t\t\t\tlet updateInput = false;\n\t\t\t\tif (paths.isEqualOrParent(inputResource.fsPath, oldResource.fsPath)) {\n\t\t\t\t\tupdateInput = true;\n\t\t\t\t}\n\n\t\t\t\t// Do update from move\n\t\t\t\tif (updateInput) {\n\t\t\t\t\tlet reopenFileResource: URI;\n\t\t\t\t\tif (oldResource.toString() === inputResource.toString()) {\n\t\t\t\t\t\treopenFileResource = newResource;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlet index = inputResource.fsPath.indexOf(oldResource.fsPath);\n\t\t\t\t\t\treopenFileResource = URI.file(paths.join(newResource.fsPath, inputResource.fsPath.substr(index + oldResource.fsPath.length + 1))); // update the path by changing the old path value to the new one\n\t\t\t\t\t}\n\n\t\t\t\t\tlet editorInput: EditorInput;\n\n\t\t\t\t\tlet editorOptions = new EditorOptions();\n\t\t\t\t\teditorOptions.preserveFocus = true;\n\n\t\t\t\t\t// Reopen File Input\n\t\t\t\t\tif (input instanceof FileEditorInput) {\n\t\t\t\t\t\teditorInput = this.instantiationService.createInstance(FileEditorInput, reopenFileResource, mimeHint || MIME_UNKNOWN, void 0);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Reopen IFrame Input\n\t\t\t\t\telse if (input instanceof IFrameEditorInput) {\n\t\t\t\t\t\tlet iFrameInput = <IFrameEditorInput>input;\n\n\t\t\t\t\t\teditorInput = iFrameInput.createNew(reopenFileResource);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (editorInput) {\n\t\t\t\t\t\tthis.editorService.openEditor(editorInput, editorOptions, editor.position).done(null, errors.onUnexpectedError);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate getMatchingFileEditorInputFromDiff(input: DiffEditorInput, deletedResource: URI): FileEditorInput;\n\tprivate getMatchingFileEditorInputFromDiff(input: DiffEditorInput, updatedFiles: FileChangesEvent): FileEditorInput;\n\tprivate getMatchingFileEditorInputFromDiff(input: DiffEditorInput, arg: any): FileEditorInput {\n\n\t\t// First try modifiedInput\n\t\tlet modifiedInput = input.getModifiedInput();\n\t\tlet res = this.getMatchingFileEditorInputFromInput(modifiedInput, arg);\n\t\tif (res) {\n\t\t\treturn res;\n\t\t}\n\n\t\t// Second try originalInput\n\t\tlet originalInput = input.getOriginalInput();\n\t\treturn this.getMatchingFileEditorInputFromInput(originalInput, arg);\n\t}\n\n\tprivate getMatchingFileEditorInputFromInput(input: EditorInput, deletedResource: URI): FileEditorInput;\n\tprivate getMatchingFileEditorInputFromInput(input: EditorInput, updatedFiles: FileChangesEvent): FileEditorInput;\n\tprivate getMatchingFileEditorInputFromInput(input: EditorInput, arg: any): FileEditorInput {\n\t\tif (input instanceof FileEditorInput) {\n\t\t\tif (arg instanceof URI) {\n\t\t\t\tlet deletedResource = <URI>arg;\n\t\t\t\tif (this.containsResource(input, deletedResource)) {\n\t\t\t\t\treturn input;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlet updatedFiles = <FileChangesEvent>arg;\n\t\t\t\tif (updatedFiles.contains(input.getResource(), FileChangeType.UPDATED)) {\n\t\t\t\t\treturn input;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tprivate disposeAll(deletedResource: URI, history: IEditorInput[]): void {\n\t\tif (this.textFileService.isDirty(deletedResource)) {\n\t\t\treturn; // never dispose dirty resources\n\t\t}\n\n\t\t// Add existing clients matching resource\n\t\tlet inputsContainingPath: EditorInput[] = FileEditorInput.getAll(deletedResource);\n\n\t\t// Add those from history as well\n\t\tfor (let i = 0; i < history.length; i++) {\n\t\t\tlet element = history[i];\n\n\t\t\t// File Input\n\t\t\tif (element instanceof FileEditorInput && this.containsResource(<FileEditorInput>element, deletedResource)) {\n\t\t\t\tinputsContainingPath.push(<FileEditorInput>element);\n\t\t\t}\n\n\t\t\t// IFrame Input\n\t\t\telse if (element instanceof IFrameEditorInput && this.containsResource(<IFrameEditorInput>element, deletedResource)) {\n\t\t\t\tinputsContainingPath.push(<IFrameEditorInput>element);\n\t\t\t}\n\t\t}\n\n\t\t// Add those from visible editors too\n\t\tlet editors = this.editorService.getVisibleEditors();\n\t\teditors.forEach((editor) => {\n\t\t\tlet input = editor.input;\n\t\t\tif (input instanceof DiffEditorInput) {\n\t\t\t\tinput = this.getMatchingFileEditorInputFromDiff(<DiffEditorInput>input, deletedResource);\n\t\t\t\tif (input instanceof FileEditorInput) {\n\t\t\t\t\tinputsContainingPath.push(<FileEditorInput>input);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// File Editor Input\n\t\t\telse if (input instanceof FileEditorInput && this.containsResource(<FileEditorInput>input, deletedResource)) {\n\t\t\t\tinputsContainingPath.push(<FileEditorInput>input);\n\t\t\t}\n\n\t\t\t// IFrame Input\n\t\t\telse if (input instanceof IFrameEditorInput && this.containsResource(<IFrameEditorInput>input, deletedResource)) {\n\t\t\t\tinputsContainingPath.push(<IFrameEditorInput>input);\n\t\t\t}\n\t\t});\n\n\t\t// Dispose all\n\t\tinputsContainingPath.forEach((input) => {\n\t\t\tif (!input.isDisposed()) {\n\t\t\t\tif (input instanceof FileEditorInput) {\n\t\t\t\t\tlet fileInputToDispose = <FileEditorInput>input;\n\t\t\t\t\tfileInputToDispose.dispose(true /* force */);\n\t\t\t\t} else {\n\t\t\t\t\tinput.dispose();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate containsResource(input: FileEditorInput, resource: URI): boolean;\n\tprivate containsResource(input: IFrameEditorInput, resource: URI): boolean;\n\tprivate containsResource(input: EditorInput, resource: URI): boolean {\n\t\tlet fileResource: URI;\n\t\tif (input instanceof FileEditorInput) {\n\t\t\tfileResource = (<FileEditorInput>input).getResource();\n\t\t} else {\n\t\t\tfileResource = (<IFrameEditorInput>input).getResource();\n\t\t}\n\n\t\tif (paths.isEqualOrParent(fileResource.fsPath, resource.fsPath)) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tprivate disposeTextFileModels(): void {\n\n\t\t// To not grow our text file model cache infinitly, we dispose models that\n\t\t// are not showing up in any editor and are not in the working file set or dirty.\n\n\t\t// Get all cached file models\n\t\tCACHE.getAll()\n\n\t\t// Only take text file models and remove those that are under working files or opened\n\t\t\t.filter((model) => !this.workingFiles.hasEntry(model.getResource()) && this.canDispose(model))\n\n\t\t// Dispose\n\t\t\t.forEach((model) => CACHE.dispose(model.getResource()));\n\t}\n\n\tprivate canDispose(textModel: TextFileEditorModel): boolean {\n\t\tif (!textModel) {\n\t\t\treturn false; // we need data!\n\t\t}\n\n\t\tif (textModel.textEditorModel && textModel.textEditorModel.isAttachedToEditor()) {\n\t\t\treturn false; // never dispose when attached to editor\n\t\t}\n\n\t\tif (textModel.getState() !== State.SAVED) {\n\t\t\treturn false; // never dispose unsaved models\n\t\t}\n\n\t\tif (this.editorService.getVisibleEditors().some(e => {\n\t\t\tif (e.input instanceof IFrameEditorInput) {\n\t\t\t\tlet iFrameInputResource = (<IFrameEditorInput>e.input).getResource();\n\n\t\t\t\treturn iFrameInputResource && iFrameInputResource.toString() === textModel.getResource().toString();\n\t\t\t}\n\n\t\t\treturn false;\n\t\t})) {\n\t\t\treturn false; // never dispose models that are used in iframe inputs\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tpublic dispose(): void {\n\t\twhile (this.toUnbind.length) {\n\t\t\tthis.toUnbind.pop()();\n\t\t}\n\t}\n}"]}