{"version":3,"sources":["vs/workbench/parts/files/browser/files.contribution.ts"],"names":[],"mappings":"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","file":"vs/workbench/parts/files/browser/files.contribution.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport 'vs/css!./media/files.contribution';\n\nimport URI from 'vs/base/common/uri';\nimport {ViewletRegistry, Extensions as ViewletExtensions, ViewletDescriptor, ToggleViewletAction} from 'vs/workbench/browser/viewlet';\nimport nls = require('vs/nls');\nimport {SyncActionDescriptor} from 'vs/platform/actions/common/actions';\nimport {Registry} from 'vs/platform/platform';\nimport {IQuickOpenService} from 'vs/workbench/services/quickopen/common/quickOpenService';\nimport {QuickOpenAction} from 'vs/workbench/browser/actions/quickOpenAction';\nimport {IConfigurationRegistry, Extensions as ConfigurationExtensions} from 'vs/platform/configuration/common/configurationRegistry';\nimport {IWorkbenchActionRegistry, Extensions as ActionExtensions} from 'vs/workbench/common/actionRegistry';\nimport {IWorkbenchContributionsRegistry, Extensions as WorkbenchExtensions} from 'vs/workbench/common/contributions';\nimport {IEditorRegistry, Extensions as EditorExtensions, IEditorInputFactory} from 'vs/workbench/browser/parts/editor/baseEditor';\nimport {EditorInput, IFileEditorInput} from 'vs/workbench/common/editor';\nimport {QuickOpenHandlerDescriptor, IQuickOpenRegistry, Extensions as QuickOpenExtensions} from 'vs/workbench/browser/quickopen';\nimport {FileEditorDescriptor} from 'vs/workbench/parts/files/browser/files';\nimport {AutoSaveConfiguration, SUPPORTED_ENCODINGS} from 'vs/platform/files/common/files';\nimport {FILE_EDITOR_INPUT_ID, VIEWLET_ID} from 'vs/workbench/parts/files/common/files';\nimport {FileTracker} from 'vs/workbench/parts/files/browser/fileTracker';\nimport {SaveParticipant} from 'vs/workbench/parts/files/common/editors/saveParticipant';\nimport {FileEditorInput} from 'vs/workbench/parts/files/browser/editors/fileEditorInput';\nimport {TextFileEditor} from 'vs/workbench/parts/files/browser/editors/textFileEditor';\nimport {BinaryFileEditor} from 'vs/workbench/parts/files/browser/editors/binaryFileEditor';\nimport {IInstantiationService} from 'vs/platform/instantiation/common/instantiation';\nimport {SyncDescriptor, AsyncDescriptor} from 'vs/platform/instantiation/common/descriptors';\nimport {IKeybindings} from 'vs/platform/keybinding/common/keybindingService';\nimport {IViewletService} from 'vs/workbench/services/viewlet/common/viewletService';\nimport {IWorkbenchEditorService} from 'vs/workbench/services/editor/common/editorService';\nimport {KeyMod, KeyCode} from 'vs/base/common/keyCodes';\nimport * as platform from 'vs/base/common/platform';\n\n// Viewlet Action\nexport class OpenExplorerViewletAction extends ToggleViewletAction {\n\tpublic static ID = VIEWLET_ID;\n\tpublic static LABEL = nls.localize('showExplorerViewlet', \"Show Explorer\");\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@IViewletService viewletService: IViewletService,\n\t\t@IWorkbenchEditorService editorService: IWorkbenchEditorService\n\t) {\n\t\tsuper(id, label, VIEWLET_ID, viewletService, editorService);\n\t}\n}\n\n// Register Viewlet\n(<ViewletRegistry>Registry.as(ViewletExtensions.Viewlets)).registerViewlet(new ViewletDescriptor(\n\t'vs/workbench/parts/files/browser/explorerViewlet',\n\t'ExplorerViewlet',\n\tVIEWLET_ID,\n\tnls.localize('explore', \"Explorer\"),\n\t'explore',\n\t0\n));\n\n(<ViewletRegistry>Registry.as(ViewletExtensions.Viewlets)).setDefaultViewletId(VIEWLET_ID);\n\nlet openViewletKb: IKeybindings = {\n\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KEY_E\n};\n\n// Register Action to Open Viewlet\nconst registry = <IWorkbenchActionRegistry>Registry.as(ActionExtensions.WorkbenchActions);\nregistry.registerWorkbenchAction(\n\tnew SyncActionDescriptor(OpenExplorerViewletAction, OpenExplorerViewletAction.ID, OpenExplorerViewletAction.LABEL, openViewletKb),\n\tnls.localize('view', \"View\")\n);\n\n// Register file editors\n(<IEditorRegistry>Registry.as(EditorExtensions.Editors)).registerEditor(\n\tnew FileEditorDescriptor(\n\t\tTextFileEditor.ID, // explicit dependency because we don't want these editors lazy loaded\n\t\tnls.localize('textFileEditor', \"Text File Editor\"),\n\t\t'vs/workbench/parts/files/browser/editors/textFileEditor',\n\t\t'TextFileEditor',\n\t\t[\n\t\t\t'text/*',\n\n\t\t\t// In case the mime type is unknown, we prefer the text file editor over the binary editor to leave a chance\n\t\t\t// of opening a potential text file properly. The resolution of the file in the text file editor will fail\n\t\t\t// early on in case the file is actually binary, to prevent downloading a potential large binary file.\n\t\t\t'application/unknown'\n\t\t]\n\t),\n\t[\n\t\tnew SyncDescriptor<EditorInput>(FileEditorInput)\n\t]\n);\n\n(<IEditorRegistry>Registry.as(EditorExtensions.Editors)).registerEditor(\n\tnew FileEditorDescriptor(\n\t\tBinaryFileEditor.ID, // explicit dependency because we don't want these editors lazy loaded\n\t\tnls.localize('binaryFileEditor', \"Binary File Editor\"),\n\t\t'vs/workbench/parts/files/browser/editors/binaryFileEditor',\n\t\t'BinaryFileEditor',\n\t\t[\n\t\t\t'image/*',\n\t\t\t'application/pdf',\n\t\t\t'audio/*',\n\t\t\t'video/*',\n\t\t\t'application/octet-stream'\n\t\t]\n\t),\n\t[\n\t\tnew SyncDescriptor<EditorInput>(FileEditorInput)\n\t]\n);\n\n// Register default file input handler\n// Note: because of service injection, the descriptor needs to have the exact count\n// of arguments as the FileEditorInput constructor. Otherwise when creating an\n// instance through the instantiation service he will inject the services wrong!\nlet descriptor = new AsyncDescriptor<IFileEditorInput>('vs/workbench/parts/files/browser/editors/fileEditorInput', 'FileEditorInput', /* DO NOT REMOVE */ void 0, /* DO NOT REMOVE */ void 0, /* DO NOT REMOVE */ void 0);\n(<IEditorRegistry>Registry.as(EditorExtensions.Editors)).registerDefaultFileInput(descriptor);\n\ninterface ISerializedFileInput {\n\tresource: string;\n\tmime: string;\n}\n\n// Register Editor Input Factory\nclass FileEditorInputFactory implements IEditorInputFactory {\n\n\tconstructor() { }\n\n\tpublic serialize(editorInput: EditorInput): string {\n\t\tlet fileEditorInput = <FileEditorInput>editorInput;\n\t\tlet fileInput: ISerializedFileInput = {\n\t\t\tresource: fileEditorInput.getResource().toString(),\n\t\t\tmime: fileEditorInput.getMime()\n\t\t};\n\n\t\treturn JSON.stringify(fileInput);\n\t}\n\n\tpublic deserialize(instantiationService: IInstantiationService, serializedEditorInput: string): EditorInput {\n\t\tlet fileInput: ISerializedFileInput = JSON.parse(serializedEditorInput);\n\n\t\treturn instantiationService.createInstance(FileEditorInput, URI.parse(fileInput.resource), fileInput.mime, void 0);\n\t}\n}\n\n(<IEditorRegistry>Registry.as(EditorExtensions.Editors)).registerEditorInputFactory(FILE_EDITOR_INPUT_ID, FileEditorInputFactory);\n\n// Register File Tracker\n(<IWorkbenchContributionsRegistry>Registry.as(WorkbenchExtensions.Workbench)).registerWorkbenchContribution(\n\tFileTracker\n);\n\n// Register Save Participant\n(<IWorkbenchContributionsRegistry>Registry.as(WorkbenchExtensions.Workbench)).registerWorkbenchContribution(\n\tSaveParticipant\n);\n\n// Configuration\nlet configurationRegistry = <IConfigurationRegistry>Registry.as(ConfigurationExtensions.Configuration);\n\nconfigurationRegistry.registerConfiguration({\n\t'id': 'files',\n\t'order': 7,\n\t'title': nls.localize('filesConfigurationTitle', \"Files configuration\"),\n\t'type': 'object',\n\t'properties': {\n\t\t'files.exclude': {\n\t\t\t'type': 'object',\n\t\t\t'description': nls.localize('exclude', \"Configure glob patterns for excluding files and folders.\"),\n\t\t\t'default': { '**/.git': true, '**/.DS_Store': true },\n\t\t\t'additionalProperties': {\n\t\t\t\t'anyOf': [\n\t\t\t\t\t{\n\t\t\t\t\t\t'type': 'boolean',\n\t\t\t\t\t\t'description': nls.localize('files.exclude.boolean', \"The glob pattern to match file paths against. Set to true or false to enable or disable the pattern.\"),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t'type': 'object',\n\t\t\t\t\t\t'properties': {\n\t\t\t\t\t\t\t'when': {\n\t\t\t\t\t\t\t\t'type': 'string', // expression ({ \"**/*.js\": { \"when\": \"$(basename).js\" } })\n\t\t\t\t\t\t\t\t'pattern': '\\\\w*\\\\$\\\\(basename\\\\)\\\\w*',\n\t\t\t\t\t\t\t\t'default': '$(basename).ext',\n\t\t\t\t\t\t\t\t'description': nls.localize('files.exclude.when', 'Additional check on the siblings of a matching file. Use $(basename) as variable for the matching file name.')\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t},\n\t\t'files.associations': {\n\t\t\t'type': 'object',\n\t\t\t'description': nls.localize('associations', \"Configure file associations to languages (e.g. \\\"*.extension\\\": \\\"html\\\"). These have precedence over the default associations of the languages installed.\"),\n\t\t},\n\t\t'files.encoding': {\n\t\t\t'type': 'string',\n\t\t\t'enum': Object.keys(SUPPORTED_ENCODINGS),\n\t\t\t'default': 'utf8',\n\t\t\t'description': nls.localize('encoding', \"The default character set encoding to use when reading and writing files.\"),\n\t\t},\n\t\t'files.eol': {\n\t\t\t'type': 'string',\n\t\t\t'enum': [\n\t\t\t\t'\\n',\n\t\t\t\t'\\r\\n'\n\t\t\t],\n\t\t\t'default': (platform.isLinux || platform.isMacintosh) ? '\\n' : '\\r\\n',\n\t\t\t'description': nls.localize('eol', \"The default end of line character.\"),\n\t\t},\n\t\t'files.trimTrailingWhitespace': {\n\t\t\t'type': 'boolean',\n\t\t\t'default': false,\n\t\t\t'description': nls.localize('trimTrailingWhitespace', \"When enabled, will trim trailing whitespace when you save a file.\")\n\t\t},\n\t\t'files.autoSave': {\n\t\t\t'type': 'string',\n\t\t\t'enum': [AutoSaveConfiguration.OFF, AutoSaveConfiguration.AFTER_DELAY, AutoSaveConfiguration.ON_FOCUS_CHANGE],\n\t\t\t'default': AutoSaveConfiguration.OFF,\n\t\t\t'description': nls.localize('autoSave', \"Controls auto save of dirty files. Accepted values:  \\\"{0}\\\", \\\"{1}\\\", \\\"{2}\\\". If set to \\\"{3}\\\" you can configure the delay in \\\"files.autoSaveDelay\\\".\", AutoSaveConfiguration.OFF, AutoSaveConfiguration.AFTER_DELAY, AutoSaveConfiguration.ON_FOCUS_CHANGE, AutoSaveConfiguration.AFTER_DELAY)\n\t\t},\n\t\t'files.autoSaveDelay': {\n\t\t\t'type': 'number',\n\t\t\t'default': 1000,\n\t\t\t'description': nls.localize('autoSaveDelay', \"Controls the delay in ms after which a dirty file is saved automatically. Only applies when \\\"files.autoSave\\\" is set to \\\"{0}\\\"\", AutoSaveConfiguration.AFTER_DELAY)\n\t\t},\n\t\t'files.watcherExclude': {\n\t\t\t'type': 'object',\n\t\t\t'default': (platform.isLinux || platform.isMacintosh) ? { '**/.git/objects/**': true, '**/node_modules/**': true } : { '**/.git/objects/**': true },\n\t\t\t'description': nls.localize('watcherExclude', \"Configure glob patterns of file paths to exclude from file watching. Changing this setting requires a restart. When you experience Code consuming lots of cpu time on startup, you can exclude large folders to reduce the initial load.\")\n\t\t}\n\t}\n});\n\nconfigurationRegistry.registerConfiguration({\n\t'id': 'explorer',\n\t'order': 8,\n\t'title': nls.localize('explorerConfigurationTitle', \"File Explorer configuration\"),\n\t'type': 'object',\n\t'properties': {\n\t\t'explorer.workingFiles.maxVisible': {\n\t\t\t'type': 'number',\n\t\t\t'description': nls.localize('maxVisible', \"Maximum number of working files to show before scrollbars appear.\"),\n\t\t\t'default': 9\n\t\t},\n\t\t'explorer.workingFiles.dynamicHeight': {\n\t\t\t'type': 'boolean',\n\t\t\t'description': nls.localize('dynamicHeight', \"Controls if the height of the working files section should adapt dynamically to the number of elements or not.\"),\n\t\t\t'default': true\n\t\t},\n\t\t'explorer.autoReveal': {\n\t\t\t'type': 'boolean',\n\t\t\t'description': nls.localize('autoReveal', \"Controls if the explorer should automatically reveal files when opening them.\"),\n\t\t\t'default': true\n\t\t}\n\t}\n});\n\n// Register quick open handler for working files\n\nconst ALL_WORKING_FILES_PREFIX = '~';\n\nclass OpenWorkingFileByNameAction extends QuickOpenAction {\n\n\tpublic static ID = 'workbench.files.action.workingFilesPicker';\n\tpublic static LABEL = nls.localize('workingFilesPicker', \"Open Working File by Name\");\n\n\tconstructor(actionId: string, actionLabel: string, @IQuickOpenService quickOpenService: IQuickOpenService) {\n\t\tsuper(actionId, actionLabel, ALL_WORKING_FILES_PREFIX, quickOpenService);\n\t}\n}\n\n(<IQuickOpenRegistry>Registry.as(QuickOpenExtensions.Quickopen)).registerQuickOpenHandler(\n\tnew QuickOpenHandlerDescriptor(\n\t\t'vs/workbench/parts/files/browser/workingFilesPicker',\n\t\t'WorkingFilesPicker',\n\t\tALL_WORKING_FILES_PREFIX,\n\t\t[\n\t\t\t{\n\t\t\t\tprefix: ALL_WORKING_FILES_PREFIX,\n\t\t\t\tneedsEditor: false,\n\t\t\t\tdescription: nls.localize('openWorkingFile', \"Open Working File By Name\")\n\t\t\t}\n\t\t]\n\t)\n);\n\nregistry.registerWorkbenchAction(new SyncActionDescriptor(OpenWorkingFileByNameAction, OpenWorkingFileByNameAction.ID, OpenWorkingFileByNameAction.LABEL, {\n\tprimary: KeyMod.chord(KeyMod.CtrlCmd | KeyCode.KEY_K, KeyMod.CtrlCmd | KeyCode.KEY_P)\n}), nls.localize('filesCategory', \"Files\"));"]}