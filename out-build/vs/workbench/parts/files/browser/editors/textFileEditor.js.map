{"version":3,"sources":["vs/workbench/parts/files/browser/editors/textFileEditor.ts"],"names":[],"mappings":"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","file":"vs/workbench/parts/files/browser/editors/textFileEditor.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport nls = require('vs/nls');\nimport errors = require('vs/base/common/errors');\nimport {MIME_BINARY, MIME_TEXT} from 'vs/base/common/mime';\nimport labels = require('vs/base/common/labels');\nimport types = require('vs/base/common/types');\nimport paths = require('vs/base/common/paths');\nimport {Action} from 'vs/base/common/actions';\nimport {IEditorOptions} from 'vs/editor/common/editorCommon';\nimport {VIEWLET_ID, TEXT_FILE_EDITOR_ID, ITextFileService} from 'vs/workbench/parts/files/common/files';\nimport {SaveErrorHandler} from 'vs/workbench/parts/files/browser/saveErrorHandler';\nimport {BaseTextEditor} from 'vs/workbench/browser/parts/editor/textEditor';\nimport {EditorInput, EditorOptions, TextEditorOptions, EditorModel} from 'vs/workbench/common/editor';\nimport {TextFileEditorModel} from 'vs/workbench/parts/files/common/editors/textFileEditorModel';\nimport {BinaryEditorModel} from 'vs/workbench/common/editor/binaryEditorModel';\nimport {FileEditorInput} from 'vs/workbench/parts/files/browser/editors/fileEditorInput';\nimport {ExplorerViewlet} from 'vs/workbench/parts/files/browser/explorerViewlet';\nimport {IQuickOpenService} from 'vs/workbench/services/quickopen/common/quickOpenService';\nimport {IViewletService} from 'vs/workbench/services/viewlet/common/viewletService';\nimport {IFileOperationResult, FileOperationResult, FileChangesEvent, EventType, IFileService} from 'vs/platform/files/common/files';\nimport {ITelemetryService} from 'vs/platform/telemetry/common/telemetry';\nimport {IWorkspaceContextService} from 'vs/workbench/services/workspace/common/contextService';\nimport {IStorageService} from 'vs/platform/storage/common/storage';\nimport {IConfigurationService} from 'vs/platform/configuration/common/configuration';\nimport {IEventService} from 'vs/platform/event/common/event';\nimport {IInstantiationService} from 'vs/platform/instantiation/common/instantiation';\nimport {IMessageService, Severity, CancelAction} from 'vs/platform/message/common/message';\nimport {IWorkbenchEditorService} from 'vs/workbench/services/editor/common/editorService';\nimport {IModeService} from 'vs/editor/common/services/modeService';\nimport {IThemeService} from 'vs/workbench/services/themes/common/themeService';\n\n/**\n * An implementation of editor for file system resources.\n */\nexport class TextFileEditor extends BaseTextEditor {\n\n\tpublic static ID = TEXT_FILE_EDITOR_ID;\n\n\tconstructor(\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IFileService private fileService: IFileService,\n\t\t@ITextFileService private textFileService: ITextFileService,\n\t\t@IViewletService private viewletService: IViewletService,\n\t\t@IQuickOpenService private quickOpenService: IQuickOpenService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IWorkspaceContextService contextService: IWorkspaceContextService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@IMessageService messageService: IMessageService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IEventService eventService: IEventService,\n\t\t@IWorkbenchEditorService editorService: IWorkbenchEditorService,\n\t\t@IModeService modeService: IModeService,\n\t\t@IThemeService themeService: IThemeService\n\t) {\n\t\tsuper(TextFileEditor.ID, telemetryService, instantiationService, contextService, storageService, messageService, configurationService, eventService, editorService, modeService, themeService);\n\n\t\t// Since we are the one providing save-support for models, we hook up the error handler for saving\n\t\tTextFileEditorModel.setSaveErrorHandler(instantiationService.createInstance(SaveErrorHandler));\n\n\t\t// Clear view state for deleted files\n\t\tthis.toUnbind.push(this.eventService.addListener(EventType.FILE_CHANGES, (e: FileChangesEvent) => this.onFilesChanged(e)));\n\t}\n\n\tprivate onFilesChanged(e: FileChangesEvent): void {\n\t\tlet deleted = e.getDeleted();\n\t\tif (deleted && deleted.length) {\n\t\t\tthis.clearTextEditorViewState(this.storageService, deleted.map((d) => d.resource.toString()));\n\t\t}\n\t}\n\n\tpublic getTitle(): string {\n\t\treturn this.getInput() ? this.getInput().getName() : nls.localize('textFileEditor', \"Text File Editor\");\n\t}\n\n\tpublic setInput(input: EditorInput, options: EditorOptions): TPromise<void> {\n\t\tlet oldInput = this.getInput();\n\t\tsuper.setInput(input, options);\n\n\t\t// Detect options\n\t\tlet forceOpen = options && options.forceOpen;\n\n\t\t// Same Input\n\t\tif (!forceOpen && input.matches(oldInput)) {\n\n\t\t\t// TextOptions (avoiding instanceof here for a reason, do not change!)\n\t\t\tif (options && types.isFunction((<TextEditorOptions>options).apply)) {\n\t\t\t\t(<TextEditorOptions>options).apply(this.getControl());\n\t\t\t}\n\n\t\t\treturn TPromise.as<void>(null);\n\t\t}\n\n\t\t// Remember view settings if input changes\n\t\tif (oldInput) {\n\t\t\tthis.saveTextEditorViewState(this.storageService, (<FileEditorInput>oldInput).getResource().toString());\n\t\t}\n\n\t\t// Different Input (Reload)\n\t\treturn this.editorService.resolveEditorModel(input, true /* Reload */).then((resolvedModel: EditorModel) => {\n\n\t\t\t// There is a special case where the text editor has to handle binary file editor input: if a file with application/unknown\n\t\t\t// mime has been resolved and cached before, it maybe an actual instance of BinaryEditorModel. In this case our text\n\t\t\t// editor has to open this model using the binary editor. We return early in this case.\n\t\t\tif (resolvedModel instanceof BinaryEditorModel && this.openAsBinary(input, options)) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t// Assert Model interface\n\t\t\tif (!(resolvedModel instanceof TextFileEditorModel)) {\n\t\t\t\treturn TPromise.wrapError<void>('Invalid editor input. Text file editor requires a model instance of TextFileEditorModel.');\n\t\t\t}\n\n\t\t\tlet textFileModel = <TextFileEditorModel>resolvedModel;\n\t\t\tlet textEditor = this.getControl();\n\n\t\t\t// Assert Text Model\n\t\t\tif (!textFileModel.textEditorModel) {\n\t\t\t\treturn TPromise.wrapError<void>('Unable to open the file because the associated text model is undefined.');\n\t\t\t}\n\n\t\t\t// First assert that the current input is still the one we expect\n\t\t\t// This prevents a race condition when reloading a content takes long\n\t\t\t// and the user meanwhile decided to open another file\n\t\t\tif (!this.getInput() || (<FileEditorInput>this.getInput()).getResource().toString() !== textFileModel.getResource().toString()) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t// log the time it takes the editor to render the resource\n\t\t\tlet mode = textFileModel.textEditorModel.getMode();\n\t\t\tlet setModelEvent = this.telemetryService.timedPublicLog('editorSetModel', {\n\t\t\t\tmode: mode && mode.getId(),\n\t\t\t\tresource: textFileModel.textEditorModel.getAssociatedResource().toString(),\n\t\t\t});\n\n\t\t\t// Editor\n\t\t\ttextEditor.setModel(textFileModel.textEditorModel);\n\n\t\t\t// stop the event\n\t\t\tsetModelEvent.stop();\n\n\t\t\t// TextOptions (avoiding instanceof here for a reason, do not change!)\n\t\t\tlet optionsGotApplied = false;\n\t\t\tif (options && types.isFunction((<TextEditorOptions>options).apply)) {\n\t\t\t\toptionsGotApplied = (<TextEditorOptions>options).apply(textEditor);\n\t\t\t}\n\n\t\t\t// Otherwise restore View State\n\t\t\tif (!optionsGotApplied) {\n\t\t\t\tconst editorViewState = this.loadTextEditorViewState(this.storageService, (<FileEditorInput>this.getInput()).getResource().toString());\n\t\t\t\tif (editorViewState) {\n\t\t\t\t\ttextEditor.restoreViewState(editorViewState);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Add to working files if file is out of workspace\n\t\t\tif (!this.contextService.isInsideWorkspace(textFileModel.getResource())) {\n\t\t\t\tthis.textFileService.getWorkingFilesModel().addEntry(textFileModel.getResource());\n\t\t\t}\n\n\t\t}, (error) => {\n\n\t\t\t// In case we tried to open a file inside the text editor and the response\n\t\t\t// indicates that this is not a text file, reopen the file through the binary\n\t\t\t// editor by using application/octet-stream as mime.\n\t\t\tif ((<IFileOperationResult>error).fileOperationResult === FileOperationResult.FILE_IS_BINARY && this.openAsBinary(input, options)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Similar, handle case where we were asked to open a folder in the text editor.\n\t\t\tif ((<IFileOperationResult>error).fileOperationResult === FileOperationResult.FILE_IS_DIRECTORY && this.openAsFolder(input)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Offer to create a file from the error if we have a file not found and the name is valid\n\t\t\tif ((<IFileOperationResult>error).fileOperationResult === FileOperationResult.FILE_NOT_FOUND && paths.isValidBasename(paths.basename((<FileEditorInput>input).getResource().fsPath))) {\n\t\t\t\treturn TPromise.wrapError(errors.create(errors.toErrorMessage(error), { actions: [\n\t\t\t\t\tCancelAction,\n\t\t\t\t\tnew Action('workbench.files.action.createMissingFile', nls.localize('createFile', \"Create File\"), null, true, () => {\n\t\t\t\t\t\treturn this.fileService.updateContent((<FileEditorInput>input).getResource(), '').then(() => {\n\n\t\t\t\t\t\t\t// Add to working files\n\t\t\t\t\t\t\tthis.textFileService.getWorkingFilesModel().addEntry((<FileEditorInput>input).getResource());\n\n\t\t\t\t\t\t\t// Open\n\t\t\t\t\t\t\treturn this.editorService.openEditor({\n\t\t\t\t\t\t\t\tresource: (<FileEditorInput>input).getResource(),\n\t\t\t\t\t\t\t\tmime: MIME_TEXT\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\t\t\t\t\t})\n\t\t\t\t]}));\n\t\t\t}\n\n\t\t\t// Inform the user if the file is too large to open\n\t\t\tif ((<IFileOperationResult>error).fileOperationResult === FileOperationResult.FILE_TOO_LARGE) {\n\t\t\t\tthis.messageService.show(Severity.Info, nls.localize('fileTooLarge', \"We are sorry, but the file is too large to open it inside an editor.\"));\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Otherwise make sure the error bubbles up\n\t\t\treturn TPromise.wrapError(error);\n\t\t});\n\t}\n\n\tprivate openAsBinary(input: EditorInput, options: EditorOptions): boolean {\n\t\tif (input instanceof FileEditorInput) {\n\t\t\tlet fileEditorInput = <FileEditorInput>input;\n\n\t\t\tlet fileInputBinary = this.instantiationService.createInstance(FileEditorInput, fileEditorInput.getResource(), MIME_BINARY, void 0);\n\t\t\tthis.editorService.openEditor(fileInputBinary, options, this.position).done(null, errors.onUnexpectedError);\n\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tprivate openAsFolder(input: EditorInput): boolean {\n\n\t\t// Since we cannot open a folder, we have to restore the previous input if any or close the editor\n\t\tlet handleEditorPromise: TPromise<BaseTextEditor>;\n\t\tlet previousInput = this.quickOpenService.getEditorHistory()[1];\n\t\tif (previousInput) {\n\t\t\thandleEditorPromise = this.editorService.openEditor(previousInput, null, this.position);\n\t\t} else {\n\t\t\thandleEditorPromise = this.editorService.closeEditor(this);\n\t\t}\n\n\t\thandleEditorPromise.done(() => {\n\n\t\t\t// Best we can do is to reveal the folder in the explorer\n\t\t\tif (input instanceof FileEditorInput) {\n\t\t\t\tlet fileEditorInput = <FileEditorInput>input;\n\n\t\t\t\t// Reveal if we have a workspace path\n\t\t\t\tif (this.contextService.isInsideWorkspace(fileEditorInput.getResource())) {\n\t\t\t\t\tthis.viewletService.openViewlet(VIEWLET_ID, true).done((viewlet: ExplorerViewlet) => {\n\t\t\t\t\t\treturn viewlet.getExplorerView().select(fileEditorInput.getResource(), true);\n\t\t\t\t\t}, errors.onUnexpectedError);\n\t\t\t\t}\n\n\t\t\t\t// Otherwise inform the user\n\t\t\t\telse {\n\t\t\t\t\tthis.messageService.show(Severity.Info, nls.localize('folderOutofWorkspace', \"The folder '{0}' is outside the currently opened root folder and can not be opened in this instance.\", labels.getPathLabel(fileEditorInput.getResource())));\n\t\t\t\t}\n\t\t\t}\n\t\t}, errors.onUnexpectedError);\n\n\t\treturn true; // in any case we handled it\n\t}\n\n\tprotected getCodeEditorOptions(): IEditorOptions {\n\t\tlet options = super.getCodeEditorOptions();\n\n\t\tlet input = this.getInput();\n\t\tlet inputName = input && input.getName();\n\t\toptions.ariaLabel = inputName ? nls.localize('fileEditorWithInputAriaLabel', \"{0}. Text file editor.\", inputName) : nls.localize('fileEditorAriaLabel', \"Text file editor.\");\n\n\t\treturn options;\n\t}\n\n\tpublic supportsSplitEditor(): boolean {\n\t\treturn true; // yes, we can!\n\t}\n\n\tpublic clearInput(): void {\n\n\t\t// Keep editor view state in settings to restore when coming back\n\t\tif (this.input) {\n\t\t\tthis.saveTextEditorViewState(this.storageService, (<FileEditorInput>this.input).getResource().toString());\n\t\t}\n\n\t\t// Clear Model\n\t\tthis.getControl().setModel(null);\n\n\t\t// Pass to super\n\t\tsuper.clearInput();\n\t}\n\n\tpublic shutdown(): void {\n\n\t\t// Save View State\n\t\tif (this.input) {\n\t\t\tthis.saveTextEditorViewState(this.storageService, (<FileEditorInput>this.input).getResource().toString());\n\t\t}\n\n\t\t// Call Super\n\t\tsuper.shutdown();\n\t}\n}"]}