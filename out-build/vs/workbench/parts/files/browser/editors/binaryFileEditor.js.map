{"version":3,"sources":["vs/workbench/parts/files/browser/editors/binaryFileEditor.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;IAAA;;;oGAGgG;IAChG,YAAY,CAAC;IAQb;;OAEG;IACH;QAAsC,oCAAwB;QAI7D,0BACoB,gBAAmC,EAC7B,aAAsC;YAE/D,kBAAM,gBAAgB,CAAC,EAAE,EAAE,gBAAgB,EAAE,aAAa,CAAC,CAAC;QAC7D,CAAC;QAEM,mCAAQ,GAAf;YACC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC,OAAO,EAAE,GAAG,GAAG,CAAC,QAAQ,CAAC,CAAkB,EAAE,IAAoB,CAAC,CAAC;QAC7G,CAAC;QAEM,8CAAmB,GAA1B;YACC,MAAM,CAAC,IAAI,CAAC,CAAC,eAAe;QAC7B,CAAC;QAfa,mBAAE,GAAG,6BAAqB,CAAC;QAGxC;uBAAC,6BAAiB;uBACjB,uCAAuB;4BADN;QAapB,uBAAC;IAAD,CAlBA,AAkBC,CAlBqC,uCAAwB,GAkB7D;IAlBY,wBAAgB,mBAkB5B,CAAA","file":"vs/workbench/parts/files/browser/editors/binaryFileEditor.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport nls = require('vs/nls');\nimport {BaseBinaryResourceEditor} from 'vs/workbench/browser/parts/editor/binaryEditor';\nimport {BINARY_FILE_EDITOR_ID} from 'vs/workbench/parts/files/common/files';\nimport {ITelemetryService} from 'vs/platform/telemetry/common/telemetry';\nimport {IWorkbenchEditorService} from 'vs/workbench/services/editor/common/editorService';\n\n/**\n * An implementation of editor for binary files like images or videos leveraging the FileEditorInput.\n */\nexport class BinaryFileEditor extends BaseBinaryResourceEditor {\n\n\tpublic static ID = BINARY_FILE_EDITOR_ID;\n\n\tconstructor(\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IWorkbenchEditorService editorService: IWorkbenchEditorService\n\t) {\n\t\tsuper(BinaryFileEditor.ID, telemetryService, editorService);\n\t}\n\n\tpublic getTitle(): string {\n\t\treturn this.getInput() ? this.getInput().getName() : nls.localize('binaryFileEditor', \"Binary File Viewer\");\n\t}\n\n\tpublic supportsSplitEditor(): boolean {\n\t\treturn true; // yes, we can!\n\t}\n}"]}