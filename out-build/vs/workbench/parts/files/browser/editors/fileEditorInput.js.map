{"version":3,"file":"fileEditorInput.js","sourceRoot":"","sources":["../../../../../../../src/vs/workbench/parts/files/browser/editors/fileEditorInput.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport nls = require('vs/nls');\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport {Registry} from 'vs/platform/platform';\nimport types = require('vs/base/common/types');\nimport paths = require('vs/base/common/paths');\nimport {guessMimeTypes} from 'vs/base/common/mime';\nimport labels = require('vs/base/common/labels');\nimport URI from 'vs/base/common/uri';\nimport strings = require('vs/base/common/strings');\nimport assert = require('vs/base/common/assert');\nimport {EditorModel, IInputStatus, EncodingMode} from 'vs/workbench/common/editor';\nimport {IEditorRegistry, Extensions, EditorDescriptor} from 'vs/workbench/browser/parts/editor/baseEditor';\nimport {BinaryEditorModel} from 'vs/workbench/common/editor/binaryEditorModel';\nimport {IFileOperationResult, FileOperationResult} from 'vs/platform/files/common/files';\nimport {FileEditorDescriptor} from 'vs/workbench/parts/files/browser/files';\nimport {ITextFileService, BINARY_FILE_EDITOR_ID, FILE_EDITOR_INPUT_ID, FileEditorInput as CommonFileEditorInput, AutoSaveMode} from 'vs/workbench/parts/files/common/files';\nimport {CACHE, TextFileEditorModel, State} from 'vs/workbench/parts/files/common/editors/textFileEditorModel';\nimport {IWorkspaceContextService} from 'vs/workbench/services/workspace/common/contextService';\nimport {IInstantiationService} from 'vs/platform/instantiation/common/instantiation';\n\n/**\n * A file editor input is the input type for the file editor of file system resources.\n */\nexport class FileEditorInput extends CommonFileEditorInput {\n\n\t// Do ref counting for all inputs that resolved to a model to be able to dispose when count = 0\n\tprivate static FILE_EDITOR_MODEL_CLIENTS: { [resource: string]: FileEditorInput[]; } = Object.create(null);\n\n\t// Keep promises that load a file editor model to avoid loading the same model twice\n\tprivate static FILE_EDITOR_MODEL_LOADERS: { [resource: string]: TPromise<EditorModel>; } = Object.create(null);\n\n\t// These nls things are looked up way too often to not cache them..\n\tprivate static nlsSavedDisplay = nls.localize('savedDisplay', \"Saved\");\n\tprivate static nlsSavedMeta = nls.localize('savedMeta', \"All changes saved\");\n\tprivate static nlsDirtyDisplay = nls.localize('dirtyDisplay', \"Dirty\");\n\tprivate static nlsDirtyMeta = nls.localize('dirtyMeta', \"Changes have been made to the file...\");\n\tprivate static nlsPendingSaveDisplay = nls.localize('savingDisplay', \"Saving...\");\n\tprivate static nlsPendingSaveMeta = nls.localize('pendingSaveMeeta', \"Changes are currently being saved...\");\n\tprivate static nlsErrorDisplay = nls.localize('saveErorDisplay', \"Save error\");\n\tprivate static nlsErrorMeta = nls.localize('saveErrorMeta', \"Sorry, we are having trouble saving your changes\");\n\tprivate static nlsConflictDisplay = nls.localize('saveConflictDisplay', \"Conflict\");\n\tprivate static nlsConflictMeta = nls.localize('saveConflictMeta', \"Changes cannot be saved because they conflict with the version on disk\");\n\n\tprivate resource: URI;\n\tprivate mime: string;\n\tprivate preferredEncoding: string;\n\n\tprivate name: string;\n\tprivate description: string;\n\tprivate verboseDescription: string;\n\n\t/**\n\t * An editor input whos contents are retrieved from file services.\n\t */\n\tconstructor(\n\t\tresource: URI,\n\t\tmime: string,\n\t\tpreferredEncoding: string,\n\t\t@IInstantiationService private instantiationService: IInstantiationService,\n\t\t@IWorkspaceContextService private contextService: IWorkspaceContextService,\n\t\t@ITextFileService private textFileService: ITextFileService\n\t) {\n\t\tsuper();\n\n\t\tif (resource) {\n\t\t\tthis.setResource(resource);\n\t\t\tthis.setMime(mime || guessMimeTypes(this.resource.fsPath).join(', '));\n\t\t\tthis.preferredEncoding = preferredEncoding;\n\t\t}\n\t}\n\n\tpublic setResource(resource: URI): void {\n\t\tif (resource.scheme !== 'file') {\n\t\t\tthrow new Error('FileEditorInput can only handle file:// resources.');\n\t\t}\n\n\t\tthis.resource = resource;\n\n\t\t// Reset resource dependent properties\n\t\tthis.name = null;\n\t\tthis.description = null;\n\t\tthis.verboseDescription = null;\n\t}\n\n\tpublic getResource(): URI {\n\t\treturn this.resource;\n\t}\n\n\tpublic getMime(): string {\n\t\treturn this.mime;\n\t}\n\n\tpublic setMime(mime: string): void {\n\t\tassert.ok(mime, 'Editor input needs mime type');\n\n\t\tthis.mime = mime;\n\t}\n\n\tpublic getEncoding(): string {\n\t\tlet textModel = CACHE.get(this.resource);\n\t\tif (textModel) {\n\t\t\treturn textModel.getEncoding();\n\t\t}\n\n\t\treturn this.preferredEncoding;\n\t}\n\n\tpublic setEncoding(encoding: string, mode: EncodingMode): void {\n\t\tthis.preferredEncoding = encoding;\n\n\t\tlet textModel = CACHE.get(this.resource);\n\t\tif (textModel) {\n\t\t\ttextModel.setEncoding(encoding, mode);\n\t\t}\n\t}\n\n\tpublic getId(): string {\n\t\treturn FILE_EDITOR_INPUT_ID;\n\t}\n\n\tpublic getName(): string {\n\t\tif (!this.name) {\n\t\t\tthis.name = paths.basename(this.resource.fsPath);\n\t\t}\n\n\t\treturn this.name;\n\t}\n\n\tpublic getDescription(verbose?: boolean): string {\n\t\tif (!verbose) {\n\t\t\tif (!this.description) {\n\t\t\t\tthis.description = labels.getPathLabel(paths.dirname(this.resource.fsPath), this.contextService);\n\t\t\t}\n\n\t\t\treturn this.description;\n\t\t}\n\n\t\tif (!this.verboseDescription) {\n\t\t\tthis.verboseDescription = labels.getPathLabel(this.resource.fsPath);\n\t\t}\n\n\t\treturn this.verboseDescription;\n\t}\n\n\tpublic getStatus(): IInputStatus {\n\t\tlet textModel = CACHE.get(this.resource);\n\t\tif (textModel) {\n\t\t\tlet state = textModel.getState();\n\t\t\tswitch (state) {\n\t\t\t\tcase State.SAVED: {\n\t\t\t\t\treturn { state: 'saved', displayText: FileEditorInput.nlsSavedDisplay, description: FileEditorInput.nlsSavedMeta };\n\t\t\t\t}\n\n\t\t\t\tcase State.DIRTY: {\n\t\t\t\t\treturn { state: 'dirty', decoration: (this.textFileService.getAutoSaveMode() !== AutoSaveMode.AFTER_SHORT_DELAY) ? '\\u25cf' : '', displayText: FileEditorInput.nlsDirtyDisplay, description: FileEditorInput.nlsDirtyMeta };\n\t\t\t\t}\n\n\t\t\t\tcase State.PENDING_SAVE:\n\t\t\t\t\treturn { state: 'saving', decoration: (this.textFileService.getAutoSaveMode() !== AutoSaveMode.AFTER_SHORT_DELAY) ? '\\u25cf' : '', displayText: FileEditorInput.nlsPendingSaveDisplay, description: FileEditorInput.nlsPendingSaveMeta };\n\n\t\t\t\tcase State.ERROR:\n\t\t\t\t\treturn { state: 'error', decoration: '\\u25cf', displayText: FileEditorInput.nlsErrorDisplay, description: FileEditorInput.nlsErrorMeta };\n\n\t\t\t\tcase State.CONFLICT:\n\t\t\t\t\treturn { state: 'conflict', decoration: '\\u25cf', displayText: FileEditorInput.nlsConflictDisplay, description: FileEditorInput.nlsConflictMeta };\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tpublic getPreferredEditorId(candidates: string[]): string {\n\t\tlet editorRegistry = (<IEditorRegistry>Registry.as(Extensions.Editors));\n\n\t\t// Lookup Editor by Mime\n\t\tlet descriptor: EditorDescriptor;\n\t\tlet mimes = this.mime.split(',');\n\t\tfor (let m = 0; m < mimes.length; m++) {\n\t\t\tlet mime = strings.trim(mimes[m]);\n\n\t\t\tfor (let i = 0; i < candidates.length; i++) {\n\t\t\t\tdescriptor = editorRegistry.getEditorById(candidates[i]);\n\n\t\t\t\tif (types.isFunction((<FileEditorDescriptor>descriptor).getMimeTypes)) {\n\t\t\t\t\tlet mimetypes = (<FileEditorDescriptor>descriptor).getMimeTypes();\n\t\t\t\t\tfor (let j = 0; j < mimetypes.length; j++) {\n\t\t\t\t\t\tlet mimetype = mimetypes[j];\n\n\t\t\t\t\t\t// Check for direct mime match\n\t\t\t\t\t\tif (mime === mimetype) {\n\t\t\t\t\t\t\treturn descriptor.getId();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Otherwise check for wildcard mime matches\n\t\t\t\t\t\tif (strings.endsWith(mimetype, '/*') && strings.startsWith(mime, mimetype.substring(0, mimetype.length - 1))) {\n\t\t\t\t\t\t\treturn descriptor.getId();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Otherwise use default editor\n\t\treturn BINARY_FILE_EDITOR_ID;\n\t}\n\n\tpublic resolve(refresh?: boolean): TPromise<EditorModel> {\n\t\tlet modelPromise: TPromise<EditorModel>;\n\n\t\t// Keep clients who resolved the input to support proper disposal\n\t\tlet clients = FileEditorInput.FILE_EDITOR_MODEL_CLIENTS[this.resource.toString()];\n\t\tif (types.isUndefinedOrNull(clients)) {\n\t\t\tFileEditorInput.FILE_EDITOR_MODEL_CLIENTS[this.resource.toString()] = [this];\n\t\t} else if (this.indexOfClient() === -1) {\n\t\t\tFileEditorInput.FILE_EDITOR_MODEL_CLIENTS[this.resource.toString()].push(this);\n\t\t}\n\n\t\t// Check for running loader to ensure the model is only ever loaded once\n\t\tif (FileEditorInput.FILE_EDITOR_MODEL_LOADERS[this.resource.toString()]) {\n\t\t\treturn FileEditorInput.FILE_EDITOR_MODEL_LOADERS[this.resource.toString()];\n\t\t}\n\n\t\t// Use Cached Model if present\n\t\tlet cachedModel = CACHE.get(this.resource);\n\t\tif (cachedModel && !refresh) {\n\t\t\tmodelPromise = TPromise.as<EditorModel>(cachedModel);\n\t\t}\n\n\t\t// Refresh Cached Model if present\n\t\telse if (cachedModel && refresh) {\n\t\t\tmodelPromise = cachedModel.load();\n\t\t\tFileEditorInput.FILE_EDITOR_MODEL_LOADERS[this.resource.toString()] = modelPromise;\n\t\t}\n\n\t\t// Otherwise Create Model and Load\n\t\telse {\n\t\t\tmodelPromise = this.createAndLoadModel();\n\t\t\tFileEditorInput.FILE_EDITOR_MODEL_LOADERS[this.resource.toString()] = modelPromise;\n\t\t}\n\n\t\treturn modelPromise.then((resolvedModel: TextFileEditorModel | BinaryEditorModel) => {\n\t\t\tif (resolvedModel instanceof TextFileEditorModel) {\n\t\t\t\tCACHE.add(this.resource, resolvedModel); // Store into the text model cache unless this file is binary\n\t\t\t}\n\t\t\tFileEditorInput.FILE_EDITOR_MODEL_LOADERS[this.resource.toString()] = null; // Remove from pending loaders\n\n\t\t\treturn resolvedModel;\n\t\t}, (error) => {\n\t\t\tFileEditorInput.FILE_EDITOR_MODEL_LOADERS[this.resource.toString()] = null; // Remove from pending loaders in case of an error\n\n\t\t\treturn TPromise.wrapError(error);\n\t\t});\n\t}\n\n\tprivate indexOfClient(): number {\n\t\tif (!types.isUndefinedOrNull(FileEditorInput.FILE_EDITOR_MODEL_CLIENTS[this.resource.toString()])) {\n\t\t\tfor (let i = 0; i < FileEditorInput.FILE_EDITOR_MODEL_CLIENTS[this.resource.toString()].length; i++) {\n\t\t\t\tlet client = FileEditorInput.FILE_EDITOR_MODEL_CLIENTS[this.resource.toString()][i];\n\t\t\t\tif (client === this) {\n\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn -1;\n\t}\n\n\tprivate createAndLoadModel(): TPromise<EditorModel> {\n\t\tlet descriptor = (<IEditorRegistry>Registry.as(Extensions.Editors)).getEditor(this);\n\t\tif (!descriptor) {\n\t\t\tthrow new Error('Unable to find an editor in the registry for this input.');\n\t\t}\n\n\t\t// Optimistically create a text model assuming that the file is not binary\n\t\tlet textModel = this.instantiationService.createInstance(TextFileEditorModel, this.resource, this.preferredEncoding);\n\t\treturn textModel.load().then(() => textModel, (error) => {\n\n\t\t\t// In case of an error that indicates that the file is binary or too large, just return with the binary editor model\n\t\t\tif ((<IFileOperationResult>error).fileOperationResult === FileOperationResult.FILE_IS_BINARY || (<IFileOperationResult>error).fileOperationResult === FileOperationResult.FILE_TOO_LARGE) {\n\t\t\t\ttextModel.dispose();\n\n\t\t\t\tlet binaryModel = new BinaryEditorModel(this.resource, this.getName());\n\t\t\t\treturn binaryModel.load();\n\t\t\t}\n\n\t\t\t// Bubble any other error up\n\t\t\treturn TPromise.wrapError(error);\n\t\t});\n\t}\n\n\tpublic dispose(force?: boolean): void {\n\n\t\t// TextFileEditorModel\n\t\tlet cachedModel = CACHE.get(this.resource);\n\t\tif (cachedModel) {\n\n\t\t\t// Only dispose if the last client called dispose() unless a forced dispose is triggered\n\t\t\tlet index = this.indexOfClient();\n\t\t\tif (index >= 0) {\n\n\t\t\t\t// Remove from Clients List\n\t\t\t\tFileEditorInput.FILE_EDITOR_MODEL_CLIENTS[this.resource.toString()].splice(index, 1);\n\n\t\t\t\t// Still clients around, thereby do not dispose yet\n\t\t\t\tif (!force && FileEditorInput.FILE_EDITOR_MODEL_CLIENTS[this.resource.toString()].length > 0) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// We typically never want to dispose a file editor model because this means loosing undo/redo history.\n\t\t\t\t// For that, we will keep the model around unless someone forces a dispose on the input. A forced dispose\n\t\t\t\t// can happen when the model has not been used for a while or was changed outside the application which\n\t\t\t\t// means loosing the undo redo history anyways.\n\t\t\t\tif (!force) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Dispose for real\n\t\t\t\tCACHE.dispose(this.resource);\n\t\t\t}\n\t\t}\n\n\t\tsuper.dispose();\n\t}\n\n\tpublic matches(otherInput: any): boolean {\n\t\tif (super.matches(otherInput) === true) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (otherInput) {\n\n\t\t\t// Note that we can not test for the mime type here because we cache resolved file editor input models by resource. And\n\t\t\t// these models have a fixed mode association that can not be changed afterwards. As such, we always treat this input\n\t\t\t// equal if the resource is equal so that there is always just one text editor model (with undo hisotry etc.) around.\n\t\t\t//\n\t\t\t// !!! DO NOT CHANGE THIS ASSUMPTION !!!\n\t\t\t//\n\t\t\treturn otherInput instanceof FileEditorInput && (<FileEditorInput>otherInput).resource.toString() === this.resource.toString();\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Exposed so that other internal file API can access the list of all file editor inputs\n\t * that have been loaded during the session.\n\t */\n\tpublic static getAll(desiredFileOrFolderResource: URI): FileEditorInput[] {\n\t\tlet inputsContainingResource: FileEditorInput[] = [];\n\n\t\tlet clients = FileEditorInput.FILE_EDITOR_MODEL_CLIENTS;\n\t\tfor (let resource in clients) {\n\t\t\tlet inputs = clients[resource];\n\n\t\t\t// Check if path is identical or path is a folder that the content is inside\n\t\t\tif (paths.isEqualOrParent(resource, desiredFileOrFolderResource.toString())) {\n\t\t\t\tinputsContainingResource.push(...inputs);\n\t\t\t}\n\t\t}\n\n\t\treturn inputsContainingResource;\n\t}\n}"]}