{"version":3,"sources":["vs/workbench/parts/files/electron-browser/files.electron.contribution.ts"],"names":[],"mappings":"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","file":"vs/workbench/parts/files/electron-browser/files.electron.contribution.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport nls = require('vs/nls');\nimport {Registry} from 'vs/platform/platform';\nimport {IAction} from 'vs/base/common/actions';\nimport {Scope, IActionBarRegistry, Extensions as ActionBarExtensions, ActionBarContributor} from 'vs/workbench/browser/actionBarRegistry';\nimport {IWorkbenchActionRegistry, Extensions as ActionExtensions} from 'vs/workbench/common/actionRegistry';\nimport {SyncActionDescriptor} from 'vs/platform/actions/common/actions';\nimport env = require('vs/base/common/platform');\nimport {ITextFileService, asFileResource} from 'vs/workbench/parts/files/common/files';\nimport {IWorkbenchContributionsRegistry, Extensions as WorkbenchExtensions} from 'vs/workbench/common/contributions';\nimport {GlobalNewFileAction, SaveFileAsAction} from 'vs/workbench/parts/files/browser/fileActions';\nimport {FileTracker} from 'vs/workbench/parts/files/electron-browser/electronFileTracker';\nimport {TextFileService} from 'vs/workbench/parts/files/electron-browser/textFileServices';\nimport {OpenFolderAction, OPEN_FOLDER_ID, OPEN_FOLDER_LABEL, OpenFileAction, OPEN_FILE_ID, OPEN_FILE_LABEL, OpenFileFolderAction, OPEN_FILE_FOLDER_ID, OPEN_FILE_FOLDER_LABEL, ShowOpenedFileInNewWindow, GlobalRevealInOSAction, GlobalCopyPathAction, CopyPathAction, RevealInOSAction} from 'vs/workbench/parts/files/electron-browser/electronFileActions';\nimport {IInstantiationService} from 'vs/platform/instantiation/common/instantiation';\nimport {registerSingleton} from 'vs/platform/instantiation/common/extensions';\nimport {KeyMod, KeyCode} from 'vs/base/common/keyCodes';\n\nclass FileViewerActionContributor extends ActionBarContributor {\n\n\tconstructor( @IInstantiationService private instantiationService: IInstantiationService) {\n\t\tsuper();\n\t}\n\n\tpublic hasSecondaryActions(context: any): boolean {\n\t\tlet element = context.element;\n\n\t\t// Contribute only on Files (File Explorer and Open Files Viewer)\n\t\treturn !!asFileResource(element);\n\t}\n\n\tpublic getSecondaryActions(context: any): IAction[] {\n\t\tlet actions: IAction[] = [];\n\n\t\tif (this.hasSecondaryActions(context)) {\n\t\t\tlet fileResource = asFileResource(context.element);\n\n\t\t\t// Reveal file in OS native explorer\n\t\t\tactions.push(this.instantiationService.createInstance(RevealInOSAction, fileResource.resource));\n\n\t\t\t// Copy Path\n\t\t\tactions.push(this.instantiationService.createInstance(CopyPathAction, fileResource.resource));\n\t\t}\n\n\t\treturn actions;\n\t}\n}\n\n// Contribute Actions\nconst category = nls.localize('filesCategory', \"Files\");\n\nlet workbenchActionsRegistry = <IWorkbenchActionRegistry>Registry.as(ActionExtensions.WorkbenchActions);\nworkbenchActionsRegistry.registerWorkbenchAction(new SyncActionDescriptor(SaveFileAsAction, SaveFileAsAction.ID, SaveFileAsAction.LABEL, { primary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KEY_S }), category);\nworkbenchActionsRegistry.registerWorkbenchAction(new SyncActionDescriptor(GlobalNewFileAction, GlobalNewFileAction.ID, GlobalNewFileAction.LABEL, { primary: KeyMod.CtrlCmd | KeyCode.KEY_N }), category);\n\nworkbenchActionsRegistry.registerWorkbenchAction(new SyncActionDescriptor(GlobalCopyPathAction, GlobalCopyPathAction.ID, GlobalCopyPathAction.LABEL, { primary: KeyMod.chord(KeyMod.CtrlCmd | KeyCode.KEY_K, KeyCode.KEY_P) }), category);\nworkbenchActionsRegistry.registerWorkbenchAction(new SyncActionDescriptor(GlobalRevealInOSAction, GlobalRevealInOSAction.ID, GlobalRevealInOSAction.LABEL, { primary: KeyMod.chord(KeyMod.CtrlCmd | KeyCode.KEY_K, KeyCode.KEY_R) }), category);\nworkbenchActionsRegistry.registerWorkbenchAction(new SyncActionDescriptor(ShowOpenedFileInNewWindow, ShowOpenedFileInNewWindow.ID, ShowOpenedFileInNewWindow.LABEL, { primary: KeyMod.chord(KeyMod.CtrlCmd | KeyCode.KEY_K, KeyCode.KEY_O) }), category);\n\nif (env.isMacintosh) {\n\tworkbenchActionsRegistry.registerWorkbenchAction(new SyncActionDescriptor(OpenFileFolderAction, OPEN_FILE_FOLDER_ID, OPEN_FILE_FOLDER_LABEL, { primary: KeyMod.CtrlCmd | KeyCode.KEY_O }), category);\n} else {\n\tworkbenchActionsRegistry.registerWorkbenchAction(new SyncActionDescriptor(OpenFileAction, OPEN_FILE_ID, OPEN_FILE_LABEL, { primary: KeyMod.CtrlCmd | KeyCode.KEY_O }), category);\n\tworkbenchActionsRegistry.registerWorkbenchAction(new SyncActionDescriptor(OpenFolderAction, OPEN_FOLDER_ID, OPEN_FOLDER_LABEL), category);\n}\n\n// Contribute to File Viewers\nlet actionsRegistry = <IActionBarRegistry>Registry.as(ActionBarExtensions.Actionbar);\nactionsRegistry.registerActionBarContributor(Scope.VIEWER, FileViewerActionContributor);\n\n// Register File Workbench Extension\n(<IWorkbenchContributionsRegistry>Registry.as(WorkbenchExtensions.Workbench)).registerWorkbenchContribution(\n\tFileTracker\n);\n\n// Register Service\nregisterSingleton(ITextFileService, TextFileService);"]}