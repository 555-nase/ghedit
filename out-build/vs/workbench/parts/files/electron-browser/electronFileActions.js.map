{"version":3,"sources":["vs/workbench/parts/files/electron-browser/electronFileActions.ts"],"names":[],"mappings":"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","file":"vs/workbench/parts/files/electron-browser/electronFileActions.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport {Action} from 'vs/base/common/actions';\nimport nls = require('vs/nls');\nimport paths = require('vs/base/common/paths');\nimport labels = require('vs/base/common/labels');\nimport platform = require('vs/base/common/platform');\nimport uri from 'vs/base/common/uri';\nimport severity from 'vs/base/common/severity';\nimport {IWorkbenchEditorService} from 'vs/workbench/services/editor/common/editorService';\nimport {asFileEditorInput} from 'vs/workbench/common/editor';\nimport {IMessageService} from 'vs/platform/message/common/message';\n\nimport {ipcRenderer as ipc, shell, clipboard} from 'electron';\n\nexport class RevealInOSAction extends Action {\n\tprivate resource: uri;\n\n\tconstructor(resource: uri) {\n\t\tsuper('workbench.action.files.revealInWindows', platform.isWindows ? nls.localize('revealInWindows', \"Reveal in Explorer\") : (platform.isMacintosh ? nls.localize('revealInMac', \"Reveal in Finder\") : nls.localize('openContainer', \"Open Containing Folder\")));\n\n\t\tthis.resource = resource;\n\n\t\tthis.order = 45;\n\t}\n\n\tpublic run(): TPromise<any> {\n\t\tshell.showItemInFolder(paths.normalize(this.resource.fsPath, true));\n\n\t\treturn TPromise.as(true);\n\t}\n}\n\nexport class GlobalRevealInOSAction extends Action {\n\n\tpublic static ID = 'workbench.action.files.revealActiveFileInWindows';\n\tpublic static LABEL = platform.isWindows ? nls.localize('revealActiveFileInWindows', \"Reveal Active File in Windows Explorer\") : (platform.isMacintosh ? nls.localize('revealActiveFileInMac', \"Reveal Active File in Finder\") : nls.localize('openActiveFileContainer', \"Open Containing Folder of Active File\"));\n\n\tconstructor(\n\t\tid:string,\n\t\tlabel: string,\n\t\t@IWorkbenchEditorService private editorService: IWorkbenchEditorService,\n\t\t@IMessageService private messageService: IMessageService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\tpublic run(): TPromise<any> {\n\t\tlet fileInput = asFileEditorInput(this.editorService.getActiveEditorInput(), true);\n\t\tif (fileInput) {\n\t\t\tshell.showItemInFolder(paths.normalize(fileInput.getResource().fsPath, true));\n\t\t} else {\n\t\t\tthis.messageService.show(severity.Info, nls.localize('openFileToReveal', \"Open a file first to reveal\"));\n\t\t}\n\n\t\treturn TPromise.as(true);\n\t}\n}\n\nexport class CopyPathAction extends Action {\n\tprivate resource: uri;\n\n\tconstructor(resource: uri) {\n\t\tsuper('workbench.action.files.copyPath', nls.localize('copyPath', \"Copy Path\"));\n\n\t\tthis.resource = resource;\n\n\t\tthis.order = 140;\n\t}\n\n\tpublic run(): TPromise<any> {\n\t\tclipboard.writeText(labels.getPathLabel(this.resource));\n\n\t\treturn TPromise.as(true);\n\t}\n}\n\nexport class GlobalCopyPathAction extends Action {\n\n\tpublic static ID = 'workbench.action.files.copyPathOfActiveFile';\n\tpublic static LABEL = nls.localize('copyPathOfActive', \"Copy Path of Active File\");\n\n\tconstructor(\n\t\tid:string,\n\t\tlabel: string,\n\t\t@IWorkbenchEditorService private editorService: IWorkbenchEditorService,\n\t\t@IMessageService private messageService: IMessageService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\tpublic run(): TPromise<any> {\n\t\tlet fileInput = asFileEditorInput(this.editorService.getActiveEditorInput(), true);\n\t\tif (fileInput) {\n\t\t\tclipboard.writeText(labels.getPathLabel(fileInput.getResource()));\n\t\t\tthis.editorService.focusEditor(); // focus back to editor\n\t\t} else {\n\t\t\tthis.messageService.show(severity.Info, nls.localize('openFileToCopy', \"Open a file first to copy its path\"));\n\t\t}\n\n\t\treturn TPromise.as(true);\n\t}\n}\n\nexport class BaseOpenAction extends Action {\n\n\tprivate ipcMsg: string;\n\n\tconstructor(id: string, label: string, ipcMsg: string) {\n\t\tsuper(id, label);\n\n\t\tthis.ipcMsg = ipcMsg;\n\t}\n\n\tpublic run(): TPromise<any> {\n\t\tipc.send(this.ipcMsg); // Handle in browser process\n\n\t\treturn TPromise.as(true);\n\t}\n}\n\nexport const OPEN_FILE_ID = 'workbench.action.files.openFile';\nexport const OPEN_FILE_LABEL = nls.localize('openFile', \"Open File...\");\n\nexport class OpenFileAction extends BaseOpenAction {\n\n\tconstructor(id: string, label: string) {\n\t\tsuper(id, label, 'vscode:openFilePicker');\n\t}\n}\n\nexport const OPEN_FOLDER_ID = 'workbench.action.files.openFolder';\nexport const OPEN_FOLDER_LABEL = nls.localize('openFolder', \"Open Folder...\");\n\nexport class OpenFolderAction extends BaseOpenAction {\n\n\tconstructor(id: string, label: string) {\n\t\tsuper(id, label, 'vscode:openFolderPicker');\n\t}\n\n}\n\nexport const OPEN_FILE_FOLDER_ID = 'workbench.action.files.openFileFolder';\nexport const OPEN_FILE_FOLDER_LABEL = nls.localize('openFileFolder', \"Open...\");\n\nexport class OpenFileFolderAction extends BaseOpenAction {\n\n\tconstructor(id: string, label: string) {\n\t\tsuper(id, label, 'vscode:openFileFolderPicker');\n\t}\n}\n\nexport class ShowOpenedFileInNewWindow extends Action {\n\n\tpublic static ID = 'workbench.action.files.showOpenedFileInNewWindow';\n\tpublic static LABEL = nls.localize('openFileInNewWindow', \"Open Active File in New Window\");\n\n\tconstructor(\n\t\tid:string,\n\t\tlabel: string,\n\t\t@IWorkbenchEditorService private editorService: IWorkbenchEditorService,\n\t\t@IMessageService private messageService: IMessageService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\tpublic run(): TPromise<any> {\n\t\tlet fileInput = asFileEditorInput(this.editorService.getActiveEditorInput(), true);\n\t\tif (fileInput) {\n\t\t\tipc.send('vscode:windowOpen', [fileInput.getResource().fsPath], true /* force new window */); // handled from browser process\n\t\t} else {\n\t\t\tthis.messageService.show(severity.Info, nls.localize('openFileToShow', \"Open a file first to open in new window\"));\n\t\t}\n\n\t\treturn TPromise.as(true);\n\t}\n}"]}