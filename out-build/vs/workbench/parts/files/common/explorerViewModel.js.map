{"version":3,"file":"explorerViewModel.js","sourceRoot":"","sources":["../../../../../../src/vs/workbench/parts/files/common/explorerViewModel.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport assert = require('vs/base/common/assert');\nimport types = require('vs/base/common/types');\nimport URI from 'vs/base/common/uri';\nimport {isLinux} from 'vs/base/common/platform';\nimport paths = require('vs/base/common/paths');\nimport {guessMimeTypes} from 'vs/base/common/mime';\nimport {IFileStat} from 'vs/platform/files/common/files';\n\nexport enum StatType {\n\tFILE,\n\tFOLDER,\n\tANY\n}\n\nexport class FileStat implements IFileStat {\n\tpublic resource: URI;\n\tpublic name: string;\n\tpublic mtime: number;\n\tpublic etag: string;\n\tpublic mime: string;\n\tpublic isDirectory: boolean;\n\tpublic hasChildren: boolean;\n\tpublic children: FileStat[];\n\tpublic parent: FileStat;\n\n\tpublic isDirectoryResolved: boolean;\n\n\tconstructor(resource: URI, isDirectory?: boolean, hasChildren?: boolean, name: string = paths.basename(resource.fsPath), mtime?: number, etag?: string) {\n\t\tthis.resource = resource;\n\t\tthis.name = name;\n\t\tthis.isDirectory = !!isDirectory;\n\t\tthis.hasChildren = isDirectory && hasChildren;\n\t\tthis.mime = !isDirectory ? guessMimeTypes(this.resource.fsPath).join(', ') : void (0);\n\t\tthis.etag = etag;\n\t\tthis.mtime = mtime;\n\n\t\t// Prepare child stat array\n\t\tif (this.isDirectory) {\n\t\t\tthis.children = [];\n\t\t}\n\n\t\tthis.isDirectoryResolved = false;\n\t}\n\n\tpublic getId(): string {\n\t\treturn this.resource.toString();\n\t}\n\n\tpublic static create(raw: IFileStat, resolveTo?: URI[]): FileStat {\n\t\tlet stat = new FileStat(raw.resource, raw.isDirectory, raw.hasChildren, raw.name, raw.mtime, raw.etag);\n\n\t\t// Recursively add children if present\n\t\tif (stat.isDirectory) {\n\n\t\t\t// isDirectoryResolved is a very important indicator in the stat model that tells if the folder was fully resolved\n\t\t\t// the folder is fully resolved if either it has a list of children or the client requested this by using the resolveTo\n\t\t\t// array of resource path to resolve.\n\t\t\tstat.isDirectoryResolved = !!raw.children || (!!resolveTo && resolveTo.some((r) => {\n\t\t\t\treturn paths.isEqualOrParent(r.fsPath, stat.resource.fsPath);\n\t\t\t}));\n\n\t\t\t// Recurse into children\n\t\t\tif (raw.children) {\n\t\t\t\tfor (let i = 0, len = raw.children.length; i < len; i++) {\n\t\t\t\t\tlet child = FileStat.create(raw.children[i], resolveTo);\n\t\t\t\t\tchild.parent = stat;\n\t\t\t\t\tstat.children.push(child);\n\t\t\t\t\tstat.hasChildren = stat.children.length > 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn stat;\n\t}\n\n\t/**\n\t * Merges the stat which was resolved from the disk with the local stat by copying over properties\n\t * and children. The merge will only consider resolved stat elements to avoid overwriting data which\n\t * exists locally.\n\t */\n\tpublic static mergeLocalWithDisk(disk: FileStat, local: FileStat): void {\n\t\tassert.ok(disk.resource.toString() === local.resource.toString(), 'Merging only supported for stats with the same resource');\n\n\t\t// Stop merging when a folder is not resolved to avoid loosing local data\n\t\tlet mergingDirectories = disk.isDirectory || local.isDirectory;\n\t\tif (mergingDirectories && local.isDirectoryResolved && !disk.isDirectoryResolved) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Properties\n\t\tlocal.resource = disk.resource;\n\t\tlocal.name = disk.name;\n\t\tlocal.isDirectory = disk.isDirectory;\n\t\tlocal.hasChildren = disk.isDirectory && disk.hasChildren;\n\t\tlocal.mtime = disk.mtime;\n\t\tlocal.mime = disk.mime;\n\t\tlocal.isDirectoryResolved = disk.isDirectoryResolved;\n\n\t\t// Merge Children if resolved\n\t\tif (mergingDirectories && disk.isDirectoryResolved) {\n\n\t\t\t// Map resource => stat\n\t\t\tlet oldLocalChildren: { [resource: string]: FileStat; } = Object.create(null);\n\t\t\tlocal.children.forEach((localChild: FileStat) => {\n\t\t\t\toldLocalChildren[localChild.resource.toString()] = localChild;\n\t\t\t});\n\n\t\t\t// Clear current children\n\t\t\tlocal.children = [];\n\n\t\t\t// Merge received children\n\t\t\tdisk.children.forEach((diskChild: FileStat) => {\n\t\t\t\tlet formerLocalChild = oldLocalChildren[diskChild.resource.toString()];\n\n\t\t\t\t// Existing child: merge\n\t\t\t\tif (formerLocalChild) {\n\t\t\t\t\tFileStat.mergeLocalWithDisk(diskChild, formerLocalChild);\n\t\t\t\t\tformerLocalChild.parent = local;\n\t\t\t\t\tlocal.children.push(formerLocalChild);\n\t\t\t\t}\n\n\t\t\t\t// New child: add\n\t\t\t\telse {\n\t\t\t\t\tdiskChild.parent = local;\n\t\t\t\t\tlocal.children.push(diskChild);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Returns a deep copy of this model object.\n\t */\n\tpublic clone(): FileStat {\n\t\tlet stat = new FileStat(URI.parse(this.resource.toString()), this.isDirectory, this.hasChildren, this.name, this.mtime, this.etag);\n\t\tstat.isDirectoryResolved = this.isDirectoryResolved;\n\n\t\tif (this.parent) {\n\t\t\tstat.parent = this.parent;\n\t\t}\n\n\t\tif (this.isDirectory) {\n\t\t\tthis.children.forEach((child: FileStat) => {\n\t\t\t\tstat.addChild(child.clone());\n\t\t\t});\n\t\t}\n\n\t\treturn stat;\n\t}\n\n\t/**\n\t * Adds a child element to this folder.\n\t */\n\tpublic addChild(child: FileStat): void {\n\t\tassert.ok(this.isDirectory, 'Can only add a child to a folder');\n\n\t\t// Overwrite a previous child with the same name\n\t\tthis.removeChild(child);\n\n\t\t// Inherit some parent properties to child\n\t\tchild.parent = this;\n\t\tchild.updateResource(false);\n\n\t\tthis.children.push(child);\n\t\tthis.hasChildren = this.children.length > 0;\n\t}\n\n\t/**\n\t * Returns true if this stat is a directory that contains a child with the given name.\n\t *\n\t * @param ignoreCase if true, will check for the name ignoring case.\n\t * @param type the type of stat to check for.\n\t */\n\tpublic hasChild(name: string, ignoreCase?: boolean, type: StatType = StatType.ANY): boolean {\n\t\tassert.ok(this.isDirectory, 'Can only call hasChild on a directory');\n\t\tassert.ok(types.isString(name), 'Expected parameter of type String');\n\n\t\tfor (let i = 0; i < this.children.length; i++) {\n\t\t\tlet child = this.children[i];\n\t\t\tif ((type === StatType.FILE && child.isDirectory) || (type === StatType.FOLDER && !child.isDirectory)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Check for Identity\n\t\t\tif (child.name === name) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t// Also consider comparing without case\n\t\t\tif (ignoreCase && child.name.toLowerCase() === name.toLowerCase()) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Removes a child element from this folder.\n\t */\n\tpublic removeChild(child: FileStat): void {\n\t\tassert.ok(this.isDirectory, 'Can only remove a child from a directory');\n\t\tassert.ok(!!this.children, 'Expected children for directory but found none: ' + this.resource.fsPath);\n\n\t\tfor (let i = 0; i < this.children.length; i++) {\n\t\t\tif (this.children[i].resource.toString() === child.resource.toString()) {\n\t\t\t\tthis.children.splice(i, 1);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tthis.hasChildren = this.children.length > 0;\n\t}\n\n\t/**\n\t * Moves this element under a new parent element.\n\t */\n\tpublic move(newParent: FileStat, fnBetweenStates?: (callback: () => void) => void, fnDone?: () => void): void {\n\t\tassert.ok(newParent.isDirectory, 'Can only move an element into a directory');\n\n\t\tif (!fnBetweenStates) {\n\t\t\tfnBetweenStates = (cb: () => void) => { cb(); };\n\t\t}\n\n\t\tthis.parent.removeChild(this);\n\n\t\tfnBetweenStates(() => {\n\t\t\tnewParent.addChild(this);\n\t\t\tthis.updateResource(true);\n\t\t\tif (fnDone) {\n\t\t\t\tfnDone();\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate updateResource(recursive: boolean): void {\n\t\tthis.resource = URI.file(paths.join(this.parent.resource.fsPath, this.name));\n\n\t\tif (recursive) {\n\t\t\tif (this.isDirectory && this.hasChildren && this.children) {\n\t\t\t\tthis.children.forEach((child: FileStat) => {\n\t\t\t\t\tchild.updateResource(true);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Tells this stat that it was renamed. This requires changes to all children of this stat (if any)\n\t * so that the path property can be updated properly.\n\t */\n\tpublic rename(renamedStat: IFileStat): void {\n\n\t\t// Merge a subset of Properties that can change on rename\n\t\tthis.name = renamedStat.name;\n\t\tthis.mime = renamedStat.mime;\n\t\tthis.mtime = renamedStat.mtime;\n\n\t\t// Update Paths including children\n\t\tthis.updateResource(true);\n\t}\n\n\t/**\n\t * Returns a child stat from this stat that matches with the provided path.\n\t * Will return \"null\" in case the child does not exist.\n\t */\n\tpublic find(resource: URI): FileStat {\n\n\t\t// Return if path found\n\t\tif (this.fileResourceEquals(resource, this.resource)) {\n\t\t\treturn this;\n\t\t}\n\n\t\t// Return if not having any children\n\t\tif (!this.hasChildren) {\n\t\t\treturn null;\n\t\t}\n\n\t\tfor (let i = 0; i < this.children.length; i++) {\n\t\t\tlet child = this.children[i];\n\n\t\t\tif (this.fileResourceEquals(resource, child.resource)) {\n\t\t\t\treturn child;\n\t\t\t}\n\n\t\t\tif (child.isDirectory && paths.isEqualOrParent(resource.fsPath, child.resource.fsPath)) {\n\t\t\t\treturn child.find(resource);\n\t\t\t}\n\t\t}\n\n\t\treturn null; //Unable to find\n\t}\n\n\tprivate fileResourceEquals(r1: URI, r2: URI) {\n\t\tconst identityEquals = (r1.toString() === r2.toString());\n\t\tif (isLinux || identityEquals) {\n\t\t\treturn identityEquals;\n\t\t}\n\n\t\treturn r1.toString().toLowerCase() === r2.toString().toLowerCase();\n\t}\n}\n\n/* A helper that can be used to show a placeholder when creating a new stat */\nexport class NewStatPlaceholder extends FileStat {\n\n\tprivate static ID = 0;\n\n\tprivate id: number;\n\n\tconstructor(isDirectory: boolean) {\n\t\tsuper(URI.file(''));\n\n\t\tthis.id = NewStatPlaceholder.ID++;\n\t\tthis.isDirectoryResolved = isDirectory;\n\t}\n\n\tpublic destroy(): void {\n\t\tthis.parent.removeChild(this);\n\n\t\tthis.isDirectoryResolved = void 0;\n\t\tthis.name = void 0;\n\t\tthis.isDirectory = void 0;\n\t\tthis.hasChildren = void 0;\n\t\tthis.mtime = void 0;\n\t\tthis.mime = void 0;\n\t}\n\n\tpublic getId(): string {\n\t\treturn 'new-stat-placeholder:' + this.id + ':' + this.parent.resource.toString();\n\t}\n\n\t/**\n\t * Returns a deep copy of this model object.\n\t */\n\tpublic clone(): NewStatPlaceholder {\n\t\tlet stat = new NewStatPlaceholder(this.isDirectory);\n\t\tstat.parent = this.parent;\n\n\t\treturn stat;\n\t}\n\n\tpublic addChild(child: NewStatPlaceholder): void {\n\t\tthrow new Error('Can\\'t perform operations in NewStatPlaceholder.');\n\t}\n\n\tpublic hasChild(name: string, ignoreCase?: boolean): boolean {\n\t\treturn false;\n\t}\n\n\tpublic removeChild(child: NewStatPlaceholder): void {\n\t\tthrow new Error('Can\\'t perform operations in NewStatPlaceholder.');\n\t}\n\n\tpublic move(newParent: NewStatPlaceholder): void {\n\t\tthrow new Error('Can\\'t perform operations in NewStatPlaceholder.');\n\t}\n\n\tpublic rename(renamedStat: NewStatPlaceholder): void {\n\t\tthrow new Error('Can\\'t perform operations in NewStatPlaceholder.');\n\t}\n\n\tpublic find(resource: URI): NewStatPlaceholder {\n\t\treturn null;\n\t}\n\n\tpublic static addNewStatPlaceholder(parent: FileStat, isDirectory: boolean): NewStatPlaceholder {\n\t\tassert.ok(parent.isDirectory, 'Can only add a child to a folder');\n\n\t\tlet child = new NewStatPlaceholder(isDirectory);\n\n\t\t// Inherit some parent properties to child\n\t\tchild.parent = parent;\n\t\tparent.children.push(child);\n\n\t\tparent.hasChildren = parent.children.length > 0;\n\n\t\treturn child;\n\t}\n}"]}