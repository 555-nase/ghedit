{"version":3,"sources":["vs/workbench/parts/files/common/editors/textFileEditorModel.ts"],"names":[],"mappings":"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","file":"vs/workbench/parts/files/common/editors/textFileEditorModel.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport nls = require('vs/nls');\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport {onUnexpectedError, toErrorMessage} from 'vs/base/common/errors';\nimport URI from 'vs/base/common/uri';\nimport {IDisposable} from 'vs/base/common/lifecycle';\nimport paths = require('vs/base/common/paths');\nimport diagnostics = require('vs/base/common/diagnostics');\nimport types = require('vs/base/common/types');\nimport {IModelContentChangedEvent, EventType as EditorEventType} from 'vs/editor/common/editorCommon';\nimport {IMode} from 'vs/editor/common/modes';\nimport {EventType as WorkbenchEventType, ResourceEvent} from 'vs/workbench/common/events';\nimport {LocalFileChangeEvent, EventType as FileEventType, TextFileChangeEvent, ITextFileService, IAutoSaveConfiguration} from 'vs/workbench/parts/files/common/files';\nimport {EncodingMode, EditorModel, IEncodingSupport} from 'vs/workbench/common/editor';\nimport {BaseTextEditorModel} from 'vs/workbench/common/editor/textEditorModel';\nimport {IFileService, IFileStat, IFileOperationResult, FileOperationResult, IContent} from 'vs/platform/files/common/files';\nimport {IEventService} from 'vs/platform/event/common/event';\nimport {IInstantiationService} from 'vs/platform/instantiation/common/instantiation';\nimport {IMessageService, Severity} from 'vs/platform/message/common/message';\nimport {IModeService} from 'vs/editor/common/services/modeService';\nimport {IModelService} from 'vs/editor/common/services/modelService';\nimport {ITelemetryService, anonymize} from 'vs/platform/telemetry/common/telemetry';\n\n/**\n * The save error handler can be installed on the text text file editor model to install code that executes when save errors occur.\n */\nexport interface ISaveErrorHandler {\n\n\t/**\n\t * Called whenever a save fails.\n\t */\n\tonSaveError(error: any, model: TextFileEditorModel): void;\n}\n\nclass DefaultSaveErrorHandler implements ISaveErrorHandler {\n\n\tconstructor( @IMessageService private messageService: IMessageService) { }\n\n\tpublic onSaveError(error: any, model: TextFileEditorModel): void {\n\t\tthis.messageService.show(Severity.Error, nls.localize('genericSaveError', \"Failed to save '{0}': {1}\", paths.basename(model.getResource().fsPath), toErrorMessage(error, false)));\n\t}\n}\n\n// Diagnostics support\nlet diag: (...args: any[]) => void;\nif (!diag) {\n\tdiag = diagnostics.register('TextFileEditorModelDiagnostics', function(...args: any[]) {\n\t\tconsole.log(args[1] + ' - ' + args[0] + ' (time: ' + args[2].getTime() + ' [' + args[2].toUTCString() + '])');\n\t});\n}\n\n/**\n * States the text text file editor model can be in.\n */\nexport enum State {\n\tSAVED,\n\tDIRTY,\n\tPENDING_SAVE,\n\tCONFLICT,\n\tERROR\n}\n\n/**\n * The text file editor model listens to changes to its underlying code editor model and saves these changes through the file service back to the disk.\n */\nexport class TextFileEditorModel extends BaseTextEditorModel implements IEncodingSupport {\n\n\tpublic static ID = 'workbench.editors.files.textFileEditorModel';\n\n\tprivate static saveErrorHandler: ISaveErrorHandler;\n\n\tprivate resource: URI;\n\tprivate contentEncoding: string; \t\t\t// encoding as reported from disk\n\tprivate preferredEncoding: string;\t\t\t// encoding as chosen by the user\n\tprivate textModelChangeListener: () => void;\n\tprivate textFileServiceListener: IDisposable;\n\tprivate dirty: boolean;\n\tprivate versionId: number;\n\tprivate bufferSavedVersionId: number;\n\tprivate versionOnDiskStat: IFileStat;\n\tprivate blockModelContentChange: boolean;\n\tprivate autoSaveAfterMillies: number;\n\tprivate autoSaveAfterMilliesEnabled: boolean;\n\tprivate autoSavePromises: TPromise<void>[];\n\tprivate mapPendingSaveToVersionId: { [versionId: string]: TPromise<void> };\n\tprivate disposed: boolean;\n\tprivate inConflictResolutionMode: boolean;\n\tprivate inErrorMode: boolean;\n\tprivate lastDirtyTime: number;\n\tprivate createTextEditorModelPromise: TPromise<TextFileEditorModel>;\n\n\tconstructor(\n\t\tresource: URI,\n\t\tpreferredEncoding: string,\n\t\t@IMessageService private messageService: IMessageService,\n\t\t@IModeService modeService: IModeService,\n\t\t@IModelService modelService: IModelService,\n\t\t@IEventService private eventService: IEventService,\n\t\t@IFileService private fileService: IFileService,\n\t\t@IInstantiationService private instantiationService: IInstantiationService,\n\t\t@ITelemetryService private telemetryService: ITelemetryService,\n\t\t@ITextFileService private textFileService: ITextFileService\n\t) {\n\t\tsuper(modelService, modeService);\n\n\t\tthis.resource = resource;\n\t\tif (this.resource.scheme !== 'file') {\n\t\t\tthrow new Error('TextFileEditorModel can only handle file:// resources.');\n\t\t}\n\n\t\tthis.preferredEncoding = preferredEncoding;\n\t\tthis.textModelChangeListener = null;\n\t\tthis.dirty = false;\n\t\tthis.autoSavePromises = [];\n\t\tthis.versionId = 0;\n\t\tthis.lastDirtyTime = 0;\n\t\tthis.mapPendingSaveToVersionId = {};\n\n\t\tthis.updateAutoSaveConfiguration(textFileService.getAutoSaveConfiguration());\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis.textFileServiceListener = this.textFileService.onAutoSaveConfigurationChange(config => this.updateAutoSaveConfiguration(config));\n\t}\n\n\tprivate updateAutoSaveConfiguration(config: IAutoSaveConfiguration): void {\n\t\tif (typeof config.autoSaveDelay === 'number' && config.autoSaveDelay > 0) {\n\t\t\tthis.autoSaveAfterMillies = config.autoSaveDelay;\n\t\t\tthis.autoSaveAfterMilliesEnabled = true;\n\t\t} else {\n\t\t\tthis.autoSaveAfterMillies = void 0;\n\t\t\tthis.autoSaveAfterMilliesEnabled = false;\n\t\t}\n\t}\n\n\t/**\n\t * Set a save error handler to install code that executes when save errors occur.\n\t */\n\tpublic static setSaveErrorHandler(handler: ISaveErrorHandler): void {\n\t\tTextFileEditorModel.saveErrorHandler = handler;\n\t}\n\n\t/**\n\t * When set, will disable any saving (including auto save) until the model is loaded again. This allows to resolve save conflicts\n\t * without running into subsequent save errors when editing the model.\n\t */\n\tpublic setConflictResolutionMode(): void {\n\t\tdiag('setConflictResolutionMode() - enabled conflict resolution mode', this.resource, new Date());\n\n\t\tthis.inConflictResolutionMode = true;\n\t}\n\n\t/**\n\t * Answers if this model is currently in conflic resolution mode or not.\n\t */\n\tpublic isInConflictResolutionMode(): boolean {\n\t\treturn this.inConflictResolutionMode;\n\t}\n\n\t/**\n\t * Discards any local changes and replaces the model with the contents of the version on disk.\n\t */\n\tpublic revert(): TPromise<void> {\n\t\tif (!this.isResolved()) {\n\t\t\treturn TPromise.as<void>(null);\n\t\t}\n\n\t\t// Cancel any running auto-saves\n\t\tthis.cancelAutoSavePromises();\n\n\t\t// Be prepared to send out a file change event in case reverting changes anything\n\t\tlet oldStat = this.cloneStat(this.versionOnDiskStat);\n\n\t\t// Unset flags\n\t\tlet undo = this.setDirty(false);\n\n\t\t// Reload\n\t\treturn this.load(true /* force */).then(() => {\n\n\t\t\t// Emit file change event\n\t\t\tthis.emitEvent(FileEventType.FILE_REVERTED, new TextFileChangeEvent(this.textEditorModel, oldStat, this.versionOnDiskStat));\n\t\t}, (error) => {\n\n\t\t\t// FileNotFound means the file got deleted meanwhile, so emit revert event because thats ok\n\t\t\tif ((<IFileOperationResult>error).fileOperationResult === FileOperationResult.FILE_NOT_FOUND) {\n\t\t\t\tthis.emitEvent(FileEventType.FILE_REVERTED, new TextFileChangeEvent(this.textEditorModel, oldStat, this.versionOnDiskStat));\n\t\t\t}\n\n\t\t\t// Set flags back to previous values, we are still dirty if revert failed and we where\n\t\t\telse {\n\t\t\t\tundo();\n\t\t\t}\n\n\t\t\treturn TPromise.wrapError(error);\n\t\t});\n\t}\n\n\tpublic load(force?: boolean /* bypass any caches and really go to disk */): TPromise<EditorModel> {\n\t\tdiag('load() - enter', this.resource, new Date());\n\n\t\t// It is very important to not reload the model when the model is dirty. We only want to reload the model from the disk\n\t\t// if no save is pending to avoid data loss. This might cause a save conflict in case the file has been modified on the disk\n\t\t// meanwhile, but this is a very low risk.\n\t\tif (this.dirty) {\n\t\t\tdiag('load() - exit - without loading because model is dirty', this.resource, new Date());\n\n\t\t\treturn TPromise.as(this);\n\t\t}\n\n\t\t// Decide on etag\n\t\tlet etag: string;\n\t\tif (force) {\n\t\t\tetag = undefined; // bypass cache if force loading is true\n\t\t} else if (this.versionOnDiskStat) {\n\t\t\tetag = this.versionOnDiskStat.etag; // otherwise respect etag to support caching\n\t\t}\n\n\t\t// Resolve Content\n\t\treturn this.fileService.resolveContent(this.resource, { acceptTextOnly: true, etag: etag, encoding: this.preferredEncoding }).then((content: IContent) => {\n\t\t\tdiag('load() - resolved content', this.resource, new Date());\n\n\t\t\t// Telemetry\n\t\t\tthis.telemetryService.publicLog('fileGet', { mimeType: content.mime, ext: paths.extname(this.resource.fsPath), path: anonymize(this.resource.fsPath) });\n\n\t\t\t// Update our resolved disk stat model\n\t\t\tlet resolvedStat: IFileStat = {\n\t\t\t\tresource: this.resource,\n\t\t\t\tname: content.name,\n\t\t\t\tmtime: content.mtime,\n\t\t\t\tetag: content.etag,\n\t\t\t\tmime: content.mime,\n\t\t\t\tisDirectory: false,\n\t\t\t\thasChildren: false,\n\t\t\t\tchildren: void 0,\n\t\t\t};\n\t\t\tthis.updateVersionOnDiskStat(resolvedStat);\n\n\t\t\t// Keep the original encoding to not loose it when saving\n\t\t\tlet oldEncoding = this.contentEncoding;\n\t\t\tthis.contentEncoding = content.encoding;\n\n\t\t\t// Handle events if encoding changed\n\t\t\tif (this.preferredEncoding) {\n\t\t\t\tthis.updatePreferredEncoding(this.contentEncoding); // make sure to reflect the real encoding of the file (never out of sync)\n\t\t\t} else if (oldEncoding !== this.contentEncoding) {\n\t\t\t\tthis.eventService.emit(WorkbenchEventType.RESOURCE_ENCODING_CHANGED, new ResourceEvent(this.resource));\n\t\t\t}\n\n\t\t\t// Update Existing Model\n\t\t\tif (this.textEditorModel) {\n\t\t\t\tdiag('load() - updated text editor model', this.resource, new Date());\n\n\t\t\t\tthis.setDirty(false); // Ensure we are not tracking a stale state\n\n\t\t\t\tthis.blockModelContentChange = true;\n\t\t\t\ttry {\n\t\t\t\t\tthis.updateTextEditorModel(content.value);\n\t\t\t\t} finally {\n\t\t\t\t\tthis.blockModelContentChange = false;\n\t\t\t\t}\n\n\t\t\t\treturn TPromise.as<EditorModel>(this);\n\t\t\t}\n\n\t\t\t// Join an existing request to create the editor model to avoid race conditions\n\t\t\telse if (this.createTextEditorModelPromise) {\n\t\t\t\tdiag('load() - join existing text editor model promise', this.resource, new Date());\n\n\t\t\t\treturn this.createTextEditorModelPromise;\n\t\t\t}\n\n\t\t\t// Create New Model\n\t\t\telse {\n\t\t\t\tdiag('load() - created text editor model', this.resource, new Date());\n\n\t\t\t\tthis.createTextEditorModelPromise = this.createTextEditorModel(content.value, content.resource).then(() => {\n\t\t\t\t\tthis.createTextEditorModelPromise = null;\n\n\t\t\t\t\tthis.setDirty(false); // Ensure we are not tracking a stale state\n\t\t\t\t\tthis.textModelChangeListener = this.textEditorModel.addListener(EditorEventType.ModelContentChanged, (e: IModelContentChangedEvent) => this.onModelContentChanged(e));\n\n\t\t\t\t\treturn this;\n\t\t\t\t}, (error) => {\n\t\t\t\t\tthis.createTextEditorModelPromise = null;\n\n\t\t\t\t\treturn TPromise.wrapError(error);\n\t\t\t\t});\n\n\t\t\t\treturn this.createTextEditorModelPromise;\n\t\t\t}\n\t\t}, (error) => {\n\n\t\t\t// NotModified status code is expected and can be handled gracefully\n\t\t\tif ((<IFileOperationResult>error).fileOperationResult === FileOperationResult.FILE_NOT_MODIFIED_SINCE) {\n\t\t\t\tthis.setDirty(false); // Ensure we are not tracking a stale state\n\n\t\t\t\treturn TPromise.as<EditorModel>(this);\n\t\t\t}\n\n\t\t\t// Otherwise bubble up the error\n\t\t\treturn TPromise.wrapError(error);\n\t\t});\n\t}\n\n\tprotected getOrCreateMode(modeService: IModeService, preferredModeIds: string, firstLineText?: string): TPromise<IMode> {\n\t\treturn modeService.getOrCreateModeByFilenameOrFirstLine(this.resource.fsPath, firstLineText);\n\t}\n\n\tprivate onModelContentChanged(e: IModelContentChangedEvent): void {\n\t\tdiag('onModelContentChanged(' + e.changeType + ') - enter', this.resource, new Date());\n\n\t\t// In any case increment the version id because it tracks the textual content state of the model at all times\n\t\tthis.versionId++;\n\t\tdiag('onModelContentChanged() - new versionId ' + this.versionId, this.resource, new Date());\n\n\t\t// Ignore if blocking model changes\n\t\tif (this.blockModelContentChange) {\n\t\t\treturn;\n\t\t}\n\n\t\t// The contents changed as a matter of Undo and the version reached matches the saved one\n\t\t// In this case we clear the dirty flag and emit a SAVED event to indicate this state.\n\t\t// Note: we currently only do this check when auto-save is turned off because there you see\n\t\t// a dirty indicator that you want to get rid of when undoing to the saved version.\n\t\tif (!this.autoSaveAfterMilliesEnabled && this.textEditorModel.getAlternativeVersionId() === this.bufferSavedVersionId) {\n\t\t\tdiag('onModelContentChanged() - model content changed back to last saved version', this.resource, new Date());\n\n\t\t\t// Clear flags\n\t\t\tthis.setDirty(false);\n\n\t\t\t// Emit event\n\t\t\tthis.emitEvent(FileEventType.FILE_REVERTED, new TextFileChangeEvent(this.textEditorModel, this.versionOnDiskStat));\n\n\t\t\treturn;\n\t\t}\n\n\t\tdiag('onModelContentChanged() - model content changed and marked as dirty', this.resource, new Date());\n\n\t\t// Mark as dirty\n\t\tthis.makeDirty(e);\n\n\t\t// Start auto save process unless we are in conflict resolution mode and unless it is disabled\n\t\tif (this.autoSaveAfterMilliesEnabled) {\n\t\t\tif (!this.inConflictResolutionMode) {\n\t\t\t\tthis.doAutoSave(this.versionId);\n\t\t\t} else {\n\t\t\t\tdiag('makeDirty() - prevented save because we are in conflict resolution mode', this.resource, new Date());\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate makeDirty(e?: IModelContentChangedEvent): void {\n\n\t\t// Track dirty state and version id\n\t\tlet wasDirty = this.dirty;\n\t\tthis.setDirty(true);\n\t\tthis.lastDirtyTime = new Date().getTime();\n\n\t\t// Emit as Event if we turned dirty\n\t\tif (!wasDirty) {\n\t\t\tlet stat = this.cloneStat(this.versionOnDiskStat);\n\t\t\tthis.emitEvent(FileEventType.FILE_DIRTY, new TextFileChangeEvent(this.textEditorModel, stat, stat, <any>e));\n\t\t}\n\t}\n\n\tprivate doAutoSave(versionId: number): TPromise<void> {\n\t\tdiag('doAutoSave() - enter for versionId ' + versionId, this.resource, new Date());\n\n\t\t// Cancel any currently running auto saves to make this the one that succeeds\n\t\tthis.cancelAutoSavePromises();\n\n\t\t// Create new save promise and keep it\n\t\tlet promise: TPromise<void> = TPromise.timeout(this.autoSaveAfterMillies).then(() => {\n\n\t\t\t// Only trigger save if the version id has not changed meanwhile\n\t\t\tif (versionId === this.versionId) {\n\t\t\t\tthis.doSave(versionId, true); // Very important here to not return the promise because if the timeout promise is canceled it will bubble up the error otherwise - do not change\n\t\t\t}\n\t\t});\n\n\t\tthis.autoSavePromises.push(promise);\n\n\t\treturn promise;\n\t}\n\n\tprivate cancelAutoSavePromises(): void {\n\t\twhile (this.autoSavePromises.length) {\n\t\t\tthis.autoSavePromises.pop().cancel();\n\t\t}\n\t}\n\n\t/**\n\t * Saves the current versionId of this editor model if it is dirty.\n\t */\n\tpublic save(overwriteReadonly?: boolean, overwriteEncoding?: boolean): TPromise<void> {\n\t\tif (!this.isResolved()) {\n\t\t\treturn TPromise.as<void>(null);\n\t\t}\n\n\t\tdiag('save() - enter', this.resource, new Date());\n\n\t\t// Cancel any currently running auto saves to make this the one that succeeds\n\t\tthis.cancelAutoSavePromises();\n\n\t\treturn this.doSave(this.versionId, false, overwriteReadonly, overwriteEncoding);\n\t}\n\n\tprivate doSave(versionId: number, isAutoSave: boolean, overwriteReadonly?: boolean, overwriteEncoding?: boolean): TPromise<void> {\n\t\tdiag('doSave(' + versionId + ') - enter with versionId ' + versionId, this.resource, new Date());\n\n\t\t// Lookup any running pending save for this versionId and return it if found\n\t\tlet pendingSave = this.mapPendingSaveToVersionId[versionId];\n\t\tif (pendingSave) {\n\t\t\tdiag('doSave(' + versionId + ') - exit - found a pending save for versionId ' + versionId, this.resource, new Date());\n\n\t\t\treturn pendingSave;\n\t\t}\n\n\t\t// Return early if not dirty or version changed meanwhile\n\t\tif (!this.dirty || versionId !== this.versionId) {\n\t\t\tdiag('doSave(' + versionId + ') - exit - because not dirty and/or versionId is different (this.isDirty: ' + this.dirty + ', this.versionId: ' + this.versionId + ')', this.resource, new Date());\n\n\t\t\treturn TPromise.as<void>(null);\n\t\t}\n\n\t\t// Return if currently saving by scheduling another auto save. Never ever must 2 saves execute at the same time because\n\t\t// this can lead to dirty writes and race conditions\n\t\tif (this.isBusySaving()) {\n\t\t\tdiag('doSave(' + versionId + ') - exit - because busy saving', this.resource, new Date());\n\n\t\t\t// Avoid endless loop here and guard if auto save is disabled\n\t\t\tif (this.autoSaveAfterMilliesEnabled) {\n\t\t\t\treturn this.doAutoSave(versionId);\n\t\t\t}\n\t\t}\n\n\t\t// Push all edit operations to the undo stack so that the user has a chance to\n\t\t// Ctrl+Z back to the saved version. We only do this when auto-save is turned off\n\t\tif (!this.autoSaveAfterMilliesEnabled) {\n\t\t\tthis.textEditorModel.pushStackElement();\n\t\t}\n\n\t\t// Emit file saving event: Listeners can still change the model now and since we are so close to saving\n\t\t// we do not want to trigger another auto save or similar, so we block this\n\t\t// In addition we update our version right after in case it changed because of a model change\n\t\tlet versionOnDiskStatClone = this.cloneStat(this.versionOnDiskStat);\n\t\tthis.blockModelContentChange = true;\n\t\ttry {\n\t\t\tconst saveEvent = new TextFileChangeEvent(this.textEditorModel, versionOnDiskStatClone);\n\t\t\tsaveEvent.setAutoSaved(isAutoSave);\n\t\t\tthis.emitEvent(FileEventType.FILE_SAVING, saveEvent);\n\t\t} finally {\n\t\t\tthis.blockModelContentChange = false;\n\t\t}\n\t\tversionId = this.versionId;\n\n\t\t// Clear error flag since we are trying to save again\n\t\tthis.inErrorMode = false;\n\n\t\t// Save to Disk\n\t\tdiag('doSave(' + versionId + ') - before updateContent()', this.resource, new Date());\n\t\tthis.mapPendingSaveToVersionId[versionId] = this.fileService.updateContent(this.versionOnDiskStat.resource, this.getValue(), {\n\t\t\toverwriteReadonly: overwriteReadonly,\n\t\t\toverwriteEncoding: overwriteEncoding,\n\t\t\tmtime: this.versionOnDiskStat.mtime,\n\t\t\tencoding: this.getEncoding(),\n\t\t\tetag: this.versionOnDiskStat.etag\n\t\t}).then((stat: IFileStat) => {\n\t\t\tdiag('doSave(' + versionId + ') - after updateContent()', this.resource, new Date());\n\n\t\t\t// Telemetry\n\t\t\tthis.telemetryService.publicLog('filePUT', { mimeType: stat.mime, ext: paths.extname(this.versionOnDiskStat.resource.fsPath) });\n\n\t\t\t// Remove from pending saves\n\t\t\tdelete this.mapPendingSaveToVersionId[versionId];\n\n\t\t\t// Update dirty state unless model has changed meanwhile\n\t\t\tif (versionId === this.versionId) {\n\t\t\t\tdiag('doSave(' + versionId + ') - setting dirty to false because versionId did not change', this.resource, new Date());\n\t\t\t\tthis.setDirty(false);\n\t\t\t} else {\n\t\t\t\tdiag('doSave(' + versionId + ') - not setting dirty to false because versionId did change meanwhile', this.resource, new Date());\n\t\t\t}\n\n\t\t\t// Updated resolved stat with updated stat, and keep old for event\n\t\t\tlet oldStat = this.versionOnDiskStat;\n\t\t\tthis.updateVersionOnDiskStat(stat);\n\n\t\t\t// Emit File Change Event\n\t\t\tlet oldValue = this.cloneStat(oldStat);\n\t\t\tlet newValue = this.cloneStat(this.versionOnDiskStat);\n\t\t\tthis.emitEvent('files.internal:fileChanged', new TextFileChangeEvent(this.textEditorModel, oldValue, newValue));\n\n\t\t\t// Emit File Saved Event\n\t\t\tthis.emitEvent(FileEventType.FILE_SAVED, new TextFileChangeEvent(this.textEditorModel, oldValue, newValue));\n\t\t}, (error) => {\n\t\t\tdiag('doSave(' + versionId + ') - exit - resulted in a save error: ' + error.toString(), this.resource, new Date());\n\n\t\t\t// Remove from pending saves\n\t\t\tdelete this.mapPendingSaveToVersionId[versionId];\n\n\t\t\t// Flag as error state\n\t\t\tthis.inErrorMode = true;\n\n\t\t\t// Show to user\n\t\t\tthis.onSaveError(error);\n\n\t\t\t// Emit as event\n\t\t\tthis.emitEvent(FileEventType.FILE_SAVE_ERROR, new TextFileChangeEvent(this.textEditorModel, versionOnDiskStatClone));\n\t\t});\n\n\t\treturn this.mapPendingSaveToVersionId[versionId];\n\t}\n\n\tprivate setDirty(dirty: boolean): () => void {\n\t\tlet wasDirty = this.dirty;\n\t\tlet wasInConflictResolutionMode = this.inConflictResolutionMode;\n\t\tlet wasInErrorMode = this.inErrorMode;\n\t\tlet oldBufferSavedVersionId = this.bufferSavedVersionId;\n\n\t\tif (!dirty) {\n\t\t\tthis.dirty = false;\n\t\t\tthis.inConflictResolutionMode = false;\n\t\t\tthis.inErrorMode = false;\n\n\t\t\t// we remember the models alternate version id to remember when the version\n\t\t\t// of the model matches with the saved version on disk. we need to keep this\n\t\t\t// in order to find out if the model changed back to a saved version (e.g.\n\t\t\t// when undoing long enough to reach to a version that is saved and then to\n\t\t\t// clear the dirty flag)\n\t\t\tif (this.textEditorModel) {\n\t\t\t\tthis.bufferSavedVersionId = this.textEditorModel.getAlternativeVersionId();\n\t\t\t}\n\t\t} else {\n\t\t\tthis.dirty = true;\n\t\t}\n\n\t\t// Return function to revert this call\n\t\treturn () => {\n\t\t\tthis.dirty = wasDirty;\n\t\t\tthis.inConflictResolutionMode = wasInConflictResolutionMode;\n\t\t\tthis.inErrorMode = wasInErrorMode;\n\t\t\tthis.bufferSavedVersionId = oldBufferSavedVersionId;\n\t\t};\n\t}\n\n\tprivate updateVersionOnDiskStat(newVersionOnDiskStat: IFileStat): void {\n\n\t\t// First resolve - just take\n\t\tif (!this.versionOnDiskStat) {\n\t\t\tthis.versionOnDiskStat = newVersionOnDiskStat;\n\t\t}\n\n\t\t// Subsequent resolve - make sure that we only assign it if the mtime is equal or has advanced.\n\t\t// This is essential a If-Modified-Since check on the client ot prevent race conditions from loading\n\t\t// and saving. If a save comes in late after a revert was called, the mtime could be out of sync.\n\t\telse if (this.versionOnDiskStat.mtime <= newVersionOnDiskStat.mtime) {\n\t\t\tthis.versionOnDiskStat = newVersionOnDiskStat;\n\t\t}\n\t}\n\n\tprivate onSaveError(error: any): void {\n\n\t\t// Prepare handler\n\t\tif (!TextFileEditorModel.saveErrorHandler) {\n\t\t\tTextFileEditorModel.setSaveErrorHandler(this.instantiationService.createInstance(DefaultSaveErrorHandler));\n\t\t}\n\n\t\t// Handle\n\t\tTextFileEditorModel.saveErrorHandler.onSaveError(error, this);\n\t}\n\n\tprivate emitEvent(type: string, event: LocalFileChangeEvent): void {\n\t\ttry {\n\t\t\tthis.eventService.emit(type, event);\n\t\t} catch (e) {\n\t\t\te.friendlyMessage = nls.localize('unexpectedEventError', \"An unexpected error was thrown from a file change listener of type: {0}\", type);\n\t\t\tonUnexpectedError(e);\n\t\t}\n\t}\n\n\tprivate isBusySaving(): boolean {\n\t\treturn !types.isEmptyObject(this.mapPendingSaveToVersionId);\n\t}\n\n\t/**\n\t * Returns true if the content of this model has changes that are not yet saved back to the disk.\n\t */\n\tpublic isDirty(): boolean {\n\t\treturn this.dirty;\n\t}\n\n\t/**\n\t * Returns the time in millies when this working copy was edited by the user.\n\t */\n\tpublic getLastDirtyTime(): number {\n\t\treturn this.lastDirtyTime;\n\t}\n\n\t/**\n\t * Returns the time in millies when this working copy was last modified by the user or some other program.\n\t */\n\tpublic getLastModifiedTime(): number {\n\t\treturn this.versionOnDiskStat ? this.versionOnDiskStat.mtime : -1;\n\t}\n\n\t/**\n\t * Returns the state this text text file editor model is in with regards to changes and saving.\n\t */\n\tpublic getState(): State {\n\t\tif (this.inConflictResolutionMode) {\n\t\t\treturn State.CONFLICT;\n\t\t}\n\n\t\tif (this.inErrorMode) {\n\t\t\treturn State.ERROR;\n\t\t}\n\n\t\tif (!this.dirty) {\n\t\t\treturn State.SAVED;\n\t\t}\n\n\t\tif (this.isBusySaving()) {\n\t\t\treturn State.PENDING_SAVE;\n\t\t}\n\n\t\tif (this.dirty) {\n\t\t\treturn State.DIRTY;\n\t\t}\n\t}\n\n\tpublic getEncoding(): string {\n\t\treturn this.preferredEncoding || this.contentEncoding;\n\t}\n\n\tpublic setEncoding(encoding: string, mode: EncodingMode): void {\n\t\tif (!this.isNewEncoding(encoding)) {\n\t\t\treturn; // return early if the encoding is already the same\n\t\t}\n\n\t\t// Encode: Save with encoding\n\t\tif (mode === EncodingMode.Encode) {\n\t\t\tthis.updatePreferredEncoding(encoding);\n\n\t\t\t// Save\n\t\t\tif (!this.isDirty()) {\n\t\t\t\tthis.versionId++; // needs to increment because we change the model potentially\n\t\t\t\tthis.makeDirty();\n\t\t\t}\n\n\t\t\tif (!this.inConflictResolutionMode) {\n\t\t\t\tthis.save(false, true /* overwriteEncoding due to forced encoding change */).done(null, onUnexpectedError);\n\t\t\t}\n\t\t}\n\n\t\t// Decode: Load with encoding\n\t\telse {\n\t\t\tif (this.isDirty()) {\n\t\t\t\tthis.messageService.show(Severity.Info, nls.localize('saveFileFirst', \"The file is dirty. Please save it first before reopening it with another encoding.\"));\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.updatePreferredEncoding(encoding);\n\n\t\t\t// Load\n\t\t\tthis.load(true /* force because encoding has changed */).done(null, onUnexpectedError);\n\t\t}\n\t}\n\n\tpublic updatePreferredEncoding(encoding: string): void {\n\t\tif (!this.isNewEncoding(encoding)) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.preferredEncoding = encoding;\n\n\t\t// Emit\n\t\tthis.eventService.emit(WorkbenchEventType.RESOURCE_ENCODING_CHANGED, new ResourceEvent(this.resource));\n\t}\n\n\tprivate isNewEncoding(encoding: string): boolean {\n\t\tif (this.preferredEncoding === encoding) {\n\t\t\treturn false; // return early if the encoding is already the same\n\t\t}\n\n\t\tif (!this.preferredEncoding && this.contentEncoding === encoding) {\n\t\t\treturn false; // also return if we don't have a preferred encoding but the content encoding is already the same\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tpublic isResolved(): boolean {\n\t\treturn !types.isUndefinedOrNull(this.versionOnDiskStat);\n\t}\n\n\t/**\n\t * Returns true if the dispose() method of this model has been called.\n\t */\n\tpublic isDisposed(): boolean {\n\t\treturn this.disposed;\n\t}\n\n\t/**\n\t * Returns the full resource URI of the file this text file editor model is about.\n\t */\n\tpublic getResource(): URI {\n\t\treturn this.resource;\n\t}\n\n\tpublic dispose(): void {\n\t\tthis.disposed = true;\n\t\tthis.inConflictResolutionMode = false;\n\t\tthis.inErrorMode = false;\n\n\t\tthis.createTextEditorModelPromise = null;\n\n\t\tif (this.textModelChangeListener) {\n\t\t\tthis.textModelChangeListener();\n\t\t\tthis.textModelChangeListener = null;\n\t\t}\n\n\t\tif (this.textFileServiceListener) {\n\t\t\tthis.textFileServiceListener.dispose();\n\t\t\tthis.textFileServiceListener = null;\n\t\t}\n\n\t\tthis.cancelAutoSavePromises();\n\n\t\tCACHE.remove(this.resource);\n\n\t\tsuper.dispose();\n\t}\n\n\tprivate cloneStat(stat: IFileStat): IFileStat {\n\t\treturn {\n\t\t\tresource: URI.parse(stat.resource.toString()),\n\t\t\tname: stat.name,\n\t\t\tmtime: stat.mtime,\n\t\t\tetag: stat.etag,\n\t\t\tmime: stat.mime,\n\t\t\tisDirectory: stat.isDirectory,\n\t\t\thasChildren: stat.hasChildren,\n\t\t\tchildren: stat.children\n\t\t};\n\t}\n}\n\nexport class TextFileEditorModelCache {\n\tprivate mapResourcePathToModel: { [resource: string]: TextFileEditorModel; };\n\n\tconstructor() {\n\t\tthis.mapResourcePathToModel = Object.create(null);\n\t}\n\n\tpublic dispose(resource: URI): void {\n\t\tlet model = this.get(resource);\n\t\tif (model) {\n\t\t\tif (model.isDirty()) {\n\t\t\t\treturn; // we never dispose dirty models to avoid data loss\n\t\t\t}\n\n\t\t\tmodel.dispose();\n\t\t}\n\t}\n\n\tpublic get(resource: URI): TextFileEditorModel {\n\t\treturn this.mapResourcePathToModel[resource.toString()];\n\t}\n\n\tpublic getAll(resource?: URI): TextFileEditorModel[] {\n\t\treturn Object.keys(this.mapResourcePathToModel)\n\t\t\t.filter((r) => !resource || resource.toString() === r)\n\t\t\t.map((r) => this.mapResourcePathToModel[r]);\n\t}\n\n\tpublic add(resource: URI, model: TextFileEditorModel): void {\n\t\tthis.mapResourcePathToModel[resource.toString()] = model;\n\t}\n\n\t// Clients should not call this method\n\tpublic clear(): void {\n\t\tthis.mapResourcePathToModel = Object.create(null);\n\t}\n\n\t// Clients should not call this method\n\tpublic remove(resource: URI): void {\n\t\tdelete this.mapResourcePathToModel[resource.toString()];\n\t}\n}\n\nexport const CACHE = new TextFileEditorModelCache();"]}