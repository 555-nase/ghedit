{"version":3,"file":"vs/workbench/parts/files/common/editors/saveParticipant.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/workbench/parts/files/common/editors/saveParticipant.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;IAEhG,YAAY,CAAC;IAYb,0HAA0H;IAC1H;QAIC,yBACgC,oBAA2C,EACnD,YAA2B,EACtB,iBAAqC;YAFlC,yBAAoB,GAApB,oBAAoB,CAAuB;YACnD,iBAAY,GAAZ,YAAY,CAAe;YACtB,sBAAiB,GAAjB,iBAAiB,CAAoB;YAEjE,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;YACnB,IAAI,CAAC,sBAAsB,GAAG,KAAK,CAAC;YAEpC,IAAI,CAAC,iBAAiB,EAAE,CAAC;YACzB,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,oBAAoB,CAAC,gBAAgB,EAAuB,CAAC,CAAC;QAC/F,CAAC;QAEO,2CAAiB,GAAzB;YAAA,iBAGC;YAFA,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,iBAAS,CAAC,WAAW,EAAE,UAAC,CAAsB,IAAK,OAAA,KAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,EAAxB,CAAwB,CAAC,CAAC,CAAC;YAC/H,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,oBAAoB,CAAC,WAAW,CAAC,8CAA8B,CAAC,OAAO,EAAE,UAAC,CAA6B,IAAK,OAAA,KAAI,CAAC,qBAAqB,CAAC,CAAC,CAAC,MAAM,CAAC,EAApC,CAAoC,CAAC,CAAC,CAAC;QAC5K,CAAC;QAEO,+CAAqB,GAA7B,UAA8B,aAAkC;YAC/D,IAAI,CAAC,sBAAsB,GAAG,aAAa,IAAI,aAAa,CAAC,KAAK,IAAI,aAAa,CAAC,KAAK,CAAC,sBAAsB,CAAC;QAClH,CAAC;QAEM,+BAAK,GAAZ;YACC,MAAM,CAAC,0BAA0B,CAAC;QACnC,CAAC;QAEO,0CAAgB,GAAxB,UAAyB,CAAsB;YAE9C,sCAAsC;YACtC,EAAE,CAAC,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC,CAAC;gBACjC,IAAI,CAAC,wBAAwB,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,WAAW,CAAC,CAAC;YACvD,CAAC;QACF,CAAC;QAED;;WAEG;QACK,kDAAwB,GAAhC,UAAiC,KAAa,EAAE,WAAoB;YACnE,IAAI,aAAa,GAAuB,CAAC,qBAAS,CAAC,eAAe,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAChF,IAAI,OAAO,GAAgB,EAAE,CAAC;YAE9B,uEAAuE;YACvE,yEAAyE;YACzE,EAAE,CAAC,CAAC,WAAW,IAAI,KAAK,CAAC,kBAAkB,EAAE,CAAC,CAAC,CAAC;gBAC/C,IAAI,UAAU,GAAG,IAAI,CAAC,iBAAiB,CAAC,eAAe,EAAE,CAAC;gBAC1D,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,UAAU,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC;oBACvD,IAAI,MAAM,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC;oBAC3B,IAAI,WAAW,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC;oBAEpC,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;wBAClB,QAAQ,CAAC,CAAC,eAAe;oBAC1B,CAAC;oBAED,EAAE,CAAC,CAAC,KAAK,KAAK,WAAW,CAAC,CAAC,CAAC;wBAC3B,aAAa,GAAG,MAAM,CAAC,aAAa,EAAE,CAAC;wBACvC,OAAO,CAAC,IAAI,OAAZ,OAAO,EAAS,aAAa,CAAC,GAAG,CAAC,UAAA,CAAC;4BAClC,MAAM,CAAC;gCACN,UAAU,EAAE,CAAC,CAAC,kBAAkB;gCAChC,MAAM,EAAE,CAAC,CAAC,cAAc;6BACxB,CAAC;wBACH,CAAC,CAAC,CAAC,CAAC;oBACL,CAAC;gBACF,CAAC;YACF,CAAC;YAED,IAAI,GAAG,GAAG,sDAAsB,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;YACjD,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC;gBACjB,MAAM,CAAC,CAAC,gBAAgB;YACzB,CAAC;YAED,KAAK,CAAC,kBAAkB,CAAC,aAAa,EAAE,GAAG,EAAE,UAAC,KAAK,IAAK,OAAA,aAAa,EAAb,CAAa,CAAC,CAAC;QACxE,CAAC;QAEM,iCAAO,GAAd;YACC,OAAO,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC;gBAC7B,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,EAAE,CAAC;YACvB,CAAC;QACF,CAAC;QA3EA;uBAAC,qCAAqB;uBACrB,qBAAa;uBACb,sCAAkB;2BAFG;QA4ExB,sBAAC;IAAD,CAAC,AAjFD,IAiFC;IAjFY,uBAAe,kBAiF3B,CAAA","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport {IWorkbenchContribution} from 'vs/workbench/common/contributions';\nimport {ICodeEditorService} from 'vs/editor/common/services/codeEditorService';\nimport {TextFileChangeEvent, EventType} from 'vs/workbench/parts/files/common/files';\nimport {IFilesConfiguration} from 'vs/platform/files/common/files';\nimport {IPosition, IEditorSelection, IModel} from 'vs/editor/common/editorCommon';\nimport {Selection} from 'vs/editor/common/core/selection';\nimport {trimTrailingWhitespace} from 'vs/editor/common/commands/trimTrailingWhitespaceCommand';\nimport {IConfigurationService, IConfigurationServiceEvent, ConfigurationServiceEventTypes} from 'vs/platform/configuration/common/configuration';\nimport {IEventService} from 'vs/platform/event/common/event';\n\n// The save participant can change a model before its saved to support various scenarios like trimming trailing whitespace\nexport class SaveParticipant implements IWorkbenchContribution {\n\tprivate trimTrailingWhitespace: boolean;\n\tprivate toUnbind: { (): void; }[];\n\n\tconstructor(\n\t\t@IConfigurationService private configurationService: IConfigurationService,\n\t\t@IEventService private eventService: IEventService,\n\t\t@ICodeEditorService private codeEditorService: ICodeEditorService\n\t) {\n\t\tthis.toUnbind = [];\n\t\tthis.trimTrailingWhitespace = false;\n\n\t\tthis.registerListeners();\n\t\tthis.onConfigurationChange(this.configurationService.getConfiguration<IFilesConfiguration>());\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis.toUnbind.push(this.eventService.addListener(EventType.FILE_SAVING, (e: TextFileChangeEvent) => this.onTextFileSaving(e)));\n\t\tthis.toUnbind.push(this.configurationService.addListener(ConfigurationServiceEventTypes.UPDATED, (e: IConfigurationServiceEvent) => this.onConfigurationChange(e.config)));\n\t}\n\n\tprivate onConfigurationChange(configuration: IFilesConfiguration): void {\n\t\tthis.trimTrailingWhitespace = configuration && configuration.files && configuration.files.trimTrailingWhitespace;\n\t}\n\n\tpublic getId(): string {\n\t\treturn 'vs.files.saveparticipant';\n\t}\n\n\tprivate onTextFileSaving(e: TextFileChangeEvent): void {\n\n\t\t// Trim Trailing Whitespace if enabled\n\t\tif (this.trimTrailingWhitespace) {\n\t\t\tthis.doTrimTrailingWhitespace(e.model, e.isAutoSaved);\n\t\t}\n\t}\n\n\t/**\n\t * Trim trailing whitespace on a model and ignore lines on which cursors are sitting if triggered via auto save.\n\t */\n\tprivate doTrimTrailingWhitespace(model: IModel, isAutoSaved: boolean): void {\n\t\tlet prevSelection: IEditorSelection[] = [Selection.createSelection(1, 1, 1, 1)];\n\t\tlet cursors: IPosition[] = [];\n\n\t\t// If this is auto save, try to find active cursors to prevent removing\n\t\t// whitespace automatically while the user is typing at the end of a line\n\t\tif (isAutoSaved && model.isAttachedToEditor()) {\n\t\t\tlet allEditors = this.codeEditorService.listCodeEditors();\n\t\t\tfor (let i = 0, len = allEditors.length; i < len; i++) {\n\t\t\t\tlet editor = allEditors[i];\n\t\t\t\tlet editorModel = editor.getModel();\n\n\t\t\t\tif (!editorModel) {\n\t\t\t\t\tcontinue; // empty editor\n\t\t\t\t}\n\n\t\t\t\tif (model === editorModel) {\n\t\t\t\t\tprevSelection = editor.getSelections();\n\t\t\t\t\tcursors.push(...prevSelection.map(s => {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tlineNumber: s.positionLineNumber,\n\t\t\t\t\t\t\tcolumn: s.positionColumn\n\t\t\t\t\t\t};\n\t\t\t\t\t}));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tlet ops = trimTrailingWhitespace(model, cursors);\n\t\tif (!ops.length) {\n\t\t\treturn; // Nothing to do\n\t\t}\n\n\t\tmodel.pushEditOperations(prevSelection, ops, (edits) => prevSelection);\n\t}\n\n\tpublic dispose(): void {\n\t\twhile (this.toUnbind.length) {\n\t\t\tthis.toUnbind.pop()();\n\t\t}\n\t}\n}"]}