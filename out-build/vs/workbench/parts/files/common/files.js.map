{"version":3,"file":"vs/workbench/parts/files/common/files.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/workbench/parts/files/common/files.ts"],"names":[],"mappings":";;;;;;IAAA;;;oGAGgG;IAChG,YAAY,CAAC;IAcb;;OAEG;IACU,kBAAU,GAAG,yBAAyB,CAAC;IAEpD;;OAEG;IACU,4BAAoB,GAAG,yCAAyC,CAAC;IAE9E;;OAEG;IACU,2BAAmB,GAAG,wCAAwC,CAAC;IAE5E;;OAEG;IACU,6BAAqB,GAAG,0CAA0C,CAAC;IAEhF;;OAEG;IACU,0CAAkC,GAAG,0CAA0C,CAAC;IAE7F;;;;OAIG;IACH;QAA8C,mCAAW;QAAzD;YAA8C,8BAAW;QAazD,CAAC;QAAD,sBAAC;IAAD,CAAC,AAbD,CAA8C,oBAAW,GAaxD;IAbqB,uBAAe,kBAapC,CAAA;IAwED;;OAEG;IACH,wBAA+B,GAAQ;QACtC,EAAE,CAAC,CAAC,GAAG,YAAY,4BAAQ,CAAC,CAAC,CAAC;YAC7B,IAAI,IAAI,GAAa,GAAG,CAAC;YAEzB,MAAM,CAAC;gBACN,QAAQ,EAAE,IAAI,CAAC,QAAQ;gBACvB,KAAK,EAAE,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE;gBAC7C,WAAW,EAAE,IAAI,CAAC,WAAW;aAC7B,CAAC;QACH,CAAC;QAED,EAAE,CAAC,CAAC,GAAG,IAAwB,GAAI,CAAC,QAAQ,KAAK,0CAAkC,CAAC,CAAC,CAAC;YACrF,IAAI,KAAK,GAAsB,GAAG,CAAC;YACnC,EAAE,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;gBAClB,MAAM,CAAC;oBACN,QAAQ,EAAE,KAAK,CAAC,QAAQ;oBACxB,KAAK,EAAE,qBAAc,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC;oBAC5C,WAAW,EAAE,KAAK;iBAClB,CAAC;YACH,CAAC;QACF,CAAC;QAED,MAAM,CAAC,IAAI,CAAC;IACb,CAAC;IAvBe,sBAAc,iBAuB7B,CAAA;IAED;;OAEG;IACU,iBAAS,GAAG;QAExB;;WAEG;QACH,UAAU,EAAE,iBAAiB;QAE7B;;WAEG;QACH,WAAW,EAAE,kBAAkB;QAE/B;;WAEG;QACH,eAAe,EAAE,qBAAqB;QAEtC;;WAEG;QACH,UAAU,EAAE,iBAAiB;QAE7B;;;WAGG;QACH,aAAa,EAAE,oBAAoB;KACnC,CAAC;IAEF;;;;OAIG;IACH;QAA0C,wCAAmB;QAE5D,8BAAY,MAAkB,EAAE,KAAiB,EAAE,aAAyB;YAC3E,kBAAM,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,aAAa,CAAC,CAAC;QAC3C,CAAC;QAED;;WAEG;QACI,wCAAS,GAAhB;YACC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;QACtB,CAAC;QAED;;WAEG;QACI,uCAAQ,GAAf;YACC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;QACtB,CAAC;QAED;;WAEG;QACI,uCAAQ,GAAf;YACC,MAAM,CAAC,CAAC,IAAI,CAAC,QAAQ,IAAI,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC;QAC1C,CAAC;QAED;;WAEG;QACI,uCAAQ,GAAf;YACC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,IAAI,CAAC,CAAC,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,EAAE,KAAK,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC;QACtH,CAAC;QAED;;WAEG;QACI,yCAAU,GAAjB;YACC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,IAAI,CAAC,CAAC,IAAI,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,IAAI,CAAC,QAAQ,KAAK,IAAI,CAAC,QAAQ,CAAC;QAClG,CAAC;QAED;;WAEG;QACI,yCAAU,GAAjB;YACC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC;QAC1C,CAAC;QACF,2BAAC;IAAD,CAAC,AA/CD,CAA0C,4BAAmB,GA+C5D;IA/CY,4BAAoB,uBA+ChC,CAAA;IAED;;OAEG;IACH;QAAyC,uCAAoB;QAI5D,6BAAY,KAAa,EAAE,MAAiB,EAAE,KAAyB,EAAE,aAAyB;YAApD,qBAAyB,GAAzB,cAAyB;YACtE,kBAAM,MAAM,EAAE,KAAK,EAAE,aAAa,CAAC,CAAC;YAEpC,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACrB,CAAC;QAED,sBAAW,sCAAK;iBAAhB;gBACC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;YACpB,CAAC;;;WAAA;QAEM,0CAAY,GAAnB,UAAoB,SAAkB;YACrC,IAAI,CAAC,YAAY,GAAG,SAAS,CAAC;QAC/B,CAAC;QAED,sBAAW,4CAAW;iBAAtB;gBACC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC;YAC1B,CAAC;;;WAAA;QACF,0BAAC;IAAD,CAAC,AArBD,CAAyC,oBAAoB,GAqB5D;IArBY,2BAAmB,sBAqB/B,CAAA;IAEY,4BAAoB,GAAG,iBAAiB,CAAC;IAEtD,WAAY,aAAa;QACxB,iDAAI,CAAA;QACJ,2DAAS,CAAA;QACT,qDAAM,CAAA;IACP,CAAC,EAJW,qBAAa,KAAb,qBAAa,QAIxB;IAJD,IAAY,aAAa,GAAb,qBAIX,CAAA;IAiBD,WAAY,YAAY;QACvB,6CAAG,CAAA;QACH,yEAAiB,CAAA;QACjB,uEAAgB,CAAA;QAChB,qEAAe,CAAA;IAChB,CAAC,EALW,oBAAY,KAAZ,oBAAY,QAKvB;IALD,IAAY,YAAY,GAAZ,oBAKX,CAAA;IAEU,wBAAgB,GAAG,+BAAe,CAAmB,4BAAoB,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport {Event as BaseEvent, PropertyChangeEvent} from 'vs/base/common/events';\nimport URI from 'vs/base/common/uri';\nimport Event from 'vs/base/common/event';\nimport {guessMimeTypes} from 'vs/base/common/mime';\nimport {IModel, IEditorOptions} from 'vs/editor/common/editorCommon';\nimport {IDisposable} from 'vs/base/common/lifecycle';\nimport {EncodingMode, EditorInput, IFileEditorInput} from 'vs/workbench/common/editor';\nimport {IFileStat, IFilesConfiguration} from 'vs/platform/files/common/files';\nimport {createDecorator, ServiceIdentifier} from 'vs/platform/instantiation/common/instantiation';\nimport {FileStat} from 'vs/workbench/parts/files/common/explorerViewModel';\n\n/**\n * Explorer viewlet id.\n */\nexport const VIEWLET_ID = 'workbench.view.explorer';\n\n/**\n * File editor input id.\n */\nexport const FILE_EDITOR_INPUT_ID = 'workbench.editors.files.fileEditorInput';\n\n/**\n * Text file editor id.\n */\nexport const TEXT_FILE_EDITOR_ID = 'workbench.editors.files.textFileEditor';\n\n/**\n * Binary file editor id.\n */\nexport const BINARY_FILE_EDITOR_ID = 'workbench.editors.files.binaryFileEditor';\n\n/**\n * Marker ID for model entries.\n */\nexport const WORKING_FILES_MODEL_ENTRY_CLASS_ID = 'workbench.workingFiles.model.entry.class';\n\n/**\n * API class to denote file editor inputs. Internal implementation is provided.\n *\n * Note: This class is not intended to be instantiated.\n */\nexport abstract class FileEditorInput extends EditorInput implements IFileEditorInput {\n\n\tpublic abstract setResource(resource: URI): void;\n\n\tpublic abstract getResource(): URI;\n\n\tpublic abstract setMime(mime: string): void;\n\n\tpublic abstract getMime(): string;\n\n\tpublic abstract setEncoding(encoding: string, mode: EncodingMode): void;\n\n\tpublic abstract getEncoding(): string;\n}\n\nexport interface IFilesConfiguration extends IFilesConfiguration {\n\texplorer: {\n\t\tworkingFiles: {\n\t\t\tmaxVisible: number;\n\t\t\tdynamicHeight: boolean;\n\t\t};\n\t\tautoReveal: boolean;\n\t};\n\teditor: IEditorOptions;\n}\n\nexport interface IWorkingFileModelChangeEvent {\n\tadded?: IWorkingFileEntry[];\n\tremoved?: IWorkingFileEntry[];\n}\n\nexport interface IWorkingFilesModel {\n\n\tonModelChange: Event<IWorkingFileModelChangeEvent>;\n\n\tonWorkingFileChange: Event<IWorkingFileEntry>;\n\n\tgetEntries(excludeOutOfContext?: boolean): IWorkingFileEntry[];\n\n\tfirst(): IWorkingFileEntry;\n\tlast(): IWorkingFileEntry;\n\tnext(start?: URI): IWorkingFileEntry;\n\tprevious(start?: URI): IWorkingFileEntry;\n\n\tgetOutOfWorkspaceContextEntries(): IWorkingFileEntry[];\n\n\tcount(): number;\n\n\taddEntry(resource: URI): IWorkingFileEntry;\n\taddEntry(stat: IFileStat): IWorkingFileEntry;\n\taddEntry(entry: IWorkingFileEntry): IWorkingFileEntry;\n\taddEntry(arg1: IFileStat | IWorkingFileEntry | URI): IWorkingFileEntry;\n\n\tmoveEntry(oldResource: URI, newResource: URI): void;\n\n\tremoveEntry(resource: URI): IWorkingFileEntry;\n\tremoveEntry(entry: IWorkingFileEntry): IWorkingFileEntry;\n\tremoveEntry(arg1: IWorkingFileEntry | URI): IWorkingFileEntry;\n\n\treorder(source: IWorkingFileEntry, target: IWorkingFileEntry): void;\n\n\thasEntry(resource: URI): boolean;\n\tfindEntry(resource: URI): IWorkingFileEntry;\n\n\tclear(): void;\n}\n\nexport interface IWorkingFileEntry {\n\tresource: URI;\n\tindex: number;\n\tdirty: boolean;\n\tCLASS_ID: string;\n\tisFile: boolean;\n\tisUntitled: boolean;\n\n\tsetIndex(index: number): void;\n\tsetDirty(dirty: boolean): void;\n}\n\nexport interface IFileResource {\n\tresource: URI;\n\tisDirectory: boolean;\n\tmimes: string[];\n}\n\n/**\n * Helper to get a file resource from an object.\n */\nexport function asFileResource(obj: any): IFileResource {\n\tif (obj instanceof FileStat) {\n\t\tlet stat = <FileStat>obj;\n\n\t\treturn {\n\t\t\tresource: stat.resource,\n\t\t\tmimes: stat.mime ? stat.mime.split(', ') : [],\n\t\t\tisDirectory: stat.isDirectory\n\t\t};\n\t}\n\n\tif (obj && (<IWorkingFileEntry>obj).CLASS_ID === WORKING_FILES_MODEL_ENTRY_CLASS_ID) {\n\t\tlet entry = <IWorkingFileEntry>obj;\n\t\tif (entry.isFile) {\n\t\t\treturn {\n\t\t\t\tresource: entry.resource,\n\t\t\t\tmimes: guessMimeTypes(entry.resource.fsPath),\n\t\t\t\tisDirectory: false\n\t\t\t};\n\t\t}\n\t}\n\n\treturn null;\n}\n\n/**\n * List of event types from files.\n */\nexport const EventType = {\n\n\t/**\n\t * Indicates that a file content has changed but not yet saved.\n\t */\n\tFILE_DIRTY: 'files:fileDirty',\n\n\t/**\n\t * Indicates that a file is being saved.\n\t */\n\tFILE_SAVING: 'files:fileSaving',\n\n\t/**\n\t * Indicates that a file save resulted in an error.\n\t */\n\tFILE_SAVE_ERROR: 'files:fileSaveError',\n\n\t/**\n\t * Indicates that a file content has been saved to the disk.\n\t */\n\tFILE_SAVED: 'files:fileSaved',\n\n\t/**\n\t * Indicates that a file content has been reverted to the state\n\t * on disk.\n\t */\n\tFILE_REVERTED: 'files:fileReverted'\n};\n\n/**\n * Local file change events are being emitted when a file is added, removed, moved or its contents got updated. These events\n * are being emitted from within the workbench and are not reflecting the truth on the disk file system. For that, please\n * use FileChangesEvent instead.\n */\nexport class LocalFileChangeEvent extends PropertyChangeEvent {\n\n\tconstructor(before?: IFileStat, after?: IFileStat, originalEvent?: BaseEvent) {\n\t\tsuper(null, before, after, originalEvent);\n\t}\n\n\t/**\n\t * Returns the meta information of the file before the event occurred or null if the file is new.\n\t */\n\tpublic getBefore(): IFileStat {\n\t\treturn this.oldValue;\n\t}\n\n\t/**\n\t * Returns the meta information of the file after the event occurred or null if the file got deleted.\n\t */\n\tpublic getAfter(): IFileStat {\n\t\treturn this.newValue;\n\t}\n\n\t/**\n\t * Indicates if the file was added as a new file.\n\t */\n\tpublic gotAdded(): boolean {\n\t\treturn !this.oldValue && !!this.newValue;\n\t}\n\n\t/**\n\t * Indicates if the file was moved to a different path.\n\t */\n\tpublic gotMoved(): boolean {\n\t\treturn !!this.oldValue && !!this.newValue && this.oldValue.resource.toString() !== this.newValue.resource.toString();\n\t}\n\n\t/**\n\t * Indicates if the files metadata was updated.\n\t */\n\tpublic gotUpdated(): boolean {\n\t\treturn !!this.oldValue && !!this.newValue && !this.gotMoved() && this.oldValue !== this.newValue;\n\t}\n\n\t/**\n\t * Indicates if the file was deleted.\n\t */\n\tpublic gotDeleted(): boolean {\n\t\treturn !!this.oldValue && !this.newValue;\n\t}\n}\n\n/**\n * Text file change events are emitted when files are saved or reverted.\n */\nexport class TextFileChangeEvent extends LocalFileChangeEvent {\n\tprivate _model: IModel;\n\tprivate _isAutoSaved: boolean;\n\n\tconstructor(model: IModel, before: IFileStat, after: IFileStat = before, originalEvent?: BaseEvent) {\n\t\tsuper(before, after, originalEvent);\n\n\t\tthis._model = model;\n\t}\n\n\tpublic get model(): IModel {\n\t\treturn this._model;\n\t}\n\n\tpublic setAutoSaved(autoSaved: boolean): void {\n\t\tthis._isAutoSaved = autoSaved;\n\t}\n\n\tpublic get isAutoSaved(): boolean {\n\t\treturn this._isAutoSaved;\n\t}\n}\n\nexport const TEXT_FILE_SERVICE_ID = 'textFileService';\n\nexport enum ConfirmResult {\n\tSAVE,\n\tDONT_SAVE,\n\tCANCEL\n}\n\nexport interface ITextFileOperationResult {\n\tresults: IResult[];\n}\n\nexport interface IResult {\n\tsource: URI;\n\ttarget?: URI;\n\tsuccess?: boolean;\n}\n\nexport interface IAutoSaveConfiguration {\n\tautoSaveDelay: number;\n\tautoSaveFocusChange: boolean;\n}\n\nexport enum AutoSaveMode {\n\tOFF,\n\tAFTER_SHORT_DELAY,\n\tAFTER_LONG_DELAY,\n\tON_FOCUS_CHANGE\n}\n\nexport var ITextFileService = createDecorator<ITextFileService>(TEXT_FILE_SERVICE_ID);\n\nexport interface ITextFileService extends IDisposable {\n\tserviceId: ServiceIdentifier<any>;\n\n\t/**\n\t * A resource is dirty if it has unsaved changes or is an untitled file not yet saved.\n\t *\n\t * @param resource the resource to check for being dirty. If it is not specified, will check for\n\t * all dirty resources.\n\t */\n\tisDirty(resource?: URI): boolean;\n\n\t/**\n\t * Returns all resources that are currently dirty matching the provided resources or all dirty resources.\n\t *\n\t * @param resources the resources to check for being dirty. If it is not specified, will check for\n\t * all dirty resources.\n\t */\n\tgetDirty(resources?: URI[]): URI[];\n\n\t/**\n\t * Saves the resource.\n\t *\n\t * @param resource the resource to save\n\t * @return true iff the resource was saved.\n\t */\n\tsave(resource: URI): TPromise<boolean>;\n\n\t/**\n\t * Saves the provided resource asking the user for a file name.\n\t *\n\t * @param resource the resource to save as.\n\t * @return true iff the file was saved.\n\t */\n\tsaveAs(resource: URI, targetResource?: URI): TPromise<URI>;\n\n\t/**\n\t * Saves the set of resources and returns a promise with the operation result.\n\t *\n\t * @param resources can be null to save all.\n\t * @param includeUntitled to save all resources and optionally exclude untitled ones.\n\t */\n\tsaveAll(includeUntitled?: boolean): TPromise<ITextFileOperationResult>;\n\tsaveAll(resources: URI[]): TPromise<ITextFileOperationResult>;\n\n\t/**\n\t * Reverts the provided resource.\n\t *\n\t * @param resource the resource of the file to revert.\n\t * @param force to force revert even when the file is not dirty\n\t */\n\trevert(resource: URI, force?: boolean): TPromise<boolean>;\n\n\t/**\n\t * Reverts all the provided resources and returns a promise with the operation result.\n\t *\n\t * @param force to force revert even when the file is not dirty\n\t */\n\trevertAll(resources?: URI[], force?: boolean): TPromise<ITextFileOperationResult>;\n\n\t/**\n\t * Brings up the confirm dialog to either save, don't save or cancel.\n\t *\n\t * @param resources the resources of the files to ask for confirmation or null if\n\t * confirming for all dirty resources.\n\t */\n\tconfirmSave(resources?: URI[]): ConfirmResult;\n\n\t/**\n\t * Provides access to the list of working files.\n\t */\n\tgetWorkingFilesModel(): IWorkingFilesModel;\n\n\t/**\n\t * Convinient fast access to the current auto save mode.\n\t */\n\tgetAutoSaveMode(): AutoSaveMode;\n\n\t/**\n\t * Convinient fast access to the raw configured auto save settings.\n\t */\n\tgetAutoSaveConfiguration(): IAutoSaveConfiguration;\n\n\t/**\n\t * Event is fired with the auto save configuration whenever it changes.\n\t */\n\tonAutoSaveConfigurationChange: Event<IAutoSaveConfiguration>;\n}"]}