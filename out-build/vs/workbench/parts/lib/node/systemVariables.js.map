{"version":3,"file":"vs/workbench/parts/lib/node/systemVariables.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/workbench/parts/lib/node/systemVariables.ts"],"names":[],"mappings":";;;;;;IAAA;;;oGAGgG;IAChG,YAAY,CAAC;IAWb;QAAqC,mCAAuB;QAI3D,oDAAoD;QACpD,yBAAoB,aAAsC,EAAE,cAAwC,EAAE,aAAyB;YALhI,iBA2DC;YAtDsG,6BAAyB,GAAzB,oBAAyB;YAC9H,iBAAO,CAAC;YADW,kBAAa,GAAb,aAAa,CAAyB;YAEzD,IAAI,MAAM,GAAG,aAAa,GAAG,aAAa,CAAC,MAAM,GAAG,cAAc,CAAC,YAAY,EAAE,CAAC,QAAQ,CAAC,MAAM,CAAC;YAClG,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC,SAAS,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;YACpD,IAAI,CAAC,SAAS,GAAG,cAAc,GAAG,cAAc,CAAC,gBAAgB,EAAE,CAAC,GAAG,CAAC,QAAQ,GAAG,IAAI,CAAC;YACxF,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,UAAA,GAAG;gBACnC,KAAI,CAAC,UAAQ,GAAG,CAAG,CAAC,GAAG,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YACzC,CAAC,CAAC,CAAC;QACJ,CAAC;QAED,sBAAW,qCAAQ;iBAAnB;gBACC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;YACvB,CAAC;iBAED,UAAoB,KAAa;gBAChC,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;YACxB,CAAC;;;WAJA;QAMD,sBAAW,gCAAG;iBAAd;gBACC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC;YAC3B,CAAC;;;WAAA;QAED,sBAAW,0CAAa;iBAAxB;gBACC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC;YAC5B,CAAC;;;WAAA;QAED,sBAAW,iCAAI;iBAAf;gBACC,MAAM,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;YAC3B,CAAC;;;WAAA;QAED,sBAAW,yCAAY;iBAAvB;gBACC,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;YAC3C,CAAC;;;WAAA;QAED,sBAAW,wCAAW;iBAAtB;gBACC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;YAC1C,CAAC;;;WAAA;QAED,sBAAW,wCAAW;iBAAtB;gBACC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;YAC1C,CAAC;;;WAAA;QAEO,qCAAW,GAAnB;YACC,IAAI,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC,oBAAoB,EAAE,CAAC;YACtD,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBACZ,MAAM,CAAC,EAAE,CAAC;YACX,CAAC;YACD,IAAI,GAAG,GAAG,qBAAqB,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;YACzD,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBACV,MAAM,CAAC,EAAE,CAAC;YACX,CAAC;YACD,IAAI,QAAQ,GAAG,GAAG,CAAC,WAAW,EAAE,CAAC;YACjC,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,QAAQ,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;QAC/C,CAAC;QACF,sBAAC;IAAD,CAAC,AA3DD,CAAqC,iCAAuB,GA2D3D;IA3DY,uBAAe,kBA2D3B,CAAA","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport * as Paths from 'vs/base/common/paths';\nimport URI from 'vs/base/common/uri';\nimport { AbstractSystemVariables } from 'vs/base/common/parsers';\n\nimport * as WorkbenchEditorCommon from 'vs/workbench/common/editor';\n\nimport { IWorkbenchEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { IWorkspaceContextService } from 'vs/workbench/services/workspace/common/contextService';\n\nexport class SystemVariables extends AbstractSystemVariables {\n\tprivate _workspaceRoot: string;\n\tprivate _execPath: string;\n\n\t// Optional workspaceRoot there to be used in tests.\n\tconstructor(private editorService: IWorkbenchEditorService, contextService: IWorkspaceContextService, workspaceRoot: URI = null) {\n\t\tsuper();\n\t\tlet fsPath = workspaceRoot ? workspaceRoot.fsPath : contextService.getWorkspace().resource.fsPath;\n\t\tthis._workspaceRoot = Paths.normalize(fsPath, true);\n\t\tthis._execPath = contextService ? contextService.getConfiguration().env.execPath : null;\n\t\tObject.keys(process.env).forEach(key => {\n\t\t\tthis[`env.${ key }`] = process.env[key];\n\t\t});\n\t}\n\n\tpublic get execPath(): string {\n\t\treturn this._execPath;\n\t}\n\n\tpublic set execPath(value: string) {\n\t\tthis._execPath = value;\n\t}\n\n\tpublic get cwd(): string {\n\t\treturn this.workspaceRoot;\n\t}\n\n\tpublic get workspaceRoot(): string {\n\t\treturn this._workspaceRoot;\n\t}\n\n\tpublic get file(): string {\n\t\treturn this.getFilePath();\n\t}\n\n\tpublic get fileBasename(): string {\n\t\treturn Paths.basename(this.getFilePath());\n\t}\n\n\tpublic get fileDirname(): string {\n\t\treturn Paths.dirname(this.getFilePath());\n\t}\n\n\tpublic get fileExtname(): string {\n\t\treturn Paths.extname(this.getFilePath());\n\t}\n\n\tprivate getFilePath(): string {\n\t\tlet input = this.editorService.getActiveEditorInput();\n\t\tif (!input) {\n\t\t\treturn '';\n\t\t}\n\t\tlet fei = WorkbenchEditorCommon.asFileEditorInput(input);\n\t\tif (!fei) {\n\t\t\treturn '';\n\t\t}\n\t\tlet resource = fei.getResource();\n\t\treturn Paths.normalize(resource.fsPath, true);\n\t}\n}"]}