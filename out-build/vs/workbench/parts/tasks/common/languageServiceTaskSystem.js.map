{"version":3,"file":"vs/workbench/parts/tasks/common/languageServiceTaskSystem.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/workbench/parts/tasks/common/languageServiceTaskSystem.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport { TPromise, Promise }  from 'vs/base/common/winjs.base';\nimport { TerminateResponse} from 'vs/base/common/processes';\n\nimport { IMode } from 'vs/editor/common/modes';\nimport { EventEmitter } from 'vs/base/common/eventEmitter';\n\nimport { ITaskSystem, ITaskSummary, TaskDescription, TelemetryEvent, Triggers, TaskConfiguration, ITaskRunResult }  from 'vs/workbench/parts/tasks/common/taskSystem';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IModeService } from 'vs/editor/common/services/modeService';\n\nexport interface LanguageServiceTaskConfiguration extends TaskConfiguration {\n\tmodes:string[];\n}\n\nexport class LanguageServiceTaskSystem extends EventEmitter implements ITaskSystem {\n\n\tpublic static TelemetryEventName: string = 'taskService';\n\n\tprivate configuration: LanguageServiceTaskConfiguration;\n\tprivate telemetryService: ITelemetryService;\n\tprivate modeService: IModeService;\n\n\tconstructor(configuration: LanguageServiceTaskConfiguration, telemetryService: ITelemetryService, modeService: IModeService) {\n\t\tsuper();\n\t\tthis.configuration = configuration;\n\t\tthis.telemetryService = telemetryService;\n\t\tthis.modeService = modeService;\n\t}\n\n\tpublic build(): ITaskRunResult {\n\t\treturn this.processMode((mode) => {\n\t\t\treturn mode.taskSupport && mode.taskSupport.build\n\t\t\t\t? mode.taskSupport.build()\n\t\t\t\t: null;\n\t\t}, 'build', Triggers.shortcut);\n\t}\n\n\tpublic rebuild(): ITaskRunResult {\n\t\treturn this.processMode((mode) => {\n\t\t\treturn mode.taskSupport && mode.taskSupport.rebuild\n\t\t\t\t? mode.taskSupport.rebuild()\n\t\t\t\t: null;\n\t\t}, 'rebuild', Triggers.shortcut);\n\t}\n\n\tpublic clean(): ITaskRunResult {\n\t\treturn this.processMode((mode) => {\n\t\t\treturn mode.taskSupport && mode.taskSupport.clean\n\t\t\t\t? mode.taskSupport.clean()\n\t\t\t\t: null;\n\t\t}, 'clean', Triggers.shortcut);\n\t}\n\n\tpublic runTest(): ITaskRunResult {\n\t\treturn { promise: TPromise.wrapError<ITaskSummary>('Not implemented yet.') };\n\t}\n\n\tpublic run(taskIdentifier:string): ITaskRunResult {\n\t\treturn { promise: TPromise.wrapError<ITaskSummary>('Not implemented yet.') };\n\t}\n\n\tpublic isActive(): TPromise<boolean> {\n\t\treturn TPromise.as(false);\n\t}\n\n\tpublic isActiveSync(): boolean {\n\t\treturn false;\n\t}\n\n\tpublic canAutoTerminate(): boolean {\n\t\treturn false;\n\t}\n\n\tpublic terminate(): TPromise<TerminateResponse> {\n\t\treturn TPromise.as({ success: true });\n\t}\n\n\tpublic terminateSync(): TerminateResponse {\n\t\treturn { success: true };\n\t}\n\n\tpublic tasks(): TPromise<TaskDescription[]> {\n\t\tlet result: TaskDescription[] = [];\n\t\treturn TPromise.as(result);\n\t}\n\n\tprivate processMode(fn: (mode: IMode) => Promise, taskName: string, trigger: string): ITaskRunResult {\n\t\tlet telemetryEvent: TelemetryEvent = {\n\t\t\ttrigger: trigger,\n\t\t\tcommand: 'languageService',\n\t\t\tsuccess: true\n\t\t};\n\t\treturn { promise: Promise.join(this.configuration.modes.map((mode) => {\n\t\t\treturn this.modeService.getOrCreateMode(mode);\n\t\t})).then((modes: IMode[]) => {\n\t\t\tlet promises: Promise[] = [];\n\t\t\tmodes.forEach((mode) => {\n\t\t\t\tlet promise = fn(mode);\n\t\t\t\tif (promise) {\n\t\t\t\t\tpromises.push(promise);\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn Promise.join(promises);\n\t\t}).then((value) => {\n\t\t\t\tthis.telemetryService.publicLog(LanguageServiceTaskSystem.TelemetryEventName, telemetryEvent);\n\t\t\t\treturn value;\n\t\t\t},(err) => {\n\t\t\t\ttelemetryEvent.success = false;\n\t\t\t\tthis.telemetryService.publicLog(LanguageServiceTaskSystem.TelemetryEventName, telemetryEvent);\n\t\t\t\treturn Promise.wrapError(err);\n\t\t})};\n\t}\n}\n"]}