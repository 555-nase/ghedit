{"version":3,"sources":["vs/workbench/parts/tasks/node/processRunnerSystem.ts"],"names":[],"mappings":"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","file":"vs/workbench/parts/tasks/node/processRunnerSystem.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport * as nls from 'vs/nls';\nimport * as Objects from 'vs/base/common/objects';\nimport * as Types from 'vs/base/common/types';\nimport * as Platform from 'vs/base/common/platform';\nimport { TPromise, Promise } from 'vs/base/common/winjs.base';\nimport * as Async from 'vs/base/common/async';\nimport Severity from 'vs/base/common/severity';\nimport * as Strings from 'vs/base/common/strings';\nimport { EventEmitter, ListenerUnbind } from 'vs/base/common/eventEmitter';\n\nimport { TerminateResponse, SuccessData, ErrorData } from 'vs/base/common/processes';\nimport { LineProcess, LineData } from 'vs/base/node/processes';\n\nimport { IOutputService, IOutputChannel } from 'vs/workbench/parts/output/common/output';\nimport { SystemVariables } from 'vs/workbench/parts/lib/node/systemVariables';\n\nimport { IMarkerService } from 'vs/platform/markers/common/markers';\nimport { ValidationStatus } from 'vs/base/common/parsers';\nimport { IModelService } from 'vs/editor/common/services/modelService';\nimport { ProblemMatcher } from 'vs/platform/markers/common/problemMatcher';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\n\nimport { StartStopProblemCollector, WatchingProblemCollector, ProblemCollectorEvents } from 'vs/workbench/parts/tasks/common/problemCollectors';\nimport { ITaskSystem, ITaskSummary, ITaskRunResult, TaskError, TaskErrors, TaskRunnerConfiguration, TaskDescription, CommandOptions, ShowOutput, TelemetryEvent, Triggers, TaskSystemEvents, TaskEvent, TaskType } from 'vs/workbench/parts/tasks/common/taskSystem';\nimport * as FileConfig from './processRunnerConfiguration';\n\nexport class ProcessRunnerSystem extends EventEmitter implements ITaskSystem {\n\n\tpublic static TelemetryEventName: string = 'taskService';\n\n\tprivate fileConfig: FileConfig.ExternalTaskRunnerConfiguration;\n\tprivate variables: SystemVariables;\n\tprivate markerService: IMarkerService;\n\tprivate modelService: IModelService;\n\tprivate outputService: IOutputService;\n\tprivate telemetryService: ITelemetryService;\n\n\tprivate validationStatus: ValidationStatus;\n\tprivate defaultBuildTaskIdentifier: string;\n\tprivate defaultTestTaskIdentifier: string;\n\tprivate configuration: TaskRunnerConfiguration;\n\tprivate outputChannel: IOutputChannel;\n\n\tprivate errorsShown: boolean;\n\tprivate childProcess: LineProcess;\n\tprivate activeTaskIdentifier: string;\n\n\tconstructor(fileConfig:FileConfig.ExternalTaskRunnerConfiguration, variables:SystemVariables, markerService:IMarkerService, modelService: IModelService, telemetryService: ITelemetryService, outputService:IOutputService, outputChannelId:string, clearOutput: boolean = true) {\n\t\tsuper();\n\t\tthis.fileConfig = fileConfig;\n\t\tthis.variables = variables;\n\t\tthis.markerService = markerService;\n\t\tthis.modelService = modelService;\n\t\tthis.outputService = outputService;\n\t\tthis.telemetryService = telemetryService;\n\n\t\tthis.defaultBuildTaskIdentifier = null;\n\t\tthis.defaultTestTaskIdentifier = null;\n\t\tthis.childProcess = null;\n\t\tthis.activeTaskIdentifier = null;\n\t\tthis.outputChannel = this.outputService.getChannel(outputChannelId);\n\n\t\tif (clearOutput) {\n\t\t\tthis.clearOutput();\n\t\t}\n\t\tthis.errorsShown = false;\n\t\tlet parseResult = FileConfig.parse(fileConfig, this);\n\t\tthis.validationStatus = parseResult.validationStatus;\n\t\tthis.configuration = parseResult.configuration;\n\t\tthis.defaultBuildTaskIdentifier = parseResult.defaultBuildTaskIdentifier;\n\t\tthis.defaultTestTaskIdentifier = parseResult.defaultTestTaskIdentifier;\n\n\t\tif (!this.validationStatus.isOK()) {\n\t\t\tthis.showOutput();\n\t\t}\n\t}\n\n\n\tpublic build(): ITaskRunResult {\n\t\tif (!this.defaultBuildTaskIdentifier) {\n\t\t\tthrow new TaskError(Severity.Info, nls.localize('TaskRunnerSystem.noBuildTask', 'No build task configured.'), TaskErrors.NoBuildTask);\n\t\t}\n\t\treturn this.executeTask(this.defaultBuildTaskIdentifier, Triggers.shortcut);\n\t}\n\n\tpublic rebuild(): ITaskRunResult {\n\t\tthrow new Error('Task - Rebuild: not implemented yet');\n\t}\n\n\tpublic clean(): ITaskRunResult {\n\t\tthrow new Error('Task - Clean: not implemented yet');\n\t}\n\n\tpublic runTest(): ITaskRunResult {\n\t\tif (!this.defaultTestTaskIdentifier) {\n\t\t\tthrow new TaskError(Severity.Info, nls.localize('TaskRunnerSystem.noTestTask', 'No test task configured.'), TaskErrors.NoTestTask);\n\t\t}\n\t\treturn this.executeTask(this.defaultTestTaskIdentifier, Triggers.shortcut);\n\t}\n\n\tpublic run(taskIdentifier: string): ITaskRunResult {\n\t\treturn this.executeTask(taskIdentifier);\n\t}\n\n\tpublic isActive(): TPromise<boolean> {\n\t\treturn TPromise.as(!!this.childProcess);\n\t}\n\n\tpublic isActiveSync(): boolean {\n\t\treturn !!this.childProcess;\n\t}\n\n\tpublic canAutoTerminate(): boolean {\n\t\tif (this.childProcess) {\n\t\t\tif (this.activeTaskIdentifier) {\n\t\t\t\tlet task = this.configuration.tasks[this.activeTaskIdentifier];\n\t\t\t\tif (task) {\n\t\t\t\t\treturn !task.promptOnClose;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\tpublic terminate(): TPromise<TerminateResponse> {\n\t\tif (this.childProcess) {\n\t\t\treturn this.childProcess.terminate();\n\t\t}\n\t\treturn TPromise.as({ success: true });\n\t}\n\n\tpublic tasks():TPromise<TaskDescription[]> {\n\t\tlet result: TaskDescription[];\n\t\tif (!this.configuration || !this.configuration.tasks) {\n\t\t\tresult = [];\n\t\t} else {\n\t\t\tresult = Object.keys(this.configuration.tasks).map(key => this.configuration.tasks[key]);\n\t\t}\n\t\treturn TPromise.as(result);\n\t}\n\n\tprivate executeTask(taskIdentifier: string, trigger: string = Triggers.command): ITaskRunResult {\n\t\tif (this.validationStatus.isFatal()) {\n\t\t\tthrow new TaskError(Severity.Error, nls.localize('TaskRunnerSystem.fatalError', 'The provided task configuration has validation errors. See tasks output log for details.'), TaskErrors.ConfigValidationError);\n\t\t}\n\t\tlet task = this.configuration.tasks[taskIdentifier];\n\t\tif (!task) {\n\t\t\tthrow new TaskError(Severity.Info, nls.localize('TaskRunnerSystem.norebuild', 'No task to execute found.'), TaskErrors.TaskNotFound);\n\t\t}\n\t\tlet telemetryEvent: TelemetryEvent = {\n\t\t\ttrigger: trigger,\n\t\t\tcommand: 'other',\n\t\t\tsuccess: true\n\t\t};\n\t\ttry {\n\t\t\tlet result = this.doExecuteTask(task, telemetryEvent);\n\t\t\tresult.promise = result.promise.then((success) => {\n\t\t\t\tthis.telemetryService.publicLog(ProcessRunnerSystem.TelemetryEventName, telemetryEvent);\n\t\t\t\treturn success;\n\t\t\t}, (err: any) => {\n\t\t\t\ttelemetryEvent.success = false;\n\t\t\t\tthis.telemetryService.publicLog(ProcessRunnerSystem.TelemetryEventName, telemetryEvent);\n\t\t\t\treturn TPromise.wrapError<ITaskSummary>(err);\n\t\t\t});\n\t\t\treturn result;\n\t\t} catch (err) {\n\t\t\ttelemetryEvent.success = false;\n\t\t\tthis.telemetryService.publicLog(ProcessRunnerSystem.TelemetryEventName, telemetryEvent);\n\t\t\tif (err instanceof TaskError) {\n\t\t\t\tthrow err;\n\t\t\t} else if (err instanceof Error) {\n\t\t\t\tlet error = <Error>err;\n\t\t\t\tthis.outputChannel.append(error.message);\n\t\t\t\tthrow new TaskError(Severity.Error, error.message, TaskErrors.UnknownError);\n\t\t\t} else {\n\t\t\t\tthis.outputChannel.append(err.toString());\n\t\t\t\tthrow new TaskError(Severity.Error, nls.localize('TaskRunnerSystem.unknownError', 'A unknown error has occurred while executing a task. See task output log for details.'), TaskErrors.UnknownError);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate doExecuteTask(task: TaskDescription, telemetryEvent: TelemetryEvent): ITaskRunResult {\n\t\tlet taskSummary: ITaskSummary = {};\n\t\tlet configuration = this.configuration;\n\t\tif (!this.validationStatus.isOK() && !this.errorsShown) {\n\t\t\tthis.showOutput();\n\t\t\tthis.errorsShown = true;\n\t\t} else {\n\t\t\tthis.clearOutput();\n\t\t}\n\n\t\tlet args: string[] = this.configuration.args ? this.configuration.args.slice() : [];\n\t\t// We need to first pass the task name\n\t\tif (!task.suppressTaskName) {\n\t\t\tif (this.fileConfig.taskSelector) {\n\t\t\t\targs.push(this.fileConfig.taskSelector + task.name);\n\t\t\t} else {\n\t\t\t\targs.push(task.name);\n\t\t\t}\n\t\t}\n\t\t// And then additional arguments\n\t\tif (task.args) {\n\t\t\targs = args.concat(task.args);\n\t\t}\n\t\targs = this.resolveVariables(args);\n\t\tlet command: string = this.resolveVariable(configuration.command);\n\t\tthis.childProcess = new LineProcess(command, args, configuration.isShellCommand, this.resolveOptions(configuration.options));\n\t\ttelemetryEvent.command = this.childProcess.getSanitizedCommand();\n\t\t// we have no problem matchers defined. So show the output log\n\t\tif (task.showOutput === ShowOutput.Always || (task.showOutput === ShowOutput.Silent && task.problemMatchers.length === 0)) {\n\t\t\tthis.showOutput();\n\t\t}\n\n\t\tif (task.echoCommand) {\n\t\t\tlet prompt: string = Platform.isWindows ? '>' : '$';\n\t\t\tthis.log(`running command${prompt} ${command} ${args.join(' ')}`);\n\t\t}\n\t\tif (task.isWatching) {\n\t\t\tlet watchingProblemMatcher = new WatchingProblemCollector(this.resolveMatchers(task.problemMatchers), this.markerService, this.modelService);\n\t\t\tlet toUnbind: ListenerUnbind[] = [];\n\t\t\tlet event: TaskEvent = { taskId: task.id, taskName: task.name, type: TaskType.Watching };\n\t\t\tlet eventCounter: number = 0;\n\t\t\ttoUnbind.push(watchingProblemMatcher.on(ProblemCollectorEvents.WatchingBeginDetected, () => {\n\t\t\t\teventCounter++;\n\t\t\t\tthis.emit(TaskSystemEvents.Active, event);\n\t\t\t}));\n\t\t\ttoUnbind.push(watchingProblemMatcher.on(ProblemCollectorEvents.WatchingEndDetected, () => {\n\t\t\t\teventCounter--;\n\t\t\t\tthis.emit(TaskSystemEvents.Inactive, event);\n\t\t\t}));\n\t\t\twatchingProblemMatcher.aboutToStart();\n\t\t\tlet delayer:Async.Delayer<any> = null;\n\t\t\tthis.activeTaskIdentifier = task.id;\n\t\t\tlet promise = this.childProcess.start().then((success): ITaskSummary => {\n\t\t\t\tthis.childProcessEnded();\n\t\t\t\twatchingProblemMatcher.dispose();\n\t\t\t\ttoUnbind.forEach(unbind => unbind());\n\t\t\t\ttoUnbind = null;\n\t\t\t\tfor (let i = 0; i < eventCounter; i++) {\n\t\t\t\t\tthis.emit(TaskSystemEvents.Inactive, event);\n\t\t\t\t}\n\t\t\t\teventCounter = 0;\n\t\t\t\tif (!this.checkTerminated(task, success)) {\n\t\t\t\t\tthis.log(nls.localize('TaskRunnerSystem.watchingBuildTaskFinished', '\\nWatching build tasks has finished.'));\n\t\t\t\t}\n\t\t\t\tif (success.cmdCode && success.cmdCode === 1 && watchingProblemMatcher.numberOfMatches === 0 && task.showOutput !== ShowOutput.Never) {\n\t\t\t\t\tthis.showOutput();\n\t\t\t\t}\n\t\t\t\ttaskSummary.exitCode = success.cmdCode;\n\t\t\t\treturn taskSummary;\n\t\t\t}, (error: ErrorData) => {\n\t\t\t\tthis.childProcessEnded();\n\t\t\t\twatchingProblemMatcher.dispose();\n\t\t\t\ttoUnbind.forEach(unbind => unbind());\n\t\t\t\ttoUnbind = null;\n\t\t\t\tfor (let i = 0; i < eventCounter; i++) {\n\t\t\t\t\tthis.emit(TaskSystemEvents.Inactive, event);\n\t\t\t\t}\n\t\t\t\teventCounter = 0;\n\t\t\t\treturn this.handleError(task, error);\n\t\t\t}, (progress: LineData) => {\n\t\t\t\tlet line = Strings.removeAnsiEscapeCodes(progress.line);\n\t\t\t\tthis.outputChannel.append(line + '\\n');\n\t\t\t\twatchingProblemMatcher.processLine(line);\n\t\t\t\tif (delayer === null) {\n\t\t\t\t\tdelayer = new Async.Delayer(3000);\n\t\t\t\t}\n\t\t\t\tdelayer.trigger(() => {\n\t\t\t\t\twatchingProblemMatcher.forceDelivery();\n\t\t\t\t\treturn null;\n\t\t\t\t}).then(() => {\n\t\t\t\t\tdelayer = null;\n\t\t\t\t});\n\t\t\t});\n\t\t\tlet result: ITaskRunResult = (<any>task).tscWatch ? { restartOnFileChanges: '**/*.ts', promise } : { promise };\n\t\t\treturn result;\n\t\t} else {\n\t\t\tlet event: TaskEvent = { taskId: task.id, taskName: task.name, type: TaskType.SingleRun };\n\t\t\tthis.emit(TaskSystemEvents.Active, event );\n\t\t\tlet startStopProblemMatcher = new StartStopProblemCollector(this.resolveMatchers(task.problemMatchers), this.markerService, this.modelService);\n\t\t\tthis.activeTaskIdentifier = task.id;\n\t\t\tlet promise = this.childProcess.start().then((success): ITaskSummary => {\n\t\t\t\tthis.childProcessEnded();\n\t\t\t\tstartStopProblemMatcher.done();\n\t\t\t\tstartStopProblemMatcher.dispose();\n\t\t\t\tthis.checkTerminated(task, success);\n\t\t\t\tthis.emit(TaskSystemEvents.Inactive, event);\n\t\t\t\tif (success.cmdCode && success.cmdCode === 1 && startStopProblemMatcher.numberOfMatches === 0 && task.showOutput !== ShowOutput.Never) {\n\t\t\t\t\tthis.showOutput();\n\t\t\t\t}\n\t\t\t\ttaskSummary.exitCode = success.cmdCode;\n\t\t\t\treturn taskSummary;\n\t\t\t}, (error: ErrorData) => {\n\t\t\t\tthis.childProcessEnded();\n\t\t\t\tstartStopProblemMatcher.dispose();\n\t\t\t\tthis.emit(TaskSystemEvents.Inactive, event);\n\t\t\t\treturn this.handleError(task, error);\n\t\t\t}, (progress) => {\n\t\t\t\tlet line = Strings.removeAnsiEscapeCodes(progress.line);\n\t\t\t\tthis.outputChannel.append(line + '\\n');\n\t\t\t\tstartStopProblemMatcher.processLine(line);\n\t\t\t});\n\t\t\treturn { promise };\n\t\t}\n\t}\n\n\tprivate childProcessEnded(): void {\n\t\tthis.childProcess = null;\n\t\tthis.activeTaskIdentifier = null;\n\t}\n\n\tprivate handleError(task: TaskDescription, error: ErrorData): Promise {\n\t\tlet makeVisible = false;\n\t\tif (error.error && !error.terminated) {\n\t\t\tlet args:string = this.configuration.args ? this.configuration.args.join(' ') : '';\n\t\t\tthis.log(nls.localize('TaskRunnerSystem.childProcessError', 'Failed to launch external program {0} {1}.', this.configuration.command, args));\n\t\t\tthis.outputChannel.append(error.error.message);\n\t\t\tmakeVisible = true;\n\t\t}\n\n\t\tif (error.stdout) {\n\t\t\tthis.outputChannel.append(error.stdout);\n\t\t\tmakeVisible = true;\n\t\t}\n\t\tif (error.stderr) {\n\t\t\tthis.outputChannel.append(error.stderr);\n\t\t\tmakeVisible = true;\n\t\t}\n\t\tmakeVisible = this.checkTerminated(task, error) || makeVisible;\n\t\tif (makeVisible) {\n\t\t\tthis.showOutput();\n\t\t}\n\t\treturn Promise.wrapError(error);\n\t}\n\n\tprivate checkTerminated(task: TaskDescription, data: SuccessData | ErrorData): boolean {\n\t\tif (data.terminated) {\n\t\t\tthis.log(nls.localize('TaskRunnerSystem.cancelRequested', '\\nThe task \\'{0}\\' was terminated per user request.', task.name));\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate resolveOptions(options: CommandOptions): CommandOptions {\n\t\tlet result: CommandOptions = { cwd: this.resolveVariable(options.cwd) };\n\t\tif (options.env) {\n\t\t\tresult.env = Object.create(null);\n\t\t\tObject.keys(options.env).forEach((key) => {\n\t\t\t\tlet value: any = options.env[key];\n\t\t\t\tif (Types.isString(value)) {\n\t\t\t\t\tresult.env[key] = this.resolveVariable(value);\n\t\t\t\t} else {\n\t\t\t\t\tresult.env[key] = value.toString();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate resolveVariables(value:string[]): string[] {\n\t\treturn value.map(s => this.resolveVariable(s));\n\t}\n\n\tprivate resolveMatchers<T extends ProblemMatcher>(values: T[]): T[] {\n\t\tif (values.length === 0) {\n\t\t\treturn values;\n\t\t}\n\t\tlet result:T[] = [];\n\t\tvalues.forEach((matcher) => {\n\t\t\tif (!matcher.filePrefix) {\n\t\t\t\tresult.push(matcher);\n\t\t\t} else {\n\t\t\t\tlet copy = Objects.clone(matcher);\n\t\t\t\tcopy.filePrefix = this.resolveVariable(copy.filePrefix);\n\t\t\t\tresult.push(copy);\n\t\t\t}\n\t\t});\n\t\treturn result;\n\t}\n\n\tprivate resolveVariable(value: string): string {\n\t\tlet regexp =/\\$\\{(.*?)\\}/g;\n\t\treturn value.replace(regexp, (match:string, name:string) => {\n\t\t\tlet value = (<any>this.variables)[name];\n\t\t\tif (value) {\n\t\t\t\treturn value;\n\t\t\t} else {\n\t\t\t\treturn match;\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic log(value: string): void  {\n\t\tthis.outputChannel.append(value + '\\n');\n\t}\n\n\tprivate showOutput(): void {\n\t\tthis.outputChannel.show(true);\n\t}\n\n\tprivate clearOutput(): void {\n\t\tthis.outputChannel.clear();\n\t}\n}"]}