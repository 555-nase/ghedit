{"version":3,"sources":["vs/workbench/parts/tasks/node/processRunnerDetector.ts"],"names":[],"mappings":"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","file":"vs/workbench/parts/tasks/node/processRunnerDetector.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport nls = require('vs/nls');\nimport { TPromise } from 'vs/base/common/winjs.base';\nimport Strings = require('vs/base/common/strings');\nimport Collections = require('vs/base/common/collections');\n\nimport { CommandOptions, resolveCommandOptions, Source, ErrorData } from 'vs/base/common/processes';\nimport { LineProcess } from 'vs/base/node/processes';\n\nimport { IFileService } from 'vs/platform/files/common/files';\n\nimport { SystemVariables } from 'vs/workbench/parts/lib/node/systemVariables';\nimport { IWorkspaceContextService } from 'vs/workbench/services/workspace/common/contextService';\n\nimport * as FileConfig from './processRunnerConfiguration';\n\nlet build: string = 'build';\nlet test: string = 'test';\n\ninterface TaskInfo {\n\tindex: number;\n\texact: number;\n}\n\ninterface TaskInfos {\n\tbuild: TaskInfo;\n\ttest: TaskInfo;\n}\n\ninterface TaskDetectorMatcher {\n\tinit();\n\tmatch(tasks: string[], line:string);\n}\n\ninterface DetectorConfig {\n\tmatcher: TaskDetectorMatcher;\n\targ: string;\n}\n\nclass RegexpTaskMatcher implements TaskDetectorMatcher {\n\tprivate regexp: RegExp;\n\n\tconstructor(regExp:RegExp) {\n\t\tthis.regexp = regExp;\n\t}\n\n\tinit() {\n\t}\n\n\tmatch(tasks: string[], line: string) {\n\t\tlet matches = this.regexp.exec(line);\n\t\tif (matches && matches.length > 0) {\n\t\t\ttasks.push(matches[1]);\n\t\t}\n\t}\n}\n\nclass GruntTaskMatcher implements TaskDetectorMatcher {\n\tprivate tasksStart: boolean;\n\tprivate tasksEnd: boolean;\n\tprivate descriptionOffset: number;\n\n\tinit() {\n\t\tthis.tasksStart = false;\n\t\tthis.tasksEnd = false;\n\t\tthis.descriptionOffset = null;\n\t}\n\n\tmatch(tasks: string[], line: string) {\n\t\t\t// grunt lists tasks as follows (description is wrapped into a new line if too long):\n\t\t\t// ...\n\t\t\t// Available tasks\n\t\t\t//         uglify  Minify files with UglifyJS. *\n\t\t\t//         jshint  Validate files with JSHint. *\n\t\t\t//           test  Alias for \"jshint\", \"qunit\" tasks.\n\t\t\t//        default  Alias for \"jshint\", \"qunit\", \"concat\", \"uglify\" tasks.\n\t\t\t//           long  Alias for \"eslint\", \"qunit\", \"browserify\", \"sass\",\n\t\t\t//                 \"autoprefixer\", \"uglify\", tasks.\n\t\t\t//\n\t\t\t// Tasks run in the order specified\n\t\t\tif (!this.tasksStart && !this.tasksEnd) {\n\t\t\t\tif (line.indexOf('Available tasks') === 0) {\n\t\t\t\t\tthis.tasksStart = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (this.tasksStart && !this.tasksEnd) {\n\t\t\t\tif (line.indexOf('Tasks run in the order specified') === 0) {\n\t\t\t\t\tthis.tasksEnd = true;\n\t\t\t\t} else {\n\t\t\t\t\tif (this.descriptionOffset === null) {\n\t\t\t\t\t\tthis.descriptionOffset = line.match(/\\S  \\S/).index + 1;\n\t\t\t\t\t}\n\t\t\t\t\tlet taskName = line.substr(0,this.descriptionOffset).trim();\n\t\t\t\t\tif (taskName.length > 0) {\n\t\t\t\t\t\ttasks.push(taskName);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t}\n}\n\nexport interface DetectorResult {\n\tconfig: FileConfig.ExternalTaskRunnerConfiguration;\n\tstdout: string[];\n\tstderr: string[];\n}\n\nexport class ProcessRunnerDetector {\n\n\tprivate static Version: string = '0.1.0';\n\n\tprivate static SupportedRunners: Collections.IStringDictionary<boolean> = {\n\t\t'gulp': true,\n\t\t'jake': true,\n\t\t'grunt': true\n\t};\n\n\tprivate static TaskMatchers: Collections.IStringDictionary<DetectorConfig> = {\n\t\t'gulp': { matcher: new RegexpTaskMatcher(/^(.*)$/), arg: '--tasks-simple' },\n\t\t'jake': { matcher: new RegexpTaskMatcher(/^jake\\s+([^\\s]+)\\s/), arg: '--tasks' },\n\t\t'grunt': { matcher: new GruntTaskMatcher(), arg: '--help' },\n\t};\n\n\tpublic static supports(runner: string): boolean {\n\t\treturn ProcessRunnerDetector.SupportedRunners[runner];\n\t}\n\n\tprivate static detectorConfig(runner:string): DetectorConfig {\n\t\treturn ProcessRunnerDetector.TaskMatchers[runner];\n\t}\n\n\tprivate static DefaultProblemMatchers: string[] = ['$lessCompile', '$tsc', '$jshint'];\n\n\tprivate fileService: IFileService;\n\tprivate contextService: IWorkspaceContextService;\n\tprivate variables: SystemVariables;\n\tprivate taskConfiguration: FileConfig.ExternalTaskRunnerConfiguration;\n\tprivate _stderr: string[];\n\tprivate _stdout: string[];\n\n\tconstructor(fileService: IFileService, contextService: IWorkspaceContextService, variables:SystemVariables, config: FileConfig.ExternalTaskRunnerConfiguration = null) {\n\t\tthis.fileService = fileService;\n\t\tthis.contextService = contextService;\n\t\tthis.variables = variables;\n\t\tthis.taskConfiguration = config;\n\t\tthis._stderr = [];\n\t\tthis._stdout = [];\n\t}\n\n\tpublic get stderr(): string[] {\n\t\treturn this._stderr;\n\t}\n\n\tpublic get stdout(): string[] {\n\t\treturn this._stdout;\n\t}\n\n\tpublic detect(list: boolean = false, detectSpecific?: string): TPromise<DetectorResult> {\n\t\tif (this.taskConfiguration && this.taskConfiguration.command && ProcessRunnerDetector.supports(this.taskConfiguration.command)) {\n\t\t\tlet config = ProcessRunnerDetector.detectorConfig(this.taskConfiguration.command);\n\t\t\tlet args = (this.taskConfiguration.args || []).concat(config.arg);\n\t\t\tlet options: CommandOptions = this.taskConfiguration.options ? resolveCommandOptions(this.taskConfiguration.options, this.variables) : { cwd: this.variables.workspaceRoot };\n\t\t\tlet isShellCommand = !!this.taskConfiguration.isShellCommand;\n\t\t\treturn this.runDetection(\n\t\t\t\tnew LineProcess(this.taskConfiguration.command, this.variables.resolve(args), isShellCommand, options),\n\t\t\t\tthis.taskConfiguration.command, isShellCommand, config.matcher, ProcessRunnerDetector.DefaultProblemMatchers, list);\n\t\t} else {\n\t\t\tif (detectSpecific) {\n\t\t\t\tlet detectorPromise: TPromise<DetectorResult>;\n\t\t\t\tif ('gulp' === detectSpecific) {\n\t\t\t\t\tdetectorPromise = this.tryDetectGulp(list);\n\t\t\t\t} else if ('jake' === detectSpecific) {\n\t\t\t\t\tdetectorPromise = this.tryDetectJake(list);\n\t\t\t\t} else if ('grunt' === detectSpecific) {\n\t\t\t\t\tdetectorPromise = this.tryDetectGrunt(list);\n\t\t\t\t}\n\t\t\t\treturn detectorPromise.then((value) => {\n\t\t\t\t\tif (value) {\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn { config: null, stdout: this.stdout, stderr: this.stderr };\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\treturn this.tryDetectGulp(list).then((value) => {\n\t\t\t\t\tif (value) {\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}\n\t\t\t\t\treturn this.tryDetectJake(list).then((value) => {\n\t\t\t\t\t\tif (value) {\n\t\t\t\t\t\t\treturn value;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn this.tryDetectGrunt(list).then((value) => {\n\t\t\t\t\t\t\tif (value) {\n\t\t\t\t\t\t\t\treturn value;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn { config: null, stdout: this.stdout, stderr: this.stderr };\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate tryDetectGulp(list:boolean): TPromise<{ config: FileConfig.ExternalTaskRunnerConfiguration; stderr: string[]; }> {\n\t\treturn this.fileService.resolveFile(this.contextService.toResource('gulpfile.js')).then((stat) => {\n\t\t\tlet config = ProcessRunnerDetector.detectorConfig('gulp');\n\t\t\tlet process = new LineProcess('gulp', [config.arg, '--no-color'], true, {cwd: this.variables.workspaceRoot});\n\t\t\treturn this.runDetection(process, 'gulp', true, config.matcher, ProcessRunnerDetector.DefaultProblemMatchers, list);\n\t\t}, (err: any): FileConfig.ExternalTaskRunnerConfiguration => {\n\t\t\treturn null;\n\t\t});\n\t}\n\n\tprivate tryDetectGrunt(list:boolean): TPromise<{ config: FileConfig.ExternalTaskRunnerConfiguration; stderr: string[]; }> {\n\t\treturn this.fileService.resolveFile(this.contextService.toResource('Gruntfile.js')).then((stat) => {\n\t\t\tlet config = ProcessRunnerDetector.detectorConfig('grunt');\n\t\t\tlet process = new LineProcess('grunt', [config.arg, '--no-color'], true, {cwd: this.variables.workspaceRoot});\n\t\t\treturn this.runDetection(process, 'grunt', true, config.matcher, ProcessRunnerDetector.DefaultProblemMatchers, list);\n\t\t}, (err: any): FileConfig.ExternalTaskRunnerConfiguration => {\n\t\t\treturn null;\n\t\t});\n\t}\n\n\tprivate tryDetectJake(list:boolean): TPromise<{ config: FileConfig.ExternalTaskRunnerConfiguration; stderr: string[]; }> {\n\t\tlet run = () => {\n\t\t\tlet config = ProcessRunnerDetector.detectorConfig('jake');\n\t\t\tlet process = new LineProcess('jake', [config.arg], true, {cwd: this.variables.workspaceRoot});\n\t\t\treturn this.runDetection(process, 'jake', true, config.matcher, ProcessRunnerDetector.DefaultProblemMatchers, list);\n\t\t};\n\t\treturn this.fileService.resolveFile(this.contextService.toResource('Jakefile')).then((stat) => {\n\t\t\treturn run();\n\t\t}, (err: any) => {\n\t\t\treturn this.fileService.resolveFile(this.contextService.toResource('Jakefile.js')).then((stat) => {\n\t\t\t\treturn run();\n\t\t\t}, (err: any): FileConfig.ExternalTaskRunnerConfiguration => {\n\t\t\t\treturn null;\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate runDetection(process: LineProcess, command: string, isShellCommand: boolean, matcher: TaskDetectorMatcher, problemMatchers: string[], list: boolean): TPromise<DetectorResult> {\n\t\tlet tasks:string[] = [];\n\t\tmatcher.init();\n\t\treturn process.start().then((success) => {\n\t\t\tif (tasks.length === 0) {\n\t\t\t\tif (success.cmdCode !== 0) {\n\t\t\t\t\tif (command === 'gulp') {\n\t\t\t\t\t\tthis._stderr.push(nls.localize('TaskSystemDetector.noGulpTasks', 'Running gulp --tasks-simple didn\\'t list any tasks. Did you run npm install?'));\n\t\t\t\t\t} else if (command === 'jake') {\n\t\t\t\t\t\tthis._stderr.push(nls.localize('TaskSystemDetector.noJakeTasks', 'Running jake --tasks didn\\'t list any tasks. Did you run npm install?'));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn { config: null, stdout: this._stdout, stderr: this._stderr };\n\t\t\t}\n\t\t\tlet result: FileConfig.ExternalTaskRunnerConfiguration = {\n\t\t\t\tversion: ProcessRunnerDetector.Version,\n\t\t\t\tcommand: command,\n\t\t\t\tisShellCommand: isShellCommand\n\t\t\t};\n\t\t\t// Hack. We need to remove this.\n\t\t\tif (command === 'gulp') {\n\t\t\t\tresult.args = ['--no-color'];\n\t\t\t}\n\t\t\tresult.tasks = this.createTaskDescriptions(tasks, problemMatchers, list);\n\t\t\treturn { config: result, stdout: this._stdout, stderr: this._stderr };\n\t\t}, (err: ErrorData) => {\n\t\t\tlet error = err.error;\n\t\t\tif ((<any>error).code === 'ENOENT') {\n\t\t\t\tif (command === 'gulp') {\n\t\t\t\t\tthis._stderr.push(nls.localize('TaskSystemDetector.noGulpProgram', 'Gulp is not installed on your system. Run npm install -g gulp to install it.'));\n\t\t\t\t} else if (command === 'jake') {\n\t\t\t\t\tthis._stderr.push(nls.localize('TaskSystemDetector.noJakeProgram', 'Jake is not installed on your system. Run npm install -g jake to install it.'));\n\t\t\t\t} else if (command === 'grunt') {\n\t\t\t\t\tthis._stderr.push(nls.localize('TaskSystemDetector.noGruntProgram', 'Grunt is not installed on your system. Run npm install -g grunt to install it.'));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._stderr.push(nls.localize('TaskSystemDetector.noProgram', 'Program {0} was not found. Message is {1}', command, error.message));\n\t\t\t}\n\t\t\treturn { config: null, stdout: this._stdout, stderr: this._stderr };\n\t\t}, (progress) => {\n\t\t\tif (progress.source === Source.stderr) {\n\t\t\t\tthis._stderr.push(progress.line);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tlet line = Strings.removeAnsiEscapeCodes(progress.line);\n\t\t\tlet matches = matcher.match(tasks, line);\n\t\t\tif (matches && matches.length > 0) {\n\t\t\t\ttasks.push(matches[1]);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate createTaskDescriptions(tasks: string[], problemMatchers: string[], list: boolean):FileConfig.TaskDescription[] {\n\t\tlet taskConfigs: FileConfig.TaskDescription[] = [];\n\t\tif (list) {\n\t\t\ttasks.forEach((task) => {\n\t\t\t\ttaskConfigs.push({\n\t\t\t\t\ttaskName: task,\n\t\t\t\t\targs: [],\n\t\t\t\t\tisWatching: false\n\t\t\t\t});\n\t\t\t});\n\t\t} else {\n\t\t\tlet taskInfos: TaskInfos = {\n\t\t\t\tbuild: { index: -1, exact: -1 },\n\t\t\t\ttest: { index: -1, exact: -1 }\n\t\t\t};\n\t\t\ttasks.forEach((task, index) => {\n\t\t\t\tthis.testBuild(taskInfos.build, task, index);\n\t\t\t\tthis.testTest(taskInfos.test, task, index);\n\t\t\t});\n\t\t\tif (taskInfos.build.index !== -1) {\n\t\t\t\tlet name = tasks[taskInfos.build.index];\n\t\t\t\tthis._stdout.push(nls.localize('TaskSystemDetector.buildTaskDetected','Build task named \\'{0}\\' detected.', name));\n\t\t\t\ttaskConfigs.push({\n\t\t\t\t\ttaskName: name,\n\t\t\t\t\targs: [],\n\t\t\t\t\tisBuildCommand: true,\n\t\t\t\t\tisWatching: false,\n\t\t\t\t\tproblemMatcher: problemMatchers\n\t\t\t\t});\n\t\t\t}\n\t\t\tif (taskInfos.test.index !== -1) {\n\t\t\t\tlet name = tasks[taskInfos.test.index];\n\t\t\t\tthis._stdout.push(nls.localize('TaskSystemDetector.testTaskDetected','Test task named \\'{0}\\' detected.', name));\n\t\t\t\ttaskConfigs.push({\n\t\t\t\t\ttaskName: name,\n\t\t\t\t\targs: [],\n\t\t\t\t\tisTestCommand: true\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\treturn taskConfigs;\n\t}\n\n\tprivate testBuild(taskInfo: TaskInfo, taskName: string, index: number):void {\n\t\tif (taskName === build) {\n\t\t\ttaskInfo.index = index;\n\t\t\ttaskInfo.exact = 3;\n\t\t} else if ((Strings.startsWith(taskName, build) || Strings.endsWith(taskName, build)) && taskInfo.exact < 3) {\n\t\t\ttaskInfo.index = index;\n\t\t\ttaskInfo.exact = 2;\n\t\t} else if (taskName.indexOf(build) !== -1 && taskInfo.exact < 2) {\n\t\t\ttaskInfo.index = index;\n\t\t\ttaskInfo.exact = 1;\n\t\t}\n\t}\n\n\tprivate testTest(taskInfo: TaskInfo, taskName: string, index: number):void {\n\t\tif (taskName === test) {\n\t\t\ttaskInfo.index = index;\n\t\t\ttaskInfo.exact = 3;\n\t\t} else if ((Strings.startsWith(taskName, test) || Strings.endsWith(taskName, test)) && taskInfo.exact < 3) {\n\t\t\ttaskInfo.index = index;\n\t\t\ttaskInfo.exact = 2;\n\t\t} else if (taskName.indexOf(test) !== -1 && taskInfo.exact < 2) {\n\t\t\ttaskInfo.index = index;\n\t\t\ttaskInfo.exact = 1;\n\t\t}\n\t}\n}\n"]}