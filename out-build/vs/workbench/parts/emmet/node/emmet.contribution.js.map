{"version":3,"sources":["vs/workbench/parts/emmet/node/emmet.contribution.ts"],"names":[],"mappings":";IAAA;;;oGAGgG;IAChG,YAAY,CAAC;IAcb,6CAAoB,CAAC,oBAAoB,CAAC,IAAI,+CAAsB,CAAC,uCAAwB,EAC5F,uCAAwB,CAAC,EAAE,EAC3B,GAAG,CAAC,QAAQ,CAAC,CAA0B,EACvC,IAA4B,CAAC,CAAC,CAAC,CAAC;IAEjC,yCAAmB,CAAC,mBAAmB,CAAC;QACvC,EAAE,EAAE,uCAAwB,CAAC,EAAE;QAC/B,MAAM,EAAE,yCAAmB,CAAC,MAAM,CAAC,aAAa,EAAE;QAClD,OAAO,EAAE,0BAAM,CAAC,GAAG,CAClB,0BAAM,CAAC,GAAG,CAAC,YAAY,CAAC,oCAAoC,CAAC,EAC7D,0BAAM,CAAC,GAAG,CAAC,YAAY,CAAC,iDAAiD,CAAC,EAC1E,0BAAM,CAAC,GAAG,CAAC,YAAY,CAAC,iDAAiD,CAAC,EAC1E,0BAAM,CAAC,GAAG,CAAC,YAAY,CAAC,yCAAyC,CAAC,EAClE,0BAAM,CAAC,GAAG,CAAC,oCAAoC,CAAC,CAChD;QACD,OAAO,EAAE,kBAAO,CAAC,GAAG;KACpB,CAAC,CAAC;IAEH,uBAAuB;IACvB,IAAM,qBAAqB,GAA2B,mBAAQ,CAAC,EAAE,CAAC,kCAAuB,CAAC,aAAa,CAAC,CAAC;IACzG,qBAAqB,CAAC,qBAAqB,CAAC;QAC3C,IAAI,EAAE,OAAO;QACb,OAAO,EAAE,CAAC;QACV,OAAO,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAyB,EAAE,IAAqB,CAAC;QACvE,MAAM,EAAE,QAAQ;QAChB,YAAY,EAAE;YACb,6BAA6B,EAAE;gBAC9B,MAAM,EAAE,SAAS;gBACjB,SAAS,EAAE,IAAI;gBACf,aAAa,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAuB,EAAE,IAAmE,CAAC;aACzH;SACD;KACD,CAAC,CAAC","file":"vs/workbench/parts/emmet/node/emmet.contribution.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport nls = require('vs/nls');\n\nimport {Registry} from 'vs/platform/platform';\nimport {CommonEditorRegistry, EditorActionDescriptor} from 'vs/editor/common/editorCommonExtensions';\nimport {IConfigurationRegistry, Extensions as ConfigurationExtensions} from 'vs/platform/configuration/common/configurationRegistry';\n\nimport editorCommon = require('vs/editor/common/editorCommon');\nimport {ExpandAbbreviationAction} from './emmetActions';\nimport {KeybindingsRegistry} from 'vs/platform/keybinding/common/keybindingsRegistry';\nimport {KeyCode} from 'vs/base/common/keyCodes';\nimport {KbExpr} from 'vs/platform/keybinding/common/keybindingService';\n\nCommonEditorRegistry.registerEditorAction(new EditorActionDescriptor(ExpandAbbreviationAction,\n\tExpandAbbreviationAction.ID,\n\tnls.localize('expandAbbreviationAction',\n\t\"Emmet: Expand Abbreviation\")));\n\nKeybindingsRegistry.registerCommandRule({\n\tid: ExpandAbbreviationAction.ID,\n\tweight: KeybindingsRegistry.WEIGHT.editorContrib(),\n\tcontext: KbExpr.and(\n\t\tKbExpr.has(editorCommon.KEYBINDING_CONTEXT_EDITOR_TEXT_FOCUS),\n\t\tKbExpr.not(editorCommon.KEYBINDING_CONTEXT_EDITOR_HAS_NON_EMPTY_SELECTION),\n\t\tKbExpr.not(editorCommon.KEYBINDING_CONTEXT_EDITOR_HAS_MULTIPLE_SELECTIONS),\n\t\tKbExpr.not(editorCommon.KEYBINDING_CONTEXT_EDITOR_TAB_MOVES_FOCUS),\n\t\tKbExpr.has('config.emmet.triggerExpansionOnTab')\n\t),\n\tprimary: KeyCode.Tab\n});\n\n// Configuration: emmet\nconst configurationRegistry = <IConfigurationRegistry>Registry.as(ConfigurationExtensions.Configuration);\nconfigurationRegistry.registerConfiguration({\n\t'id': 'emmet',\n\t'order': 7,\n\t'title': nls.localize('emmetConfigurationTitle', \"Emmet configuration\"),\n\t'type': 'object',\n\t'properties': {\n\t\t'emmet.triggerExpansionOnTab': {\n\t\t\t'type': 'boolean',\n\t\t\t'default': true,\n\t\t\t'description': nls.localize('triggerExpansionOnTab', \"When enabled, emmet abbreviations are expanded when pressing TAB.\")\n\t\t}\n\t}\n});"]}