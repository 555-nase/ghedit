{"version":3,"file":"vs/workbench/parts/emmet/node/emmetActions.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/workbench/parts/emmet/node/emmetActions.ts"],"names":[],"mappings":";;;;;;IAAA;;;oGAGgG;IAChG,mCAAmC;IACnC,YAAY,CAAC;IAQb;QAA8C,4CAAY;QAKzD,kCAAY,UAAuC,EAAE,MAAyB;YAC7E,kBAAM,UAAU,EAAE,MAAM,EAAE,kCAAS,CAAC,SAAS,CAAC,CAAC;YAC/C,IAAI,CAAC,cAAc,GAAG,IAAI,+BAAc,CAAC,MAAM,CAAC,CAAC;QAClD,CAAC;QAEM,sCAAG,GAAV;YAAA,iBAkBC;YAjBA,MAAM,CAAC,IAAI,qBAAQ,CAAC,UAAC,CAAC,EAAE,CAAC;gBACxB,OAAO,CAAC,CAAC,OAAO,CAAC,EAAE,UAAC,OAAO;oBAC1B,IAAI,CAAC;wBACJ,EAAE,CAAC,CAAC,CAAC,KAAI,CAAC,cAAc,CAAC,kBAAkB,EAAE,CAAC,CAAC,CAAC;4BAC/C,KAAI,CAAC,cAAc,CAAC,mBAAmB,EAAE,CAAC;4BAC1C,MAAM,CAAC;wBACR,CAAC;wBACD,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,qBAAqB,EAAE,KAAI,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;4BAC9D,KAAI,CAAC,cAAc,CAAC,mBAAmB,EAAE,CAAC;wBAC3C,CAAC;oBACF,CAAE;oBAAA,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBAEf,CAAC;4BAAS,CAAC;wBACV,KAAI,CAAC,cAAc,CAAC,UAAU,EAAE,CAAC;oBAClC,CAAC;gBACF,CAAC,EAAE,CAAC,CAAC,CAAC;YACP,CAAC,CAAC,CAAC;QACJ,CAAC;QA3BM,2BAAE,GAAG,wCAAwC,CAAC;QA4BtD,+BAAC;IAAD,CAAC,AA7BD,CAA8C,2BAAY,GA6BzD;IA7BY,gCAAwB,2BA6BpC,CAAA","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n/// <reference path=\"emmet.d.ts\" />\n'use strict';\n\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport {IEditorActionDescriptorData, ICommonCodeEditor} from 'vs/editor/common/editorCommon';\nimport {EditorAction} from 'vs/editor/common/editorAction';\nimport {Behaviour} from 'vs/editor/common/editorActionEnablement';\nimport {EditorAccessor} from './editorAccessor';\n\nexport class ExpandAbbreviationAction extends EditorAction {\n\tstatic ID = 'editor.emmet.action.expandAbbreviation';\n\n\tprivate editorAccessor: EditorAccessor;\n\n\tconstructor(descriptor: IEditorActionDescriptorData, editor: ICommonCodeEditor) {\n\t\tsuper(descriptor, editor, Behaviour.TextFocus);\n\t\tthis.editorAccessor = new EditorAccessor(editor);\n\t}\n\n\tpublic run(): TPromise<boolean> {\n\t\treturn new TPromise((c, e) => {\n\t\t\trequire(['emmet'], (_module) => {\n\t\t\t\ttry {\n\t\t\t\t\tif (!this.editorAccessor.isEmmetEnabledMode()) {\n\t\t\t\t\t\tthis.editorAccessor.noExpansionOccurred();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tif (!_module.run('expand_abbreviation', this.editorAccessor)) {\n\t\t\t\t\t\tthis.editorAccessor.noExpansionOccurred();\n\t\t\t\t\t}\n\t\t\t\t} catch (err) {\n\t\t\t\t\t//\n\t\t\t\t} finally {\n\t\t\t\t\tthis.editorAccessor.flushCache();\n\t\t\t\t}\n\t\t\t}, e);\n\t\t});\n\t}\n}"]}