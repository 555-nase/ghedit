{"version":3,"file":"vs/workbench/parts/emmet/node/editorAccessor.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/workbench/parts/emmet/node/editorAccessor.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport {IPosition, Handler, ICommonCodeEditor} from 'vs/editor/common/editorCommon';\nimport strings = require('vs/base/common/strings');\nimport snippets = require('vs/editor/contrib/snippet/common/snippet');\nimport {Range} from 'vs/editor/common/core/range';\nimport {ReplaceCommand} from 'vs/editor/common/commands/replaceCommand';\n\nimport emmet = require('emmet');\n\nexport class EditorAccessor implements emmet.Editor {\n\n\teditor: ICommonCodeEditor;\n\n\tlineStarts: number[] = null;\n\n\temmetSupportedModes = ['html', 'razor', 'css', 'less', 'scss', 'xml', 'xsl', 'jade', 'handlebars', 'hbs', 'jsx', 'tsx', 'erb', 'php', 'twig'];\n\n\tconstructor(editor: ICommonCodeEditor) {\n\t\tthis.editor = editor;\n\t}\n\n\tpublic noExpansionOccurred(): void {\n\t\t// return the tab key handling back to the editor\n\t\tthis.editor.trigger('emmet', Handler.Tab, {});\n\t}\n\n\tpublic isEmmetEnabledMode(): boolean {\n\t\tlet syntax = this.getSyntax();\n\t\treturn (this.emmetSupportedModes.indexOf(syntax) !== -1);\n\t}\n\n\tpublic getSelectionRange(): emmet.Range {\n\t\tlet selection = this.editor.getSelection();\n\t\treturn {\n\t\t\tstart: this.getOffsetFromPosition(selection.getStartPosition()),\n\t\t\tend: this.getOffsetFromPosition(selection.getEndPosition())\n\t\t};\n\t}\n\n\tpublic getCurrentLineRange(): emmet.Range {\n\t\tlet currentLine = this.editor.getSelection().startLineNumber;\n\t\tlet lineStarts = this.getLineStarts();\n\t\tlet start = lineStarts[currentLine - 1];\n\t\tlet end = lineStarts[currentLine];\n\t\treturn {\n\t\t\tstart: start,\n\t\t\tend: end\n\t\t};\n\t}\n\n\tpublic getCaretPos(): number {\n\t\tlet selectionStart = this.editor.getSelection().getStartPosition();\n\t\treturn this.getOffsetFromPosition(selectionStart);\n\t}\n\n\tpublic setCaretPos(pos: number): void {\n\t\t//\n\t}\n\n\tpublic getCurrentLine(): string {\n\t\tlet selectionStart = this.editor.getSelection().getStartPosition();\n\t\treturn this.editor.getModel().getLineContent(selectionStart.lineNumber);\n\t}\n\n\tpublic replaceContent(value: string, start: number, end: number, no_indent: boolean): void {\n\t\t//console.log('value', value);\n\t\tlet startPosition = this.getPositionFromOffset(start);\n\t\tlet endPosition = this.getPositionFromOffset(end);\n\n\t\t// test if < or </ are located before the replace range. Either replace these too, or block the expansion\n\t\tvar currentLine = this.editor.getModel().getLineContent(startPosition.lineNumber).substr(0, startPosition.column); // cpontent before the replaced range\n\t\tvar match = currentLine.match(/<[/]?$/);\n\t\tif (match) {\n\t\t\tif (strings.startsWith(value, match[0])) {\n\t\t\t\tstartPosition = { lineNumber: startPosition.lineNumber, column: startPosition.column - match[0].length };\n\t\t\t} else {\n\t\t\t\treturn; // ignore\n\t\t\t}\n\t\t}\n\n\t\t// shift column by +1 since they are 1 based\n\t\tlet range = new Range(startPosition.lineNumber, startPosition.column + 1, endPosition.lineNumber, endPosition.column + 1);\n\t\tlet deletePreviousChars = 0;\n\n\t\tif (range.startLineNumber === range.endLineNumber) {\n\t\t\t// The snippet will delete\n\t\t\tdeletePreviousChars = range.endColumn - range.startColumn;\n\t\t} else {\n\t\t\t// We must manually delete\n\t\t\tlet command = new ReplaceCommand(range, '');\n\t\t\tthis.editor.executeCommand('emmet', command);\n\t\t\tdeletePreviousChars = 0;\n\t\t}\n\n\t\tlet snippet = snippets.CodeSnippet.convertExternalSnippet(value, snippets.ExternalSnippetType.EmmetSnippet);\n\t\tlet codeSnippet = new snippets.CodeSnippet(snippet);\n\t\tsnippets.getSnippetController(this.editor).run(codeSnippet, deletePreviousChars, 0);\n\t}\n\n\tpublic getContent(): string {\n\t\treturn this.editor.getModel().getValue();\n\t}\n\n\tpublic createSelection(start: number, end: number): void {\n\t\t//\n\t}\n\n\tpublic getSyntax(): string {\n\t\tlet position = this.editor.getSelection().getStartPosition();\n\t\tlet mode = this.editor.getModel().getModeAtPosition(position.lineNumber, position.column);\n\t\tlet syntax = mode.getId().split('.').pop();\n\t\tif (/\\b(razor|handlebars|erb|php|hbs|twig)\\b/.test(syntax)) { // treat like html\n\t\t\treturn 'html';\n\t\t}\n\t\tif (/\\b(typescriptreact|javascriptreact)\\b/.test(syntax)) { // treat like tsx like jsx\n\t\t\treturn 'jsx';\n\t\t}\n\t\tif (syntax === 'sass') { // sass is really sccs... map it to scss\n\t\t\treturn'scss';\n\t\t}\n\t\treturn syntax;\n\t}\n\n\tpublic getProfileName(): string {\n\t\treturn null;\n\t}\n\n\tpublic prompt(title: string): void {\n\t\t//\n\t}\n\n\tpublic getSelection(): string {\n\t\treturn '';\n\t}\n\n\tpublic getFilePath(): string {\n\t\treturn '';\n\t}\n\n\tpublic flushCache(): void {\n\t\tthis.lineStarts = null;\n\t}\n\n\tprivate getPositionFromOffset(offset: number): IPosition {\n\t\tlet lineStarts = this.getLineStarts();\n\t\tlet low = 0;\n\t\tlet high = lineStarts.length - 1;\n\t\tlet mid: number;\n\n\t\twhile (low <= high) {\n\t\t\tmid = low + ((high - low) / 2) | 0;\n\n\t\t\tif (lineStarts[mid] > offset) {\n\t\t\t\thigh = mid - 1;\n\t\t\t} else {\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\tlineNumber: low,\n\t\t\tcolumn: offset - lineStarts[low - 1]\n\t\t};\n\t}\n\n\tprivate getOffsetFromPosition(position: IPosition): number {\n\t\tlet lineStarts = this.getLineStarts();\n\t\treturn lineStarts[position.lineNumber - 1] + position.column - 1;\n\t}\n\n\tprivate getLineStarts(): number[] {\n\t\tif (this.lineStarts === null) {\n\t\t\tthis.lineStarts = this.computeLineStarts();\n\t\t}\n\t\treturn this.lineStarts;\n\t}\n\n\tprivate computeLineStarts(): number[] {\n\t\tlet value = this.editor.getModel().getValue();\n\t\treturn strings.computeLineStarts(value);\n\t}\n}\n"]}