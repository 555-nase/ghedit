{"version":3,"sources":["vs/workbench/parts/markdown/common/markdownEditorModel.ts"],"names":[],"mappings":"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","file":"vs/workbench/parts/markdown/common/markdownEditorModel.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport nls = require('vs/nls');\nimport URI from 'vs/base/common/uri';\nimport paths = require('vs/base/common/paths');\nimport {IFrameEditorModel} from 'vs/workbench/common/editor/iframeEditorModel';\nimport {EditorModel} from 'vs/workbench/common/editor';\nimport {IModel} from 'vs/editor/common/editorCommon';\nimport {IEmitOutput} from 'vs/editor/common/modes';\nimport {isLightTheme} from 'vs/platform/theme/common/themes';\nimport {MARKDOWN_MIME, MARKDOWN_MODE_ID} from 'vs/workbench/parts/markdown/common/markdown';\nimport {IWorkbenchEditorService} from 'vs/workbench/services/editor/common/editorService';\nimport {IThemeService} from 'vs/workbench/services/themes/common/themeService';\nimport {IWorkspaceContextService} from 'vs/platform/workspace/common/workspace';\n\ninterface IMarkdownWorkerOutput extends IEmitOutput {\n\thead: string;\n\tbody: string;\n\ttail: string;\n}\n\n/**\n * The editor model for markdown inputs. Using a library to convert markdown text into HTML from a resource with the provided path.\n */\nexport class MarkdownEditorModel extends IFrameEditorModel {\n\n\tconstructor(\n\t\tresource: URI,\n\t\t@IWorkbenchEditorService private editorService: IWorkbenchEditorService,\n\t\t@IWorkspaceContextService private contextService: IWorkspaceContextService,\n\t\t@IThemeService private themeService: IThemeService\n\t) {\n\t\tsuper(resource);\n\t}\n\n\tpublic load(): TPromise<EditorModel> {\n\t\tlet isCanceled = false;\n\t\tlet codeEditorModel: IModel;\n\n\t\t// Create a new promise here to be able to return this model even in case of an error\n\t\treturn new TPromise<EditorModel>((c, e) => {\n\n\t\t\t// On Error: Show error to user as rendered HTML\n\t\t\tlet onError = (error: Error) => {\n\t\t\t\ttry {\n\t\t\t\t\tlet theme = this.themeService.getTheme();\n\t\t\t\t\tlet usesLightTheme = isLightTheme(theme);\n\n\t\t\t\t\tlet markdownError = nls.localize('markdownError', \"Unable to open '{0}' for Markdown rendering. Please make sure the file exists and that it is a valid Markdown file.\", paths.basename(this.resource.fsPath));\n\t\t\t\t\tthis.setContents('<html><head><style type=\"text/css\">body {color: ' + (usesLightTheme ? 'black' : 'white') + '; font-family: \"Segoe WPC\", \"Segoe UI\", \"HelveticaNeue-Light\", sans-serif, \"Droid Sans Fallback\"; font-size: 13px; margin: 0; line-height: 1.4em; padding-left: 20px;}</style></head><body>', markdownError, '</body></html>');\n\t\t\t\t\tc(this);\n\t\t\t\t} catch (error) {\n\t\t\t\t\te(error); // be very careful that this promise always completes\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// On Success: Show output as rendered HTML\n\t\t\tlet onSuccess = (model: IModel) => {\n\t\t\t\ttry {\n\t\t\t\t\tlet mode = model.getMode();\n\t\t\t\t\tlet absoluteWorkerResourcesPath = require.toUrl('vs/languages/markdown/common'); // TODO@Ben technical debt: worker cannot resolve path absolute\n\t\t\t\t\tif (mode && !!mode.emitOutputSupport && mode.getId() === MARKDOWN_MODE_ID) {\n\t\t\t\t\t\t(<any>mode).emitOutputSupport.getEmitOutput(this.resource, absoluteWorkerResourcesPath).then((output: IMarkdownWorkerOutput) => {\n\t\t\t\t\t\t\tthis.setContents(output.head, output.body, output.tail);\n\n\t\t\t\t\t\t\tc(this);\n\t\t\t\t\t\t}, onError);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tonError(null); // mode does not support output\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tonError(error); // be very careful that this promise always completes\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// Resolve the text editor model using editor service to benefit from the local editor model cache\n\t\t\tthis.editorService.resolveEditorModel({\n\t\t\t\tresource: this.resource,\n\t\t\t\tmime: MARKDOWN_MIME\n\t\t\t}).then((model) => {\n\t\t\t\tif (isCanceled) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tcodeEditorModel = <IModel>model.textEditorModel;\n\n\t\t\t\treturn codeEditorModel.whenModeIsReady();\n\t\t\t}).then(() => {\n\t\t\t\tif (isCanceled) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tonSuccess(codeEditorModel);\n\t\t\t}, onError);\n\t\t}, () => {\n\t\t\tisCanceled = true;\n\t\t});\n\t}\n}"]}