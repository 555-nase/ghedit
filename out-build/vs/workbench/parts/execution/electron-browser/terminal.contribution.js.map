{"version":3,"sources":["vs/workbench/parts/execution/electron-browser/terminal.contribution.ts"],"names":[],"mappings":"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","file":"vs/workbench/parts/execution/electron-browser/terminal.contribution.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport nls = require('vs/nls');\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport {Registry} from 'vs/platform/platform';\nimport baseplatform = require('vs/base/common/platform');\nimport {IAction, Action} from 'vs/base/common/actions';\nimport {IWorkbenchActionRegistry, Extensions as ActionExtensions} from 'vs/workbench/common/actionRegistry';\nimport paths = require('vs/base/common/paths');\nimport {Scope, IActionBarRegistry, Extensions as ActionBarExtensions, ActionBarContributor} from 'vs/workbench/browser/actionBarRegistry';\nimport uri from 'vs/base/common/uri';\nimport {asFileResource} from 'vs/workbench/parts/files/common/files';\nimport {IWorkspaceContextService} from 'vs/workbench/services/workspace/common/contextService';\nimport {ITerminalService} from 'vs/workbench/parts/execution/common/execution';\nimport {SyncActionDescriptor} from 'vs/platform/actions/common/actions';\nimport {IInstantiationService} from 'vs/platform/instantiation/common/instantiation';\nimport {KeyMod, KeyCode} from 'vs/base/common/keyCodes';\n\nexport class OpenConsoleAction extends Action {\n\n\tpublic static ID = 'workbench.action.terminal.openNativeConsole';\n\tpublic static Label = baseplatform.isWindows ? nls.localize('globalConsoleActionWin', \"Open New Command Prompt\") :\n\t\tnls.localize('globalConsoleActionMacLinux', \"Open New Terminal\");\n\tpublic static ScopedLabel = baseplatform.isWindows ? nls.localize('scopedConsoleActionWin', \"Open in Command Prompt\") :\n\t\tnls.localize('scopedConsoleActionMacLinux', \"Open in Terminal\");\n\n\tprivate resource: uri;\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@ITerminalService private terminalService: ITerminalService,\n\t\t@IWorkspaceContextService private contextService: IWorkspaceContextService\n\t) {\n\t\tsuper(id, label);\n\n\t\tthis.order = 49; // Allow other actions to position before or after\n\t}\n\n\tpublic setResource(resource: uri): void {\n\t\tthis.resource = resource;\n\t\tthis.enabled = !paths.isUNC(this.resource.fsPath);\n\t}\n\n\tpublic run(event?: any): TPromise<any> {\n\t\tlet workspace = this.contextService.getWorkspace();\n\t\tlet path = this.resource ? this.resource.fsPath : (workspace && workspace.resource.fsPath);\n\n\t\tif (!path) {\n\t\t\treturn TPromise.as(null);\n\t\t}\n\n\t\tthis.terminalService.openTerminal(path);\n\t\treturn TPromise.as(null);\n\t}\n}\n\nclass FileViewerActionContributor extends ActionBarContributor {\n\n\tconstructor( @IInstantiationService private instantiationService: IInstantiationService) {\n\t\tsuper();\n\t}\n\n\tpublic hasSecondaryActions(context: any): boolean {\n\t\treturn !!asFileResource(context.element);\n\t}\n\n\tpublic getSecondaryActions(context: any): IAction[] {\n\t\tlet fileResource = asFileResource(context.element);\n\t\tlet resource = fileResource.resource;\n\t\tif (!fileResource.isDirectory) {\n\t\t\tresource = uri.file(paths.dirname(resource.fsPath));\n\t\t}\n\n\t\tlet action = this.instantiationService.createInstance(OpenConsoleAction, OpenConsoleAction.ID, OpenConsoleAction.ScopedLabel);\n\t\taction.setResource(resource);\n\n\t\treturn [action];\n\t}\n}\n\nconst actionBarRegistry = <IActionBarRegistry>Registry.as(ActionBarExtensions.Actionbar);\nactionBarRegistry.registerActionBarContributor(Scope.VIEWER, FileViewerActionContributor);\n\n// Register Global Action to Open Console\n(<IWorkbenchActionRegistry>Registry.as(ActionExtensions.WorkbenchActions)).registerWorkbenchAction(\n\tnew SyncActionDescriptor(\n\t\tOpenConsoleAction,\n\t\tOpenConsoleAction.ID,\n\t\tOpenConsoleAction.Label,\n\t\t{ primary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KEY_C }\n\t)\n);"]}