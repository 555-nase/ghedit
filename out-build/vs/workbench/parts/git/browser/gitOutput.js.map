{"version":3,"file":"vs/workbench/parts/git/browser/gitOutput.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/workbench/parts/git/browser/gitOutput.ts"],"names":[],"mappings":";;;;;;;;;;IAAA;;;oGAGgG;IAChG,YAAY,CAAC;IAOb;QAQC,mBAAyB,UAAuB,EAAkB,aAA6B;YARhG,iBA+CC;YAtCC,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;YAC7B,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;YAEnC,0EAA0E;YAC1E,0DAA0D;YAC1D,UAAU,CAAC,YAAY,CAAC,mBAAa,CAAC,eAAe,EAAE,cAAM,OAAA,KAAI,CAAC,KAAK,EAAE,EAAZ,CAAY,CAAC,CAAC;QAC5E,CAAC;QAEM,yBAAK,GAAZ;YACC,MAAM,CAAC,SAAS,CAAC,EAAE,CAAC;QACrB,CAAC;QAEO,yBAAK,GAAb;YAAA,iBAcC;YAbA,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;gBAClB,MAAM,CAAC;YACR,CAAC;YAED,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC,IAAI,CAAC;gBAC9C,KAAI,CAAC,OAAO,GAAG,IAAI,CAAC;YACrB,CAAC,EAAE,UAAC,CAAM;gBACT,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,KAAK,UAAU,CAAC,CAAC,CAAC;oBAChC,KAAI,CAAC,OAAO,GAAG,IAAI,CAAC;gBACrB,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACP,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBAClB,CAAC;YACF,CAAC,EAAE,UAAC,CAAS,IAAK,OAAA,KAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAhB,CAAgB,CAAC,CAAC;QACrC,CAAC;QAEO,4BAAQ,GAAhB,UAAiB,MAAc;YAC9B,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QACrD,CAAC;QAEM,2BAAO,GAAd;YACC,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;gBAClB,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC;gBACtB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;YACrB,CAAC;QACF,CAAC;QA5CM,YAAE,GAAG,uDAAuD,CAAC;QAMxD;uBAAC,iBAAW;uBAA2B,uBAAc;qBAAzC;QAuCzB,gBAAC;IAAD,CAAC,AA/CD,IA+CC;IA/CY,iBAAS,YA+CrB,CAAA","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport winjs = require('vs/base/common/winjs.base');\nimport {IGitService, ServiceEvents} from 'vs/workbench/parts/git/common/git';\nimport ext = require('vs/workbench/common/contributions');\nimport {IOutputService} from 'vs/workbench/parts/output/common/output';\n\nexport class GitOutput implements ext.IWorkbenchContribution {\n\n\tstatic ID = 'Monaco.IDE.UI.Viewlets.GitViewlet.Workbench.GitOutput';\n\n\tprivate promise: winjs.Promise;\n\tprivate gitService: IGitService;\n\tprivate outputService: IOutputService;\n\n\tconstructor(@IGitService gitService: IGitService, @IOutputService outputService: IOutputService) {\n\t\tthis.gitService = gitService;\n\t\tthis.outputService = outputService;\n\n\t\t// we must make sure onOutput is the first thing the git service is asked,\n\t\t// so before any service operation, we call onOutput first\n\t\tgitService.addListener2(ServiceEvents.OPERATION_START, () => this.setup());\n\t}\n\n\tpublic getId(): string {\n\t\treturn GitOutput.ID;\n\t}\n\n\tprivate setup(): void {\n\t\tif (this.promise) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.promise = this.gitService.onOutput().then(() => {\n\t\t\tthis.promise = null;\n\t\t}, (e: any) => {\n\t\t\tif (e && e.name === 'Canceled') {\n\t\t\t\tthis.promise = null;\n\t\t\t} else {\n\t\t\t\tconsole.error(e);\n\t\t\t}\n\t\t}, (o: string) => this.onOutput(o));\n\t}\n\n\tprivate onOutput(output: string): void {\n\t\tthis.outputService.getChannel('Git').append(output);\n\t}\n\n\tpublic dispose(): void {\n\t\tif (this.promise) {\n\t\t\tthis.promise.cancel();\n\t\t\tthis.promise = null;\n\t\t}\n\t}\n}"]}