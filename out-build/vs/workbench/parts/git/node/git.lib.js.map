{"version":3,"sources":["vs/workbench/parts/git/node/git.lib.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;IAsBhG,cAAc,KAAmB,EAAE,QAAiB;QAAjB,wBAAiB,GAAjB,iBAAiB;QACnD,IAAM,WAAW,GAAkB,EAAE,CAAC;QAEtC,IAAM,IAAI,GAAG,UAAC,EAAuB,EAAE,IAAY,EAAE,EAAY;YAChE,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;YAClB,WAAW,CAAC,IAAI,CAAC,wBAAY,CAAC,cAAM,OAAA,EAAE,CAAC,cAAc,CAAC,IAAI,EAAE,EAAE,CAAC,EAA3B,CAA2B,CAAC,CAAC,CAAC;QACnE,CAAC,CAAC;QAEF,IAAM,EAAE,GAAG,UAAC,EAAuB,EAAE,IAAY,EAAE,EAAY;YAC9D,EAAE,CAAC,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;YAChB,WAAW,CAAC,IAAI,CAAC,wBAAY,CAAC,cAAM,OAAA,EAAE,CAAC,cAAc,CAAC,IAAI,EAAE,EAAE,CAAC,EAA3B,CAA2B,CAAC,CAAC,CAAC;QACnE,CAAC,CAAC;QAEF,MAAM,CAAC,qBAAQ,CAAC,IAAI,CAAM;YACzB,IAAI,qBAAQ,CAAS,UAAC,CAAC,EAAE,CAAC;gBACzB,IAAI,CAAC,KAAK,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC;gBACxB,IAAI,CAAC,KAAK,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC;YACxB,CAAC,CAAC;YACF,IAAI,qBAAQ,CAAS,UAAA,CAAC;gBACrB,IAAI,OAAO,GAAa,EAAE,CAAC;gBAC3B,EAAE,CAAC,KAAK,CAAC,MAAM,EAAE,MAAM,EAAE,UAAA,CAAC,IAAI,OAAA,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAf,CAAe,CAAC,CAAC;gBAC/C,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,OAAO,EAAE,cAAM,OAAA,CAAC,CAAC,iBAAM,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE,QAAQ,CAAC,CAAC,EAA3C,CAA2C,CAAC,CAAC;YAChF,CAAC,CAAC;YACF,IAAI,qBAAQ,CAAS,UAAA,CAAC;gBACrB,IAAI,OAAO,GAAa,EAAE,CAAC;gBAC3B,EAAE,CAAC,KAAK,CAAC,MAAM,EAAE,MAAM,EAAE,UAAA,CAAC,IAAI,OAAA,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAf,CAAe,CAAC,CAAC;gBAC/C,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,OAAO,EAAE,cAAM,OAAA,CAAC,CAAC,iBAAM,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE,QAAQ,CAAC,CAAC,EAA3C,CAA2C,CAAC,CAAC;YAChF,CAAC,CAAC;SACF,CAAC,CAAC,IAAI,CAAC,UAAA,MAAM;YACb,mBAAO,CAAC,WAAW,CAAC,CAAC;YAErB,MAAM,CAAC;gBACN,QAAQ,EAAE,MAAM,CAAC,CAAC,CAAC;gBACnB,MAAM,EAAE,MAAM,CAAC,CAAC,CAAC;gBACjB,MAAM,EAAE,MAAM,CAAC,CAAC,CAAC;aACjB,CAAC;QACH,CAAC,CAAC,CAAC;IACJ,CAAC;IAYD;QAUC,kBAAY,IAAmB;YAC9B,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;gBAChB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;gBACxB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC;YACnC,CAAC;YAAC,IAAI,CAAC,CAAC;gBACP,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;YACnB,CAAC;YAED,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,IAAI,WAAW,CAAC;YAC3D,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC;YAClC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC;YAClC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC;YACtC,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC;YAC9C,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC;QAC3C,CAAC;QAEM,2BAAQ,GAAf;YACC,IAAI,MAAM,GAAG,IAAI,CAAC,OAAO,GAAG,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC;gBAChD,QAAQ,EAAE,IAAI,CAAC,QAAQ;gBACvB,YAAY,EAAE,IAAI,CAAC,YAAY;gBAC/B,UAAU,EAAE,IAAI,CAAC,UAAU;gBAC3B,MAAM,EAAE,IAAI,CAAC,MAAM;gBACnB,MAAM,EAAE,IAAI,CAAC,MAAM;aACnB,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;YAEZ,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;gBAChB,MAAM,IAAW,IAAI,CAAC,KAAM,CAAC,KAAK,CAAC;YACpC,CAAC;YAED,MAAM,CAAC,MAAM,CAAC;QACf,CAAC;QACF,eAAC;IAAD,CAzCA,AAyCC,IAAA;IAzCY,gBAAQ,WAyCpB,CAAA;IAUD;QASC,aAAY,OAAoB;YAC/B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC;YAC/B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC;YAC/B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC;YAE/B,IAAM,QAAQ,GAAG,OAAO,CAAC,eAAe,IAAI,MAAM,CAAC;YACnD,IAAI,CAAC,eAAe,GAAG,yBAAc,CAAC,QAAQ,CAAC,GAAG,QAAQ,GAAG,MAAM,CAAC;YAEpE,IAAI,CAAC,GAAG,GAAG,OAAO,CAAC,GAAG,IAAI,EAAE,CAAC;YAC7B,IAAI,CAAC,eAAe,GAAG,EAAE,CAAC;QAC3B,CAAC;QAEM,iBAAG,GAAV,UAAW,GAAW,EAAE,IAAc,EAAE,OAAiB;YAAjB,uBAAiB,GAAjB,YAAiB;YACxD,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,OAAO,IAAI,EAAE,CAAC,CAAC;YACtD,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;QACjC,CAAC;QAEM,oBAAM,GAAb,UAAc,GAAW,EAAE,IAAc,EAAE,OAAiB;YAAjB,uBAAiB,GAAjB,YAAiB;YAC3D,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,OAAO,IAAI,EAAE,CAAC,CAAC;YACtD,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;QAClC,CAAC;QAEM,kBAAI,GAAX,UAAY,UAAkB,EAAE,GAAa;YAAb,mBAAa,GAAb,QAAa;YAC5C,MAAM,CAAC,IAAI,UAAU,CAAC,IAAI,EAAE,UAAU,EAAE,IAAI,CAAC,eAAe,EAAE,GAAG,CAAC,CAAC;QACpE,CAAC;QAEM,mBAAK,GAAZ,UAAa,UAAkB,EAAE,OAAe;YAAhD,iBAYC;YAXA,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE,OAAO,EAAE,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,cAAM,OAAA,IAAI,EAAJ,CAAI,EAAE,UAAC,GAAG;gBACrE,MAAM,CAAC,IAAI,qBAAQ,CAAU,UAAC,CAAC,EAAE,CAAC;oBAEjC,mEAAmE;oBACnE,2BAA2B;oBAC3B,KAAK,CAAC,GAAG,CAAC,UAAU,EAAE,KAAI,CAAC,OAAO,EAAE,UAAC,GAAG;wBACvC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;4BAAC,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;wBAAC,CAAC;wBAC3B,CAAC,CAAC,IAAI,CAAC,CAAC;oBACT,CAAC,CAAC,CAAC;gBACJ,CAAC,CAAC,CAAC;YACJ,CAAC,CAAC,CAAC;QACJ,CAAC;QAEM,oBAAM,GAAb,UAAc,IAAY,EAAE,KAAa;YACxC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE,UAAU,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC;QACvD,CAAC;QAEO,kBAAI,GAAZ,UAAa,IAAc,EAAE,OAAiB;YAA9C,iBAyCC;YAzC4B,uBAAiB,GAAjB,YAAiB;YAC7C,IAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;YAExC,EAAE,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;gBACnB,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;YACxC,CAAC;YAED,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,UAAA,MAAM;gBAC7B,EAAE,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC;oBACrB,IAAI,YAAY,GAAW,IAAI,CAAC;oBAEhC,EAAE,CAAC,CAAC,uBAAuB,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;wBACjD,YAAY,GAAG,mBAAa,CAAC,oBAAoB,CAAC;oBACnD,CAAC;oBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,sBAAsB,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;wBACvD,YAAY,GAAG,mBAAa,CAAC,iBAAiB,CAAC;oBAChD,CAAC;oBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,iBAAiB,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;wBAClD,YAAY,GAAG,mBAAa,CAAC,aAAa,CAAC;oBAC5C,CAAC;oBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,6EAA6E,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;wBAC9G,YAAY,GAAG,mBAAa,CAAC,cAAc,CAAC;oBAC7C,CAAC;oBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,sBAAsB,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;wBACvD,YAAY,GAAG,mBAAa,CAAC,kBAAkB,CAAC;oBACjD,CAAC;oBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;wBACnD,YAAY,GAAG,mBAAa,CAAC,gBAAgB,CAAC;oBAC/C,CAAC;oBAED,EAAE,CAAC,CAAC,OAAO,CAAC,GAAG,KAAK,KAAK,CAAC,CAAC,CAAC;wBAC3B,KAAI,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;oBACzB,CAAC;oBAED,MAAM,CAAC,qBAAQ,CAAC,SAAS,CAAmB,IAAI,QAAQ,CAAC;wBACxD,OAAO,EAAE,uBAAuB;wBAChC,MAAM,EAAE,MAAM,CAAC,MAAM;wBACrB,MAAM,EAAE,MAAM,CAAC,MAAM;wBACrB,QAAQ,EAAE,MAAM,CAAC,QAAQ;wBACzB,cAAA,YAAY;wBACZ,UAAU,EAAE,IAAI,CAAC,CAAC,CAAC;qBACnB,CAAC,CAAC,CAAC;gBACL,CAAC;gBAED,MAAM,CAAC,MAAM,CAAC;YACf,CAAC,CAAC,CAAC;QACJ,CAAC;QAEM,mBAAK,GAAZ,UAAa,IAAc,EAAE,OAAiB;YAAjB,uBAAiB,GAAjB,YAAiB;YAC7C,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;gBACnB,MAAM,IAAI,KAAK,CAAC,uCAAuC,CAAC,CAAC;YAC1D,CAAC;YAED,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;gBACd,OAAO,GAAG,EAAE,CAAC;YACd,CAAC;YAED,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;gBACtC,OAAO,CAAC,KAAK,GAAG,CAAC,QAAQ,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,gFAAgF;YACzH,CAAC;YAED,OAAO,CAAC,GAAG,GAAG,OAAO,CAAC,MAAM,CAAC,EAAE,EAAE,OAAO,CAAC,GAAG,IAAI,EAAE,CAAC,CAAC;YACpD,OAAO,CAAC,GAAG,GAAG,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;YACpD,OAAO,CAAC,GAAG,GAAG,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,EAAE;gBACzC,mBAAmB,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,KAAK,EAAE;gBACtC,qBAAqB,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,KAAK,EAAE;gBACxC,kBAAkB,EAAE,IAAI,CAAC,CAAC,CAAC;aAC3B,CAAC,CAAC;YAEH,EAAE,CAAC,CAAC,OAAO,CAAC,GAAG,KAAK,KAAK,CAAC,CAAC,CAAC;gBAC3B,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,WAAW,EAAE,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YACvD,CAAC;YAED,MAAM,CAAC,qBAAK,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;QAC3C,CAAC;QAEM,sBAAQ,GAAf,UAAgB,QAAkC;YAAlD,iBAGC;YAFA,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACpC,MAAM,CAAC,cAAM,OAAA,KAAI,CAAC,eAAe,CAAC,MAAM,CAAC,KAAI,CAAC,eAAe,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,EAAtE,CAAsE,CAAC;QACrF,CAAC;QAEO,iBAAG,GAAX,UAAY,MAAc;YACzB,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,MAAM,CAAC,EAAT,CAAS,CAAC,CAAC;QAC9C,CAAC;QACF,UAAC;IAAD,CApIA,AAoIC,IAAA;IApIY,WAAG,MAoIf,CAAA;IAED;QAOC,oBAAY,GAAQ,EAAE,UAAkB,EAAE,eAAuB,EAAE,GAAa;YAAb,mBAAa,GAAb,QAAa;YAC/E,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;YACf,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;YAC7B,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;YACvC,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QAChB,CAAC;QAED,sBAAW,+BAAO;iBAAlB;gBACC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC;YACzB,CAAC;;;WAAA;QAED,sBAAW,4BAAI;iBAAf;gBACC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC;YACxB,CAAC;;;WAAA;QAEM,wBAAG,GAAV,UAAW,IAAc,EAAE,OAAiB;YAAjB,uBAAiB,GAAjB,YAAiB;YAC3C,OAAO,CAAC,GAAG,GAAG,OAAO,CAAC,MAAM,CAAC,EAAE,EAAE,OAAO,CAAC,GAAG,IAAI,EAAE,CAAC,CAAC;YACpD,OAAO,CAAC,GAAG,GAAG,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;YAEpD,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;QACrD,CAAC;QAEM,2BAAM,GAAb,UAAc,IAAc,EAAE,OAAiB;YAAjB,uBAAiB,GAAjB,YAAiB;YAC9C,OAAO,CAAC,GAAG,GAAG,OAAO,CAAC,MAAM,CAAC,EAAE,EAAE,OAAO,CAAC,GAAG,IAAI,EAAE,CAAC,CAAC;YACpD,OAAO,CAAC,GAAG,GAAG,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;YAEpD,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;QACxD,CAAC;QAEM,0BAAK,GAAZ,UAAa,IAAc,EAAE,OAAiB;YAAjB,uBAAiB,GAAjB,YAAiB;YAC7C,OAAO,CAAC,GAAG,GAAG,OAAO,CAAC,MAAM,CAAC,EAAE,EAAE,OAAO,CAAC,GAAG,IAAI,EAAE,CAAC,CAAC;YACpD,OAAO,CAAC,GAAG,GAAG,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;YAEpD,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;QACtC,CAAC;QAEM,yBAAI,GAAX;YACC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;QAC3B,CAAC;QAEM,2BAAM,GAAb,UAAc,KAAa,EAAE,GAAU,EAAE,KAAS,EAAE,OAAW;YAC9D,IAAM,IAAI,GAAG,CAAC,QAAQ,CAAC,CAAC;YAExB,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBACX,IAAI,CAAC,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC,CAAC;YACzB,CAAC;YAED,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAEf,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBACX,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAClB,CAAC;YAED,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,MAAM,IAAK,OAAA,MAAM,CAAC,MAAM,EAAb,CAAa,CAAC,CAAC;QAChE,CAAC;QAEM,yBAAI,GAAX,UAAY,MAAc;YACzB,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,CAAC;QACtC,CAAC;QAEM,2BAAM,GAAb,UAAc,MAAc;YAA5B,iBAiBC;YAhBA,IAAM,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAEhC,MAAM,CAAC,IAAI,oBAAO,CAAC,UAAC,CAAC,EAAE,CAAC;gBACvB,4BAAqB,CAAC,KAAK,CAAC,MAAM,EAAE,IAAI,EAAE,UAAC,GAAG,EAAE,MAAM;oBACrD,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;wBACT,CAAC,CAAC,GAAG,CAAC,CAAC;oBACR,CAAC;oBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,mBAAY,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;wBACvC,CAAC,CAA6B;4BAC7B,OAAO,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAiB,EAAE,IAAsD,CAAC;4BAChG,mBAAmB,EAAE,KAAK,CAAC,mBAAmB,CAAC,cAAc;yBAC7D,CAAC,CAAC;oBACJ,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACP,CAAC,CAAC,KAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;oBAC1B,CAAC;gBACF,CAAC,CAAC,CAAC;YACJ,CAAC,CAAC,CAAC;QACJ,CAAC;QAEO,6BAAQ,GAAhB,UAAiB,MAAc;YAC9B,IAAM,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAEhC,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC,IAAI,CAAC,UAAC,EAAoB;oBAAlB,sBAAQ,EAAE,kBAAM;gBAChE,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;oBACd,MAAM,CAAC,qBAAQ,CAAC,SAAS,CAAS,IAAI,QAAQ,CAAC;wBAC9C,OAAO,EAAE,0BAA0B;wBACnC,UAAA,QAAQ;qBACR,CAAC,CAAC,CAAC;gBACL,CAAC;gBAED,MAAM,CAAC,qBAAQ,CAAC,EAAE,CAAS,MAAM,CAAC,CAAC;YACpC,CAAC,CAAC,CAAC;QACJ,CAAC;QAEM,wBAAG,GAAV,UAAW,KAAe;YACzB,IAAM,IAAI,GAAG,CAAC,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;YAEjC,EAAE,CAAC,CAAC,KAAK,IAAI,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;gBAC3B,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;YAC9B,CAAC;YAAC,IAAI,CAAC,CAAC;gBACP,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAChB,CAAC;YAED,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QACvB,CAAC;QAEM,0BAAK,GAAZ,UAAa,IAAY,EAAE,IAAY;YAAvC,iBAcC;YAbA,IAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,aAAa,EAAE,SAAS,EAAE,IAAI,CAAC,EAAE,EAAE,KAAK,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC;YAC3F,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;YAE9B,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,UAAC,EAAoB;oBAAlB,sBAAQ,EAAE,kBAAM;gBAC1C,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;oBACd,MAAM,CAAC,qBAAQ,CAAC,SAAS,CAAmB,IAAI,QAAQ,CAAC;wBACxD,OAAO,EAAE,wBAAwB;wBACjC,QAAQ,EAAE,QAAQ;qBAClB,CAAC,CAAC,CAAC;gBACL,CAAC;gBAED,MAAM,CAAC,KAAI,CAAC,GAAG,CAAC,CAAC,cAAc,EAAE,aAAa,EAAE,QAAQ,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC,CAAC;YAC1E,CAAC,CAAC,CAAC;QACJ,CAAC;QAEM,6BAAQ,GAAf,UAAgB,OAAe,EAAE,KAAe;YAC/C,IAAM,IAAI,GAAG,CAAE,UAAU,EAAE,IAAI,CAAE,CAAC;YAElC,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;gBACb,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YACpB,CAAC;YAED,EAAE,CAAC,CAAC,KAAK,IAAI,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;gBAC3B,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBAChB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;YAC9B,CAAC;YAED,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,UAAC,GAAa;gBAC9C,EAAE,CAAC,CAAC,2CAA2C,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;oBAClE,GAAG,CAAC,YAAY,GAAG,mBAAa,CAAC,aAAa,CAAC;gBAChD,CAAC;gBAED,MAAM,CAAC,oBAAO,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;YAC/B,CAAC,CAAC,CAAC;QACJ,CAAC;QAEM,2BAAM,GAAb,UAAc,OAAe,EAAE,GAAY,EAAE,KAAc;YAA3D,iBA6BC;YA5BA,IAAM,IAAI,GAAG,CAAC,QAAQ,EAAE,SAAS,EAAE,uBAAuB,EAAE,QAAQ,EAAE,GAAG,CAAC,CAAC;YAE3E,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBACT,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YACpB,CAAC;YAED,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBACX,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YACtB,CAAC;YAED,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,EAAE,KAAK,EAAE,OAAO,IAAI,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,UAAC,SAAmB;gBAC9E,EAAE,CAAC,CAAC,8CAA8C,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;oBAC3E,SAAS,CAAC,YAAY,GAAG,mBAAa,CAAC,eAAe,CAAC;oBACvD,MAAM,CAAC,oBAAO,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;gBACrC,CAAC;gBAED,MAAM,CAAC,KAAI,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,WAAW,EAAE,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,UAAC,GAAa;oBAC9E,GAAG,CAAC,YAAY,GAAG,mBAAa,CAAC,oBAAoB,CAAC;oBACtD,MAAM,CAAC,oBAAO,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;gBAC/B,CAAC,CAAC,CAAC,IAAI,CAAC;oBACP,MAAM,CAAC,KAAI,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,WAAW,EAAE,YAAY,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,UAAC,GAAa;wBAC/E,GAAG,CAAC,YAAY,GAAG,mBAAa,CAAC,qBAAqB,CAAC;wBACvD,MAAM,CAAC,oBAAO,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;oBAC/B,CAAC,CAAC,CAAC,IAAI,CAAC;wBACP,MAAM,CAAC,oBAAO,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;oBACrC,CAAC,CAAC,CAAC;gBACJ,CAAC,CAAC,CAAC;YACJ,CAAC,CAAC,CAAC;QACJ,CAAC;QAEM,2BAAM,GAAb,UAAc,IAAY,EAAE,QAAiB;YAC5C,IAAM,IAAI,GAAG,QAAQ,GAAG,CAAC,UAAU,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,GAAG,CAAE,QAAQ,EAAE,IAAI,EAAE,IAAI,CAAE,CAAC;YAClF,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QACvB,CAAC;QAEM,0BAAK,GAAZ,UAAa,KAAe;YAC3B,IAAM,IAAI,GAAG,CAAE,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAE,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YACzD,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QACvB,CAAC;QAEM,yBAAI,GAAX;YAAA,iBAUC;YATA,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAE,OAAO,EAAE,KAAK,CAAE,CAAC,CAAC,IAAI,CAAC;gBACxC,MAAM,CAAC,KAAI,CAAC,GAAG,CAAC,CAAE,UAAU,EAAE,IAAI,EAAE,GAAG,CAAE,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,UAAC,GAAa;oBACnE,EAAE,CAAC,CAAC,4CAA4C,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;wBACnE,MAAM,CAAC,qBAAQ,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;oBAC1B,CAAC;oBAED,MAAM,CAAC,oBAAO,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;gBAC/B,CAAC,CAAC,CAAC;YACJ,CAAC,CAAC,CAAC;QACJ,CAAC;QAEM,0BAAK,GAAZ,UAAa,OAAe,EAAE,IAAqB;YAArB,oBAAqB,GAArB,YAAqB;YAClD,IAAM,IAAI,GAAG,CAAC,OAAO,CAAC,CAAC;YAEvB,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;gBACV,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACrB,CAAC;YAED,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAEnB,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QACvB,CAAC;QAEM,gCAAW,GAAlB,UAAmB,OAAe,EAAE,KAAe;YAAnD,iBA2BC;YA1BA,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAE,QAAQ,CAAE,CAAC,CAAC,IAAI,CAAC,UAAC,MAAM;gBACzC,IAAI,IAAc,CAAC;gBAEnB,yDAAyD;gBACzD,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;oBACpB,IAAI,GAAG,CAAE,IAAI,EAAE,UAAU,EAAE,IAAI,EAAE,IAAI,CAAE,CAAC;gBACzC,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACP,IAAI,GAAG,CAAE,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,CAAE,CAAC;gBACzC,CAAC;gBAED,EAAE,CAAC,CAAC,KAAK,IAAI,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;oBAC3B,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;gBAC9B,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACP,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;gBAChB,CAAC;gBAED,MAAM,CAAC,KAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,UAAC,GAAa;oBAC9C,0EAA0E;oBAC1E,sDAAsD;oBACtD,EAAE,CAAC,CAAC,0BAA0B,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;wBACjD,MAAM,CAAC,qBAAQ,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;oBAC1B,CAAC;oBAED,MAAM,CAAC,oBAAO,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;gBAC/B,CAAC,CAAC,CAAC;YACJ,CAAC,CAAC,CAAC;QACJ,CAAC;QAEM,0BAAK,GAAZ;YACC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,UAAC,GAAa;gBACnD,EAAE,CAAC,CAAC,kCAAkC,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;oBACzD,GAAG,CAAC,YAAY,GAAG,mBAAa,CAAC,2BAA2B,CAAC;gBAC9D,CAAC;gBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,uCAAuC,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;oBACrE,GAAG,CAAC,YAAY,GAAG,mBAAa,CAAC,qBAAqB,CAAC;gBACxD,CAAC;gBAED,MAAM,CAAC,oBAAO,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;YAC/B,CAAC,CAAC,CAAC;QACJ,CAAC;QAEM,yBAAI,GAAX,UAAY,MAAgB;YAC3B,IAAM,IAAI,GAAG,CAAC,MAAM,CAAC,CAAC;YACtB,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;gBAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAAC,CAAC;YAEhC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,UAAC,GAAa;gBAC9C,EAAE,CAAC,CAAC,0BAA0B,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;oBACjD,GAAG,CAAC,YAAY,GAAG,mBAAa,CAAC,QAAQ,CAAC;gBAC3C,CAAC;gBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,8BAA8B,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;oBAC5D,GAAG,CAAC,YAAY,GAAG,mBAAa,CAAC,oBAAoB,CAAC;gBACvD,CAAC;gBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,uCAAuC,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;oBACrE,GAAG,CAAC,YAAY,GAAG,mBAAa,CAAC,qBAAqB,CAAC;gBACxD,CAAC;gBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,yNAAyN,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;oBACvP,GAAG,CAAC,YAAY,GAAG,mBAAa,CAAC,aAAa,CAAC;gBAChD,CAAC;gBAED,MAAM,CAAC,oBAAO,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;YAC/B,CAAC,CAAC,CAAC;QACJ,CAAC;QAEM,yBAAI,GAAX,UAAY,MAAe,EAAE,IAAa,EAAE,OAAqB;YAChE,IAAM,IAAI,GAAG,CAAC,MAAM,CAAC,CAAC;YACtB,EAAE,CAAC,CAAC,OAAO,IAAI,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC;gBAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAAC,CAAC;YACxD,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;gBAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAAC,CAAC;YAClC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;gBAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAAC,CAAC;YAE9B,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,UAAC,GAAa;gBAC9C,EAAE,CAAC,CAAC,wCAAwC,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;oBAC/D,GAAG,CAAC,YAAY,GAAG,mBAAa,CAAC,YAAY,CAAC;gBAC/C,CAAC;gBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,uCAAuC,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;oBACrE,GAAG,CAAC,YAAY,GAAG,mBAAa,CAAC,qBAAqB,CAAC;gBACxD,CAAC;gBAED,MAAM,CAAC,oBAAO,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;YAC/B,CAAC,CAAC,CAAC;QACJ,CAAC;QAEM,yBAAI,GAAX;YAAA,iBAEC;YADA,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,cAAM,OAAA,KAAI,CAAC,IAAI,EAAE,EAAX,CAAW,CAAC,CAAC;QAC5C,CAAC;QAEM,4BAAO,GAAd;YACC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,WAAW,EAAE,iBAAiB,CAAC,EAAE,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,CAAC,IAAI,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,EAApB,CAAoB,CAAC,CAAC;QACxG,CAAC;QAEM,8BAAS,GAAhB;YACC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,CAAC,IAAI,CAAC,UAAC,eAAe;gBAC5E,IAAM,MAAM,GAAG,eAAe,CAAC,MAAM,CAAC;gBACtC,IAAM,MAAM,GAAoB,EAAE,CAAC;gBACnC,IAAI,OAAsB,CAAC;gBAC3B,IAAI,CAAC,GAAG,CAAC,CAAC;gBAEV;oBACC,IAAM,KAAK,GAAG,CAAC,CAAC;oBAChB,IAAI,CAAQ,CAAC;oBACb,OAAO,CAAC,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAE,CAAC;wBAAC,CAAC,EAAE,CAAC;oBAAC,CAAC;oBACpD,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC;gBACrC,CAAC;gBAED,OAAO,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC;oBAC1B,OAAO,GAAG;wBACT,CAAC,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC;wBACrB,CAAC,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC;wBACrB,IAAI,EAAE,IAAI;wBACV,QAAQ,EAAE,IAAI;qBACd,CAAC;oBAEF,CAAC,EAAE,CAAC;oBAEJ,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;wBACvB,OAAO,CAAC,MAAM,GAAG,QAAQ,EAAE,CAAC;oBAC7B,CAAC;oBAED,OAAO,CAAC,IAAI,GAAG,QAAQ,EAAE,CAAC;oBAC1B,OAAO,CAAC,QAAQ,GAAG,qBAAc,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;oBAEnD,wDAAwD;oBACxD,EAAE,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,GAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;wBACjD,QAAQ,CAAC;oBACV,CAAC;oBAED,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gBACtB,CAAC;gBAED,MAAM,CAAC,qBAAQ,CAAC,EAAE,CAAmB,MAAM,CAAC,CAAC;YAC9C,CAAC,CAAC,CAAC;QACJ,CAAC;QAEM,4BAAO,GAAd;YAAA,iBAgBC;YAfA,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,cAAc,EAAE,SAAS,EAAE,MAAM,CAAC,EAAE,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,CAAC,IAAI,CAAC,UAAC,MAAM;gBAChF,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;oBACpB,MAAM,CAAC,qBAAQ,CAAC,SAAS,CAAQ,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC,CAAC;gBAChE,CAAC;gBAED,MAAM,CAAC,qBAAQ,CAAC,EAAE,CAAQ,EAAE,IAAI,EAAE,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;YAC3D,CAAC,EAAE,UAAC,GAAG;gBACN,MAAM,CAAC,KAAI,CAAC,GAAG,CAAC,CAAC,WAAW,EAAE,MAAM,CAAC,EAAE,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,CAAC,IAAI,CAAC,UAAC,MAAM;oBAClE,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;wBACpB,MAAM,CAAC,qBAAQ,CAAC,SAAS,CAAQ,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC,CAAC;oBACnE,CAAC;oBAED,MAAM,CAAC,qBAAQ,CAAC,EAAE,CAAQ,EAAE,MAAM,EAAE,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;gBAC7D,CAAC,CAAC,CAAC;YACJ,CAAC,CAAC,CAAC;QACJ,CAAC;QAEM,6BAAQ,GAAf;YACC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,cAAc,EAAE,UAAU,EAAE,gCAAgC,EAAE,aAAa,CAAC,EAAE,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,CAAC,IAAI,CAAC,UAAC,MAAM;gBAC1H,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC;qBACrC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,CAAC,EAAH,CAAG,CAAC;qBAChB,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,EAAnB,CAAmB,CAAC;qBAC7B,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAA9B,CAA8B,CAAC,CAAC;YAC5C,CAAC,CAAC,CAAC;QACJ,CAAC;QAEM,4BAAO,GAAd;YACC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,cAAc,EAAE,UAAU,EAAE,gCAAgC,EAAE,YAAY,CAAC,EAAE,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,CAAC,IAAI,CAAC,UAAC,MAAM;gBACzH,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC;qBACrC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,CAAC,EAAH,CAAG,CAAC;qBAChB,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,EAAnB,CAAmB,CAAC;qBAC7B,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAA9B,CAA8B,CAAC,CAAC;YAC5C,CAAC,CAAC,CAAC;QACJ,CAAC;QAEM,+BAAU,GAAjB;YACC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,EAAE,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC;iBACzC,IAAI,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,MAAM;iBAC3B,IAAI,EAAE;iBACN,KAAK,CAAC,IAAI,CAAC;iBACX,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,CAAC,EAAH,CAAG,CAAC;iBAChB,GAAG,CAAC,UAAA,IAAI,IAAI,OAAA,CAAC,EAAE,MAAA,IAAI,EAAE,CAAC,EAAV,CAAU,CAAC,EAJT,CAIS,CACxB,CAAC;QACJ,CAAC;QAEM,8BAAS,GAAhB,UAAiB,MAAc;YAA/B,iBAyCC;YAxCA,EAAE,CAAC,CAAC,MAAM,KAAK,MAAM,CAAC,CAAC,CAAC;gBACvB,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;YACvB,CAAC;YAED,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,WAAW,EAAE,MAAM,CAAC,EAAE,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,CAAC,IAAI,CAAC,UAAC,MAAM;gBAClE,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;oBACpB,MAAM,CAAC,qBAAQ,CAAC,SAAS,CAAU,IAAI,KAAK,CAAC,gBAAgB,CAAC,CAAC,CAAC;gBACjE,CAAC;gBAED,IAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;gBAEpC,MAAM,CAAC,KAAI,CAAC,GAAG,CAAC,CAAC,WAAW,EAAE,sBAAsB,EAAE,cAAc,EAAE,MAAM,GAAG,MAAM,CAAC,EAAE,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,CAAC,IAAI,CAAC,UAAC,MAAwB;oBACrI,IAAM,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;oBAEtC,MAAM,CAAC,KAAI,CAAC,GAAG,CAAC,CAAC,UAAU,EAAE,cAAc,EAAE,MAAM,GAAG,KAAK,GAAG,QAAQ,CAAC,EAAE,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,CAAC,IAAI,CAAC,UAAC,MAAM;wBACpG,IAAI,KAAK,GAAG,CAAC,EAAE,MAAM,GAAG,CAAC,CAAC;wBAC1B,IAAI,CAAC,GAAG,CAAC,CAAC;wBAEV,OAAO,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC;4BACjC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gCACjC,KAAK,GAAG;oCAAE,KAAK,EAAE,CAAC;oCAAC,KAAK,CAAC;gCACzB,KAAK,GAAG;oCAAE,MAAM,EAAE,CAAC;oCAAC,KAAK,CAAC;gCAC1B;oCAAS,CAAC,EAAE,CAAC;oCAAC,KAAK,CAAC;4BACrB,CAAC;4BAED,OAAO,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,KAAK,IAAI,EAAE,CAAC,CAAa,CAAC;wBAC3D,CAAC;wBAED,MAAM,CAAC;4BACN,IAAI,EAAE,MAAM;4BACZ,MAAM,EAAE,MAAM;4BACd,QAAQ,EAAE,QAAQ;4BAClB,KAAK,EAAE,KAAK;4BACZ,MAAM,EAAE,MAAM;yBACd,CAAC;oBACH,CAAC,CAAC,CAAC;gBACJ,CAAC,EAAE;oBACF,MAAM,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC;gBACzC,CAAC,CAAC,CAAC;YACJ,CAAC,CAAC,CAAC;QACJ,CAAC;QAEM,6BAAQ,GAAf,UAAgB,QAAkC;YACjD,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QACpC,CAAC;QACF,iBAAC;IAAD,CAnbA,AAmbC,IAAA;IAnbY,kBAAU,aAmbtB,CAAA","file":"vs/workbench/parts/git/node/git.lib.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Promise, TPromise } from 'vs/base/common/winjs.base';\nimport extfs = require('vs/base/node/extfs');\nimport { guessMimeTypes, isBinaryMime } from 'vs/base/common/mime';\nimport { IDisposable, toDisposable, dispose } from 'vs/base/common/lifecycle';\nimport objects = require('vs/base/common/objects');\nimport uuid = require('vs/base/common/uuid');\nimport nls = require('vs/nls');\nimport strings = require('vs/base/common/strings');\nimport { IRawFileStatus, IHead, ITag, IBranch, IRemote, GitErrorCodes, IPushOptions } from 'vs/workbench/parts/git/common/git';\nimport { detectMimesFromStream } from 'vs/base/node/mime';\nimport files = require('vs/platform/files/common/files');\nimport { spawn, ChildProcess } from 'child_process';\nimport { decode, encodingExists } from 'vs/base/node/encoding';\n\nexport interface IExecutionResult {\n\texitCode: number;\n\tstdout: string;\n\tstderr: string;\n}\n\nfunction exec(child: ChildProcess, encoding = 'utf8'): TPromise<IExecutionResult> {\n\tconst disposables: IDisposable[] = [];\n\n\tconst once = (ee: NodeJS.EventEmitter, name: string, fn: Function) => {\n\t\tee.once(name, fn);\n\t\tdisposables.push(toDisposable(() => ee.removeListener(name, fn)));\n\t};\n\n\tconst on = (ee: NodeJS.EventEmitter, name: string, fn: Function) => {\n\t\tee.on(name, fn);\n\t\tdisposables.push(toDisposable(() => ee.removeListener(name, fn)));\n\t};\n\n\treturn TPromise.join<any>([\n\t\tnew TPromise<number>((c, e) => {\n\t\t\tonce(child, 'error', e);\n\t\t\tonce(child, 'exit', c);\n\t\t}),\n\t\tnew TPromise<string>(c => {\n\t\t\tlet buffers: Buffer[] = [];\n\t\t\ton(child.stdout, 'data', b => buffers.push(b));\n\t\t\tonce(child.stdout, 'close', () => c(decode(Buffer.concat(buffers), encoding)));\n\t\t}),\n\t\tnew TPromise<string>(c => {\n\t\t\tlet buffers: Buffer[] = [];\n\t\t\ton(child.stderr, 'data', b => buffers.push(b));\n\t\t\tonce(child.stderr, 'close', () => c(decode(Buffer.concat(buffers), encoding)));\n\t\t})\n\t]).then(values => {\n\t\tdispose(disposables);\n\n\t\treturn {\n\t\t\texitCode: values[0],\n\t\t\tstdout: values[1],\n\t\t\tstderr: values[2]\n\t\t};\n\t});\n}\n\nexport interface IGitErrorData {\n\terror?: Error;\n\tmessage?: string;\n\tstdout?: string;\n\tstderr?: string;\n\texitCode?: number;\n\tgitErrorCode?: string;\n\tgitCommand?: string;\n}\n\nexport class GitError {\n\n\tpublic error: Error;\n\tpublic message: string;\n\tpublic stdout: string;\n\tpublic stderr: string;\n\tpublic exitCode: number;\n\tpublic gitErrorCode: string;\n\tpublic gitCommand: string;\n\n\tconstructor(data: IGitErrorData) {\n\t\tif (data.error) {\n\t\t\tthis.error = data.error;\n\t\t\tthis.message = data.error.message;\n\t\t} else {\n\t\t\tthis.error = null;\n\t\t}\n\n\t\tthis.message = this.message || data.message || 'Git error';\n\t\tthis.stdout = data.stdout || null;\n\t\tthis.stderr = data.stderr || null;\n\t\tthis.exitCode = data.exitCode || null;\n\t\tthis.gitErrorCode = data.gitErrorCode || null;\n\t\tthis.gitCommand = data.gitCommand || null;\n\t}\n\n\tpublic toString(): string {\n\t\tlet result = this.message + ' ' + JSON.stringify({\n\t\t\texitCode: this.exitCode,\n\t\t\tgitErrorCode: this.gitErrorCode,\n\t\t\tgitCommand: this.gitCommand,\n\t\t\tstdout: this.stdout,\n\t\t\tstderr: this.stderr\n\t\t}, null, 2);\n\n\t\tif (this.error) {\n\t\t\tresult += (<any> this.error).stack;\n\t\t}\n\n\t\treturn result;\n\t}\n}\n\nexport interface IGitOptions {\n\tgitPath:string;\n\tversion: string;\n\ttmpPath:string;\n\tdefaultEncoding?: string;\n\tenv?:any;\n}\n\nexport class Git {\n\n\tpublic gitPath: string;\n\tpublic version: string;\n\tpublic env: any;\n\tprivate tmpPath: string;\n\tprivate defaultEncoding: string;\n\tprivate outputListeners: { (output: string): void; }[];\n\n\tconstructor(options: IGitOptions) {\n\t\tthis.gitPath = options.gitPath;\n\t\tthis.version = options.version;\n\t\tthis.tmpPath = options.tmpPath;\n\n\t\tconst encoding = options.defaultEncoding || 'utf8';\n\t\tthis.defaultEncoding = encodingExists(encoding) ? encoding : 'utf8';\n\n\t\tthis.env = options.env || {};\n\t\tthis.outputListeners = [];\n\t}\n\n\tpublic run(cwd: string, args: string[], options: any = {}): TPromise<IExecutionResult> {\n\t\toptions = objects.assign({ cwd: cwd }, options || {});\n\t\treturn this.exec(args, options);\n\t}\n\n\tpublic stream(cwd: string, args: string[], options: any = {}): ChildProcess {\n\t\toptions = objects.assign({ cwd: cwd }, options || {});\n\t\treturn this.spawn(args, options);\n\t}\n\n\tpublic open(repository: string, env: any = {}): Repository {\n\t\treturn new Repository(this, repository, this.defaultEncoding, env);\n\t}\n\n\tpublic clone(repository: string, repoURL: string): TPromise<boolean> {\n\t\treturn this.exec(['clone', repoURL, repository]).then(() => true, (err) => {\n\t\t\treturn new TPromise<boolean>((c, e) => {\n\n\t\t\t\t// If there's any error, git will still leave the folder in the FS,\n\t\t\t\t// so we need to remove it.\n\t\t\t\textfs.del(repository, this.tmpPath, (err) => {\n\t\t\t\t\tif (err) { return e(err); }\n\t\t\t\t\tc(true);\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t}\n\n\tpublic config(name: string, value: string): Promise {\n\t\treturn this.exec(['config', '--global', name, value]);\n\t}\n\n\tprivate exec(args: string[], options: any = {}): TPromise<IExecutionResult> {\n\t\tconst child = this.spawn(args, options);\n\n\t\tif (options.input) {\n\t\t\tchild.stdin.end(options.input, 'utf8');\n\t\t}\n\n\t\treturn exec(child).then(result => {\n\t\t\tif (result.exitCode) {\n\t\t\t\tlet gitErrorCode: string = null;\n\n\t\t\t\tif (/Authentication failed/.test(result.stderr)) {\n\t\t\t\t\tgitErrorCode = GitErrorCodes.AuthenticationFailed;\n\t\t\t\t} else if (/Not a git repository/.test(result.stderr)) {\n\t\t\t\t\tgitErrorCode = GitErrorCodes.NotAGitRepository;\n\t\t\t\t} else if (/bad config file/.test(result.stderr)) {\n\t\t\t\t\tgitErrorCode = GitErrorCodes.BadConfigFile;\n\t\t\t\t} else if (/cannot make pipe for command substitution|cannot create standard input pipe/.test(result.stderr)) {\n\t\t\t\t\tgitErrorCode = GitErrorCodes.CantCreatePipe;\n\t\t\t\t} else if (/Repository not found/.test(result.stderr)) {\n\t\t\t\t\tgitErrorCode = GitErrorCodes.RepositoryNotFound;\n\t\t\t\t} else if (/unable to access/.test(result.stderr)) {\n\t\t\t\t\tgitErrorCode = GitErrorCodes.CantAccessRemote;\n\t\t\t\t}\n\n\t\t\t\tif (options.log !== false) {\n\t\t\t\t\tthis.log(result.stderr);\n\t\t\t\t}\n\n\t\t\t\treturn TPromise.wrapError<IExecutionResult>(new GitError({\n\t\t\t\t\tmessage: 'Failed to execute git',\n\t\t\t\t\tstdout: result.stdout,\n\t\t\t\t\tstderr: result.stderr,\n\t\t\t\t\texitCode: result.exitCode,\n\t\t\t\t\tgitErrorCode,\n\t\t\t\t\tgitCommand: args[0]\n\t\t\t\t}));\n\t\t\t}\n\n\t\t\treturn result;\n\t\t});\n\t}\n\n\tpublic spawn(args: string[], options: any = {}): ChildProcess {\n\t\tif (!this.gitPath) {\n\t\t\tthrow new Error('git could not be found in the system.');\n\t\t}\n\n\t\tif (!options) {\n\t\t\toptions = {};\n\t\t}\n\n\t\tif (!options.stdio && !options.input) {\n\t\t\toptions.stdio = ['ignore', null, null]; // Unless provided, ignore stdin and leave default streams for stdout and stderr\n\t\t}\n\n\t\toptions.env = objects.assign({}, options.env || {});\n\t\toptions.env = objects.assign(options.env, this.env);\n\t\toptions.env = objects.assign(options.env, {\n\t\t\tMONACO_REQUEST_GUID: uuid.v4().asHex(),\n\t\t\tVSCODE_GIT_REQUEST_ID: uuid.v4().asHex(),\n\t\t\tMONACO_GIT_COMMAND: args[0]\n\t\t});\n\n\t\tif (options.log !== false) {\n\t\t\tthis.log(strings.format('git {0}\\n', args.join(' ')));\n\t\t}\n\n\t\treturn spawn(this.gitPath, args, options);\n\t}\n\n\tpublic onOutput(listener: (output: string) => void): () => void {\n\t\tthis.outputListeners.push(listener);\n\t\treturn () => this.outputListeners.splice(this.outputListeners.indexOf(listener), 1);\n\t}\n\n\tprivate log(output: string): void {\n\t\tthis.outputListeners.forEach(l => l(output));\n\t}\n}\n\nexport class Repository {\n\n\tprivate git: Git;\n\tprivate repository: string;\n\tprivate defaultEncoding: string;\n\tprivate env: any;\n\n\tconstructor(git: Git, repository: string, defaultEncoding: string, env: any = {}) {\n\t\tthis.git = git;\n\t\tthis.repository = repository;\n\t\tthis.defaultEncoding = defaultEncoding;\n\t\tthis.env = env;\n\t}\n\n\tpublic get version(): string {\n\t\treturn this.git.version;\n\t}\n\n\tpublic get path(): string {\n\t\treturn this.repository;\n\t}\n\n\tpublic run(args: string[], options: any = {}): TPromise<IExecutionResult> {\n\t\toptions.env = objects.assign({}, options.env || {});\n\t\toptions.env = objects.assign(options.env, this.env);\n\n\t\treturn this.git.run(this.repository, args, options);\n\t}\n\n\tpublic stream(args: string[], options: any = {}): ChildProcess {\n\t\toptions.env = objects.assign({}, options.env || {});\n\t\toptions.env = objects.assign(options.env, this.env);\n\n\t\treturn this.git.stream(this.repository, args, options);\n\t}\n\n\tpublic spawn(args: string[], options: any = {}): ChildProcess {\n\t\toptions.env = objects.assign({}, options.env || {});\n\t\toptions.env = objects.assign(options.env, this.env);\n\n\t\treturn this.git.spawn(args, options);\n\t}\n\n\tpublic init(): Promise {\n\t\treturn this.run(['init']);\n\t}\n\n\tpublic config(scope: string, key:string, value:any, options:any): TPromise<string> {\n\t\tconst args = ['config'];\n\n\t\tif (scope) {\n\t\t\targs.push('--' + scope);\n\t\t}\n\n\t\targs.push(key);\n\n\t\tif (value) {\n\t\t\targs.push(value);\n\t\t}\n\n\t\treturn this.run(args, options).then((result) => result.stdout);\n\t}\n\n\tpublic show(object: string): ChildProcess {\n\t\treturn this.stream(['show', object]);\n\t}\n\n\tpublic buffer(object: string): TPromise<string> {\n\t\tconst child = this.show(object);\n\n\t\treturn new Promise((c, e) => {\n\t\t\tdetectMimesFromStream(child.stdout, null, (err, result) => {\n\t\t\t\tif (err) {\n\t\t\t\t\te(err);\n\t\t\t\t} else if (isBinaryMime(result.mimes)) {\n\t\t\t\t\te(<files.IFileOperationResult>{\n\t\t\t\t\t\tmessage: nls.localize('fileBinaryError', \"File seems to be binary and cannot be opened as text\"),\n\t\t\t\t\t\tfileOperationResult: files.FileOperationResult.FILE_IS_BINARY\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tc(this.doBuffer(object));\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate doBuffer(object: string): TPromise<string> {\n\t\tconst child = this.show(object);\n\n\t\treturn exec(child, this.defaultEncoding).then(({ exitCode, stdout }) => {\n\t\t\tif (exitCode) {\n\t\t\t\treturn TPromise.wrapError<string>(new GitError({\n\t\t\t\t\tmessage: 'Could not buffer object.',\n\t\t\t\t\texitCode\n\t\t\t\t}));\n\t\t\t}\n\n\t\t\treturn TPromise.as<string>(stdout);\n\t\t});\n\t}\n\n\tpublic add(paths: string[]): Promise {\n\t\tconst args = ['add', '-A', '--'];\n\n\t\tif (paths && paths.length) {\n\t\t\targs.push.apply(args, paths);\n\t\t} else {\n\t\t\targs.push('.');\n\t\t}\n\n\t\treturn this.run(args);\n\t}\n\n\tpublic stage(path: string, data: string): Promise {\n\t\tconst child = this.stream(['hash-object', '--stdin', '-w'], { stdio: [null, null, null] });\n\t\tchild.stdin.end(data, 'utf8');\n\n\t\treturn exec(child).then(({ exitCode, stdout }) => {\n\t\t\tif (exitCode) {\n\t\t\t\treturn TPromise.wrapError<IExecutionResult>(new GitError({\n\t\t\t\t\tmessage: 'Could not hash object.',\n\t\t\t\t\texitCode: exitCode\n\t\t\t\t}));\n\t\t\t}\n\n\t\t\treturn this.run(['update-index', '--cacheinfo', '100644', stdout, path]);\n\t\t});\n\t}\n\n\tpublic checkout(treeish: string, paths: string[]): Promise {\n\t\tconst args = [ 'checkout', '-q' ];\n\n\t\tif (treeish) {\n\t\t\targs.push(treeish);\n\t\t}\n\n\t\tif (paths && paths.length) {\n\t\t\targs.push('--');\n\t\t\targs.push.apply(args, paths);\n\t\t}\n\n\t\treturn this.run(args).then(null, (err: GitError) => {\n\t\t\tif (/Please, commit your changes or stash them/.test(err.stderr)) {\n\t\t\t\terr.gitErrorCode = GitErrorCodes.DirtyWorkTree;\n\t\t\t}\n\n\t\t\treturn Promise.wrapError(err);\n\t\t});\n\t}\n\n\tpublic commit(message: string, all: boolean, amend: boolean): Promise {\n\t\tconst args = ['commit', '--quiet', '--allow-empty-message', '--file', '-'];\n\n\t\tif (all) {\n\t\t\targs.push('--all');\n\t\t}\n\n\t\tif (amend) {\n\t\t\targs.push('--amend');\n\t\t}\n\n\t\treturn this.run(args, { input: message || '' }).then(null, (commitErr: GitError) => {\n\t\t\tif (/not possible because you have unmerged files/.test(commitErr.stderr)) {\n\t\t\t\tcommitErr.gitErrorCode = GitErrorCodes.UnmergedChanges;\n\t\t\t\treturn Promise.wrapError(commitErr);\n\t\t\t}\n\n\t\t\treturn this.run(['config', '--get-all', 'user.name']).then(null, (err: GitError) => {\n\t\t\t\terr.gitErrorCode = GitErrorCodes.NoUserNameConfigured;\n\t\t\t\treturn Promise.wrapError(err);\n\t\t\t}).then(() => {\n\t\t\t\treturn this.run(['config', '--get-all', 'user.email']).then(null, (err: GitError) => {\n\t\t\t\t\terr.gitErrorCode = GitErrorCodes.NoUserEmailConfigured;\n\t\t\t\t\treturn Promise.wrapError(err);\n\t\t\t\t}).then(() => {\n\t\t\t\t\treturn Promise.wrapError(commitErr);\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t}\n\n\tpublic branch(name: string, checkout: boolean): Promise {\n\t\tconst args = checkout ? ['checkout', '-q', '-b', name] : [ 'branch', '-q', name ];\n\t\treturn this.run(args);\n\t}\n\n\tpublic clean(paths: string[]): Promise {\n\t\tconst args = [ 'clean', '-f', '-q', '--' ].concat(paths);\n\t\treturn this.run(args);\n\t}\n\n\tpublic undo(): Promise {\n\t\treturn this.run([ 'clean', '-fd' ]).then(() => {\n\t\t\treturn this.run([ 'checkout', '--', '.' ]).then(null, (err: GitError) => {\n\t\t\t\tif (/did not match any file\\(s\\) known to git\\./.test(err.stderr)) {\n\t\t\t\t\treturn TPromise.as(null);\n\t\t\t\t}\n\n\t\t\t\treturn Promise.wrapError(err);\n\t\t\t});\n\t\t});\n\t}\n\n\tpublic reset(treeish: string, hard: boolean = false): Promise {\n\t\tconst args = ['reset'];\n\n\t\tif (hard) {\n\t\t\targs.push('--hard');\n\t\t}\n\n\t\targs.push(treeish);\n\n\t\treturn this.run(args);\n\t}\n\n\tpublic revertFiles(treeish: string, paths: string[]): Promise {\n\t\treturn this.run([ 'branch' ]).then((result) => {\n\t\t\tlet args: string[];\n\n\t\t\t// In case there are no branches, we must use rm --cached\n\t\t\tif (!result.stdout) {\n\t\t\t\targs = [ 'rm', '--cached', '-r', '--' ];\n\t\t\t} else {\n\t\t\t\targs = [ 'reset', '-q', treeish, '--' ];\n\t\t\t}\n\n\t\t\tif (paths && paths.length) {\n\t\t\t\targs.push.apply(args, paths);\n\t\t\t} else {\n\t\t\t\targs.push('.');\n\t\t\t}\n\n\t\t\treturn this.run(args).then(null, (err: GitError) => {\n\t\t\t\t// In case there are merge conflicts to be resolved, git reset will output\n\t\t\t\t// some \"needs merge\" data. We try to get around that.\n\t\t\t\tif (/([^:]+: needs merge\\n)+/m.test(err.stdout)) {\n\t\t\t\t\treturn TPromise.as(null);\n\t\t\t\t}\n\n\t\t\t\treturn Promise.wrapError(err);\n\t\t\t});\n\t\t});\n\t}\n\n\tpublic fetch(): Promise {\n\t\treturn this.run(['fetch']).then(null, (err: GitError) => {\n\t\t\tif (/No remote repository specified\\./.test(err.stderr)) {\n\t\t\t\terr.gitErrorCode = GitErrorCodes.NoRemoteRepositorySpecified;\n\t\t\t} else if (/Could not read from remote repository/.test(err.stderr)) {\n\t\t\t\terr.gitErrorCode = GitErrorCodes.RemoteConnectionError;\n\t\t\t}\n\n\t\t\treturn Promise.wrapError(err);\n\t\t});\n\t}\n\n\tpublic pull(rebase?: boolean): Promise {\n\t\tconst args = ['pull'];\n\t\tif (rebase) { args.push('-r'); }\n\n\t\treturn this.run(args).then(null, (err: GitError) => {\n\t\t\tif (/^CONFLICT \\([^)]+\\): \\b/m.test(err.stdout)) {\n\t\t\t\terr.gitErrorCode = GitErrorCodes.Conflict;\n\t\t\t} else if (/Please tell me who you are\\./.test(err.stderr)) {\n\t\t\t\terr.gitErrorCode = GitErrorCodes.NoUserNameConfigured;\n\t\t\t} else if (/Could not read from remote repository/.test(err.stderr)) {\n\t\t\t\terr.gitErrorCode = GitErrorCodes.RemoteConnectionError;\n\t\t\t} else if (/Pull is not possible because you have unmerged files|Cannot pull with rebase: You have unstaged changes|Your local changes to the following files would be overwritten|Please, commit your changes before you can merge/.test(err.stderr)) {\n\t\t\t\terr.gitErrorCode = GitErrorCodes.DirtyWorkTree;\n\t\t\t}\n\n\t\t\treturn Promise.wrapError(err);\n\t\t});\n\t}\n\n\tpublic push(remote?: string, name?: string, options?:IPushOptions): Promise {\n\t\tconst args = ['push'];\n\t\tif (options && options.setUpstream) { args.push('-u'); }\n\t\tif (remote) { args.push(remote); }\n\t\tif (name) { args.push(name); }\n\n\t\treturn this.run(args).then(null, (err: GitError) => {\n\t\t\tif (/^error: failed to push some refs to\\b/m.test(err.stderr)) {\n\t\t\t\terr.gitErrorCode = GitErrorCodes.PushRejected;\n\t\t\t} else if (/Could not read from remote repository/.test(err.stderr)) {\n\t\t\t\terr.gitErrorCode = GitErrorCodes.RemoteConnectionError;\n\t\t\t}\n\n\t\t\treturn Promise.wrapError(err);\n\t\t});\n\t}\n\n\tpublic sync(): Promise {\n\t\treturn this.pull().then(() => this.push());\n\t}\n\n\tpublic getRoot(): TPromise<string> {\n\t\treturn this.run(['rev-parse', '--show-toplevel'], { log: false }).then(result => result.stdout.trim());\n\t}\n\n\tpublic getStatus(): TPromise<IRawFileStatus[]> {\n\t\treturn this.run(['status', '-z', '-u'], { log: false }).then((executionResult) => {\n\t\t\tconst status = executionResult.stdout;\n\t\t\tconst result:IRawFileStatus[] = [];\n\t\t\tlet current:IRawFileStatus;\n\t\t\tlet i = 0;\n\n\t\t\tfunction readName():string {\n\t\t\t\tconst start = i;\n\t\t\t\tlet c:string;\n\t\t\t\twhile ((c = status.charAt(i)) !== '\\u0000') { i++; }\n\t\t\t\treturn status.substring(start, i++);\n\t\t\t}\n\n\t\t\twhile (i < status.length) {\n\t\t\t\tcurrent = {\n\t\t\t\t\tx: status.charAt(i++),\n\t\t\t\t\ty: status.charAt(i++),\n\t\t\t\t\tpath: null,\n\t\t\t\t\tmimetype: null\n\t\t\t\t};\n\n\t\t\t\ti++;\n\n\t\t\t\tif (current.x === 'R') {\n\t\t\t\t\tcurrent.rename = readName();\n\t\t\t\t}\n\n\t\t\t\tcurrent.path = readName();\n\t\t\t\tcurrent.mimetype = guessMimeTypes(current.path)[0];\n\n\t\t\t\t// If path ends with slash, it must be a nested git repo\n\t\t\t\tif (current.path[current.path.length-1] === '/') {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tresult.push(current);\n\t\t\t}\n\n\t\t\treturn TPromise.as<IRawFileStatus[]>(result);\n\t\t});\n\t}\n\n\tpublic getHEAD(): TPromise<IHead> {\n\t\treturn this.run(['symbolic-ref', '--short', 'HEAD'], { log: false }).then((result) => {\n\t\t\tif (!result.stdout) {\n\t\t\t\treturn TPromise.wrapError<IHead>(new Error('Not in a branch'));\n\t\t\t}\n\n\t\t\treturn TPromise.as<IHead>({ name: result.stdout.trim() });\n\t\t}, (err) => {\n\t\t\treturn this.run(['rev-parse', 'HEAD'], { log: false }).then((result) => {\n\t\t\t\tif (!result.stdout) {\n\t\t\t\t\treturn TPromise.wrapError<IHead>(new Error('Error parsing HEAD'));\n\t\t\t\t}\n\n\t\t\t\treturn TPromise.as<IHead>({ commit: result.stdout.trim() });\n\t\t\t});\n\t\t});\n\t}\n\n\tpublic getHeads(): TPromise<ITag[]> {\n\t\treturn this.run(['for-each-ref', '--format', '%(refname:short) %(objectname)', 'refs/heads/'], { log: false }).then((result) => {\n\t\t\treturn result.stdout.trim().split('\\n')\n\t\t\t\t.filter(b => !!b)\n\t\t\t\t.map(b => b.trim().split(' '))\n\t\t\t\t.map(a => ({ name: a[0], commit: a[1] }));\n\t\t});\n\t}\n\n\tpublic getTags(): TPromise<IHead[]> {\n\t\treturn this.run(['for-each-ref', '--format', '%(refname:short) %(objectname)', 'refs/tags/'], { log: false }).then((result) => {\n\t\t\treturn result.stdout.trim().split('\\n')\n\t\t\t\t.filter(b => !!b)\n\t\t\t\t.map(b => b.trim().split(' '))\n\t\t\t\t.map(a => ({ name: a[0], commit: a[1] }));\n\t\t});\n\t}\n\n\tpublic getRemotes(): TPromise<IRemote[]> {\n\t\treturn this.run(['remote'], { log: false })\n\t\t\t.then(result => result.stdout\n\t\t\t\t.trim()\n\t\t\t\t.split('\\n')\n\t\t\t\t.filter(b => !!b)\n\t\t\t\t.map(name => ({ name }))\n\t\t\t);\n\t}\n\n\tpublic getBranch(branch: string): TPromise<IBranch> {\n\t\tif (branch === 'HEAD') {\n\t\t\treturn this.getHEAD();\n\t\t}\n\n\t\treturn this.run(['rev-parse', branch], { log: false }).then((result) => {\n\t\t\tif (!result.stdout) {\n\t\t\t\treturn TPromise.wrapError<IBranch>(new Error('No such branch'));\n\t\t\t}\n\n\t\t\tconst commit = result.stdout.trim();\n\n\t\t\treturn this.run(['rev-parse', '--symbolic-full-name', '--abbrev-ref', branch + '@{u}'], { log: false }).then((result: IExecutionResult) => {\n\t\t\t\tconst upstream = result.stdout.trim();\n\n\t\t\t\treturn this.run(['rev-list', '--left-right', branch + '...' + upstream], { log: false }).then((result) => {\n\t\t\t\t\tlet ahead = 0, behind = 0;\n\t\t\t\t\tlet i = 0;\n\n\t\t\t\t\twhile (i < result.stdout.length) {\n\t\t\t\t\t\tswitch (result.stdout.charAt(i)) {\n\t\t\t\t\t\t\tcase '<': ahead++; break;\n\t\t\t\t\t\t\tcase '>': behind++; break;\n\t\t\t\t\t\t\tdefault: i++; break;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\twhile (result.stdout.charAt(i++) !== '\\n') { /* no-op */ }\n\t\t\t\t\t}\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\tname: branch,\n\t\t\t\t\t\tcommit: commit,\n\t\t\t\t\t\tupstream: upstream,\n\t\t\t\t\t\tahead: ahead,\n\t\t\t\t\t\tbehind: behind\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\t}, () => {\n\t\t\t\treturn { name: branch, commit: commit };\n\t\t\t});\n\t\t});\n\t}\n\n\tpublic onOutput(listener: (output: string) => void): () => void {\n\t\treturn this.git.onOutput(listener);\n\t}\n}\n"]}