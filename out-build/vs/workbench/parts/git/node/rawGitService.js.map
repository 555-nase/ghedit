{"version":3,"file":"vs/workbench/parts/git/node/rawGitService.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/workbench/parts/git/node/rawGitService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport path = require('path');\nimport { TPromise, Promise } from 'vs/base/common/winjs.base';\nimport mime = require('vs/base/node/mime');\nimport pfs = require('vs/base/node/pfs');\nimport { Repository, GitError } from 'vs/workbench/parts/git/node/git.lib';\nimport { IRawGitService, RawServiceState, IRawStatus, IHead, GitErrorCodes, IPushOptions } from 'vs/workbench/parts/git/common/git';\n\nexport class RawGitService implements IRawGitService {\n\n\tprivate repo: Repository;\n\tprivate _repositoryRoot: TPromise<string>;\n\n\tconstructor(repo: Repository) {\n\t\tthis.repo = repo;\n\t}\n\n\tgetVersion(): TPromise<string> {\n\t\treturn TPromise.as(this.repo.version);\n\t}\n\n\tprivate getRepositoryRoot(): TPromise<string> {\n\t\treturn this._repositoryRoot || (this._repositoryRoot = pfs.realpath(this.repo.path));\n\t}\n\n\tpublic serviceState(): TPromise<RawServiceState> {\n\t\treturn TPromise.as<RawServiceState>(this.repo\n\t\t\t? RawServiceState.OK\n\t\t\t: RawServiceState.GitNotFound\n\t\t);\n\t}\n\n\tpublic status(): TPromise<IRawStatus> {\n\t\treturn this.repo.getStatus()\n\t\t\t.then(status => this.repo.getHEAD()\n\t\t\t\t.then(HEAD => {\n\t\t\t\t\tif (HEAD.name) {\n\t\t\t\t\t\treturn this.repo.getBranch(HEAD.name).then(null, () => HEAD);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn HEAD;\n\t\t\t\t\t}\n\t\t\t\t}, (): IHead => null)\n\t\t\t\t.then(HEAD => Promise.join([this.getRepositoryRoot(), this.repo.getHeads(), this.repo.getTags(), this.repo.getRemotes()]).then(r => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\trepositoryRoot: r[0],\n\t\t\t\t\t\tstatus: status,\n\t\t\t\t\t\tHEAD: HEAD,\n\t\t\t\t\t\theads: r[1],\n\t\t\t\t\t\ttags: r[2],\n\t\t\t\t\t\tremotes: r[3]\n\t\t\t\t\t};\n\t\t\t\t})))\n\t\t\t.then(null, (err) => {\n\t\t\t\tif (err.gitErrorCode === GitErrorCodes.BadConfigFile) {\n\t\t\t\t\treturn Promise.wrapError(err);\n\t\t\t\t} else if (err.gitErrorCode === GitErrorCodes.NotAtRepositoryRoot) {\n\t\t\t\t\treturn Promise.wrapError(err);\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\t\t\t});\n\t}\n\n\tpublic init(): TPromise<IRawStatus> {\n\t\treturn this.repo.init().then(() => this.status());\n\t}\n\n\tpublic add(filePaths?: string[]): TPromise<IRawStatus> {\n\t\treturn this.repo.add(filePaths).then(() => this.status());\n\t}\n\n\tpublic stage(filePath: string, content: string): TPromise<IRawStatus> {\n\t\treturn this.repo.stage(filePath, content).then(() => this.status());\n\t}\n\n\tpublic branch(name: string, checkout?: boolean): TPromise<IRawStatus> {\n\t\treturn this.repo.branch(name, checkout).then(() => this.status());\n\t}\n\n\tpublic checkout(treeish?: string, filePaths?: string[]): TPromise<IRawStatus> {\n\t\treturn this.repo.checkout(treeish, filePaths).then(() => this.status());\n\t}\n\n\tpublic clean(filePaths: string[]): TPromise<IRawStatus> {\n\t\treturn this.repo.clean(filePaths).then(() => this.status());\n\t}\n\n\tpublic undo(): TPromise<IRawStatus> {\n\t\treturn this.repo.undo().then(() => this.status());\n\t}\n\n\tpublic reset(treeish: string, hard?: boolean): TPromise<IRawStatus> {\n\t\treturn this.repo.reset(treeish, hard).then(() => this.status());\n\t}\n\n\tpublic revertFiles(treeish: string, filePaths?: string[]): TPromise<IRawStatus> {\n\t\treturn this.repo.revertFiles(treeish, filePaths).then(() => this.status());\n\t}\n\n\tpublic fetch(): TPromise<IRawStatus> {\n\t\treturn this.repo.fetch().then(null, (err) => {\n\t\t\tif (err.gitErrorCode === GitErrorCodes.NoRemoteRepositorySpecified) {\n\t\t\t\treturn TPromise.as(null);\n\t\t\t}\n\n\t\t\treturn Promise.wrapError(err);\n\t\t}).then(() => this.status());\n\t}\n\n\tpublic pull(rebase?: boolean): TPromise<IRawStatus> {\n\t\treturn this.repo.pull(rebase).then(() => this.status());\n\t}\n\n\tpublic push(remote?: string, name?: string, options?:IPushOptions): TPromise<IRawStatus> {\n\t\treturn this.repo.push(remote, name, options).then(() => this.status());\n\t}\n\n\tpublic sync(): TPromise<IRawStatus> {\n\t\treturn this.repo.sync().then(() => this.status());\n\t}\n\n\tpublic commit(message:string, amend?: boolean, stage?: boolean): TPromise<IRawStatus> {\n\t\tvar promise: Promise = TPromise.as(null);\n\n\t\tif (stage) {\n\t\t\tpromise = this.repo.add(null);\n\t\t}\n\n\t\treturn promise\n\t\t\t.then(() => this.repo.commit(message, stage, amend))\n\t\t\t.then(() => this.status());\n\t}\n\n\tpublic detectMimetypes(filePath: string, treeish?: string): TPromise<string[]> {\n\t\treturn pfs.exists(path.join(this.repo.path, filePath)).then((exists) => {\n\t\t\tif (exists) {\n\t\t\t\treturn new TPromise<string[]>((c, e) => {\n\t\t\t\t\tmime.detectMimesFromFile(path.join(this.repo.path, filePath), (err, result) => {\n\t\t\t\t\t\tif (err) { e(err); }\n\t\t\t\t\t\telse { c(result.mimes); }\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tvar child = this.repo.show(treeish + ':' + filePath);\n\n\t\t\treturn new TPromise<string[]>((c, e) => {\n\t\t\t\tmime.detectMimesFromStream(child.stdout, filePath, (err, result) => {\n\t\t\t\t\tif (err) { e(err); }\n\t\t\t\t\telse { c(result.mimes); }\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t}\n\n\t// careful, this buffers the whole object into memory\n\tpublic show(filePath: string, treeish?: string): TPromise<string> {\n\t\ttreeish = treeish === '~' ? '' : treeish;\n\t\treturn this.repo.buffer(treeish + ':' + filePath).then(null, e => {\n\t\t\tif (e instanceof GitError) {\n\t\t\t\treturn ''; // mostly untracked files end up in a git error\n\t\t\t}\n\n\t\t\treturn TPromise.wrapError<string>(e);\n\t\t});\n\t}\n\n\tpublic onOutput(): Promise {\n\t\tvar cancel: () => void;\n\n\t\treturn new Promise((c, e, p) => {\n\t\t\tcancel = this.repo.onOutput(p);\n\t\t}, () => cancel());\n\t}\n}\n\nexport class DelayedRawGitService implements IRawGitService {\n\n\tconstructor(private raw: TPromise<IRawGitService>) { }\n\n\tgetVersion(): TPromise<string> {\n\t\treturn this.raw.then(raw => raw.getVersion());\n\t}\n\n\tpublic serviceState(): TPromise<RawServiceState> {\n\t\treturn this.raw.then(raw => raw.serviceState());\n\t}\n\n\tpublic status(): TPromise<IRawStatus> {\n\t\treturn this.raw.then(raw => raw.status());\n\t}\n\n\tpublic init(): TPromise<IRawStatus> {\n\t\treturn this.raw.then(raw => raw.init());\n\t}\n\n\tpublic add(filesPaths?: string[]): TPromise<IRawStatus> {\n\t\treturn this.raw.then(raw => raw.add(filesPaths));\n\t}\n\n\tpublic stage(filePath: string, content: string): TPromise<IRawStatus> {\n\t\treturn this.raw.then(raw => raw.stage(filePath, content));\n\t}\n\n\tpublic branch(name: string, checkout?: boolean): TPromise<IRawStatus> {\n\t\treturn this.raw.then(raw => raw.branch(name, checkout));\n\t}\n\n\tpublic checkout(treeish?: string, filePaths?: string[]): TPromise<IRawStatus> {\n\t\treturn this.raw.then(raw => raw.checkout(treeish, filePaths));\n\t}\n\n\tpublic clean(filePaths: string[]): TPromise<IRawStatus> {\n\t\treturn this.raw.then(raw => raw.clean(filePaths));\n\t}\n\n\tpublic undo(): TPromise<IRawStatus> {\n\t\treturn this.raw.then(raw => raw.undo());\n\t}\n\n\tpublic reset(treeish: string, hard?: boolean): TPromise<IRawStatus> {\n\t\treturn this.raw.then(raw => raw.reset(treeish, hard));\n\t}\n\n\tpublic revertFiles(treeish: string, filePaths?: string[]): TPromise<IRawStatus> {\n\t\treturn this.raw.then(raw => raw.revertFiles(treeish, filePaths));\n\t}\n\n\tpublic fetch(): TPromise<IRawStatus> {\n\t\treturn this.raw.then(raw => raw.fetch());\n\t}\n\n\tpublic pull(rebase?: boolean): TPromise<IRawStatus> {\n\t\treturn this.raw.then(raw => raw.pull(rebase));\n\t}\n\n\tpublic push(origin?: string, name?: string, options?:IPushOptions): TPromise<IRawStatus> {\n\t\treturn this.raw.then(raw => raw.push(origin, name, options));\n\t}\n\n\tpublic sync(): TPromise<IRawStatus> {\n\t\treturn this.raw.then(raw => raw.sync());\n\t}\n\n\tpublic commit(message: string, amend?: boolean, stage?: boolean): TPromise<IRawStatus> {\n\t\treturn this.raw.then(raw => raw.commit(message, amend, stage));\n\t}\n\n\tpublic detectMimetypes(path: string, treeish?: string): TPromise<string[]> {\n\t\treturn this.raw.then(raw => raw.detectMimetypes(path, treeish));\n\t}\n\n\tpublic show(path: string, treeish?: string): TPromise<string> {\n\t\treturn this.raw.then(raw => raw.show(path, treeish));\n\t}\n\n\tpublic onOutput(): Promise {\n\t\treturn this.raw.then(raw => raw.onOutput());\n\t}\n}"]}