{"version":3,"file":"vs/workbench/parts/git/common/noopGitService.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/workbench/parts/git/common/noopGitService.ts"],"names":[],"mappings":";IAAA;;;oGAGgG;IAChG,YAAY,CAAC;IAKb;QAAA;QA0FA,CAAC;QA/EA,mCAAU,GAAV;YACC,MAAM,CAAC,qBAAQ,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;QAC1B,CAAC;QAEM,qCAAY,GAAnB;YACC,MAAM,CAAC,qBAAQ,CAAC,EAAE,CAAC,GAAG,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC;QAC5C,CAAC;QAEM,+BAAM,GAAb;YACC,MAAM,CAAC,qBAAQ,CAAC,EAAE,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;QAC3C,CAAC;QAEM,6BAAI,GAAX;YACC,MAAM,CAAC,qBAAQ,CAAC,EAAE,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;QAC3C,CAAC;QAEM,4BAAG,GAAV,UAAW,UAAqB;YAC/B,MAAM,CAAC,qBAAQ,CAAC,EAAE,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;QAC3C,CAAC;QAEM,8BAAK,GAAZ,UAAa,QAAgB,EAAE,OAAe;YAC7C,MAAM,CAAC,qBAAQ,CAAC,EAAE,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;QAC3C,CAAC;QAEM,+BAAM,GAAb,UAAc,IAAY,EAAE,QAAkB;YAC7C,MAAM,CAAC,qBAAQ,CAAC,EAAE,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;QAC3C,CAAC;QAEM,iCAAQ,GAAf,UAAgB,OAAgB,EAAE,SAAoB;YACrD,MAAM,CAAC,qBAAQ,CAAC,EAAE,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;QAC3C,CAAC;QAEM,8BAAK,GAAZ,UAAa,SAAmB;YAC/B,MAAM,CAAC,qBAAQ,CAAC,EAAE,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;QAC3C,CAAC;QAEM,6BAAI,GAAX;YACC,MAAM,CAAC,qBAAQ,CAAC,EAAE,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;QAC3C,CAAC;QAEM,8BAAK,GAAZ,UAAa,OAAe,EAAE,IAAc;YAC3C,MAAM,CAAC,qBAAQ,CAAC,EAAE,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;QAC3C,CAAC;QAEM,oCAAW,GAAlB,UAAmB,OAAe,EAAE,SAAoB;YACvD,MAAM,CAAC,qBAAQ,CAAC,EAAE,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;QAC3C,CAAC;QAEM,8BAAK,GAAZ;YACC,MAAM,CAAC,qBAAQ,CAAC,EAAE,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;QAC3C,CAAC;QAEM,6BAAI,GAAX,UAAY,MAAgB;YAC3B,MAAM,CAAC,qBAAQ,CAAC,EAAE,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;QAC3C,CAAC;QAEM,6BAAI,GAAX;YACC,MAAM,CAAC,qBAAQ,CAAC,EAAE,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;QAC3C,CAAC;QAEM,6BAAI,GAAX;YACC,MAAM,CAAC,qBAAQ,CAAC,EAAE,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;QAC3C,CAAC;QAEM,+BAAM,GAAb,UAAc,OAAe,EAAE,KAAe,EAAE,KAAe;YAC9D,MAAM,CAAC,qBAAQ,CAAC,EAAE,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;QAC3C,CAAC;QAEM,wCAAe,GAAtB,UAAuB,IAAY,EAAE,OAAgB;YACpD,MAAM,CAAC,qBAAQ,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;QACxB,CAAC;QAEM,6BAAI,GAAX,UAAY,IAAY,EAAE,OAAgB;YACzC,MAAM,CAAC,qBAAQ,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;QAC1B,CAAC;QAEM,iCAAQ,GAAf;YACC,MAAM,CAAC,qBAAQ,CAAC,EAAE,CAAC,cAAM,OAAA,IAAI,EAAJ,CAAI,CAAC,CAAC;QAChC,CAAC;QAxFc,qBAAM,GAAkB;YACtC,cAAc,EAAE,IAAI;YACpB,KAAK,EAAE,GAAG,CAAC,YAAY,CAAC,aAAa;YACrC,MAAM,EAAE,EAAE;YACV,IAAI,EAAE,IAAI;YACV,KAAK,EAAE,EAAE;YACT,IAAI,EAAE,EAAE;YACR,OAAO,EAAE,EAAE;SACX,CAAC;QAiFH,qBAAC;IAAD,CAAC,AA1FD,IA0FC;IA1FY,sBAAc,iBA0F1B,CAAA","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport git = require('vs/workbench/parts/git/common/git');\nimport { Promise, TPromise } from 'vs/base/common/winjs.base';\n\nexport class NoOpGitService implements git.IRawGitService {\n\tprivate static STATUS:git.IRawStatus = {\n\t\trepositoryRoot: null,\n\t\tstate: git.ServiceState.NotAWorkspace,\n\t\tstatus: [],\n\t\tHEAD: null,\n\t\theads: [],\n\t\ttags: [],\n\t\tremotes: []\n\t};\n\n\tgetVersion(): TPromise<string> {\n\t\treturn TPromise.as(null);\n\t}\n\n\tpublic serviceState(): TPromise<git.RawServiceState> {\n\t\treturn TPromise.as(git.RawServiceState.OK);\n\t}\n\n\tpublic status(): TPromise<git.IRawStatus> {\n\t\treturn TPromise.as(NoOpGitService.STATUS);\n\t}\n\n\tpublic init(): TPromise<git.IRawStatus> {\n\t\treturn TPromise.as(NoOpGitService.STATUS);\n\t}\n\n\tpublic add(filesPaths?: string[]): TPromise<git.IRawStatus> {\n\t\treturn TPromise.as(NoOpGitService.STATUS);\n\t}\n\n\tpublic stage(filePath: string, content: string): TPromise<git.IRawStatus> {\n\t\treturn TPromise.as(NoOpGitService.STATUS);\n\t}\n\n\tpublic branch(name: string, checkout?: boolean): TPromise<git.IRawStatus> {\n\t\treturn TPromise.as(NoOpGitService.STATUS);\n\t}\n\n\tpublic checkout(treeish?: string, filePaths?: string[]): TPromise<git.IRawStatus> {\n\t\treturn TPromise.as(NoOpGitService.STATUS);\n\t}\n\n\tpublic clean(filePaths: string[]): TPromise<git.IRawStatus> {\n\t\treturn TPromise.as(NoOpGitService.STATUS);\n\t}\n\n\tpublic undo(): TPromise<git.IRawStatus> {\n\t\treturn TPromise.as(NoOpGitService.STATUS);\n\t}\n\n\tpublic reset(treeish: string, hard?: boolean): TPromise<git.IRawStatus> {\n\t\treturn TPromise.as(NoOpGitService.STATUS);\n\t}\n\n\tpublic revertFiles(treeish: string, filePaths?: string[]): TPromise<git.IRawStatus> {\n\t\treturn TPromise.as(NoOpGitService.STATUS);\n\t}\n\n\tpublic fetch(): TPromise<git.IRawStatus> {\n\t\treturn TPromise.as(NoOpGitService.STATUS);\n\t}\n\n\tpublic pull(rebase?: boolean): TPromise<git.IRawStatus> {\n\t\treturn TPromise.as(NoOpGitService.STATUS);\n\t}\n\n\tpublic push(): TPromise<git.IRawStatus> {\n\t\treturn TPromise.as(NoOpGitService.STATUS);\n\t}\n\n\tpublic sync(): TPromise<git.IRawStatus> {\n\t\treturn TPromise.as(NoOpGitService.STATUS);\n\t}\n\n\tpublic commit(message: string, amend?: boolean, stage?: boolean): TPromise<git.IRawStatus> {\n\t\treturn TPromise.as(NoOpGitService.STATUS);\n\t}\n\n\tpublic detectMimetypes(path: string, treeish?: string): TPromise<string[]> {\n\t\treturn TPromise.as([]);\n\t}\n\n\tpublic show(path: string, treeish?: string): TPromise<string> {\n\t\treturn TPromise.as(null);\n\t}\n\n\tpublic onOutput(): Promise {\n\t\treturn TPromise.as(() => null);\n\t}\n}"]}