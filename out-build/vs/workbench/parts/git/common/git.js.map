{"version":3,"file":"vs/workbench/parts/git/common/git.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/workbench/parts/git/common/git.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport WinJS = require('vs/base/common/winjs.base');\nimport WorkbenchEditorCommon = require('vs/workbench/common/editor');\nimport EventEmitter = require('vs/base/common/eventEmitter');\nimport Lifecycle = require('vs/base/common/lifecycle');\nimport {createDecorator, ServiceIdentifier} from 'vs/platform/instantiation/common/instantiation';\n\n// Model raw interfaces\n\nexport interface IRawFileStatus {\n\tx: string;\n\ty: string;\n\tpath: string;\n\tmimetype: string;\n\trename?: string;\n}\n\nexport interface IRemote {\n\tname: string;\n}\n\nexport interface IHead {\n\tname?: string;\n\tcommit?: string;\n}\n\nexport interface IBranch extends IHead {\n\tupstream?: string;\n\tahead?: number;\n\tbehind?: number;\n}\n\nexport interface ITag {\n\tname: string;\n\tcommit: string;\n}\n\nexport interface IRawStatus {\n\trepositoryRoot: string;\n\tstate?: ServiceState;\n\tstatus: IRawFileStatus[];\n\tHEAD: IBranch;\n\theads: IBranch[];\n\ttags: ITag[];\n\tremotes: IRemote[];\n}\n\n// Model enums\n\nexport enum StatusType {\n\tINDEX,\n\tWORKING_TREE,\n\tMERGE\n}\n\nexport enum Status {\n\tINDEX_MODIFIED,\n\tINDEX_ADDED,\n\tINDEX_DELETED,\n\tINDEX_RENAMED,\n\tINDEX_COPIED,\n\n\tMODIFIED,\n\tDELETED,\n\tUNTRACKED,\n\tIGNORED,\n\n\tADDED_BY_US,\n\tADDED_BY_THEM,\n\tDELETED_BY_US,\n\tDELETED_BY_THEM,\n\tBOTH_ADDED,\n\tBOTH_DELETED,\n\tBOTH_MODIFIED\n}\n\n// Model events\n\nexport var ModelEvents = {\n\tMODEL_UPDATED: 'ModelUpdated',\n\tSTATUS_MODEL_UPDATED: 'StatusModelUpdated',\n\tHEAD_UPDATED: 'HEADUpdated',\n\tHEADS_UPDATED: 'HEADSUpdated',\n\tTAGS_UPDATED: 'TagsUpdated',\n\tREMOTES_UPDATED: 'RemotesUpdated'\n};\n\n// Model interfaces\n\nexport interface IFileStatus {\n\tgetId(): string;\n\tgetType(): StatusType;\n\tgetPath(): string;\n\tgetPathComponents(): string[];\n\tgetMimetype(): string;\n\tgetStatus(): Status;\n\tgetRename():string;\n\tclone(): IFileStatus;\n\tupdate(other: IFileStatus): void;\n}\n\nexport interface IStatusGroup extends EventEmitter.IEventEmitter {\n\tgetType(): StatusType;\n\tupdate(statusList: IFileStatus[]): void;\n\tall(): IFileStatus[];\n\tfind(path: string): IFileStatus;\n}\n\nexport interface IStatusSummary {\n\thasWorkingTreeChanges: boolean;\n\thasIndexChanges: boolean;\n\thasMergeChanges: boolean;\n}\n\nexport interface IStatusModel extends EventEmitter.IEventEmitter {\n\tgetSummary(): IStatusSummary;\n\tupdate(status: IRawFileStatus[]): void;\n\tgetIndexStatus(): IStatusGroup;\n\tgetWorkingTreeStatus(): IStatusGroup;\n\tgetMergeStatus(): IStatusGroup;\n\tgetGroups(): IStatusGroup[];\n\tfind(path: string, type: StatusType): IFileStatus;\n}\n\nexport interface IModel extends EventEmitter.IEventEmitter {\n\tgetRepositoryRoot(): string;\n\tgetStatus(): IStatusModel;\n\tgetHEAD(): IBranch;\n\tgetHeads(): IBranch[];\n\tgetTags(): ITag[];\n\tgetRemotes(): IRemote[];\n\tupdate(status: IRawStatus): void;\n\tgetPS1(): string;\n}\n\n// Service operations\n\nexport interface IGitOperation extends Lifecycle.IDisposable {\n\tid: string;\n\trun(): WinJS.Promise;\n}\n\n// Service enums\n\nexport enum ServiceState {\n\tNotInitialized,\n\tNotARepo,\n\tNotAtRepoRoot,\n\tOK,\n\tNoGit,\n\tDisabled,\n\tNotAWorkspace\n}\n\nexport enum RawServiceState {\n\tOK,\n\tGitNotFound,\n\tDisabled\n}\n\nexport var GitErrorCodes = {\n\tBadConfigFile: 'BadConfigFile',\n\tAuthenticationFailed: 'AuthenticationFailed',\n\tNoUserNameConfigured: 'NoUserNameConfigured',\n\tNoUserEmailConfigured: 'NoUserEmailConfigured',\n\tNoRemoteRepositorySpecified: 'NoRemoteRepositorySpecified',\n\tNotAGitRepository: 'NotAGitRepository',\n\tNotAtRepositoryRoot: 'NotAtRepositoryRoot',\n\tConflict: 'Conflict',\n\tUnmergedChanges: 'UnmergedChanges',\n\tPushRejected: 'PushRejected',\n\tRemoteConnectionError: 'RemoteConnectionError',\n\tDirtyWorkTree: 'DirtyWorkTree',\n\tCantOpenResource: 'CantOpenResource',\n\tGitNotFound: 'GitNotFound',\n\tCantCreatePipe: 'CantCreatePipe',\n\tCantAccessRemote: 'CantAccessRemote',\n\tRepositoryNotFound: 'RepositoryNotFound'\n};\n\nexport enum AutoFetcherState {\n\tDisabled,\n\tInactive,\n\tActive,\n\tFetching\n}\n\n// Service events\n\nexport var ServiceEvents = {\n\tSTATE_CHANGED: 'stateChanged',\n\tREPO_CHANGED: 'repoChanged',\n\tOPERATION_START: 'operationStart',\n\tOPERATION_END: 'operationEnd',\n\tOPERATION: 'operation',\n\tERROR: 'error',\n\tDISPOSE: 'dispose'\n};\n\n// Service operations\n\nexport var ServiceOperations = {\n\tSTATUS: 'status',\n\tINIT: 'init',\n\tADD: 'add',\n\tSTAGE: 'stage',\n\tBRANCH: 'branch',\n\tCHECKOUT: 'checkout',\n\tCLEAN: 'clean',\n\tUNDO: 'undo',\n\tRESET: 'reset',\n\tCOMMIT: 'commit',\n\tCOMMAND: 'command',\n\tBACKGROUND_FETCH: 'backgroundfetch',\n\tPULL: 'pull',\n\tPUSH: 'push',\n\tSYNC: 'sync'\n};\n\n// Service config\n\nexport interface IGitConfiguration {\n\tpath: string;\n\tautofetch: boolean;\n}\n\n// Service interfaces\n\nexport interface IAutoFetcher {\n\tstate: AutoFetcherState;\n\tactivate(): void;\n\tdeactivate(): void;\n}\n\nexport interface IGitCredentialScope {\n\tprotocol: string;\n\thost: string;\n\tpath: string;\n}\n\nexport interface IGitCredentials {\n\tusername: string;\n\tpassword: string;\n\tstore: boolean;\n}\n\nexport interface IGitServiceError extends Error {\n\tgitErrorCode: string;\n}\n\nexport interface IPushOptions {\n\tsetUpstream?: boolean;\n}\n\nexport interface IRawGitService {\n\tgetVersion(): WinJS.TPromise<string>;\n\tserviceState(): WinJS.TPromise<RawServiceState>;\n\tstatus(): WinJS.TPromise<IRawStatus>;\n\tinit(): WinJS.TPromise<IRawStatus>;\n\tadd(filesPaths?: string[]): WinJS.TPromise<IRawStatus>;\n\tstage(filePath: string, content: string): WinJS.TPromise<IRawStatus>;\n\tbranch(name: string, checkout?: boolean): WinJS.TPromise<IRawStatus>;\n\tcheckout(treeish?: string, filePaths?: string[]): WinJS.TPromise<IRawStatus>;\n\tclean(filePaths: string[]): WinJS.TPromise<IRawStatus>;\n\tundo(): WinJS.TPromise<IRawStatus>;\n\treset(treeish:string, hard?: boolean): WinJS.TPromise<IRawStatus>;\n\trevertFiles(treeish:string, filePaths?: string[]): WinJS.TPromise<IRawStatus>;\n\tfetch(): WinJS.TPromise<IRawStatus>;\n\tpull(rebase?: boolean): WinJS.TPromise<IRawStatus>;\n\tpush(remote?: string, name?: string, options?:IPushOptions): WinJS.TPromise<IRawStatus>;\n\tsync(): WinJS.TPromise<IRawStatus>;\n\tcommit(message:string, amend?: boolean, stage?: boolean): WinJS.TPromise<IRawStatus>;\n\tdetectMimetypes(path: string, treeish?: string): WinJS.TPromise<string[]>;\n\tshow(path: string, treeish?: string): WinJS.TPromise<string>;\n\tonOutput(): WinJS.Promise;\n}\n\nexport var GIT_SERVICE_ID = 'gitService';\n\nexport var IGitService = createDecorator<IGitService>(GIT_SERVICE_ID);\n\nexport interface IGitService extends EventEmitter.IEventEmitter {\n\tserviceId: ServiceIdentifier<any>;\n\tstatus(): WinJS.TPromise<IModel>;\n\tinit(): WinJS.TPromise<IModel>;\n\tadd(files?: IFileStatus[]): WinJS.TPromise<IModel>;\n\tstage(filePath: string, content: string): WinJS.TPromise<IModel>;\n\tbranch(name: string, checkout?: boolean): WinJS.TPromise<IModel>;\n\tcheckout(treeish?: string, files?: IFileStatus[]): WinJS.TPromise<IModel>;\n\tclean(files: IFileStatus[]): WinJS.TPromise<IModel>;\n\tundo(): WinJS.TPromise<IModel>;\n\treset(treeish:string, hard?: boolean): WinJS.TPromise<IModel>;\n\trevertFiles(treeish:string, files?: IFileStatus[]): WinJS.TPromise<IModel>;\n\tfetch(): WinJS.TPromise<IModel>;\n\tpull(rebase?: boolean): WinJS.TPromise<IModel>;\n\tpush(remote?: string, name?: string, options?:IPushOptions): WinJS.TPromise<IModel>;\n\tsync(): WinJS.TPromise<IModel>;\n\tcommit(message:string, amend?: boolean, stage?: boolean): WinJS.TPromise<IModel>;\n\tdetectMimetypes(path: string, treeish?: string): WinJS.Promise;\n\tbuffer(path: string, treeish?: string): WinJS.TPromise<string>;\n\n\tgetState(): ServiceState;\n\tgetModel(): IModel;\n\tshow(path: string, status: IFileStatus, treeish?: string, mimetype?: string): WinJS.Promise;\n\tgetInput(status: IFileStatus): WinJS.TPromise<WorkbenchEditorCommon.EditorInput>;\n\tisInitialized(): boolean;\n\tisIdle(): boolean;\n\tgetRunningOperations(): IGitOperation[];\n\tgetAutoFetcher(): IAutoFetcher;\n\n\tonOutput(): WinJS.Promise;\n}\n\n// Utils\n\nexport function isValidBranchName(value: string): boolean {\n\treturn !/^\\.|\\/\\.|\\.\\.|~|\\^|:|\\/$|\\.lock$|\\.lock\\/|\\\\|\\*|\\s|^\\s*$/.test(value);\n}\n"]}