{"version":3,"file":"vs/workbench/parts/git/common/stageRanges.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/workbench/parts/git/common/stageRanges.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport editorbrowser = require('vs/editor/browser/editorBrowser');\nimport editorcommon = require('vs/editor/common/editorCommon');\nimport {Range} from 'vs/editor/common/core/range';\n\nfunction sortChanges(changes:editorcommon.IChange[]):void {\n\tchanges.sort((left, right)=>{\n\t\tif (left.originalStartLineNumber < right.originalStartLineNumber) {\n\t\t\treturn -1;\n\t\t} else if (left.originalStartLineNumber > right.originalStartLineNumber) {\n\t\t\treturn 1;\n\t\t} else if (left.modifiedStartLineNumber < right.modifiedStartLineNumber) {\n\t\t\treturn -1;\n\t\t}\n\t\treturn 1;\n\t});\n}\n\nfunction sortSelections(selections:editorcommon.IEditorSelection[]):void {\n\tselections.sort((left, right)=>{\n\t\tif (left.getStartPosition().lineNumber < right.getStartPosition().lineNumber) {\n\t\t\treturn -1;\n\t\t}\n\t\treturn 1;\n\t});\n}\n\nfunction isInsertion(change:editorcommon.IChange):boolean {\n\treturn change.originalEndLineNumber <= 0;\n}\n\nfunction isDeletion(change:editorcommon.IChange):boolean {\n\treturn change.modifiedEndLineNumber <= 0;\n}\n\n/**\n * Returns a new IModel that has all the selected changes from modified IModel applied to the original IModel.\n */\nexport function stageRanges(diff:editorbrowser.IDiffEditor): string {\n\tvar selections = diff.getSelections();\n\tvar changes = getSelectedChanges(diff.getLineChanges(), selections);\n\treturn applyChangesToModel(diff.getModel().original, diff.getModel().modified, changes);\n}\n\n/**\n * Returns an intersection between a change and a selection.\n * Returns null if intersection does not exist.\n */\nexport function intersectChangeAndSelection(change:editorcommon.IChange, selection:editorcommon.IEditorSelection):editorcommon.IChange {\n\tvar result:editorcommon.IChange = {\n\t\tmodifiedStartLineNumber : Math.max(change.modifiedStartLineNumber, selection.startLineNumber),\n\t\tmodifiedEndLineNumber : Math.min(change.modifiedEndLineNumber, selection.endLineNumber),\n\t\toriginalStartLineNumber : change.originalStartLineNumber,\n\t\toriginalEndLineNumber : change.originalEndLineNumber\n\t};\n\t// Deletions have modifiedEndLineNumber = 0. In that case we can not use the simple check if there is an intersection.\n\tvar isDeletionSelected = isDeletion(result) &&\n\t\t(change.modifiedStartLineNumber >= selection.startLineNumber) && (change.modifiedStartLineNumber <= selection.endLineNumber);\n\n\tif ((result.modifiedStartLineNumber <= result.modifiedEndLineNumber) || isDeletionSelected) {\n\t\treturn result;\n\t}\n\treturn null;\n}\n\n/**\n * Returns all selected changes (there can be multiple selections due to multiple cursors).\n * If a change is partially selected, the selected part of the change will be returned.\n */\nexport function getSelectedChanges(changes:editorcommon.IChange[], selections:editorcommon.IEditorSelection[]):editorcommon.IChange[] {\n\tsortChanges(changes);\n\tsortSelections(selections);\n\tvar result: editorcommon.IChange[] = [];\n\tvar currentSelection = 0;\n\tvar lastLineAdded = -1;\n\n\tfor (var i = 0; i < changes.length; ++i) {\n\t\t// We have to check the previous selection. Since it can contain two changes.\n\t\tcurrentSelection = Math.max(0, currentSelection - 1);\n\t\t// Find all selections that are not after the current change.\n\t\twhile (currentSelection < selections.length &&\n\t\t\t(selections[currentSelection].startLineNumber <= changes[i].modifiedEndLineNumber || isDeletion(changes[i]))) {\n\t\t\tvar intersectedChange = intersectChangeAndSelection(changes[i], selections[currentSelection]);\n\t\t\tif (intersectedChange !== null) {\n\t\t\t\t// Each change needs to be disjoint so we check if we already added this line.\n\t\t\t\tif (lastLineAdded !== intersectedChange.modifiedStartLineNumber) {\n\t\t\t\t\tresult.push(intersectedChange);\n\t\t\t\t\tlastLineAdded = intersectedChange.modifiedEndLineNumber;\n\t\t\t\t} else {\n\t\t\t\t\t// Update change such that we do not add same line twice.\n\t\t\t\t\tintersectedChange.modifiedStartLineNumber++;\n\t\t\t\t\tif (intersectedChange.modifiedStartLineNumber <= intersectedChange.modifiedEndLineNumber) {\n\t\t\t\t\t\tresult.push(intersectedChange);\n\t\t\t\t\t\tlastLineAdded = intersectedChange.modifiedEndLineNumber;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tcurrentSelection++;\n\t\t}\n\t}\n\treturn result;\n}\n\nexport function appendValueFromRange(base:string, model:editorcommon.IModel, range:editorcommon.IEditorRange):string {\n\tvar result = base;\n\tif (result !== '') {\n\t\tresult += model.getEOL();\n\t}\n\treturn result + model.getValueInRange(range);\n}\n\n/**\n * Applies a list of changes to the original model and returns the new IModel.\n * First sorts changes by line number.\n */\nexport function applyChangesToModel(original:editorcommon.IModel, modified:editorcommon.IModel, changes:editorcommon.IChange[]): string {\n\tsortChanges(changes);\n\tvar result = '';\n\tvar positionInOriginal = 1;\n\n\tfor (var i = 0; i < changes.length; ++i) {\n\t\t// We have to update orginalStartLineNumber for insertions, their start line is always one line behind.\n\t\tvar originalStartLineUpdated = isInsertion(changes[i]) ? changes[i].originalStartLineNumber + 1 : changes[i].originalStartLineNumber;\n\t\tif (positionInOriginal < originalStartLineUpdated) {\n\t\t\tresult = appendValueFromRange(result, original,\n\t\t\t\tnew Range(positionInOriginal, 1, originalStartLineUpdated - 1, original.getLineMaxColumn(originalStartLineUpdated - 1)));\n\t\t\tpositionInOriginal = originalStartLineUpdated;\n\t\t}\n\n\t\tif (!isDeletion(changes[i])) {\n\t\t\tresult = appendValueFromRange(result, modified,\n\t\t\t\tnew Range(changes[i].modifiedStartLineNumber, 1, changes[i].modifiedEndLineNumber, modified.getLineMaxColumn(changes[i].modifiedEndLineNumber)));\n\t\t}\n\t\t// Update position in the original file where we continue to concatanate.\n\t\t// Only update position if it was not an insertion.\n\t\tif (!isInsertion(changes[i])) {\n\t\t\tpositionInOriginal = changes[i].originalEndLineNumber + 1;\n\t\t}\n\t}\n\n\t// Append the last chunk after all the changes.\n\tif (positionInOriginal <= original.getLineCount()) {\n\t\tresult = appendValueFromRange(result, original,\n\t\t\tnew Range(positionInOriginal, 1, original.getLineCount(), original.getLineMaxColumn(original.getLineCount())));\n\t}\n\n\treturn result;\n}"]}