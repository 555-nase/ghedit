{"version":3,"sources":["vs/workbench/parts/output/browser/outputActions.ts"],"names":[],"mappings":"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","file":"vs/workbench/parts/output/browser/outputActions.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport nls = require('vs/nls');\nimport {Registry} from 'vs/platform/platform';\nimport {IAction, Action} from 'vs/base/common/actions';\nimport {EditorAction} from 'vs/editor/common/editorAction';\nimport {Behaviour} from 'vs/editor/common/editorActionEnablement';\nimport {ICommonCodeEditor, IEditorActionDescriptorData} from 'vs/editor/common/editorCommon';\nimport {IOutputChannelRegistry, Extensions, IOutputService, OUTPUT_MODE_ID, OUTPUT_PANEL_ID} from 'vs/workbench/parts/output/common/output';\nimport {SelectActionItem} from 'vs/base/browser/ui/actionbar/actionbar';\nimport {IPartService} from 'vs/workbench/services/part/common/partService';\nimport {IPanelService} from 'vs/workbench/services/panel/common/panelService';\n\nexport class ToggleOutputAction extends Action {\n\n\tpublic static ID = 'workbench.action.output.toggleOutput';\n\tpublic static LABEL = nls.localize('toggleOutput', \"Toggle Output\");\n\n\tconstructor(\n\t\tid: string, label: string,\n\t\t@IPartService private partService: IPartService,\n\t\t@IPanelService private panelService: IPanelService,\n\t\t@IOutputService private outputService: IOutputService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\tpublic run(event?: any): TPromise<any> {\n\t\tconst panel = this.panelService.getActivePanel();\n\t\tif (panel && panel.getId() === OUTPUT_PANEL_ID) {\n\t\t\tthis.partService.setPanelHidden(true);\n\n\t\t\treturn TPromise.as(null);\n\t\t}\n\n\t\treturn this.outputService.getActiveChannel().show();\n\t}\n}\n\nexport class ClearOutputAction extends Action {\n\n\tconstructor(\n\t\t@IOutputService private outputService: IOutputService,\n\t\t@IPanelService private panelService: IPanelService\n\t) {\n\t\tsuper('workbench.output.action.clearOutput', nls.localize('clearOutput', \"Clear Output\"), 'output-action clear-output');\n\t}\n\n\tpublic run(): TPromise<any> {\n\t\tthis.outputService.getActiveChannel().clear();\n\t\tthis.panelService.getActivePanel().focus();\n\n\t\treturn TPromise.as(true);\n\t}\n}\n\nexport class ClearOutputEditorAction extends EditorAction {\n\n\tpublic static ID = 'editor.action.clearoutput';\n\n\tconstructor(\n\t\tdescriptor: IEditorActionDescriptorData,\n\t\teditor: ICommonCodeEditor,\n\t\t@IOutputService private outputService: IOutputService\n\t) {\n\t\tsuper(descriptor, editor, Behaviour.WidgetFocus | Behaviour.ShowInContextMenu);\n\t}\n\n\tpublic getGroupId(): string {\n\t\treturn 'clear';\n\t}\n\n\tpublic isSupported(): boolean {\n\t\tlet model = this.editor.getModel();\n\t\tlet mode = model && model.getMode();\n\n\t\treturn mode && mode.getId() === OUTPUT_MODE_ID && super.isSupported();\n\t}\n\n\tpublic run(): TPromise<boolean> {\n\t\tthis.outputService.getActiveChannel().clear();\n\t\treturn TPromise.as(false);\n\t}\n}\n\nexport class SwitchOutputAction extends Action {\n\n\tpublic static ID = 'workbench.output.action.switchBetweenOutputs';\n\n\tconstructor( @IOutputService private outputService: IOutputService) {\n\t\tsuper(SwitchOutputAction.ID, nls.localize('switchToOutput.label', \"Switch to Output\"));\n\n\t\tthis.class = 'output-action switch-to-output';\n\t}\n\n\tpublic run(channelId?: string): TPromise<any> {\n\t\treturn this.outputService.getChannel(channelId).show();\n\t}\n}\n\nexport class SwitchOutputActionItem extends SelectActionItem {\n\n\tconstructor(\n\t\taction: IAction,\n\t\t@IOutputService private outputService: IOutputService\n\t) {\n\t\tsuper(null, action, SwitchOutputActionItem.getChannelLabels(outputService), Math.max(0, SwitchOutputActionItem.getChannelLabels(outputService).indexOf(outputService.getActiveChannel().label)));\n\t\tthis.toDispose.push(this.outputService.onOutputChannel(this.onOutputChannel, this));\n\t\tthis.toDispose.push(this.outputService.onActiveOutputChannel(this.onOutputChannel, this));\n\t}\n\n\tprotected getActionContext(option: string): string {\n\t\tconst channel = Registry.as<IOutputChannelRegistry>(Extensions.OutputChannels).getChannels().filter(channelData => channelData.label === option).pop();\n\n\t\treturn channel ? channel.id : option;\n\t}\n\n\tprivate onOutputChannel(): void {\n\t\tlet channels = SwitchOutputActionItem.getChannelLabels(this.outputService);\n\t\tlet selected = Math.max(0, channels.indexOf(this.outputService.getActiveChannel().label));\n\n\t\tthis.setOptions(channels, selected);\n\t}\n\n\tprivate static getChannelLabels(outputService: IOutputService): string[] {\n\t\tconst contributedChannels = Registry.as<IOutputChannelRegistry>(Extensions.OutputChannels).getChannels().map(channelData => channelData.label);\n\t\treturn contributedChannels.sort(); // sort by name\n\t}\n}\n"]}