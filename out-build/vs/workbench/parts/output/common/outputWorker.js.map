{"version":3,"file":"vs/workbench/parts/output/common/outputWorker.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/workbench/parts/output/common/outputWorker.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport {IMarkerService} from 'vs/platform/markers/common/markers';\nimport {IResourceService} from 'vs/editor/common/services/resourceService';\nimport URI from 'vs/base/common/uri';\nimport strings = require('vs/base/common/strings');\nimport arrays = require('vs/base/common/arrays');\nimport paths = require('vs/base/common/paths');\nimport {ILink} from 'vs/editor/common/modes';\nimport {Range} from 'vs/editor/common/core/range';\nimport {IWorkspaceContextService, IWorkspace} from 'vs/platform/workspace/common/workspace';\n\n/**\n * A base class of text editor worker that helps with detecting links in the text that point to files in the workspace.\n */\nexport class OutputWorker {\n\tprivate _contextService: IWorkspaceContextService;\n\tprivate patterns: RegExp[];\n\tprivate resourceService:IResourceService;\n\tprivate markerService: IMarkerService;\n\tprivate _modeId: string;\n\n\tconstructor(\n\t\tmodeId: string,\n\t\t@IResourceService resourceService: IResourceService,\n\t\t@IMarkerService markerService: IMarkerService,\n\t\t@IWorkspaceContextService contextService:IWorkspaceContextService\n\t) {\n\t\tthis._modeId = modeId;\n\t\tthis.resourceService = resourceService;\n\t\tthis.markerService = markerService;\n\t\tthis._contextService = contextService;\n\n\t\tlet workspace = this._contextService.getWorkspace();\n\t\tthis.patterns = workspace ? OutputWorker.createPatterns(workspace) : [];\n\t}\n\n\tpublic get contextService(): IWorkspaceContextService {\n\t\treturn this._contextService;\n\t}\n\n\tpublic computeLinks(resource: URI): TPromise<ILink[]> {\n\t\tlet links: ILink[] = [];\n\t\tif (!this.patterns.length) {\n\t\t\treturn TPromise.as(links);\n\t\t}\n\n\t\tlet model = this.resourceService.get(resource);\n\n\t\tfor (let i = 1, lineCount = model.getLineCount(); i <= lineCount; i++) {\n\t\t\tlinks.push(...OutputWorker.detectLinks(model.getLineContent(i), i, this.patterns, this._contextService));\n\t\t}\n\n\t\treturn TPromise.as(links);\n\t}\n\n\tpublic static createPatterns(workspace: IWorkspace): RegExp[] {\n\t\tlet patterns: RegExp[] = [];\n\n\t\tlet workspaceRootVariants = arrays.distinct([\n\t\t\tpaths.normalize(workspace.resource.fsPath, true),\n\t\t\tpaths.normalize(workspace.resource.fsPath, false)\n\t\t]);\n\n\t\tworkspaceRootVariants.forEach((workspaceRoot) => {\n\n\t\t\t// Example: C:\\Users\\someone\\AppData\\Local\\Temp\\_monacodata_9888\\workspaces\\express\\server.js on line 8, column 13\n\t\t\tpatterns.push(new RegExp(strings.escapeRegExpCharacters(workspaceRoot) + '(\\\\S*) on line ((\\\\d+)(, column (\\\\d+))?)', 'gi'));\n\n\t\t\t// Example: C:\\Users\\someone\\AppData\\Local\\Temp\\_monacodata_9888\\workspaces\\express\\server.js:line 8, column 13\n\t\t\tpatterns.push(new RegExp(strings.escapeRegExpCharacters(workspaceRoot) + '(\\\\S*):line ((\\\\d+)(, column (\\\\d+))?)', 'gi'));\n\n\t\t\t// Example: C:\\Users\\someone\\AppData\\Local\\Temp\\_monacodata_9888\\workspaces\\mankala\\Features.ts(45): error\n\t\t\t// Example: C:\\Users\\someone\\AppData\\Local\\Temp\\_monacodata_9888\\workspaces\\mankala\\Features.ts (45): error\n\t\t\t// Example: C:\\Users\\someone\\AppData\\Local\\Temp\\_monacodata_9888\\workspaces\\mankala\\Features.ts(45,18): error\n\t\t\t// Example: C:\\Users\\someone\\AppData\\Local\\Temp\\_monacodata_9888\\workspaces\\mankala\\Features.ts (45,18): error\n\t\t\tpatterns.push(new RegExp(strings.escapeRegExpCharacters(workspaceRoot) + '([^\\\\s\\\\(\\\\)]*)(\\\\s?\\\\((\\\\d+)(,(\\\\d+))?)\\\\)', 'gi'));\n\n\t\t\t// Example: at C:\\Users\\someone\\AppData\\Local\\Temp\\_monacodata_9888\\workspaces\\mankala\\Game.ts\n\t\t\t// Example: at C:\\Users\\someone\\AppData\\Local\\Temp\\_monacodata_9888\\workspaces\\mankala\\Game.ts:336\n\t\t\t// Example: at C:\\Users\\someone\\AppData\\Local\\Temp\\_monacodata_9888\\workspaces\\mankala\\Game.ts:336:9\n\t\t\tpatterns.push(new RegExp(strings.escapeRegExpCharacters(workspaceRoot) + '([^:\\\\s\\\\(\\\\)<>\\'\\\"\\\\[\\\\]]*)(:(\\\\d+))?(:(\\\\d+))?', 'gi'));\n\t\t});\n\n\t\treturn patterns;\n\t}\n\n\t/**\n\t * Detect links. Made public static to allow for tests.\n\t */\n\tpublic static detectLinks(line: string, lineIndex: number, patterns: RegExp[], contextService: IWorkspaceContextService): ILink[] {\n\t\tlet links: ILink[] = [];\n\n\t\tpatterns.forEach((pattern) => {\n\t\t\tpattern.lastIndex = 0; // the holy grail of software development\n\n\t\t\tlet match: RegExpExecArray;\n\t\t\tlet offset = 0;\n\t\t\twhile ((match = pattern.exec(line)) !== null) {\n\n\t\t\t\t// Convert the relative path information to a resource that we can use in links\n\t\t\t\tlet workspaceRelativePath = strings.rtrim(match[1], '.').replace(/\\\\/g, '/'); // remove trailing \".\" that likely indicate end of sentence\n\t\t\t\tlet resource:string;\n\t\t\t\ttry {\n\t\t\t\t\tresource = contextService.toResource(workspaceRelativePath).toString();\n\t\t\t\t} catch (error) {\n\t\t\t\t\tcontinue; // we might find an invalid URI and then we dont want to loose all other links\n\t\t\t\t}\n\n\t\t\t\t// Append line/col information to URI if matching\n\t\t\t\tif (match[3]) {\n\t\t\t\t\tlet lineNumber = match[3];\n\n\t\t\t\t\tif (match[5]) {\n\t\t\t\t\t\tlet columnNumber = match[5];\n\t\t\t\t\t\tresource = strings.format('{0}#{1},{2}', resource, lineNumber, columnNumber);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresource = strings.format('{0}#{1}', resource, lineNumber);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tlet fullMatch = strings.rtrim(match[0], '.'); // remove trailing \".\" that likely indicate end of sentence\n\n\t\t\t\tlet index = line.indexOf(fullMatch, offset);\n\t\t\t\toffset += index + fullMatch.length;\n\n\t\t\t\tvar linkRange = {\n\t\t\t\t\tstartColumn: index + 1,\n\t\t\t\t\tstartLineNumber: lineIndex,\n\t\t\t\t\tendColumn: index + 1 + fullMatch.length,\n\t\t\t\t\tendLineNumber: lineIndex\n\t\t\t\t};\n\n\t\t\t\tif (links.some((link) => Range.areIntersectingOrTouching(link.range, linkRange))) {\n\t\t\t\t\treturn; // Do not detect duplicate links\n\t\t\t\t}\n\n\t\t\t\tlinks.push({\n\t\t\t\t\trange: linkRange,\n\t\t\t\t\turl: resource\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\treturn links;\n\t}\n}"]}