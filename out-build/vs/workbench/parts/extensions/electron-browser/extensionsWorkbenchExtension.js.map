{"version":3,"sources":["vs/workbench/parts/extensions/electron-browser/extensionsWorkbenchExtension.ts"],"names":[],"mappings":"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","file":"vs/workbench/parts/extensions/electron-browser/extensionsWorkbenchExtension.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport nls = require('vs/nls');\nimport errors = require('vs/base/common/errors');\nimport platform = require('vs/platform/platform');\nimport { Promise } from 'vs/base/common/winjs.base';\nimport { IWorkbenchContribution } from 'vs/workbench/common/contributions';\nimport { IExtensionsService, IGalleryService, IExtensionTipsService, ExtensionsLabel } from 'vs/workbench/parts/extensions/common/extensions';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { IMessageService } from 'vs/platform/message/common/message';\nimport Severity from 'vs/base/common/severity';\nimport { IWorkspaceContextService } from 'vs/workbench/services/workspace/common/contextService';\nimport { ReloadWindowAction } from 'vs/workbench/electron-browser/actions';\nimport wbaregistry = require('vs/workbench/common/actionRegistry');\nimport { SyncActionDescriptor } from 'vs/platform/actions/common/actions';\nimport { ListExtensionsAction, InstallExtensionAction, ListOutdatedExtensionsAction, ListSuggestedExtensionsAction } from './extensionsActions';\nimport { ExtensionTipsService } from './extensionTipsService';\nimport { IQuickOpenRegistry, Extensions, QuickOpenHandlerDescriptor } from 'vs/workbench/browser/quickopen';\nimport {ipcRenderer as ipc} from 'electron';\n\ninterface IInstallExtensionsRequest {\n\textensionsToInstall: string[];\n}\n\nexport class ExtensionsWorkbenchExtension implements IWorkbenchContribution {\n\n\tconstructor(\n\t\t@IInstantiationService private instantiationService: IInstantiationService,\n\t\t@IExtensionsService private extensionsService: IExtensionsService,\n\t\t@IMessageService private messageService: IMessageService,\n\t\t@IWorkspaceContextService contextService: IWorkspaceContextService,\n\t\t@IGalleryService galleryService: IGalleryService\n\t) {\n\t\tthis.registerListeners();\n\n\t\tconst options = contextService.getOptions();\n\t\t// Extensions to install\n\t\tif (options.extensionsToInstall && options.extensionsToInstall.length) {\n\t\t\tthis.install(options.extensionsToInstall).done(null, errors.onUnexpectedError);\n\t\t}\n\n\t\t// add service\n\t\tinstantiationService.addSingleton(IExtensionTipsService, this.instantiationService.createInstance(ExtensionTipsService));\n\n\t\tconst actionRegistry = (<wbaregistry.IWorkbenchActionRegistry> platform.Registry.as(wbaregistry.Extensions.WorkbenchActions));\n\t\tactionRegistry.registerWorkbenchAction(new SyncActionDescriptor(ListExtensionsAction, ListExtensionsAction.ID, ListExtensionsAction.LABEL), ExtensionsLabel);\n\n\t\t(<IQuickOpenRegistry>platform.Registry.as(Extensions.Quickopen)).registerQuickOpenHandler(\n\t\t\tnew QuickOpenHandlerDescriptor(\n\t\t\t\t'vs/workbench/parts/extensions/electron-browser/extensionsQuickOpen',\n\t\t\t\t'LocalExtensionsHandler',\n\t\t\t\t'ext ',\n\t\t\t\tnls.localize('localExtensionsCommands', \"Show Local Extensions\")\n\t\t\t)\n\t\t);\n\n\t\tif (galleryService.isEnabled()) {\n\n\t\t\tactionRegistry.registerWorkbenchAction(new SyncActionDescriptor(InstallExtensionAction, InstallExtensionAction.ID, InstallExtensionAction.LABEL), ExtensionsLabel);\n\n\t\t\t(<IQuickOpenRegistry>platform.Registry.as(Extensions.Quickopen)).registerQuickOpenHandler(\n\t\t\t\tnew QuickOpenHandlerDescriptor(\n\t\t\t\t\t'vs/workbench/parts/extensions/electron-browser/extensionsQuickOpen',\n\t\t\t\t\t'GalleryExtensionsHandler',\n\t\t\t\t\t'ext install ',\n\t\t\t\t\tnls.localize('galleryExtensionsCommands', \"Install Gallery Extensions\"),\n\t\t\t\t\ttrue\n\t\t\t\t)\n\t\t\t);\n\n\t\t\tactionRegistry.registerWorkbenchAction(new SyncActionDescriptor(ListOutdatedExtensionsAction, ListOutdatedExtensionsAction.ID, ListOutdatedExtensionsAction.LABEL), ExtensionsLabel);\n\n\t\t\t(<IQuickOpenRegistry>platform.Registry.as(Extensions.Quickopen)).registerQuickOpenHandler(\n\t\t\t\tnew QuickOpenHandlerDescriptor(\n\t\t\t\t\t'vs/workbench/parts/extensions/electron-browser/extensionsQuickOpen',\n\t\t\t\t\t'OutdatedExtensionsHandler',\n\t\t\t\t\t'ext update ',\n\t\t\t\t\tnls.localize('outdatedExtensionsCommands', \"Update Outdated Extensions\")\n\t\t\t\t)\n\t\t\t);\n\n\t\t\t// add extension tips services\n\t\t\tactionRegistry.registerWorkbenchAction(new SyncActionDescriptor(ListSuggestedExtensionsAction, ListSuggestedExtensionsAction.ID, ListSuggestedExtensionsAction.LABEL), ExtensionsLabel);\n\n\t\t\t(<IQuickOpenRegistry>platform.Registry.as(Extensions.Quickopen)).registerQuickOpenHandler(\n\t\t\t\tnew QuickOpenHandlerDescriptor(\n\t\t\t\t\t'vs/workbench/parts/extensions/electron-browser/extensionsQuickOpen',\n\t\t\t\t\t'SuggestedExtensionHandler',\n\t\t\t\t\t'ext recommend ',\n\t\t\t\t\tnls.localize('suggestedExtensionsCommands', \"Show Extension Recommendations\")\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate registerListeners(): void {\n\t\tipc.on('vscode:installExtensions', (event, request: IInstallExtensionsRequest) => {\n\t\t\tif (request.extensionsToInstall) {\n\t\t\t\tthis.install(request.extensionsToInstall).done(null, errors.onUnexpectedError);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate install(extensions: string[]): Promise {\n\t\treturn Promise.join(extensions.map(extPath =>\tthis.extensionsService.install(extPath)))\n\t\t\t.then(extensions => {\n\t\t\t\tthis.messageService.show(\n\t\t\t\t\tSeverity.Info,\n\t\t\t\t\t{\n\t\t\t\t\t\tmessage: extensions.length > 1 ? nls.localize('success', \"Extensions were successfully installed. Restart to enable them.\")\n\t\t\t\t\t\t\t: nls.localize('successSingle', \"{0} was successfully installed. Restart to enable it.\", extensions[0].displayName),\n\t\t\t\t\t\tactions: [this.instantiationService.createInstance(ReloadWindowAction, ReloadWindowAction.ID, nls.localize('reloadNow', \"Restart Now\"))]\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t});\n\t}\n\n\tpublic getId(): string {\n\t\treturn 'vs.extensions.workbenchextension';\n\t}\n}\n"]}