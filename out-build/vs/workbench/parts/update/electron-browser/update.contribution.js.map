{"version":3,"sources":["vs/workbench/parts/update/electron-browser/update.contribution.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;IAEhG,YAAY,CAAC;IAgBb,IAAM,WAAW,GAAG,IAAI,gBAAM,CAAC,OAAO,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAO,EAAE,IAAO,CAAC,EAAE,EAAE,EAAE,IAAI,EAAE,cAAM,OAAA,IAAI,EAAJ,CAAI,CAAC,CAAC;IAE9F,IAAM,iBAAiB,GAAG,UAAC,UAAkB,IAAK,OAAA,IAAI,gBAAM,CAC3D,oBAAoB,EACpB,GAAG,CAAC,QAAQ,CAAC,CAAS,EAAE,IAAc,CAAC,EACvC,IAAI,EACJ,IAAI,EACJ,cAAQ,gBAAK,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC,CAAC,MAAM,CAAC,qBAAQ,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CACnE,EANiD,CAMjD,CAAC;IAEF;QAKC,4BACkB,cAA+B,EACtB,cAAwC,EACjD,cAA+B;YAEhD,IAAM,GAAG,GAAG,cAAc,CAAC,gBAAgB,EAAE,CAAC,GAAG,CAAC;YAClD,IAAM,WAAW,GAAG,cAAc,CAAC,GAAG,CAAC,kBAAkB,CAAC,GAAG,EAAE,sBAAY,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;YAExF,uBAAuB;YACvB,EAAE,CAAC,CAAC,GAAG,CAAC,eAAe,IAAI,WAAW,IAAI,GAAG,CAAC,OAAO,KAAK,WAAW,CAAC,CAAC,CAAC;gBACvE,UAAU,CAAC;oBACV,cAAc,CAAC,IAAI,CAAC,kBAAQ,CAAC,IAAI,EAAE;wBAClC,OAAO,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAc,EAAE,IAAgE,EAAE,GAAG,CAAC,OAAO,EAAE,GAAG,CAAC,OAAO,CAAC;wBACjI,OAAO,EAAE;4BACR,WAAW;4BACX,+BAAsB,CAAC,GAAG,CAAC,eAAe,EAAE,IAAI,CAAC;yBACjD;qBACD,CAAC,CAAC;gBAEJ,CAAC,EAAE,CAAC,CAAC,CAAC;YACP,CAAC;YAED,kCAAkC;YAClC,EAAE,CAAC,CAAC,GAAG,CAAC,UAAU,IAAI,WAAW,IAAI,MAAM,CAAC,SAAS,CAAC,WAAW,EAAE,QAAQ,CAAC,IAAI,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC;gBAC1H,UAAU,CAAC;oBACV,cAAc,CAAC,IAAI,CAAC,kBAAQ,CAAC,IAAI,EAAE;wBAClC,OAAO,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAgB,EAAE,IAAyD,EAAE,GAAG,CAAC,OAAO,EAAE,GAAG,CAAC,OAAO,CAAC;wBAC5H,OAAO,EAAE;4BACR,WAAW;4BACX,iBAAiB,CAAC,GAAG,CAAC,UAAU,CAAC;yBACjC;qBACD,CAAC,CAAC;gBAEJ,CAAC,EAAE,CAAC,CAAC,CAAC;YACP,CAAC;YAED,cAAc,CAAC,KAAK,CAAC,kBAAkB,CAAC,GAAG,EAAE,GAAG,CAAC,OAAO,EAAE,sBAAY,CAAC,MAAM,CAAC,CAAC;QAChF,CAAC;QAvCD,kCAAK,GAAL,cAAU,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC;QADhB,sBAAG,GAAG,0BAA0B,CAAC;QAI/C;uBAAC,yBAAe;uBACf,oCAAwB;uBACxB,yBAAe;8BAFA;QAqClB,yBAAC;IAAD,CA3CA,AA2CC,IAAA;IA3CY,0BAAkB,qBA2C9B,CAAA;IAED,mBAAQ,CAAC,EAAE,CAAkC,0BAAmB,CAAC,SAAS,CAAC;SACzE,6BAA6B,CAAC,kBAAkB,CAAC,CAAC","file":"vs/workbench/parts/update/electron-browser/update.contribution.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport * as nls from 'vs/nls';\nimport { Registry } from 'vs/platform/platform';\nimport { TPromise } from 'vs/base/common/winjs.base';\nimport { IWorkbenchContribution } from 'vs/workbench/common/contributions';\nimport {Â IWorkbenchContributionsRegistry, Extensions as WorkbenchExtensions } from 'vs/workbench/common/contributions';\nimport { IStorageService, StorageScope } from 'vs/platform/storage/common/storage';\nimport { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';\nimport { IMessageService } from 'vs/platform/message/common/message';\nimport Severity from 'vs/base/common/severity';\nimport { ShowReleaseNotesAction } from 'vs/workbench/electron-browser/update';\nimport { Action } from 'vs/base/common/actions';\nimport { shell } from 'electron';\nimport * as semver from 'semver';\n\nconst CloseAction = new Action('close', nls.localize('close', \"Close\"), '', true, () => null);\n\nconst ShowLicenseAction = (licenseUrl: string) => new Action(\n\t'update.showLicense',\n\tnls.localize('license', \"Read License\"),\n\tnull,\n\ttrue,\n\t() => { shell.openExternal(licenseUrl); return TPromise.as(null); }\n);\n\nexport class UpdateContribution implements IWorkbenchContribution {\n\n\tprivate static KEY = 'releaseNotes/lastVersion';\n\tgetId() { return 'vs.update'; }\n\n\tconstructor(\n\t\t@IStorageService storageService: IStorageService,\n\t\t@IWorkspaceContextService contextService: IWorkspaceContextService,\n\t\t@IMessageService messageService: IMessageService\n\t) {\n\t\tconst env = contextService.getConfiguration().env;\n\t\tconst lastVersion = storageService.get(UpdateContribution.KEY, StorageScope.GLOBAL, '');\n\n\t\t// was there an update?\n\t\tif (env.releaseNotesUrl && lastVersion && env.version !== lastVersion) {\n\t\t\tsetTimeout(() => {\n\t\t\t\tmessageService.show(Severity.Info, {\n\t\t\t\t\tmessage: nls.localize('releaseNotes', \"Welcome to {0} v{1}! Would you like to read the Release Notes?\", env.appName, env.version),\n\t\t\t\t\tactions: [\n\t\t\t\t\t\tCloseAction,\n\t\t\t\t\t\tShowReleaseNotesAction(env.releaseNotesUrl, true)\n\t\t\t\t\t]\n\t\t\t\t});\n\n\t\t\t}, 0);\n\t\t}\n\n\t\t// should we show the new license?\n\t\tif (env.licenseUrl && lastVersion && semver.satisfies(lastVersion, '<1.0.0') && semver.satisfies(env.version, '>=1.0.0')) {\n\t\t\tsetTimeout(() => {\n\t\t\t\tmessageService.show(Severity.Info, {\n\t\t\t\t\tmessage: nls.localize('licenseChanged', \"Our license terms have changed, please go through them.\", env.appName, env.version),\n\t\t\t\t\tactions: [\n\t\t\t\t\t\tCloseAction,\n\t\t\t\t\t\tShowLicenseAction(env.licenseUrl)\n\t\t\t\t\t]\n\t\t\t\t});\n\n\t\t\t}, 0);\n\t\t}\n\n\t\tstorageService.store(UpdateContribution.KEY, env.version, StorageScope.GLOBAL);\n\t}\n}\n\nRegistry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench)\n\t.registerWorkbenchContribution(UpdateContribution);"]}