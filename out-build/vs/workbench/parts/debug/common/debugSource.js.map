{"version":3,"file":"vs/workbench/parts/debug/common/debugSource.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/workbench/parts/debug/common/debugSource.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;IAMhG;QAOC,gBAAmB,GAAyB,EAAE,SAAgB;YAAhB,yBAAgB,GAAhB,gBAAgB;YAA3C,QAAG,GAAH,GAAG,CAAsB;YAC3C,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC,IAAI,GAAG,aAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,aAAG,CAAC,KAAK,CAAC,MAAM,CAAC,mBAAmB,GAAG,GAAG,CAAC,IAAI,CAAC,CAAC;YAC5F,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC5B,CAAC;QAED,sBAAW,wBAAI;iBAAf;gBACC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC;YACtB,CAAC;;;WAAA;QAED,sBAAW,0BAAM;iBAAjB;gBACC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC;YACxB,CAAC;;;WAAA;QAED,sBAAW,6BAAS;iBAApB;gBACC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,eAAe,CAAC;YACjC,CAAC;;;WAAA;QAED,sBAAW,4BAAQ;iBAAnB;gBACC,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACpC,CAAC;;;WAAA;QAEa,kBAAW,GAAzB,UAA0B,GAAQ,EAAE,KAAa;YAChD,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBACX,yHAAyH;gBACzH,IAAM,OAAO,GAAG,KAAK,CAAC,UAAU,EAAE,CAAC;gBACnC,GAAG,CAAC,CAAC,IAAI,QAAQ,IAAI,OAAO,CAAC,CAAC,CAAC;oBAC9B,EAAE,CAAC,CAAC,OAAO,CAAC,cAAc,CAAC,QAAQ,CAAC,IAAI,OAAO,CAAC,QAAQ,CAAC,CAAC,kBAAkB,EAAE,CAAC,CAAC,CAAC;wBAChF,IAAM,KAAK,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC,kBAAkB,EAAE,CAAC,MAAM,CAAC,UAAA,EAAE,IAAI,OAAA,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,EAAE,KAAK,GAAG,CAAC,QAAQ,EAAE,EAA3C,CAA2C,CAAC,CAAC,GAAG,EAAE,CAAC;wBACrH,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;4BACX,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC;wBACzB,CAAC;oBACF,CAAC;gBACF,CAAC;YACF,CAAC;YAED,sHAAsH;YACtH,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,EAAE,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;gBAC5D,EAAE,IAAI,EAAE,KAAK,CAAC,SAAS,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,EAAE,CAAC;QAC9C,CAAC;QAEc,cAAO,GAAtB,UAAuB,GAAQ;YAC9B,IAAM,MAAM,GAAG,GAAG,CAAC,QAAQ,EAAE,CAAC;YAC9B,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QACnD,CAAC;QAEc,iBAAU,GAAzB,UAA0B,GAAQ;YACjC,MAAM,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC;QACjE,CAAC;QAjDc,0BAAmB,GAAG,mBAAmB,CAAC;QAkD1D,aAAC;IAAD,CAAC,AAvDD,IAuDC;IAvDY,cAAM,SAuDlB,CAAA","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport uri from 'vs/base/common/uri';\nimport paths = require('vs/base/common/paths');\nimport { IModel } from 'vs/workbench/parts/debug/common/debug';\n\nexport class Source {\n\n\tpublic uri: uri;\n\tpublic available: boolean;\n\n\tprivate static INTERNAL_URI_PREFIX = 'debug://internal/';\n\n\tconstructor(public raw: DebugProtocol.Source, available = true) {\n\t\tthis.uri = raw.path ? uri.file(raw.path) : uri.parse(Source.INTERNAL_URI_PREFIX + raw.name);\n\t\tthis.available = available;\n\t}\n\n\tpublic get name() {\n\t\treturn this.raw.name;\n\t}\n\n\tpublic get origin() {\n\t\treturn this.raw.origin;\n\t}\n\n\tpublic get reference() {\n\t\treturn this.raw.sourceReference;\n\t}\n\n\tpublic get inMemory() {\n\t\treturn Source.isInMemory(this.uri);\n\t}\n\n\tpublic static toRawSource(uri: uri, model: IModel): DebugProtocol.Source {\n\t\tif (model) {\n\t\t\t// first try to find the raw source amongst the stack frames - since that represenation has more data (source reference),\n\t\t\tconst threads = model.getThreads();\n\t\t\tfor (let threadId in threads) {\n\t\t\t\tif (threads.hasOwnProperty(threadId) && threads[threadId].getCachedCallStack()) {\n\t\t\t\t\tconst found = threads[threadId].getCachedCallStack().filter(sf => sf.source.uri.toString() === uri.toString()).pop();\n\t\t\t\t\tif (found) {\n\t\t\t\t\t\treturn found.source.raw;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// did not find the raw source amongst the stack frames, construct the raw stack frame from the limited data you have.\n\t\treturn Source.isInMemory(uri) ? { name: Source.getName(uri) } :\n\t\t\t{ path: paths.normalize(uri.fsPath, true) };\n\t}\n\n\tprivate static getName(uri: uri): string {\n\t\tconst uriStr = uri.toString();\n\t\treturn uriStr.substr(uriStr.lastIndexOf('/') + 1);\n\t}\n\n\tprivate static isInMemory(uri: uri): boolean {\n\t\treturn uri.toString().indexOf(Source.INTERNAL_URI_PREFIX) === 0;\n\t}\n}\n"]}