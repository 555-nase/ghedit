{"version":3,"file":"vs/workbench/parts/debug/common/debugViewModel.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/workbench/parts/debug/common/debugViewModel.ts"],"names":[],"mappings":";;;;;;;IAOA;QAA+B,6BAAe;QAA9C;YAA+B,8BAAe;QAwC9C,CAAC;QAlCO,yBAAK,GAAZ;YACC,MAAM,CAAC,MAAM,CAAC;QACf,CAAC;QAEM,wCAAoB,GAA3B;YACC,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC;QAC/B,CAAC;QAEM,wCAAoB,GAA3B,UAA4B,iBAAoC;YAC/D,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;YAC3C,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,2BAA2B,CAAC,CAAC;QAC9D,CAAC;QAEM,sCAAkB,GAAzB;YACC,MAAM,CAAC,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,iBAAiB,CAAC,QAAQ,GAAG,CAAC,CAAC;QACrE,CAAC;QAEM,yCAAqB,GAA5B;YACC,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC;QAChC,CAAC;QAEM,yCAAqB,GAA5B,UAA6B,UAA6B;YACzD,IAAI,CAAC,kBAAkB,GAAG,UAAU,CAAC;YACrC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,2BAA2B,EAAE,UAAU,CAAC,CAAC;QAC1E,CAAC;QAEM,iDAA6B,GAApC;YACC,MAAM,CAAC,IAAI,CAAC,0BAA0B,CAAC;QACxC,CAAC;QAEM,iDAA6B,GAApC,UAAqC,kBAA6C;YACjF,IAAI,CAAC,0BAA0B,GAAG,kBAAkB,CAAC;YACrD,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,oCAAoC,EAAE,kBAAkB,CAAC,CAAC;QAC3F,CAAC;QACF,gBAAC;IAAD,CAAC,AAxCD,CAA+B,EAAE,CAAC,YAAY,GAwC7C;IAxCY,iBAAS,YAwCrB,CAAA","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport ee = require('vs/base/common/eventEmitter');\nimport debug = require('vs/workbench/parts/debug/common/debug');\n\nexport class ViewModel extends ee.EventEmitter implements debug.IViewModel, debug.ITreeElement {\n\n\tprivate focusedStackFrame: debug.IStackFrame;\n\tprivate selectedExpression: debug.IExpression;\n\tprivate selectedFunctionBreakpoint: debug.IFunctionBreakpoint;\n\n\tpublic getId(): string {\n\t\treturn 'root';\n\t}\n\n\tpublic getFocusedStackFrame(): debug.IStackFrame {\n\t\treturn this.focusedStackFrame;\n\t}\n\n\tpublic setFocusedStackFrame(focusedStackFrame: debug.IStackFrame): void {\n\t\tthis.focusedStackFrame = focusedStackFrame;\n\t\tthis.emit(debug.ViewModelEvents.FOCUSED_STACK_FRAME_UPDATED);\n\t}\n\n\tpublic getFocusedThreadId(): number {\n\t\treturn this.focusedStackFrame ? this.focusedStackFrame.threadId : 0;\n\t}\n\n\tpublic getSelectedExpression(): debug.IExpression {\n\t\treturn this.selectedExpression;\n\t}\n\n\tpublic setSelectedExpression(expression: debug.IExpression) {\n\t\tthis.selectedExpression = expression;\n\t\tthis.emit(debug.ViewModelEvents.SELECTED_EXPRESSION_UPDATED, expression);\n\t}\n\n\tpublic getSelectedFunctionBreakpoint(): debug.IFunctionBreakpoint {\n\t\treturn this.selectedFunctionBreakpoint;\n\t}\n\n\tpublic setSelectedFunctionBreakpoint(functionBreakpoint: debug.IFunctionBreakpoint): void {\n\t\tthis.selectedFunctionBreakpoint = functionBreakpoint;\n\t\tthis.emit(debug.ViewModelEvents.SELECTED_FUNCTION_BREAKPOINT_UPDATED, functionBreakpoint);\n\t}\n}\n"]}