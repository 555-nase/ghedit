{"version":3,"file":"vs/workbench/parts/debug/test/common/debugModel.test.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/workbench/parts/debug/test/common/debugModel.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert = require('assert');\nimport uri from 'vs/base/common/uri';\nimport severity from 'vs/base/common/severity';\nimport debugmodel = require('vs/workbench/parts/debug/common/debugModel');\nimport debug = require('vs/workbench/parts/debug/common/debug');\nimport { TPromise } from 'vs/base/common/winjs.base';\nimport { DebugService } from 'vs/workbench/parts/debug/electron-browser/debugService';\nimport * as sinon from 'sinon';\nimport { MockDebugService } from 'vs/workbench/parts/debug/test/common/mockDebugService';\n\nsuite('Debug - Model', () => {\n\tvar model: debugmodel.Model;\n\n\tsetup(() => {\n\t\tmodel = new debugmodel.Model([], true, [], [], []);\n\t});\n\n\tteardown(() => {\n\t\tmodel = null;\n\t});\n\n\t// Breakpoints\n\n\ttest('breakpoints simple', () => {\n\t\tvar modelUri = uri.file('/myfolder/myfile.js');\n\t\tmodel.addBreakpoints([{ uri: modelUri, lineNumber: 5, enabled: true }, { uri: modelUri, lineNumber: 10, enabled: false }]);\n\t\tassert.equal(model.areBreakpointsActivated(), true);\n\t\tassert.equal(model.getBreakpoints().length, 2);\n\n\t\tmodel.removeBreakpoints(model.getBreakpoints());\n\t\tassert.equal(model.getBreakpoints().length, 0);\n\t});\n\n\ttest('breakpoints toggling', () => {\n\t\tvar modelUri = uri.file('/myfolder/myfile.js');\n\t\tmodel.addBreakpoints([{ uri: modelUri, lineNumber: 5, enabled: true }, { uri: modelUri, lineNumber: 10, enabled: false }]);\n\t\tmodel.addBreakpoints([{ uri: modelUri, lineNumber: 12, enabled: true, condition: 'fake condition'}]);\n\t\tassert.equal(model.getBreakpoints().length, 3);\n\t\tmodel.removeBreakpoints([model.getBreakpoints().pop()]);\n\t\tassert.equal(model.getBreakpoints().length, 2);\n\n\t\tmodel.toggleBreakpointsActivated();\n\t\tassert.equal(model.areBreakpointsActivated(), false);\n\t\tmodel.toggleBreakpointsActivated();\n\t\tassert.equal(model.areBreakpointsActivated(), true);\n\t});\n\n\ttest('breakpoints two files', () => {\n\t\tvar modelUri1 = uri.file('/myfolder/my file first.js');\n\t\tvar modelUri2 = uri.file('/secondfolder/second/second file.js')\n\t\tmodel.addBreakpoints([{ uri: modelUri1, lineNumber: 5, enabled: true }, { uri: modelUri1, lineNumber: 10, enabled: false }]);\n\t\tmodel.addBreakpoints([{ uri: modelUri2, lineNumber: 1, enabled: true }, { uri: modelUri2, lineNumber: 2, enabled: true }, { uri: modelUri2, lineNumber: 3, enabled: false }]);\n\n\t\tassert.equal(model.getBreakpoints().length, 5);\n\t\tvar bp = model.getBreakpoints()[0];\n\t\tvar originalLineLumber = bp.lineNumber;\n\t\tconst update:any = {};\n\t\tupdate[bp.getId()] = { line: 100, verified: false };\n\t\tmodel.updateBreakpoints(update);\n\t\tassert.equal(bp.lineNumber, 100);\n\t\tassert.equal(bp.desiredLineNumber, originalLineLumber);\n\n\t\tmodel.enableOrDisableAllBreakpoints(false);\n\t\tmodel.getBreakpoints().forEach(bp => {\n\t\t\tassert.equal(bp.enabled, false);\n\t\t});\n\t\tmodel.toggleEnablement(bp);\n\t\tassert.equal(bp.enabled, true);\n\n\t\tmodel.removeBreakpoints(model.getBreakpoints().filter(bp => bp.source.uri.toString() === modelUri1.toString()));\n\t\tassert.equal(model.getBreakpoints().length, 3);\n\t});\n\n\t// Threads\n\n\ttest('threads simple', () => {\n\t\tvar threadId = 1;\n\t\tvar threadName = \"firstThread\";\n\t\tmodel.rawUpdate({\n\t\t\tthreadId: threadId,\n\t\t\tthread: {\n\t\t\t\tid: threadId,\n\t\t\t\tname: threadName\n\t\t\t}\n\t\t});\n\n\t\tvar threads = model.getThreads();\n\t\tassert.equal(threads[threadId].name, threadName);\n\n\t\tmodel.clearThreads(true);\n\t\tassert.equal(model.getThreads[threadId], null);\n\t});\n\n\ttest('threads multiple wtih allThreadsStopped', () => {\n\t\tconst mockDebugService = new MockDebugService();\n\t\tconst sessionStub = sinon.spy(mockDebugService.getActiveSession(), 'stackTrace');\n\n\t\tconst threadId1 = 1;\n\t\tconst threadName1 = \"firstThread\";\n\t\tconst threadId2 = 2;\n\t\tconst threadName2 = \"secondThread\";\n\t\tconst stoppedReason = \"breakpoint\";\n\n\t\t// Add the threads\n\t\tmodel.rawUpdate({\n\t\t\tthreadId: threadId1,\n\t\t\tthread: {\n\t\t\t\tid: threadId1,\n\t\t\t\tname: threadName1\n\t\t\t}\n\t\t});\n\n\t\tmodel.rawUpdate({\n\t\t\tthreadId: threadId2,\n\t\t\tthread: {\n\t\t\t\tid: threadId2,\n\t\t\t\tname: threadName2\n\t\t\t}\n\t\t});\n\n\t\t// Stopped event with all threads stopped\n\t\tmodel.rawUpdate({\n\t\t\tthreadId: threadId1,\n\t\t\tstoppedDetails: {\n\t\t\t\treason: stoppedReason,\n\t\t\t\tthreadId: 1\n\t\t\t},\n\t\t\tallThreadsStopped: true\n\t\t});\n\n\t\tconst thread1 = model.getThreads()[threadId1];\n\t\tconst thread2 = model.getThreads()[threadId2];\n\n\t\t// at the beginning, callstacks are obtainable but not available\n\t\tassert.equal(thread1.name, threadName1);\n\t\tassert.equal(thread1.stopped, true);\n\t\tassert.equal(thread1.getCachedCallStack(), undefined);\n\t\tassert.equal(thread1.stoppedDetails.reason, stoppedReason);\n\t\tassert.equal(thread2.name, threadName2);\n\t\tassert.equal(thread2.stopped, true);\n\t\tassert.equal(thread2.getCachedCallStack(), undefined);\n\t\tassert.equal(thread2.stoppedDetails.reason, stoppedReason);\n\n\t\t// after calling getCallStack, the callstack becomes available\n\t\t// and results in a request for the callstack in the debug adapter\n\t\tthread1.getCallStack(mockDebugService).then(() => {\n\t\t\tassert.notEqual(thread1.getCachedCallStack(), undefined);\n\t\t\tassert.equal(thread2.getCachedCallStack(), undefined);\n\t\t\tassert.equal(sessionStub.callCount, 1);\n\t\t});\n\n\t\tthread2.getCallStack(mockDebugService).then(() => {\n\t\t\tassert.notEqual(thread1.getCachedCallStack(), undefined);\n\t\t\tassert.notEqual(thread2.getCachedCallStack(), undefined);\n\t\t\tassert.equal(sessionStub.callCount, 2);\n\t\t});\n\n\t\t// calling multiple times getCallStack doesn't result in multiple calls\n\t\t// to the debug adapter\n\t\tthread1.getCallStack(mockDebugService).then(() => {\n\t\t\treturn thread2.getCallStack(mockDebugService);\n\t\t}).then(() => {\n\t\t\tassert.equal(sessionStub.callCount, 2);\n\t\t});\n\n\t\t// clearing the callstack results in the callstack not being available\n\t\tthread1.clearCallStack();\n\t\tassert.equal(thread1.stopped, true);\n\t\tassert.equal(thread1.getCachedCallStack(), undefined);\n\n\t\tthread2.clearCallStack();\n\t\tassert.equal(thread2.stopped, true);\n\t\tassert.equal(thread2.getCachedCallStack(), undefined);\n\n\t\tmodel.continueThreads();\n\t\tassert.equal(thread1.stopped, false);\n\t\tassert.equal(thread2.stopped, false);\n\n\t\tmodel.clearThreads(true);\n\t\tassert.equal(model.getThreads[threadId1], null);\n\t\tassert.equal(model.getThreads[threadId2], null);\n\t});\n\n\ttest('threads mutltiple without allThreadsStopped', () => {\n\t\tconst mockDebugService = new MockDebugService();\n\t\tconst sessionStub = sinon.spy(mockDebugService.getActiveSession(), 'stackTrace');\n\n\t\tconst stoppedThreadId = 1;\n\t\tconst stoppedThreadName = \"stoppedThread\";\n\t\tconst runningThreadId = 2;\n\t\tconst runningThreadName = \"runningThread\";\n\t\tconst stoppedReason = \"breakpoint\";\n\n\t\t// Add the threads\n\t\tmodel.rawUpdate({\n\t\t\tthreadId: stoppedThreadId,\n\t\t\tthread: {\n\t\t\t\tid: stoppedThreadId,\n\t\t\t\tname: stoppedThreadName\n\t\t\t}\n\t\t});\n\n\t\tmodel.rawUpdate({\n\t\t\tthreadId: runningThreadId,\n\t\t\tthread: {\n\t\t\t\tid: runningThreadId,\n\t\t\t\tname: runningThreadName\n\t\t\t}\n\t\t});\n\n\t\t// Stopped event with only one thread stopped\n\t\tmodel.rawUpdate({\n\t\t\tthreadId: stoppedThreadId,\n\t\t\tstoppedDetails: {\n\t\t\t\treason: stoppedReason,\n\t\t\t\tthreadId: 1\n\t\t\t},\n\t\t\tallThreadsStopped: false\n\t\t});\n\n\t\tconst stoppedThread = model.getThreads()[stoppedThreadId];\n\t\tconst runningThread = model.getThreads()[runningThreadId];\n\n\t\t// the callstack for the stopped thread is obtainable but not available\n\t\t// the callstack for the running thread is not obtainable nor available\n\t\tassert.equal(stoppedThread.name, stoppedThreadName);\n\t\tassert.equal(stoppedThread.stopped, true);\n\t\tassert.equal(stoppedThread.getCachedCallStack(), undefined);\n\t\tassert.equal(stoppedThread.stoppedDetails.reason, stoppedReason);\n\t\tassert.equal(runningThread.name, runningThreadName);\n\t\tassert.equal(runningThread.stopped, false);\n\t\tassert.equal(runningThread.getCachedCallStack(), undefined);\n\t\tassert.equal(runningThread.stoppedDetails, undefined);\n\n\t\t// after calling getCallStack, the callstack becomes available\n\t\t// and results in a request for the callstack in the debug adapter\n\t\tstoppedThread.getCallStack(mockDebugService).then(() => {\n\t\t\tassert.notEqual(stoppedThread.getCachedCallStack(), undefined);\n\t\t\tassert.equal(runningThread.getCachedCallStack(), undefined);\n\t\t\tassert.equal(sessionStub.callCount, 1);\n\t\t});\n\n\t\t// calling getCallStack on the running thread returns empty array\n\t\t// and does not return in a request for the callstack in the debug\n\t\t// adapter\n\t\trunningThread.getCallStack(mockDebugService).then(callStack => {\n\t\t\tassert.deepEqual(callStack, []);\n\t\t\tassert.equal(sessionStub.callCount, 1);\n\t\t});\n\n\t\t// calling multiple times getCallStack doesn't result in multiple calls\n\t\t// to the debug adapter\n\t\tstoppedThread.getCallStack(mockDebugService).then(() => {\n\t\t\tassert.equal(sessionStub.callCount, 1);\n\t\t});\n\n\t\t// clearing the callstack results in the callstack not being available\n\t\tstoppedThread.clearCallStack();\n\t\tassert.equal(stoppedThread.stopped, true);\n\t\tassert.equal(stoppedThread.getCachedCallStack(), undefined);\n\n\t\tmodel.continueThreads();\n\t\tassert.equal(runningThread.stopped, false);\n\t\tassert.equal(stoppedThread.stopped, false);\n\n\t\tmodel.clearThreads(true);\n\t\tassert.equal(model.getThreads[stoppedThreadId], null);\n\t\tassert.equal(model.getThreads[runningThreadId], null);\n\t});\n\n\t// Expressions\n\n\tfunction assertWatchExpressions(watchExpressions: debugmodel.Expression[], expectedName: string) {\n\t\tassert.equal(watchExpressions.length, 2);\n\t\twatchExpressions.forEach(we => {\n\t\t\tassert.equal(we.available, false);\n\t\t\tassert.equal(we.reference, 0);\n\t\t\tassert.equal(we.name, expectedName);\n\t\t});\n\t}\n\n\ttest('watch expressions', () => {\n\t\tassert.equal(model.getWatchExpressions().length, 0);\n\t\tconst stackFrame = new debugmodel.StackFrame(1, 1, null, 'app.js', 1, 1);\n\t\tmodel.addWatchExpression(null, stackFrame, 'console').done();\n\t\tmodel.addWatchExpression(null, stackFrame, 'console').done();\n\t\tconst watchExpressions = model.getWatchExpressions();\n\t\tassertWatchExpressions(watchExpressions, 'console');\n\n\t\tmodel.renameWatchExpression(null, stackFrame, watchExpressions[0].getId(), 'new_name').done();\n\t\tmodel.renameWatchExpression(null, stackFrame, watchExpressions[1].getId(), 'new_name').done();\n\t\tassertWatchExpressions(model.getWatchExpressions(), 'new_name');\n\n\t\tmodel.clearWatchExpressionValues();\n\t\tassertWatchExpressions(model.getWatchExpressions(), 'new_name');\n\n\t\tmodel.clearWatchExpressions();\n\t\tassert.equal(model.getWatchExpressions().length, 0);\n\t});\n\n\ttest('repl expressions', () => {\n\t\tassert.equal(model.getReplElements().length, 0);\n\t\tconst stackFrame = new debugmodel.StackFrame(1, 1, null, 'app.js', 1, 1);\n\t\tmodel.addReplExpression(null, stackFrame, 'myVariable').done();\n\t\tmodel.addReplExpression(null, stackFrame, 'myVariable').done();\n\t\tmodel.addReplExpression(null, stackFrame, 'myVariable').done();\n\n\t\tassert.equal(model.getReplElements().length, 3);\n\t\tmodel.getReplElements().forEach(re => {\n\t\t\tassert.equal((<debugmodel.Expression> re).available, false);\n\t\t\tassert.equal((<debugmodel.Expression> re).name, 'myVariable');\n\t\t\tassert.equal((<debugmodel.Expression> re).reference, 0);\n\t\t});\n\n\t\tmodel.clearReplExpressions();\n\t\tassert.equal(model.getReplElements().length, 0);\n\t});\n\n\t// Repl output\n\n\ttest('repl output', () => {\n\t\tmodel.logToRepl('first line', severity.Error);\n\t\tmodel.logToRepl('second line', severity.Warning);\n\t\tmodel.logToRepl('second line', severity.Warning);\n\t\tmodel.logToRepl('second line', severity.Error);\n\n\t\tlet elements = <debugmodel.ValueOutputElement[]> model.getReplElements();\n\t\tassert.equal(elements.length, 3);\n\t\tassert.equal(elements[0].value, 'first line');\n\t\tassert.equal(elements[0].counter, 1);\n\t\tassert.equal(elements[0].severity, severity.Error);\n\t\tassert.equal(elements[1].value, 'second line');\n\t\tassert.equal(elements[1].counter, 2);\n\t\tassert.equal(elements[1].severity, severity.Warning);\n\n\t\tmodel.appendReplOutput('1', severity.Error);\n\t\tmodel.appendReplOutput('2', severity.Error);\n\t\tmodel.appendReplOutput('3', severity.Error);\n\t\telements = <debugmodel.ValueOutputElement[]> model.getReplElements();\n\t\tassert.equal(elements.length, 4);\n\t\tassert.equal(elements[3].value, '123');\n\t\tassert.equal(elements[3].severity, severity.Error);\n\n\t\tconst keyValueObject = { 'key1' : 2, 'key2': 'value' };\n\t\tmodel.logToRepl(keyValueObject);\n\t\tconst element = <debugmodel.KeyValueOutputElement> model.getReplElements()[4];\n\t\tassert.equal(element.value, 'Object');\n\t\tassert.deepEqual(element.valueObj, keyValueObject);\n\n\t\tmodel.clearReplExpressions();\n\t\tassert.equal(model.getReplElements().length, 0);\n\t});\n\n\t// Utils\n\n\ttest('full expression name', () => {\n\t\tconst type = 'node';\n\t\tassert.equal(debugmodel.getFullExpressionName(new debugmodel.Expression(null, false), type), null);\n\t\tassert.equal(debugmodel.getFullExpressionName(new debugmodel.Expression('son', false), type), 'son');\n\n\t\tconst scope = new debugmodel.Scope(1, 'myscope', 1, false);\n\t\tconst son = new debugmodel.Variable(new debugmodel.Variable(new debugmodel.Variable(scope, 0, 'grandfather', '75'), 0, 'father', '45'), 0, 'son', '20');\n\t\tassert.equal(debugmodel.getFullExpressionName(son, type), 'grandfather.father.son');\n\n\t\tconst grandson = new debugmodel.Variable(son, 0, '/weird_name', '1');\n\t\tassert.equal(debugmodel.getFullExpressionName(grandson, type), 'grandfather.father.son[\\'/weird_name\\']');\n\t});\n});\n"]}