{"version":3,"file":"vs/workbench/parts/debug/test/common/debugUtils.test.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/workbench/parts/debug/test/common/debugUtils.test.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;IAKhG,KAAK,CAAC,eAAe,EAAE;QACtB,IAAI,CAAC,WAAW,EAAE;YACjB,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,SAAS,CAAC,SAAS,EAAE,KAAK,EAAE,EAAE,CAAC,EAAE,SAAS,CAAC,CAAC;YACrE,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,SAAS,CAAC,eAAe,EAAE,KAAK,EAAE,EAAE,CAAC,EAAE,eAAe,CAAC,CAAC;YACjF,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,SAAS,CAAC,eAAe,EAAE,KAAK,EAAE,EAAC,KAAK,EAAE,KAAK,EAAC,CAAC,EAAE,aAAa,CAAC,CAAC;YAC3F,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,SAAS,CAAC,mBAAmB,EAAE,IAAI,EAAE,EAAC,IAAI,EAAE,KAAK,EAAC,CAAC,EAAE,iBAAiB,CAAC,CAAC;YACjG,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,SAAS,CAAC,oBAAoB,EAAE,KAAK,EAAE,EAAC,GAAG,EAAE,KAAK,EAAC,CAAC,EAAE,oBAAoB,CAAC,CAAC;YACrG,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,SAAS,CAAC,oBAAoB,EAAE,KAAK,EAAE,EAAC,GAAG,EAAE,KAAK,EAAE,GAAG,EAAE,WAAW,EAAC,CAAC,EAAE,0BAA0B,CAAC,CAAC;YAC7H,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,SAAS,CAAC,8BAA8B,EAAE,IAAI,EAAE,EAAC,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,EAAE,MAAM,EAAE,OAAO,EAAC,CAAC,EAAE,0BAA0B,CAAC,CAAC;YACtJ,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,SAAS,CAAC,8BAA8B,EAAE,KAAK,EAAE,EAAC,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,EAAE,MAAM,EAAE,OAAO,EAAC,CAAC,EAAE,oBAAoB,CAAC,CAAC;QAClJ,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport debug = require('vs/workbench/parts/debug/common/debug');\nimport assert = require('assert');\n\nsuite('Debug - Utils', () => {\n\ttest('formatPII', () => {\n\t\tassert.strictEqual(debug.formatPII(\"Foo Bar\", false, {}), \"Foo Bar\");\n\t\tassert.strictEqual(debug.formatPII(\"Foo {key} Bar\", false, {}), \"Foo {key} Bar\");\n\t\tassert.strictEqual(debug.formatPII(\"Foo {key} Bar\", false, {'key': 'yes'}), \"Foo yes Bar\");\n\t\tassert.strictEqual(debug.formatPII(\"Foo {_0} Bar {_0}\", true, {'_0': 'yes'}), \"Foo yes Bar yes\");\n\t\tassert.strictEqual(debug.formatPII(\"Foo {0} Bar {1}{2}\", false, {'0': 'yes'}), \"Foo yes Bar {1}{2}\");\n\t\tassert.strictEqual(debug.formatPII(\"Foo {0} Bar {1}{2}\", false, {'0': 'yes', '1': 'undefined'}), \"Foo yes Bar undefined{2}\");\n\t\tassert.strictEqual(debug.formatPII(\"Foo {_key0} Bar {key1}{key2}\", true, {'_key0': 'yes', 'key1': '5', 'key2': 'false'}), \"Foo yes Bar {key1}{key2}\");\n\t\tassert.strictEqual(debug.formatPII(\"Foo {_key0} Bar {key1}{key2}\", false, {'_key0': 'yes', 'key1': '5', 'key2': 'false'}), \"Foo yes Bar 5false\");\n\t});\n});"]}