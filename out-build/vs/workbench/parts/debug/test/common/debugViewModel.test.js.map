{"version":3,"file":"vs/workbench/parts/debug/test/common/debugViewModel.test.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/workbench/parts/debug/test/common/debugViewModel.test.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;IAMhG,KAAK,CAAC,oBAAoB,EAAE;QAC3B,IAAI,KAAgB,CAAC;QAErB,KAAK,CAAC;YACL,KAAK,GAAG,IAAI,0BAAS,EAAE,CAAC;QACzB,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC;YACR,KAAK,GAAG,IAAI,CAAC;QACd,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,qBAAqB,EAAE;YAC3B,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,oBAAoB,EAAE,EAAE,IAAI,CAAC,CAAC;YACjD,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,kBAAkB,EAAE,EAAE,CAAC,CAAC,CAAC;YAC5C,IAAM,KAAK,GAAG,IAAI,uBAAU,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YACzD,KAAK,CAAC,oBAAoB,CAAC,KAAK,CAAC,CAAC;YAElC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,oBAAoB,EAAE,EAAE,KAAK,CAAC,CAAC;YAClD,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,kBAAkB,EAAE,EAAE,CAAC,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,qBAAqB,EAAE;YAC3B,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,qBAAqB,EAAE,EAAE,IAAI,CAAC,CAAC;YAClD,IAAM,UAAU,GAAG,IAAI,uBAAU,CAAC,eAAe,EAAE,KAAK,CAAC,CAAC;YAC1D,KAAK,CAAC,qBAAqB,CAAC,UAAU,CAAC,CAAC;YAExC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,qBAAqB,EAAE,EAAE,UAAU,CAAC,CAAC;QACzD,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert = require('assert');\nimport { ViewModel } from 'vs/workbench/parts/debug/common/debugViewModel';\nimport { StackFrame, Expression } from 'vs/workbench/parts/debug/common/debugModel';\n\nsuite('Debug - View Model', () => {\n\tvar model: ViewModel;\n\n\tsetup(() => {\n\t\tmodel = new ViewModel();\n\t});\n\n\tteardown(() => {\n\t\tmodel = null;\n\t});\n\n\ttest('focused stack frame', () => {\n\t\tassert.equal(model.getFocusedStackFrame(), null);\n\t\tassert.equal(model.getFocusedThreadId(), 0);\n\t\tconst frame = new StackFrame(1, 1, null, 'app.js', 1, 1);\n\t\tmodel.setFocusedStackFrame(frame);\n\n\t\tassert.equal(model.getFocusedStackFrame(), frame);\n\t\tassert.equal(model.getFocusedThreadId(), 1);\n\t});\n\n\ttest('selected expression', () => {\n\t\tassert.equal(model.getSelectedExpression(), null);\n\t\tconst expression = new Expression('my expression', false);\n\t\tmodel.setSelectedExpression(expression);\n\n\t\tassert.equal(model.getSelectedExpression(), expression);\n\t});\n});\n"]}