{"version":3,"file":"vs/workbench/parts/debug/test/node/debugAdapter.test.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/workbench/parts/debug/test/node/debugAdapter.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert = require('assert');\nimport paths = require('vs/base/common/paths');\nimport platform = require('vs/base/common/platform');\nimport { Adapter } from 'vs/workbench/parts/debug/node/debugAdapter';\n\nsuite('Debug - Adapter', () => {\n\tvar adapter: Adapter;\n\tvar extensionFolderPath = 'a/b/c/';\n\tvar rawAdapter = {\n\t\ttype: 'mock',\n\t\tlabel: 'Mock Debug',\n\t\tenableBreakpointsFor: { 'languageIds': [ 'markdown' ] },\n\t\tprogram: './out/mock/mockDebug.js',\n\t\twin: {\n\t\t\truntime: 'winRuntime'\n\t\t},\n\t\tlinux: {\n\t\t\truntime: 'linuxRuntime'\n\t\t},\n\t\tosx: {\n\t\t\truntime: 'osxRuntime'\n\t\t},\n\t\tconfigurationAttributes: {\n\t\t\tlaunch: {\n\t\t\t\trequired: [ 'program' ],\n\t\t\t\tproperties: {\n\t\t\t\t\tprogram: {\n\t\t\t\t\t\t'type': 'string',\n\t\t\t\t\t\t'description': 'Workspace relative path to a text file.',\n\t\t\t\t\t\t'default': 'readme.md'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tinitialConfigurations: [\n\t\t\t{\n\t\t\t\tname: 'Mock-Debug',\n\t\t\t\ttype: 'mock',\n\t\t\t\trequest: 'launch',\n\t\t\t\tprogram: 'readme.md'\n\t\t\t}\n\t\t]\n\t}\n\n\tsetup(() => {\n\t\tadapter = new Adapter(rawAdapter, null, extensionFolderPath);\n\t});\n\n\tteardown(() => {\n\t\tadapter = null;\n\t});\n\n\ttest('adapter attributes', () => {\n\t\tassert.equal(adapter.type, rawAdapter.type);\n\t\tassert.equal(adapter.label, rawAdapter.label);\n\t\tassert.equal(adapter.program, paths.join(extensionFolderPath, rawAdapter.program));\n\t\tassert.equal(adapter.runtime, platform.isLinux ? rawAdapter.linux.runtime : platform.isMacintosh ? rawAdapter.osx.runtime : rawAdapter.win.runtime);\n\t\tassert.deepEqual(adapter.initialConfigurations, rawAdapter.initialConfigurations);\n\t});\n\n\ttest('schema attributes', () => {\n\t\tconst schemaAttribute = adapter.getSchemaAttributes()[0];\n\t\tassert.notDeepEqual(schemaAttribute, rawAdapter.configurationAttributes);\n\t\tObject.keys(rawAdapter.configurationAttributes.launch).forEach(key => {\n\t\t\tassert.deepEqual(schemaAttribute[key], rawAdapter.configurationAttributes.launch[key]);\n\t\t});\n\n\t\tassert.equal(schemaAttribute['additionalProperties'], false);\n\t\tassert.equal(!!schemaAttribute['properties']['request'], true);\n\t\tassert.equal(!!schemaAttribute['properties']['name'], true);\n\t\tassert.equal(!!schemaAttribute['properties']['type'], true);\n\t\tassert.equal(!!schemaAttribute['properties']['preLaunchTask'], true);\n\t});\n});"]}