{"version":3,"sources":["vs/workbench/parts/debug/node/rawDebugSession.ts"],"names":[],"mappings":"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","file":"vs/workbench/parts/debug/node/rawDebugSession.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport nls = require('vs/nls');\nimport cp = require('child_process');\nimport fs = require('fs');\nimport net = require('net');\nimport platform = require('vs/base/common/platform');\nimport { Action } from 'vs/base/common/actions';\nimport errors = require('vs/base/common/errors');\nimport { TPromise } from 'vs/base/common/winjs.base';\nimport severity from 'vs/base/common/severity';\nimport { AIAdapter } from 'vs/base/node/aiAdapter';\nimport debug = require('vs/workbench/parts/debug/common/debug');\nimport { Adapter } from 'vs/workbench/parts/debug/node/debugAdapter';\nimport v8 = require('vs/workbench/parts/debug/node/v8Protocol');\nimport stdfork = require('vs/base/node/stdFork');\nimport { IMessageService, CloseAction } from 'vs/platform/message/common/message';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { shell } from 'electron';\n\nexport class RawDebugSession extends v8.V8Protocol implements debug.IRawDebugSession {\n\tprivate serverProcess: cp.ChildProcess;\n\tprivate socket: net.Socket = null;\n\tprivate cachedInitServer: TPromise<void>;\n\tprivate startTime: number;\n\tprivate stopServerPending: boolean;\n\tprivate sentPromises: TPromise<DebugProtocol.Response>[];\n\tpublic isAttach: boolean;\n\tpublic restarted: boolean;\n\tpublic capabilities: DebugProtocol.Capabilites;\n\n\tconstructor(\n\t\tprivate messageService: IMessageService,\n\t\tprivate telemetryService: ITelemetryService,\n\t\tprivate debugServerPort: number,\n\t\tprivate adapter: Adapter,\n\t\tprivate telemtryAdapter: AIAdapter\n\t) {\n\t\tsuper();\n\t\tthis.capabilities = {};\n\t\tthis.sentPromises = [];\n\t}\n\n\tprivate initServer(): TPromise<void> {\n\t\tif (this.cachedInitServer) {\n\t\t\treturn this.cachedInitServer;\n\t\t}\n\n\t\tconst serverPromise = this.debugServerPort ? this.connectServer(this.debugServerPort) : this.startServer();\n\t\tthis.cachedInitServer = serverPromise.then(() => {\n\t\t\t\tthis.startTime = new Date().getTime();\n\t\t\t}, err => {\n\t\t\t\tthis.cachedInitServer = null;\n\t\t\t\treturn TPromise.wrapError(err);\n\t\t\t}\n\t\t);\n\n\t\treturn this.cachedInitServer;\n\t}\n\n\tprotected send(command: string, args: any): TPromise<DebugProtocol.Response> {\n\t\treturn this.initServer().then(() => {\n\t\t\tconst promise = super.send(command, args).then(response => response, (errorResponse: DebugProtocol.ErrorResponse) => {\n\t\t\t\tconst error = errorResponse.body ? errorResponse.body.error : null;\n\t\t\t\tconst message = error ? debug.formatPII(error.format, false, error.variables) : errorResponse.message;\n\t\t\t\tif (error && error.sendTelemetry) {\n\t\t\t\t\tthis.telemetryService.publicLog('debugProtocolErrorResponse', { error: message });\n\t\t\t\t\tthis.telemtryAdapter.log('debugProtocolErrorResponse', { error: message });\n\t\t\t\t}\n\n\t\t\t\tif (error && error.url) {\n\t\t\t\t\tconst label = error.urlLabel ? error.urlLabel : nls.localize('moreInfo', \"More Info\");\n\t\t\t\t\treturn TPromise.wrapError(errors.create(message, { actions: [CloseAction, new Action('debug.moreInfo', label, null, true, () => {\n\t\t\t\t\t\tshell.openExternal(error.url);\n\t\t\t\t\t\treturn TPromise.as(null);\n\t\t\t\t\t})]}));\n\t\t\t\t}\n\n\t\t\t\treturn TPromise.wrapError(new Error(message));\n\t\t\t});\n\n\t\t\tthis.sentPromises.push(promise);\n\t\t\treturn promise;\n\t\t});\n\t}\n\n\tpublic initialize(args: DebugProtocol.InitializeRequestArguments): TPromise<DebugProtocol.InitializeResponse> {\n\t\treturn this.send('initialize', args).then(response => {\n\t\t\tthis.capabilities = response.body || this.capabilities;\n\t\t\treturn response;\n\t\t});\n\t}\n\n\tpublic launch(args: DebugProtocol.LaunchRequestArguments): TPromise<DebugProtocol.LaunchResponse> {\n\t\tthis.isAttach = false;\n\t\treturn this.sendAndLazyEmit('launch', args);\n\t}\n\n\tpublic attach(args: DebugProtocol.AttachRequestArguments): TPromise<DebugProtocol.AttachResponse> {\n\t\tthis.isAttach = true;\n\t\treturn this.sendAndLazyEmit('attach', args);\n\t}\n\n\tpublic next(args: DebugProtocol.NextArguments): TPromise<DebugProtocol.NextResponse> {\n\t\treturn this.sendAndLazyEmit('next', args);\n\t}\n\n\tpublic stepIn(args: DebugProtocol.StepInArguments): TPromise<DebugProtocol.StepInResponse> {\n\t\treturn this.sendAndLazyEmit('stepIn', args);\n\t}\n\n\tpublic stepOut(args: DebugProtocol.StepOutArguments): TPromise<DebugProtocol.StepOutResponse> {\n\t\treturn this.sendAndLazyEmit('stepOut', args);\n\t}\n\n\tpublic continue(args: DebugProtocol.ContinueArguments): TPromise<DebugProtocol.ContinueResponse> {\n\t\treturn this.sendAndLazyEmit('continue', args);\n\t}\n\n\t// node sometimes sends \"stopped\" events earlier than the response for the \"step\" request.\n\t// due to this we only emit \"continued\" if we did not miss a stopped event.\n\t// we do not emit straight away to reduce viewlet flickering.\n\tprivate sendAndLazyEmit(command: string, args: any, eventType = debug.SessionEvents.CONTINUED): TPromise<DebugProtocol.Response> {\n\t\tconst count = this.flowEventsCount;\n\t\treturn this.send(command, args).then(response => {\n\t\t\tsetTimeout(() => {\n\t\t\t\tif (this.flowEventsCount === count) {\n\t\t\t\t\tthis.emit(eventType);\n\t\t\t\t}\n\t\t\t}, 500);\n\n\t\t\treturn response;\n\t\t});\n\t}\n\n\tpublic pause(args: DebugProtocol.PauseArguments): TPromise<DebugProtocol.PauseResponse> {\n\t\treturn this.send('pause', args);\n\t}\n\n\tpublic disconnect(restart = false, force = false): TPromise<DebugProtocol.DisconnectResponse> {\n\t\tif (this.stopServerPending && force) {\n\t\t\treturn this.stopServer();\n\t\t}\n\n\t\t// Cancel all sent promises on disconnect so debug trees are not left in a broken state #3666.\n\t\t// Give a 1s timeout to give a chance for some promises to complete.\n\t\tsetTimeout(() => {\n\t\t\tthis.sentPromises.forEach(p => p.cancel());\n\t\t\tthis.sentPromises = [];\n\t\t}, 1000);\n\n\t\tif ((this.serverProcess || this.socket) && !this.stopServerPending) {\n\t\t\t// point of no return: from now on don't report any errors\n\t\t\tthis.stopServerPending = true;\n\t\t\tthis.restarted = restart;\n\t\t\treturn this.send('disconnect', { restart: restart }).then(() => this.stopServer(), () => this.stopServer());\n\t\t}\n\n\t\treturn TPromise.as(null);\n\t}\n\n\tpublic setBreakpoints(args: DebugProtocol.SetBreakpointsArguments): TPromise<DebugProtocol.SetBreakpointsResponse> {\n\t\treturn this.send('setBreakpoints', args);\n\t}\n\n\tpublic setFunctionBreakpoints(args: DebugProtocol.SetFunctionBreakpointsArguments): TPromise<DebugProtocol.SetFunctionBreakpointsResponse> {\n\t\treturn this.send('setFunctionBreakpoints', args);\n\t}\n\n\tpublic setExceptionBreakpoints(args: DebugProtocol.SetExceptionBreakpointsArguments): TPromise<DebugProtocol.SetExceptionBreakpointsResponse> {\n\t\treturn this.send('setExceptionBreakpoints', args);\n\t}\n\n\tpublic configurationDone(): TPromise<DebugProtocol.ConfigurationDoneResponse> {\n\t\treturn this.send('configurationDone', null);\n\t}\n\n\tpublic stackTrace(args: DebugProtocol.StackTraceArguments): TPromise<DebugProtocol.StackTraceResponse> {\n\t\treturn this.send('stackTrace', args);\n\t}\n\n\tpublic scopes(args: DebugProtocol.ScopesArguments): TPromise<DebugProtocol.ScopesResponse> {\n\t\treturn this.send('scopes', args);\n\t}\n\n\tpublic variables(args: DebugProtocol.VariablesArguments): TPromise<DebugProtocol.VariablesResponse> {\n\t\treturn this.send('variables', args);\n\t}\n\n\tpublic source(args: DebugProtocol.SourceArguments): TPromise<DebugProtocol.SourceResponse> {\n\t\treturn this.send('source', args);\n\t}\n\n\tpublic threads(): TPromise<DebugProtocol.ThreadsResponse> {\n\t\treturn this.send('threads', null);\n\t}\n\n\tpublic evaluate(args: DebugProtocol.EvaluateArguments): TPromise<DebugProtocol.EvaluateResponse> {\n\t\treturn this.send('evaluate', args);\n\t}\n\n\tpublic getLengthInSeconds(): number {\n\t\treturn (new Date().getTime() - this.startTime) / 1000;\n\t}\n\n\tpublic getType(): string {\n\t\treturn this.adapter.type;\n\t}\n\n\tprivate connectServer(port: number): TPromise<void> {\n\t\treturn new TPromise<void>((c, e) => {\n\t\t\tthis.socket = net.createConnection(port, '127.0.0.1', () => {\n\t\t\t\tthis.connect(this.socket, <any>this.socket);\n\t\t\t\tc(null);\n\t\t\t});\n\t\t\tthis.socket.on('error', (err: any) => {\n\t\t\t\te(err);\n\t\t\t});\n\t\t\tthis.socket.on('close', () => this.onServerExit());\n\t\t});\n\t}\n\n\tprivate startServer(): TPromise<any> {\n\t\tif (!this.adapter.program) {\n\t\t\treturn TPromise.wrapError(new Error(nls.localize('noDebugAdapterExtensionInstalled', \"No extension installed for '{0}' debugging.\", this.adapter.type)));\n\t\t}\n\n\t\treturn this.getLaunchDetails().then(d => this.launchServer(d).then(() => {\n\t\t\tthis.serverProcess.on('error', (err: Error) => this.onServerError(err));\n\t\t\tthis.serverProcess.on('exit', (code: number, signal: string) => this.onServerExit());\n\n\t\t\tconst sanitize = (s: string) => s.toString().replace(/\\r?\\n$/mg, '');\n\t\t\t// this.serverProcess.stdout.on('data', (data: string) => {\n\t\t\t// \tconsole.log('%c' + sanitize(data), 'background: #ddd; font-style: italic;');\n\t\t\t// });\n\t\t\tthis.serverProcess.stderr.on('data', (data: string) => {\n\t\t\t\tconsole.log(sanitize(data));\n\t\t\t});\n\n\t\t\tthis.connect(this.serverProcess.stdout, this.serverProcess.stdin);\n\t\t}));\n\t}\n\n\tprivate launchServer(launch: { command: string, argv: string[] }): TPromise<void> {\n\t\treturn new TPromise<void>((c, e) => {\n\t\t\tif (launch.command === 'node') {\n\t\t\t\tstdfork.fork(launch.argv[0], launch.argv.slice(1), {}, (err, child) => {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\te(new Error(nls.localize('unableToLaunchDebugAdapter', \"Unable to launch debug adapter from '{0}'.\", launch.argv[0])));\n\t\t\t\t\t}\n\t\t\t\t\tthis.serverProcess = child;\n\t\t\t\t\tc(null);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tthis.serverProcess = cp.spawn(launch.command, launch.argv, {\n\t\t\t\t\tstdio: [\n\t\t\t\t\t\t'pipe', \t// stdin\n\t\t\t\t\t\t'pipe', \t// stdout\n\t\t\t\t\t\t'pipe'\t\t// stderr\n\t\t\t\t\t],\n\t\t\t\t});\n\t\t\t\tc(null);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate stopServer(): TPromise<any> {\n\n\t\tif (this.socket !== null) {\n\t\t\tthis.socket.end();\n\t\t\tthis.cachedInitServer = null;\n\t\t\tthis.emit(debug.SessionEvents.SERVER_EXIT);\n\t\t}\n\n\t\tif (!this.serverProcess) {\n\t\t\treturn TPromise.as(null);\n\t\t}\n\n\t\tthis.stopServerPending = true;\n\n\t\tlet ret: TPromise<void>;\n\t\t// when killing a process in windows its child\n\t\t// processes are *not* killed but become root\n\t\t// processes. Therefore we use TASKKILL.EXE\n\t\tif (platform.isWindows) {\n\t\t\tret = new TPromise<void>((c, e) => {\n\t\t\t\tconst killer = cp.exec(`taskkill /F /T /PID ${this.serverProcess.pid}`, function (err, stdout, stderr) {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\treturn e(err);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tkiller.on('exit', c);\n\t\t\t\tkiller.on('error', e);\n\t\t\t});\n\t\t} else {\n\t\t\tthis.serverProcess.kill('SIGTERM');\n\t\t\tret = TPromise.as(null);\n\t\t}\n\n\t\treturn ret;\n\t}\n\n\tprivate getLaunchDetails(): TPromise<{ command: string; argv: string[]; }> {\n\t\treturn new TPromise((c, e) => {\n\t\t\tfs.exists(this.adapter.program, exists => {\n\t\t\t\tif (exists) {\n\t\t\t\t\tc(null);\n\t\t\t\t} else {\n\t\t\t\t\te(new Error(nls.localize('debugAdapterBinNotFound', \"Debug adapter executable '{0}' not found.\", this.adapter.program)));\n\t\t\t\t}\n\t\t\t});\n\t\t}).then(() => {\n\t\t\tif (this.adapter.runtime) {\n\t\t\t\treturn {\n\t\t\t\t\tcommand: this.adapter.runtime,\n\t\t\t\t\targv: (this.adapter.runtimeArgs || []).concat([this.adapter.program]).concat(this.adapter.args || [])\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tcommand: this.adapter.program,\n\t\t\t\targv: this.adapter.args || []\n\t\t\t};\n\t\t});\n\t}\n\n\tprotected onServerError(err: Error): void {\n\t\tthis.messageService.show(severity.Error, nls.localize('stoppingDebugAdapter', \"{0}. Stopping the debug adapter.\", err.message));\n\t\tthis.stopServer().done(null, errors.onUnexpectedError);\n\t}\n\n\tprivate onServerExit(): void {\n\t\tthis.serverProcess = null;\n\t\tthis.cachedInitServer = null;\n\t\tif (!this.stopServerPending) {\n\t\t\tthis.messageService.show(severity.Error, nls.localize('debugAdapterCrash', \"Debug adapter process has terminated unexpectedly\"));\n\t\t}\n\t\tthis.emit(debug.SessionEvents.SERVER_EXIT);\n\t}\n\n\tpublic dispose(): void {\n\t\tthis.disconnect().done(null, errors.onUnexpectedError);\n\t}\n}\n"]}