{"version":3,"sources":["vs/workbench/parts/debug/node/debugConfigurationManager.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;IAyBhG,4BAA4B;IAEjB,yBAAiB,GAAG,kBAAkB,CAAC,kBAAkB,CAAC,sBAAsB,CAAsB,WAAW,EAAE;QAC7H,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAwC,EAAE,IAA6B,CAAC;QAClG,IAAI,EAAE,OAAO;QACb,eAAe,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE,UAAU,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC;QAC3D,KAAK,EAAE;YACN,IAAI,EAAE,QAAQ;YACd,eAAe,EAAE,CAAC,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE,oBAAoB,EAAE,EAAE,WAAW,EAAE,CAAE,EAAE,CAAE,EAAE,EAAE,EAAE,CAAC;YAClH,UAAU,EAAE;gBACX,IAAI,EAAE;oBACL,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,CAA6C,EAAE,IAA2C,CAAC;oBACrH,IAAI,EAAE,QAAQ;iBACd;gBACD,KAAK,EAAE;oBACN,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,CAA8C,EAAE,IAAsC,CAAC;oBACjH,IAAI,EAAE,QAAQ;iBACd;gBACD,oBAAoB,EAAE;oBACrB,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,CAA6D,EAAE,IAAwC,CAAC;oBAClI,IAAI,EAAE,QAAQ;oBACd,UAAU,EAAE;wBACX,WAAW,EAAG;4BACb,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAyE,EAAE,IAAoB,CAAC;4BAC1H,IAAI,EAAE,OAAO;4BACb,KAAK,EAAE;gCACN,IAAI,EAAE,QAAQ;6BACd;yBACD;qBACD;iBACD;gBACD,OAAO,EAAE;oBACR,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAgD,EAAE,IAAiG,CAAC;oBAC9K,IAAI,EAAE,QAAQ;iBACd;gBACD,IAAI,EAAE;oBACL,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,CAA6C,EAAE,IAA4C,CAAC;oBACtH,IAAI,EAAE,OAAO;iBACb;gBACD,OAAO,EAAG;oBACT,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAgD,EAAE,IAA6F,CAAC;oBAC1K,IAAI,EAAE,QAAQ;iBACd;gBACD,WAAW,EAAG;oBACb,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAoD,EAAE,IAA6B,CAAC;oBAC9G,IAAI,EAAE,OAAO;iBACb;gBACD,qBAAqB,EAAE;oBACtB,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,CAA8D,EAAE,IAA4D,CAAC;oBACvJ,IAAI,EAAE,OAAO;iBACb;gBACD,uBAAuB,EAAE;oBACxB,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,EAAgE,EAAE,IAA4D,CAAC;oBACzJ,IAAI,EAAE,QAAQ;iBACd;gBACD,OAAO,EAAE;oBACR,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,EAAgD,EAAE,IAA4B,CAAC;oBACzG,IAAI,EAAE,QAAQ;oBACd,UAAU,EAAE;wBACX,OAAO,EAAG;4BACT,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,EAAwD,EAAE,IAA2B,CAAC;4BAChH,IAAI,EAAE,QAAQ;yBACd;qBACD;iBACD;gBACD,GAAG,EAAE;oBACJ,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,EAA4C,EAAE,IAAyB,CAAC;oBAClG,IAAI,EAAE,QAAQ;oBACd,UAAU,EAAE;wBACX,OAAO,EAAG;4BACT,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,EAAoD,EAAE,IAAuB,CAAC;4BACxG,IAAI,EAAE,QAAQ;yBACd;qBACD;iBACD;gBACD,KAAK,EAAE;oBACN,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,EAA8C,EAAE,IAA0B,CAAC;oBACrG,IAAI,EAAE,QAAQ;oBACd,UAAU,EAAE;wBACX,OAAO,EAAG;4BACT,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,EAAsD,EAAE,IAAyB,CAAC;4BAC5G,IAAI,EAAE,QAAQ;yBACd;qBACD;iBACD;aACD;SACD;KACD,CAAC,CAAC;IAEH,uBAAuB;IAEZ,gBAAQ,GAAG,yBAAyB,CAAC;IAChD,IAAM,MAAM,GAAgB;QAC3B,EAAE,EAAE,gBAAQ;QACZ,IAAI,EAAE,QAAQ;QACd,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,EAAuB,EAAE,IAAsB,CAAC;QACpE,QAAQ,EAAE,CAAC,SAAS,EAAE,gBAAgB,CAAC;QACvC,UAAU,EAAE;YACX,OAAO,EAAE;gBACR,IAAI,EAAE,QAAQ;gBACd,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,EAAyB,EAAE,IAA8B,CAAC;gBACpF,OAAO,EAAE,OAAO;aAChB;YACD,cAAc,EAAE;gBACf,IAAI,EAAE,OAAO;gBACb,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,EAAgC,EAAE,IAAuE,CAAC;gBACpI,KAAK,EAAE;oBACN,KAAK,EAAE,EAAE;iBACT;aACD;SACD;KACD,CAAC;IAEF,IAAM,YAAY,GAAuD,QAAQ,CAAC,QAAQ,CAAC,EAAE,CAAC,wBAAwB,CAAC,UAAU,CAAC,gBAAgB,CAAC,CAAC;IACpJ,YAAY,CAAC,cAAc,CAAC,gBAAQ,EAAE,MAAM,CAAC,CAAC;IAC9C,YAAY,CAAC,wBAAwB,CAAC,sBAAsB,EAAE,gBAAQ,CAAC,CAAC;IAExE;QAOC,8BACC,UAAkB,EACgB,cAAwC,EACpD,WAAyB,EACpB,gBAAmC,EAC7B,aAAsC,EACxC,oBAA2C,EAC/C,gBAAmC;YAL5B,mBAAc,GAAd,cAAc,CAA0B;YACpD,gBAAW,GAAX,WAAW,CAAc;YACpB,qBAAgB,GAAhB,gBAAgB,CAAmB;YAC7B,kBAAa,GAAb,aAAa,CAAyB;YACxC,yBAAoB,GAApB,oBAAoB,CAAuB;YAC/C,qBAAgB,GAAhB,gBAAgB,CAAmB;YAE9D,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,cAAc,CAAC,YAAY,EAAE,GAAG,IAAI,iCAAe,CAAC,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,cAAc,CAAC,GAAG,IAAI,CAAC;YAChI,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;YAClC,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;YACnB,IAAI,CAAC,iBAAiB,EAAE,CAAC;YACzB,IAAI,CAAC,wBAAwB,GAAG,EAAE,CAAC;QACpC,CAAC;QAEO,gDAAiB,GAAzB;YAAA,iBA8CC;YA7CA,yBAAiB,CAAC,UAAU,CAAC,UAAC,UAAU;gBAEvC,UAAU,CAAC,OAAO,CAAC,UAAA,SAAS;oBAC3B,SAAS,CAAC,KAAK,CAAC,OAAO,CAAC,UAAA,UAAU;wBACjC,IAAM,OAAO,GAAG,IAAI,sBAAO,CAAC,UAAU,EAAE,KAAI,CAAC,eAAe,EAAE,SAAS,CAAC,WAAW,CAAC,mBAAmB,CAAC,CAAC;wBACzG,IAAM,SAAS,GAAG,KAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,IAAI,KAAK,OAAO,CAAC,IAAI,EAAvB,CAAuB,CAAC,CAAC,CAAC,CAAC,CAAC;wBACxE,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,IAAI,IAAI,CAAC,OAAO,UAAU,CAAC,IAAI,KAAK,QAAQ,CAAC,CAAC,CAAC,CAAC;4BAC/D,SAAS,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAa,EAAE,IAAuE,CAAC,CAAC,CAAC;wBACjI,CAAC;wBAED,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;4BACf,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,UAAA,SAAS;gCACrC,EAAE,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;oCACxB,EAAE,CAAC,CAAC,SAAS,KAAK,sBAAsB,CAAC,CAAC,CAAC;wCAC1C,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC,OAAO,CAAC,UAAA,UAAU,IAAI,OAAA,SAAS,CAAC,oBAAoB,CAAC,UAAU,CAAC,GAAG,IAAI,EAAjD,CAAiD,CAAC,CAAC;oCACpH,CAAC;oCAAC,IAAI,CAAC,EAAE,CAAC,CAAC,SAAS,CAAC,SAAS,CAAC,IAAI,SAAS,KAAK,MAAM,CAAC,CAAC,CAAC;wCACzD,mDAAmD;wCACnD,SAAS,CAAC,SAAS,CAAC,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;wCAC1C,SAAS,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAuB,EAAE,IAA2F,EAAE,OAAO,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC,CAAC;oCACxL,CAAC;oCAAC,IAAI,CAAC,CAAC;wCACP,SAAS,CAAC,SAAS,CAAC,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;oCAC3C,CAAC;gCACF,CAAC;4BACF,CAAC,CAAC,CAAC;wBACJ,CAAC;wBAAC,IAAI,CAAC,CAAC;4BACP,KAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;wBAC7B,CAAC;wBAED,EAAE,CAAC,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC,CAAC;4BAClC,OAAO,CAAC,oBAAoB,CAAC,WAAW,CAAC,OAAO,CAAC,UAAA,MAAM;gCACtD,KAAI,CAAC,wBAAwB,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC;4BAC9C,CAAC,CAAC,CAAC;wBACJ,CAAC;oBACF,CAAC,CAAC,CAAC;gBACJ,CAAC,CAAC,CAAC;gBAEH,yEAAyE;gBACzE,qHAAqH;gBACrH,KAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAA,OAAO;oBAC5B,IAAM,gBAAgB,GAAG,OAAO,CAAC,mBAAmB,EAAE,CAAC;oBACvD,EAAE,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC;wBACtB,MAAe,MAAM,CAAC,UAAU,CAAC,gBAAgB,CAAC,CAAC,KAAM,CAAC,KAAK,EAAC,IAAI,WAAI,gBAAgB,CAAC,CAAC;oBAC3F,CAAC;;gBACF,CAAC,CAAC,CAAC;YACJ,CAAC,CAAC,CAAC;QACJ,CAAC;QAEM,+CAAgB,GAAvB;YACC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC;QAC3B,CAAC;QAEM,mDAAoB,GAA3B;YACC,MAAM,CAAC,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,GAAG,IAAI,CAAC;QAC5D,CAAC;QAEM,yCAAU,GAAjB;YAAA,iBAEC;YADA,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,UAAA,OAAO,IAAI,OAAA,OAAO,CAAC,gBAAgB,CAAC,OAAO,CAAC,IAAI,EAAE,KAAI,CAAC,aAAa,CAAC,IAAI,CAAC,EAA/D,CAA+D,CAAC,CAAC,GAAG,EAAE,CAAC;QAC/G,CAAC;QAEM,+CAAgB,GAAvB,UAAwB,IAAY;YAApC,iBAqBC;YApBA,MAAM,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC,IAAI,CAAC,UAAA,MAAM;gBACzC,EAAE,CAAC,CAAC,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC;oBACvC,KAAI,CAAC,aAAa,GAAG,IAAI,CAAC;oBAC1B,MAAM,CAAC;gBACR,CAAC;gBAED,gIAAgI;gBAChI,IAAM,QAAQ,GAAG,IAAI,GAAG,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,IAAI,KAAK,IAAI,EAAjB,CAAiB,CAAC,GAAG,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;gBAE5G,6GAA6G;gBAC7G,KAAI,CAAC,aAAa,GAAG,QAAQ,CAAC,MAAM,KAAK,CAAC,GAAG,OAAO,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;gBACnF,EAAE,CAAC,CAAC,KAAI,CAAC,aAAa,CAAC,CAAC,CAAC;oBACxB,EAAE,CAAC,CAAC,KAAI,CAAC,eAAe,CAAC,CAAC,CAAC;wBAC1B,MAAM,CAAC,IAAI,CAAC,KAAI,CAAC,aAAa,CAAC,CAAC,OAAO,CAAC,UAAA,GAAG;4BAC1C,KAAI,CAAC,aAAa,CAAC,GAAG,CAAC,GAAG,KAAI,CAAC,eAAe,CAAC,UAAU,CAAC,KAAI,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,CAAC;wBACpF,CAAC,CAAC,CAAC;oBACJ,CAAC;oBACD,KAAI,CAAC,aAAa,CAAC,WAAW,GAAG,MAAM,CAAC,WAAW,CAAC;gBACrD,CAAC;YACF,CAAC,CAAC,CAAC;QACJ,CAAC;QAEM,6CAAc,GAArB,UAAsB,UAAmB;YAAzC,iBA0BC;YAzBA,IAAM,QAAQ,GAAG,aAAG,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,YAAY,EAAE,CAAC,QAAQ,CAAC,MAAM,EAAE,sBAAsB,CAAC,CAAC,CAAC;YAElH,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,UAAA,OAAO,IAAI,OAAA,IAAI,EAAJ,CAAI,EAAE,UAAA,GAAG;gBACzE,OAAA,KAAI,CAAC,2BAA2B,EAAE,CAAC,IAAI,CAAC,UAAA,OAAO;oBAC9C,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;wBACd,MAAM,CAAC,KAAK,CAAC;oBACd,CAAC;oBAED,MAAM,CAAC,KAAI,CAAC,WAAW,CAAC,aAAa,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,cAAM,OAAA,IAAI,EAAJ,CAAI,CAAC,CAAC;gBAC3E,CAAC,CACD;YAPA,CAOA,CAAC,CAAC,IAAI,CAAC,UAAA,iBAAiB;gBACxB,EAAE,CAAC,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC;oBACxB,MAAM,CAAC,KAAK,CAAC;gBACd,CAAC;gBACD,KAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,gBAAgB,CAAC,CAAC;gBAElD,MAAM,CAAC,KAAI,CAAC,aAAa,CAAC,UAAU,CAAC;oBACpC,QAAQ,EAAE,QAAQ;oBAClB,OAAO,EAAE;wBACR,SAAS,EAAE,IAAI;qBACf;iBACD,EAAE,UAAU,CAAC,CAAC,IAAI,CAAC,cAAM,OAAA,IAAI,EAAJ,CAAI,CAAC,CAAC;YACjC,CAAC,EAAE,UAAC,KAAK;gBACR,MAAM,IAAI,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAoB,EAAE,IAAwE,EAAE,KAAK,CAAC,CAAC,CAAC;YACtI,CAAC,CAAC,CAAC;QACJ,CAAC;QAEO,0DAA2B,GAAnC;YAAA,iBAcC;YAbA,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,EAAa,EAAE,IAAoB,CAAC,EAAE,CAAC;iBACnH,IAAI,CAAC,UAAA,OAAO;gBACZ,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;oBACd,MAAM,CAAC,IAAI,CAAC;gBACb,CAAC;gBAED,MAAM,CAAC,KAAI,CAAC,4BAA4B,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC;oBACtD,OAAA,IAAI,CAAC,SAAS,CAAC;wBACd,OAAO,EAAE,OAAO;wBAChB,cAAc,EAAE,OAAO,CAAC,qBAAqB,GAAG,OAAO,CAAC,qBAAqB,GAAG,EAAE;qBAClF,EAAE,IAAI,EAAE,IAAI,CAAC;gBAHd,CAGc,CACd,CAAC;YACH,CAAC,CAAC,CAAC;QACJ,CAAC;QAEO,2DAA4B,GAApC,UAAqC,OAAgB;YACpD,EAAE,CAAC,CAAC,CAAC,OAAO,IAAI,CAAC,OAAO,CAAC,qBAAqB,IAAI,OAAO,CAAC,IAAI,KAAK,MAAM,CAAC,CAAC,CAAC;gBAC3E,MAAM,CAAC,qBAAQ,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC;YAC/B,CAAC;YAED,8GAA8G;YAC9G,IAAM,cAAc,GAAG,aAAG,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,YAAY,EAAE,CAAC,QAAQ,CAAC,MAAM,EAAE,eAAe,CAAC,CAAC,CAAC;YACjH,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,UAAA,WAAW;gBACtE,IAAI,CAAC;oBACJ,IAAM,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;oBACjD,EAAE,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;wBACrB,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC;oBACxB,CAAC;oBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,UAAU,CAAC,OAAO,IAAI,OAAO,UAAU,CAAC,OAAO,CAAC,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC;wBAC/E,MAAM,CAAU,UAAU,CAAC,OAAO,CAAC,KAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC;oBAC5D,CAAC;gBAEF,CAAE;gBAAA,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;gBAEnB,MAAM,CAAC,IAAI,CAAC;YACb,CAAC,EAAE,UAAA,GAAG,IAAI,OAAA,IAAI,EAAJ,CAAI,CAAC,CAAC,IAAI,CAAC,UAAC,OAAe;gBACpC,OAAO,CAAC,qBAAqB,CAAC,OAAO,CAAC,UAAA,MAAM;oBAC3C,EAAE,CAAC,CAAC,OAAO,IAAI,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC;wBAC/B,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;4BAC/B,OAAO,GAAG,KAAK,CAAC,IAAI,CAAC,kBAAkB,EAAE,OAAO,CAAC,CAAC;wBACnD,CAAC;wBAED,MAAM,CAAC,OAAO,GAAG,OAAO,CAAC;oBAC1B,CAAC;gBACF,CAAC,CAAC,CAAC;YACJ,CAAC,CAAC,CAAC;QACJ,CAAC;QAEM,kDAAmB,GAA1B,UAA2B,KAAoB;YAC9C,EAAE,CAAC,CAAC,KAAK,CAAC,qBAAqB,EAAE,CAAC,MAAM,KAAK,iBAAO,CAAC,QAAQ,CAAC,CAAC,CAAC;gBAC/D,MAAM,CAAC,KAAK,CAAC;YACd,CAAC;YAED,IAAM,IAAI,GAAG,KAAK,GAAG,KAAK,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC;YAC5C,IAAM,MAAM,GAAG,IAAI,GAAG,IAAI,CAAC,KAAK,EAAE,GAAG,IAAI,CAAC;YAE1C,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,wBAAwB,CAAC,MAAM,CAAC,CAAC;QAChD,CAAC;QAEM,+CAAgB,GAAvB;YACC,MAAM,CAAC,qBAAQ,CAAC,EAAE,CAAC,IAAI,CAAC,oBAAoB,CAAC,gBAAgB,CAAsB,QAAQ,CAAC,CAAC,CAAC;QAC/F,CAAC;QA1LA;uBAAC,yCAAwB;uBACxB,oBAAY;uBACZ,6BAAiB;uBACjB,uCAAuB;uBACvB,qCAAqB;uBACrB,oCAAiB;gCALO;QA2L3B,2BAAC;IAAD,CApMA,AAoMC,IAAA;IApMY,4BAAoB,uBAoMhC,CAAA","file":"vs/workbench/parts/debug/node/debugConfigurationManager.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport path = require('path');\nimport nls = require('vs/nls');\nimport { TPromise } from 'vs/base/common/winjs.base';\nimport strings = require('vs/base/common/strings');\nimport objects = require('vs/base/common/objects');\nimport uri from 'vs/base/common/uri';\nimport { Schemas } from 'vs/base/common/network';\nimport paths = require('vs/base/common/paths');\nimport { IJSONSchema } from 'vs/base/common/jsonSchema';\nimport editor = require('vs/editor/common/editorCommon');\nimport extensionsRegistry = require('vs/platform/extensions/common/extensionsRegistry');\nimport platform = require('vs/platform/platform');\nimport jsonContributionRegistry = require('vs/platform/jsonschemas/common/jsonContributionRegistry');\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport debug = require('vs/workbench/parts/debug/common/debug');\nimport { SystemVariables } from 'vs/workbench/parts/lib/node/systemVariables';\nimport { Adapter } from 'vs/workbench/parts/debug/node/debugAdapter';\nimport { IWorkspaceContextService } from 'vs/workbench/services/workspace/common/contextService';\nimport { IWorkbenchEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { IQuickOpenService } from 'vs/workbench/services/quickopen/common/quickOpenService';\n\n// debuggers extension point\n\nexport var debuggersExtPoint = extensionsRegistry.ExtensionsRegistry.registerExtensionPoint<debug.IRawAdapter[]>('debuggers', {\n\tdescription: nls.localize('vscode.extension.contributes.debuggers', 'Contributes debug adapters.'),\n\ttype: 'array',\n\tdefaultSnippets: [{ body: [{ type: '', extensions: [] }] }],\n\titems: {\n\t\ttype: 'object',\n\t\tdefaultSnippets: [{ body: { type: '', program: '', runtime: '', enableBreakpointsFor: { languageIds: [ '' ] } } }],\n\t\tproperties: {\n\t\t\ttype: {\n\t\t\t\tdescription: nls.localize('vscode.extension.contributes.debuggers.type', \"Unique identifier for this debug adapter.\"),\n\t\t\t\ttype: 'string'\n\t\t\t},\n\t\t\tlabel: {\n\t\t\t\tdescription: nls.localize('vscode.extension.contributes.debuggers.label', \"Display name for this debug adapter.\"),\n\t\t\t\ttype: 'string'\n\t\t\t},\n\t\t\tenableBreakpointsFor: {\n\t\t\t\tdescription: nls.localize('vscode.extension.contributes.debuggers.enableBreakpointsFor', \"Allow breakpoints for these languages.\"),\n\t\t\t\ttype: 'object',\n\t\t\t\tproperties: {\n\t\t\t\t\tlanguageIds : {\n\t\t\t\t\t\tdescription: nls.localize('vscode.extension.contributes.debuggers.enableBreakpointsFor.languageIds', \"List of languages.\"),\n\t\t\t\t\t\ttype: 'array',\n\t\t\t\t\t\titems: {\n\t\t\t\t\t\t\ttype: 'string'\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tprogram: {\n\t\t\t\tdescription: nls.localize('vscode.extension.contributes.debuggers.program', \"Path to the debug adapter program. Path is either absolute or relative to the extension folder.\"),\n\t\t\t\ttype: 'string'\n\t\t\t},\n\t\t\targs: {\n\t\t\t\tdescription: nls.localize('vscode.extension.contributes.debuggers.args', \"Optional arguments to pass to the adapter.\"),\n\t\t\t\ttype: 'array'\n\t\t\t},\n\t\t\truntime : {\n\t\t\t\tdescription: nls.localize('vscode.extension.contributes.debuggers.runtime', \"Optional runtime in case the program attribute is not an executable but requires a runtime.\"),\n\t\t\t\ttype: 'string'\n\t\t\t},\n\t\t\truntimeArgs : {\n\t\t\t\tdescription: nls.localize('vscode.extension.contributes.debuggers.runtimeArgs', \"Optional runtime arguments.\"),\n\t\t\t\ttype: 'array'\n\t\t\t},\n\t\t\tinitialConfigurations: {\n\t\t\t\tdescription: nls.localize('vscode.extension.contributes.debuggers.initialConfigurations', \"Configurations for generating the initial \\'launch.json\\'.\"),\n\t\t\t\ttype: 'array',\n\t\t\t},\n\t\t\tconfigurationAttributes: {\n\t\t\t\tdescription: nls.localize('vscode.extension.contributes.debuggers.configurationAttributes', \"JSON schema configurations for validating \\'launch.json\\'.\"),\n\t\t\t\ttype: 'object'\n\t\t\t},\n\t\t\twindows: {\n\t\t\t\tdescription: nls.localize('vscode.extension.contributes.debuggers.windows', \"Windows specific settings.\"),\n\t\t\t\ttype: 'object',\n\t\t\t\tproperties: {\n\t\t\t\t\truntime : {\n\t\t\t\t\t\tdescription: nls.localize('vscode.extension.contributes.debuggers.windows.runtime', \"Runtime used for Windows.\"),\n\t\t\t\t\t\ttype: 'string'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tosx: {\n\t\t\t\tdescription: nls.localize('vscode.extension.contributes.debuggers.osx', \"OS X specific settings.\"),\n\t\t\t\ttype: 'object',\n\t\t\t\tproperties: {\n\t\t\t\t\truntime : {\n\t\t\t\t\t\tdescription: nls.localize('vscode.extension.contributes.debuggers.osx.runtime', \"Runtime used for OSX.\"),\n\t\t\t\t\t\ttype: 'string'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tlinux: {\n\t\t\t\tdescription: nls.localize('vscode.extension.contributes.debuggers.linux', \"Linux specific settings.\"),\n\t\t\t\ttype: 'object',\n\t\t\t\tproperties: {\n\t\t\t\t\truntime : {\n\t\t\t\t\t\tdescription: nls.localize('vscode.extension.contributes.debuggers.linux.runtime', \"Runtime used for Linux.\"),\n\t\t\t\t\t\ttype: 'string'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n});\n\n// debug general schema\n\nexport var schemaId = 'vscode://schemas/launch';\nconst schema: IJSONSchema = {\n\tid: schemaId,\n\ttype: 'object',\n\ttitle: nls.localize('app.launch.json.title', \"Launch configuration\"),\n\trequired: ['version', 'configurations'],\n\tproperties: {\n\t\tversion: {\n\t\t\ttype: 'string',\n\t\t\tdescription: nls.localize('app.launch.json.version', \"Version of this file format.\"),\n\t\t\tdefault: '0.2.0'\n\t\t},\n\t\tconfigurations: {\n\t\t\ttype: 'array',\n\t\t\tdescription: nls.localize('app.launch.json.configurations', \"List of configurations. Add new configurations or edit existing ones.\"),\n\t\t\titems: {\n\t\t\t\toneOf: []\n\t\t\t}\n\t\t}\n\t}\n};\n\nconst jsonRegistry = <jsonContributionRegistry.IJSONContributionRegistry>platform.Registry.as(jsonContributionRegistry.Extensions.JSONContribution);\njsonRegistry.registerSchema(schemaId, schema);\njsonRegistry.addSchemaFileAssociation('/.vscode/launch.json', schemaId);\n\nexport class ConfigurationManager {\n\n\tprivate configuration: debug.IConfig;\n\tprivate systemVariables: SystemVariables;\n\tprivate adapters: Adapter[];\n\tprivate allModeIdsForBreakpoints: { [key: string]: boolean };\n\n\tconstructor(\n\t\tconfigName: string,\n\t\t@IWorkspaceContextService private contextService: IWorkspaceContextService,\n\t\t@IFileService private fileService: IFileService,\n\t\t@ITelemetryService private telemetryService: ITelemetryService,\n\t\t@IWorkbenchEditorService private editorService: IWorkbenchEditorService,\n\t\t@IConfigurationService private configurationService: IConfigurationService,\n\t\t@IQuickOpenService private quickOpenService: IQuickOpenService\n\t) {\n\t\tthis.systemVariables = this.contextService.getWorkspace() ? new SystemVariables(this.editorService, this.contextService) : null;\n\t\tthis.setConfiguration(configName);\n\t\tthis.adapters = [];\n\t\tthis.registerListeners();\n\t\tthis.allModeIdsForBreakpoints = {};\n\t}\n\n\tprivate registerListeners(): void {\n\t\tdebuggersExtPoint.setHandler((extensions) => {\n\n\t\t\textensions.forEach(extension => {\n\t\t\t\textension.value.forEach(rawAdapter => {\n\t\t\t\t\tconst adapter = new Adapter(rawAdapter, this.systemVariables, extension.description.extensionFolderPath);\n\t\t\t\t\tconst duplicate = this.adapters.filter(a => a.type === adapter.type)[0];\n\t\t\t\t\tif (!rawAdapter.type || (typeof rawAdapter.type !== 'string')) {\n\t\t\t\t\t\textension.collector.error(nls.localize('debugNoType', \"Debug adapter 'type' can not be omitted and must be of type 'string'.\"));\n\t\t\t\t\t}\n\n\t\t\t\t\tif (duplicate) {\n\t\t\t\t\t\tObject.keys(adapter).forEach(attribute => {\n\t\t\t\t\t\t\tif (adapter[attribute]) {\n\t\t\t\t\t\t\t\tif (attribute === 'enableBreakpointsFor') {\n\t\t\t\t\t\t\t\t\tObject.keys(adapter.enableBreakpointsFor).forEach(languageId => duplicate.enableBreakpointsFor[languageId] = true);\n\t\t\t\t\t\t\t\t} else if (duplicate[attribute] && attribute !== 'type') {\n\t\t\t\t\t\t\t\t\t// give priority to the later registered extension.\n\t\t\t\t\t\t\t\t\tduplicate[attribute] = adapter[attribute];\n\t\t\t\t\t\t\t\t\textension.collector.error(nls.localize('duplicateDebuggerType', \"Debug type '{0}' is already registered and has attribute '{1}', ignoring attribute '{1}'.\", adapter.type, attribute));\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tduplicate[attribute] = adapter[attribute];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.adapters.push(adapter);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (adapter.enableBreakpointsFor) {\n\t\t\t\t\t\tadapter.enableBreakpointsFor.languageIds.forEach(modeId => {\n\t\t\t\t\t\t\tthis.allModeIdsForBreakpoints[modeId] = true;\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\n\t\t\t// update the schema to include all attributes and types from extensions.\n\t\t\t// debug.schema.properties['configurations'].items.properties.type.enum = this.adapters.map(adapter => adapter.type);\n\t\t\tthis.adapters.forEach(adapter => {\n\t\t\t\tconst schemaAttributes = adapter.getSchemaAttributes();\n\t\t\t\tif (schemaAttributes) {\n\t\t\t\t\t(<IJSONSchema> schema.properties['configurations'].items).oneOf.push(...schemaAttributes);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tpublic getConfiguration(): debug.IConfig {\n\t\treturn this.configuration;\n\t}\n\n\tpublic getConfigurationName(): string {\n\t\treturn this.configuration ? this.configuration.name : null;\n\t}\n\n\tpublic getAdapter(): Adapter {\n\t\treturn this.adapters.filter(adapter => strings.equalsIgnoreCase(adapter.type, this.configuration.type)).pop();\n\t}\n\n\tpublic setConfiguration(name: string): TPromise<void> {\n\t\treturn this.loadLaunchConfig().then(config => {\n\t\t\tif (!config || !config.configurations) {\n\t\t\t\tthis.configuration = null;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// if the configuration name is not set yet, take the first launch config (can happen if debug viewlet has not been opened yet).\n\t\t\tconst filtered = name ? config.configurations.filter(cfg => cfg.name === name) : [config.configurations[0]];\n\n\t\t\t// massage configuration attributes - append workspace path to relatvie paths, substitute variables in paths.\n\t\t\tthis.configuration = filtered.length === 1 ? objects.deepClone(filtered[0]) : null;\n\t\t\tif (this.configuration) {\n\t\t\t\tif (this.systemVariables) {\n\t\t\t\t\tObject.keys(this.configuration).forEach(key => {\n\t\t\t\t\t\tthis.configuration[key] = this.systemVariables.resolveAny(this.configuration[key]);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tthis.configuration.debugServer = config.debugServer;\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic openConfigFile(sideBySide: boolean): TPromise<boolean> {\n\t\tconst resource = uri.file(paths.join(this.contextService.getWorkspace().resource.fsPath, '/.vscode/launch.json'));\n\n\t\treturn this.fileService.resolveContent(resource).then(content => true, err =>\n\t\t\tthis.getInitialConfigFileContent().then(content => {\n\t\t\t\tif (!content) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\treturn this.fileService.updateContent(resource, content).then(() => true);\n\t\t\t}\n\t\t)).then(configFileCreated => {\n\t\t\tif (!configFileCreated) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tthis.telemetryService.publicLog('debugConfigure');\n\n\t\t\treturn this.editorService.openEditor({\n\t\t\t\tresource: resource,\n\t\t\t\toptions: {\n\t\t\t\t\tforceOpen: true\n\t\t\t\t}\n\t\t\t}, sideBySide).then(() => true);\n\t\t}, (error) => {\n\t\t\tthrow new Error(nls.localize('DebugConfig.failed', \"Unable to create 'launch.json' file inside the '.vscode' folder ({0}).\", error));\n\t\t});\n\t}\n\n\tprivate getInitialConfigFileContent(): TPromise<string> {\n\t\treturn this.quickOpenService.pick(this.adapters, { placeHolder: nls.localize('selectDebug', \"Select Environment\") })\n\t\t.then(adapter => {\n\t\t\tif (!adapter) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\treturn this.massageInitialConfigurations(adapter).then(() =>\n\t\t\t\tJSON.stringify({\n\t\t\t\t\tversion: '0.2.0',\n\t\t\t\t\tconfigurations: adapter.initialConfigurations ? adapter.initialConfigurations : []\n\t\t\t\t}, null, '\\t')\n\t\t\t);\n\t\t});\n\t}\n\n\tprivate massageInitialConfigurations(adapter: Adapter): TPromise<void> {\n\t\tif (!adapter || !adapter.initialConfigurations || adapter.type !== 'node') {\n\t\t\treturn TPromise.as(undefined);\n\t\t}\n\n\t\t// check package.json for 'main' or 'scripts' so we generate a more pecise 'program' attribute in launch.json.\n\t\tconst packageJsonUri = uri.file(paths.join(this.contextService.getWorkspace().resource.fsPath, '/package.json'));\n\t\treturn this.fileService.resolveContent(packageJsonUri).then(jsonContent => {\n\t\t\ttry {\n\t\t\t\tconst jsonObject = JSON.parse(jsonContent.value);\n\t\t\t\tif (jsonObject.main) {\n\t\t\t\t\treturn jsonObject.main;\n\t\t\t\t} else if (jsonObject.scripts && typeof jsonObject.scripts.start === 'string') {\n\t\t\t\t\treturn (<string>jsonObject.scripts.start).split(' ').pop();\n\t\t\t\t}\n\n\t\t\t} catch (error) { }\n\n\t\t\treturn null;\n\t\t}, err => null).then((program: string) => {\n\t\t\tadapter.initialConfigurations.forEach(config => {\n\t\t\t\tif (program && config.program) {\n\t\t\t\t\tif (!path.isAbsolute(program)) {\n\t\t\t\t\t\tprogram = paths.join('${workspaceRoot}', program);\n\t\t\t\t\t}\n\n\t\t\t\t\tconfig.program = program;\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tpublic canSetBreakpointsIn(model: editor.IModel): boolean {\n\t\tif (model.getAssociatedResource().scheme === Schemas.inMemory) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst mode = model ? model.getMode() : null;\n\t\tconst modeId = mode ? mode.getId() : null;\n\n\t\treturn !!this.allModeIdsForBreakpoints[modeId];\n\t}\n\n\tpublic loadLaunchConfig(): TPromise<debug.IGlobalConfig> {\n\t\treturn TPromise.as(this.configurationService.getConfiguration<debug.IGlobalConfig>('launch'));\n\t}\n}\n"]}