{"version":3,"file":"vs/workbench/electron-main/env.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/workbench/electron-main/env.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport crypto = require('crypto');\nimport fs = require('fs');\nimport path = require('path');\nimport os = require('os');\nimport {app} from 'electron';\n\nimport arrays = require('vs/base/common/arrays');\nimport strings = require('vs/base/common/strings');\nimport paths = require('vs/base/common/paths');\nimport platform = require('vs/base/common/platform');\nimport uri from 'vs/base/common/uri';\nimport types = require('vs/base/common/types');\n\nexport interface IUpdateInfo {\n\tbaseUrl: string;\n}\n\nexport interface IProductConfiguration {\n\tnameShort: string;\n\tnameLong: string;\n\tapplicationName: string;\n\twin32AppUserModelId: string;\n\twin32MutexName: string;\n\tdarwinBundleIdentifier: string;\n\tdataFolderName: string;\n\tdownloadUrl: string;\n\tupdateUrl?: string;\n\tquality?: string;\n\tcommit: string;\n\tdate: string;\n\textensionsGallery: {\n\t\tserviceUrl: string;\n\t\titemUrl: string;\n\t};\n\textensionTips: { [id: string]: string; };\n\tcrashReporter: Electron.CrashReporterStartOptions;\n\twelcomePage: string;\n\tenableTelemetry: boolean;\n\taiConfig: {\n\t\tkey: string;\n\t\tasimovKey: string;\n\t};\n\tsendASmile: {\n\t\treportIssueUrl: string,\n\t\trequestFeatureUrl: string\n\t};\n\tdocumentationUrl: string;\n\treleaseNotesUrl: string;\n\ttwitterUrl: string;\n\trequestFeatureUrl: string;\n\treportIssueUrl: string;\n\tlicenseUrl: string;\n\tprivacyStatementUrl: string;\n}\n\nexport const isBuilt = !process.env.VSCODE_DEV;\n\nexport const appRoot = path.dirname(uri.parse(require.toUrl('')).fsPath);\n\nexport const currentWorkingDirectory = process.env.VSCODE_CWD || process.cwd();\n\nlet productContents: IProductConfiguration;\ntry {\n\tproductContents = JSON.parse(fs.readFileSync(path.join(appRoot, 'product.json'), 'utf8'));\n} catch (error) {\n\tproductContents = Object.create(null);\n}\n\nexport const product: IProductConfiguration = productContents;\nproduct.nameShort = product.nameShort + (isBuilt ? '' : ' Dev');\nproduct.nameLong = product.nameLong + (isBuilt ? '' : ' Dev');\nproduct.dataFolderName = product.dataFolderName + (isBuilt ? '' : '-dev');\n\nexport const updateUrl = product.updateUrl;\nexport const quality = product.quality;\n\nexport const mainIPCHandle = getMainIPCHandle();\nexport const sharedIPCHandle = getSharedIPCHandle();\nexport const version = app.getVersion();\nexport const cliArgs = parseCli();\n\nexport const appHome = app.getPath('userData');\n\nexport const appSettingsHome = path.join(appHome, 'User');\nif (!fs.existsSync(appSettingsHome)) {\n\tfs.mkdirSync(appSettingsHome);\n}\nexport const appSettingsPath = path.join(appSettingsHome, 'settings.json');\nexport const appKeybindingsPath = path.join(appSettingsHome, 'keybindings.json');\n\nexport const userHome = path.join(app.getPath('home'), product.dataFolderName);\nif (!fs.existsSync(userHome)) {\n\tfs.mkdirSync(userHome);\n}\n\nexport const userExtensionsHome = cliArgs.extensionsHomePath || path.join(userHome, 'extensions');\nif (!fs.existsSync(userExtensionsHome)) {\n\tfs.mkdirSync(userExtensionsHome);\n}\n\n// Helper to identify if we have extension tests to run from the command line without debugger\nexport const isTestingFromCli = cliArgs.extensionTestsPath && !cliArgs.debugBrkExtensionHost;\n\nexport function log(...a: any[]): void {\n\tif (cliArgs.verboseLogging) {\n\t\tconsole.log.call(null, `(${new Date().toLocaleTimeString()})`, ...a);\n\t}\n}\n\nexport interface IProcessEnvironment {\n\t[key: string]: string;\n}\n\nexport interface ICommandLineArguments {\n\tverboseLogging: boolean;\n\tdebugExtensionHostPort: number;\n\tdebugBrkExtensionHost: boolean;\n\tlogExtensionHostCommunication: boolean;\n\tdisableExtensions: boolean;\n\n\textensionsHomePath: string;\n\textensionDevelopmentPath: string;\n\textensionTestsPath: string;\n\n\tprogramStart: number;\n\n\tpathArguments?: string[];\n\n\tenablePerformance?: boolean;\n\n\tfirstrun?: boolean;\n\n\topenNewWindow?: boolean;\n\topenInSameWindow?: boolean;\n\n\tgotoLineMode?: boolean;\n\tdiffMode?: boolean;\n\n\tlocale?: string;\n\n\twaitForWindowClose?: boolean;\n}\n\nfunction parseCli(): ICommandLineArguments {\n\n\t// We need to do some argv massaging. First, remove the Electron executable\n\tlet args = Array.prototype.slice.call(process.argv, 1);\n\n\t// Then, when in dev, remove the first non option argument, it will be the app location\n\tif (!isBuilt) {\n\t\tlet i = (() => {\n\t\t\tfor (let j = 0; j < args.length; j++) {\n\t\t\t\tif (args[j][0] !== '-') {\n\t\t\t\t\treturn j;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn -1;\n\t\t})();\n\n\t\tif (i > -1) {\n\t\t\targs.splice(i, 1);\n\t\t}\n\t}\n\n\t// Finally, any extra arguments in the 'argv' file should be prepended\n\tif (fs.existsSync(path.join(appRoot, 'argv'))) {\n\t\tlet extraargs: string[] = JSON.parse(fs.readFileSync(path.join(appRoot, 'argv'), 'utf8'));\n\t\targs = extraargs.concat(args);\n\t}\n\n\tlet opts = parseOpts(args);\n\n\tlet gotoLineMode = !!opts['g'] || !!opts['goto'];\n\n\tlet debugBrkExtensionHostPort = parseNumber(args, '--debugBrkPluginHost', 5870);\n\tlet debugExtensionHostPort: number;\n\tlet debugBrkExtensionHost: boolean;\n\tif (debugBrkExtensionHostPort) {\n\t\tdebugExtensionHostPort = debugBrkExtensionHostPort;\n\t\tdebugBrkExtensionHost = true;\n\t} else {\n\t\tdebugExtensionHostPort = parseNumber(args, '--debugPluginHost', 5870, isBuilt ? void 0 : 5870);\n\t}\n\n\tlet pathArguments = parsePathArguments(args, gotoLineMode);\n\n\treturn {\n\t\tpathArguments: pathArguments,\n\t\tprogramStart: parseNumber(args, '--timestamp', 0, 0),\n\t\tenablePerformance: !!opts['p'],\n\t\tverboseLogging: !!opts['verbose'],\n\t\tdebugExtensionHostPort: debugExtensionHostPort,\n\t\tdebugBrkExtensionHost: debugBrkExtensionHost,\n\t\tlogExtensionHostCommunication: !!opts['logExtensionHostCommunication'],\n\t\tfirstrun: !!opts['squirrel-firstrun'],\n\t\topenNewWindow: !!opts['n'] || !!opts['new-window'],\n\t\topenInSameWindow: !!opts['r'] || !!opts['reuse-window'],\n\t\tgotoLineMode: gotoLineMode,\n\t\tdiffMode: (!!opts['d'] || !!opts['diff']) && pathArguments.length === 2,\n\t\textensionsHomePath: normalizePath(parseString(args, '--extensionHomePath')),\n\t\textensionDevelopmentPath: normalizePath(parseString(args, '--extensionDevelopmentPath')),\n\t\textensionTestsPath: normalizePath(parseString(args, '--extensionTestsPath')),\n\t\tdisableExtensions: !!opts['disableExtensions'] || !!opts['disable-extensions'],\n\t\tlocale: parseString(args, '--locale'),\n\t\twaitForWindowClose: !!opts['w'] || !!opts['wait']\n\t};\n}\n\nfunction getIPCHandleName(): string {\n\tlet handleName = app.getName();\n\n\tif (!isBuilt) {\n\t\thandleName += '-dev';\n\t}\n\n\t// Support to run VS Code multiple times as different user\n\t// by making the socket unique over the logged in user\n\tlet userId = uniqueUserId();\n\tif (userId) {\n\t\thandleName += ('-' + userId);\n\t}\n\n\tif (process.platform === 'win32') {\n\t\treturn '\\\\\\\\.\\\\pipe\\\\' + handleName;\n\t}\n\n\treturn path.join(os.tmpdir(), handleName);\n}\n\nfunction getMainIPCHandle(): string {\n\treturn getIPCHandleName() + (process.platform === 'win32' ? '-sock' : '.sock');\n}\n\nfunction getSharedIPCHandle(): string {\n\treturn getIPCHandleName() + '-shared' + (process.platform === 'win32' ? '-sock' : '.sock');\n}\n\nfunction uniqueUserId(): string {\n\tlet username: string;\n\tif (platform.isWindows) {\n\t\tusername = process.env.USERNAME;\n\t} else {\n\t\tusername = process.env.USER;\n\t}\n\n\tif (!username) {\n\t\treturn ''; // fail gracefully if there is no user name\n\t}\n\n\t// use sha256 to ensure the userid value can be used in filenames and are unique\n\treturn crypto.createHash('sha256').update(username).digest('hex').substr(0, 6);\n}\n\ntype OptionBag = { [opt: string]: boolean; };\n\nfunction parseOpts(argv: string[]): OptionBag {\n\treturn argv\n\t\t.filter(a => /^-/.test(a))\n\t\t.map(a => a.replace(/^-*/, ''))\n\t\t.reduce((r, a) => { r[a] = true; return r; }, <OptionBag>{});\n}\n\nfunction parsePathArguments(argv: string[], gotoLineMode?: boolean): string[] {\n\treturn arrays.coalesce(\t\t\t\t\t\t\t// no invalid paths\n\t\tarrays.distinct(\t\t\t\t\t\t\t// no duplicates\n\t\t\targv.filter(a => !(/^-/.test(a))) \t\t// arguments without leading \"-\"\n\t\t\t\t.map((arg) => {\n\t\t\t\t\tlet pathCandidate = arg;\n\n\t\t\t\t\tlet parsedPath: IParsedPath;\n\t\t\t\t\tif (gotoLineMode) {\n\t\t\t\t\t\tparsedPath = parseLineAndColumnAware(arg);\n\t\t\t\t\t\tpathCandidate = parsedPath.path;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (pathCandidate) {\n\t\t\t\t\t\tpathCandidate = preparePath(pathCandidate);\n\t\t\t\t\t}\n\n\t\t\t\t\tlet realPath: string;\n\t\t\t\t\ttry {\n\t\t\t\t\t\trealPath = fs.realpathSync(pathCandidate);\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t// in case of an error, assume the user wants to create this file\n\t\t\t\t\t\t// if the path is relative, we join it to the cwd\n\t\t\t\t\t\trealPath = path.normalize(path.isAbsolute(pathCandidate) ? pathCandidate : path.join(currentWorkingDirectory, pathCandidate));\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!paths.isValidBasename(path.basename(realPath))) {\n\t\t\t\t\t\treturn null; // do not allow invalid file names\n\t\t\t\t\t}\n\n\t\t\t\t\tif (gotoLineMode) {\n\t\t\t\t\t\tparsedPath.path = realPath;\n\t\t\t\t\t\treturn toLineAndColumnPath(parsedPath);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn realPath;\n\t\t\t\t}),\n\t\t\t(element) => {\n\t\t\t\treturn element && (platform.isWindows || platform.isMacintosh) ? element.toLowerCase() : element; // only linux is case sensitive on the fs\n\t\t\t}\n\t\t)\n\t);\n}\n\nfunction preparePath(p: string): string {\n\n\t// Trim trailing quotes\n\tif (platform.isWindows) {\n\t\tp = strings.rtrim(p, '\"'); // https://github.com/Microsoft/vscode/issues/1498\n\t}\n\n\t// Trim whitespaces\n\tp = strings.trim(strings.trim(p, ' '), '\\t');\n\n\tif (platform.isWindows) {\n\n\t\t// Resolve the path against cwd if it is relative\n\t\tp = path.resolve(currentWorkingDirectory, p);\n\n\t\t// Trim trailing '.' chars on Windows to prevent invalid file names\n\t\tp = strings.rtrim(p, '.');\n\t}\n\n\treturn p;\n}\n\nfunction normalizePath(p?: string): string {\n\treturn p ? path.normalize(p) : p;\n}\n\nfunction parseNumber(argv: string[], key: string, defaultValue?: number, fallbackValue?: number): number {\n\tlet value: number;\n\n\tfor (let i = 0; i < argv.length; i++) {\n\t\tlet segments = argv[i].split('=');\n\t\tif (segments[0] === key) {\n\t\t\tvalue = Number(segments[1]) || defaultValue;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn types.isNumber(value) ? value : fallbackValue;\n}\n\nfunction parseString(argv: string[], key: string, defaultValue?: string, fallbackValue?: string): string {\n\tlet value: string;\n\n\tfor (let i = 0; i < argv.length; i++) {\n\t\tlet segments = argv[i].split('=');\n\t\tif (segments[0] === key) {\n\t\t\tvalue = String(segments[1]) || defaultValue;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn types.isString(value) ? strings.trim(value, '\"') : fallbackValue;\n}\n\nexport function getPlatformIdentifier(): string {\n\tif (process.platform === 'linux') {\n\t\treturn `linux-${process.arch}`;\n\t}\n\n\treturn process.platform;\n}\n\nexport interface IParsedPath {\n\tpath: string;\n\tline?: number;\n\tcolumn?: number;\n}\n\nexport function parseLineAndColumnAware(rawPath: string): IParsedPath {\n\tlet segments = rawPath.split(':'); // C:\\file.txt:<line>:<column>\n\n\tlet path: string;\n\tlet line: number = null;\n\tlet column: number = null;\n\n\tsegments.forEach(segment => {\n\t\tlet segmentAsNumber = Number(segment);\n\t\tif (!types.isNumber(segmentAsNumber)) {\n\t\t\tpath = !!path ? [path, segment].join(':') : segment; // a colon can well be part of a path (e.g. C:\\...)\n\t\t} else if (line === null) {\n\t\t\tline = segmentAsNumber;\n\t\t} else if (column === null) {\n\t\t\tcolumn = segmentAsNumber;\n\t\t}\n\t});\n\n\treturn {\n\t\tpath: path,\n\t\tline: line !== null ? line : void 0,\n\t\tcolumn: column !== null ? column : line !== null ? 1 : void 0 // if we have a line, make sure column is also set\n\t};\n}\n\nexport function toLineAndColumnPath(parsedPath: IParsedPath): string {\n\tlet segments = [parsedPath.path];\n\n\tif (types.isNumber(parsedPath.line)) {\n\t\tsegments.push(String(parsedPath.line));\n\t}\n\n\tif (types.isNumber(parsedPath.column)) {\n\t\tsegments.push(String(parsedPath.column));\n\t}\n\n\treturn segments.join(':');\n}"]}