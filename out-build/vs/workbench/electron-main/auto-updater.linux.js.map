{"version":3,"file":"vs/workbench/electron-main/auto-updater.linux.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/workbench/electron-main/auto-updater.linux.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;IAEhG,YAAY,CAAC;IAiBb;QAA0C,wCAAmB;QAK5D;YACC,iBAAO,CAAC;YAER,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC;YAChB,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;QAC5B,CAAC;QAED,yCAAU,GAAV,UAAW,GAAW;YACrB,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QAChB,CAAC;QAED,8CAAe,GAAf;YAAA,iBAgCC;YA/BA,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;gBACf,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;YACrC,CAAC;YAED,EAAE,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC;gBACzB,MAAM,CAAC;YACR,CAAC;YAED,IAAI,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;YAEjC,IAAM,QAAQ,GAAG,kBAAQ,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;YACjD,IAAM,SAAS,GAAG,kBAAQ,CAAC,QAAQ,CAAC,qBAAqB,EAAE,IAAI,CAAC,CAAC;YACjE,IAAM,KAAK,GAAG,qBAAa,CAAC,IAAI,CAAC,GAAG,EAAE,EAAE,UAAA,QAAQ,EAAE,WAAA,SAAS,EAAE,CAAC,CAAC;YAE/D,IAAI,CAAC,cAAc,GAAG,cAAI,CAAU,EAAE,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,OAAA,KAAK,EAAE,CAAC;iBAC3D,IAAI,CAAC,UAAA,MAAM;gBACX,EAAE,CAAC,CAAC,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC;oBAC/C,KAAI,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC;gBACnC,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACP,KAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE,IAAI,EAAE,GAAG,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;gBAC9D,CAAC;YACF,CAAC,CAAC;iBACD,IAAI,CAAC,IAAI,EAAE,UAAA,CAAC;gBACZ,EAAE,CAAC,CAAC,gBAAQ,CAAC,CAAC,CAAC,IAAI,kBAAkB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oBAC/C,MAAM,CAAC;gBACR,CAAC;gBAED,KAAI,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC;gBAClC,KAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;YACvB,CAAC,CAAC;iBACD,IAAI,CAAC,cAAM,OAAA,KAAI,CAAC,cAAc,GAAG,IAAI,EAA1B,CAA0B,CAAC,CAAC;QAC1C,CAAC;QACF,2BAAC;IAAD,CAAC,AAjDD,CAA0C,MAAM,CAAC,YAAY,GAiD5D;IAjDY,4BAAoB,uBAiDhC,CAAA","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport events = require('events');\nimport {isString} from 'vs/base/common/types';\nimport {Promise} from 'vs/base/common/winjs.base';\nimport {json } from 'vs/base/node/request';\nimport { getProxyAgent } from 'vs/base/node/proxy';\nimport {manager as Settings} from 'vs/workbench/electron-main/settings';\nimport env = require('vs/workbench/electron-main/env');\n\nexport interface IUpdate {\n\turl: string;\n\tname: string;\n\treleaseNotes?: string;\n\tversion?: string;\n}\n\nexport class LinuxAutoUpdaterImpl extends events.EventEmitter {\n\n\tprivate url: string;\n\tprivate currentRequest: Promise;\n\n\tconstructor() {\n\t\tsuper();\n\n\t\tthis.url = null;\n\t\tthis.currentRequest = null;\n\t}\n\n\tsetFeedURL(url: string): void {\n\t\tthis.url = url;\n\t}\n\n\tcheckForUpdates(): void {\n\t\tif (!this.url) {\n\t\t\tthrow new Error('No feed url set.');\n\t\t}\n\n\t\tif (this.currentRequest) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.emit('checking-for-update');\n\n\t\tconst proxyUrl = Settings.getValue('http.proxy');\n\t\tconst strictSSL = Settings.getValue('http.proxyStrictSSL', true);\n\t\tconst agent = getProxyAgent(this.url, { proxyUrl, strictSSL });\n\n\t\tthis.currentRequest = json<IUpdate>({ url: this.url, agent })\n\t\t\t.then(update => {\n\t\t\t\tif (!update || !update.url || !update.version) {\n\t\t\t\t\tthis.emit('update-not-available');\n\t\t\t\t} else {\n\t\t\t\t\tthis.emit('update-available', null, env.product.downloadUrl);\n\t\t\t\t}\n\t\t\t})\n\t\t\t.then(null, e => {\n\t\t\t\tif (isString(e) && /^Server returned/.test(e)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tthis.emit('update-not-available');\n\t\t\t\tthis.emit('error', e);\n\t\t\t})\n\t\t\t.then(() => this.currentRequest = null);\n\t}\n}\n"]}