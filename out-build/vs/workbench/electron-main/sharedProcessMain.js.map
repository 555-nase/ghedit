{"version":3,"file":"vs/workbench/electron-main/sharedProcessMain.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/workbench/electron-main/sharedProcessMain.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as fs from 'fs';\nimport platform = require('vs/base/common/platform');\nimport { serve, Server, connect } from 'vs/base/node/service.net';\nimport { TPromise } from 'vs/base/common/winjs.base';\nimport { createInstantiationService as createInstantiationService } from 'vs/platform/instantiation/common/instantiationService';\nimport { SyncDescriptor } from 'vs/platform/instantiation/common/descriptors';\n\n// Services\nimport { IRequestService } from 'vs/platform/request/common/request';\nimport { RequestService } from 'vs/workbench/services/request/node/requestService';\nimport { IWorkspaceContextService, IConfiguration } from 'vs/platform/workspace/common/workspace';\nimport { WorkspaceContextService } from 'vs/workbench/services/workspace/common/contextService';\nimport { IEventService } from 'vs/platform/event/common/event';\nimport { EventService } from 'vs/platform/event/common/eventService';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { ConfigurationService } from 'vs/workbench/services/configuration/node/configurationService';\n\n// Extra services\nimport { IExtensionsService } from 'vs/workbench/parts/extensions/common/extensions';\nimport { ExtensionsService } from 'vs/workbench/parts/extensions/node/extensionsService';\n\ninterface IInitData {\n\tconfiguration: IConfiguration;\n\tcontextServiceOptions: { settings: any };\n}\n\nfunction quit(err?: Error) {\n\tif (err) {\n\t\tconsole.error(err);\n\t}\n\n\tprocess.exit(err ? 1 : 0);\n}\n\n/**\n * Plan B is to kill oneself if one's parent dies. Much drama.\n */\nfunction setupPlanB(parentPid: number): void {\n\tsetInterval(function () {\n\t\ttry {\n\t\t\tprocess.kill(parentPid, 0); // throws an exception if the main process doesn't exist anymore.\n\t\t} catch (e) {\n\t\t\tprocess.exit();\n\t\t}\n\t}, 5000);\n}\n\nfunction main(server: Server, initData: IInitData): void {\n\tconst eventService = new EventService();\n\tconst contextService = new WorkspaceContextService(eventService, null, initData.configuration, initData.contextServiceOptions);\n\tconst configurationService = new ConfigurationService(contextService, eventService);\n\tconst requestService = new RequestService(contextService, configurationService);\n\n\tconst instantiationService = createInstantiationService();\n\tinstantiationService.addSingleton(IEventService, eventService);\n\tinstantiationService.addSingleton(IWorkspaceContextService, contextService);\n\tinstantiationService.addSingleton(IConfigurationService, configurationService);\n\tinstantiationService.addSingleton(IRequestService, requestService);\n\n\tinstantiationService.addSingleton(IExtensionsService, new SyncDescriptor(ExtensionsService));\n\tconst extensionService = <ExtensionsService> instantiationService.getInstance(IExtensionsService);\n\tserver.registerService('ExtensionService', extensionService);\n\n\t// eventually clean up old extensions\n\tsetTimeout(() => extensionService.removeDeprecatedExtensions(), 5000);\n}\n\nfunction setupIPC(hook: string): TPromise<Server> {\n\tfunction setup(retry: boolean): TPromise<Server> {\n\t\treturn serve(hook).then(null, err => {\n\t\t\tif (!retry || platform.isWindows || err.code !== 'EADDRINUSE') {\n\t\t\t\treturn TPromise.wrapError(err);\n\t\t\t}\n\n\t\t\t// should retry, not windows and eaddrinuse\n\n\t\t\treturn connect(hook).then(\n\t\t\t\tclient => {\n\t\t\t\t\t// we could connect to a running instance. this is not good, abort\n\t\t\t\t\tclient.dispose();\n\t\t\t\t\treturn TPromise.wrapError(new Error('There is an instance already running.'));\n\t\t\t\t},\n\t\t\t\terr => {\n\t\t\t\t\t// it happens on Linux and OS X that the pipe is left behind\n\t\t\t\t\t// let's delete it, since we can't connect to it\n\t\t\t\t\t// and the retry the whole thing\n\t\t\t\t\ttry {\n\t\t\t\t\t\tfs.unlinkSync(hook);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\treturn TPromise.wrapError(new Error('Error deleting the shared ipc hook.'));\n\t\t\t\t\t}\n\n\t\t\t\t\treturn setup(false);\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t}\n\n\treturn setup(true);\n}\n\nfunction handshake(): TPromise<IInitData> {\n\treturn new TPromise<IInitData>((c, e) => {\n\t\tprocess.once('message', c);\n\t\tprocess.once('error', e);\n\t\tprocess.send('hello');\n\t});\n}\n\nTPromise.join<any>([setupIPC(process.env['VSCODE_SHARED_IPC_HOOK']), handshake()])\n\t.then(r => main(r[0], r[1]))\n\t.then(() => setupPlanB(process.env['VSCODE_PID']))\n\t.done(null, quit);"]}