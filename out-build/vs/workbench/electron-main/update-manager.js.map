{"version":3,"file":"vs/workbench/electron-main/update-manager.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/workbench/electron-main/update-manager.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;IAEhG,YAAY,CAAC;IAcb,WAAY,KAAK;QAChB,mDAAa,CAAA;QACb,iCAAI,CAAA;QACJ,2DAAiB,CAAA;QACjB,uDAAe,CAAA;QACf,yDAAgB,CAAA;IACjB,CAAC,EANW,aAAK,KAAL,aAAK,QAMhB;IAND,IAAY,KAAK,GAAL,aAMX,CAAA;IAED,WAAY,aAAa;QACxB,yDAAQ,CAAA;QACR,yDAAQ,CAAA;IACT,CAAC,EAHW,qBAAa,KAAb,qBAAa,QAGxB;IAHD,IAAY,aAAa,GAAb,qBAGX,CAAA;IAcD;QAAmC,iCAAmB;QAUrD;YACC,iBAAO,CAAC;YAER,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC,aAAa,CAAC;YAClC,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC,QAAQ,CAAC;YAC5C,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;YAC7B,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;YAC3B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;YACrB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;YAErB,EAAE,CAAC,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC;gBACxB,IAAI,CAAC,GAAG,GAAG,IAAI,yCAAoB,EAAE,CAAC;YACvC,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;gBAC7B,IAAI,CAAC,GAAG,GAAG,IAAI,yCAAoB,EAAE,CAAC;YACvC,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC;gBACjC,IAAI,CAAC,GAAG,GAAG,QAAQ,CAAC,WAAW,CAAC;YACjC,CAAC;YAED,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;gBACd,IAAI,CAAC,OAAO,EAAE,CAAC;YAChB,CAAC;QACF,CAAC;QAEO,+BAAO,GAAf;YAAA,iBA4CC;YA3CA,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,EAAE,UAAC,KAAU,EAAE,OAAe;gBAChD,KAAI,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;gBACnC,KAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YAC3B,CAAC,CAAC,CAAC;YAEH,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,qBAAqB,EAAE;gBAClC,KAAI,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;gBACjC,KAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC;YACxC,CAAC,CAAC,CAAC;YAEH,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,UAAC,KAAK,EAAE,GAAW;gBAClD,KAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE,GAAG,CAAC,CAAC;gBAEnC,IAAI,IAAI,GAAY,IAAI,CAAC;gBAEzB,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACT,IAAI,GAAG;wBACN,YAAY,EAAE,EAAE;wBAChB,OAAO,EAAE,EAAE;wBACX,IAAI,EAAE,IAAI,IAAI,EAAE;wBAChB,aAAa,EAAE,cAAM,OAAA,QAAQ,CAAC,KAAK,CAAC,YAAY,CAAC,GAAG,CAAC,EAAhC,CAAgC;qBACrD,CAAC;gBACH,CAAC;gBAED,KAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,eAAe,EAAE,IAAI,CAAC,CAAC;YAC5C,CAAC,CAAC,CAAC;YAEH,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,sBAAsB,EAAE;gBACnC,KAAI,CAAC,IAAI,CAAC,sBAAsB,EAAE,KAAI,CAAC,aAAa,KAAK,aAAa,CAAC,QAAQ,CAAC,CAAC;gBACjF,KAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YAC3B,CAAC,CAAC,CAAC;YAEH,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,mBAAmB,EAAE,UAAC,KAAU,EAAE,YAAoB,EAAE,OAAe,EAAE,IAAU,EAAE,GAAW,EAAE,gBAA4B;gBACzI,IAAI,IAAI,GAAY;oBACnB,YAAY,EAAE,YAAY;oBAC1B,OAAO,EAAE,OAAO;oBAChB,IAAI,EAAE,IAAI;oBACV,aAAa,EAAE,cAAM,OAAA,KAAI,CAAC,aAAa,CAAC,gBAAgB,CAAC,EAApC,CAAoC;iBACzD,CAAC;gBAEF,KAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE,IAAI,CAAC,CAAC;gBACrC,KAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,gBAAgB,EAAE,IAAI,CAAC,CAAC;YAC7C,CAAC,CAAC,CAAC;QACJ,CAAC;QAEO,qCAAa,GAArB,UAAsB,gBAA4B;YACjD,mBAAS,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,UAAA,KAAK;gBAC1B,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;oBACX,MAAM,CAAC;gBACR,CAAC;gBAED,8EAA8E;gBAC9E,6EAA6E;gBAC7E,0DAA0D;gBAC1D,EAAE,CAAC,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC;oBAC1B,QAAQ,CAAC,OAAO,CAAC,cAAc,CAAC,gBAAgB,EAAE,CAAC;gBACpD,CAAC;gBAED,gBAAgB,EAAE,CAAC;YACpB,CAAC,CAAC,CAAC;QACJ,CAAC;QAED,sBAAW,kCAAO;iBAAlB;gBACC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;YACtB,CAAC;;;WAAA;QAED,sBAAW,kCAAO;iBAAlB;gBACC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;YACtB,CAAC;;;WAAA;QAEM,kCAAU,GAAjB;YAAA,iBA+BC;YA9BA,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;gBAClB,MAAM,CAAC,CAAC,sBAAsB;YAC/B,CAAC;YAED,IAAM,OAAO,GAAG,aAAa,CAAC,gBAAgB,EAAE,CAAC;YACjD,IAAM,OAAO,GAAG,aAAa,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC;YAExD,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;gBACd,MAAM,CAAC,CAAC,wBAAwB;YACjC,CAAC;YAED,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;YACxB,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;YAExB,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;YAC7B,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YAE1B,gDAAgD;YAChD,IAAI,KAAK,GAAG,UAAU,CAAC,cAAM,OAAA,KAAI,CAAC,eAAe,EAAE,EAAtB,CAAsB,EAAE,EAAE,GAAG,IAAI,CAAC,CAAC;YAEhE,uCAAuC;YACvC,IAAI,CAAC,EAAE,CAAC,OAAO,EAAE,UAAC,KAAU,EAAE,OAAe,IAAK,OAAA,OAAO,CAAC,KAAK,CAAC,KAAK,EAAE,OAAO,CAAC,EAA7B,CAA6B,CAAC,CAAC;YAEjF,uCAAuC;YACvC,IAAI,CAAC,EAAE,CAAC,qBAAqB,EAAE,cAAM,OAAA,YAAY,CAAC,KAAK,CAAC,EAAnB,CAAmB,CAAC,CAAC;YAE1D,+CAA+C;YAC/C,IAAI,CAAC,EAAE,CAAC,sBAAsB,EAAE;gBAC/B,KAAK,GAAG,UAAU,CAAC,cAAM,OAAA,KAAI,CAAC,eAAe,EAAE,EAAtB,CAAsB,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;YAClE,CAAC,CAAC,CAAC;QACJ,CAAC;QAED,sBAAW,gCAAK;iBAAhB;gBACC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;YACpB,CAAC;;;WAAA;QAED,sBAAW,0CAAe;iBAA1B;gBACC,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC;YAC9B,CAAC;;;WAAA;QAED,sBAAW,wCAAa;iBAAxB;gBACC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC;YAC5B,CAAC;;;WAAA;QAEM,uCAAe,GAAtB,UAAuB,QAAgB;YAAhB,wBAAgB,GAAhB,gBAAgB;YACtC,IAAI,CAAC,aAAa,GAAG,QAAQ,GAAG,aAAa,CAAC,QAAQ,GAAG,aAAa,CAAC,QAAQ,CAAC;YAChF,IAAI,CAAC,cAAc,GAAG,IAAI,IAAI,EAAE,CAAC;YACjC,IAAI,CAAC,GAAG,CAAC,eAAe,EAAE,CAAC;QAC5B,CAAC;QAEO,gCAAQ,GAAhB,UAAiB,KAAY,EAAE,eAA+B;YAA/B,+BAA+B,GAA/B,sBAA+B;YAC7D,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;YACpB,IAAI,CAAC,gBAAgB,GAAG,eAAe,CAAC;YACxC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACrB,CAAC;QAEc,8BAAgB,GAA/B;YACC,IAAM,OAAO,GAAG,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,gBAAgB,CAAC,IAAI,SAAS,CAAC;YACzE,MAAM,CAAC,OAAO,KAAK,MAAM,GAAG,IAAI,GAAG,GAAG,CAAC,OAAO,CAAC;QAChD,CAAC;QAEc,8BAAgB,GAA/B,UAAgC,OAAe;YAC9C,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;gBACd,MAAM,CAAC,IAAI,CAAC;YACb,CAAC;YAED,EAAE,CAAC,CAAC,QAAQ,CAAC,SAAS,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;gBACrG,MAAM,CAAC,IAAI,CAAC;YACb,CAAC;YAED,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,SAAS,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;gBAC3C,MAAM,CAAC,IAAI,CAAC;YACb,CAAC;YAED,MAAM,CAAK,GAAG,CAAC,SAAS,oBAAiB,GAAG,CAAC,qBAAqB,EAAE,SAAM,OAAO,SAAM,GAAG,CAAC,OAAO,CAAC,MAAS,CAAC;QAC9G,CAAC;QACF,oBAAC;IAAD,CAAC,AArLD,CAAmC,MAAM,CAAC,YAAY,GAqLrD;IArLY,qBAAa,gBAqLzB,CAAA;IAEY,gBAAQ,GAAG,IAAI,aAAa,EAAE,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport fs = require('fs');\nimport path = require('path');\nimport events = require('events');\n\nimport electron = require('electron');\nimport platform = require('vs/base/common/platform');\nimport env = require('vs/workbench/electron-main/env');\nimport settings = require('vs/workbench/electron-main/settings');\nimport {Win32AutoUpdaterImpl} from 'vs/workbench/electron-main/auto-updater.win32';\nimport {LinuxAutoUpdaterImpl} from 'vs/workbench/electron-main/auto-updater.linux';\nimport {manager as Lifecycle} from 'vs/workbench/electron-main/lifecycle';\n\nexport enum State {\n\tUninitialized,\n\tIdle,\n\tCheckingForUpdate,\n\tUpdateAvailable,\n\tUpdateDownloaded\n}\n\nexport enum ExplicitState {\n\tImplicit,\n\tExplicit\n}\n\nexport interface IUpdate {\n\treleaseNotes: string;\n\tversion: string;\n\tdate: Date;\n\tquitAndUpdate: () => void;\n}\n\ninterface IAutoUpdater extends NodeJS.EventEmitter {\n\tsetFeedURL(url: string): void;\n\tcheckForUpdates(): void;\n}\n\nexport class UpdateManager extends events.EventEmitter {\n\n\tprivate _state: State;\n\tprivate explicitState: ExplicitState;\n\tprivate _availableUpdate: IUpdate;\n\tprivate _lastCheckDate: Date;\n\tprivate raw: IAutoUpdater;\n\tprivate _feedUrl: string;\n\tprivate _channel: string;\n\n\tconstructor() {\n\t\tsuper();\n\n\t\tthis._state = State.Uninitialized;\n\t\tthis.explicitState = ExplicitState.Implicit;\n\t\tthis._availableUpdate = null;\n\t\tthis._lastCheckDate = null;\n\t\tthis._feedUrl = null;\n\t\tthis._channel = null;\n\n\t\tif (platform.isWindows) {\n\t\t\tthis.raw = new Win32AutoUpdaterImpl();\n\t\t} else if (platform.isLinux) {\n\t\t\tthis.raw = new LinuxAutoUpdaterImpl();\n\t\t} else if (platform.isMacintosh) {\n\t\t\tthis.raw = electron.autoUpdater;\n\t\t}\n\n\t\tif (this.raw) {\n\t\t\tthis.initRaw();\n\t\t}\n\t}\n\n\tprivate initRaw(): void {\n\t\tthis.raw.on('error', (event: any, message: string) => {\n\t\t\tthis.emit('error', event, message);\n\t\t\tthis.setState(State.Idle);\n\t\t});\n\n\t\tthis.raw.on('checking-for-update', () => {\n\t\t\tthis.emit('checking-for-update');\n\t\t\tthis.setState(State.CheckingForUpdate);\n\t\t});\n\n\t\tthis.raw.on('update-available', (event, url: string) => {\n\t\t\tthis.emit('update-available', url);\n\n\t\t\tlet data: IUpdate = null;\n\n\t\t\tif (url) {\n\t\t\t\tdata = {\n\t\t\t\t\treleaseNotes: '',\n\t\t\t\t\tversion: '',\n\t\t\t\t\tdate: new Date(),\n\t\t\t\t\tquitAndUpdate: () => electron.shell.openExternal(url)\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tthis.setState(State.UpdateAvailable, data);\n\t\t});\n\n\t\tthis.raw.on('update-not-available', () => {\n\t\t\tthis.emit('update-not-available', this.explicitState === ExplicitState.Explicit);\n\t\t\tthis.setState(State.Idle);\n\t\t});\n\n\t\tthis.raw.on('update-downloaded', (event: any, releaseNotes: string, version: string, date: Date, url: string, rawQuitAndUpdate: () => void) => {\n\t\t\tlet data: IUpdate = {\n\t\t\t\treleaseNotes: releaseNotes,\n\t\t\t\tversion: version,\n\t\t\t\tdate: date,\n\t\t\t\tquitAndUpdate: () => this.quitAndUpdate(rawQuitAndUpdate)\n\t\t\t};\n\n\t\t\tthis.emit('update-downloaded', data);\n\t\t\tthis.setState(State.UpdateDownloaded, data);\n\t\t});\n\t}\n\n\tprivate quitAndUpdate(rawQuitAndUpdate: () => void): void {\n\t\tLifecycle.quit().done(vetod => {\n\t\t\tif (vetod) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// for some reason updating on Mac causes the local storage not to be flushed.\n\t\t\t// we workaround this issue by forcing an explicit flush of the storage data.\n\t\t\t// see also https://github.com/Microsoft/vscode/issues/172\n\t\t\tif (platform.isMacintosh) {\n\t\t\t\telectron.session.defaultSession.flushStorageData();\n\t\t\t}\n\n\t\t\trawQuitAndUpdate();\n\t\t});\n\t}\n\n\tpublic get feedUrl(): string {\n\t\treturn this._feedUrl;\n\t}\n\n\tpublic get channel(): string {\n\t\treturn this._channel;\n\t}\n\n\tpublic initialize(): void {\n\t\tif (this.feedUrl) {\n\t\t\treturn; // already initialized\n\t\t}\n\n\t\tconst channel = UpdateManager.getUpdateChannel();\n\t\tconst feedUrl = UpdateManager.getUpdateFeedUrl(channel);\n\n\t\tif (!feedUrl) {\n\t\t\treturn; // updates not available\n\t\t}\n\n\t\tthis._channel = channel;\n\t\tthis._feedUrl = feedUrl;\n\n\t\tthis.raw.setFeedURL(feedUrl);\n\t\tthis.setState(State.Idle);\n\n\t\t// Check for updates on startup after 30 seconds\n\t\tlet timer = setTimeout(() => this.checkForUpdates(), 30 * 1000);\n\n\t\t// Clear timer when checking for update\n\t\tthis.on('error', (error: any, message: string) => console.error(error, message));\n\n\t\t// Clear timer when checking for update\n\t\tthis.on('checking-for-update', () => clearTimeout(timer));\n\n\t\t// If update not found, try again in 10 minutes\n\t\tthis.on('update-not-available', () => {\n\t\t\ttimer = setTimeout(() => this.checkForUpdates(), 10 * 60 * 1000);\n\t\t});\n\t}\n\n\tpublic get state(): State {\n\t\treturn this._state;\n\t}\n\n\tpublic get availableUpdate(): IUpdate {\n\t\treturn this._availableUpdate;\n\t}\n\n\tpublic get lastCheckDate(): Date {\n\t\treturn this._lastCheckDate;\n\t}\n\n\tpublic checkForUpdates(explicit = false): void {\n\t\tthis.explicitState = explicit ? ExplicitState.Explicit : ExplicitState.Implicit;\n\t\tthis._lastCheckDate = new Date();\n\t\tthis.raw.checkForUpdates();\n\t}\n\n\tprivate setState(state: State, availableUpdate: IUpdate = null): void {\n\t\tthis._state = state;\n\t\tthis._availableUpdate = availableUpdate;\n\t\tthis.emit('change');\n\t}\n\n\tprivate static getUpdateChannel(): string {\n\t\tconst channel = settings.manager.getValue('update.channel') || 'default';\n\t\treturn channel === 'none' ? null : env.quality;\n\t}\n\n\tprivate static getUpdateFeedUrl(channel: string): string {\n\t\tif (!channel) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif (platform.isWindows && !fs.existsSync(path.join(path.dirname(process.execPath), 'unins000.exe'))) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif (!env.updateUrl || !env.product.commit) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn `${ env.updateUrl }/api/update/${ env.getPlatformIdentifier() }/${ channel }/${ env.product.commit }`;\n\t}\n}\n\nexport const Instance = new UpdateManager();\n"]}