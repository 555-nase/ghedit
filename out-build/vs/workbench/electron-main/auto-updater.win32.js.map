{"version":3,"file":"vs/workbench/electron-main/auto-updater.win32.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/workbench/electron-main/auto-updater.win32.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport events = require('events');\nimport path = require('path');\nimport os = require('os');\nimport cp = require('child_process');\nimport pfs = require('vs/base/node/pfs');\nimport { mkdirp } from 'vs/base/node/extfs';\nimport { isString } from 'vs/base/common/types';\nimport { Promise, TPromise } from 'vs/base/common/winjs.base';\nimport { download, json } from 'vs/base/node/request';\nimport { getProxyAgent } from 'vs/base/node/proxy';\nimport { manager as Settings } from 'vs/workbench/electron-main/settings';\nimport { manager as Lifecycle } from 'vs/workbench/electron-main/lifecycle';\nimport { quality } from './env';\n\nexport interface IUpdate {\n\turl: string;\n\tname: string;\n\treleaseNotes?: string;\n\tversion?: string;\n}\n\nexport class Win32AutoUpdaterImpl extends events.EventEmitter {\n\n\tprivate url: string;\n\tprivate currentRequest: Promise;\n\n\tconstructor() {\n\t\tsuper();\n\n\t\tthis.url = null;\n\t\tthis.currentRequest = null;\n\t}\n\n\tpublic get cachePath(): TPromise<string> {\n\t\tlet result = path.join(os.tmpdir(), 'vscode-update');\n\t\treturn new TPromise<string>((c, e) => mkdirp(result, null, err => err ? e(err) : c(result)));\n\t}\n\n\tpublic setFeedURL(url: string): void {\n\t\tthis.url = url;\n\t}\n\n\tpublic checkForUpdates(): void {\n\t\tif (!this.url) {\n\t\t\tthrow new Error('No feed url set.');\n\t\t}\n\n\t\tif (this.currentRequest) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.emit('checking-for-update');\n\n\t\tconst proxyUrl = Settings.getValue('http.proxy');\n\t\tconst strictSSL = Settings.getValue('http.proxyStrictSSL', true);\n\t\tconst agent = getProxyAgent(this.url, { proxyUrl, strictSSL });\n\n\t\tthis.currentRequest = json<IUpdate>({ url: this.url, agent })\n\t\t\t.then(update => {\n\t\t\t\tif (!update || !update.url || !update.version) {\n\t\t\t\t\tthis.emit('update-not-available');\n\t\t\t\t\treturn this.cleanup();\n\t\t\t\t}\n\n\t\t\t\tthis.emit('update-available');\n\n\t\t\t\treturn this.cleanup(update.version).then(() => {\n\t\t\t\t\treturn this.getUpdatePackagePath(update.version).then(updatePackagePath => {\n\t\t\t\t\t\treturn pfs.exists(updatePackagePath).then(exists => {\n\t\t\t\t\t\t\tif (exists) {\n\t\t\t\t\t\t\t\treturn TPromise.as(updatePackagePath);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tconst url = update.url;\n\t\t\t\t\t\t\tconst downloadPath = `${updatePackagePath}.tmp`;\n\t\t\t\t\t\t\tconst agent = getProxyAgent(url, { proxyUrl, strictSSL });\n\n\t\t\t\t\t\t\treturn download(downloadPath, { url, agent, strictSSL })\n\t\t\t\t\t\t\t\t.then(() => pfs.rename(downloadPath, updatePackagePath))\n\t\t\t\t\t\t\t\t.then(() => updatePackagePath);\n\t\t\t\t\t\t});\n\t\t\t\t\t}).then(updatePackagePath => {\n\t\t\t\t\t\tthis.emit('update-downloaded',\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\tupdate.releaseNotes,\n\t\t\t\t\t\t\tupdate.version,\n\t\t\t\t\t\t\tnew Date(),\n\t\t\t\t\t\t\tthis.url,\n\t\t\t\t\t\t\t() => this.quitAndUpdate(updatePackagePath)\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t})\n\t\t\t.then(null, e => {\n\t\t\t\tif (isString(e) && /^Server returned/.test(e)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tthis.emit('update-not-available');\n\t\t\t\tthis.emit('error', e);\n\t\t\t})\n\t\t\t.then(() => this.currentRequest = null);\n\t}\n\n\tprivate getUpdatePackagePath(version: string): TPromise<string> {\n\t\treturn this.cachePath.then(cachePath => path.join(cachePath, `CodeSetup-${ quality }-${ version }.exe`));\n\t}\n\n\tprivate quitAndUpdate(updatePackagePath: string): void {\n\t\tLifecycle.quit().done(vetod => {\n\t\t\tif (vetod) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcp.spawn(updatePackagePath, ['/silent', '/mergetasks=runcode,!desktopicon,!quicklaunchicon'], {\n\t\t\t\tdetached: true,\n\t\t\t\tstdio: ['ignore', 'ignore', 'ignore']\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate cleanup(exceptVersion: string = null): Promise {\n\t\tconst filter = exceptVersion ? one => !(new RegExp(`${ quality }-${ exceptVersion }\\\\.exe$`).test(one)) : () => true;\n\n\t\treturn this.cachePath\n\t\t\t.then(cachePath => pfs.readdir(cachePath)\n\t\t\t\t.then(all => Promise.join(all\n\t\t\t\t\t.filter(filter)\n\t\t\t\t\t.map(one => pfs.unlink(path.join(cachePath, one)).then(null, () => null))\n\t\t\t\t))\n\t\t\t);\n\t}\n}\n"]}