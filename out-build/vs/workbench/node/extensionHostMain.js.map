{"version":3,"sources":["vs/workbench/node/extensionHostMain.ts"],"names":[],"mappings":"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","file":"vs/workbench/node/extensionHostMain.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport nls = require('vs/nls');\n\n\nimport pfs = require('vs/base/node/pfs');\n\nimport URI from 'vs/base/common/uri';\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport paths = require('vs/base/common/paths');\nimport {IExtensionService, IExtensionDescription} from 'vs/platform/extensions/common/extensions';\nimport {ExtensionsRegistry} from 'vs/platform/extensions/common/extensionsRegistry';\nimport {ExtHostAPIImplementation} from 'vs/workbench/api/node/extHost.api.impl';\nimport {IMainProcessExtHostIPC} from 'vs/platform/extensions/common/ipcRemoteCom';\nimport {ExtHostModelService} from 'vs/workbench/api/node/extHostDocuments';\nimport {IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport InstantiationService = require('vs/platform/instantiation/common/instantiationService');\nimport {ExtHostExtensionService} from 'vs/platform/extensions/common/nativeExtensionService';\nimport {ExtHostThreadService} from 'vs/platform/thread/common/extHostThreadService';\nimport {RemoteTelemetryService} from 'vs/platform/telemetry/common/remoteTelemetryService';\nimport {BaseWorkspaceContextService} from 'vs/platform/workspace/common/baseWorkspaceContextService';\nimport {ModeServiceImpl} from 'vs/editor/common/services/modeServiceImpl';\nimport {ExtensionScanner, MessagesCollector} from 'vs/workbench/node/extensionPoints';\nimport {IWorkspaceContextService} from 'vs/platform/workspace/common/workspace';\nimport {Client} from 'vs/base/node/service.net';\nimport {IExtensionsService} from 'vs/workbench/parts/extensions/common/extensions';\nimport {ExtensionsService} from 'vs/workbench/parts/extensions/node/extensionsService';\n\nconst DIRNAME = URI.parse(require.toUrl('./')).fsPath;\nconst BASE_PATH = paths.normalize(paths.join(DIRNAME, '../../../..'));\nconst BUILTIN_EXTENSIONS_PATH = paths.join(BASE_PATH, 'extensions');\n\nexport interface IInitData {\n\tthreadService: any;\n\tcontextService: {\n\t\tworkspace: any;\n\t\tconfiguration: any;\n\t\toptions: any;\n\t};\n}\n\nconst nativeExit = process.exit.bind(process);\nprocess.exit = function() {\n\tconst err = new Error('An extension called process.exit() and this was prevented.');\n\tconsole.warn((<any>err).stack);\n};\nexport function exit(code?: number) {\n\tnativeExit(code);\n}\n\nexport function createServices(remoteCom: IMainProcessExtHostIPC, initData: IInitData, sharedProcessClient: Client): IInstantiationService {\n\n\tlet contextService = new BaseWorkspaceContextService(initData.contextService.workspace, initData.contextService.configuration, initData.contextService.options);\n\tlet threadService = new ExtHostThreadService(remoteCom);\n\tthreadService.setInstantiationService(InstantiationService.createInstantiationService({ threadService: threadService }));\n\tlet telemetryService = new RemoteTelemetryService('pluginHostTelemetry', threadService);\n\tlet modelService = threadService.getRemotable(ExtHostModelService);\n\n\tlet extensionService = new ExtHostExtensionService(threadService, telemetryService);\n\tlet modeService = new ModeServiceImpl(threadService, extensionService);\n\tlet _services: any = {\n\t\tcontextService,\n\t\tmodelService,\n\t\tthreadService,\n\t\tmodeService,\n\t\textensionService,\n\t\ttelemetryService\n\t};\n\tlet instantiationService = InstantiationService.createInstantiationService(_services);\n\tthreadService.setInstantiationService(instantiationService);\n\n\t// Create the monaco API\n\tinstantiationService.createInstance(ExtHostAPIImplementation);\n\n\t// Connect to shared process services\n\tinstantiationService.addSingleton(IExtensionsService, sharedProcessClient.getService<IExtensionsService>('ExtensionService', ExtensionsService));\n\n\treturn instantiationService;\n}\n\ninterface ITestRunner {\n\trun(testsRoot: string, clb: (error: Error, failures?: number) => void): void;\n}\n\nexport class ExtensionHostMain {\n\n\tprivate _isTerminating: boolean;\n\tprivate _contextService: IWorkspaceContextService;\n\tprivate _extensionService: ExtHostExtensionService;\n\n\tconstructor(\n\t\t@IWorkspaceContextService contextService: IWorkspaceContextService,\n\t\t@IExtensionService extensionService: IExtensionService\n\t) {\n\t\tthis._isTerminating = false;\n\t\tthis._contextService = contextService;\n\t\tthis._extensionService = <ExtHostExtensionService>extensionService;\n\t}\n\n\tpublic start(): TPromise<void> {\n\t\treturn this.readExtensions();\n\t}\n\n\tpublic terminate(): void {\n\t\tif (this._isTerminating) {\n\t\t\t// we are already shutting down...\n\t\t\treturn;\n\t\t}\n\t\tthis._isTerminating = true;\n\n\t\ttry {\n\t\t\tlet allExtensions = ExtensionsRegistry.getAllExtensionDescriptions();\n\t\t\tlet allExtensionsIds = allExtensions.map(ext => ext.id);\n\t\t\tlet activatedExtensions = allExtensionsIds.filter(id => this._extensionService.isActivated(id));\n\n\t\t\tactivatedExtensions.forEach((extensionId) => {\n\t\t\t\tthis._extensionService.deactivate(extensionId);\n\t\t\t});\n\t\t} catch (err) {\n\t\t\t// TODO: write to log once we have one\n\t\t}\n\n\t\t// Give extensions 1 second to wrap up any async dispose, then exit\n\t\tsetTimeout(() => {\n\t\t\texit();\n\t\t}, 1000);\n\t}\n\n\tprivate readExtensions(): TPromise<void> {\n\t\tlet collector = new MessagesCollector();\n\t\tlet env = this._contextService.getConfiguration().env;\n\n\t\treturn ExtensionHostMain.scanExtensions(collector, BUILTIN_EXTENSIONS_PATH, !env.disableExtensions ? env.userExtensionsHome : void 0, !env.disableExtensions ? env.extensionDevelopmentPath : void 0, env.version)\n\t\t\t.then(null, err => {\n\t\t\t\tcollector.error('', err);\n\t\t\t\treturn [];\n\t\t\t})\n\t\t\t.then(extensions => {\n\t\t\t\t// Register & Signal done\n\t\t\t\tExtensionsRegistry.registerExtensions(extensions);\n\t\t\t\tthis._extensionService.registrationDone(collector.getMessages());\n\t\t\t})\n\t\t\t.then(() => this.handleEagerExtensions())\n\t\t\t.then(() => this.handleExtensionTests());\n\t}\n\n\tprivate static scanExtensions(collector: MessagesCollector, builtinExtensionsPath: string, userInstallPath: string, extensionDevelopmentPath: string, version: string): TPromise<IExtensionDescription[]> {\n\t\tconst builtinExtensions = ExtensionScanner.scanExtensions(version, collector, builtinExtensionsPath, true);\n\t\tconst userExtensions = !userInstallPath ? TPromise.as([]) : ExtensionScanner.scanExtensions(version, collector, userInstallPath, false);\n\t\tconst developedExtensions = !extensionDevelopmentPath ? TPromise.as([]) : ExtensionScanner.scanOneOrMultipleExtensions(version, collector, extensionDevelopmentPath, false);\n\n\t\treturn TPromise.join([builtinExtensions, userExtensions, developedExtensions]).then((_: IExtensionDescription[][]) => {\n\t\t\tlet builtinExtensions = _[0];\n\t\t\tlet userExtensions = _[1];\n\t\t\tlet developedExtensions = _[2];\n\n\t\t\tlet result: { [extensionId: string]: IExtensionDescription; } = {};\n\t\t\tbuiltinExtensions.forEach((builtinExtension) => {\n\t\t\t\tresult[builtinExtension.id] = builtinExtension;\n\t\t\t});\n\t\t\tuserExtensions.forEach((userExtension) => {\n\t\t\t\tif (result.hasOwnProperty(userExtension.id)) {\n\t\t\t\t\tcollector.warn(userExtension.extensionFolderPath, nls.localize('overwritingExtension', \"Overwriting extesion {0} with {1}.\", result[userExtension.id].extensionFolderPath, userExtension.extensionFolderPath));\n\t\t\t\t}\n\t\t\t\tresult[userExtension.id] = userExtension;\n\t\t\t});\n\t\t\tdevelopedExtensions.forEach(developedExtension => {\n\t\t\t\tcollector.info('', nls.localize('extensionUnderDevelopment', \"Loading development extension at {0}\", developedExtension.extensionFolderPath));\n\t\t\t\tif (result.hasOwnProperty(developedExtension.id)) {\n\t\t\t\t\tcollector.warn(developedExtension.extensionFolderPath, nls.localize('overwritingExtension', \"Overwriting extesion {0} with {1}.\", result[developedExtension.id].extensionFolderPath, developedExtension.extensionFolderPath));\n\t\t\t\t}\n\t\t\t\tresult[developedExtension.id] = developedExtension;\n\t\t\t});\n\n\t\t\treturn Object.keys(result).map(name => result[name]);\n\t\t});\n\t}\n\n\t// Handle \"eager\" activation extensions\n\tprivate handleEagerExtensions(): TPromise<void> {\n\t\tthis._extensionService.activateByEvent('*').then(null, (err) => {\n\t\t\tconsole.error(err);\n\t\t});\n\t\treturn this.handleWorkspaceContainsEagerExtensions();\n\t}\n\n\tprivate handleWorkspaceContainsEagerExtensions(): TPromise<void> {\n\t\tlet workspace = this._contextService.getWorkspace();\n\t\tif (!workspace || !workspace.resource) {\n\t\t\treturn TPromise.as(null);\n\t\t}\n\n\t\tlet folderPath = workspace.resource.fsPath;\n\n\t\tlet desiredFilesMap: {\n\t\t\t[filename: string]: boolean;\n\t\t} = {};\n\n\t\tExtensionsRegistry.getAllExtensionDescriptions().forEach((desc) => {\n\t\t\tlet activationEvents = desc.activationEvents;\n\t\t\tif (!activationEvents) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (let i = 0; i < activationEvents.length; i++) {\n\t\t\t\tif (/^workspaceContains:/.test(activationEvents[i])) {\n\t\t\t\t\tlet fileName = activationEvents[i].substr('workspaceContains:'.length);\n\t\t\t\t\tdesiredFilesMap[fileName] = true;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn TPromise.join(\n\t\t\tObject.keys(desiredFilesMap).map(\n\t\t\t\t(fileName) => pfs.fileExistsWithResult(paths.join(folderPath, fileName), fileName)\n\t\t\t)\n\t\t).then((fileNames: string[]) => {\n\t\t\tfileNames.forEach((existingFileName) => {\n\t\t\t\tif (!existingFileName) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tlet activationEvent = 'workspaceContains:' + existingFileName;\n\t\t\t\tthis._extensionService.activateByEvent(activationEvent).then(null, (err) => {\n\t\t\t\t\tconsole.error(err);\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate handleExtensionTests(): TPromise<void> {\n\t\tlet env = this._contextService.getConfiguration().env;\n\t\tif (!env.extensionTestsPath || !env.extensionDevelopmentPath) {\n\t\t\treturn TPromise.as(null);\n\t\t}\n\n\t\t// Require the test runner via node require from the provided path\n\t\tlet testRunner: ITestRunner;\n\t\tlet requireError: Error;\n\t\ttry {\n\t\t\ttestRunner = <any>require.__$__nodeRequire(env.extensionTestsPath);\n\t\t} catch (error) {\n\t\t\trequireError = error;\n\t\t}\n\n\t\t// Execute the runner if it follows our spec\n\t\tif (testRunner && typeof testRunner.run === 'function') {\n\t\t\treturn new TPromise<void>((c, e) => {\n\t\t\t\ttestRunner.run(env.extensionTestsPath, (error, failures) => {\n\t\t\t\t\tif (error) {\n\t\t\t\t\t\te(error.toString());\n\t\t\t\t\t} else {\n\t\t\t\t\t\tc(null);\n\t\t\t\t\t}\n\n\t\t\t\t\t// after tests have run, we shutdown the host\n\t\t\t\t\tthis.gracefulExit(failures && failures > 0 ? 1 /* ERROR */ : 0 /* OK */);\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\t// Otherwise make sure to shutdown anyway even in case of an error\n\t\telse {\n\t\t\tthis.gracefulExit(1 /* ERROR */);\n\t\t}\n\n\t\treturn TPromise.wrapError<void>(requireError ? requireError.toString() : nls.localize('extensionTestError', \"Path {0} does not point to a valid extension test runner.\", env.extensionTestsPath));\n\t}\n\n\tprivate gracefulExit(code: number): void {\n\t\t// to give the PH process a chance to flush any outstanding console\n\t\t// messages to the main process, we delay the exit() by some time\n\t\tsetTimeout(() => exit(code), 500);\n\t}\n}"]}