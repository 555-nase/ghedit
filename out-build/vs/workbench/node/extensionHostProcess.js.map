{"version":3,"file":"vs/workbench/node/extensionHostProcess.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/workbench/node/extensionHostProcess.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport {onUnexpectedError} from 'vs/base/common/errors';\nimport { TPromise } from 'vs/base/common/winjs.base';\nimport { ExtensionHostMain, createServices, IInitData, exit } from 'vs/workbench/node/extensionHostMain';\nimport { Client, connect } from 'vs/base/node/service.net';\nimport { create as createIPC, IMainProcessExtHostIPC } from 'vs/platform/extensions/common/ipcRemoteCom';\nimport marshalling = require('vs/base/common/marshalling');\n\ninterface IRendererConnection {\n\tremoteCom: IMainProcessExtHostIPC;\n\tinitData: IInitData;\n}\n\n// This calls exit directly in case the initialization is not finished and we need to exit\n// Otherwise, if initialization completed we go to extensionHostMain.terminate()\nlet onTerminate = function() {\n\texit();\n};\n\nfunction connectToRenderer(): TPromise<IRendererConnection> {\n\treturn new TPromise<IRendererConnection>((c, e) => {\n\t\tconst stats: number[] = [];\n\n\t\t// Listen init data message\n\t\tprocess.once('message', raw => {\n\n\t\t\tlet msg = marshalling.parse(raw);\n\n\t\t\tconst remoteCom = createIPC(data => {\n\t\t\t\tprocess.send(data);\n\t\t\t\tstats.push(data.length);\n\t\t\t});\n\n\t\t\t// Listen to all other messages\n\t\t\tprocess.on('message', (msg) => {\n\t\t\t\tif (msg.type === '__$terminate') {\n\t\t\t\t\tonTerminate();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tremoteCom.handle(msg);\n\t\t\t});\n\n\t\t\t// Print a console message when rejection isn't handled within N seconds. For details:\n\t\t\t// see https://nodejs.org/api/process.html#process_event_unhandledrejection\n\t\t\t// and https://nodejs.org/api/process.html#process_event_rejectionhandled\n\t\t\tconst unhandledPromises: Promise<any>[] = [];\n\t\t\tprocess.on('unhandledRejection', (reason, promise) => {\n\t\t\t\tunhandledPromises.push(promise);\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tconst idx = unhandledPromises.indexOf(promise);\n\t\t\t\t\tif (idx >= 0) {\n\t\t\t\t\t\tunhandledPromises.splice(idx, 1);\n\t\t\t\t\t\tconsole.warn('rejected promise not handled with 1 second');\n\t\t\t\t\t\tonUnexpectedError(reason);\n\t\t\t\t\t}\n\t\t\t\t}, 1000);\n\t\t\t});\n\t\t\tprocess.on('rejectionHandled', promise => {\n\t\t\t\tconst idx = unhandledPromises.indexOf(promise);\n\t\t\t\tif (idx >= 0) {\n\t\t\t\t\tunhandledPromises.splice(idx, 1);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Print a console message when an exception isn't handled.\n\t\t\tprocess.on('uncaughtException', function(err) {\n\t\t\t\tonUnexpectedError(err);\n\t\t\t});\n\n\t\t\t// Kill oneself if one's parent dies. Much drama.\n\t\t\tsetInterval(function () {\n\t\t\t\ttry {\n\t\t\t\t\tprocess.kill(msg.parentPid, 0); // throws an exception if the main process doesn't exist anymore.\n\t\t\t\t} catch (e) {\n\t\t\t\t\tonTerminate();\n\t\t\t\t}\n\t\t\t}, 5000);\n\n\t\t\t// Check stats\n\t\t\tsetInterval(function() {\n\t\t\t\tif (stats.length >= 250) {\n\t\t\t\t\tlet total = stats.reduce((prev, current) => prev + current, 0);\n\t\t\t\t\tconsole.warn(`MANY messages are being SEND FROM the extension host!`);\n\t\t\t\t\tconsole.warn(`SEND during 1sec: message_count=${stats.length}, total_len=${total}`);\n\t\t\t\t}\n\t\t\t\tstats.length = 0;\n\t\t\t}, 1000);\n\n\t\t\t// Tell the outside that we are initialized\n\t\t\tprocess.send('initialized');\n\n\t\t\tc({ remoteCom, initData: msg });\n\t\t});\n\n\t\t// Tell the outside that we are ready to receive messages\n\t\tprocess.send('ready');\n\t});\n}\n\nfunction connectToSharedProcess(): TPromise<Client> {\n\treturn connect(process.env['VSCODE_SHARED_IPC_HOOK']);\n}\n\nTPromise.join<any>([connectToRenderer(), connectToSharedProcess()])\n\t.done(result => {\n\t\tconst renderer: IRendererConnection = result[0];\n\t\tconst sharedProcessClient: Client = result[1];\n\t\tconst instantiationService = createServices(renderer.remoteCom, renderer.initData, sharedProcessClient);\n\t\tconst extensionHostMain = instantiationService.createInstance(ExtensionHostMain);\n\n\t\tonTerminate = () => {\n\t\t\textensionHostMain.terminate();\n\t\t};\n\n\t\textensionHostMain.start()\n\t\t\t.done(null, err => console.error(err));\n\t});"]}