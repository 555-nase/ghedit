{"version":3,"file":"vs/workbench/services/search/node/fileSearch.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/workbench/services/search/node/fileSearch.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport fs = require('fs');\nimport paths = require('path');\n\nimport scorer = require('vs/base/common/scorer');\nimport arrays = require('vs/base/common/arrays');\nimport strings = require('vs/base/common/strings');\nimport types = require('vs/base/common/types');\nimport glob = require('vs/base/common/glob');\nimport {IProgress} from 'vs/platform/search/common/search';\n\nimport extfs = require('vs/base/node/extfs');\nimport flow = require('vs/base/node/flow');\nimport {ISerializedFileMatch, IRawSearch, ISearchEngine} from 'vs/workbench/services/search/node/rawSearchService';\n\nexport class FileWalker {\n\tprivate config: IRawSearch;\n\tprivate filePattern: string;\n\tprivate normalizedFilePatternLowercase: string;\n\tprivate excludePattern: glob.IExpression;\n\tprivate includePattern: glob.IExpression;\n\tprivate maxResults: number;\n\tprivate maxFilesize: number;\n\tprivate isLimitHit: boolean;\n\tprivate resultCount: number;\n\tprivate isCanceled: boolean;\n\n\tprivate walkedPaths: { [path: string]: boolean; };\n\n\tconstructor(config: IRawSearch) {\n\t\tthis.config = config;\n\t\tthis.filePattern = config.filePattern;\n\t\tthis.excludePattern = config.excludePattern;\n\t\tthis.includePattern = config.includePattern;\n\t\tthis.maxResults = config.maxResults || null;\n\t\tthis.maxFilesize = config.maxFilesize || null;\n\t\tthis.walkedPaths = Object.create(null);\n\t\tthis.resultCount = 0;\n\t\tthis.isLimitHit = false;\n\n\t\tif (this.filePattern) {\n\t\t\tthis.filePattern = this.filePattern.replace(/\\\\/g, '/'); // Normalize file patterns to forward slashes\n\t\t\tthis.normalizedFilePatternLowercase = strings.stripWildcards(this.filePattern).toLowerCase();\n\t\t}\n\t}\n\n\tpublic cancel(): void {\n\t\tthis.isCanceled = true;\n\t}\n\n\tpublic walk(rootFolders: string[], extraFiles: string[], onResult: (result: ISerializedFileMatch, size: number) => void, done: (error: Error, isLimitHit: boolean) => void): void {\n\n\t\t// Support that the file pattern is a full path to a file that exists\n\t\tthis.checkFilePatternAbsoluteMatch((exists, size) => {\n\t\t\tif (this.isCanceled) {\n\t\t\t\treturn done(null, this.isLimitHit);\n\t\t\t}\n\n\t\t\t// Report result from file pattern if matching\n\t\t\tif (exists) {\n\t\t\t\tonResult({ path: this.filePattern }, size);\n\n\t\t\t\t// Optimization: a match on an absolute path is a good result and we do not\n\t\t\t\t// continue walking the entire root paths array for other matches because\n\t\t\t\t// it is very unlikely that another file would match on the full absolute path\n\t\t\t\treturn done(null, this.isLimitHit);\n\t\t\t}\n\n\t\t\t// For each extra file\n\t\t\tif (extraFiles) {\n\t\t\t\textraFiles.forEach(extraFilePath => {\n\t\t\t\t\tif (glob.match(this.excludePattern, extraFilePath)) {\n\t\t\t\t\t\treturn; // excluded\n\t\t\t\t\t}\n\n\t\t\t\t\t// File: Check for match on file pattern and include pattern\n\t\t\t\t\tthis.matchFile(onResult, extraFilePath, extraFilePath /* no workspace relative path */);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// For each root folder\n\t\t\tflow.parallel(rootFolders, (absolutePath, perEntryCallback) => {\n\t\t\t\textfs.readdir(absolutePath, (error: Error, files: string[]) => {\n\t\t\t\t\tif (error || this.isCanceled || this.isLimitHit) {\n\t\t\t\t\t\treturn perEntryCallback(null, null);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Support relative paths to files from a root resource\n\t\t\t\t\treturn this.checkFilePatternRelativeMatch(absolutePath, (match, size) => {\n\t\t\t\t\t\tif (this.isCanceled || this.isLimitHit) {\n\t\t\t\t\t\t\treturn perEntryCallback(null, null);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Report result from file pattern if matching\n\t\t\t\t\t\tif (match) {\n\t\t\t\t\t\t\tonResult({ path: match }, size);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn this.doWalk(paths.normalize(absolutePath), '', files, onResult, perEntryCallback);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}, (err, result) => {\n\t\t\t\tdone(err ? err[0] : null, this.isLimitHit);\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate checkFilePatternAbsoluteMatch(clb: (exists: boolean, size?: number) => void): void {\n\t\tif (!this.filePattern || !paths.isAbsolute(this.filePattern)) {\n\t\t\treturn clb(false);\n\t\t}\n\n\t\treturn fs.stat(this.filePattern, (error, stat) => {\n\t\t\treturn clb(!error && !stat.isDirectory(), stat && stat.size); // only existing files\n\t\t});\n\t}\n\n\tprivate checkFilePatternRelativeMatch(basePath: string, clb: (matchPath: string, size?: number) => void): void {\n\t\tif (!this.filePattern || paths.isAbsolute(this.filePattern)) {\n\t\t\treturn clb(null);\n\t\t}\n\n\t\tconst absolutePath = paths.join(basePath, this.filePattern);\n\n\t\treturn fs.stat(absolutePath, (error, stat) => {\n\t\t\treturn clb(!error && !stat.isDirectory() ? absolutePath : null, stat && stat.size); // only existing files\n\t\t});\n\t}\n\n\tprivate doWalk(absolutePath: string, relativeParentPathWithSlashes: string, files: string[], onResult: (result: ISerializedFileMatch, size: number) => void, done: (error: Error, result: any) => void): void {\n\n\t\t// Execute tasks on each file in parallel to optimize throughput\n\t\tflow.parallel(files, (file: string, clb: (error: Error) => void): void => {\n\n\t\t\t// Check canceled\n\t\t\tif (this.isCanceled || this.isLimitHit) {\n\t\t\t\treturn clb(null);\n\t\t\t}\n\n\t\t\t// If the user searches for the exact file name, we adjust the glob matching\n\t\t\t// to ignore filtering by siblings because the user seems to know what she\n\t\t\t// is searching for and we want to include the result in that case anyway\n\t\t\tlet siblings = files;\n\t\t\tif (this.config.filePattern === file) {\n\t\t\t\tsiblings = [];\n\t\t\t}\n\n\t\t\t// Check exclude pattern\n\t\t\tlet currentRelativePathWithSlashes = relativeParentPathWithSlashes ? [relativeParentPathWithSlashes, file].join('/') : file;\n\t\t\tif (glob.match(this.excludePattern, currentRelativePathWithSlashes, siblings)) {\n\t\t\t\treturn clb(null);\n\t\t\t}\n\n\t\t\t// Use lstat to detect links\n\t\t\tlet currentAbsolutePath = [absolutePath, file].join(paths.sep);\n\t\t\tfs.lstat(currentAbsolutePath, (error, lstat) => {\n\t\t\t\tif (error || this.isCanceled || this.isLimitHit) {\n\t\t\t\t\treturn clb(null);\n\t\t\t\t}\n\n\t\t\t\t// If the path is a link, we must instead use fs.stat() to find out if the\n\t\t\t\t// link is a directory or not because lstat will always return the stat of\n\t\t\t\t// the link which is always a file.\n\t\t\t\tthis.statLinkIfNeeded(currentAbsolutePath, lstat, (error, stat) => {\n\t\t\t\t\tif (error || this.isCanceled || this.isLimitHit) {\n\t\t\t\t\t\treturn clb(null);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Directory: Follow directories\n\t\t\t\t\tif (stat.isDirectory()) {\n\n\t\t\t\t\t\t// to really prevent loops with links we need to resolve the real path of them\n\t\t\t\t\t\treturn this.realPathIfNeeded(currentAbsolutePath, lstat, (error, realpath) => {\n\t\t\t\t\t\t\tif (error || this.isCanceled || this.isLimitHit) {\n\t\t\t\t\t\t\t\treturn clb(null);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (this.walkedPaths[realpath]) {\n\t\t\t\t\t\t\t\treturn clb(null); // escape when there are cycles (can happen with symlinks)\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tthis.walkedPaths[realpath] = true; // remember as walked\n\n\t\t\t\t\t\t\t// Continue walking\n\t\t\t\t\t\t\treturn extfs.readdir(currentAbsolutePath, (error: Error, children: string[]): void => {\n\t\t\t\t\t\t\t\tif (error || this.isCanceled || this.isLimitHit) {\n\t\t\t\t\t\t\t\t\treturn clb(null);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tthis.doWalk(currentAbsolutePath, currentRelativePathWithSlashes, children, onResult, clb);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\t// File: Check for match on file pattern and include pattern\n\t\t\t\t\telse {\n\t\t\t\t\t\tif (currentRelativePathWithSlashes === this.filePattern) {\n\t\t\t\t\t\t\treturn clb(null); // ignore file if its path matches with the file pattern because checkFilePatternRelativeMatch() takes care of those\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (this.maxFilesize && types.isNumber(stat.size) && stat.size > this.maxFilesize) {\n\t\t\t\t\t\t\treturn clb(null); // ignore file if max file size is hit\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis.matchFile(onResult, currentAbsolutePath, currentRelativePathWithSlashes, stat.size);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Unwind\n\t\t\t\t\treturn clb(null);\n\t\t\t\t});\n\t\t\t});\n\t\t}, (error: Error[]): void => {\n\t\t\tif (error) {\n\t\t\t\terror = arrays.coalesce(error); // find any error by removing null values first\n\t\t\t}\n\n\t\t\treturn done(error && error.length > 0 ? error[0] : null, null);\n\t\t});\n\t}\n\n\tprivate matchFile(onResult: (result: ISerializedFileMatch, size: number) => void, absolutePath: string, relativePathWithSlashes: string, size?: number): void {\n\t\tif (this.isFilePatternMatch(relativePathWithSlashes) && (!this.includePattern || glob.match(this.includePattern, relativePathWithSlashes))) {\n\t\t\tthis.resultCount++;\n\n\t\t\tif (this.maxResults && this.resultCount > this.maxResults) {\n\t\t\t\tthis.isLimitHit = true;\n\t\t\t}\n\n\t\t\tif (!this.isLimitHit) {\n\t\t\t\tonResult({\n\t\t\t\t\tpath: absolutePath\n\t\t\t\t}, size);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate isFilePatternMatch(path: string): boolean {\n\n\t\t// Check for search pattern\n\t\tif (this.filePattern) {\n\t\t\tif (this.filePattern === '*') {\n\t\t\t\treturn true; // support the all-matching wildcard\n\t\t\t}\n\n\t\t\treturn scorer.matches(path, this.normalizedFilePatternLowercase);\n\t\t}\n\n\t\t// No patterns means we match all\n\t\treturn true;\n\t}\n\n\tprivate statLinkIfNeeded(path: string, lstat: fs.Stats, clb: (error: Error, stat: fs.Stats) => void): void {\n\t\tif (lstat.isSymbolicLink()) {\n\t\t\treturn fs.stat(path, clb); // stat the target the link points to\n\t\t}\n\n\t\treturn clb(null, lstat); // not a link, so the stat is already ok for us\n\t}\n\n\tprivate realPathIfNeeded(path: string, lstat: fs.Stats, clb: (error: Error, realpath?: string) => void): void {\n\t\tif (lstat.isSymbolicLink()) {\n\t\t\treturn fs.realpath(path, (error, realpath) => {\n\t\t\t\tif (error) {\n\t\t\t\t\treturn clb(error);\n\t\t\t\t}\n\n\t\t\t\treturn clb(null, realpath);\n\t\t\t});\n\t\t}\n\n\t\treturn clb(null, path);\n\t}\n}\n\nexport class Engine implements ISearchEngine {\n\tprivate rootFolders: string[];\n\tprivate extraFiles: string[];\n\tprivate walker: FileWalker;\n\n\tconstructor(config: IRawSearch) {\n\t\tthis.rootFolders = config.rootFolders;\n\t\tthis.extraFiles = config.extraFiles;\n\n\t\tthis.walker = new FileWalker(config);\n\t}\n\n\tpublic search(onResult: (result: ISerializedFileMatch) => void, onProgress: (progress: IProgress) => void, done: (error: Error, isLimitHit: boolean) => void): void {\n\t\tthis.walker.walk(this.rootFolders, this.extraFiles, onResult, done);\n\t}\n\n\tpublic cancel(): void {\n\t\tthis.walker.cancel();\n\t}\n}"]}