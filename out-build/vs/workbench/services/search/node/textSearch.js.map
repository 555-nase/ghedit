{"version":3,"file":"vs/workbench/services/search/node/textSearch.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/workbench/services/search/node/textSearch.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport strings = require('vs/base/common/strings');\n\nimport fs = require('fs');\n\nimport baseMime = require('vs/base/common/mime');\nimport {ILineMatch, IProgress} from 'vs/platform/search/common/search';\nimport {detectMimeAndEncodingFromBuffer} from 'vs/base/node/mime';\nimport {FileWalker} from 'vs/workbench/services/search/node/fileSearch';\nimport {UTF16le, UTF16be, UTF8, UTF8_with_bom, encodingExists, decode} from 'vs/base/node/encoding';\nimport {ISerializedFileMatch, IRawSearch, ISearchEngine} from 'vs/workbench/services/search/node/rawSearchService';\n\ninterface ReadLinesOptions {\n\tbufferLength: number;\n\tencoding: string;\n}\n\nexport class Engine implements ISearchEngine {\n\n\tprivate static PROGRESS_FLUSH_CHUNK_SIZE = 50; // optimization: number of files to process before emitting progress event\n\n\tprivate rootFolders: string[];\n\tprivate extraFiles: string[];\n\tprivate maxResults: number;\n\tprivate walker: FileWalker;\n\tprivate contentPattern: RegExp;\n\tprivate isCanceled: boolean;\n\tprivate isDone: boolean;\n\tprivate total: number;\n\tprivate worked: number;\n\tprivate progressed: number;\n\tprivate walkerError: Error;\n\tprivate walkerIsDone: boolean;\n\tprivate fileEncoding: string;\n\tprivate limitReached: boolean;\n\n\tconstructor(config: IRawSearch, walker: FileWalker) {\n\t\tthis.rootFolders = config.rootFolders;\n\t\tthis.extraFiles = config.extraFiles;\n\t\tthis.walker = walker;\n\t\tthis.contentPattern = strings.createRegExp(config.contentPattern.pattern, config.contentPattern.isRegExp, config.contentPattern.isCaseSensitive, config.contentPattern.isWordMatch, true);\n\t\tthis.isCanceled = false;\n\t\tthis.limitReached = false;\n\t\tthis.maxResults = config.maxResults;\n\t\tthis.worked = 0;\n\t\tthis.progressed = 0;\n\t\tthis.total = 0;\n\t\tthis.fileEncoding = encodingExists(config.fileEncoding) ? config.fileEncoding : UTF8;\n\t}\n\n\tpublic cancel(): void {\n\t\tthis.isCanceled = true;\n\t\tthis.walker.cancel();\n\t}\n\n\tpublic search(onResult: (match: ISerializedFileMatch) => void, onProgress: (progress: IProgress) => void, done: (error: Error, isLimitHit: boolean) => void): void {\n\t\tlet resultCounter = 0;\n\n\t\tlet progress = () => {\n\t\t\tthis.progressed++;\n\t\t\tif (this.progressed % Engine.PROGRESS_FLUSH_CHUNK_SIZE === 0) {\n\t\t\t\tonProgress({ total: this.total, worked: this.worked }); // buffer progress in chunks to reduce pressure\n\t\t\t}\n\t\t};\n\n\t\tlet unwind = (processed: number) => {\n\t\t\tthis.worked += processed;\n\n\t\t\t// Emit progress() unless we got canceled or hit the limit\n\t\t\tif (processed && !this.isDone && !this.isCanceled && !this.limitReached) {\n\t\t\t\tprogress();\n\t\t\t}\n\n\t\t\t// Emit done()\n\t\t\tif (this.worked === this.total && this.walkerIsDone && !this.isDone) {\n\t\t\t\tthis.isDone = true;\n\t\t\t\tdone(this.walkerError, this.limitReached);\n\t\t\t}\n\t\t};\n\n\t\t// Walk over the file system\n\t\tthis.walker.walk(this.rootFolders, this.extraFiles, (result, size) => {\n\t\t\tsize = size ||  1;\n\t\t\tthis.total += size;\n\n\t\t\t// If the result is empty or we have reached the limit or we are canceled, ignore it\n\t\t\tif (this.limitReached || this.isCanceled) {\n\t\t\t\treturn unwind(size);\n\t\t\t}\n\n\t\t\t// Indicate progress to the outside\n\t\t\tprogress();\n\n\t\t\tlet fileMatch: FileMatch = null;\n\n\t\t\tlet doneCallback = (error?: Error) => {\n\t\t\t\tif (!error && !this.isCanceled && fileMatch && !fileMatch.isEmpty()) {\n\t\t\t\t\tonResult(fileMatch.serialize());\n\t\t\t\t}\n\n\t\t\t\treturn unwind(size);\n\t\t\t};\n\n\t\t\tlet perLineCallback = (line: string, lineNumber: number) => {\n\t\t\t\tif (this.limitReached || this.isCanceled) {\n\t\t\t\t\treturn; // return early if canceled or limit reached\n\t\t\t\t}\n\n\t\t\t\tlet lineMatch: LineMatch = null;\n\t\t\t\tlet match = this.contentPattern.exec(line);\n\n\t\t\t\t// Record all matches into file result\n\t\t\t\twhile (match !== null && match[0].length > 0 && !this.limitReached && !this.isCanceled) {\n\t\t\t\t\tresultCounter++;\n\t\t\t\t\tif (this.maxResults && resultCounter >= this.maxResults) {\n\t\t\t\t\t\tthis.limitReached = true;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (fileMatch === null) {\n\t\t\t\t\t\tfileMatch = new FileMatch(result.path);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (lineMatch === null) {\n\t\t\t\t\t\tlineMatch = new LineMatch(line, lineNumber);\n\t\t\t\t\t\tfileMatch.addMatch(lineMatch);\n\t\t\t\t\t}\n\n\t\t\t\t\tlineMatch.addMatch(match.index, match[0].length);\n\n\t\t\t\t\tmatch = this.contentPattern.exec(line);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// Read lines buffered to support large files\n\t\t\tthis.readlinesAsync(result.path, perLineCallback, { bufferLength: 8096, encoding: this.fileEncoding }, doneCallback);\n\t\t}, (error, isLimitHit) => {\n\t\t\tthis.walkerIsDone = true;\n\t\t\tthis.walkerError = error;\n\t\t\tunwind(0 /* walker is done, indicate this back to our handler to be able to unwind */);\n\t\t});\n\t}\n\n\tprivate readlinesAsync(filename: string, perLineCallback: (line: string, lineNumber: number) => void, options: ReadLinesOptions, callback: (error: Error) => void): void {\n\t\tfs.open(filename, 'r', null, (error: Error, fd: number) => {\n\t\t\tif (error) {\n\t\t\t\treturn callback(error);\n\t\t\t}\n\n\t\t\tlet buffer = new Buffer(options.bufferLength);\n\t\t\tlet pos: number;\n\t\t\tlet i: number;\n\t\t\tlet line = '';\n\t\t\tlet lineNumber = 0;\n\t\t\tlet lastBufferHadTraillingCR = false;\n\n\t\t\tconst outer = this;\n\n\t\t\tfunction decodeBuffer(buffer: NodeBuffer): string {\n\t\t\t\tif (options.encoding === UTF8 || options.encoding === UTF8_with_bom) {\n\t\t\t\t\treturn buffer.toString(); // much faster to use built in toString() when encoding is default\n\t\t\t\t}\n\n\t\t\t\treturn decode(buffer, options.encoding);\n\t\t\t}\n\n\t\t\tfunction lineFinished(offset: number): void {\n\t\t\t\tline += decodeBuffer(buffer.slice(pos, i + offset));\n\t\t\t\tperLineCallback(line, lineNumber);\n\t\t\t\tline = '';\n\t\t\t\tlineNumber++;\n\t\t\t\tpos = i + offset;\n\t\t\t}\n\n\t\t\tfunction readFile(isFirstRead: boolean, clb: (error: Error) => void): void {\n\t\t\t\tif (outer.limitReached || outer.isCanceled) {\n\t\t\t\t\treturn clb(null); // return early if canceled or limit reached\n\t\t\t\t}\n\n\t\t\t\tfs.read(fd, buffer, 0, buffer.length, null, (error: Error, bytesRead: number, buffer: NodeBuffer) => {\n\t\t\t\t\tif (error || bytesRead === 0 || outer.limitReached || outer.isCanceled) {\n\t\t\t\t\t\treturn clb(error); // return early if canceled or limit reached or no more bytes to read\n\t\t\t\t\t}\n\n\t\t\t\t\tpos = 0;\n\t\t\t\t\ti = 0;\n\n\t\t\t\t\t// Detect encoding and mime when this is the beginning of the file\n\t\t\t\t\tif (isFirstRead) {\n\t\t\t\t\t\tlet mimeAndEncoding = detectMimeAndEncodingFromBuffer(buffer, bytesRead);\n\t\t\t\t\t\tif (mimeAndEncoding.mimes[mimeAndEncoding.mimes.length - 1] !== baseMime.MIME_TEXT) {\n\t\t\t\t\t\t\treturn clb(null); // skip files that seem binary\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Check for BOM offset\n\t\t\t\t\t\tswitch (mimeAndEncoding.encoding) {\n\t\t\t\t\t\t\tcase UTF8:\n\t\t\t\t\t\t\t\tpos = i = 3;\n\t\t\t\t\t\t\t\toptions.encoding = UTF8;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase UTF16be:\n\t\t\t\t\t\t\t\tpos = i = 2;\n\t\t\t\t\t\t\t\toptions.encoding = UTF16be;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase UTF16le:\n\t\t\t\t\t\t\t\tpos = i = 2;\n\t\t\t\t\t\t\t\toptions.encoding = UTF16le;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (lastBufferHadTraillingCR) {\n\t\t\t\t\t\tif (buffer[i] === 0x0a) { // LF (Line Feed)\n\t\t\t\t\t\t\tlineFinished(1);\n\t\t\t\t\t\t\ti++;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tlineFinished(0);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tlastBufferHadTraillingCR = false;\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (; i < bytesRead; ++i) {\n\t\t\t\t\t\tif (buffer[i] === 0x0a) { // LF (Line Feed)\n\t\t\t\t\t\t\tlineFinished(1);\n\t\t\t\t\t\t} else if (buffer[i] === 0x0d) { // CR (Carriage Return)\n\t\t\t\t\t\t\tif (i + 1 === bytesRead) {\n\t\t\t\t\t\t\t\tlastBufferHadTraillingCR = true;\n\t\t\t\t\t\t\t} else if (buffer[i + 1] === 0x0a) { // LF (Line Feed)\n\t\t\t\t\t\t\t\tlineFinished(2);\n\t\t\t\t\t\t\t\ti++;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tlineFinished(1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tline += decodeBuffer(buffer.slice(pos, bytesRead));\n\n\t\t\t\t\treadFile(false /* isFirstRead */, clb); // Continue reading\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treadFile(true /* isFirstRead */, (error: Error) => {\n\t\t\t\tif (error) {\n\t\t\t\t\treturn callback(error);\n\t\t\t\t}\n\n\t\t\t\tif (line.length) {\n\t\t\t\t\tperLineCallback(line, lineNumber); // handle last line\n\t\t\t\t}\n\n\t\t\t\tfs.close(fd, (error: Error) => {\n\t\t\t\t\tcallback(error);\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t}\n}\n\nclass FileMatch implements ISerializedFileMatch {\n\tpublic path: string;\n\tpublic lineMatches: LineMatch[];\n\n\tconstructor(path: string) {\n\t\tthis.path = path;\n\t\tthis.lineMatches = [];\n\t}\n\n\tpublic addMatch(lineMatch: LineMatch): void {\n\t\tthis.lineMatches.push(lineMatch);\n\t}\n\n\tpublic isEmpty(): boolean {\n\t\treturn this.lineMatches.length === 0;\n\t}\n\n\tpublic serialize(): ISerializedFileMatch {\n\t\tlet lineMatches: ILineMatch[] = [];\n\n\t\tfor (let i = 0; i < this.lineMatches.length; i++) {\n\t\t\tlineMatches.push(this.lineMatches[i].serialize());\n\t\t}\n\n\t\treturn {\n\t\t\tpath: this.path,\n\t\t\tlineMatches: lineMatches\n\t\t};\n\t}\n}\n\nclass LineMatch implements ILineMatch {\n\tpublic preview: string;\n\tpublic lineNumber: number;\n\tpublic offsetAndLengths: number[][];\n\n\tconstructor(preview: string, lineNumber: number) {\n\t\tthis.preview = preview.replace(/(\\r|\\n)*$/, '');\n\t\tthis.lineNumber = lineNumber;\n\t\tthis.offsetAndLengths = [];\n\t}\n\n\tpublic getText(): string {\n\t\treturn this.preview;\n\t}\n\n\tpublic getLineNumber(): number {\n\t\treturn this.lineNumber;\n\t}\n\n\tpublic addMatch(offset: number, length: number): void {\n\t\tthis.offsetAndLengths.push([offset, length]);\n\t}\n\n\tpublic serialize(): ILineMatch {\n\t\tlet result = {\n\t\t\tpreview: this.preview,\n\t\t\tlineNumber: this.lineNumber,\n\t\t\toffsetAndLengths: this.offsetAndLengths\n\t\t};\n\n\t\treturn result;\n\t}\n}"]}