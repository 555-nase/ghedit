{"version":3,"file":"vs/workbench/services/search/node/rawSearchService.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/workbench/services/search/node/rawSearchService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;IAEhG,YAAY,CAAC;IAKb,UAAU,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;IA4C3B;QAAA;QAwCA,CAAC;QAtCO,kCAAU,GAAjB,UAAkB,MAAkB;YACnC,IAAI,MAAM,GAAG,IAAI,mBAAgB,CAAC,MAAM,CAAC,CAAC;YAE1C,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QAC9B,CAAC;QAEM,kCAAU,GAAjB,UAAkB,MAAkB;YACnC,IAAI,MAAM,GAAG,IAAI,mBAAgB,CAAC,MAAM,EAAE,IAAI,uBAAU,CAAC;gBACxD,WAAW,EAAE,MAAM,CAAC,WAAW;gBAC/B,UAAU,EAAE,MAAM,CAAC,UAAU;gBAC7B,cAAc,EAAE,MAAM,CAAC,cAAc;gBACrC,cAAc,EAAE,MAAM,CAAC,cAAc;gBACrC,WAAW,EAAE,MAAM,CAAC,WAAW;gBAC/B,WAAW,EAAE,qBAAa;aAC1B,CAAC,CAAC,CAAC;YAEJ,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QAC9B,CAAC;QAEO,gCAAQ,GAAhB,UAAiB,MAAqB;YACrC,MAAM,CAAC,IAAI,qBAAQ,CAA2D,UAAC,CAAC,EAAE,CAAC,EAAE,CAAC;gBACrF,MAAM,CAAC,MAAM,CAAC,UAAC,KAAK;oBACnB,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;wBACX,CAAC,CAAC,KAAK,CAAC,CAAC;oBACV,CAAC;gBACF,CAAC,EAAE,UAAC,QAAQ;oBACX,CAAC,CAAC,QAAQ,CAAC,CAAC;gBACb,CAAC,EAAE,UAAC,KAAK,EAAE,UAAU;oBACpB,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;wBACX,CAAC,CAAC,KAAK,CAAC,CAAC;oBACV,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACP,CAAC,CAAC;4BACD,QAAQ,EAAE,UAAU;yBACpB,CAAC,CAAC;oBACJ,CAAC;gBACF,CAAC,CAAC,CAAC;YACJ,CAAC,EAAE,cAAM,OAAA,MAAM,CAAC,MAAM,EAAE,EAAf,CAAe,CAAC,CAAC;QAC3B,CAAC;QACF,oBAAC;IAAD,CAAC,AAxCD,IAwCC;IAxCY,qBAAa,gBAwCzB,CAAA","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport fs = require('fs');\n\nimport gracefulFs = require('graceful-fs');\ngracefulFs.gracefulify(fs);\n\nimport {PPromise} from 'vs/base/common/winjs.base';\nimport glob = require('vs/base/common/glob');\nimport {MAX_FILE_SIZE} from 'vs/platform/files/common/files';\nimport {IProgress, ILineMatch, IPatternInfo} from 'vs/platform/search/common/search';\nimport {FileWalker, Engine as FileSearchEngine} from 'vs/workbench/services/search/node/fileSearch';\nimport {Engine as TextSearchEngine} from 'vs/workbench/services/search/node/textSearch';\n\nexport interface IRawSearch {\n\trootFolders: string[];\n\textraFiles?: string[];\n\tfilePattern?: string;\n\texcludePattern?: glob.IExpression;\n\tincludePattern?: glob.IExpression;\n\tcontentPattern?: IPatternInfo;\n\tmaxResults?: number;\n\tmaxFilesize?: number;\n\tfileEncoding?: string;\n}\n\nexport interface IRawSearchService {\n\tfileSearch(search: IRawSearch): PPromise<ISerializedSearchComplete, ISerializedSearchProgressItem>;\n\ttextSearch(search: IRawSearch): PPromise<ISerializedSearchComplete, ISerializedSearchProgressItem>;\n}\n\nexport interface ISearchEngine {\n\tsearch: (onResult: (match: ISerializedFileMatch) => void, onProgress: (progress: IProgress) => void, done: (error: Error, isLimitHit: boolean) => void) => void;\n\tcancel: () => void;\n}\n\nexport interface ISerializedSearchComplete {\n\tlimitHit: boolean;\n}\n\nexport interface ISerializedFileMatch {\n\tpath?: string;\n\tlineMatches?: ILineMatch[];\n}\n\nexport interface ISerializedSearchProgressItem extends ISerializedFileMatch, IProgress {\n\t// Marker interface to indicate the possible values for progress calls from the engine\n}\n\nexport class SearchService implements IRawSearchService {\n\n\tpublic fileSearch(config: IRawSearch): PPromise<ISerializedSearchComplete, ISerializedSearchProgressItem> {\n\t\tlet engine = new FileSearchEngine(config);\n\n\t\treturn this.doSearch(engine);\n\t}\n\n\tpublic textSearch(config: IRawSearch): PPromise<ISerializedSearchComplete, ISerializedSearchProgressItem> {\n\t\tlet engine = new TextSearchEngine(config, new FileWalker({\n\t\t\trootFolders: config.rootFolders,\n\t\t\textraFiles: config.extraFiles,\n\t\t\tincludePattern: config.includePattern,\n\t\t\texcludePattern: config.excludePattern,\n\t\t\tfilePattern: config.filePattern,\n\t\t\tmaxFilesize: MAX_FILE_SIZE\n\t\t}));\n\n\t\treturn this.doSearch(engine);\n\t}\n\n\tprivate doSearch(engine: ISearchEngine): PPromise<ISerializedSearchComplete, ISerializedSearchProgressItem> {\n\t\treturn new PPromise<ISerializedSearchComplete, ISerializedSearchProgressItem>((c, e, p) => {\n\t\t\tengine.search((match) => {\n\t\t\t\tif (match) {\n\t\t\t\t\tp(match);\n\t\t\t\t}\n\t\t\t}, (progress) => {\n\t\t\t\tp(progress);\n\t\t\t}, (error, isLimitHit) => {\n\t\t\t\tif (error) {\n\t\t\t\t\te(error);\n\t\t\t\t} else {\n\t\t\t\t\tc({\n\t\t\t\t\t\tlimitHit: isLimitHit\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t}, () => engine.cancel());\n\t}\n}"]}