{"version":3,"file":"vs/workbench/services/quickopen/common/quickOpenService.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/workbench/services/quickopen/common/quickOpenService.ts"],"names":[],"mappings":";IAAA;;;oGAGgG;IAChG,YAAY,CAAC;IAwEF,yBAAiB,GAAG,+BAAe,CAAoB,kBAAkB,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport Event from 'vs/base/common/event';\nimport {IQuickNavigateConfiguration, IAutoFocus} from 'vs/base/parts/quickopen/common/quickOpen';\nimport {createDecorator, ServiceIdentifier} from 'vs/platform/instantiation/common/instantiation';\nimport {IEditorInput} from 'vs/platform/editor/common/editor';\n\nexport interface IPickOpenEntry {\n\tid?: string;\n\tlabel: string;\n\tdescription?: string;\n\tdetail?: string;\n\tseparator?: ISeparator;\n}\n\nexport interface ISeparator {\n\tborder?: boolean;\n\tlabel?: string;\n}\n\nexport interface IPickOptions {\n\n\t/**\n\t * an optional string to show as place holder in the input box to guide the user what she picks on\n\t */\n\tplaceHolder?: string;\n\n\t/**\n\t * optional auto focus settings\n\t */\n\tautoFocus?: IAutoFocus;\n\n\t/**\n\t * an optional flag to include the description when filtering the picks\n\t */\n\tmatchOnDescription?: boolean;\n\n\t/**\n\t * an optional flag to include the detail when filtering the picks\n\t */\n\tmatchOnDetail?: boolean;\n}\n\nexport interface IInputOptions {\n\n\t/**\n\t * the value to prefill in the input box\n\t */\n\tvalue?: string;\n\n\t/**\n\t * the text to display underneath the input box\n\t */\n\tprompt?: string;\n\n\t/**\n\t * an optional string to show as place holder in the input box to guide the user what to type\n\t */\n\tplaceHolder?: string;\n\n\t/**\n\t * set to true to show a password prompt that will not show the typed value\n\t */\n\tpassword?: boolean;\n\n\t/**\n\t * an optional function that is used to validate user input.\n\t */\n\tvalidateInput?: (input: string) => TPromise<string>;\n}\n\nexport var IQuickOpenService = createDecorator<IQuickOpenService>('quickOpenService');\n\nexport interface IQuickOpenService {\n\tserviceId : ServiceIdentifier<any>;\n\n\t/**\n\t * Asks the container to show the quick open control with the optional prefix set. If the optional parameter\n\t * is set for quick navigation mode, the quick open control will quickly navigate when the quick navigate\n\t * key is pressed and will run the selection after the ctrl key is released.\n\t *\n\t * The returned promise completes when quick open is closing.\n\t */\n\tshow(prefix?: string, quickNavigateConfiguration?: IQuickNavigateConfiguration): TPromise<void>;\n\n\t/**\n\t * Refreshes the quick open control. No-op, if the control is hidden.\n\t * If an input is provided, then the operation will only succeed if that same input is still\n\t * in the quick open control.\n\t */\n\trefresh(input?: string): TPromise<void>;\n\n\t/**\n\t * Returns the sorted list of editor inputs that have been opened by the user.\n\t */\n\tgetEditorHistory(): IEditorInput[];\n\n\t/**\n\t * Removes an editor history entry by the given input.\n\t */\n\tremoveEditorHistoryEntry(input: IEditorInput): void;\n\n\t/**\n\t * A convenient way to bring up quick open as a picker with custom elements. This bypasses the quick open handler\n\t * registry and just leverages the quick open widget to select any kind of entries.\n\t *\n\t * Passing in a promise will allow you to resolve the elements in the background while quick open will show a\n\t * progress bar spinning.\n\t */\n\tpick(picks: TPromise<string[]>, options?: IPickOptions): TPromise<string>;\n\tpick<T extends IPickOpenEntry>(picks: TPromise<T[]>, options?: IPickOptions): TPromise<T>;\n\tpick(picks: string[], options?: IPickOptions): TPromise<string>;\n\tpick<T extends IPickOpenEntry>(picks: T[], options?: IPickOptions): TPromise<T>;\n\n\t/**\n\t * Should not be used by clients. Will cause any opened quick open widget to navigate in the result set.\n\t */\n\tquickNavigate(configuration: IQuickNavigateConfiguration, next: boolean): void;\n\n\t/**\n\t * Opens the quick open box for user input and returns a promise with the user typed value if any.\n\t */\n\tinput(options?: IInputOptions): TPromise<string>;\n\n\t/**\n\t * Allows to register on the event that quick open is showing\n\t */\n\tonShow: Event<void>;\n\n\t/**\n\t * Allows to register on the event that quick open is hiding\n\t */\n\tonHide: Event<void>;\n}"]}