{"version":3,"sources":["vs/workbench/services/thread/electron-browser/threadService.ts"],"names":[],"mappings":"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","file":"vs/workbench/services/thread/electron-browser/threadService.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport * as nls from 'vs/nls';\nimport {Action} from 'vs/base/common/actions';\nimport {toErrorMessage} from 'vs/base/common/errors';\nimport {stringify} from 'vs/base/common/marshalling';\nimport * as objects from 'vs/base/common/objects';\nimport * as strings from 'vs/base/common/strings';\nimport URI from 'vs/base/common/uri';\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport {findFreePort} from 'vs/base/node/ports';\nimport {IMainProcessExtHostIPC, create} from 'vs/platform/extensions/common/ipcRemoteCom';\nimport {SyncDescriptor0} from 'vs/platform/instantiation/common/descriptors';\nimport {IMessageService, Severity} from 'vs/platform/message/common/message';\nimport {MainThreadService as CommonMainThreadService} from 'vs/platform/thread/common/mainThreadService';\nimport {ILifecycleService} from 'vs/platform/lifecycle/common/lifecycle';\nimport {IConfiguration, IWorkspaceContextService} from 'vs/platform/workspace/common/workspace';\nimport {IWindowService} from 'vs/workbench/services/window/electron-browser/windowService';\nimport {ChildProcess, fork} from 'child_process';\nimport {ipcRenderer as ipc} from 'electron';\n\nexport const EXTENSION_LOG_BROADCAST_CHANNEL = 'vscode:extensionLog';\nexport const EXTENSION_ATTACH_BROADCAST_CHANNEL = 'vscode:extensionAttach';\nexport const EXTENSION_TERMINATE_BROADCAST_CHANNEL = 'vscode:extensionTerminate';\n\n// Enable to see detailed message communication between window and extension host\nconst logExtensionHostCommunication = false;\n\nexport interface ILogEntry {\n\ttype: string;\n\tseverity: string;\n\targuments: any;\n}\n\nexport class MainThreadService extends CommonMainThreadService {\n\tprivate extensionHostProcessManager: ExtensionHostProcessManager;\n\tprivate remoteCom: IMainProcessExtHostIPC;\n\n\tconstructor(contextService: IWorkspaceContextService, messageService: IMessageService, windowService: IWindowService, lifecycleService: ILifecycleService) {\n\t\tsuper(contextService, 'vs/editor/common/worker/editorWorkerServer', 1);\n\n\t\tthis.extensionHostProcessManager = new ExtensionHostProcessManager(contextService, messageService, windowService, lifecycleService);\n\n\t\tlet logCommunication = logExtensionHostCommunication || contextService.getConfiguration().env.logExtensionHostCommunication;\n\n\t\t// Message: Window --> Extension Host\n\t\tthis.remoteCom = create((msg) => {\n\t\t\tif (logCommunication) {\n\t\t\t\tconsole.log('%c[Window \\u2192 Extension]%c[len: ' + strings.pad(msg.length, 5, ' ') + ']', 'color: darkgreen', 'color: grey', msg);\n\t\t\t}\n\n\t\t\tthis.extensionHostProcessManager.postMessage(msg);\n\t\t});\n\n\t\t// Message: Extension Host --> Window\n\t\tthis.extensionHostProcessManager.startExtensionHostProcess((msg) => {\n\t\t\tif (logCommunication) {\n\t\t\t\tconsole.log('%c[Extension \\u2192 Window]%c[len: ' + strings.pad(msg.length, 5, ' ') + ']', 'color: darkgreen', 'color: grey', msg);\n\t\t\t}\n\n\t\t\tthis.remoteCom.handle(msg);\n\t\t});\n\n\t\tthis.remoteCom.setManyHandler(this);\n\n\t\tlifecycleService.onShutdown(() => this.dispose());\n\t}\n\n\tpublic dispose(): void {\n\t\tthis.extensionHostProcessManager.terminate();\n\t}\n\n\tprotected _registerAndInstantiateExtHostActor<T>(id: string, descriptor: SyncDescriptor0<T>): T {\n\t\treturn this._getOrCreateProxyInstance(this.remoteCom, id, descriptor);\n\t}\n}\n\nclass ExtensionHostProcessManager {\n\tprivate initializeExtensionHostProcess: TPromise<ChildProcess>;\n\tprivate extensionHostProcessHandle: ChildProcess;\n\tprivate extensionHostProcessReady: boolean;\n\tprivate initializeTimer: number;\n\n\tprivate lastExtensionHostError: string;\n\tprivate unsentMessages: any[];\n\tprivate terminating: boolean;\n\n\tprivate isExtensionDevelopmentHost: boolean;\n\tprivate isExtensionDevelopmentTestFromCli: boolean;\n\tprivate isExtensionDevelopmentDebugging: boolean;\n\n\tconstructor(\n\t\tprivate contextService: IWorkspaceContextService,\n\t\tprivate messageService: IMessageService,\n\t\tprivate windowService: IWindowService,\n\t\tprivate lifecycleService: ILifecycleService\n\t) {\n\n\t\t// handle extension host lifecycle a bit special when we know we are developing an extension that runs inside\n\t\tconst config = this.contextService.getConfiguration();\n\t\tthis.isExtensionDevelopmentHost = !!config.env.extensionDevelopmentPath;\n\t\tthis.isExtensionDevelopmentDebugging = !!config.env.debugBrkExtensionHost;\n\t\tthis.isExtensionDevelopmentTestFromCli = this.isExtensionDevelopmentHost && !!config.env.extensionTestsPath && !config.env.debugBrkExtensionHost;\n\n\t\tthis.unsentMessages = [];\n\t\tthis.extensionHostProcessReady = false;\n\t\tlifecycleService.addBeforeShutdownParticipant(this);\n\t}\n\n\tpublic startExtensionHostProcess(onExtensionHostMessage: (msg: any) => void): void {\n\t\tlet config = this.contextService.getConfiguration();\n\n\t\tlet opts: any = {\n\t\t\tenv: objects.mixin(objects.clone(process.env), { AMD_ENTRYPOINT: 'vs/workbench/node/extensionHostProcess', PIPE_LOGGING: 'true', VERBOSE_LOGGING: true })\n\t\t};\n\n\t\t// Help in case we fail to start it\n\t\tif (!config.env.isBuilt || this.isExtensionDevelopmentHost) {\n\t\t\tthis.initializeTimer = setTimeout(() => {\n\t\t\t\tconst msg = this.isExtensionDevelopmentDebugging ? nls.localize('extensionHostProcess.startupFailDebug', \"Extension host did not start in 10 seconds, it might be stopped on the first line and needs a debugger to continue.\") : nls.localize('extensionHostProcess.startupFail', \"Extension host did not start in 10 seconds, that might be a problem.\");\n\n\t\t\t\tthis.messageService.show(Severity.Warning, msg);\n\t\t\t}, 10000);\n\t\t}\n\n\t\t// Initialize extension host process with hand shakes\n\t\tthis.initializeExtensionHostProcess = new TPromise<ChildProcess>((c, e) => {\n\n\t\t\t// Resolve additional execution args (e.g. debug)\n\t\t\treturn this.resolveDebugPort(config, (port) => {\n\t\t\t\tif (port) {\n\t\t\t\t\topts.execArgv = ['--nolazy', (this.isExtensionDevelopmentDebugging ? '--debug-brk=' : '--debug=') + port];\n\t\t\t\t}\n\n\t\t\t\t// Run Extension Host as fork of current process\n\t\t\t\tthis.extensionHostProcessHandle = fork(URI.parse(require.toUrl('bootstrap')).fsPath, ['--type=extensionHost'], opts);\n\n\t\t\t\t// Notify debugger that we are ready to attach to the process if we run a development extension\n\t\t\t\tif (this.isExtensionDevelopmentHost && port) {\n\t\t\t\t\tthis.windowService.broadcast({\n\t\t\t\t\t\tchannel: EXTENSION_ATTACH_BROADCAST_CHANNEL,\n\t\t\t\t\t\tpayload: {\n\t\t\t\t\t\t\tport: port\n\t\t\t\t\t\t}\n\t\t\t\t\t}, config.env.extensionDevelopmentPath /* target */);\n\t\t\t\t}\n\n\t\t\t\t// Messages from Extension host\n\t\t\t\tthis.extensionHostProcessHandle.on('message', (msg) => {\n\n\t\t\t\t\t// 1) Host is ready to receive messages, initialize it\n\t\t\t\t\tif (msg === 'ready') {\n\t\t\t\t\t\tif (this.initializeTimer) {\n\t\t\t\t\t\t\twindow.clearTimeout(this.initializeTimer);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tlet initPayload = stringify({\n\t\t\t\t\t\t\tparentPid: process.pid,\n\t\t\t\t\t\t\tcontextService: {\n\t\t\t\t\t\t\t\tworkspace: this.contextService.getWorkspace(),\n\t\t\t\t\t\t\t\tconfiguration: this.contextService.getConfiguration(),\n\t\t\t\t\t\t\t\toptions: this.contextService.getOptions()\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tthis.extensionHostProcessHandle.send(initPayload);\n\t\t\t\t\t}\n\n\t\t\t\t\t// 2) Host is initialized\n\t\t\t\t\telse if (msg === 'initialized') {\n\t\t\t\t\t\tthis.unsentMessages.forEach(m => this.postMessage(m));\n\t\t\t\t\t\tthis.unsentMessages = [];\n\n\t\t\t\t\t\tthis.extensionHostProcessReady = true;\n\t\t\t\t\t\tc(this.extensionHostProcessHandle);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Support logging from extension host\n\t\t\t\t\telse if (msg && (<ILogEntry>msg).type === '__$console') {\n\t\t\t\t\t\tlet logEntry: ILogEntry = msg;\n\n\t\t\t\t\t\tlet args = [];\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tlet parsed = JSON.parse(logEntry.arguments);\n\t\t\t\t\t\t\targs.push(...Object.getOwnPropertyNames(parsed).map(o => parsed[o]));\n\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\targs.push(logEntry.arguments);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// If the first argument is a string, check for % which indicates that the message\n\t\t\t\t\t\t// uses substitution for variables. In this case, we cannot just inject our colored\n\t\t\t\t\t\t// [Extension Host] to the front because it breaks substitution.\n\t\t\t\t\t\tlet consoleArgs = [];\n\t\t\t\t\t\tif (typeof args[0] === 'string' && args[0].indexOf('%') >= 0) {\n\t\t\t\t\t\t\tconsoleArgs = [`%c[Extension Host]%c ${args[0]}`, 'color: blue', 'color: black', ...args.slice(1)];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconsoleArgs = ['%c[Extension Host]', 'color: blue', ...args];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Send to local console unless we run tests from cli\n\t\t\t\t\t\tif (!this.isExtensionDevelopmentTestFromCli) {\n\t\t\t\t\t\t\tconsole[logEntry.severity].apply(console, consoleArgs);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Log on main side if running tests from cli\n\t\t\t\t\t\tif (this.isExtensionDevelopmentTestFromCli) {\n\t\t\t\t\t\t\tipc.send('vscode:log', logEntry);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Broadcast to other windows if we are in development mode\n\t\t\t\t\t\telse if (!config.env.isBuilt || this.isExtensionDevelopmentHost) {\n\t\t\t\t\t\t\tthis.windowService.broadcast({\n\t\t\t\t\t\t\t\tchannel: EXTENSION_LOG_BROADCAST_CHANNEL,\n\t\t\t\t\t\t\t\tpayload: logEntry\n\t\t\t\t\t\t\t}, config.env.extensionDevelopmentPath /* target */);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Any other message goes to the callback\n\t\t\t\t\telse {\n\t\t\t\t\t\tonExtensionHostMessage(msg);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\t// Lifecycle\n\t\t\t\tlet onExit = () => this.terminate();\n\t\t\t\tprocess.once('exit', onExit);\n\n\t\t\t\tthis.extensionHostProcessHandle.on('error', (err) => {\n\t\t\t\t\tlet errorMessage = toErrorMessage(err);\n\t\t\t\t\tif (errorMessage === this.lastExtensionHostError) {\n\t\t\t\t\t\treturn; // prevent error spam\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.lastExtensionHostError = errorMessage;\n\n\t\t\t\t\tthis.messageService.show(Severity.Error, nls.localize('extensionHostProcess.error', \"Error from the extension host: {0}\", errorMessage));\n\t\t\t\t});\n\n\t\t\t\tthis.extensionHostProcessHandle.on('exit', (code: any, signal: any) => {\n\t\t\t\t\tprocess.removeListener('exit', onExit);\n\n\t\t\t\t\tif (!this.terminating) {\n\n\t\t\t\t\t\t// Unexpected termination\n\t\t\t\t\t\tif (!this.isExtensionDevelopmentHost) {\n\t\t\t\t\t\t\tthis.messageService.show(Severity.Error, {\n\t\t\t\t\t\t\t\tmessage: nls.localize('extensionHostProcess.crash', \"Extension host terminated unexpectedly. Please reload the window to recover.\"),\n\t\t\t\t\t\t\t\tactions: [new Action('reloadWindow', nls.localize('reloadWindow', \"Reload Window\"), null, true, () => { this.windowService.getWindow().reload(); return TPromise.as(null); })]\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tconsole.error('Extension host terminated unexpectedly. Code: ', code, ' Signal: ', signal);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Expected development extension termination: When the extension host goes down we also shutdown the window\n\t\t\t\t\t\telse if (!this.isExtensionDevelopmentTestFromCli) {\n\t\t\t\t\t\t\tthis.windowService.getWindow().close();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// When CLI testing make sure to exit with proper exit code\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tipc.send('vscode:exit', code);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t}, () => this.terminate());\n\t}\n\n\tprivate resolveDebugPort(config: IConfiguration, clb: (port: number) => void): void {\n\n\t\t// Check for a free debugging port\n\t\tif (typeof config.env.debugExtensionHostPort === 'number') {\n\t\t\treturn findFreePort(config.env.debugExtensionHostPort, 10 /* try 10 ports */, (port) => {\n\t\t\t\tif (!port) {\n\t\t\t\t\tconsole.warn('%c[Extension Host] %cCould not find a free port for debugging', 'color: blue', 'color: black');\n\n\t\t\t\t\treturn clb(void 0);\n\t\t\t\t}\n\n\t\t\t\tif (port !== config.env.debugExtensionHostPort) {\n\t\t\t\t\tconsole.warn('%c[Extension Host] %cProvided debugging port ' + config.env.debugExtensionHostPort + ' is not free, using ' + port + ' instead.', 'color: blue', 'color: black');\n\t\t\t\t}\n\n\t\t\t\tif (this.isExtensionDevelopmentDebugging) {\n\t\t\t\t\tconsole.warn('%c[Extension Host] %cSTOPPED on first line for debugging on port ' + port, 'color: blue', 'color: black');\n\t\t\t\t} else {\n\t\t\t\t\tconsole.info('%c[Extension Host] %cdebugger listening on port ' + port, 'color: blue', 'color: black');\n\t\t\t\t}\n\n\t\t\t\treturn clb(port);\n\t\t\t});\n\t\t}\n\n\t\t// Nothing to do here\n\t\telse {\n\t\t\treturn clb(void 0);\n\t\t}\n\t}\n\n\tpublic postMessage(msg: any): void {\n\t\tif (this.extensionHostProcessReady) {\n\t\t\tthis.extensionHostProcessHandle.send(msg);\n\t\t} else if (this.initializeExtensionHostProcess) {\n\t\t\tthis.initializeExtensionHostProcess.done(p => p.send(msg));\n\t\t} else {\n\t\t\tthis.unsentMessages.push(msg);\n\t\t}\n\t}\n\n\tpublic terminate(): void {\n\t\tthis.terminating = true;\n\n\t\tif (this.extensionHostProcessHandle) {\n\t\t\tthis.extensionHostProcessHandle.send({\n\t\t\t\ttype: '__$terminate'\n\t\t\t});\n\t\t}\n\t}\n\n\tpublic beforeShutdown(): boolean | TPromise<boolean> {\n\n\t\t// If the extension development host was started without debugger attached we need\n\t\t// to communicate this back to the main side to terminate the debug session\n\t\tif (this.isExtensionDevelopmentHost && !this.isExtensionDevelopmentTestFromCli && !this.isExtensionDevelopmentDebugging) {\n\t\t\tthis.windowService.broadcast({\n\t\t\t\tchannel: EXTENSION_TERMINATE_BROADCAST_CHANNEL,\n\t\t\t\tpayload: true\n\t\t\t}, this.contextService.getConfiguration().env.extensionDevelopmentPath /* target */);\n\n\t\t\treturn TPromise.timeout(100 /* wait a bit for IPC to get delivered */).then(() => false);\n\t\t}\n\n\t\treturn false;\n\t}\n}"]}