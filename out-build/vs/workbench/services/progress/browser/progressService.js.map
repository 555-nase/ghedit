{"version":3,"file":"progressService.js","sourceRoot":"","sources":["../../../../../../src/vs/workbench/services/progress/browser/progressService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport types = require('vs/base/common/types');\nimport {ProgressBar} from 'vs/base/browser/ui/progressbar/progressbar';\nimport {EditorEvent, EventType, CompositeEvent} from 'vs/workbench/common/events';\nimport {IEventService} from 'vs/platform/event/common/event';\nimport {IProgressService, IProgressRunner} from 'vs/platform/progress/common/progress';\n\ninterface ProgressState {\n\tinfinite?: boolean;\n\ttotal?: number;\n\tworked?: number;\n\tdone?: boolean;\n\twhilePromise?: TPromise<any>;\n}\n\nexport abstract class ScopedService {\n\tprivate _eventService: IEventService;\n\tprivate scopeId: string;\n\n\tconstructor(eventService: IEventService, scopeId: string) {\n\t\tthis._eventService = eventService;\n\t\tthis.scopeId = scopeId;\n\n\t\tthis.registerListeners();\n\t}\n\n\tpublic get eventService(): IEventService {\n\t\treturn this._eventService;\n\t}\n\n\tpublic registerListeners(): void {\n\t\tthis.eventService.addListener(EventType.EDITOR_CLOSED, (e: EditorEvent) => {\n\t\t\tif (e.editorId === this.scopeId) {\n\t\t\t\tthis.onScopeDeactivated();\n\t\t\t}\n\t\t});\n\n\t\tthis.eventService.addListener(EventType.EDITOR_OPENED, (e: EditorEvent) => {\n\t\t\tif (e.editorId === this.scopeId) {\n\t\t\t\tthis.onScopeActivated();\n\t\t\t}\n\t\t});\n\n\t\tthis.eventService.addListener(EventType.COMPOSITE_CLOSED, (e: CompositeEvent) => {\n\t\t\tif (e.compositeId === this.scopeId) {\n\t\t\t\tthis.onScopeDeactivated();\n\t\t\t}\n\t\t});\n\n\t\tthis.eventService.addListener(EventType.COMPOSITE_OPENED, (e: CompositeEvent) => {\n\t\t\tif (e.compositeId === this.scopeId) {\n\t\t\t\tthis.onScopeActivated();\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic abstract onScopeActivated(): void;\n\n\tpublic abstract onScopeDeactivated(): void;\n}\n\nexport class WorkbenchProgressService extends ScopedService implements IProgressService {\n\tpublic serviceId = IProgressService;\n\tprivate isActive: boolean;\n\tprivate progressbar: ProgressBar;\n\tprivate progressState: ProgressState;\n\n\tconstructor(eventService: IEventService, progressbar: ProgressBar, scopeId?: string, isActive?: boolean) {\n\t\tsuper(eventService, scopeId);\n\n\t\tthis.progressbar = progressbar;\n\t\tthis.isActive = isActive || types.isUndefinedOrNull(scopeId); // If service is unscoped, enable by default\n\t\tthis.progressState = {};\n\t}\n\n\tpublic onScopeDeactivated(): void {\n\t\tthis.isActive = false;\n\t}\n\n\tpublic onScopeActivated(): void {\n\t\tthis.isActive = true;\n\n\t\t// Return early if progress state indicates that progress is done\n\t\tif (this.progressState.done) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Replay Infinite Progress from Promise\n\t\tif (this.progressState.whilePromise) {\n\t\t\tthis.doShowWhile();\n\t\t}\n\n\t\t// Replay Infinite Progress\n\t\telse if (this.progressState.infinite) {\n\t\t\tthis.progressbar.infinite().getContainer().show();\n\t\t}\n\n\t\t// Replay Finite Progress (Total & Worked)\n\t\telse {\n\t\t\tif (this.progressState.total) {\n\t\t\t\tthis.progressbar.total(this.progressState.total).getContainer().show();\n\t\t\t}\n\n\t\t\tif (this.progressState.worked) {\n\t\t\t\tthis.progressbar.worked(this.progressState.worked).getContainer().show();\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate clearProgressState(): void {\n\t\tdelete this.progressState.infinite;\n\t\tdelete this.progressState.done;\n\t\tdelete this.progressState.worked;\n\t\tdelete this.progressState.total;\n\t\tdelete this.progressState.whilePromise;\n\t}\n\n\tpublic show(infinite: boolean, delay?: number): IProgressRunner;\n\tpublic show(total: number, delay?: number): IProgressRunner;\n\tpublic show(infiniteOrTotal: any, delay?: number): IProgressRunner {\n\t\tlet infinite: boolean;\n\t\tlet total: number;\n\n\t\t// Sort out Arguments\n\t\tif (infiniteOrTotal === false || infiniteOrTotal === true) {\n\t\t\tinfinite = infiniteOrTotal;\n\t\t} else {\n\t\t\ttotal = infiniteOrTotal;\n\t\t}\n\n\t\t// Reset State\n\t\tthis.clearProgressState();\n\n\t\t// Keep in State\n\t\tthis.progressState.infinite = infinite;\n\t\tthis.progressState.total = total;\n\n\t\t// Active: Show Progress\n\t\tif (this.isActive) {\n\n\t\t\t// Infinite: Start Progressbar and Show after Delay\n\t\t\tif (!types.isUndefinedOrNull(infinite)) {\n\t\t\t\tif (types.isUndefinedOrNull(delay)) {\n\t\t\t\t\tthis.progressbar.infinite().getContainer().show();\n\t\t\t\t} else {\n\t\t\t\t\tthis.progressbar.infinite().getContainer().showDelayed(delay);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Finite: Start Progressbar and Show after Delay\n\t\t\telse if (!types.isUndefinedOrNull(total)) {\n\t\t\t\tif (types.isUndefinedOrNull(delay)) {\n\t\t\t\t\tthis.progressbar.total(total).getContainer().show();\n\t\t\t\t} else {\n\t\t\t\t\tthis.progressbar.total(total).getContainer().showDelayed(delay);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\ttotal: (total: number) => {\n\t\t\t\tthis.progressState.infinite = false;\n\t\t\t\tthis.progressState.total = total;\n\n\t\t\t\tif (this.isActive) {\n\t\t\t\t\tthis.progressbar.total(total);\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tworked: (worked: number) => {\n\n\t\t\t\t// Verify first that we are either not active or the progressbar has a total set\n\t\t\t\tif (!this.isActive || this.progressbar.hasTotal()) {\n\t\t\t\t\tthis.progressState.infinite = false;\n\t\t\t\t\tif (this.progressState.worked) {\n\t\t\t\t\t\tthis.progressState.worked += worked;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.progressState.worked = worked;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (this.isActive) {\n\t\t\t\t\t\tthis.progressbar.worked(worked);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Otherwise the progress bar does not support worked(), we fallback to infinite() progress\n\t\t\t\telse {\n\t\t\t\t\tthis.progressState.infinite = true;\n\t\t\t\t\tdelete this.progressState.worked;\n\t\t\t\t\tdelete this.progressState.total;\n\t\t\t\t\tthis.progressbar.infinite().getContainer().show();\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tdone: () => {\n\t\t\t\tthis.progressState.infinite = false;\n\t\t\t\tthis.progressState.done = true;\n\n\t\t\t\tif (this.isActive) {\n\t\t\t\t\tthis.progressbar.stop().getContainer().hide();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n\n\tpublic showWhile(promise: TPromise<any>, delay?: number): TPromise<void> {\n\t\tlet stack: boolean = !!this.progressState.whilePromise;\n\n\t\t// Reset State\n\t\tif (!stack) {\n\t\t\tthis.clearProgressState();\n\t\t}\n\n\t\t// Otherwise join with existing running promise to ensure progress is accurate\n\t\telse {\n\t\t\tpromise = TPromise.join([promise, this.progressState.whilePromise]);\n\t\t}\n\n\t\t// Keep Promise in State\n\t\tthis.progressState.whilePromise = promise;\n\n\t\tlet stop = () => {\n\n\t\t\t// If this is not the last promise in the list of joined promises, return early\n\t\t\tif (!!this.progressState.whilePromise && this.progressState.whilePromise !== promise) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// The while promise is either null or equal the promise we last hooked on\n\t\t\tthis.clearProgressState();\n\n\t\t\tif (this.isActive) {\n\t\t\t\tthis.progressbar.stop().getContainer().hide();\n\t\t\t}\n\t\t};\n\n\t\tthis.doShowWhile(delay);\n\n\t\treturn promise.then(stop, stop);\n\t}\n\n\tprivate doShowWhile(delay?: number): void {\n\n\t\t// Show Progress when active\n\t\tif (this.isActive) {\n\t\t\tif (types.isUndefinedOrNull(delay)) {\n\t\t\t\tthis.progressbar.infinite().getContainer().show();\n\t\t\t} else {\n\t\t\t\tthis.progressbar.infinite().getContainer().showDelayed(delay);\n\t\t\t}\n\t\t}\n\t}\n}"]}