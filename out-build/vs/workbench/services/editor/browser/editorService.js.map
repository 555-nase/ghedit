{"version":3,"file":"vs/workbench/services/editor/browser/editorService.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/workbench/services/editor/browser/editorService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {TPromise, Promise} from 'vs/base/common/winjs.base';\nimport URI from 'vs/base/common/uri';\nimport network = require('vs/base/common/network');\nimport {guessMimeTypes} from 'vs/base/common/mime';\nimport {Registry} from 'vs/platform/platform';\nimport {basename, dirname} from 'vs/base/common/paths';\nimport types = require('vs/base/common/types');\nimport {IDiffEditor, ICodeEditor} from 'vs/editor/browser/editorBrowser';\nimport {ICommonCodeEditor, IModel, EditorType, IEditor as ICommonEditor} from 'vs/editor/common/editorCommon';\nimport {BaseEditor, IEditorRegistry, Extensions} from 'vs/workbench/browser/parts/editor/baseEditor';\nimport {EditorInput, EditorOptions, IFileEditorInput, TextEditorOptions} from 'vs/workbench/common/editor';\nimport {ResourceEditorInput} from 'vs/workbench/common/editor/resourceEditorInput';\nimport {UntitledEditorInput} from 'vs/workbench/common/editor/untitledEditorInput';\nimport {DiffEditorInput} from 'vs/workbench/common/editor/diffEditorInput';\nimport {IUntitledEditorService} from 'vs/workbench/services/untitled/common/untitledEditorService';\nimport {IWorkbenchEditorService, EditorArrangement} from 'vs/workbench/services/editor/common/editorService';\nimport {IEditorInput, IEditorModel, IEditorOptions, Position, IEditor, IResourceInput, ITextEditorModel} from 'vs/platform/editor/common/editor';\nimport {IInstantiationService} from 'vs/platform/instantiation/common/instantiation';\nimport {AsyncDescriptor} from 'vs/platform/instantiation/common/descriptors';\n\nexport interface IEditorPart {\n\tsetEditors(inputs: EditorInput[], options?: EditorOptions[]): TPromise<BaseEditor[]>;\n\topenEditor(input?: EditorInput, options?: EditorOptions, sideBySide?: boolean): TPromise<BaseEditor>;\n\topenEditor(input?: EditorInput, options?: EditorOptions, position?: Position): TPromise<BaseEditor>;\n\tactivateEditor(editor: IEditor): void;\n\tcloseEditors(othersOnly?: boolean): TPromise<void>;\n\tgetActiveEditor(): BaseEditor;\n\tgetVisibleEditors(): IEditor[];\n\tgetActiveEditorInput(): EditorInput;\n\tmoveEditor(from: Position, to: Position): void;\n\tarrangeEditors(arrangement: EditorArrangement): void;\n}\n\nexport class WorkbenchEditorService implements IWorkbenchEditorService {\n\tpublic serviceId = IWorkbenchEditorService;\n\n\tprivate editorPart: IEditorPart;\n\tprivate fileInputDescriptor: AsyncDescriptor<IFileEditorInput>;\n\n\tconstructor(\n\t\teditorPart: IEditorPart,\n\t\t@IUntitledEditorService private untitledEditorService: IUntitledEditorService,\n\t\t@IInstantiationService private instantiationService?: IInstantiationService\n\t) {\n\t\tthis.editorPart = editorPart;\n\t\tthis.fileInputDescriptor = (<IEditorRegistry>Registry.as(Extensions.Editors)).getDefaultFileInput();\n\t}\n\n\tpublic setInstantiationService(service: IInstantiationService): void {\n\t\tthis.instantiationService = service;\n\t}\n\n\tpublic getActiveEditor(): IEditor {\n\t\treturn this.editorPart.getActiveEditor();\n\t}\n\n\tpublic getActiveEditorInput(): IEditorInput {\n\t\treturn this.editorPart.getActiveEditorInput();\n\t}\n\n\tpublic getVisibleEditors(): IEditor[] {\n\t\treturn this.editorPart.getVisibleEditors();\n\t}\n\n\tpublic isVisible(input: IEditorInput, includeDiff: boolean): boolean {\n\t\tif (!input) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn this.getVisibleEditors().some((editor) => {\n\t\t\tif (!editor.input) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (input.matches(editor.input)) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tif (includeDiff) {\n\t\t\t\tlet diffInput = <DiffEditorInput>editor.input;\n\t\t\t\tif (types.isFunction(diffInput.getOriginalInput) && types.isFunction(diffInput.getModifiedInput)) {\n\t\t\t\t\treturn input.matches(diffInput.getModifiedInput()) || input.matches(diffInput.getOriginalInput());\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn false;\n\t\t});\n\t}\n\n\tpublic moveEditor(from: Position, to: Position): void {\n\t\tthis.editorPart.moveEditor(from, to);\n\t}\n\n\tpublic arrangeEditors(arrangement: EditorArrangement): void {\n\t\tthis.editorPart.arrangeEditors(arrangement);\n\t}\n\n\tpublic setEditors(inputs: IEditorInput[], options?: IEditorOptions[]): TPromise<IEditor[]>;\n\tpublic setEditors(inputs: IResourceInput[]): TPromise<IEditor[]>;\n\tpublic setEditors(inputs: any[], options?: any[]): TPromise<IEditor[]> {\n\t\treturn Promise.join(inputs.map((input) => this.inputToType(input))).then((typedInputs) => {\n\t\t\treturn this.editorPart.setEditors(typedInputs, options || inputs.map(input => {\n\t\t\t\tif (input instanceof EditorInput) {\n\t\t\t\t\treturn null; // no options for editor inputs\n\t\t\t\t}\n\n\t\t\t\treturn TextEditorOptions.from(input); // ITextInputs can carry settings, so support that!\n\t\t\t}));\n\t\t});\n\t}\n\n\tpublic openEditor(input: IEditorInput, options?: IEditorOptions, sideBySide?: boolean): TPromise<IEditor>;\n\tpublic openEditor(input: IEditorInput, options?: IEditorOptions, position?: Position): TPromise<IEditor>;\n\tpublic openEditor(input: IResourceInput, position?: Position): TPromise<IEditor>;\n\tpublic openEditor(input: IResourceInput, sideBySide?: boolean): TPromise<IEditor>;\n\tpublic openEditor(input: any, arg2?: any, arg3?: any): TPromise<IEditor> {\n\n\t\t// Support for closing an opened editor at a position by passing null as input\n\t\tif (input === null) {\n\t\t\treturn this.doOpenEditor(input, null, (types.isNumber(arg2) || types.isBoolean(arg2)) ? arg2 : arg3);\n\t\t}\n\n\t\t// Workbench Input Support\n\t\tif (input instanceof EditorInput) {\n\t\t\treturn this.doOpenEditor(<EditorInput>input, <EditorOptions>arg2, arg3);\n\t\t}\n\n\t\t// Support opening foreign resources (such as a http link that points outside of the workbench)\n\t\tlet resourceInput = <IResourceInput>input;\n\t\tif (resourceInput.resource instanceof URI) {\n\t\t\tlet schema = resourceInput.resource.scheme;\n\t\t\tif (schema === network.Schemas.http || schema === network.Schemas.https) {\n\t\t\t\twindow.open(resourceInput.resource.toString(true));\n\t\t\t\treturn TPromise.as<IEditor>(null);\n\t\t\t}\n\t\t}\n\n\t\t// Untyped Text Editor Support (required for code that uses this service below workbench level)\n\t\tlet textInput = <IResourceInput>input;\n\t\treturn this.inputToType(textInput).then((typedFileInput: EditorInput) => {\n\t\t\tif (typedFileInput) {\n\t\t\t\treturn this.doOpenEditor(typedFileInput, TextEditorOptions.from(textInput), arg2);\n\t\t\t}\n\n\t\t\treturn TPromise.as<IEditor>(null);\n\t\t});\n\t}\n\n\t/**\n\t * Allow subclasses to implement their own behavior for opening editor (see below).\n\t */\n\tprotected doOpenEditor(input: EditorInput, options?: EditorOptions, sideBySide?: boolean): TPromise<IEditor>;\n\tprotected doOpenEditor(input: EditorInput, options?: EditorOptions, position?: Position): TPromise<IEditor>;\n\tprotected doOpenEditor(input: EditorInput, options?: EditorOptions, arg3?: any): TPromise<IEditor> {\n\t\treturn this.editorPart.openEditor(input, options, arg3);\n\t}\n\n\tpublic closeEditor(editor?: IEditor): TPromise<IEditor>;\n\tpublic closeEditor(position?: Position): TPromise<IEditor>;\n\tpublic closeEditor(arg?: any): TPromise<IEditor> {\n\t\tlet targetEditor = this.findEditor(arg);\n\t\tif (targetEditor) {\n\t\t\treturn this.editorPart.openEditor(null, null, targetEditor.position);\n\t\t}\n\n\t\treturn TPromise.as(null);\n\t}\n\n\tpublic closeEditors(othersOnly?: boolean): TPromise<void> {\n\t\treturn this.editorPart.closeEditors(othersOnly);\n\t}\n\n\tpublic focusEditor(editor?: IEditor): TPromise<IEditor>;\n\tpublic focusEditor(position?: Position): TPromise<IEditor>;\n\tpublic focusEditor(arg?: any): TPromise<IEditor> {\n\t\tlet targetEditor = this.findEditor(arg);\n\t\tif (targetEditor) {\n\t\t\treturn this.editorPart.openEditor(targetEditor.input, null, targetEditor.position);\n\t\t}\n\n\t\treturn TPromise.as(null);\n\t}\n\n\tpublic activateEditor(editor: IEditor): void;\n\tpublic activateEditor(position: Position): void;\n\tpublic activateEditor(arg: any): void {\n\t\tlet targetEditor = this.findEditor(arg);\n\t\tif (targetEditor) {\n\t\t\tthis.editorPart.activateEditor(targetEditor);\n\t\t}\n\t}\n\n\tprivate findEditor(editor?: IEditor): BaseEditor;\n\tprivate findEditor(position?: Position): BaseEditor;\n\tprivate findEditor(arg?: any): BaseEditor {\n\n\t\t// Editor provided\n\t\tif (arg instanceof BaseEditor) {\n\t\t\treturn <BaseEditor>arg;\n\t\t}\n\n\t\t// Find active editor\n\t\tif (types.isUndefinedOrNull(arg)) {\n\t\t\treturn this.editorPart.getActiveEditor();\n\t\t}\n\n\t\t// Target position provided\n\t\tif (types.isNumber(arg)) {\n\t\t\tlet position = <Position>arg;\n\t\t\tlet visibleEditors = this.editorPart.getVisibleEditors();\n\t\t\tfor (let i = 0; i < visibleEditors.length; i++) {\n\t\t\t\tlet editor = <BaseEditor>visibleEditors[i];\n\t\t\t\tif (editor.position === position) {\n\t\t\t\t\treturn editor;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tpublic resolveEditorModel(input: IEditorInput, refresh?: boolean): TPromise<IEditorModel>;\n\tpublic resolveEditorModel(input: IResourceInput, refresh?: boolean): TPromise<ITextEditorModel>;\n\tpublic resolveEditorModel(input: any, refresh?: boolean): TPromise<IEditorModel> {\n\t\treturn this.inputToType(input).then((workbenchInput: IEditorInput) => {\n\t\t\tif (workbenchInput) {\n\n\t\t\t\t// Resolve if applicable\n\t\t\t\tif (workbenchInput instanceof EditorInput) {\n\t\t\t\t\treturn (<EditorInput>workbenchInput).resolve(!!refresh);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn TPromise.as<IEditorModel>(null);\n\t\t});\n\t}\n\n\tpublic inputToType(input: EditorInput): TPromise<IEditorInput>;\n\tpublic inputToType(input: IResourceInput): TPromise<IEditorInput>;\n\tpublic inputToType(input: any): TPromise<IEditorInput> {\n\n\t\t// Workbench Input Support\n\t\tif (input instanceof EditorInput) {\n\t\t\treturn TPromise.as<EditorInput>(<EditorInput>input);\n\t\t}\n\n\t\t// Base Text Editor Support for inmemory resources\n\t\tlet resourceInput = <IResourceInput>input;\n\t\tif (resourceInput.resource instanceof URI && resourceInput.resource.scheme === network.Schemas.inMemory) {\n\n\t\t\t// For in-memory resources we only support to resolve the input from the current active editor\n\t\t\t// because the workbench does not track editor models by in memory URL. This concept is only\n\t\t\t// being used in the code editor.\n\t\t\tlet activeEditor = this.getActiveEditor();\n\t\t\tif (activeEditor) {\n\t\t\t\tlet control = <ICommonEditor>activeEditor.getControl();\n\t\t\t\tif (types.isFunction(control.getEditorType)) {\n\n\t\t\t\t\t// Single Editor: If code editor model matches, return input from editor\n\t\t\t\t\tif (control.getEditorType() === EditorType.ICodeEditor) {\n\t\t\t\t\t\tlet codeEditor = <ICodeEditor>control;\n\t\t\t\t\t\tlet model = this.findModel(codeEditor, input);\n\t\t\t\t\t\tif (model) {\n\t\t\t\t\t\t\treturn TPromise.as(activeEditor.input);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Diff Editor: If left or right code editor model matches, return associated input\n\t\t\t\t\telse if (control.getEditorType() === EditorType.IDiffEditor) {\n\t\t\t\t\t\tlet diffInput = <DiffEditorInput>activeEditor.input;\n\t\t\t\t\t\tlet diffCodeEditor = <IDiffEditor>control;\n\n\t\t\t\t\t\tlet originalModel = this.findModel(diffCodeEditor.getOriginalEditor(), input);\n\t\t\t\t\t\tif (originalModel) {\n\t\t\t\t\t\t\treturn TPromise.as(diffInput.getOriginalInput());\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tlet modifiedModel = this.findModel(diffCodeEditor.getModifiedEditor(), input);\n\t\t\t\t\t\tif (modifiedModel) {\n\t\t\t\t\t\t\treturn TPromise.as(diffInput.getModifiedInput());\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Untitled file support\n\t\telse if (resourceInput.resource instanceof URI && (resourceInput.resource.scheme === UntitledEditorInput.SCHEMA)) {\n\t\t\treturn TPromise.as<EditorInput>(this.untitledEditorService.createOrGet(resourceInput.resource));\n\t\t}\n\n\t\t// Base Text Editor Support for file resources\n\t\telse if (this.fileInputDescriptor && resourceInput.resource instanceof URI && resourceInput.resource.scheme === network.Schemas.file) {\n\t\t\treturn this.createFileInput(resourceInput.resource, resourceInput.mime);\n\t\t}\n\n\t\t// Treat an URI as ResourceEditorInput\n\t\telse if (resourceInput.resource instanceof URI) {\n\t\t\treturn TPromise.as(this.instantiationService.createInstance(ResourceEditorInput,\n\t\t\t\tbasename(resourceInput.resource.fsPath),\n\t\t\t\tdirname(resourceInput.resource.fsPath),\n\t\t\t\tresourceInput.resource));\n\t\t}\n\n\t\treturn TPromise.as<EditorInput>(null);\n\t}\n\n\tprivate createFileInput(resource: URI, mime?: string): TPromise<IFileEditorInput> {\n\t\treturn this.instantiationService.createInstance(this.fileInputDescriptor).then((typedFileInput) => {\n\t\t\ttypedFileInput.setResource(resource);\n\t\t\ttypedFileInput.setMime(mime || guessMimeTypes(resource.fsPath).join(', '));\n\n\t\t\treturn typedFileInput;\n\t\t});\n\t}\n\n\tprivate findModel(editor: ICommonCodeEditor, input: IResourceInput): IModel {\n\t\tlet model = editor.getModel();\n\t\tif (!model) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn model.getAssociatedResource().toString() === input.resource.toString() ? model : null;\n\t}\n}\n\n// Helper that implements IEditorPart through an instance of IEditorService\nclass EditorPartDelegate implements IEditorPart {\n\tprivate editorService: IWorkbenchEditorService;\n\n\tconstructor(service: IWorkbenchEditorService) {\n\t\tthis.editorService = service;\n\t}\n\n\tpublic setEditors(inputs: EditorInput[]): TPromise<BaseEditor[]> {\n\t\treturn this.editorService.setEditors(inputs);\n\t}\n\n\tpublic openEditor(input?: EditorInput, options?: EditorOptions, sideBySide?: boolean): TPromise<IEditor>;\n\tpublic openEditor(input?: EditorInput, options?: EditorOptions, position?: Position): TPromise<IEditor>;\n\tpublic openEditor(input?: EditorInput, options?: EditorOptions, arg3?: any): TPromise<IEditor> {\n\t\treturn this.editorService.openEditor(input, options, arg3);\n\t}\n\n\tpublic getActiveEditor(): BaseEditor {\n\t\treturn <BaseEditor>this.editorService.getActiveEditor();\n\t}\n\n\n\tpublic activateEditor(editor: IEditor): void {\n\t\tthis.editorService.activateEditor(editor);\n\t}\n\n\tpublic getActiveEditorInput(): EditorInput {\n\t\treturn <EditorInput>this.editorService.getActiveEditorInput();\n\t}\n\n\tpublic getVisibleEditors(): IEditor[] {\n\t\treturn this.editorService.getVisibleEditors();\n\t}\n\n\tpublic moveEditor(from: Position, to: Position): void {\n\t\tthis.editorService.moveEditor(from, to);\n\t}\n\n\tpublic arrangeEditors(arrangement: EditorArrangement): void {\n\t\tthis.editorService.arrangeEditors(arrangement);\n\t}\n\n\tpublic closeEditors(othersOnly?: boolean): TPromise<void> {\n\t\treturn this.editorService.closeEditors(othersOnly);\n\t}\n}\n\nexport interface IDelegatingWorkbenchEditorHandler {\n\t(editor: BaseEditor, input: EditorInput, options?: EditorOptions, sideBySide?: boolean): TPromise<boolean>;\n\t(editor: BaseEditor, input: EditorInput, options?: EditorOptions, position?: Position): TPromise<boolean>;\n}\n\n/**\n * Subclass of workbench editor service that delegates all calls to the provided editor service. Subclasses can choose to override the behavior\n * of openEditor() by providing a handler. The handler returns a promise that resolves to true or false to indicate if an action has been taken.\n * If false is returned, the service will delegate to editor service for handling the call to openEditor().\n *\n * This gives clients a chance to override the behavior of openEditor() to match their context.\n */\nexport class DelegatingWorkbenchEditorService extends WorkbenchEditorService {\n\tprivate editor: BaseEditor;\n\tprivate handler: IDelegatingWorkbenchEditorHandler;\n\n\tconstructor(\n\t\teditor: BaseEditor,\n\t\thandler: IDelegatingWorkbenchEditorHandler,\n\t\t@IUntitledEditorService untitledEditorService: IUntitledEditorService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IWorkbenchEditorService editorService: IWorkbenchEditorService\n\t) {\n\t\tsuper(\n\t\t\tnew EditorPartDelegate(editorService),\n\t\t\tuntitledEditorService,\n\t\t\tinstantiationService\n\t\t);\n\n\t\tthis.editor = editor;\n\t\tthis.handler = handler;\n\t}\n\n\tprotected doOpenEditor(input: EditorInput, options?: EditorOptions, sideBySide?: boolean): TPromise<IEditor>;\n\tprotected doOpenEditor(input: EditorInput, options?: EditorOptions, position?: Position): TPromise<IEditor>;\n\tprotected doOpenEditor(input: EditorInput, options?: EditorOptions, arg3?: any): TPromise<IEditor> {\n\t\treturn this.handler(this.editor, input, options, arg3).then((result) => {\n\t\t\tif (result) {\n\t\t\t\treturn TPromise.as<BaseEditor>(this.editor);\n\t\t\t}\n\n\t\t\treturn super.doOpenEditor(input, options, arg3);\n\t\t});\n\t}\n}"]}