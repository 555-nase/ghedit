{"version":3,"sources":["vs/workbench/services/keybinding/electron-browser/keybindingService.ts"],"names":[],"mappings":"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","file":"vs/workbench/services/keybinding/electron-browser/keybindingService.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport * as nls from 'vs/nls';\nimport {IHTMLContentElement} from 'vs/base/common/htmlContent';\nimport {IJSONSchema} from 'vs/base/common/jsonSchema';\nimport {Keybinding} from 'vs/base/common/keyCodes';\nimport * as platform from 'vs/base/common/platform';\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport {IEventService} from 'vs/platform/event/common/event';\nimport {IExtensionService} from 'vs/platform/extensions/common/extensions';\nimport {IExtensionMessageCollector, ExtensionsRegistry} from 'vs/platform/extensions/common/extensionsRegistry';\nimport {Extensions, IJSONContributionRegistry} from 'vs/platform/jsonschemas/common/jsonContributionRegistry';\nimport {KeybindingService} from 'vs/platform/keybinding/browser/keybindingServiceImpl';\nimport {IOSupport} from 'vs/platform/keybinding/common/keybindingResolver';\nimport {IKeybindingItem, IUserFriendlyKeybinding} from 'vs/platform/keybinding/common/keybindingService';\nimport {ICommandRule, KeybindingsRegistry} from 'vs/platform/keybinding/common/keybindingsRegistry';\nimport {Registry} from 'vs/platform/platform';\nimport {ITelemetryService} from 'vs/platform/telemetry/common/telemetry';\nimport {IConfigurationService} from 'vs/platform/configuration/common/configuration';\nimport {IWorkspaceContextService} from 'vs/platform/workspace/common/workspace';\nimport {EventType, OptionsChangeEvent} from 'vs/workbench/common/events';\nimport {getNativeLabelProvider, getNativeAriaLabelProvider} from 'vs/workbench/services/keybinding/electron-browser/nativeKeymap';\n\ninterface ContributedKeyBinding {\n\tcommand: string;\n\tkey: string;\n\twhen?: string;\n\tmac?: string;\n\tlinux?: string;\n\twin?: string;\n}\n\nfunction isContributedKeyBindingsArray(thing: ContributedKeyBinding|ContributedKeyBinding[]): thing is ContributedKeyBinding[] {\n\treturn Array.isArray(thing);\n}\n\nfunction isValidContributedKeyBinding(keyBinding: ContributedKeyBinding, rejects: string[]): boolean {\n\tif (!keyBinding) {\n\t\trejects.push(nls.localize('nonempty', \"expected non-empty value.\"));\n\t\treturn false;\n\t}\n\tif (typeof keyBinding.command !== 'string') {\n\t\trejects.push(nls.localize('requirestring', \"property `{0}` is mandatory and must be of type `string`\", 'command'));\n\t\treturn false;\n\t}\n\tif (typeof keyBinding.key !== 'string') {\n\t\trejects.push(nls.localize('requirestring', \"property `{0}` is mandatory and must be of type `string`\", 'key'));\n\t\treturn false;\n\t}\n\tif (keyBinding.when && typeof keyBinding.when !== 'string') {\n\t\trejects.push(nls.localize('optstring', \"property `{0}` can be omitted or must be of type `string`\", 'when'));\n\t\treturn false;\n\t}\n\tif (keyBinding.mac && typeof keyBinding.mac !== 'string') {\n\t\trejects.push(nls.localize('optstring', \"property `{0}` can be omitted or must be of type `string`\", 'mac'));\n\t\treturn false;\n\t}\n\tif (keyBinding.linux && typeof keyBinding.linux !== 'string') {\n\t\trejects.push(nls.localize('optstring', \"property `{0}` can be omitted or must be of type `string`\", 'linux'));\n\t\treturn false;\n\t}\n\tif (keyBinding.win && typeof keyBinding.win !== 'string') {\n\t\trejects.push(nls.localize('optstring', \"property `{0}` can be omitted or must be of type `string`\", 'win'));\n\t\treturn false;\n\t}\n\treturn true;\n}\n\nlet keybindingType:IJSONSchema = {\n\ttype: 'object',\n\tdefault: { command: '', key: '' },\n\tproperties: {\n\t\tcommand: {\n\t\t\tdescription: nls.localize('vscode.extension.contributes.keybindings.command', 'Identifier of the command to run when keybinding is triggered.'),\n\t\t\ttype: 'string'\n\t\t},\n\t\tkey: {\n\t\t\tdescription: nls.localize('vscode.extension.contributes.keybindings.key', 'Key or key sequence (separate keys with plus-sign and sequences with space, e.g Ctrl+O and Ctrl+L L for a chord'),\n\t\t\ttype: 'string'\n\t\t},\n\t\tmac: {\n\t\t\tdescription: nls.localize('vscode.extension.contributes.keybindings.mac', 'Mac specific key or key sequence.'),\n\t\t\ttype: 'string'\n\t\t},\n\t\tlinux: {\n\t\t\tdescription: nls.localize('vscode.extension.contributes.keybindings.linux', 'Linux specific key or key sequence.'),\n\t\t\ttype: 'string'\n\t\t},\n\t\twin: {\n\t\t\tdescription: nls.localize('vscode.extension.contributes.keybindings.win', 'Windows specific key or key sequence.'),\n\t\t\ttype: 'string'\n\t\t},\n\t\twhen: {\n\t\t\tdescription: nls.localize('vscode.extension.contributes.keybindings.when', 'Condition when the key is active.'),\n\t\t\ttype: 'string'\n\t\t}\n\t}\n};\n\nlet keybindingsExtPoint = ExtensionsRegistry.registerExtensionPoint<ContributedKeyBinding | ContributedKeyBinding[]>('keybindings', {\n\tdescription: nls.localize('vscode.extension.contributes.keybindings', \"Contributes keybindings.\"),\n\toneOf: [\n\t\tkeybindingType,\n\t\t{\n\t\t\ttype: 'array',\n\t\t\titems: keybindingType\n\t\t}\n\t]\n});\n\nexport class WorkbenchKeybindingService extends KeybindingService {\n\n\tprivate contextService: IWorkspaceContextService;\n\tprivate eventService: IEventService;\n\tprivate telemetryService: ITelemetryService;\n\tprivate toDispose: Function;\n\tprivate _extensionService: IExtensionService;\n\tprivate _eventService: IEventService;\n\n\tconstructor(configurationService: IConfigurationService, contextService: IWorkspaceContextService, eventService: IEventService, telemetryService: ITelemetryService, domNode: HTMLElement) {\n\t\tsuper(configurationService);\n\t\tthis.contextService = contextService;\n\t\tthis.eventService = eventService;\n\t\tthis.telemetryService = telemetryService;\n\t\tthis.toDispose = this.eventService.addListener(EventType.WORKBENCH_OPTIONS_CHANGED, (e) => this.onOptionsChanged(e));\n\t\tthis._eventService = eventService;\n\t\tkeybindingsExtPoint.setHandler((extensions) => {\n\t\t\tlet commandAdded = false;\n\n\t\t\tfor (let extension of extensions) {\n\t\t\t\tcommandAdded = this._handleKeybindingsExtensionPointUser(extension.description.isBuiltin, extension.value, extension.collector) || commandAdded;\n\t\t\t}\n\n\t\t\tif (commandAdded) {\n\t\t\t\tthis.updateResolver();\n\t\t\t}\n\t\t});\n\n\t\tthis._beginListening(domNode);\n\t}\n\n\tsetExtensionService(extensionService: IExtensionService): void {\n\t\tthis._extensionService = extensionService;\n\t}\n\n\tpublic customKeybindingsCount(): number {\n\t\tlet opts = this.contextService.getOptions();\n\t\tif (opts.globalSettings && opts.globalSettings.keybindings && Array.isArray(opts.globalSettings.keybindings)) {\n\t\t\treturn opts.globalSettings.keybindings.length;\n\t\t}\n\t\treturn 0;\n\t}\n\n\tprotected _getExtraKeybindings(isFirstTime: boolean): IKeybindingItem[] {\n\t\tlet extras: IUserFriendlyKeybinding[] = [];\n\t\tlet opts = this.contextService.getOptions();\n\t\tif (opts.globalSettings && opts.globalSettings.keybindings) {\n\t\t\tif (!isFirstTime) {\n\t\t\t\tlet cnt = 0;\n\t\t\t\tif (Array.isArray(opts.globalSettings.keybindings)) {\n\t\t\t\t\tcnt = opts.globalSettings.keybindings.length;\n\t\t\t\t}\n\t\t\t\tthis.telemetryService.publicLog('customKeybindingsChanged', {\n\t\t\t\t\tkeyCount: cnt\n\t\t\t\t});\n\t\t\t}\n\t\t\tif (Array.isArray(opts.globalSettings.keybindings)) {\n\t\t\t\textras = opts.globalSettings.keybindings;\n\t\t\t}\n\t\t}\n\t\treturn extras.map((k, i) => IOSupport.readKeybindingItem(k, i));\n\t}\n\n\tprivate onOptionsChanged(e: OptionsChangeEvent): void {\n\t\tif (e.key === 'globalSettings') {\n\t\t\tthis.updateResolver();\n\t\t}\n\t}\n\n\tpublic dispose(): void {\n\t\tthis.toDispose();\n\t}\n\n\tpublic getLabelFor(keybinding:Keybinding): string {\n\t\treturn keybinding.toCustomLabel(getNativeLabelProvider());\n\t}\n\n\tpublic getHTMLLabelFor(keybinding:Keybinding): IHTMLContentElement[] {\n\t\treturn keybinding.toCustomHTMLLabel(getNativeLabelProvider());\n\t}\n\n\tpublic getAriaLabelFor(keybinding: Keybinding): string {\n\t\treturn keybinding.toCustomLabel(getNativeAriaLabelProvider());\n\t}\n\n\tpublic getElectronAcceleratorFor(keybinding:Keybinding): string {\n\t\tif (platform.isWindows) {\n\t\t\t// electron menus always do the correct rendering on Windows\n\t\t\treturn super.getElectronAcceleratorFor(keybinding);\n\t\t}\n\n\t\tlet usLabel = keybinding._toUSLabel();\n\t\tlet label = this.getLabelFor(keybinding);\n\t\tif (usLabel !== label) {\n\t\t\t// electron menus are incorrect in rendering (linux) and in rendering and interpreting (mac)\n\t\t\t// for non US standard keyboard layouts\n\t\t\treturn null;\n\t\t}\n\n\t\treturn super.getElectronAcceleratorFor(keybinding);\n\t}\n\n\tprivate _handleKeybindingsExtensionPointUser(isBuiltin: boolean, keybindings:ContributedKeyBinding | ContributedKeyBinding[], collector:IExtensionMessageCollector): boolean {\n\t\tif (isContributedKeyBindingsArray(keybindings)) {\n\t\t\tlet commandAdded = false;\n\t\t\tfor (let i = 0, len = keybindings.length; i < len; i++) {\n\t\t\t\tcommandAdded = this._handleKeybinding(isBuiltin, i + 1, keybindings[i], collector) || commandAdded;\n\t\t\t}\n\t\t\treturn commandAdded;\n\t\t} else {\n\t\t\treturn this._handleKeybinding(isBuiltin, 1, keybindings, collector);\n\t\t}\n\t}\n\n\tprivate _handleKeybinding(isBuiltin: boolean, idx:number, keybindings:ContributedKeyBinding, collector:IExtensionMessageCollector): boolean {\n\n\t\tlet rejects: string[] = [];\n\t\tlet commandAdded = false;\n\n\t\tif (isValidContributedKeyBinding(keybindings, rejects)) {\n\t\t\tlet rule = this._asCommandRule(isBuiltin, idx++, keybindings);\n\t\t\tif (rule) {\n\t\t\t\tKeybindingsRegistry.registerCommandRule(rule);\n\t\t\t\tcommandAdded = true;\n\t\t\t}\n\t\t}\n\n\t\tif (rejects.length > 0) {\n\t\t\tcollector.error(nls.localize(\n\t\t\t\t'invalid.keybindings',\n\t\t\t\t\"Invalid `contributes.{0}`: {1}\",\n\t\t\t\tkeybindingsExtPoint.name,\n\t\t\t\trejects.join('\\n')\n\t\t\t));\n\t\t}\n\n\t\treturn commandAdded;\n\t}\n\n\tprotected _invokeHandler(commandId: string, args: any): TPromise<any> {\n\t\tif (this._extensionService) {\n\t\t\treturn this._extensionService.activateByEvent('onCommand:' + commandId).then(_ => {\n\t\t\t\treturn super._invokeHandler(commandId, args);\n\t\t\t});\n\t\t}\n\t\treturn TPromise.as(null);\n\t}\n\n\tprivate _asCommandRule(isBuiltin: boolean, idx:number, binding: ContributedKeyBinding): ICommandRule {\n\n\t\tlet {command, when, key, mac, linux, win} = binding;\n\n\t\tlet weight: number;\n\t\tif (isBuiltin) {\n\t\t\tweight = KeybindingsRegistry.WEIGHT.builtinExtension(idx);\n\t\t} else {\n\t\t\tweight = KeybindingsRegistry.WEIGHT.externalExtension(idx);\n\t\t}\n\n\t\tlet desc = {\n\t\t\tid: command,\n\t\t\tcontext: IOSupport.readKeybindingContexts(when),\n\t\t\tweight: weight,\n\t\t\tprimary: IOSupport.readKeybinding(key),\n\t\t\tmac: mac && { primary: IOSupport.readKeybinding(mac) },\n\t\t\tlinux: linux && { primary: IOSupport.readKeybinding(linux) },\n\t\t\twin: win && { primary: IOSupport.readKeybinding(win) }\n\t\t};\n\n\t\tif (!desc.primary && !desc.mac && !desc.linux && !desc.win) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn desc;\n\t}\n}\n\nlet schemaId = 'vscode://schemas/keybindings';\nlet schema : IJSONSchema = {\n\t'id': schemaId,\n\t'type': 'array',\n\t'title': nls.localize('keybindings.json.title', \"Keybindings configuration\"),\n\t'items': {\n\t\t'required': ['key'],\n\t\t'type': 'object',\n\t\t'defaultSnippets': [ { 'body': { 'key': '{{_}}', 'command': '{{_}}', 'when': '{{_}}' } }],\n\t\t'properties': {\n\t\t\t'key': {\n\t\t\t\t'type': 'string',\n\t\t\t\t'description': nls.localize('keybindings.json.key', 'Key or key sequence (separated by space)'),\n\t\t\t},\n\t\t\t'command': {\n\t\t\t\t'description': nls.localize('keybindings.json.command', 'Name of the command to execute'),\n\t\t\t},\n\t\t\t'when': {\n\t\t\t\t'type': 'string',\n\t\t\t\t'description': nls.localize('keybindings.json.when', 'Condition when the key is active.')\n\t\t\t}\n\t\t}\n\t}\n};\n\nlet schemaRegistry = <IJSONContributionRegistry>Registry.as(Extensions.JSONContribution);\nschemaRegistry.registerSchema(schemaId, schema);\nschemaRegistry.addSchemaFileAssociation('vscode://defaultsettings/keybindings.json', schemaId);\nschemaRegistry.addSchemaFileAssociation('%APP_SETTINGS_HOME%/keybindings.json', schemaId);\n"]}