{"version":3,"file":"vs/workbench/services/message/browser/messageService.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/workbench/services/message/browser/messageService.ts"],"names":[],"mappings":";IAAA;;;oGAGgG;IAChG,YAAY,CAAC;IAoBb;QAkBC,iCACS,gBAAmC,EAC3C,iBAAqC;YAD7B,qBAAgB,GAAhB,gBAAgB,CAAmB;YAfrC,cAAS,GAAG,yBAAe,CAAC;YAkBlC,IAAI,CAAC,yBAAyB,GAAG,iBAAiB,CAAC,SAAS,CAAC,uBAAuB,CAAC,+BAA+B,EAAE,KAAK,CAAC,CAAC;YAC7H,IAAI,CAAC,OAAO,GAAG,IAAI,yBAAW,CAAC,uBAAW,CAAC,mBAAmB,EAAE,gBAAgB,CAAC,CAAC;YAElF,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;YACxB,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;YAC5B,IAAI,CAAC,YAAY,GAAG,EAAE,CAAC;YAEvB,IAAI,CAAC,iBAAiB,EAAE,CAAC;QAC1B,CAAC;QAEM,sDAAoB,GAA3B,UAA4B,gBAAmC,EAAE,gBAAmC;YACnG,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;YACzC,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;YAEzC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,IAAI,CAAC,kBAAkB,EAAE,IAAI,CAAC,CAAC,CAAC;YACpF,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAAC,CAAC,CAAC;QACpF,CAAC;QAEO,mDAAiB,GAAzB;YACC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAAC,CAAC,CAAC;YACrF,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAAC,CAAC,CAAC;QACtF,CAAC;QAEO,mDAAiB,GAAzB;YACC,IAAI,CAAC,yBAAyB,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAC1C,CAAC;QAEO,mDAAiB,GAAzB;YACC,IAAI,CAAC,yBAAyB,CAAC,KAAK,EAAE,CAAC;QACxC,CAAC;QAEO,oDAAkB,GAA1B;YACC,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC,CAAC,sDAAsD;YACpF,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC,2CAA2C;QACjE,CAAC;QAEO,mDAAiB,GAAzB;YACC,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;YAC5B,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC,mCAAmC;YAExD,+BAA+B;YAC/B,OAAO,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,CAAC;gBAClC,IAAM,eAAe,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,EAAE,CAAC;gBACjD,eAAe,CAAC,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,QAAQ,EAAE,eAAe,CAAC,OAAO,CAAC,CAAC;YAC1F,CAAC;QACF,CAAC;QAEO,gDAAc,GAAtB,UAAuB,QAAkB;YACxC,MAAM,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;gBAClB,KAAK,kBAAQ,CAAC,IAAI;oBACjB,MAAM,CAAC,sBAAY,CAAC,IAAI,CAAC;gBAE1B,KAAK,kBAAQ,CAAC,OAAO;oBACpB,MAAM,CAAC,sBAAY,CAAC,OAAO,CAAC;YAC9B,CAAC;YAED,MAAM,CAAC,sBAAY,CAAC,KAAK,CAAC;QAC3B,CAAC;QAOM,sCAAI,GAAX,UAAY,GAAa,EAAE,OAAY;YAAvC,iBAqBC;YApBA,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;gBACd,MAAM,CAAC,cAAM,OAAA,KAAK,CAAC,EAAN,CAAM,CAAC,CAAC,mCAAmC;YACzD,CAAC;YAED,EAAE,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;gBAC5B,IAAI,UAAQ,GAAe,EAAE,CAAC;gBAC9B,OAAO,CAAC,OAAO,CAAC,UAAC,GAAQ,IAAK,OAAA,UAAQ,CAAC,IAAI,CAAC,KAAI,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,EAAlC,CAAkC,CAAC,CAAC;gBAElE,MAAM,CAAC,cAAM,OAAA,UAAQ,CAAC,OAAO,CAAC,UAAC,EAAE,IAAK,OAAA,EAAE,EAAE,EAAJ,CAAI,CAAC,EAA9B,CAA8B,CAAC;YAC7C,CAAC;YAED,EAAE,CAAC,CAAC,MAAM,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;gBAC5C,MAAM,CAAC,cAAM,OAAA,KAAK,CAAC,EAAN,CAAM,CAAC,CAAC,yCAAyC;YAC/D,CAAC;YAED,EAAE,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;gBACtC,GAAG,GAAG,OAAO,CAAC,QAAQ,CAAC;YACxB,CAAC;YAED,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;QAClC,CAAC;QAEO,wCAAM,GAAd,UAAe,GAAa,EAAE,OAAY;YAA1C,iBAkBC;YAhBA,0CAA0C;YAC1C,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC;gBAC3B,IAAM,YAAU,GAAoB,EAAE,QAAQ,EAAE,GAAG,EAAE,SAAA,OAAO,EAAE,SAAS,EAAE,cAAM,OAAA,KAAI,CAAC,aAAa,CAAC,MAAM,CAAC,KAAI,CAAC,aAAa,CAAC,OAAO,CAAC,YAAU,CAAC,EAAE,CAAC,CAAC,EAApE,CAAoE,EAAE,CAAC;gBACtJ,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,YAAU,CAAC,CAAC;gBAEpC,4DAA4D;gBAC5D,MAAM,CAAC,cAAM,OAAA,YAAU,CAAC,SAAS,EAAE,EAAtB,CAAsB,CAAC;YACrC,CAAC;YAED,kBAAkB;YAClB,EAAE,CAAC,CAAC,GAAG,KAAK,kBAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;gBAC5B,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC;YACrD,CAAC;YAED,yBAAyB;YACzB,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE,OAAO,CAAC,CAAC;QACpE,CAAC;QAEM,kDAAgB,GAAvB,UAAwB,OAAe,EAAE,gBAA6B,EAAE,OAAmB;YAA3F,iBAsCC;YAtCwC,gCAA6B,GAA7B,oBAA4B,CAAC;YAAE,uBAAmB,GAAnB,WAAmB;YAC1F,EAAE,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC;gBAC3B,EAAE,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC;oBAC3B,IAAI,CAAC,gBAAgB,CAAC,OAAO,EAAE,CAAC,CAAC,uBAAuB;gBACzD,CAAC;gBAED,aAAa;gBACb,IAAI,eAA0B,CAAC;gBAC/B,IAAI,YAAU,GAAG,UAAU,CAAC;oBAC3B,eAAa,GAAG,KAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,EAAE,8BAAkB,CAAC,IAAI,EAAE,MAAM,CAAC,SAAS,CAAC,CAAC;oBAC7G,YAAU,GAAG,IAAI,CAAC;gBACnB,CAAC,EAAE,OAAO,CAAC,CAAC;gBACZ,IAAI,YAAkB,CAAC;gBAEvB,2DAA2D;gBAC3D,IAAM,SAAO,GAAG,EAAE,OAAO,EAAE;wBAC1B,EAAE,CAAC,CAAC,YAAU,CAAC,CAAC,CAAC;4BAChB,YAAY,CAAC,YAAU,CAAC,CAAC;wBAC1B,CAAC;wBAED,EAAE,CAAC,CAAC,YAAU,CAAC,CAAC,CAAC;4BAChB,YAAY,CAAC,YAAU,CAAC,CAAC;wBAC1B,CAAC;wBAED,EAAE,CAAC,CAAC,eAAa,CAAC,CAAC,CAAC;4BACnB,eAAa,CAAC,OAAO,EAAE,CAAC;wBACzB,CAAC;oBACF,CAAC,EAAC,CAAC;gBACH,IAAI,CAAC,gBAAgB,GAAG,SAAO,CAAC;gBAEhC,EAAE,CAAC,CAAC,OAAO,gBAAgB,KAAK,QAAQ,IAAI,gBAAgB,GAAG,CAAC,CAAC,CAAC,CAAC;oBAClE,YAAU,GAAG,UAAU,CAAC,cAAM,OAAA,SAAO,CAAC,OAAO,EAAE,EAAjB,CAAiB,EAAE,gBAAgB,CAAC,CAAC;gBACpE,CAAC;gBAED,MAAM,CAAC,SAAO,CAAC;YAChB,CAAC;YAED,MAAM,CAAC,EAAE,OAAO,EAAE,cAA4B,CAAC,EAAE,CAAC;QACnD,CAAC;QAEM,yCAAO,GAAd;YACC,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;gBAClB,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE,CAAC;YAC7B,CAAC;QACF,CAAC;QAEM,yCAAO,GAAd,UAAe,YAA2B;YACzC,IAAI,WAAW,GAAG,YAAY,CAAC,OAAO,CAAC;YACvC,EAAE,CAAC,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC;gBACzB,WAAW,GAAG,WAAW,GAAG,MAAM,GAAG,YAAY,CAAC,MAAM,CAAC;YAC1D,CAAC;YAED,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;QACpC,CAAC;QAEM,yCAAO,GAAd;YACC,OAAO,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC;gBACjC,IAAI,CAAC,YAAY,CAAC,GAAG,EAAE,CAAC,OAAO,EAAE,CAAC;YACnC,CAAC;QACF,CAAC;QA1La,uDAA+B,GAAG,sBAAsB,CAAC;QA2LxE,8BAAC;IAAD,CAAC,AA7LD,IA6LC;IA7LY,+BAAuB,0BA6LnC,CAAA","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport errors = require('vs/base/common/errors');\nimport types = require('vs/base/common/types');\nimport {MessageList, Severity as BaseSeverity} from 'vs/base/browser/ui/messagelist/messageList';\nimport {Identifiers} from 'vs/workbench/common/constants';\nimport {StatusbarAlignment} from 'vs/workbench/browser/parts/statusbar/statusbar';\nimport {IDisposable} from 'vs/base/common/lifecycle';\nimport {IMessageService, IMessageWithAction, IConfirmation, Severity} from 'vs/platform/message/common/message';\nimport {ITelemetryService} from 'vs/platform/telemetry/common/telemetry';\nimport {IKeybindingService, IKeybindingContextKey} from 'vs/platform/keybinding/common/keybindingService';\nimport {IQuickOpenService} from 'vs/workbench/services/quickopen/common/quickOpenService';\nimport {IStatusbarService} from 'vs/workbench/services/statusbar/common/statusbarService';\n\ninterface IBufferedMessage {\n\tseverity: Severity;\n\tmessage: any;\n\tdisposeFn: () => void;\n}\n\nexport class WorkbenchMessageService implements IMessageService {\n\n\tpublic static GLOBAL_MESSAGES_SHOWING_CONTEXT = 'globalMessageVisible';\n\n\tpublic serviceId = IMessageService;\n\n\tprivate handler: MessageList;\n\tprivate disposeables: IDisposable[];\n\tprivate statusMsgDispose: IDisposable;\n\n\tprivate canShowMessages: boolean;\n\tprivate messageBuffer: IBufferedMessage[];\n\n\tprivate quickOpenService: IQuickOpenService;\n\tprivate statusbarService: IStatusbarService;\n\n\tprivate messagesShowingContextKey: IKeybindingContextKey<boolean>;\n\n\tconstructor(\n\t\tprivate telemetryService: ITelemetryService,\n\t\tkeybindingService: IKeybindingService\n\t) {\n\t\tthis.messagesShowingContextKey = keybindingService.createKey(WorkbenchMessageService.GLOBAL_MESSAGES_SHOWING_CONTEXT, false);\n\t\tthis.handler = new MessageList(Identifiers.WORKBENCH_CONTAINER, telemetryService);\n\n\t\tthis.messageBuffer = [];\n\t\tthis.canShowMessages = true;\n\t\tthis.disposeables = [];\n\n\t\tthis.registerListeners();\n\t}\n\n\tpublic setWorkbenchServices(quickOpenService: IQuickOpenService, statusbarService: IStatusbarService): void {\n\t\tthis.statusbarService = statusbarService;\n\t\tthis.quickOpenService = quickOpenService;\n\n\t\tthis.disposeables.push(this.quickOpenService.onShow(this.onQuickOpenShowing, this));\n\t\tthis.disposeables.push(this.quickOpenService.onHide(this.onQuickOpenHiding, this));\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis.disposeables.push(this.handler.onMessagesShowing(this.onMessagesShowing, this));\n\t\tthis.disposeables.push(this.handler.onMessagesCleared(this.onMessagesCleared, this));\n\t}\n\n\tprivate onMessagesShowing(): void {\n\t\tthis.messagesShowingContextKey.set(true);\n\t}\n\n\tprivate onMessagesCleared(): void {\n\t\tthis.messagesShowingContextKey.reset();\n\t}\n\n\tprivate onQuickOpenShowing(): void {\n\t\tthis.canShowMessages = false; // when quick open is open, don't show messages behind\n\t\tthis.handler.hide(); // hide messages when quick open is visible\n\t}\n\n\tprivate onQuickOpenHiding(): void {\n\t\tthis.canShowMessages = true;\n\t\tthis.handler.show(); // make sure the handler is visible\n\n\t\t// Release messages from buffer\n\t\twhile (this.messageBuffer.length) {\n\t\t\tconst bufferedMessage = this.messageBuffer.pop();\n\t\t\tbufferedMessage.disposeFn = this.show(bufferedMessage.severity, bufferedMessage.message);\n\t\t}\n\t}\n\n\tprivate toBaseSeverity(severity: Severity): BaseSeverity {\n\t\tswitch (severity) {\n\t\t\tcase Severity.Info:\n\t\t\t\treturn BaseSeverity.Info;\n\n\t\t\tcase Severity.Warning:\n\t\t\t\treturn BaseSeverity.Warning;\n\t\t}\n\n\t\treturn BaseSeverity.Error;\n\t}\n\n\tpublic show(sev: Severity, message: string): () => void;\n\tpublic show(sev: Severity, message: Error): () => void;\n\tpublic show(sev: Severity, message: string[]): () => void;\n\tpublic show(sev: Severity, message: Error[]): () => void;\n\tpublic show(sev: Severity, message: IMessageWithAction): () => void;\n\tpublic show(sev: Severity, message: any): () => void {\n\t\tif (!message) {\n\t\t\treturn () => void 0; // guard against undefined messages\n\t\t}\n\n\t\tif (Array.isArray(message)) {\n\t\t\tlet closeFns: Function[] = [];\n\t\t\tmessage.forEach((msg: any) => closeFns.push(this.show(sev, msg)));\n\n\t\t\treturn () => closeFns.forEach((fn) => fn());\n\t\t}\n\n\t\tif (errors.isPromiseCanceledError(message)) {\n\t\t\treturn () => void 0; // this kind of error should not be shown\n\t\t}\n\n\t\tif (types.isNumber(message.severity)) {\n\t\t\tsev = message.severity;\n\t\t}\n\n\t\treturn this.doShow(sev, message);\n\t}\n\n\tprivate doShow(sev: Severity, message: any): () => void {\n\n\t\t// Check flag if we can show a message now\n\t\tif (!this.canShowMessages) {\n\t\t\tconst messageObj:IBufferedMessage = { severity: sev, message, disposeFn: () => this.messageBuffer.splice(this.messageBuffer.indexOf(messageObj), 1) };\n\t\t\tthis.messageBuffer.push(messageObj);\n\n\t\t\t// Return function that allows to remove message from buffer\n\t\t\treturn () => messageObj.disposeFn();\n\t\t}\n\n\t\t// Show in Console\n\t\tif (sev === Severity.Error) {\n\t\t\tconsole.error(errors.toErrorMessage(message, true));\n\t\t}\n\n\t\t// Show in Global Handler\n\t\treturn this.handler.showMessage(this.toBaseSeverity(sev), message);\n\t}\n\n\tpublic setStatusMessage(message: string, autoDisposeAfter: number = -1, delayBy: number = 0): IDisposable {\n\t\tif (this.statusbarService) {\n\t\t\tif (this.statusMsgDispose) {\n\t\t\t\tthis.statusMsgDispose.dispose(); // dismiss any previous\n\t\t\t}\n\n\t\t\t// Create new\n\t\t\tlet statusDispose: IDisposable;\n\t\t\tlet showHandle = setTimeout(() => {\n\t\t\t\tstatusDispose = this.statusbarService.addEntry({ text: message }, StatusbarAlignment.LEFT, Number.MIN_VALUE);\n\t\t\t\tshowHandle = null;\n\t\t\t}, delayBy);\n\t\t\tlet hideHandle: number;\n\n\t\t\t// Dispose function takes care of timeouts and actual entry\n\t\t\tconst dispose = { dispose: () => {\n\t\t\t\tif (showHandle) {\n\t\t\t\t\tclearTimeout(showHandle);\n\t\t\t\t}\n\n\t\t\t\tif (hideHandle) {\n\t\t\t\t\tclearTimeout(hideHandle);\n\t\t\t\t}\n\n\t\t\t\tif (statusDispose) {\n\t\t\t\t\tstatusDispose.dispose();\n\t\t\t\t}\n\t\t\t}};\n\t\t\tthis.statusMsgDispose = dispose;\n\n\t\t\tif (typeof autoDisposeAfter === 'number' && autoDisposeAfter > 0) {\n\t\t\t\thideHandle = setTimeout(() => dispose.dispose(), autoDisposeAfter);\n\t\t\t}\n\n\t\t\treturn dispose;\n\t\t}\n\n\t\treturn { dispose: () => { /* not yet ready */ } };\n\t}\n\n\tpublic hideAll(): void {\n\t\tif (this.handler) {\n\t\t\tthis.handler.hideMessages();\n\t\t}\n\t}\n\n\tpublic confirm(confirmation: IConfirmation): boolean {\n\t\tlet messageText = confirmation.message;\n\t\tif (confirmation.detail) {\n\t\t\tmessageText = messageText + '\\n\\n' + confirmation.detail;\n\t\t}\n\n\t\treturn window.confirm(messageText);\n\t}\n\n\tpublic dispose(): void {\n\t\twhile (this.disposeables.length) {\n\t\t\tthis.disposeables.pop().dispose();\n\t\t}\n\t}\n}"]}