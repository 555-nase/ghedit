{"version":3,"sources":["vs/workbench/services/message/electron-browser/messageService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;IAEhG,YAAY,CAAC;IAWb;QAAoC,kCAAuB;QAE1D,wBACS,cAAwC,EACxC,aAA6B,EACrC,gBAAmC,EACnC,iBAAqC;YAErC,kBAAM,gBAAgB,EAAE,iBAAiB,CAAC,CAAC;YALnC,mBAAc,GAAd,cAAc,CAA0B;YACxC,kBAAa,GAAb,aAAa,CAAgB;QAKtC,CAAC;QAEM,gCAAO,GAAd,UAAe,YAA2B;YACzC,EAAE,CAAC,CAAC,CAAC,YAAY,CAAC,aAAa,CAAC,CAAC,CAAC;gBACjC,YAAY,CAAC,aAAa,GAAG,GAAG,CAAC,QAAQ,CAAC,CAAwD,CAAtD,CAAwD,EAArD,EAAE,AAA0D,CAAC,CAAC,SAAjD,EAAE,OAAO,EAAE,CAAC,uBAAuB,CAAC;YACjG,CAAC;YAED,EAAE,CAAC,CAAC,CAAC,YAAY,CAAC,eAAe,CAAC,CAAC,CAAC;gBACnC,YAAY,CAAC,eAAe,GAAG,GAAG,CAAC,QAAQ,CAAC,CAAc,EAAE,IAAQ,CAAC,CAAC;YACvE,CAAC;YAED,IAAI,IAAI,GAA0C;gBACjD,KAAK,EAAE,YAAY,CAAC,KAAK,IAAI,IAAI,CAAC,cAAc,CAAC,gBAAgB,EAAE,CAAC,GAAG,CAAC,OAAO;gBAC/E,OAAO,EAAE,YAAY,CAAC,OAAO;gBAC7B,OAAO,EAAE;oBACR,kBAAO,GAAG,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,eAAe,CAAC,GAAG,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,aAAa,CAAC;oBAC3G,kBAAO,GAAG,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,aAAa,CAAC,GAAG,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,eAAe,CAAC;iBAC3G;gBACD,MAAM,EAAE,IAAI;gBACZ,QAAQ,EAAE,CAAC;aACX,CAAC;YAEF,EAAE,CAAC,CAAC,kBAAO,CAAC,CAAC,CAAC;gBACb,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC,CAAC,6BAA6B;YAClD,CAAC;YAED,EAAE,CAAC,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC;gBACzB,IAAI,CAAC,MAAM,GAAG,YAAY,CAAC,MAAM,CAAC;YACnC,CAAC;YAED,IAAI,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC,SAAS,EAAE,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;YAEjE,EAAE,CAAC,CAAC,kBAAO,CAAC,CAAC,CAAC;gBACb,MAAM,CAAC,MAAM,KAAK,CAAC,GAAG,IAAI,GAAG,KAAK,CAAC,CAAC,6BAA6B;YAClE,CAAC;YAED,MAAM,CAAC,MAAM,KAAK,CAAC,GAAG,IAAI,GAAG,KAAK,CAAC;QACpC,CAAC;QAEO,sCAAa,GAArB,UAAsB,KAAa;YAClC,EAAE,CAAC,CAAC,CAAC,oBAAS,CAAC,CAAC,CAAC;gBAChB,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC,kDAAkD;YACpF,CAAC;YAED,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;QAClC,CAAC;QACF,qBAAC;IAAD,CAvDA,AAuDC,CAvDmC,wCAAuB,GAuD1D;IAvDY,sBAAc,iBAuD1B,CAAA","file":"vs/workbench/services/message/electron-browser/messageService.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport {IWindowService} from 'vs/workbench/services/window/electron-browser/windowService';\nimport nls = require('vs/nls');\nimport {WorkbenchMessageService} from 'vs/workbench/services/message/browser/messageService';\nimport {IConfirmation} from 'vs/platform/message/common/message';\nimport {isWindows, isLinux} from 'vs/base/common/platform';\nimport {ITelemetryService} from 'vs/platform/telemetry/common/telemetry';\nimport {IKeybindingService} from 'vs/platform/keybinding/common/keybindingService';\nimport {IWorkspaceContextService} from 'vs/platform/workspace/common/workspace';\n\nexport class MessageService extends WorkbenchMessageService {\n\n\tconstructor(\n\t\tprivate contextService: IWorkspaceContextService,\n\t\tprivate windowService: IWindowService,\n\t\ttelemetryService: ITelemetryService,\n\t\tkeybindingService: IKeybindingService\n\t) {\n\t\tsuper(telemetryService, keybindingService);\n\t}\n\n\tpublic confirm(confirmation: IConfirmation): boolean {\n\t\tif (!confirmation.primaryButton) {\n\t\t\tconfirmation.primaryButton = nls.localize({ key: 'yesButton', comment: ['&& denotes a mnemonic'] }, \"&&Yes\");\n\t\t}\n\n\t\tif (!confirmation.secondaryButton) {\n\t\t\tconfirmation.secondaryButton = nls.localize('cancelButton', \"Cancel\");\n\t\t}\n\n\t\tlet opts: Electron.Dialog.ShowMessageBoxOptions = {\n\t\t\ttitle: confirmation.title || this.contextService.getConfiguration().env.appName,\n\t\t\tmessage: confirmation.message,\n\t\t\tbuttons: [\n\t\t\t\tisLinux ? this.mnemonicLabel(confirmation.secondaryButton) : this.mnemonicLabel(confirmation.primaryButton),\n\t\t\t\tisLinux ? this.mnemonicLabel(confirmation.primaryButton) : this.mnemonicLabel(confirmation.secondaryButton)\n\t\t\t],\n\t\t\tnoLink: true,\n\t\t\tcancelId: 1\n\t\t};\n\n\t\tif (isLinux) {\n\t\t\topts.defaultId = 1; // Linux: buttons are swapped\n\t\t}\n\n\t\tif (confirmation.detail) {\n\t\t\topts.detail = confirmation.detail;\n\t\t}\n\n\t\tlet result = this.windowService.getWindow().showMessageBox(opts);\n\n\t\tif (isLinux) {\n\t\t\treturn result === 1 ? true : false; // Linux: buttons are swapped\n\t\t}\n\n\t\treturn result === 0 ? true : false;\n\t}\n\n\tprivate mnemonicLabel(label: string): string {\n\t\tif (!isWindows) {\n\t\t\treturn label.replace(/&&/g, ''); // no mnemonic support on mac/linux in buttons yet\n\t\t}\n\n\t\treturn label.replace(/&&/g, '&');\n\t}\n}"]}