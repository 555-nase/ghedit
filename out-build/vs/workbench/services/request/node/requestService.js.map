{"version":3,"sources":["vs/workbench/services/request/node/requestService.ts"],"names":[],"mappings":"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","file":"vs/workbench/services/request/node/requestService.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport {TPromise, Promise, xhr} from 'vs/base/common/winjs.base';\nimport http = require('vs/base/common/http');\nimport {IConfigurationRegistry, Extensions} from 'vs/platform/configuration/common/configurationRegistry';\nimport strings = require('vs/base/common/strings');\nimport nls = require('vs/nls');\nimport lifecycle = require('vs/base/common/lifecycle');\nimport timer = require('vs/base/common/timer');\nimport platform = require('vs/platform/platform');\nimport async = require('vs/base/common/async');\nimport {IConfigurationService, IConfigurationServiceEvent, ConfigurationServiceEventTypes} from 'vs/platform/configuration/common/configuration';\nimport {BaseRequestService} from 'vs/platform/request/common/baseRequestService';\nimport rawHttpService = require('vs/workbench/services/request/node/rawHttpService');\nimport {ITelemetryService} from 'vs/platform/telemetry/common/telemetry';\nimport {IWorkspaceContextService} from 'vs/platform/workspace/common/workspace';\n\ninterface IRawHttpService {\n\txhr(options: http.IXHROptions): TPromise<http.IXHRResponse>;\n\tconfigure(proxy: string, strictSSL: boolean): void;\n}\n\ninterface IXHRFunction {\n\t(options: http.IXHROptions): TPromise<http.IXHRResponse>;\n}\n\nexport class RequestService extends BaseRequestService {\n\tprivate callOnDispose: Function[];\n\n\tconstructor(\n\t\tcontextService: IWorkspaceContextService,\n\t\tprivate configurationService: IConfigurationService,\n\t\ttelemetryService?: ITelemetryService\n\t) {\n\t\tsuper(contextService, telemetryService);\n\t\tthis.callOnDispose = [];\n\n\t\t// proxy setting updating\n\t\tthis.callOnDispose.push(configurationService.addListener(ConfigurationServiceEventTypes.UPDATED, (e: IConfigurationServiceEvent) => {\n\t\t\tthis.rawHttpServicePromise.then((rawHttpService) => {\n\t\t\t\trawHttpService.configure(e.config.http && e.config.http.proxy, e.config.http.proxyStrictSSL);\n\t\t\t});\n\t\t}));\n\t}\n\n\tprivate _rawHttpServicePromise: TPromise<IRawHttpService>;\n\tprivate get rawHttpServicePromise(): TPromise<IRawHttpService> {\n\t\tif (!this._rawHttpServicePromise) {\n\t\t\tconst configuration = this.configurationService.getConfiguration<any>();\n\t\t\trawHttpService.configure(configuration.http && configuration.http.proxy, configuration.http.proxyStrictSSL);\n\n\t\t\treturn TPromise.as(rawHttpService);\n\t\t}\n\n\t\treturn this._rawHttpServicePromise;\n\t}\n\n\tpublic dispose(): void {\n\t\tlifecycle.cAll(this.callOnDispose);\n\t}\n\n\tpublic makeRequest(options: http.IXHROptions): TPromise<http.IXHRResponse> {\n\t\tlet url = options.url;\n\t\tif (!url) {\n\t\t\tthrow new Error('IRequestService.makeRequest: Url is required.');\n\t\t}\n\n\t\t// Support file:// in native environment through XHR\n\t\tif (strings.startsWith(url, 'file://')) {\n\t\t\treturn xhr(options).then(null, (xhr: XMLHttpRequest) => {\n\t\t\t\tif (xhr.status === 0 && xhr.responseText) {\n\t\t\t\t\treturn xhr; // loading resources locally returns a status of 0 which in WinJS is an error so we need to handle it here\n\t\t\t\t}\n\n\t\t\t\treturn <any>Promise.wrapError({ status: 404, responseText: nls.localize('localFileNotFound', \"File not found.\")});\n\t\t\t});\n\t\t}\n\n\t\treturn super.makeRequest(options);\n\t}\n\n\t/**\n\t * Make a cross origin request using NodeJS.\n\t * Note: This method is also called from workers.\n\t */\n\tprotected makeCrossOriginRequest(options: http.IXHROptions): TPromise<http.IXHRResponse> {\n\t\tlet timerVar: timer.ITimerEvent = timer.nullEvent;\n\t\treturn this.rawHttpServicePromise.then((rawHttpService: IRawHttpService) => {\n\t\t\treturn async.always(rawHttpService.xhr(options), ((xhr: http.IXHRResponse) => {\n\t\t\t\tif (timerVar.data) {\n\t\t\t\t\ttimerVar.data.status = xhr.status;\n\t\t\t\t}\n\t\t\t\ttimerVar.stop();\n\t\t\t}));\n\t\t});\n\t}\n}\n\n// Configuration\nlet confRegistry = <IConfigurationRegistry>platform.Registry.as(Extensions.Configuration);\nconfRegistry.registerConfiguration({\n\t'id': 'http',\n\t'order': 9,\n\t'title': nls.localize('httpConfigurationTitle', \"HTTP configuration\"),\n\t'type': 'object',\n\t'properties': {\n\t\t'http.proxy': {\n\t\t\t'type': 'string',\n\t\t\t'description': nls.localize('proxy', \"The proxy setting to use. If not set will be taken from the http_proxy and https_proxy environment variables\")\n\t\t},\n\t\t'http.proxyStrictSSL': {\n\t\t\t'type': 'boolean',\n\t\t\t'default': true,\n\t\t\t'description': nls.localize('strictSSL', \"Whether the proxy server certificate should be verified against the list of supplied CAs.\")\n\t\t}\n\t}\n});"]}