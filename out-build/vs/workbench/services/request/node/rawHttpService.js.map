{"version":3,"file":"vs/workbench/services/request/node/rawHttpService.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/workbench/services/request/node/rawHttpService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport { TPromise } from 'vs/base/common/winjs.base';\nimport { assign } from 'vs/base/common/objects';\nimport { IXHRResponse } from 'vs/base/common/http';\nimport { request, IRequestOptions } from 'vs/base/node/request';\nimport { getProxyAgent } from 'vs/base/node/proxy';\nimport { createGunzip } from 'zlib';\nimport { Stream } from 'stream';\n\nexport interface IXHROptions extends IRequestOptions {\n\tresponseType?: string;\n\tfollowRedirects: number;\n}\n\nlet proxyUrl: string = null;\nlet strictSSL: boolean = true;\n\nexport function configure(_proxyUrl: string, _strictSSL: boolean): void {\n\tproxyUrl = _proxyUrl;\n\tstrictSSL = _strictSSL;\n}\n\nexport function xhr(options: IXHROptions): TPromise<IXHRResponse> {\n\tconst agent = getProxyAgent(options.url, { proxyUrl, strictSSL });\n\toptions = assign({}, options);\n\toptions = assign(options, { agent, strictSSL });\n\n\treturn request(options).then(result => new TPromise<IXHRResponse>((c, e, p) => {\n\t\tconst res = result.res;\n\t\tlet stream: Stream = res;\n\n\t\tif (res.headers['content-encoding'] === 'gzip') {\n\t\t\tstream = stream.pipe(createGunzip());\n\t\t}\n\n\t\tconst data: string[] = [];\n\t\tstream.on('data', c => data.push(c));\n\t\tstream.on('end', () => {\n\t\t\tconst status = res.statusCode;\n\n\t\t\tif (options.followRedirects > 0 && (status >= 300 && status <= 303 || status === 307)) {\n\t\t\t\tlet location = res.headers['location'];\n\t\t\t\tif (location) {\n\t\t\t\t\tlet newOptions = {\n\t\t\t\t\t\ttype: options.type, url: location, user: options.user, password: options.password, responseType: options.responseType, headers: options.headers,\n\t\t\t\t\t\ttimeout: options.timeout, followRedirects: options.followRedirects - 1, data: options.data\n\t\t\t\t\t};\n\t\t\t\t\txhr(newOptions).done(c, e, p);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst response: IXHRResponse = {\n\t\t\t\tresponseText: data.join(''),\n\t\t\t\tstatus,\n\t\t\t\tgetResponseHeader: header => res.headers[header],\n\t\t\t\treadyState: 4\n\t\t\t};\n\n\t\t\tif ((status >= 200 && status < 300) || status === 1223) {\n\t\t\t\tc(response);\n\t\t\t} else {\n\t\t\t\te(response);\n\t\t\t}\n\t\t});\n\t}, err => {\n\t\tlet message: string;\n\n\t\tif (agent) {\n\t\t\tmessage = 'Unable to to connect to ' + options.url + ' through a proxy . Error: ' + err.message;\n\t\t} else {\n\t\t\tmessage = 'Unable to to connect to ' + options.url + '. Error: ' + err.message;\n\t\t}\n\n\t\treturn TPromise.wrapError<IXHRResponse>({\n\t\t\tresponseText: message,\n\t\t\tstatus: 404\n\t\t});\n\t}));\n}\n"]}