{"version":3,"file":"vs/workbench/services/files/node/watcher/unix/watcherService.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/workbench/services/files/node/watcher/unix/watcherService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport {Client} from 'vs/base/node/service.cp';\nimport uri from 'vs/base/common/uri';\nimport {EventType} from 'vs/platform/files/common/files';\nimport {toFileChangesEvent, IRawFileChange} from 'vs/workbench/services/files/node/watcher/common';\nimport {IEventService} from 'vs/platform/event/common/event';\n\nexport interface IWatcherRequest {\n\tbasePath: string;\n\tignored: string[];\n\tverboseLogging: boolean;\n}\n\nexport class WatcherService {\n\tpublic watch(request: IWatcherRequest): TPromise<void> {\n\t\tthrow new Error('not implemented');\n\t}\n}\n\nexport class FileWatcher {\n\tprivate static MAX_RESTARTS = 5;\n\n\tprivate isDisposed: boolean;\n\tprivate restartCounter: number;\n\n\tconstructor(\n\t\tprivate basePath: string,\n\t\tprivate ignored: string[],\n\t\tprivate eventEmitter: IEventService,\n\t\tprivate errorLogger: (msg: string) => void,\n\t\tprivate verboseLogging: boolean)\n\t{\n\t\tthis.isDisposed = false;\n\t\tthis.restartCounter = 0;\n\t}\n\n\tpublic startWatching(): () => void {\n\t\tconst client = new Client(\n\t\t\turi.parse(require.toUrl('bootstrap')).fsPath,\n\t\t\t{\n\t\t\t\tserverName: 'Watcher',\n\t\t\t\targs: ['--type=watcherService'],\n\t\t\t\tenv: {\n\t\t\t\t\tAMD_ENTRYPOINT: 'vs/workbench/services/files/node/watcher/unix/watcherApp',\n\t\t\t\t\tPIPE_LOGGING: 'true',\n\t\t\t\t\tVERBOSE_LOGGING: this.verboseLogging\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\n\t\tconst service = client.getService<WatcherService>('WatcherService', WatcherService);\n\n\t\t// Start watching\n\t\tservice.watch({ basePath: this.basePath, ignored: this.ignored, verboseLogging: this.verboseLogging }).then(null, (err) => {\n\t\t\tif (!(err instanceof Error && err.name === 'Canceled' && err.message === 'Canceled')) {\n\t\t\t\treturn TPromise.wrapError(err); // the service lib uses the promise cancel error to indicate the process died, we do not want to bubble this up\n\t\t\t}\n\t\t}, (events: IRawFileChange[]) => this.onRawFileEvents(events)).done(() => {\n\n\t\t\t// our watcher app should never be completed because it keeps on watching. being in here indicates\n\t\t\t// that the watcher process died and we want to restart it here. we only do it a max number of times\n\t\t\tif (!this.isDisposed) {\n\t\t\t\tif (this.restartCounter <= FileWatcher.MAX_RESTARTS) {\n\t\t\t\t\tthis.errorLogger('Watcher terminated unexpectedly and is restarted again...');\n\t\t\t\t\tthis.restartCounter++;\n\t\t\t\t\tthis.startWatching();\n\t\t\t\t} else {\n\t\t\t\t\tthis.errorLogger('Watcher failed to start after retrying for some time, giving up. Please report this as a bug report!');\n\t\t\t\t}\n\t\t\t}\n\t\t}, this.errorLogger);\n\n\t\treturn () => {\n\t\t\tclient.dispose();\n\t\t\tthis.isDisposed = true;\n\t\t};\n\t}\n\n\tprivate onRawFileEvents(events: IRawFileChange[]): void {\n\n\t\t// Emit through broadcast service\n\t\tif (events.length > 0) {\n\t\t\tthis.eventEmitter.emit(EventType.FILE_CHANGES, toFileChangesEvent(events));\n\t\t}\n\t}\n}"]}