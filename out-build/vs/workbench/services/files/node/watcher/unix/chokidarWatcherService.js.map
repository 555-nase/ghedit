{"version":3,"file":"vs/workbench/services/files/node/watcher/unix/chokidarWatcherService.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/workbench/services/files/node/watcher/unix/chokidarWatcherService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport chokidar = require('chokidar');\nimport fs = require('fs');\n\nimport gracefulFs = require('graceful-fs');\ngracefulFs.gracefulify(fs);\n\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport {FileChangeType} from 'vs/platform/files/common/files';\nimport {ThrottledDelayer} from 'vs/base/common/async';\nimport strings = require('vs/base/common/strings');\n\nimport {IWatcherRequest, WatcherService} from 'vs/workbench/services/files/node/watcher/unix/watcherService';\nimport watcher = require('vs/workbench/services/files/node/watcher/common');\n\nexport class ChokidarWatcherService extends WatcherService {\n\n\tprivate static FS_EVENT_DELAY = 50; // aggregate and only emit events when changes have stopped for this duration (in ms)\n\tprivate static EVENT_SPAM_WARNING_THRESHOLD = 60 * 1000; // warn after certain time span of event spam\n\n\tprivate spamCheckStartTime:number;\n\tprivate spamWarningLogged:boolean;\n\n\tpublic watch(request: IWatcherRequest): TPromise<void> {\n\t\tlet watcherOpts: chokidar.IOptions = {\n\t\t\tignoreInitial: true,\n\t\t\tignorePermissionErrors: true,\n\t\t\tfollowSymlinks: true, // this is the default of chokidar and supports file events through symlinks\n\t\t\tignored: request.ignored,\n\t\t\tinterval: 1000, // while not used in normal cases, if any error causes chokidar to fallback to polling, increase its intervals\n\t\t\tbinaryInterval: 1000\n\t\t};\n\n\t\tlet chokidarWatcher = chokidar.watch(request.basePath, watcherOpts);\n\n\t\t// Detect if for some reason the native watcher library fails to load\n\t\tif (process.platform === 'darwin' && !chokidarWatcher.options.useFsEvents) {\n\t\t\tconsole.error('Watcher is not using native fsevents library and is falling back to unefficient polling.');\n\t\t}\n\n\t\tlet undeliveredFileEvents: watcher.IRawFileChange[] = [];\n\t\tlet fileEventDelayer = new ThrottledDelayer(ChokidarWatcherService.FS_EVENT_DELAY);\n\n\t\treturn new TPromise<void>((c, e, p) => {\n\t\t\tchokidarWatcher.on('all', (type: string, path: string) => {\n\t\t\t\tif (path.indexOf(request.basePath) < 0) {\n\t\t\t\t\treturn; // we really only care about absolute paths here in our basepath context here\n\t\t\t\t}\n\n\t\t\t\tlet event: watcher.IRawFileChange = null;\n\n\t\t\t\t// Change\n\t\t\t\tif (type === 'change') {\n\t\t\t\t\tevent = {\n\t\t\t\t\t\ttype: 0,\n\t\t\t\t\t\tpath: path\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\t// Add\n\t\t\t\telse if (type === 'add' || type === 'addDir') {\n\t\t\t\t\tevent = {\n\t\t\t\t\t\ttype: 1,\n\t\t\t\t\t\tpath: path\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\t// Delete\n\t\t\t\telse if (type === 'unlink' || type === 'unlinkDir') {\n\t\t\t\t\tevent = {\n\t\t\t\t\t\ttype: 2,\n\t\t\t\t\t\tpath: path\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\tif (event) {\n\n\t\t\t\t\t// Logging\n\t\t\t\t\tif (request.verboseLogging) {\n\t\t\t\t\t\tconsole.log(event.type === FileChangeType.ADDED ? '[ADDED]' : event.type === FileChangeType.DELETED ? '[DELETED]' : '[CHANGED]', event.path);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Check for spam\n\t\t\t\t\tlet now = Date.now();\n\t\t\t\t\tif (undeliveredFileEvents.length === 0) {\n\t\t\t\t\t\tthis.spamWarningLogged = false;\n\t\t\t\t\t\tthis.spamCheckStartTime = now;\n\t\t\t\t\t} else if (!this.spamWarningLogged && this.spamCheckStartTime + ChokidarWatcherService.EVENT_SPAM_WARNING_THRESHOLD < now) {\n\t\t\t\t\t\tthis.spamWarningLogged = true;\n\t\t\t\t\t\tconsole.warn(strings.format('Watcher is busy catching up with {0} file changes in 60 seconds. Latest changed path is \"{1}\"', undeliveredFileEvents.length, event.path));\n\t\t\t\t\t}\n\n\t\t\t\t\t// Add to buffer\n\t\t\t\t\tundeliveredFileEvents.push(event);\n\n\t\t\t\t\t// Delay and send buffer\n\t\t\t\t\tfileEventDelayer.trigger(() => {\n\t\t\t\t\t\tlet events = undeliveredFileEvents;\n\t\t\t\t\t\tundeliveredFileEvents = [];\n\n\t\t\t\t\t\t// Broadcast to clients normalized\n\t\t\t\t\t\tlet res = watcher.normalize(events);\n\t\t\t\t\t\tp(res);\n\n\t\t\t\t\t\t// Logging\n\t\t\t\t\t\tif (request.verboseLogging) {\n\t\t\t\t\t\t\tres.forEach(r => {\n\t\t\t\t\t\t\t\tconsole.log(' >> normalized', r.type === FileChangeType.ADDED ? '[ADDED]' : r.type === FileChangeType.DELETED ? '[DELETED]' : '[CHANGED]', r.path);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn TPromise.as(null);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tchokidarWatcher.on('error', (error: Error) => {\n\t\t\t\tif (error) {\n\t\t\t\t\tconsole.error(error.toString());\n\t\t\t\t}\n\t\t\t});\n\t\t}, () => {\n\t\t\tchokidarWatcher.close();\n\t\t\tfileEventDelayer.cancel();\n\t\t});\n\t}\n}\n"]}