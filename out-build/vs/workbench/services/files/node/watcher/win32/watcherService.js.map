{"version":3,"file":"vs/workbench/services/files/node/watcher/win32/watcherService.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/workbench/services/files/node/watcher/win32/watcherService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;IAEhG,YAAY,CAAC;IAOb;QAEC,qBACS,QAAgB,EAChB,OAAiB,EACjB,YAA2B,EAC3B,WAAkC,EAClC,cAAuB;YAJvB,aAAQ,GAAR,QAAQ,CAAQ;YAChB,YAAO,GAAP,OAAO,CAAU;YACjB,iBAAY,GAAZ,YAAY,CAAe;YAC3B,gBAAW,GAAX,WAAW,CAAuB;YAClC,mBAAc,GAAd,cAAc,CAAS;QAEhC,CAAC;QAEM,mCAAa,GAApB;YAAA,iBAUC;YATA,IAAI,OAAO,GAAG,IAAI,qDAA8B,CAC/C,IAAI,CAAC,QAAQ,EACb,IAAI,CAAC,OAAO,EACZ,UAAC,MAAM,IAAK,OAAA,KAAI,CAAC,eAAe,CAAC,MAAM,CAAC,EAA5B,CAA4B,EACxC,UAAC,KAAK,IAAK,OAAA,KAAI,CAAC,OAAO,CAAC,KAAK,CAAC,EAAnB,CAAmB,EAC9B,IAAI,CAAC,cAAc,CACnB,CAAC;YAEF,MAAM,CAAC,cAAM,OAAA,OAAO,CAAC,OAAO,EAAE,EAAjB,CAAiB,CAAC;QAChC,CAAC;QAEO,qCAAe,GAAvB,UAAwB,MAAgC;YAEvD,iCAAiC;YACjC,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;gBACvB,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,iBAAS,CAAC,YAAY,EAAE,OAAO,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC,CAAC;YACpF,CAAC;QACF,CAAC;QAEO,6BAAO,GAAf,UAAgB,KAAa;YAC5B,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QACzB,CAAC;QACF,kBAAC;IAAD,CAAC,AAlCD,IAkCC;IAlCY,mBAAW,cAkCvB,CAAA","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport {EventType} from 'vs/platform/files/common/files';\nimport watcher = require('vs/workbench/services/files/node/watcher/common');\nimport {OutOfProcessWin32FolderWatcher} from 'vs/workbench/services/files/node/watcher/win32/csharpWatcherService';\nimport {IEventService} from 'vs/platform/event/common/event';\n\nexport class FileWatcher {\n\n\tconstructor(\n\t\tprivate basePath: string,\n\t\tprivate ignored: string[],\n\t\tprivate eventEmitter: IEventService,\n\t\tprivate errorLogger: (msg: string) => void,\n\t\tprivate verboseLogging: boolean\n\t) {\n\t}\n\n\tpublic startWatching(): () => void {\n\t\tlet watcher = new OutOfProcessWin32FolderWatcher(\n\t\t\tthis.basePath,\n\t\t\tthis.ignored,\n\t\t\t(events) => this.onRawFileEvents(events),\n\t\t\t(error) => this.onError(error),\n\t\t\tthis.verboseLogging\n\t\t);\n\n\t\treturn () => watcher.dispose();\n\t}\n\n\tprivate onRawFileEvents(events: watcher.IRawFileChange[]): void {\n\n\t\t// Emit through broadcast service\n\t\tif (events.length > 0) {\n\t\t\tthis.eventEmitter.emit(EventType.FILE_CHANGES, watcher.toFileChangesEvent(events));\n\t\t}\n\t}\n\n\tprivate onError(error: string): void {\n\t\tthis.errorLogger(error);\n\t}\n}"]}