{"version":3,"sources":["vs/workbench/services/files/node/fileService.ts"],"names":[],"mappings":"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","file":"vs/workbench/services/files/node/fileService.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport paths = require('path');\nimport fs = require('fs');\nimport os = require('os');\nimport crypto = require('crypto');\nimport assert = require('assert');\n\nimport files = require('vs/platform/files/common/files');\nimport strings = require('vs/base/common/strings');\nimport arrays = require('vs/base/common/arrays');\nimport baseMime = require('vs/base/common/mime');\nimport basePaths = require('vs/base/common/paths');\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport types = require('vs/base/common/types');\nimport objects = require('vs/base/common/objects');\nimport extfs = require('vs/base/node/extfs');\nimport {nfcall, Limiter, ThrottledDelayer} from 'vs/base/common/async';\nimport uri from 'vs/base/common/uri';\nimport nls = require('vs/nls');\n\nimport pfs = require('vs/base/node/pfs');\nimport encoding = require('vs/base/node/encoding');\nimport mime = require('vs/base/node/mime');\nimport flow = require('vs/base/node/flow');\nimport {FileWatcher as UnixWatcherService} from 'vs/workbench/services/files/node/watcher/unix/watcherService';\nimport {FileWatcher as WindowsWatcherService} from 'vs/workbench/services/files/node/watcher/win32/watcherService';\nimport {toFileChangesEvent, normalize, IRawFileChange} from 'vs/workbench/services/files/node/watcher/common';\nimport {IEventService} from 'vs/platform/event/common/event';\n\nexport interface IEncodingOverride {\n\tresource: uri;\n\tencoding: string;\n}\n\nexport interface IFileServiceOptions {\n\ttmpDir?: string;\n\terrorLogger?: (msg: string) => void;\n\tencoding?: string;\n\tbom?: string;\n\tencodingOverride?: IEncodingOverride[];\n\twatcherIgnoredPatterns?: string[];\n\tdisableWatcher?: boolean;\n\tverboseLogging?: boolean;\n}\n\nfunction etag(stat: fs.Stats): string;\nfunction etag(size: number, mtime: number): string;\nfunction etag(arg1: any, arg2?: any): string {\n\tlet size: number;\n\tlet mtime: number;\n\tif (typeof arg2 === 'number') {\n\t\tsize = arg1;\n\t\tmtime = arg2;\n\t} else {\n\t\tsize = (<fs.Stats>arg1).size;\n\t\tmtime = (<fs.Stats>arg1).mtime.getTime();\n\t}\n\n\treturn '\"' + crypto.createHash('sha1').update(String(size) + String(mtime)).digest('hex') + '\"';\n}\n\nexport class FileService implements files.IFileService {\n\n\tpublic serviceId = files.IFileService;\n\n\tprivate static FS_EVENT_DELAY = 50; // aggregate and only emit events when changes have stopped for this duration (in ms)\n\tprivate static MAX_DEGREE_OF_PARALLEL_FS_OPS = 10; // degree of parallel fs calls that we accept at the same time\n\n\tprivate basePath: string;\n\tprivate tmpPath: string;\n\tprivate options: IFileServiceOptions;\n\n\tprivate workspaceWatcherToDispose: () => void;\n\n\tprivate activeFileChangesWatchers: { [resource: string]: fs.FSWatcher; };\n\tprivate fileChangesWatchDelayer: ThrottledDelayer<void>;\n\tprivate undeliveredRawFileChangesEvents: IRawFileChange[];\n\n\tconstructor(basePath: string, options: IFileServiceOptions, private eventEmitter: IEventService) {\n\t\tthis.basePath = basePath ? paths.normalize(basePath) : void 0;\n\n\t\tif (this.basePath && this.basePath.indexOf('\\\\\\\\') === 0 && strings.endsWith(this.basePath, paths.sep)) {\n\t\t\t// for some weird reason, node adds a trailing slash to UNC paths\n\t\t\t// we never ever want trailing slashes as our base path unless\n\t\t\t// someone opens root (\"/\").\n\t\t\t// See also https://github.com/nodejs/io.js/issues/1765\n\t\t\tthis.basePath = strings.rtrim(this.basePath, paths.sep);\n\t\t}\n\n\t\tif (this.basePath && !paths.isAbsolute(basePath)) {\n\t\t\tthrow new Error('basePath has to be an absolute path');\n\t\t}\n\n\t\tthis.options = options || Object.create(null);\n\t\tthis.tmpPath = this.options.tmpDir || os.tmpdir();\n\n\t\tif (this.options && !this.options.errorLogger) {\n\t\t\tthis.options.errorLogger = console.error;\n\t\t}\n\n\t\tif (this.basePath && !this.options.disableWatcher) {\n\t\t\tif (process.platform === 'win32') {\n\t\t\t\tthis.setupWin32WorkspaceWatching();\n\t\t\t} else {\n\t\t\t\tthis.setupUnixWorkspaceWatching();\n\t\t\t}\n\t\t}\n\n\t\tthis.activeFileChangesWatchers = Object.create(null);\n\t\tthis.fileChangesWatchDelayer = new ThrottledDelayer<void>(FileService.FS_EVENT_DELAY);\n\t\tthis.undeliveredRawFileChangesEvents = [];\n\t}\n\n\tpublic updateOptions(options: IFileServiceOptions): void {\n\t\tif (options) {\n\t\t\tobjects.mixin(this.options, options); // overwrite current options\n\t\t}\n\t}\n\n\tprivate setupWin32WorkspaceWatching(): void {\n\t\tthis.workspaceWatcherToDispose = new WindowsWatcherService(this.basePath, this.options.watcherIgnoredPatterns, this.eventEmitter, this.options.errorLogger, this.options.verboseLogging).startWatching();\n\t}\n\n\tprivate setupUnixWorkspaceWatching(): void {\n\t\tthis.workspaceWatcherToDispose = new UnixWatcherService(this.basePath, this.options.watcherIgnoredPatterns, this.eventEmitter, this.options.errorLogger, this.options.verboseLogging).startWatching();\n\t}\n\n\tpublic resolveFile(resource: uri, options?: files.IResolveFileOptions): TPromise<files.IFileStat> {\n\t\treturn this.resolve(resource, options);\n\t}\n\n\tpublic resolveContent(resource: uri, options?: files.IResolveContentOptions): TPromise<files.IContent> {\n\t\tlet absolutePath = this.toAbsolutePath(resource);\n\n\t\t// 1.) detect mimes\n\t\treturn nfcall(mime.detectMimesFromFile, absolutePath).then((detected: mime.IMimeAndEncoding) => {\n\t\t\tlet isText = detected.mimes.indexOf(baseMime.MIME_BINARY) === -1;\n\n\t\t\t// Return error early if client only accepts text and this is not text\n\t\t\tif (options && options.acceptTextOnly && !isText) {\n\t\t\t\treturn TPromise.wrapError(<files.IFileOperationResult>{\n\t\t\t\t\tmessage: nls.localize('fileBinaryError', \"File seems to be binary and cannot be opened as text\"),\n\t\t\t\t\tfileOperationResult: files.FileOperationResult.FILE_IS_BINARY\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tlet preferredEncoding: string;\n\t\t\tif (options && options.encoding) {\n\t\t\t\tif (detected.encoding === encoding.UTF8 && options.encoding === encoding.UTF8) {\n\t\t\t\t\tpreferredEncoding = encoding.UTF8_with_bom; // indicate the file has BOM if we are to resolve with UTF 8\n\t\t\t\t} else {\n\t\t\t\t\tpreferredEncoding = options.encoding; // give passed in encoding highest priority\n\t\t\t\t}\n\t\t\t} else if (detected.encoding) {\n\t\t\t\tif (detected.encoding === encoding.UTF8) {\n\t\t\t\t\tpreferredEncoding = encoding.UTF8_with_bom; // if we detected UTF-8, it can only be because of a BOM\n\t\t\t\t} else {\n\t\t\t\t\tpreferredEncoding = detected.encoding;\n\t\t\t\t}\n\t\t\t} else if (this.options.encoding === encoding.UTF8_with_bom) {\n\t\t\t\tpreferredEncoding = encoding.UTF8; // if we did not detect UTF 8 BOM before, this can only be UTF 8 then\n\t\t\t}\n\n\t\t\t// 2.) get content\n\t\t\treturn this.resolveFileContent(resource, options && options.etag, preferredEncoding).then((content) => {\n\n\t\t\t\t// set our knowledge about the mime on the content obj\n\t\t\t\tcontent.mime = detected.mimes.join(', ');\n\n\t\t\t\treturn content;\n\t\t\t});\n\t\t}, (error) => {\n\n\t\t\t// bubble up existing file operation results\n\t\t\tif (!types.isUndefinedOrNull((<files.IFileOperationResult>error).fileOperationResult)) {\n\t\t\t\treturn TPromise.wrapError(error);\n\t\t\t}\n\n\t\t\t// on error check if the file does not exist or is a folder and return with proper error result\n\t\t\treturn pfs.exists(absolutePath).then((exists) => {\n\n\t\t\t\t// Return if file not found\n\t\t\t\tif (!exists) {\n\t\t\t\t\treturn TPromise.wrapError(<files.IFileOperationResult>{\n\t\t\t\t\t\tmessage: nls.localize('fileNotFoundError', \"File not found ({0})\", absolutePath),\n\t\t\t\t\t\tfileOperationResult: files.FileOperationResult.FILE_NOT_FOUND\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\t// Otherwise check for file being a folder?\n\t\t\t\treturn pfs.stat(absolutePath).then((stat) => {\n\t\t\t\t\tif (stat.isDirectory()) {\n\t\t\t\t\t\treturn TPromise.wrapError(<files.IFileOperationResult>{\n\t\t\t\t\t\t\tmessage: nls.localize('fileIsDirectoryError', \"File is directory ({0})\", absolutePath),\n\t\t\t\t\t\t\tfileOperationResult: files.FileOperationResult.FILE_IS_DIRECTORY\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\t// otherwise just give up\n\t\t\t\t\treturn TPromise.wrapError(error);\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t}\n\n\tpublic resolveContents(resources: uri[]): TPromise<files.IContent[]> {\n\t\tlet limiter = new Limiter(FileService.MAX_DEGREE_OF_PARALLEL_FS_OPS);\n\n\t\tlet contentPromises = <TPromise<files.IContent>[]>[];\n\t\tresources.forEach((resource) => {\n\t\t\tcontentPromises.push(limiter.queue(() => this.resolveFileContent(resource).then((content) => content, (error) => TPromise.as(null /* ignore errors gracefully */))));\n\t\t});\n\n\t\treturn TPromise.join(contentPromises).then((contents) => {\n\t\t\treturn arrays.coalesce(contents);\n\t\t});\n\t}\n\n\tpublic updateContent(resource: uri, value: string, options: files.IUpdateContentOptions = Object.create(null)): TPromise<files.IFileStat> {\n\t\tlet absolutePath = this.toAbsolutePath(resource);\n\n\t\t// 1.) check file\n\t\treturn this.checkFile(absolutePath, options).then((exists) => {\n\t\t\tlet createParentsPromise: TPromise<boolean>;\n\t\t\tif (exists) {\n\t\t\t\tcreateParentsPromise = TPromise.as(null);\n\t\t\t} else {\n\t\t\t\tcreateParentsPromise = pfs.mkdirp(paths.dirname(absolutePath));\n\t\t\t}\n\n\t\t\t// 2.) create parents as needed\n\t\t\treturn createParentsPromise.then(() => {\n\t\t\t\tlet encodingToWrite = this.getEncoding(resource, options.encoding);\n\t\t\t\tlet addBomPromise: TPromise<boolean> = TPromise.as(false);\n\n\t\t\t\t// UTF_16 BE and LE as well as UTF_8 with BOM always have a BOM\n\t\t\t\tif (encodingToWrite === encoding.UTF16be || encodingToWrite === encoding.UTF16le || encodingToWrite === encoding.UTF8_with_bom) {\n\t\t\t\t\taddBomPromise = TPromise.as(true);\n\t\t\t\t}\n\n\t\t\t\t// Existing UTF-8 file: check for options regarding BOM\n\t\t\t\telse if (exists && encodingToWrite === encoding.UTF8) {\n\t\t\t\t\tif (options.overwriteEncoding) {\n\t\t\t\t\t\taddBomPromise = TPromise.as(false); // if we are to overwrite the encoding, we do not preserve it if found\n\t\t\t\t\t} else {\n\t\t\t\t\t\taddBomPromise = nfcall(encoding.detectEncodingByBOM, absolutePath).then((enc) => enc === encoding.UTF8); // otherwise preserve it if found\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// 3.) check to add UTF BOM\n\t\t\t\treturn addBomPromise.then((addBom) => {\n\t\t\t\t\tlet writeFilePromise: TPromise<void>;\n\n\t\t\t\t\t// Write fast if we do UTF 8 without BOM\n\t\t\t\t\tif (!addBom && encodingToWrite === encoding.UTF8) {\n\t\t\t\t\t\twriteFilePromise = pfs.writeFile(absolutePath, value, encoding.UTF8);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Otherwise use encoding lib\n\t\t\t\t\telse {\n\t\t\t\t\t\tlet encoded = encoding.encode(value, encodingToWrite, { addBOM: addBom });\n\t\t\t\t\t\twriteFilePromise = pfs.writeFile(absolutePath, encoded);\n\t\t\t\t\t}\n\n\t\t\t\t\t// 4.) set contents\n\t\t\t\t\treturn writeFilePromise.then(() => {\n\n\t\t\t\t\t\t// 5.) resolve\n\t\t\t\t\t\treturn this.resolve(resource);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t}\n\n\tpublic createFile(resource: uri, content: string = ''): TPromise<files.IFileStat> {\n\t\treturn this.updateContent(resource, content);\n\t}\n\n\tpublic createFolder(resource: uri): TPromise<files.IFileStat> {\n\n\t\t// 1.) create folder\n\t\tlet absolutePath = this.toAbsolutePath(resource);\n\t\treturn pfs.mkdirp(absolutePath).then(() => {\n\n\t\t\t// 2.) resolve\n\t\t\treturn this.resolve(resource);\n\t\t});\n\t}\n\n\tpublic rename(resource: uri, newName: string): TPromise<files.IFileStat> {\n\t\tlet newPath = paths.join(paths.dirname(resource.fsPath), newName);\n\n\t\treturn this.moveFile(resource, uri.file(newPath));\n\t}\n\n\tpublic moveFile(source: uri, target: uri, overwrite?: boolean): TPromise<files.IFileStat> {\n\t\treturn this.moveOrCopyFile(source, target, false, overwrite);\n\t}\n\n\tpublic copyFile(source: uri, target: uri, overwrite?: boolean): TPromise<files.IFileStat> {\n\t\treturn this.moveOrCopyFile(source, target, true, overwrite);\n\t}\n\n\tprivate moveOrCopyFile(source: uri, target: uri, keepCopy: boolean, overwrite: boolean): TPromise<files.IFileStat> {\n\t\tlet sourcePath = this.toAbsolutePath(source);\n\t\tlet targetPath = this.toAbsolutePath(target);\n\n\t\t// 1.) move / copy\n\t\treturn this.doMoveOrCopyFile(sourcePath, targetPath, keepCopy, overwrite).then(() => {\n\n\t\t\t// 2.) resolve\n\t\t\treturn this.resolve(target);\n\t\t});\n\t}\n\n\tprivate doMoveOrCopyFile(sourcePath: string, targetPath: string, keepCopy: boolean, overwrite: boolean): TPromise<boolean /* exists */> {\n\n\t\t// 1.) check if target exists\n\t\treturn pfs.exists(targetPath).then((exists) => {\n\t\t\tlet isCaseRename = sourcePath.toLowerCase() === targetPath.toLowerCase();\n\t\t\tlet isSameFile = sourcePath === targetPath;\n\n\t\t\t// Return early with conflict if target exists and we are not told to overwrite\n\t\t\tif (exists && !isCaseRename && !overwrite) {\n\t\t\t\treturn TPromise.wrapError(<files.IFileOperationResult>{\n\t\t\t\t\tfileOperationResult: files.FileOperationResult.FILE_MOVE_CONFLICT\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// 2.) make sure target is deleted before we move/copy unless this is a case rename of the same file\n\t\t\tlet deleteTargetPromise = TPromise.as(null);\n\t\t\tif (exists && !isCaseRename) {\n\t\t\t\tif (basePaths.isEqualOrParent(sourcePath, targetPath)) {\n\t\t\t\t\treturn TPromise.wrapError(nls.localize('unableToMoveCopyError', \"Unable to move/copy. File would replace folder it is contained in.\")); // catch this corner case!\n\t\t\t\t}\n\n\t\t\t\tdeleteTargetPromise = this.del(uri.file(targetPath));\n\t\t\t}\n\n\t\t\treturn deleteTargetPromise.then(() => {\n\n\t\t\t\t// 3.) make sure parents exists\n\t\t\t\treturn pfs.mkdirp(paths.dirname(targetPath)).then(() => {\n\n\t\t\t\t\t// 4.) copy/move\n\t\t\t\t\tif (isSameFile) {\n\t\t\t\t\t\treturn TPromise.as(null);\n\t\t\t\t\t} else if (keepCopy) {\n\t\t\t\t\t\treturn nfcall(extfs.copy, sourcePath, targetPath);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn nfcall(extfs.mv, sourcePath, targetPath);\n\t\t\t\t\t}\n\t\t\t\t}).then(() => exists);\n\t\t\t});\n\t\t});\n\t}\n\n\tpublic importFile(source: uri, targetFolder: uri): TPromise<files.IImportResult> {\n\t\tlet sourcePath = this.toAbsolutePath(source);\n\t\tlet targetResource = uri.file(paths.join(targetFolder.fsPath, paths.basename(source.fsPath)));\n\t\tlet targetPath = this.toAbsolutePath(targetResource);\n\n\t\t// 1.) resolve\n\t\treturn pfs.stat(sourcePath).then((stat) => {\n\t\t\tif (stat.isDirectory()) {\n\t\t\t\treturn TPromise.wrapError(nls.localize('foldersCopyError', \"Folders cannot be copied into the workspace. Please select individual files to copy them.\")); // for now we do not allow to import a folder into a workspace\n\t\t\t}\n\n\t\t\t// 2.) copy\n\t\t\treturn this.doMoveOrCopyFile(sourcePath, targetPath, true, true).then((exists) => {\n\n\t\t\t\t// 3.) resolve\n\t\t\t\treturn this.resolve(targetResource).then((stat) => <files.IImportResult>{ isNew: !exists, stat: stat });\n\t\t\t});\n\t\t});\n\t}\n\n\tpublic del(resource: uri): TPromise<void> {\n\t\tlet absolutePath = this.toAbsolutePath(resource);\n\n\t\treturn nfcall(extfs.del, absolutePath, this.tmpPath);\n\t}\n\n\t// Helpers\n\n\tprivate toAbsolutePath(arg1: uri | files.IFileStat): string {\n\t\tlet resource: uri;\n\t\tif (arg1 instanceof uri) {\n\t\t\tresource = <uri>arg1;\n\t\t} else {\n\t\t\tresource = (<files.IFileStat>arg1).resource;\n\t\t}\n\n\t\tassert.ok(resource && resource.scheme === 'file', 'Invalid resource: ' + resource);\n\n\t\treturn paths.normalize(resource.fsPath);\n\t}\n\n\tprivate resolve(resource: uri, options: files.IResolveFileOptions = Object.create(null)): TPromise<files.IFileStat> {\n\t\treturn this.toStatResolver(resource)\n\t\t\t.then(model => model.resolve(options));\n\t}\n\n\tprivate toStatResolver(resource: uri): TPromise<StatResolver> {\n\t\tlet absolutePath = this.toAbsolutePath(resource);\n\n\t\treturn pfs.stat(absolutePath).then((stat: fs.Stats) => {\n\t\t\treturn new StatResolver(resource, stat.isDirectory(), stat.mtime.getTime(), stat.size, this.options.verboseLogging);\n\t\t});\n\t}\n\n\tprivate resolveFileContent(resource: uri, etag?: string, enc?: string): TPromise<files.IContent> {\n\t\tlet absolutePath = this.toAbsolutePath(resource);\n\n\t\t// 1.) stat\n\t\treturn this.resolve(resource).then((model) => {\n\n\t\t\t// Return early if file not modified since\n\t\t\tif (etag && etag === model.etag) {\n\t\t\t\treturn TPromise.wrapError(<files.IFileOperationResult>{\n\t\t\t\t\tfileOperationResult: files.FileOperationResult.FILE_NOT_MODIFIED_SINCE\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Return early if file is too large to load\n\t\t\tif (types.isNumber(model.size) && model.size > files.MAX_FILE_SIZE) {\n\t\t\t\treturn TPromise.wrapError(<files.IFileOperationResult>{\n\t\t\t\t\tfileOperationResult: files.FileOperationResult.FILE_TOO_LARGE\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// 2.) read contents\n\t\t\treturn new TPromise<files.IContent>((c, e) => {\n\t\t\t\tlet done = false;\n\t\t\t\tlet chunks: NodeBuffer[] = [];\n\t\t\t\tlet fileEncoding = this.getEncoding(model.resource, enc);\n\n\t\t\t\tconst reader = fs.createReadStream(absolutePath).pipe(encoding.decodeStream(fileEncoding)); // decode takes care of stripping any BOMs from the file content\n\n\t\t\t\treader.on('data', (buf) => {\n\t\t\t\t\tchunks.push(buf);\n\t\t\t\t});\n\n\t\t\t\treader.on('error', (error) => {\n\t\t\t\t\tif (!done) {\n\t\t\t\t\t\tdone = true;\n\t\t\t\t\t\te(error);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\treader.on('end', () => {\n\t\t\t\t\tlet content: files.IContent = <any>model;\n\t\t\t\t\tcontent.value = chunks.join('');\n\t\t\t\t\tcontent.encoding = fileEncoding; // make sure to store the encoding in the model to restore it later when writing\n\n\t\t\t\t\tif (!done) {\n\t\t\t\t\t\tdone = true;\n\t\t\t\t\t\tc(content);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate getEncoding(resource: uri, preferredEncoding?: string): string {\n\t\tlet fileEncoding: string;\n\n\t\tlet override = this.getEncodingOverride(resource);\n\t\tif (override) {\n\t\t\tfileEncoding = override;\n\t\t} else if (preferredEncoding) {\n\t\t\tfileEncoding = preferredEncoding;\n\t\t} else {\n\t\t\tfileEncoding = this.options.encoding;\n\t\t}\n\n\t\tif (!fileEncoding || !encoding.encodingExists(fileEncoding)) {\n\t\t\tfileEncoding = encoding.UTF8; // the default is UTF 8\n\t\t}\n\n\t\treturn fileEncoding;\n\t}\n\n\tprivate getEncodingOverride(resource: uri): string {\n\t\tif (resource && this.options.encodingOverride && this.options.encodingOverride.length) {\n\t\t\tfor (let i = 0; i < this.options.encodingOverride.length; i++) {\n\t\t\t\tlet override = this.options.encodingOverride[i];\n\n\t\t\t\t// check if the resource is a child of the resource with override and use\n\t\t\t\t// the provided encoding in that case\n\t\t\t\tif (resource.toString().indexOf(override.resource.toString() + '/') === 0) {\n\t\t\t\t\treturn override.encoding;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tprivate checkFile(absolutePath: string, options: files.IUpdateContentOptions): TPromise<boolean /* exists */> {\n\t\treturn pfs.exists(absolutePath).then((exists) => {\n\t\t\tif (exists) {\n\t\t\t\treturn pfs.stat(absolutePath).then((stat: fs.Stats) => {\n\t\t\t\t\tif (stat.isDirectory()) {\n\t\t\t\t\t\treturn TPromise.wrapError(new Error('Expected file is actually a directory'));\n\t\t\t\t\t}\n\n\t\t\t\t\t// Dirty write prevention\n\t\t\t\t\tif (typeof options.mtime === 'number' && typeof options.etag === 'string' && options.mtime < stat.mtime.getTime()) {\n\n\t\t\t\t\t\t// Find out if content length has changed\n\t\t\t\t\t\tif (options.etag !== etag(stat.size, options.mtime)) {\n\t\t\t\t\t\t\treturn TPromise.wrapError(<files.IFileOperationResult>{\n\t\t\t\t\t\t\t\tmessage: 'File Modified Since',\n\t\t\t\t\t\t\t\tfileOperationResult: files.FileOperationResult.FILE_MODIFIED_SINCE\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tlet mode = stat.mode;\n\t\t\t\t\tlet readonly = !(mode & 128);\n\n\t\t\t\t\t// Throw if file is readonly and we are not instructed to overwrite\n\t\t\t\t\tif (readonly && !options.overwriteReadonly) {\n\t\t\t\t\t\treturn TPromise.wrapError(<files.IFileOperationResult>{\n\t\t\t\t\t\t\tmessage: nls.localize('fileReadOnlyError', \"File is Read Only\"),\n\t\t\t\t\t\t\tfileOperationResult: files.FileOperationResult.FILE_READ_ONLY\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tif (readonly) {\n\t\t\t\t\t\tmode = mode | 128;\n\t\t\t\t\t\treturn pfs.chmod(absolutePath, mode).then(() => exists);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn TPromise.as<boolean>(exists);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn TPromise.as<boolean>(exists);\n\t\t});\n\t}\n\n\tpublic watchFileChanges(resource: uri): void {\n\t\tassert.ok(resource && resource.scheme === 'file', 'Invalid resource for watching: ' + resource);\n\n\t\tlet fsPath = resource.fsPath;\n\n\t\t// Create or get watcher for provided path\n\t\tlet watcher = this.activeFileChangesWatchers[resource.toString()];\n\t\tif (!watcher) {\n\t\t\ttry {\n\t\t\t\twatcher = fs.watch(fsPath); // will be persistent but not recursive\n\t\t\t} catch (error) {\n\t\t\t\t// the path might not exist anymore, ignore this error and return\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.activeFileChangesWatchers[resource.toString()] = watcher;\n\n\t\t\t// eventType is either 'rename' or 'change'\n\t\t\twatcher.on('change', (eventType: string) => {\n\t\t\t\tif (eventType !== 'change') {\n\t\t\t\t\treturn; // only care about changes for now ('rename' is not reliable and can be send even if the file is still there with some tools)\n\t\t\t\t}\n\n\t\t\t\t// add to bucket of undelivered events\n\t\t\t\tthis.undeliveredRawFileChangesEvents.push({\n\t\t\t\t\ttype: files.FileChangeType.UPDATED,\n\t\t\t\t\tpath: fsPath\n\t\t\t\t});\n\n\t\t\t\t// handle emit through delayer to accommodate for bulk changes\n\t\t\t\tthis.fileChangesWatchDelayer.trigger(() => {\n\t\t\t\t\tlet buffer = this.undeliveredRawFileChangesEvents;\n\t\t\t\t\tthis.undeliveredRawFileChangesEvents = [];\n\n\t\t\t\t\t// Normalize\n\t\t\t\t\tlet normalizedEvents = normalize(buffer);\n\n\t\t\t\t\t// Emit\n\t\t\t\t\tthis.eventEmitter.emit(files.EventType.FILE_CHANGES, toFileChangesEvent(normalizedEvents));\n\n\t\t\t\t\treturn TPromise.as(null);\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t}\n\n\tpublic unwatchFileChanges(resource: uri): void;\n\tpublic unwatchFileChanges(path: string): void;\n\tpublic unwatchFileChanges(arg1: any): void {\n\t\tlet resource = (typeof arg1 === 'string') ? uri.parse(arg1) : arg1;\n\n\t\tlet watcher = this.activeFileChangesWatchers[resource.toString()];\n\t\tif (watcher) {\n\t\t\twatcher.close();\n\t\t\tdelete this.activeFileChangesWatchers[resource.toString()];\n\t\t}\n\t}\n\n\tpublic dispose(): void {\n\t\tif (this.workspaceWatcherToDispose) {\n\t\t\tthis.workspaceWatcherToDispose();\n\t\t\tthis.workspaceWatcherToDispose = null;\n\t\t}\n\n\t\tfor (let key in this.activeFileChangesWatchers) {\n\t\t\tlet watcher = this.activeFileChangesWatchers[key];\n\t\t\twatcher.close();\n\t\t}\n\t\tthis.activeFileChangesWatchers = Object.create(null);\n\t}\n}\n\nexport class StatResolver {\n\tprivate resource: uri;\n\tprivate isDirectory: boolean;\n\tprivate mtime: number;\n\tprivate name: string;\n\tprivate mime: string;\n\tprivate etag: string;\n\tprivate size: number;\n\tprivate verboseLogging: boolean;\n\n\tconstructor(resource: uri, isDirectory: boolean, mtime: number, size: number, verboseLogging: boolean) {\n\t\tassert.ok(resource && resource.scheme === 'file', 'Invalid resource: ' + resource);\n\n\t\tthis.resource = resource;\n\t\tthis.isDirectory = isDirectory;\n\t\tthis.mtime = mtime;\n\t\tthis.name = paths.basename(resource.fsPath);\n\t\tthis.mime = !this.isDirectory ? baseMime.guessMimeTypes(resource.fsPath).join(', ') : null;\n\t\tthis.etag = etag(size, mtime);\n\t\tthis.size = size;\n\n\t\tthis.verboseLogging = verboseLogging;\n\t}\n\n\tpublic resolve(options: files.IResolveFileOptions): TPromise<files.IFileStat> {\n\n\t\t// General Data\n\t\tlet fileStat: files.IFileStat = {\n\t\t\tresource: this.resource,\n\t\t\tisDirectory: this.isDirectory,\n\t\t\thasChildren: undefined,\n\t\t\tname: this.name,\n\t\t\tetag: this.etag,\n\t\t\tsize: this.size,\n\t\t\tmtime: this.mtime,\n\t\t\tmime: this.mime\n\t\t};\n\n\t\t// File Specific Data\n\t\tif (!this.isDirectory) {\n\t\t\treturn TPromise.as(fileStat);\n\t\t}\n\n\t\t// Directory Specific Data\n\t\telse {\n\n\t\t\t// Convert the paths from options.resolveTo to absolute paths\n\t\t\tlet absoluteTargetPaths: string[] = null;\n\t\t\tif (options && options.resolveTo) {\n\t\t\t\tabsoluteTargetPaths = [];\n\t\t\t\toptions.resolveTo.forEach((resource) => {\n\t\t\t\t\tabsoluteTargetPaths.push(resource.fsPath);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn new TPromise((c, e) => {\n\n\t\t\t\t// Load children\n\t\t\t\tthis.resolveChildren(this.resource.fsPath, absoluteTargetPaths, options && options.resolveSingleChildDescendants, (children) => {\n\t\t\t\t\tchildren = arrays.coalesce(children); // we don't want those null children (could be permission denied when reading a child)\n\t\t\t\t\tfileStat.hasChildren = children && children.length > 0;\n\t\t\t\t\tfileStat.children = children || [];\n\n\t\t\t\t\tc(fileStat);\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate resolveChildren(absolutePath: string, absoluteTargetPaths: string[], resolveSingleChildDescendants: boolean, callback: (children: files.IFileStat[]) => void): void {\n\t\textfs.readdir(absolutePath, (error: Error, files: string[]) => {\n\t\t\tif (error) {\n\t\t\t\tif (this.verboseLogging) {\n\t\t\t\t\tconsole.error(error);\n\t\t\t\t}\n\n\t\t\t\treturn callback(null); // return - we might not have permissions to read the folder\n\t\t\t}\n\n\t\t\t// for each file in the folder\n\t\t\tflow.parallel(files, (file: string, clb: (error: Error, children: files.IFileStat) => void) => {\n\t\t\t\tlet fileResource = uri.file(paths.resolve(absolutePath, file));\n\t\t\t\tlet fileStat: fs.Stats;\n\t\t\t\tlet $this = this;\n\n\t\t\t\tflow.sequence(\n\t\t\t\t\tfunction onError(error: Error): void {\n\t\t\t\t\t\tif ($this.verboseLogging) {\n\t\t\t\t\t\t\tconsole.error(error);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tclb(null, null); // return - we might not have permissions to read the folder or stat the file\n\t\t\t\t\t},\n\n\t\t\t\t\tfunction stat(): void {\n\t\t\t\t\t\tfs.stat(fileResource.fsPath, this);\n\t\t\t\t\t},\n\n\t\t\t\t\tfunction countChildren(fsstat: fs.Stats): void {\n\t\t\t\t\t\tfileStat = fsstat;\n\n\t\t\t\t\t\tif (fileStat.isDirectory()) {\n\t\t\t\t\t\t\textfs.readdir(fileResource.fsPath, (error, result) => {\n\t\t\t\t\t\t\t\tthis(null, result ? result.length : 0);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis(null, 0);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\n\t\t\t\t\tfunction resolve(childCount: number): void {\n\t\t\t\t\t\tlet childStat: files.IFileStat = {\n\t\t\t\t\t\t\tresource: fileResource,\n\t\t\t\t\t\t\tisDirectory: fileStat.isDirectory(),\n\t\t\t\t\t\t\thasChildren: childCount > 0,\n\t\t\t\t\t\t\tname: file,\n\t\t\t\t\t\t\tmtime: fileStat.mtime.getTime(),\n\t\t\t\t\t\t\tetag: etag(fileStat),\n\t\t\t\t\t\t\tsize: fileStat.size,\n\t\t\t\t\t\t\tmime: !fileStat.isDirectory() ? baseMime.guessMimeTypes(fileResource.fsPath).join(', ') : undefined\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\t// Return early for files\n\t\t\t\t\t\tif (!fileStat.isDirectory()) {\n\t\t\t\t\t\t\treturn clb(null, childStat);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Handle Folder\n\t\t\t\t\t\tlet resolveFolderChildren = false;\n\t\t\t\t\t\tif (files.length === 1 && resolveSingleChildDescendants) {\n\t\t\t\t\t\t\tresolveFolderChildren = true;\n\t\t\t\t\t\t} else if (childCount > 0 && absoluteTargetPaths && absoluteTargetPaths.some((targetPath) => basePaths.isEqualOrParent(targetPath, fileResource.fsPath))) {\n\t\t\t\t\t\t\tresolveFolderChildren = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Continue resolving children based on condition\n\t\t\t\t\t\tif (resolveFolderChildren) {\n\t\t\t\t\t\t\t$this.resolveChildren(fileResource.fsPath, absoluteTargetPaths, resolveSingleChildDescendants, (children) => {\n\t\t\t\t\t\t\t\tchildren = arrays.coalesce(children);  // we don't want those null children\n\t\t\t\t\t\t\t\tchildStat.hasChildren = children && children.length > 0;\n\t\t\t\t\t\t\t\tchildStat.children = children || [];\n\n\t\t\t\t\t\t\t\tclb(null, childStat);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Otherwise return result\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tclb(null, childStat);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t}, (errors, result) => {\n\t\t\t\tcallback(result);\n\t\t\t});\n\t\t});\n\t}\n}"]}