{"version":3,"file":"vs/workbench/services/activity/common/activityService.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/workbench/services/activity/common/activityService.ts"],"names":[],"mappings":";;;;;;IAAA;;;oGAGgG;IAChG,YAAY,CAAC;IAQb;QAGC,mBAAY,YAAmC;YAC9C,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QAClC,CAAC;QAED,eAAe,CAAQ,kCAAc,GAArB;YACf,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;QAChC,CAAC;QACF,gBAAC;IAAD,CAAC,AAVD,IAUC;IAVY,iBAAS,YAUrB,CAAA;IAED;QAAiC,+BAAS;QAGzC,qBAAY,MAAc,EAAE,YAAmC;YAC9D,kBAAM,YAAY,CAAC,CAAC;YAEpB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACtB,CAAC;QAED,eAAe,CAAQ,oCAAc,GAArB;YACf,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACvC,CAAC;QACF,kBAAC;IAAD,CAAC,AAZD,CAAiC,SAAS,GAYzC;IAZY,mBAAW,cAYvB,CAAA;IAED;QAA+B,6BAAS;QAGvC,mBAAY,IAAY,EAAE,YAAmC;YAC5D,kBAAM,YAAY,CAAC,CAAC;YAEpB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QAClB,CAAC;QACF,gBAAC;IAAD,CAAC,AARD,CAA+B,SAAS,GAQvC;IARY,iBAAS,YAQrB,CAAA;IAED;QAA+B,6BAAS;QAEvC,mBAAY,YAAmC;YAC9C,kBAAM,YAAY,CAAC,CAAC;QACrB,CAAC;QACF,gBAAC;IAAD,CAAC,AALD,CAA+B,SAAS,GAKvC;IALY,iBAAS,YAKrB,CAAA;IAED;QAAmC,iCAAS;QAA5C;YAAmC,8BAAS;QAC5C,CAAC;QAAD,oBAAC;IAAD,CAAC,AADD,CAAmC,SAAS,GAC3C;IADY,qBAAa,gBACzB,CAAA;IAEU,wBAAgB,GAAG,+BAAe,CAAmB,iBAAiB,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {createDecorator, ServiceIdentifier} from 'vs/platform/instantiation/common/instantiation';\n\nexport interface IBadge {\n\tgetDescription(): string;\n}\n\nexport class BaseBadge implements IBadge {\n\tpublic descriptorFn: (args: any) => string;\n\n\tconstructor(descriptorFn: (args: any) => string) {\n\t\tthis.descriptorFn = descriptorFn;\n\t}\n\n\t/* protected */ public getDescription(): string {\n\t\treturn this.descriptorFn(null);\n\t}\n}\n\nexport class NumberBadge extends BaseBadge {\n\tpublic number: number;\n\n\tconstructor(number: number, descriptorFn: (args: any) => string) {\n\t\tsuper(descriptorFn);\n\n\t\tthis.number = number;\n\t}\n\n\t/* protected */ public getDescription(): string {\n\t\treturn this.descriptorFn(this.number);\n\t}\n}\n\nexport class TextBadge extends BaseBadge {\n\tpublic text: string;\n\n\tconstructor(text: string, descriptorFn: (args: any) => string) {\n\t\tsuper(descriptorFn);\n\n\t\tthis.text = text;\n\t}\n}\n\nexport class IconBadge extends BaseBadge {\n\n\tconstructor(descriptorFn: (args: any) => string) {\n\t\tsuper(descriptorFn);\n\t}\n}\n\nexport class ProgressBadge extends BaseBadge {\n}\n\nexport var IActivityService = createDecorator<IActivityService>('activityService');\n\nexport interface IActivityService {\n\tserviceId: ServiceIdentifier<any>;\n\n\t/**\n\t * Show activity in the activitybar for the given viewlet.\n\t */\n\tshowActivity(viewletId: string, badge: IBadge, clazz?: string): void;\n\n\t/**\n\t * Clears activity shown in the activitybar for the given viewlet.\n\t */\n\tclearActivity(viewletId: string): void;\n}"]}