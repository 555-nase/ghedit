{"version":3,"file":"vs/workbench/services/window/electron-browser/windowService.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/workbench/services/window/electron-browser/windowService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;IAEhG,YAAY,CAAC;IAQb,IAAM,QAAQ,GAAG,iBAAM,CAAC,gBAAgB,EAAE,CAAC,EAAE,CAAC;IAEnC,sBAAc,GAAG,+BAAe,CAAiB,eAAe,CAAC,CAAC;IAyB7E;QAOC;YANO,cAAS,GAAG,sBAAc,CAAC;YAOjC,IAAI,CAAC,YAAY,GAAG,IAAI,eAAO,EAAc,CAAC;YAC9C,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;YAEzB,IAAI,CAAC,iBAAiB,EAAE,CAAC;QAC1B,CAAC;QAEO,yCAAiB,GAAzB;YAAA,iBAIC;YAHA,sBAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,UAAC,KAAK,EAAE,CAAa;gBAC/C,KAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC3B,CAAC,CAAC,CAAC;QACJ,CAAC;QAED,sBAAW,sCAAW;iBAAtB;gBACC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC;YAChC,CAAC;;;WAAA;QAEM,mCAAW,GAAlB;YACC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;QACtB,CAAC;QAEM,iCAAS,GAAhB;YACC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC;QACjB,CAAC;QAEM,sCAAc,GAArB,UAAsB,GAAmB;YACxC,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QAChB,CAAC;QAEM,iCAAS,GAAhB,UAAiB,CAAa,EAAE,MAAe;YAC9C,sBAAG,CAAC,IAAI,CAAC,kBAAkB,EAAE,IAAI,CAAC,WAAW,EAAE,EAAE,MAAM,EAAE;gBACxD,OAAO,EAAE,CAAC,CAAC,OAAO;gBAClB,OAAO,EAAE,CAAC,CAAC,OAAO;aAClB,CAAC,CAAC;QACJ,CAAC;QACF,oBAAC;IAAD,CAAC,AA1CD,IA0CC;IA1CY,qBAAa,gBA0CzB,CAAA","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport {ElectronWindow} from 'vs/workbench/electron-browser/window';\nimport {createDecorator, ServiceIdentifier} from 'vs/platform/instantiation/common/instantiation';\nimport Event, {Emitter} from 'vs/base/common/event';\n\nimport {ipcRenderer as ipc, remote} from 'electron';\n\nconst windowId = remote.getCurrentWindow().id;\n\nexport var IWindowService = createDecorator<IWindowService>('windowService');\n\nexport interface IWindowServices {\n\twindowService?: IWindowService;\n}\n\nexport interface IBroadcast {\n\tchannel: string;\n\tpayload: any;\n}\n\nexport interface IWindowService {\n\tserviceId: ServiceIdentifier<any>;\n\n\tgetWindowId(): number;\n\n\tgetWindow(): ElectronWindow;\n\n\tregisterWindow(win: ElectronWindow): void;\n\n\tbroadcast(b: IBroadcast, target?: string): void;\n\n\tonBroadcast: Event<IBroadcast>;\n}\n\nexport class WindowService implements IWindowService {\n\tpublic serviceId = IWindowService;\n\n\tprivate win: ElectronWindow;\n\tprivate windowId: number;\n\tprivate _onBroadcast: Emitter<IBroadcast>;\n\n\tconstructor() {\n\t\tthis._onBroadcast = new Emitter<IBroadcast>();\n\t\tthis.windowId = windowId;\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tipc.on('vscode:broadcast', (event, b: IBroadcast) => {\n\t\t\tthis._onBroadcast.fire(b);\n\t\t});\n\t}\n\n\tpublic get onBroadcast(): Event<IBroadcast> {\n\t\treturn this._onBroadcast.event;\n\t}\n\n\tpublic getWindowId(): number {\n\t\treturn this.windowId;\n\t}\n\n\tpublic getWindow(): ElectronWindow {\n\t\treturn this.win;\n\t}\n\n\tpublic registerWindow(win: ElectronWindow): void {\n\t\tthis.win = win;\n\t}\n\n\tpublic broadcast(b: IBroadcast, target?: string): void {\n\t\tipc.send('vscode:broadcast', this.getWindowId(), target, {\n\t\t\tchannel: b.channel,\n\t\t\tpayload: b.payload\n\t\t});\n\t}\n}"]}