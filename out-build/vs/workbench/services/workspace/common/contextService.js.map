{"version":3,"file":"vs/workbench/services/workspace/common/contextService.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/workbench/services/workspace/common/contextService.ts"],"names":[],"mappings":";;;;;;IAAA;;;oGAGgG;IAChG,YAAY,CAAC;IASF,gCAAwB,GAAG,+BAAe,CAA2B,gBAAgB,CAAC,CAAC;IAgBlG;QAA6C,2CAA2B;QAGvE,iCACS,YAA2B,EACnC,SAAqB,EACrB,aAA8B,EAC9B,OAAiB;YAAjB,uBAAiB,GAAjB,YAAiB;YAEjB,kBAAM,SAAS,EAAE,aAAa,EAAE,OAAO,CAAC,CAAC;YALjC,iBAAY,GAAZ,YAAY,CAAe;YAH7B,cAAS,GAAG,gCAAwB,CAAC;QAS5C,CAAC;QAEM,+CAAa,GAApB,UAAqB,GAAW,EAAE,KAAU;YAC3C,IAAI,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;YACjC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;YAE1B,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,kBAAS,CAAC,yBAAyB,EAAE,IAAI,2BAAkB,CAAC,GAAG,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC,CAAC;QAC3G,CAAC;QACF,8BAAC;IAAD,CAAC,AAlBD,CAA6C,yDAA2B,GAkBvE;IAlBY,+BAAuB,0BAkBnC,CAAA","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {IOptions} from 'vs/workbench/common/options';\nimport {EventType, OptionsChangeEvent} from 'vs/workbench/common/events';\nimport {IEventService} from 'vs/platform/event/common/event';\nimport {createDecorator, ServiceIdentifier} from 'vs/platform/instantiation/common/instantiation';\nimport {IWorkspace, IConfiguration, IWorkspaceContextService as IBaseWorkspaceContextService} from 'vs/platform/workspace/common/workspace';\nimport {BaseWorkspaceContextService} from 'vs/platform/workspace/common/baseWorkspaceContextService';\n\nexport var IWorkspaceContextService = createDecorator<IWorkspaceContextService>('contextService');\n\nexport interface IWorkspaceContextService extends IBaseWorkspaceContextService {\n\tserviceId: ServiceIdentifier<any>;\n\n\t/**\n\t * Provides access to the options object the platform is running with.\n\t */\n\tgetOptions(): IOptions;\n\n\t/**\n\t * Update options in the running instance.\n\t */\n\tupdateOptions(key: string, value: any): void;\n}\n\nexport class WorkspaceContextService extends BaseWorkspaceContextService implements IWorkspaceContextService {\n\tpublic serviceId = IWorkspaceContextService;\n\n\tconstructor(\n\t\tprivate eventService: IEventService,\n\t\tworkspace: IWorkspace,\n\t\tconfiguration?: IConfiguration,\n\t\toptions: any = {}\n\t) {\n\t\tsuper(workspace, configuration, options);\n\t}\n\n\tpublic updateOptions(key: string, value: any): void {\n\t\tlet oldValue = this.options[key];\n\t\tthis.options[key] = value;\n\n\t\tthis.eventService.emit(EventType.WORKBENCH_OPTIONS_CHANGED, new OptionsChangeEvent(key, oldValue, value));\n\t}\n}"]}