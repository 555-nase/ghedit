{"version":3,"file":"untitledEditorService.js","sourceRoot":"","sources":["../../../../../../src/vs/workbench/services/untitled/common/untitledEditorService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport URI from 'vs/base/common/uri';\nimport {ServiceIdentifier, createDecorator} from 'vs/platform/instantiation/common/instantiation';\nimport {EventType} from 'vs/base/common/events';\nimport arrays = require('vs/base/common/arrays');\nimport {UntitledEditorInput} from 'vs/workbench/common/editor/untitledEditorInput';\nimport {IInstantiationService} from 'vs/platform/instantiation/common/instantiation';\n\nexport var IUntitledEditorService = createDecorator<IUntitledEditorService>('untitledEditorService');\n\nexport interface IUntitledEditorService {\n\n\tserviceId: ServiceIdentifier<any>;\n\n\t/**\n\t * Returns the untitled editor input matching the provided resource.\n\t */\n\tget(resource: URI): UntitledEditorInput;\n\n\t/**\n\t * Returns all untitled editor inputs.\n\t */\n\tgetAll(resources?: URI[]): UntitledEditorInput[];\n\n\t/**\n\t * Returns dirty untitled editors as resource URIs.\n\t */\n\tgetDirty(): URI[];\n\n\t/**\n\t * Returns true iff the provided resource is dirty.\n\t */\n\tisDirty(resource: URI): boolean;\n\n\t/**\n\t * Creates a new untitled input with the optional resource URI or returns an existing one\n\t * if the provided resource exists already as untitled input.\n\t *\n\t * It is valid to pass in a file resource. In that case the path will be used as identifier.\n\t * The use case is to be able to create a new file with a specific path with VSCode.\n\t */\n\tcreateOrGet(resource?: URI, modeId?: string): UntitledEditorInput;\n\n\t/**\n\t * A check to find out if a untitled resource has a file path associated or not.\n\t */\n\thasAssociatedFilePath(resource: URI): boolean;\n}\n\nexport class UntitledEditorService implements IUntitledEditorService {\n\tpublic serviceId = IUntitledEditorService;\n\n\tprivate static CACHE: { [resource: string]: UntitledEditorInput } = Object.create(null);\n\tprivate static KNOWN_ASSOCIATED_FILE_PATHS: { [resource: string]: boolean } = Object.create(null);\n\n\tprivate instantiationService: IInstantiationService;\n\n\tpublic setInstantiationService(service: IInstantiationService): void {\n\t\tthis.instantiationService = service;\n\t}\n\n\tpublic get(resource: URI): UntitledEditorInput {\n\t\treturn UntitledEditorService.CACHE[resource.toString()];\n\t}\n\n\tpublic getAll(resources?: URI[]): UntitledEditorInput[] {\n\t\tif (resources) {\n\t\t\treturn arrays.coalesce(resources.map((r) => this.get(r)));\n\t\t}\n\n\t\treturn Object.keys(UntitledEditorService.CACHE).map((key) => UntitledEditorService.CACHE[key]);\n\t}\n\n\tpublic isDirty(resource: URI): boolean {\n\t\tlet input = this.get(resource);\n\n\t\treturn input && input.isDirty();\n\t}\n\n\tpublic getDirty(): URI[] {\n\t\treturn Object.keys(UntitledEditorService.CACHE)\n\t\t\t.map((key) => UntitledEditorService.CACHE[key])\n\t\t\t.filter((i) => i.isDirty())\n\t\t\t.map((i) => i.getResource());\n\t}\n\n\tpublic createOrGet(resource?: URI, modeId?: string): UntitledEditorInput {\n\t\tlet hasAssociatedFilePath = false;\n\t\tif (resource) {\n\t\t\thasAssociatedFilePath = (resource.scheme === 'file');\n\t\t\tresource = this.resourceToUntitled(resource); // ensure we have the right scheme\n\n\t\t\tif (hasAssociatedFilePath) {\n\t\t\t\tUntitledEditorService.KNOWN_ASSOCIATED_FILE_PATHS[resource.toString()] = true; // remember for future lookups\n\t\t\t}\n\t\t}\n\n\t\t// Return existing instance if asked for it\n\t\tif (resource && UntitledEditorService.CACHE[resource.toString()]) {\n\t\t\treturn UntitledEditorService.CACHE[resource.toString()];\n\t\t}\n\n\t\t// Create new otherwise\n\t\treturn this.doCreate(resource, hasAssociatedFilePath, modeId);\n\t}\n\n\tprivate doCreate(resource?: URI, hasAssociatedFilePath?: boolean, modeId?: string): UntitledEditorInput {\n\t\tif (!resource) {\n\n\t\t\t// Create new taking a resource URI that is not already taken\n\t\t\tlet counter = Object.keys(UntitledEditorService.CACHE).length + 1;\n\t\t\tdo {\n\t\t\t\tresource = URI.create(UntitledEditorInput.SCHEMA, null, 'Untitled-' + counter);\n\t\t\t\tcounter++;\n\t\t\t} while (Object.keys(UntitledEditorService.CACHE).indexOf(resource.toString()) >= 0);\n\t\t}\n\n\t\tlet input = this.instantiationService.createInstance(UntitledEditorInput, resource, hasAssociatedFilePath, modeId);\n\n\t\t// Remove from cache on dispose\n\t\tinput.addOneTimeListener(EventType.DISPOSE, () => {\n\t\t\tdelete UntitledEditorService.CACHE[input.getResource().toString()];\n\t\t\tdelete UntitledEditorService.KNOWN_ASSOCIATED_FILE_PATHS[input.getResource().toString()];\n\t\t});\n\n\t\t// Add to cache\n\t\tUntitledEditorService.CACHE[resource.toString()] = input;\n\n\t\treturn input;\n\t}\n\n\tprivate resourceToUntitled(resource: URI): URI {\n\t\tif (resource.scheme === UntitledEditorInput.SCHEMA) {\n\t\t\treturn resource;\n\t\t}\n\n\t\treturn URI.create(UntitledEditorInput.SCHEMA, null, resource.fsPath);\n\t}\n\n\tpublic hasAssociatedFilePath(resource: URI): boolean {\n\t\treturn !!UntitledEditorService.KNOWN_ASSOCIATED_FILE_PATHS[resource.toString()];\n\t}\n}"]}