{"version":3,"file":"vs/workbench/test/node/api/testThreadService.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/workbench/test/node/api/testThreadService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport {NullThreadService} from 'vs/platform/test/common/nullThreadService';\nimport {SyncDescriptor0} from 'vs/platform/instantiation/common/descriptors';\nimport {IInstantiationService} from 'vs/platform/instantiation/common/instantiation';\nimport {TPromise} from 'vs/base/common/winjs.base';\n\nexport class TestThreadService extends NullThreadService {\n\n\tconstructor(instantiationService: IInstantiationService) {\n\t\tsuper();\n\t\tthis.setInstantiationService(instantiationService);\n\t}\n\n\tprivate _callCountValue: number = 0;\n\tprivate _idle: TPromise<any>;\n\tprivate _completeIdle: Function;\n\n\tprivate get _callCount(): number {\n\t\treturn this._callCountValue;\n\t}\n\n\tprivate set _callCount(value: number) {\n\t\tthis._callCountValue = value;\n\t\tif (this._callCountValue === 0) {\n\t\t\tif (this._completeIdle) {\n\t\t\t\tthis._completeIdle();\n\t\t\t}\n\t\t\tthis._idle = undefined;\n\t\t}\n\t}\n\n\tsync(): TPromise<any> {\n\t\treturn new TPromise<any>((c) => {\n\t\t\tsetTimeout(c, 0);\n\t\t}).then(() => {\n\t\t\tif (this._callCount === 0) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!this._idle) {\n\t\t\t\tthis._idle = new TPromise<any>((c, e) => {\n\t\t\t\t\tthis._completeIdle = c;\n\t\t\t\t}, function() {\n\t\t\t\t\t// no cancel\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn this._idle;\n\t\t});\n\t}\n\n\tprotected _registerAndInstantiateMainProcessActor<T>(id: string, descriptor: SyncDescriptor0<T>): T {\n\n\t\tlet _calls: {path: string; args: any[] }[] = [];\n\t\tlet _instance: any;\n\n\t\treturn this._getOrCreateProxyInstance({\n\n\t\t\tcallOnRemote: (proxyId: string, path: string, args: any[]): TPromise<any> => {\n\n\t\t\t\tthis._callCount++;\n\t\t\t\t_calls.push({path, args});\n\n\t\t\t\treturn new TPromise<any>((c) => {\n\t\t\t\t\tsetTimeout(c, 0);\n\t\t\t\t}).then(() => {\n\t\t\t\t\tif (!_instance) {\n\t\t\t\t\t\t_instance = this._instantiationService.createInstance(descriptor.ctor);\n\t\t\t\t\t}\n\t\t\t\t\tlet p: TPromise<any>;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tlet {path, args} = _calls.shift();\n\t\t\t\t\t\tlet result = (<Function>_instance[path]).apply(_instance, args);\n\t\t\t\t\t\tp = TPromise.is(result) ? result : TPromise.as(result);\n\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\tp = TPromise.wrapError(err);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn p.then(result => {\n\t\t\t\t\t\tthis._callCount--;\n\t\t\t\t\t\treturn result;\n\t\t\t\t\t}, err => {\n\t\t\t\t\t\tthis._callCount--;\n\t\t\t\t\t\treturn TPromise.wrapError(err);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\t\t}, id, descriptor);\n\t}\n\n\tprotected _registerAndInstantiateExtHostActor<T>(id: string, descriptor: SyncDescriptor0<T>): T {\n\t\treturn this._getOrCreateLocalInstance(id, descriptor);\n\t}\n}\n"]}