{"version":3,"file":"vs/workbench/test/browser/memento.test.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/workbench/test/browser/memento.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport * as assert from 'assert';\nimport {BaseWorkspaceContextService} from 'vs/platform/workspace/common/baseWorkspaceContextService';\nimport {StorageScope} from 'vs/platform/storage/common/storage';\nimport * as TestUtils from 'vs/workbench/test/browser/servicesTestUtils';\nimport {Memento, Scope} from 'vs/workbench/common/memento';\nimport {Storage, InMemoryLocalStorage} from 'vs/workbench/common/storage';\n\nsuite('Workbench Memento', () => {\n\tlet context;\n\tlet storage;\n\n\tsetup(() => {\n\t\tcontext = new BaseWorkspaceContextService(TestUtils.TestWorkspace, TestUtils.TestConfiguration, null);\n\t\tstorage = new Storage(context, new InMemoryLocalStorage());\n\t});\n\n\ttest('Loading and Saving Memento with Scopes', () => {\n\t\tlet myMemento = new Memento('memento.test');\n\n\t\t// Global\n\t\tlet memento = myMemento.getMemento(storage);\n\t\tmemento.foo = [1, 2, 3];\n\t\tlet globalMemento = myMemento.getMemento(storage, Scope.GLOBAL);\n\t\tassert.deepEqual(globalMemento, memento);\n\n\t\t// Workspace\n\t\tmemento = myMemento.getMemento(storage, Scope.WORKSPACE);\n\t\tassert(memento);\n\t\tmemento.foo = 'Hello World';\n\n\t\tmyMemento.saveMemento();\n\n\t\t// Global\n\t\tmemento = myMemento.getMemento(storage);\n\t\tassert.deepEqual(memento, { foo: [1, 2, 3] });\n\t\tglobalMemento = myMemento.getMemento(storage, Scope.GLOBAL);\n\t\tassert.deepEqual(globalMemento, memento);\n\n\t\t// Workspace\n\t\tmemento = myMemento.getMemento(storage, Scope.WORKSPACE);\n\t\tassert.deepEqual(memento, { foo: 'Hello World' });\n\n\t\t// Assert the Mementos are stored properly in storage\n\t\tassert.deepEqual(JSON.parse(storage.get('memento/memento.test')), { foo: [1, 2, 3] });\n\n\t\tassert.deepEqual(JSON.parse(storage.get('memento/memento.test', StorageScope.WORKSPACE)), { foo: 'Hello World' });\n\n\t\t// Delete Global\n\t\tmemento = myMemento.getMemento(storage, context);\n\t\tdelete memento.foo;\n\n\t\t// Delete Workspace\n\t\tmemento = myMemento.getMemento(storage, Scope.WORKSPACE);\n\t\tdelete memento.foo;\n\n\t\tmyMemento.saveMemento();\n\n\t\t// Global\n\t\tmemento = myMemento.getMemento(storage, context);\n\t\tassert.deepEqual(memento, {});\n\n\t\t// Workspace\n\t\tmemento = myMemento.getMemento(storage, Scope.WORKSPACE);\n\t\tassert.deepEqual(memento, {});\n\n\t\t// Assert the Mementos are also removed from storage\n\t\tassert.strictEqual(storage.get('memento/memento.test', Scope.GLOBAL, null), null);\n\n\t\tassert.strictEqual(storage.get('memento/memento.test', Scope.WORKSPACE, null), null);\n\t});\n\n\ttest('Save and Load', () => {\n\t\tlet myMemento = new Memento('memento.test');\n\n\t\t// Global\n\t\tlet memento = myMemento.getMemento(storage, context);\n\t\tmemento.foo = [1, 2, 3];\n\n\t\t// Workspace\n\t\tmemento = myMemento.getMemento(storage, Scope.WORKSPACE);\n\t\tassert(memento);\n\t\tmemento.foo = 'Hello World';\n\n\t\tmyMemento.saveMemento();\n\n\t\t// Global\n\t\tmemento = myMemento.getMemento(storage, context);\n\t\tassert.deepEqual(memento, { foo: [1, 2, 3] });\n\t\tlet globalMemento = myMemento.getMemento(storage, Scope.GLOBAL);\n\t\tassert.deepEqual(globalMemento, memento);\n\n\t\t// Workspace\n\t\tmemento = myMemento.getMemento(storage, Scope.WORKSPACE);\n\t\tassert.deepEqual(memento, { foo: 'Hello World' });\n\n\t\t// Global\n\t\tmemento = myMemento.getMemento(storage, context);\n\t\tmemento.foo = [4, 5, 6];\n\n\t\t// Workspace\n\t\tmemento = myMemento.getMemento(storage, Scope.WORKSPACE);\n\t\tassert(memento);\n\t\tmemento.foo = 'World Hello';\n\n\t\tmyMemento.saveMemento();\n\n\t\t// Global\n\t\tmemento = myMemento.getMemento(storage, context);\n\t\tassert.deepEqual(memento, { foo: [4, 5, 6] });\n\t\tglobalMemento = myMemento.getMemento(storage, Scope.GLOBAL);\n\t\tassert.deepEqual(globalMemento, memento);\n\n\t\t// Workspace\n\t\tmemento = myMemento.getMemento(storage, Scope.WORKSPACE);\n\t\tassert.deepEqual(memento, { foo: 'World Hello' });\n\n\t\t// Delete Global\n\t\tmemento = myMemento.getMemento(storage, context);\n\t\tdelete memento.foo;\n\n\t\t// Delete Workspace\n\t\tmemento = myMemento.getMemento(storage, Scope.WORKSPACE);\n\t\tdelete memento.foo;\n\n\t\tmyMemento.saveMemento();\n\n\t\t// Global\n\t\tmemento = myMemento.getMemento(storage, context);\n\t\tassert.deepEqual(memento, {});\n\n\t\t// Workspace\n\t\tmemento = myMemento.getMemento(storage, Scope.WORKSPACE);\n\t\tassert.deepEqual(memento, {});\n\t});\n\n\ttest('Save and Load - 2 Components with same id', () => {\n\t\tlet myMemento = new Memento('memento.test');\n\t\tlet myMemento2 = new Memento('memento.test');\n\n\t\t// Global\n\t\tlet memento = myMemento.getMemento(storage, context);\n\t\tmemento.foo = [1, 2, 3];\n\n\t\tmemento = myMemento2.getMemento(storage, context);\n\t\tmemento.bar = [1, 2, 3];\n\n\t\t// Workspace\n\t\tmemento = myMemento.getMemento(storage, Scope.WORKSPACE);\n\t\tassert(memento);\n\t\tmemento.foo = 'Hello World';\n\n\t\tmemento = myMemento2.getMemento(storage, Scope.WORKSPACE);\n\t\tassert(memento);\n\t\tmemento.bar = 'Hello World';\n\n\t\tmyMemento.saveMemento();\n\t\tmyMemento2.saveMemento();\n\n\t\t// Global\n\t\tmemento = myMemento.getMemento(storage, context);\n\t\tassert.deepEqual(memento, { foo: [1, 2, 3], bar: [1, 2, 3] });\n\t\tlet globalMemento = myMemento.getMemento(storage, Scope.GLOBAL);\n\t\tassert.deepEqual(globalMemento, memento);\n\n\t\tmemento = myMemento2.getMemento(storage, context);\n\t\tassert.deepEqual(memento, { foo: [1, 2, 3], bar: [1, 2, 3] });\n\t\tglobalMemento = myMemento2.getMemento(storage, Scope.GLOBAL);\n\t\tassert.deepEqual(globalMemento, memento);\n\n\t\t// Workspace\n\t\tmemento = myMemento.getMemento(storage, Scope.WORKSPACE);\n\t\tassert.deepEqual(memento, { foo: 'Hello World', bar: 'Hello World' });\n\n\t\tmemento = myMemento2.getMemento(storage, Scope.WORKSPACE);\n\t\tassert.deepEqual(memento, { foo: 'Hello World', bar: 'Hello World' });\n\t});\n});"]}