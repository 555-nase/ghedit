{"version":3,"file":"vs/workbench/test/browser/parts/editor/editorModel.test.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/workbench/test/browser/parts/editor/editorModel.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport * as assert from 'assert';\nimport {EditorModel} from 'vs/workbench/common/editor';\nimport {BaseTextEditorModel} from 'vs/workbench/common/editor/textEditorModel';\nimport {TextDiffEditorModel} from 'vs/workbench/common/editor/textDiffEditorModel';\nimport {DiffEditorInput} from 'vs/workbench/common/editor/diffEditorInput';\nimport {StringEditorInput} from 'vs/workbench/common/editor/stringEditorInput';\nimport * as InstantiationService from 'vs/platform/instantiation/common/instantiationService';\nimport {createMockModelService, createMockModeService} from 'vs/editor/test/common/servicesTestUtils';\n\nclass MyEditorModel extends EditorModel { }\nclass MyTextEditorModel extends BaseTextEditorModel { }\n\nsuite('Workbench - EditorModel', () => {\n\n\ttest('EditorModel', function (done) {\n\t\tlet m = new MyEditorModel();\n\t\tm.load().then(function (model) {\n\t\t\tassert(model === m);\n\t\t\tassert.strictEqual(m.isResolved(), true);\n\t\t}).done(() => done());\n\t});\n\n\ttest('BaseTextEditorModel', function (done) {\n\t\tlet modelService = createMockModelService();\n\t\tlet modeService = createMockModeService();\n\n\t\tlet m = new MyTextEditorModel(modelService, modeService);\n\t\tm.load().then(function (model: any) {\n\t\t\tassert(model === m);\n\t\t\treturn model.createTextEditorModel('foo', null, 'text/plain').then(function () {\n\t\t\t\tassert.strictEqual(m.isResolved(), true);\n\t\t\t});\n\t\t}).done(() => {\n\t\t\tm.dispose();\n\t\t\tdone();\n\t\t});\n\t});\n\n\ttest('TextDiffEditorModel', function (done) {\n\t\tlet inst = InstantiationService.createInstantiationService({\n\t\t\tmodeService: createMockModeService(),\n\t\t\tmodelService: createMockModelService(),\n\t\t});\n\t\tlet input = inst.createInstance(StringEditorInput, 'name', 'description', 'value', 'text/plain', false);\n\t\tlet otherInput = inst.createInstance(StringEditorInput, 'name2', 'description', 'value2', 'text/plain', false);\n\t\tlet diffInput = new DiffEditorInput('name', 'description', input, otherInput);\n\n\t\tdiffInput.resolve(true).then(function (model: any) {\n\t\t\tassert(model);\n\t\t\tassert(model instanceof TextDiffEditorModel);\n\n\t\t\tlet diffEditorModel = model.textDiffEditorModel;\n\t\t\tassert(diffEditorModel.original);\n\t\t\tassert(diffEditorModel.modified);\n\n\t\t\treturn diffInput.resolve(true).then(function (model: any) {\n\t\t\t\tassert(model.isResolved());\n\n\t\t\t\tassert(diffEditorModel !== model.textDiffEditorModel);\n\t\t\t\tdiffInput.dispose();\n\t\t\t\tassert(!model.textDiffEditorModel);\n\t\t\t});\n\t\t}).done(() => {\n\t\t\tdone();\n\t\t});\n\t});\n});"]}