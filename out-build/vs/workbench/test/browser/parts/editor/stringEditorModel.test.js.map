{"version":3,"file":"vs/workbench/test/browser/parts/editor/stringEditorModel.test.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/workbench/test/browser/parts/editor/stringEditorModel.test.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;IAEhG,YAAY,CAAC;IAOb,KAAK,CAAC,+BAA+B,EAAE;QAEtC,IAAI,CAAC,mBAAmB,EAAE,UAAU,IAAI;YACvC,IAAI,IAAI,GAAG,oBAAoB,CAAC,0BAA0B,CAAC;gBAC1D,WAAW,EAAE,yCAAqB,EAAE;gBACpC,YAAY,EAAE,0CAAsB,EAAE;aACtC,CAAC,CAAC;YACH,IAAI,CAAC,GAAG,IAAI,CAAC,cAAc,CAAC,qCAAiB,EAAE,OAAO,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;YACtE,CAAC,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,UAAU,KAAK;gBAC5B,MAAM,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC;gBAEpB,IAAI,eAAe,GAAG,CAAC,CAAC,eAAe,CAAC;gBACxC,MAAM,CAAC,WAAW,CAAC,eAAe,CAAC,QAAQ,EAAE,EAAE,OAAO,CAAC,CAAC;gBAExD,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,UAAU,EAAE,EAAE,IAAI,CAAC,CAAC;gBAEnC,CAAE,CAAC,KAAK,GAAG,WAAW,CAAC;gBAC7B,MAAM,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,UAAU,KAAK;oBACnC,MAAM,CAAC,eAAe,KAAK,CAAC,CAAC,eAAe,CAAC,CAAC;oBAC9C,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,QAAQ,EAAE,EAAE,WAAW,CAAC,CAAC;gBAC/C,CAAC,CAAC,CAAC;YACJ,CAAC,CAAC,CAAC,IAAI,CAAC;gBACP,CAAC,CAAC,OAAO,EAAE,CAAC;gBACZ,IAAI,EAAE,CAAC;YACR,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,wDAAwD,EAAE,UAAU,IAAI;YAC5E,IAAI,IAAI,GAAG,oBAAoB,CAAC,0BAA0B,CAAC;gBAC1D,WAAW,EAAE,yCAAqB,EAAE;gBACpC,YAAY,EAAE,0CAAsB,EAAE;aACtC,CAAC,CAAC;YACH,IAAI,CAAC,GAAG,IAAI,CAAC,cAAc,CAAC,qCAAiB,EAAE,OAAO,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;YACtE,CAAC,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,UAAU,KAAK;gBAC5B,MAAM,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC;gBAEpB,IAAI,eAAe,GAAG,CAAC,CAAC,eAAe,CAAC;gBACxC,MAAM,CAAC,WAAW,CAAC,eAAe,CAAC,QAAQ,EAAE,EAAE,OAAO,CAAC,CAAC;gBAExD,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;gBACrB,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,QAAQ,EAAE,EAAE,QAAQ,CAAC,CAAC;gBAC3C,MAAM,CAAC,WAAW,CAAC,eAAe,CAAC,QAAQ,EAAE,EAAE,QAAQ,CAAC,CAAC;gBAEzD,CAAC,CAAC,UAAU,EAAE,CAAC;gBACf,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC;gBACtB,MAAM,CAAC,CAAC,eAAe,CAAC,QAAQ,EAAE,CAAC,CAAC;gBAEpC,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;gBACd,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,QAAQ,EAAE,EAAE,GAAG,CAAC,CAAC;gBACtC,MAAM,CAAC,WAAW,CAAC,eAAe,CAAC,QAAQ,EAAE,EAAE,GAAG,CAAC,CAAC;gBAEpD,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;gBACd,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,QAAQ,EAAE,EAAE,IAAI,CAAC,CAAC;gBACvC,MAAM,CAAC,WAAW,CAAC,eAAe,CAAC,QAAQ,EAAE,EAAE,IAAI,CAAC,CAAC;gBAErD,CAAC,CAAC,QAAQ,CAAC,kBAAkB,CAAC,CAAC;gBAC/B,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBAEV,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,QAAQ,EAAE,EAAE,YAAY,CAAC,CAAC;gBAC/C,MAAM,CAAC,WAAW,CAAC,eAAe,CAAC,QAAQ,EAAE,EAAE,YAAY,CAAC,CAAC;YAC9D,CAAC,CAAC,CAAC,IAAI,CAAC;gBACP,CAAC,CAAC,OAAO,EAAE,CAAC;gBACZ,IAAI,EAAE,CAAC;YACR,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport * as assert from 'assert';\nimport {StringEditorModel} from 'vs/workbench/common/editor/stringEditorModel';\nimport * as InstantiationService from 'vs/platform/instantiation/common/instantiationService';\nimport {createMockModelService, createMockModeService} from 'vs/editor/test/common/servicesTestUtils';\n\nsuite('Workbench - StringEditorModel', () => {\n\n\ttest('StringEditorModel', function (done) {\n\t\tlet inst = InstantiationService.createInstantiationService({\n\t\t\tmodeService: createMockModeService(),\n\t\t\tmodelService: createMockModelService(),\n\t\t});\n\t\tlet m = inst.createInstance(StringEditorModel, 'value', 'mime', null);\n\t\tm.load().then(function (model) {\n\t\t\tassert(model === m);\n\n\t\t\tlet textEditorModel = m.textEditorModel;\n\t\t\tassert.strictEqual(textEditorModel.getValue(), 'value');\n\n\t\t\tassert.strictEqual(m.isResolved(), true);\n\n\t\t\t(<any>m).value = 'something';\n\t\t\treturn m.load().then(function (model) {\n\t\t\t\tassert(textEditorModel === m.textEditorModel);\n\t\t\t\tassert.strictEqual(m.getValue(), 'something');\n\t\t\t});\n\t\t}).done(() => {\n\t\t\tm.dispose();\n\t\t\tdone();\n\t\t});\n\t});\n\n\ttest('StringEditorModel - setValue, clearValue, append, trim', function (done) {\n\t\tlet inst = InstantiationService.createInstantiationService({\n\t\t\tmodeService: createMockModeService(),\n\t\t\tmodelService: createMockModelService(),\n\t\t});\n\t\tlet m = inst.createInstance(StringEditorModel, 'value', 'mime', null);\n\t\tm.load().then(function (model) {\n\t\t\tassert(model === m);\n\n\t\t\tlet textEditorModel = m.textEditorModel;\n\t\t\tassert.strictEqual(textEditorModel.getValue(), 'value');\n\n\t\t\tm.setValue('foobar');\n\t\t\tassert.strictEqual(m.getValue(), 'foobar');\n\t\t\tassert.strictEqual(textEditorModel.getValue(), 'foobar');\n\n\t\t\tm.clearValue();\n\t\t\tassert(!m.getValue());\n\t\t\tassert(!textEditorModel.getValue());\n\n\t\t\tm.append('1');\n\t\t\tassert.strictEqual(m.getValue(), '1');\n\t\t\tassert.strictEqual(textEditorModel.getValue(), '1');\n\n\t\t\tm.append('1');\n\t\t\tassert.strictEqual(m.getValue(), '11');\n\t\t\tassert.strictEqual(textEditorModel.getValue(), '11');\n\n\t\t\tm.setValue('line\\nline\\nline');\n\t\t\tm.trim(2);\n\n\t\t\tassert.strictEqual(m.getValue(), 'line\\nline');\n\t\t\tassert.strictEqual(textEditorModel.getValue(), 'line\\nline');\n\t\t}).done(() => {\n\t\t\tm.dispose();\n\t\t\tdone();\n\t\t});\n\t});\n});"]}