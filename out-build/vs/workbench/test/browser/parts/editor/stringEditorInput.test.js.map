{"version":3,"file":"vs/workbench/test/browser/parts/editor/stringEditorInput.test.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/workbench/test/browser/parts/editor/stringEditorInput.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport * as assert from 'assert';\nimport URI from 'vs/base/common/uri';\nimport {StringEditorInput} from 'vs/workbench/common/editor/stringEditorInput';\nimport {ResourceEditorInput} from 'vs/workbench/common/editor/resourceEditorInput';\nimport {ResourceEditorModel} from 'vs/workbench/common/editor/resourceEditorModel';\nimport {TestEditorService} from 'vs/workbench/test/browser/servicesTestUtils';\nimport * as InstantiationService from 'vs/platform/instantiation/common/instantiationService';\nimport {createMockModelService, createMockModeService} from 'vs/editor/test/common/servicesTestUtils';\n\nsuite('Workbench - StringEditorInput', () => {\n\n\ttest('StringEditorInput', function (done) {\n\t\tlet editorService = new TestEditorService(function () { });\n\t\tlet inst = InstantiationService.createInstantiationService({\n\t\t\tmodeService: createMockModeService(),\n\t\t\tmodelService: createMockModelService()\n\t\t});\n\n\t\tlet input = inst.createInstance(StringEditorInput, 'name', 'description', 'value', 'mime', false);\n\t\tlet otherInput = inst.createInstance(StringEditorInput, 'name', 'description', 'othervalue', 'mime', false);\n\t\tlet otherInputSame = inst.createInstance(StringEditorInput, 'name', 'description', 'value', 'mime', false);\n\n\t\tlet inputSingleton = inst.createInstance(StringEditorInput, 'name', 'description', 'value', 'mime', true);\n\t\tlet otherInputSingleton = inst.createInstance(StringEditorInput, 'name', 'description', 'othervalue', 'mime', true);\n\t\tassert(inputSingleton.matches(otherInputSingleton));\n\t\t(<any>otherInputSingleton).singleton = false;\n\t\tassert(!inputSingleton.matches(otherInputSingleton));\n\n\t\tassert(input.matches(input));\n\t\tassert(input.matches(otherInputSame));\n\t\tassert(!input.matches(otherInput));\n\t\tassert(!input.matches(null));\n\t\tassert(input.getName());\n\n\t\tinput = inst.createInstance(StringEditorInput, 'name', 'description', 'value', 'mime', false);\n\n\t\tinput = inst.createInstance(StringEditorInput, 'name', 'description', 'value', 'mime', false);\n\t\teditorService.resolveEditorModel(input, true).then(function (resolved) {\n\t\t\tlet resolvedModelA = resolved;\n\t\t\treturn editorService.resolveEditorModel(input, true).then(function (resolved) {\n\t\t\t\tassert(resolvedModelA === resolved); // assert: Resolved Model cached per instance\n\n\t\t\t\tlet otherInput = inst.createInstance(StringEditorInput, 'name', 'description', 'value', 'mime', false);\n\t\t\t\treturn editorService.resolveEditorModel(otherInput, true).then(function (resolved) {\n\t\t\t\t\tassert(resolvedModelA !== resolved); // NOT assert: Different instance, different model\n\n\t\t\t\t\tinput.dispose();\n\n\t\t\t\t\treturn editorService.resolveEditorModel(input, true).then(function (resolved) {\n\t\t\t\t\t\tassert(resolvedModelA !== resolved); // Different instance, because input got disposed\n\n\t\t\t\t\t\tlet model = (<any>resolved).textEditorModel;\n\t\t\t\t\t\treturn editorService.resolveEditorModel(input, true).then(function (againResolved) {\n\t\t\t\t\t\t\tassert(model === (<any>againResolved).textEditorModel); // Models should not differ because string input is constant\n\n\t\t\t\t\t\t\tinput.dispose();\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t}).done(() => done());\n\t});\n\n\ttest('StringEditorInput - setValue, clearValue, append', function () {\n\t\tlet inst = InstantiationService.createInstantiationService({\n\t\t\tmodeService: createMockModeService(),\n\t\t\tmodelService: createMockModelService()\n\t\t});\n\n\t\tlet input = inst.createInstance(StringEditorInput, 'name', 'description', 'value', 'mime', false);\n\n\t\tassert.strictEqual(input.getValue(), 'value');\n\t\tinput.setValue('foo');\n\t\tassert.strictEqual(input.getValue(), 'foo');\n\t\tinput.clearValue();\n\t\tassert(!input.getValue());\n\t\tinput.append('1');\n\t\tassert.strictEqual(input.getValue(), '1');\n\t\tinput.append('2');\n\t\tassert.strictEqual(input.getValue(), '12');\n\t});\n\n\ttest('Input.matches() - StringEditorInput', function () {\n\t\tlet inst = InstantiationService.createInstantiationService({});\n\n\t\tlet stringEditorInput = inst.createInstance(StringEditorInput, 'name', 'description', 'value', 'mime', false);\n\t\tlet promiseEditorInput = inst.createInstance(ResourceEditorInput, 'name', 'description', URI.create('inMemory', null, 'thePath'));\n\n\t\tlet stringEditorInput2 = inst.createInstance(StringEditorInput, 'name', 'description', 'value', 'mime', false);\n\t\tlet promiseEditorInput2 = inst.createInstance(ResourceEditorInput, 'name', 'description', URI.create('inMemory', null, 'thePath'));\n\n\t\tassert.strictEqual(stringEditorInput.matches(null), false);\n\t\tassert.strictEqual(promiseEditorInput.matches(null), false);\n\n\t\tassert.strictEqual(promiseEditorInput.matches(promiseEditorInput), true);\n\t\tassert.strictEqual(stringEditorInput.matches(stringEditorInput), true);\n\n\t\tassert.strictEqual(promiseEditorInput.matches(promiseEditorInput2), true);\n\t\tassert.strictEqual(stringEditorInput.matches(stringEditorInput2), true);\n\t});\n\n\ttest('ResourceEditorInput', function (done) {\n\t\tlet modelService = createMockModelService();\n\t\tlet modeService = createMockModeService();\n\t\tlet inst = InstantiationService.createInstantiationService({\n\t\t\tmodeService: modeService,\n\t\t\tmodelService: modelService\n\t\t});\n\n\t\tlet resource = URI.create('inMemory', null, 'thePath');\n\t\tmodelService.createModel('function test() {}', modeService.getOrCreateMode('text'), resource);\n\t\tlet input: ResourceEditorInput = inst.createInstance(ResourceEditorInput, 'The Name', 'The Description', resource);\n\n\t\tinput.resolve().then((model: ResourceEditorModel) => {\n\t\t\tassert.ok(model);\n\t\t\tassert.equal(model.getValue(), 'function test() {}');\n\n\t\t\tdone();\n\t\t});\n\t});\n});"]}