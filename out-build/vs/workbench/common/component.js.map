{"version":3,"file":"vs/workbench/common/component.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/workbench/common/component.ts"],"names":[],"mappings":";;;;;;IAAA;;;oGAGgG;IAChG,YAAY,CAAC;IAqDb;QAAwC,sCAAY;QAKnD,4BAAY,EAAU;YACrB,iBAAO,CAAC;YAER,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;YACpB,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;YACb,IAAI,CAAC,gBAAgB,GAAG,IAAI,iBAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAC9C,CAAC;QAED,sBAAW,wCAAQ;iBAAnB;gBACC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;YACvB,CAAC;;;WAAA;QAEM,kCAAK,GAAZ;YACC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC;QAChB,CAAC;QAEM,uCAAU,GAAjB,UAAkB,cAA+B,EAAE,KAA2B;YAA3B,qBAA2B,GAA3B,QAAe,eAAK,CAAC,MAAM;YAC7E,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,cAAc,EAAE,KAAK,CAAC,CAAC;QAChE,CAAC;QAEM,wCAAW,GAAlB;YACC,IAAI,CAAC,gBAAgB,CAAC,WAAW,EAAE,CAAC;QACrC,CAAC;QAEM,qCAAQ,GAAf;YAEC,eAAe;YACf,IAAI,CAAC,WAAW,EAAE,CAAC;QACpB,CAAC;QAEM,oCAAO,GAAd;YACC,OAAO,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC;gBAC9B,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,EAAE,CAAC;YACxB,CAAC;YAED,gBAAK,CAAC,OAAO,WAAE,CAAC;QACjB,CAAC;QACF,yBAAC;IAAD,CAAC,AA1CD,CAAwC,2BAAY,GA0CnD;IA1CY,0BAAkB,qBA0C9B,CAAA","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {EventEmitter, IEventEmitter} from 'vs/base/common/eventEmitter';\nimport {IDisposable} from 'vs/base/common/lifecycle';\nimport {Scope, Memento} from 'vs/workbench/common/memento';\nimport {IStorageService} from 'vs/platform/storage/common/storage';\n\n/**\n * Base class of any core/ui component in the workbench. Examples include services, extensions, parts, viewlets and quick open.\n * Provides some convinience methods to participate in the workbench lifecycle (dispose, shutdown) and\n * loading and saving settings through memento.\n */\nexport interface IWorkbenchComponent extends IDisposable, IEventEmitter {\n\n\t/**\n\t* The unique identifier of this component.\n\t*/\n\tgetId(): string;\n\n\t/**\n\t* Returns a JSON Object that represents the data of this memento. The optional\n\t* parameter scope allows to specify the scope of the memento to load. If not\n\t* provided, the scope will be global, Scope.WORKSPACE can be used to\n\t* scope the memento to the workspace.\n\t*\n\t* Mementos are shared across components with the same id. This means that multiple components\n\t* with the same id will store data into the same data structure.\n\t*/\n\tgetMemento(storageService: IStorageService, scope?: Scope): any;\n\n\t/**\n\t* Saves all data of the mementos that have been loaded to the local storage. This includes\n\t* global and workspace scope.\n\t*\n\t* Mementos are shared across components with the same id. This means that multiple components\n\t* with the same id will store data into the same data structure.\n\t*/\n\tsaveMemento(): void;\n\n\t/**\n\t* Called when the browser containing the container is closed.\n\t*\n\t* Use this function to store settings that you want to restore next time. Should not be used to free resources\n\t* because dispose() is being called for this purpose and shutdown() has a chance to be vetoed by the user.\n\t*/\n\tshutdown(): void;\n\n\t/**\n\t* Called when the UI component is being removed from the container. Free up resources from here.\n\t*/\n\tdispose(): void;\n}\n\nexport class WorkbenchComponent extends EventEmitter implements IWorkbenchComponent {\n\tprivate _toUnbind: { (): void; }[];\n\tprivate id: string;\n\tprivate componentMemento: Memento;\n\n\tconstructor(id: string) {\n\t\tsuper();\n\n\t\tthis._toUnbind = [];\n\t\tthis.id = id;\n\t\tthis.componentMemento = new Memento(this.id);\n\t}\n\n\tpublic get toUnbind() {\n\t\treturn this._toUnbind;\n\t}\n\n\tpublic getId(): string {\n\t\treturn this.id;\n\t}\n\n\tpublic getMemento(storageService: IStorageService, scope: Scope = Scope.GLOBAL): any {\n\t\treturn this.componentMemento.getMemento(storageService, scope);\n\t}\n\n\tpublic saveMemento(): void {\n\t\tthis.componentMemento.saveMemento();\n\t}\n\n\tpublic shutdown(): void {\n\n\t\t// Save Memento\n\t\tthis.saveMemento();\n\t}\n\n\tpublic dispose(): void {\n\t\twhile (this._toUnbind.length) {\n\t\t\tthis._toUnbind.pop()();\n\t\t}\n\n\t\tsuper.dispose();\n\t}\n}"]}