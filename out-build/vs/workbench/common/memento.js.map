{"version":3,"file":"vs/workbench/common/memento.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/workbench/common/memento.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport types = require('vs/base/common/types');\nimport {IStorageService, StorageScope} from 'vs/platform/storage/common/storage';\n\n/**\n * Supported memento scopes.\n */\nexport enum Scope {\n\n\t/**\n\t * The memento will be scoped to all workspaces of this domain.\n\t */\n\tGLOBAL,\n\n\t/**\n\t * The memento will be scoped to the current workspace.\n\t */\n\tWORKSPACE\n}\n\n/**\n * A memento provides access to a datastructure that is persisted and restored as part of the workbench lifecycle.\n */\nexport class Memento {\n\n\t// Mementos are static to ensure that for a given component with an id only ever one memento gets loaded\n\tprivate static globalMementos: { [id: string]: ScopedMemento } = {};\n\tprivate static workspaceMementos: { [id: string]: ScopedMemento } = {};\n\n\tprivate static COMMON_PREFIX = 'memento/';\n\n\tprivate id: string;\n\n\tconstructor(id: string) {\n\t\tthis.id = Memento.COMMON_PREFIX + id.toLowerCase();\n\t}\n\n\t/**\n\t * Returns a JSON Object that represents the data of this memento. The optional\n\t * parameter scope allows to specify the scope of the memento to load. If not\n\t * provided, the scope will be global, Memento.Scope.WORKSPACE can be used to\n\t * scope the memento to the workspace.\n\t */\n\tpublic getMemento(storageService: IStorageService, scope: Scope = Scope.GLOBAL): any {\n\n\t\t// Scope by Workspace\n\t\tif (scope === Scope.WORKSPACE) {\n\t\t\tlet workspaceMemento = Memento.workspaceMementos[this.id];\n\t\t\tif (!workspaceMemento) {\n\t\t\t\tworkspaceMemento = new ScopedMemento(this.id, scope, storageService);\n\t\t\t\tMemento.workspaceMementos[this.id] = workspaceMemento;\n\t\t\t}\n\n\t\t\treturn workspaceMemento.getMemento();\n\t\t}\n\n\t\t// Use global scope\n\t\tlet globalMemento = Memento.globalMementos[this.id];\n\t\tif (!globalMemento) {\n\t\t\tglobalMemento = new ScopedMemento(this.id, scope, storageService);\n\t\t\tMemento.globalMementos[this.id] = globalMemento;\n\t\t}\n\n\t\treturn globalMemento.getMemento();\n\t}\n\n\t/**\n\t * Saves all data of the mementos that have been loaded to the local storage. This includes\n\t * global and workspace scope.\n\t */\n\tpublic saveMemento(): void {\n\n\t\t// Global\n\t\tif (Memento.globalMementos[this.id]) {\n\t\t\tMemento.globalMementos[this.id].save();\n\t\t}\n\n\t\t// Workspace\n\t\tif (Memento.workspaceMementos[this.id]) {\n\t\t\tMemento.workspaceMementos[this.id].save();\n\t\t}\n\t}\n}\n\nclass ScopedMemento {\n\tprivate id: string;\n\tprivate mementoObj: any;\n\tprivate scope: Scope;\n\n\tconstructor(id: string, scope: Scope, private storageService: IStorageService) {\n\t\tthis.id = id;\n\t\tthis.scope = scope;\n\t\tthis.mementoObj = this.loadMemento();\n\t}\n\n\tpublic getMemento(): any {\n\t\treturn this.mementoObj;\n\t}\n\n\tprivate loadMemento(): any {\n\t\tlet storageScope = this.scope === Scope.GLOBAL ? StorageScope.GLOBAL : StorageScope.WORKSPACE;\n\t\tlet memento = this.storageService.get(this.id, storageScope);\n\t\tif (memento) {\n\t\t\treturn JSON.parse(memento);\n\t\t}\n\n\t\treturn {};\n\t}\n\n\tpublic save(): void {\n\t\tlet storageScope = this.scope === Scope.GLOBAL ? StorageScope.GLOBAL : StorageScope.WORKSPACE;\n\n\t\tif (!types.isEmptyObject(this.mementoObj)) {\n\t\t\tthis.storageService.store(this.id, JSON.stringify(this.mementoObj), storageScope);\n\t\t} else {\n\t\t\tthis.storageService.remove(this.id, storageScope);\n\t\t}\n\t}\n}"]}