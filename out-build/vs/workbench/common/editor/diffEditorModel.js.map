{"version":3,"file":"vs/workbench/common/editor/diffEditorModel.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/workbench/common/editor/diffEditorModel.ts"],"names":[],"mappings":";;;;;;IAAA;;;oGAGgG;IAChG,YAAY,CAAC;IAKb;;;OAGG;IACH;QAAqC,mCAAW;QAI/C,yBAAY,aAA0B,EAAE,aAA0B;YACjE,iBAAO,CAAC;YAER,IAAI,CAAC,cAAc,GAAG,aAAa,CAAC;YACpC,IAAI,CAAC,cAAc,GAAG,aAAa,CAAC;QACrC,CAAC;QAED,sBAAW,0CAAa;iBAAxB;gBACC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC;YAC5B,CAAC;;;WAAA;QAED,sBAAW,0CAAa;iBAAxB;gBACC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC;YAC5B,CAAC;;;WAAA;QAEM,8BAAI,GAAX;YAAA,iBAOC;YANA,MAAM,CAAC,qBAAQ,CAAC,IAAI,CAAc;gBACjC,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE;gBAC1B,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE;aAC1B,CAAC,CAAC,IAAI,CAAC;gBACP,MAAM,CAAC,KAAI,CAAC;YACb,CAAC,CAAC,CAAC;QACJ,CAAC;QAEM,oCAAU,GAAjB;YACC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,UAAU,EAAE,IAAI,IAAI,CAAC,cAAc,CAAC,UAAU,EAAE,CAAC;QAC7E,CAAC;QAEM,iCAAO,GAAd;YAEC,gGAAgG;YAChG,6FAA6F;YAC7F,2FAA2F;YAE3F,gBAAK,CAAC,OAAO,WAAE,CAAC;QACjB,CAAC;QACF,sBAAC;IAAD,CAAC,AAxCD,CAAqC,oBAAW,GAwC/C;IAxCY,uBAAe,kBAwC3B,CAAA","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport {EditorModel} from 'vs/workbench/common/editor';\n\n/**\n * The base editor model for the diff editor. It is made up of two editor models, the original version\n * and the modified version.\n */\nexport class DiffEditorModel extends EditorModel {\n\tprivate _originalModel: EditorModel;\n\tprivate _modifiedModel: EditorModel;\n\n\tconstructor(originalModel: EditorModel, modifiedModel: EditorModel) {\n\t\tsuper();\n\n\t\tthis._originalModel = originalModel;\n\t\tthis._modifiedModel = modifiedModel;\n\t}\n\n\tpublic get originalModel(): EditorModel {\n\t\treturn this._originalModel;\n\t}\n\n\tpublic get modifiedModel(): EditorModel {\n\t\treturn this._modifiedModel;\n\t}\n\n\tpublic load(): TPromise<EditorModel> {\n\t\treturn TPromise.join<EditorModel>([\n\t\t\tthis._originalModel.load(),\n\t\t\tthis._modifiedModel.load()\n\t\t]).then(() => {\n\t\t\treturn this;\n\t\t});\n\t}\n\n\tpublic isResolved(): boolean {\n\t\treturn this._originalModel.isResolved() && this._modifiedModel.isResolved();\n\t}\n\n\tpublic dispose(): void {\n\n\t\t// Do not propagate the dispose() call to the two models inside. We never created the two models\n\t\t// (original and modified) so we can not dispose them without sideeffects. Rather rely on the\n\t\t// models getting disposed when their related inputs get disposed from the diffEditorInput.\n\n\t\tsuper.dispose();\n\t}\n}"]}