{"version":3,"file":"vs/workbench/common/editor/untitledEditorModel.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/workbench/common/editor/untitledEditorModel.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport {EditorModel, IEncodingSupport} from 'vs/workbench/common/editor';\nimport {StringEditorModel} from 'vs/workbench/common/editor/stringEditorModel';\nimport URI from 'vs/base/common/uri';\nimport {IModelContentChangedEvent, EventType, EndOfLinePreference} from 'vs/editor/common/editorCommon';\nimport {EventType as WorkbenchEventType, UntitledEditorEvent, ResourceEvent} from 'vs/workbench/common/events';\nimport {IFilesConfiguration} from 'vs/platform/files/common/files';\nimport {IConfigurationService, IConfigurationServiceEvent, ConfigurationServiceEventTypes} from 'vs/platform/configuration/common/configuration';\nimport {IEventService} from 'vs/platform/event/common/event';\nimport {IModeService} from 'vs/editor/common/services/modeService';\nimport {IModelService} from 'vs/editor/common/services/modelService';\n\nexport class UntitledEditorModel extends StringEditorModel implements IEncodingSupport {\n\tprivate textModelChangeListener: () => void;\n\tprivate configurationChangeListenerUnbind: () => void;\n\n\tprivate dirty: boolean;\n\tprivate configuredEncoding: string;\n\tprivate preferredEncoding: string;\n\n\tconstructor(\n\t\tvalue: string,\n\t\tmodeId: string,\n\t\tresource: URI,\n\t\thasAssociatedFilePath: boolean,\n\t\t@IModeService modeService: IModeService,\n\t\t@IModelService modelService: IModelService,\n\t\t@IEventService private eventService: IEventService,\n\t\t@IConfigurationService private configurationService: IConfigurationService\n\t) {\n\t\tsuper(value, modeId, resource, modeService, modelService);\n\n\t\tthis.dirty = hasAssociatedFilePath; // untitled associated to file path are dirty right away\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\n\t\t// Config Changes\n\t\tthis.configurationChangeListenerUnbind = this.configurationService.addListener(ConfigurationServiceEventTypes.UPDATED, (e: IConfigurationServiceEvent) => this.onConfigurationChange(e.config));\n\t}\n\n\tprivate onConfigurationChange(configuration: IFilesConfiguration): void {\n\t\tthis.configuredEncoding = configuration && configuration.files && configuration.files.encoding;\n\t}\n\n\tpublic getValue(): string {\n\t\tif (this.textEditorModel) {\n\t\t\treturn this.textEditorModel.getValue(EndOfLinePreference.TextDefined, true /* Preserve BOM */);\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tpublic getModeId(): string {\n\t\tif (this.textEditorModel) {\n\t\t\treturn this.textEditorModel.getModeId();\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tpublic getEncoding(): string {\n\t\treturn this.preferredEncoding || this.configuredEncoding;\n\t}\n\n\tpublic setEncoding(encoding: string): void {\n\t\tlet oldEncoding = this.getEncoding();\n\t\tthis.preferredEncoding = encoding;\n\n\t\t// Emit if it changed\n\t\tif (oldEncoding !== this.preferredEncoding) {\n\t\t\tthis.eventService.emit(WorkbenchEventType.RESOURCE_ENCODING_CHANGED, new ResourceEvent(this.resource));\n\t\t}\n\t}\n\n\tpublic isDirty(): boolean {\n\t\treturn this.dirty;\n\t}\n\n\tpublic load(): TPromise<EditorModel> {\n\t\treturn super.load().then((model) => {\n\t\t\tconst configuration = this.configurationService.getConfiguration<IFilesConfiguration>();\n\n\t\t\t// Encoding\n\t\t\tthis.configuredEncoding = configuration && configuration.files && configuration.files.encoding;\n\n\t\t\t// Listen to content changes\n\t\t\tthis.textModelChangeListener = this.textEditorModel.addListener(EventType.ModelContentChanged, (e: IModelContentChangedEvent) => this.onModelContentChanged(e));\n\n\t\t\t// Emit initial dirty event if we are\n\t\t\tif (this.dirty) {\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tthis.eventService.emit(WorkbenchEventType.UNTITLED_FILE_DIRTY, new UntitledEditorEvent(this.resource));\n\t\t\t\t}, 0 /* prevent race condition between creating model and emitting dirty event */);\n\t\t\t}\n\n\t\t\treturn model;\n\t\t});\n\t}\n\n\tprivate onModelContentChanged(e: IModelContentChangedEvent): void {\n\t\tif (!this.dirty) {\n\t\t\tthis.dirty = true;\n\t\t\tthis.eventService.emit(WorkbenchEventType.UNTITLED_FILE_DIRTY, new UntitledEditorEvent(this.resource));\n\t\t}\n\t}\n\n\tpublic dispose(): void {\n\t\tsuper.dispose();\n\n\t\tif (this.textModelChangeListener) {\n\t\t\tthis.textModelChangeListener();\n\t\t\tthis.textModelChangeListener = null;\n\t\t}\n\n\t\tif (this.configurationChangeListenerUnbind) {\n\t\t\tthis.configurationChangeListenerUnbind();\n\t\t\tthis.configurationChangeListenerUnbind = null;\n\t\t}\n\n\t\tthis.eventService.emit(WorkbenchEventType.UNTITLED_FILE_DELETED, new UntitledEditorEvent(this.resource));\n\t}\n}"]}