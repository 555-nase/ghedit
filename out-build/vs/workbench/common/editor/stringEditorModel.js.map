{"version":3,"file":"stringEditorModel.js","sourceRoot":"","sources":["../../../../../src/vs/workbench/common/editor/stringEditorModel.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport {BaseTextEditorModel} from 'vs/workbench/common/editor/textEditorModel';\nimport {EditorModel} from 'vs/workbench/common/editor';\nimport URI from 'vs/base/common/uri';\nimport {Position} from 'vs/editor/common/core/position';\nimport {Range} from 'vs/editor/common/core/range';\nimport {IModeService} from 'vs/editor/common/services/modeService';\nimport {IModelService} from 'vs/editor/common/services/modelService';\nimport {EditOperation} from 'vs/editor/common/core/editOperation';\n\n/**\n * An editor model whith an in-memory, readonly content that is not backed by any particular resource.\n */\nexport class StringEditorModel extends BaseTextEditorModel {\n\tprotected value: string;\n\tprotected mime: string;\n\tprotected resource: URI;\n\n\tconstructor(\n\t\tvalue: string,\n\t\tmime: string,\n\t\tresource: URI,\n\t\t@IModeService modeService: IModeService,\n\t\t@IModelService modelService: IModelService\n\t) {\n\t\tsuper(modelService, modeService);\n\n\t\tthis.value = value;\n\t\tthis.mime = mime;\n\t\tthis.resource = resource;\n\t}\n\n\t/**\n\t * The value of this string editor model.\n\t */\n\tpublic getValue(): string {\n\t\treturn this.value;\n\t}\n\n\t/**\n\t * Sets the value of this string editor model.\n\t */\n\tpublic setValue(value: string): void {\n\t\tthis.value = value;\n\t\tif (this.textEditorModel) {\n\t\t\tthis.textEditorModel.setValue(value);\n\t\t}\n\t}\n\n\t/**\n\t * Appends value to this string editor model.\n\t */\n\tpublic append(value: string): void {\n\t\tthis.value += value;\n\t\tif (this.textEditorModel) {\n\t\t\tlet model = this.textEditorModel;\n\t\t\tlet lastLine = model.getLineCount();\n\t\t\tlet lastLineMaxColumn = model.getLineMaxColumn(lastLine);\n\n\t\t\tmodel.applyEdits([EditOperation.insert(new Position(lastLine, lastLineMaxColumn), value)]);\n\t\t}\n\t}\n\n\t/**\n\t * Clears the value of this string editor model\n\t */\n\tpublic clearValue(): void {\n\t\tthis.value = '';\n\t\tif (this.textEditorModel) {\n\t\t\tlet model = this.textEditorModel;\n\t\t\tlet lastLine = model.getLineCount();\n\t\t\tmodel.applyEdits([EditOperation.delete(new Range(1, 1, lastLine, model.getLineMaxColumn(lastLine)))]);\n\t\t}\n\t}\n\n\t/**\n\t * Removes all lines from the top if the line number exceeds the given line count. Returns the new value if lines got trimmed.\n\t */\n\tpublic trim(linecount: number): string {\n\t\tif (this.textEditorModel) {\n\t\t\tlet model = this.textEditorModel;\n\t\t\tlet lastLine = model.getLineCount();\n\t\t\tif (lastLine > linecount) {\n\t\t\t\tmodel.applyEdits([EditOperation.delete(new Range(1, 1, lastLine - linecount + 1, 1))]);\n\n\t\t\t\tlet newValue = model.getValue();\n\t\t\t\tthis.value = newValue;\n\n\t\t\t\treturn this.value;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tpublic getMime(): string {\n\t\treturn this.mime;\n\t}\n\n\tpublic load(): TPromise<EditorModel> {\n\n\t\t// Create text editor model if not yet done\n\t\tif (!this.textEditorModel) {\n\t\t\treturn this.createTextEditorModel(this.value, this.resource, this.mime);\n\t\t}\n\n\t\t// Otherwise update\n\t\telse {\n\t\t\tthis.updateTextEditorModel(this.value);\n\t\t}\n\n\t\treturn TPromise.as<EditorModel>(this);\n\t}\n}"]}