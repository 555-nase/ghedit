{"version":3,"file":"vs/workbench/common/editor/iframeEditorInput.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/workbench/common/editor/iframeEditorInput.ts"],"names":[],"mappings":";;;;;;IAAA;;;oGAGgG;IAChG,YAAY,CAAC;IAMb;;OAEG;IACH;QAAgD,qCAAW;QAS1D,2BAAY,QAAa,EAAE,IAAY,EAAE,WAAmB;YAC3D,iBAAO,CAAC;YAER,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;YACzB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;YACjB,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAChC,CAAC;QAEM,iCAAK,GAAZ;YACC,MAAM,CAAC,iBAAiB,CAAC,EAAE,CAAC;QAC7B,CAAC;QAEM,uCAAW,GAAlB;YACC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;QACtB,CAAC;QAEM,mCAAO,GAAd;YACC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;QAClB,CAAC;QAEM,0CAAc,GAArB;YACC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC;QACzB,CAAC;QAEM,mCAAO,GAAd,UAAe,OAAiB;YAAhC,iBAwBC;YAvBA,IAAI,YAAmC,CAAC;YAExC,mBAAmB;YACnB,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;gBAClC,YAAY,GAAG,qBAAQ,CAAC,EAAE,CAAc,IAAI,CAAC,WAAW,CAAC,CAAC;YAC3D,CAAC;YAGD,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,IAAI,OAAO,CAAC,CAAC,CAAC;gBACtC,YAAY,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC;YACxC,CAAC;YAGD,IAAI,CAAC,CAAC;gBACL,IAAI,KAAK,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;gBAC/B,YAAY,GAAG,KAAK,CAAC,IAAI,EAAE,CAAC;YAC7B,CAAC;YAED,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,UAAC,aAA0B;gBACnD,KAAI,CAAC,WAAW,GAAG,aAAa,CAAC;gBAEjC,MAAM,CAAC,KAAI,CAAC,WAAW,CAAC;YACzB,CAAC,CAAC,CAAC;QACJ,CAAC;QAYM,mCAAO,GAAd,UAAe,UAAe;YAC7B,EAAE,CAAC,CAAC,gBAAK,CAAC,OAAO,YAAC,UAAU,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC;gBACxC,MAAM,CAAC,IAAI,CAAC;YACb,CAAC;YAED,EAAE,CAAC,CAAC,UAAU,YAAY,iBAAiB,CAAC,CAAC,CAAC;gBAC7C,IAAI,sBAAsB,GAAsB,UAAU,CAAC;gBAE3D,kCAAkC;gBAClC,MAAM,CAAC,sBAAsB,CAAC,QAAQ,CAAC,QAAQ,EAAE,KAAK,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC;YAChF,CAAC;YAED,MAAM,CAAC,KAAK,CAAC;QACd,CAAC;QAEM,mCAAO,GAAd;YACC,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;gBACtB,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC;gBAC3B,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;YACzB,CAAC;YAED,gBAAK,CAAC,OAAO,WAAE,CAAC;QACjB,CAAC;QAzFa,oBAAE,GAAW,qCAAqC,CAAC;QA0FlE,wBAAC;IAAD,CAAC,AA5FD,CAAgD,oBAAW,GA4F1D;IA5FqB,yBAAiB,oBA4FtC,CAAA","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport {EditorModel, EditorInput} from 'vs/workbench/common/editor';\nimport URI from 'vs/base/common/uri';\n\n/**\n * An editor input to use with the IFrameEditor.\n */\nexport abstract class IFrameEditorInput extends EditorInput {\n\n\tpublic static ID: string = 'workbench.editors.iFrameEditorInput';\n\n\tprivate resource: URI;\n\tprivate name: string;\n\tprivate description: string;\n\tprivate cachedModel: EditorModel;\n\n\tconstructor(resource: URI, name: string, description: string) {\n\t\tsuper();\n\n\t\tthis.resource = resource;\n\t\tthis.name = name;\n\t\tthis.description = description;\n\t}\n\n\tpublic getId(): string {\n\t\treturn IFrameEditorInput.ID;\n\t}\n\n\tpublic getResource(): URI {\n\t\treturn this.resource;\n\t}\n\n\tpublic getName(): string {\n\t\treturn this.name;\n\t}\n\n\tpublic getDescription(): string {\n\t\treturn this.description;\n\t}\n\n\tpublic resolve(refresh?: boolean): TPromise<EditorModel> {\n\t\tlet modelPromise: TPromise<EditorModel>;\n\n\t\t// Use Cached Model\n\t\tif (this.cachedModel && !refresh) {\n\t\t\tmodelPromise = TPromise.as<EditorModel>(this.cachedModel);\n\t\t}\n\n\t\t// Refresh Cached Model\n\t\telse if (this.cachedModel && refresh) {\n\t\t\tmodelPromise = this.cachedModel.load();\n\t\t}\n\n\t\t// Create Model and Load\n\t\telse {\n\t\t\tlet model = this.createModel();\n\t\t\tmodelPromise = model.load();\n\t\t}\n\n\t\treturn modelPromise.then((resolvedModel: EditorModel) => {\n\t\t\tthis.cachedModel = resolvedModel;\n\n\t\t\treturn this.cachedModel;\n\t\t});\n\t}\n\n\t/**\n\t * Subclasses override this method to provide their own implementation.\n\t */\n\tprotected abstract createModel(): EditorModel;\n\n\t/**\n\t * Subclasses override this method to create a new input from a given resource.\n\t */\n\tpublic abstract createNew(resource: URI): IFrameEditorInput;\n\n\tpublic matches(otherInput: any): boolean {\n\t\tif (super.matches(otherInput) === true) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (otherInput instanceof IFrameEditorInput) {\n\t\t\tlet otherIFrameEditorInput = <IFrameEditorInput>otherInput;\n\n\t\t\t// Otherwise compare by properties\n\t\t\treturn otherIFrameEditorInput.resource.toString() === this.resource.toString();\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tpublic dispose(): void {\n\t\tif (this.cachedModel) {\n\t\t\tthis.cachedModel.dispose();\n\t\t\tthis.cachedModel = null;\n\t\t}\n\n\t\tsuper.dispose();\n\t}\n}"]}