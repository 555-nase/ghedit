{"version":3,"file":"vs/workbench/common/editor/resourceEditorInput.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/workbench/common/editor/resourceEditorInput.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport {sequence} from 'vs/base/common/async';\nimport {EditorModel, EditorInput} from 'vs/workbench/common/editor';\nimport {ResourceEditorModel} from 'vs/workbench/common/editor/resourceEditorModel';\nimport {IModel} from 'vs/editor/common/editorCommon';\nimport URI from 'vs/base/common/uri';\nimport {EventType} from 'vs/base/common/events';\nimport {IInstantiationService} from 'vs/platform/instantiation/common/instantiation';\nimport {IModelService} from 'vs/editor/common/services/modelService';\nimport {IDisposable} from 'vs/base/common/lifecycle';\n\n/**\n *\n */\nexport interface IResourceEditorContentProvider {\n\tprovideTextContent(resource: URI): TPromise<IModel>;\n}\n\n/**\n * A read-only text editor input whos contents are made of the provided resource that points to an existing\n * code editor model.\n */\nexport class ResourceEditorInput extends EditorInput {\n\n\t// --- registry logic\n\t// todo@joh,ben this should maybe be a service that is in charge of loading/resolving a uri from a scheme\n\n\tprivate static loadingModels: { [uri: string]: TPromise<IModel> } = Object.create(null);\n\tprivate static registry: { [scheme: string]: IResourceEditorContentProvider[] } = Object.create(null);\n\n\tpublic static registerResourceContentProvider(scheme: string, provider: IResourceEditorContentProvider): IDisposable {\n\t\tlet array = ResourceEditorInput.registry[scheme];\n\t\tif (!array) {\n\t\t\tarray = [provider];\n\t\t\tResourceEditorInput.registry[scheme] = array;\n\t\t} else {\n\t\t\tarray.unshift(provider);\n\t\t}\n\t\treturn {\n\t\t\tdispose() {\n\t\t\t\tlet array = ResourceEditorInput.registry[scheme];\n\t\t\t\tlet idx = array.indexOf(provider);\n\t\t\t\tif (idx >= 0) {\n\t\t\t\t\tarray.splice(idx, 1);\n\t\t\t\t\tif (array.length === 0) {\n\t\t\t\t\t\tdelete ResourceEditorInput.registry[scheme];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n\n\tprivate static getOrCreateModel(modelService: IModelService, resource: URI): TPromise<IModel> {\n\t\tconst model = modelService.getModel(resource);\n\t\tif (model) {\n\t\t\treturn TPromise.as(model);\n\t\t}\n\n\t\tlet loadingModel = ResourceEditorInput.loadingModels[resource.toString()];\n\t\tif (!loadingModel) {\n\n\t\t\t// make sure we have a provider this scheme\n\t\t\t// the resource uses\n\t\t\tconst array = ResourceEditorInput.registry[resource.scheme];\n\t\t\tif (!array) {\n\t\t\t\treturn TPromise.wrapError(`No model with uri '${resource}' nor a resolver for the scheme '${resource.scheme}'.`);\n\t\t\t}\n\n\t\t\t// load the model-content from the provider and cache\n\t\t\t// the loading such that we don't create the same model\n\t\t\t// twice\n\t\t\tResourceEditorInput.loadingModels[resource.toString()] = loadingModel = new TPromise<IModel>((resolve, reject) => {\n\n\t\t\t\tlet result: IModel;\n\t\t\t\tlet lastError: any;\n\n\t\t\t\tsequence(array.map(provider => {\n\t\t\t\t\treturn () => {\n\t\t\t\t\t\tif (!result) {\n\t\t\t\t\t\t\treturn provider.provideTextContent(resource).then(value => {\n\t\t\t\t\t\t\t\tresult = value;\n\t\t\t\t\t\t\t}, err => {\n\t\t\t\t\t\t\t\tlastError = err;\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t})).then(() => {\n\t\t\t\t\tif (!result && lastError) {\n\t\t\t\t\t\treject(lastError);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresolve(result);\n\t\t\t\t\t}\n\t\t\t\t}, reject);\n\n\t\t\t}, function() {\n\t\t\t\t// no cancellation when caching promises\n\t\t\t});\n\n\t\t\t// remove the cached promise 'cos the model is now\n\t\t\t// known to the model service (see above)\n\t\t\tloadingModel.then(() => delete ResourceEditorInput.loadingModels[resource.toString()], () => delete ResourceEditorInput.loadingModels[resource.toString()]);\n\t\t}\n\n\t\treturn loadingModel;\n\t}\n\n\n\tpublic static ID: string = 'workbench.editors.resourceEditorInput';\n\n\tprotected cachedModel: ResourceEditorModel;\n\tprotected resource: URI;\n\n\tprivate name: string;\n\tprivate description: string;\n\n\tconstructor(\n\t\tname: string,\n\t\tdescription: string,\n\t\tresource: URI,\n\t\t@IModelService protected modelService: IModelService,\n\t\t@IInstantiationService protected instantiationService: IInstantiationService\n\t) {\n\t\tsuper();\n\n\t\tthis.name = name;\n\t\tthis.description = description;\n\t\tthis.resource = resource;\n\t}\n\n\tpublic getId(): string {\n\t\treturn ResourceEditorInput.ID;\n\t}\n\n\tpublic getName(): string {\n\t\treturn this.name;\n\t}\n\n\tpublic getDescription(): string {\n\t\treturn this.description;\n\t}\n\n\tpublic resolve(refresh?: boolean): TPromise<EditorModel> {\n\n\t\t// Use Cached Model\n\t\tif (this.cachedModel) {\n\t\t\treturn TPromise.as<EditorModel>(this.cachedModel);\n\t\t}\n\n\t\t// Otherwise Create Model and handle dispose event\n\t\treturn ResourceEditorInput.getOrCreateModel(this.modelService, this.resource).then(() => {\n\t\t\tlet model = this.instantiationService.createInstance(ResourceEditorModel, this.resource);\n\t\t\tconst unbind = model.addListener(EventType.DISPOSE, () => {\n\t\t\t\tthis.cachedModel = null; // make sure we do not dispose model again\n\t\t\t\tunbind();\n\t\t\t\tthis.dispose();\n\t\t\t});\n\n\t\t\t// Load it\n\t\t\treturn model.load().then((resolvedModel: ResourceEditorModel) => {\n\t\t\t\tthis.cachedModel = resolvedModel;\n\n\t\t\t\treturn this.cachedModel;\n\t\t\t});\n\t\t});\n\t}\n\n\tpublic matches(otherInput: any): boolean {\n\t\tif (super.matches(otherInput) === true) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (otherInput instanceof ResourceEditorInput) {\n\t\t\tlet otherResourceEditorInput = <ResourceEditorInput>otherInput;\n\n\t\t\t// Compare by properties\n\t\t\treturn otherResourceEditorInput.resource.toString() === this.resource.toString();\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tpublic dispose(): void {\n\t\tif (this.cachedModel) {\n\t\t\tthis.cachedModel.dispose();\n\t\t\tthis.cachedModel = null;\n\t\t}\n\n\t\tsuper.dispose();\n\t}\n}\n"]}