{"version":3,"file":"vs/workbench/common/editor/stringEditorInput.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/workbench/common/editor/stringEditorInput.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport {MIME_TEXT} from 'vs/base/common/mime';\nimport {EditorModel, EditorInput} from 'vs/workbench/common/editor';\nimport {StringEditorModel} from 'vs/workbench/common/editor/stringEditorModel';\nimport URI from 'vs/base/common/uri';\nimport {IInstantiationService} from 'vs/platform/instantiation/common/instantiation';\n\n/**\n * A read-only text editor input whos contents are made of the provided value and mime type.\n */\nexport class StringEditorInput extends EditorInput {\n\n\tpublic static ID = 'workbench.editors.stringEditorInput';\n\n\tprotected cachedModel: StringEditorModel;\n\n\tprivate name: string;\n\tprivate description: string;\n\tprotected value: string;\n\tprotected mime: string;\n\tprivate singleton: boolean;\n\n\tconstructor(\n\t\tname: string,\n\t\tdescription: string,\n\t\tvalue: string,\n\t\tmime: string,\n\t\tsingleton: boolean,\n\t\t@IInstantiationService private instantiationService: IInstantiationService\n\t) {\n\t\tsuper();\n\n\t\tthis.name = name;\n\t\tthis.description = description;\n\t\tthis.value = value;\n\t\tthis.mime = mime || MIME_TEXT;\n\t\tthis.singleton = singleton;\n\t}\n\n\tprotected getResource(): URI {\n\t\t// Subclasses can implement to associate a resource with the input\n\t\treturn null;\n\t}\n\n\tpublic getId(): string {\n\t\treturn StringEditorInput.ID;\n\t}\n\n\tpublic getName(): string {\n\t\treturn this.name;\n\t}\n\n\tpublic getDescription(): string {\n\t\treturn this.description;\n\t}\n\n\tpublic getValue(): string {\n\t\treturn this.value;\n\t}\n\n\tpublic getMime(): string {\n\t\treturn this.mime;\n\t}\n\n\t/**\n\t * Sets the textual value of this input and will also update the underlying model if this input is resolved.\n\t */\n\tpublic setValue(value: string): void {\n\t\tthis.value = value;\n\t\tif (this.cachedModel) {\n\t\t\tthis.cachedModel.setValue(value);\n\t\t}\n\t}\n\n\t/**\n\t * Clears the textual value of this input and will also update the underlying model if this input is resolved.\n\t */\n\tpublic clearValue(): void {\n\t\tthis.value = '';\n\t\tif (this.cachedModel) {\n\t\t\tthis.cachedModel.clearValue();\n\t\t}\n\t}\n\n\t/**\n\t * Appends to the textual value of this input and will also update the underlying model if this input is resolved.\n\t */\n\tpublic append(value: string): void {\n\t\tthis.value += value;\n\t\tif (this.cachedModel) {\n\t\t\tthis.cachedModel.append(value);\n\t\t}\n\t}\n\n\t/**\n\t * Removes all lines from the top if the line number exceeds the given line count. Returns the new value if lines got trimmed.\n\t *\n\t * Note: This method is a no-op if the input has not yet been resolved.\n\t */\n\tpublic trim(linecount: number): string {\n\t\tif (this.cachedModel) {\n\t\t\tlet newValue = this.cachedModel.trim(linecount);\n\t\t\tif (newValue !== null) {\n\t\t\t\tthis.value = newValue;\n\n\t\t\t\treturn this.value;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tpublic resolve(refresh?: boolean): TPromise<EditorModel> {\n\n\t\t// Use Cached Model\n\t\tif (this.cachedModel) {\n\t\t\treturn TPromise.as<EditorModel>(this.cachedModel);\n\t\t}\n\n\t\t//Otherwise Create Model and Load\n\t\tlet model = this.instantiationService.createInstance(StringEditorModel, this.value, this.mime, this.getResource());\n\t\treturn model.load().then((resolvedModel: StringEditorModel) => {\n\t\t\tthis.cachedModel = resolvedModel;\n\n\t\t\treturn this.cachedModel;\n\t\t});\n\t}\n\n\tpublic matches(otherInput: any): boolean {\n\t\tif (super.matches(otherInput) === true) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (otherInput instanceof StringEditorInput) {\n\t\t\tlet otherStringEditorInput = <StringEditorInput>otherInput;\n\n\t\t\t// If both inputs are singletons, check on the mime for equalness\n\t\t\tif (otherStringEditorInput.singleton && this.singleton && otherStringEditorInput.mime === this.mime) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t// Otherwise compare by properties\n\t\t\treturn otherStringEditorInput.value === this.value &&\n\t\t\t\totherStringEditorInput.mime === this.mime &&\n\t\t\t\totherStringEditorInput.description === this.description &&\n\t\t\t\totherStringEditorInput.name === this.name;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tpublic dispose(): void {\n\t\tif (this.cachedModel) {\n\t\t\tthis.cachedModel.dispose();\n\t\t\tthis.cachedModel = null;\n\t\t}\n\n\t\tsuper.dispose();\n\t}\n}"]}