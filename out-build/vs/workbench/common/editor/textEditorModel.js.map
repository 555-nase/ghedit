{"version":3,"file":"vs/workbench/common/editor/textEditorModel.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/workbench/common/editor/textEditorModel.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport {EndOfLinePreference, IModel, EventType} from 'vs/editor/common/editorCommon';\nimport {IMode} from 'vs/editor/common/modes';\nimport {EditorModel} from 'vs/workbench/common/editor';\nimport URI from 'vs/base/common/uri';\nimport {ITextEditorModel} from 'vs/platform/editor/common/editor';\nimport {IModeService} from 'vs/editor/common/services/modeService';\nimport {IModelService} from 'vs/editor/common/services/modelService';\nimport {RawText} from 'vs/editor/common/model/textModel';\n\n/**\n * The base text editor model leverages the monaco code editor model. This class is only intended to be subclassed and not instantiated.\n */\nexport abstract class BaseTextEditorModel extends EditorModel implements ITextEditorModel {\n\tprivate textEditorModelHandle: URI;\n\tprivate createdEditorModel: boolean;\n\n\tconstructor(\n\t\t@IModelService private modelService: IModelService,\n\t\t@IModeService private modeService: IModeService,\n\t\ttextEditorModelHandle?: URI\n\t) {\n\t\tsuper();\n\n\t\tthis.textEditorModelHandle = textEditorModelHandle;\n\n\t\tif (textEditorModelHandle) {\n\n\t\t\t// We need the resource to point to an existing model\n\t\t\tlet model = modelService.getModel(textEditorModelHandle);\n\t\t\tif (!model) {\n\t\t\t\tthrow new Error(`Document with resource ${textEditorModelHandle.toString()} does not exist`);\n\t\t\t}\n\n\t\t\t// Since we did not create the model, we need to listen to it disposing\n\t\t\t// and properly trigger our dispose function so that events get emitted\n\t\t\tconst unbind = model.addListener(EventType.ModelDispose, () => {\n\t\t\t\tthis.textEditorModelHandle = null; // make sure we do not dispose code editor model again\n\t\t\t\tunbind();\n\t\t\t\tthis.dispose();\n\t\t\t});\n\t\t}\n\t}\n\n\tpublic get textEditorModel(): IModel {\n\t\treturn this.textEditorModelHandle ? this.modelService.getModel(this.textEditorModelHandle) : null;\n\t}\n\n\t/**\n\t * Creates the text editor model with the provided value, mime (can be comma separated for multiple values) and optional resource URL.\n\t */\n\tprotected createTextEditorModel(value: string, resource?: URI, mime?: string): TPromise<EditorModel> {\n\t\tlet firstLineText = this.getFirstLineText(value);\n\n\t\t// To avoid flickering, give the mode at most 50ms to load. If the mode doesn't load in 50ms, proceed creating the model with a mode promise\n\t\treturn TPromise.any<any>([TPromise.timeout(50), this.getOrCreateMode(this.modeService, mime, firstLineText)]).then(() => {\n\t\t\tlet model = this.modelService.createModel(value, this.getOrCreateMode(this.modeService, mime, firstLineText), resource);\n\t\t\tthis.createdEditorModel = true;\n\n\t\t\tthis.textEditorModelHandle = model.getAssociatedResource();\n\n\t\t\treturn this;\n\t\t});\n\t}\n\n\tprivate getFirstLineText(value: string): string {\n\t\tlet firstLineText = value.substr(0, 100);\n\n\t\tlet crIndex = firstLineText.indexOf('\\r');\n\t\tif (crIndex < 0) {\n\t\t\tcrIndex = firstLineText.length;\n\t\t}\n\n\t\tlet lfIndex = firstLineText.indexOf('\\n');\n\t\tif (lfIndex < 0) {\n\t\t\tlfIndex = firstLineText.length;\n\t\t}\n\n\t\tfirstLineText = firstLineText.substr(0, Math.min(crIndex, lfIndex));\n\n\t\treturn firstLineText;\n\t}\n\n\t/**\n\t * Gets the mode for the given identifier. Subclasses can override to provide their own implementation of this lookup.\n\t *\n\t * @param firstLineText optional first line of the text buffer to set the mode on. This can be used to guess a mode from content.\n\t */\n\tprotected getOrCreateMode(modeService: IModeService, mime: string, firstLineText?: string): TPromise<IMode> {\n\t\treturn modeService.getOrCreateMode(mime);\n\t}\n\n\t/**\n\t * Updates the text editor model with the provided value. If the value is the same as the model has, this is a no-op.\n\t */\n\tprotected updateTextEditorModel(newValue: string): void {\n\t\tif (!this.textEditorModel) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet rawText = RawText.fromStringWithModelOptions(newValue, this.textEditorModel);\n\n\t\t// Return early if the text is already set in that form\n\t\tif (this.textEditorModel.equals(rawText)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Otherwise update model\n\t\tthis.textEditorModel.setValueFromRawText(rawText);\n\t}\n\n\t/**\n\t * Returns the textual value of this editor model or null if it has not yet been created.\n\t */\n\tpublic getValue(): string {\n\t\tlet model = this.textEditorModel;\n\t\tif (model) {\n\t\t\treturn model.getValue(EndOfLinePreference.TextDefined, true /* Preserve BOM */);\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tpublic dispose(): void {\n\t\tif (this.textEditorModelHandle && this.createdEditorModel) {\n\t\t\tthis.modelService.destroyModel(this.textEditorModelHandle);\n\t\t}\n\n\t\tthis.textEditorModelHandle = null;\n\t\tthis.createdEditorModel = false;\n\n\t\tsuper.dispose();\n\t}\n\n\tpublic isResolved(): boolean {\n\t\treturn !!this.textEditorModelHandle;\n\t}\n}"]}