{"version":3,"file":"vs/workbench/common/editor/untitledEditorInput.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/workbench/common/editor/untitledEditorInput.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport URI from 'vs/base/common/uri';\nimport {isUnspecific, guessMimeTypes, MIME_TEXT, suggestFilename} from 'vs/base/common/mime';\nimport labels = require('vs/base/common/labels');\nimport paths = require('vs/base/common/paths');\nimport {UntitledEditorInput as AbstractUntitledEditorInput, EditorModel, EncodingMode, IInputStatus} from 'vs/workbench/common/editor';\nimport {UntitledEditorModel} from 'vs/workbench/common/editor/untitledEditorModel';\nimport {IInstantiationService} from 'vs/platform/instantiation/common/instantiation';\nimport {ILifecycleService} from 'vs/platform/lifecycle/common/lifecycle';\nimport {IWorkspaceContextService} from 'vs/platform/workspace/common/workspace';\nimport {IModeService} from 'vs/editor/common/services/modeService';\n\n/**\n * An editor input to be used for untitled text buffers.\n */\nexport class UntitledEditorInput extends AbstractUntitledEditorInput {\n\n\tpublic static ID: string = 'workbench.editors.untitledEditorInput';\n\tpublic static SCHEMA: string = 'untitled';\n\n\tprivate resource: URI;\n\tprivate hasAssociatedFilePath: boolean;\n\tprivate modeId: string;\n\tprivate cachedModel: UntitledEditorModel;\n\n\tconstructor(\n\t\tresource: URI,\n\t\thasAssociatedFilePath: boolean,\n\t\tmodeId: string,\n\t\t@IInstantiationService private instantiationService: IInstantiationService,\n\t\t@ILifecycleService private lifecycleService: ILifecycleService,\n\t\t@IWorkspaceContextService private contextService: IWorkspaceContextService,\n\t\t@IModeService private modeService: IModeService\n\t) {\n\t\tsuper();\n\n\t\tthis.resource = resource;\n\t\tthis.hasAssociatedFilePath = hasAssociatedFilePath;\n\t\tthis.modeId = modeId;\n\t}\n\n\tpublic getId(): string {\n\t\treturn UntitledEditorInput.ID;\n\t}\n\n\tpublic getResource(): URI {\n\t\treturn this.resource;\n\t}\n\n\tpublic getName(): string {\n\t\treturn this.hasAssociatedFilePath ? paths.basename(this.resource.fsPath) : this.resource.fsPath;\n\t}\n\n\tpublic getDescription(): string {\n\t\treturn this.hasAssociatedFilePath ? labels.getPathLabel(paths.dirname(this.resource.fsPath), this.contextService) : null;\n\t}\n\n\tpublic isDirty(): boolean {\n\t\treturn this.cachedModel && this.cachedModel.isDirty();\n\t}\n\n\tpublic getStatus(): IInputStatus {\n\t\tlet isDirty = this.isDirty();\n\t\tif (isDirty) {\n\t\t\treturn { state: 'dirty', decoration: '\\u25cf' };\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tpublic suggestFileName(): string {\n\t\tif (!this.hasAssociatedFilePath) {\n\t\t\tlet mime = this.getMime();\n\t\t\tif (mime && mime !== MIME_TEXT /* do not suggest when the mime type is simple plain text */) {\n\t\t\t\treturn suggestFilename(mime, this.getName());\n\t\t\t}\n\t\t}\n\n\t\treturn this.getName();\n\t}\n\n\tpublic getMime(): string {\n\t\tif (this.cachedModel) {\n\t\t\treturn this.modeService.getMimeForMode(this.cachedModel.getModeId());\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tpublic getEncoding(): string {\n\t\tif (this.cachedModel) {\n\t\t\treturn this.cachedModel.getEncoding();\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tpublic setEncoding(encoding: string, mode: EncodingMode /* ignored, we only have Encode */): void {\n\t\tif (this.cachedModel) {\n\t\t\tthis.cachedModel.setEncoding(encoding);\n\t\t}\n\t}\n\n\tpublic resolve(refresh?: boolean): TPromise<EditorModel> {\n\n\t\t// Use Cached Model\n\t\tif (this.cachedModel) {\n\t\t\treturn TPromise.as(this.cachedModel);\n\t\t}\n\n\t\t// Otherwise Create Model and load\n\t\tlet model = this.createModel();\n\t\treturn model.load().then((resolvedModel: UntitledEditorModel) => {\n\t\t\tthis.cachedModel = resolvedModel;\n\n\t\t\treturn this.cachedModel;\n\t\t});\n\t}\n\n\tprivate createModel(): UntitledEditorModel {\n\t\tlet content = '';\n\t\tlet mime = this.modeId;\n\t\tif (!mime && this.hasAssociatedFilePath) {\n\t\t\tlet mimeFromPath = guessMimeTypes(this.resource.fsPath)[0];\n\t\t\tif (!isUnspecific(mimeFromPath)) {\n\t\t\t\tmime = mimeFromPath; // take most specific mime type if file path is associated and mime is specific\n\t\t\t}\n\t\t}\n\t\treturn this.instantiationService.createInstance(UntitledEditorModel, content, mime || MIME_TEXT,\n\t\t\tthis.resource, this.hasAssociatedFilePath);\n\t}\n\n\tpublic matches(otherInput: any): boolean {\n\t\tif (super.matches(otherInput) === true) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (otherInput instanceof UntitledEditorInput) {\n\t\t\tlet otherUntitledEditorInput = <UntitledEditorInput>otherInput;\n\n\t\t\t// Otherwise compare by properties\n\t\t\treturn otherUntitledEditorInput.resource.toString() === this.resource.toString();\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tpublic dispose(): void {\n\t\tsuper.dispose();\n\n\t\tif (this.cachedModel) {\n\t\t\tthis.cachedModel.dispose();\n\t\t\tthis.cachedModel = null;\n\t\t}\n\t}\n}"]}