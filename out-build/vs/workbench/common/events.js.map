{"version":3,"file":"vs/workbench/common/events.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/workbench/common/events.ts"],"names":[],"mappings":";;;;;;IAAA;;;oGAGgG;IAChG,YAAY,CAAC;IASb;;OAEG;IACH;QAAA;QAqIA,CAAC;QAnIA;;;;;WAKG;QACI,uBAAa,GAAG,cAAc,CAAC;QAEtC;;WAEG;QACI,uBAAa,GAAG,cAAc,CAAC;QAEtC;;WAEG;QACI,8BAAoB,GAAG,oBAAoB,CAAC;QAEnD;;;;;;WAMG;QACI,+BAAqB,GAAG,qBAAqB,CAAC;QAErD;;WAEG;QACI,iCAAuB,GAAG,uBAAuB,CAAC;QAEzD;;;;;;WAMG;QACI,8BAAoB,GAAG,oBAAoB,CAAC;QAEnD;;WAEG;QACI,oCAA0B,GAAG,yBAAyB,CAAC;QAE9D;;WAEG;QACI,gCAAsB,GAAG,qBAAqB,CAAC;QAEtD;;WAEG;QACI,iCAAuB,GAAG,uBAAuB,CAAC;QAEzD;;WAEG;QACI,uCAA6B,GAAG,4BAA4B,CAAC;QAEpE;;WAEG;QACI,kCAAwB,GAAG,uBAAuB,CAAC;QAE1D;;WAEG;QACI,qCAA2B,GAAG,0BAA0B,CAAC;QAEhE;;WAEG;QACI,6CAAmC,GAAG,iCAAiC,CAAC;QAE/E;;WAEG;QACI,2CAAiC,GAAG,0BAA0B,CAAC;QAEtE;;WAEG;QACI,2BAAiB,GAAG,kBAAkB,CAAC;QAE9C;;WAEG;QACI,0BAAgB,GAAG,iBAAiB,CAAC;QAE5C;;WAEG;QACI,0BAAgB,GAAG,iBAAiB,CAAC;QAE5C;;WAEG;QACI,2BAAiB,GAAG,kBAAkB,CAAC;QAE9C;;WAEG;QACI,6BAAmB,GAAG,oBAAoB,CAAC;QAElD;;WAEG;QACI,4BAAkB,GAAG,mBAAmB,CAAC;QAEhD;;WAEG;QACI,6BAAmB,GAAG,mBAAmB,CAAC;QAEjD;;WAEG;QACI,+BAAqB,GAAG,qBAAqB,CAAC;QAErD;;WAEG;QACI,mCAAyB,GAAG,yBAAyB,CAAC;QAE7D;;;WAGG;QACI,mCAAyB,GAAG,yBAAyB,CAAC;QAC9D,gBAAC;IAAD,CAAC,AArID,IAqIC;IArIY,iBAAS,YAqIrB,CAAA;IAED;;OAEG;IACH;QAAiC,+BAAK;QASrC,qBAAY,MAAe,EAAE,QAAgB,EAAE,WAAwB,EAAE,aAA4B,EAAE,QAAkB,EAAE,aAAmB;YAC7I,kBAAM,aAAa,CAAC,CAAC;YAErB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;YACrB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;YACzB,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;YAC/B,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;YACnC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QAC1B,CAAC;QAEM,6BAAO,GAAd;YACC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QACvB,CAAC;QAEM,iCAAW,GAAlB;YACC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;QACvB,CAAC;QACF,kBAAC;IAAD,CAAC,AA1BD,CAAiC,cAAK,GA0BrC;IA1BY,mBAAW,cA0BvB,CAAA;IAED;;OAEG;IACH;QAAsC,oCAAK;QAG1C,0BAAY,WAAwB,EAAE,aAAmB;YACxD,kBAAM,aAAa,CAAC,CAAC;YAErB,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAChC,CAAC;QACF,uBAAC;IAAD,CAAC,AARD,CAAsC,cAAK,GAQ1C;IARY,wBAAgB,mBAQ5B,CAAA;IAED;;OAEG;IACH;QAA8C,4CAAW;QAGxD,kCAAY,SAA2B,EAAE,MAAe,EAAE,QAAgB,EAAE,WAAwB,EAAE,aAA4B,EAAE,QAAkB,EAAE,aAAmB;YAC1K,kBAAM,MAAM,EAAE,QAAQ,EAAE,WAAW,EAAE,aAAa,EAAE,QAAQ,EAAE,aAAa,CAAC,CAAC;YAE7E,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC5B,CAAC;QACF,+BAAC;IAAD,CAAC,AARD,CAA8C,WAAW,GAQxD;IARY,gCAAwB,2BAQpC,CAAA;IAED;;OAEG;IACH;QAAwC,sCAAK;QAK5C,4BAAY,GAAW,EAAE,MAAW,EAAE,KAAU,EAAE,aAAmB;YACpE,kBAAM,aAAa,CAAC,CAAC;YAErB,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;YACf,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;YACrB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACpB,CAAC;QACF,yBAAC;IAAD,CAAC,AAZD,CAAwC,cAAK,GAY5C;IAZY,0BAAkB,qBAY9B,CAAA;IAED;;OAEG;IACH;QAAkC,gCAAK;QAGtC,sBAAY,QAAgB,EAAE,aAAmB;YAChD,kBAAM,aAAa,CAAC,CAAC;YAErB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QAC1B,CAAC;QACF,mBAAC;IAAD,CAAC,AARD,CAAkC,cAAK,GAQtC;IARY,oBAAY,eAQxB,CAAA;IAED;;OAEG;IACH;QAAoC,kCAAK;QAGxC,wBAAY,WAAmB,EAAE,aAAmB;YACnD,kBAAM,aAAa,CAAC,CAAC;YAErB,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAChC,CAAC;QACF,qBAAC;IAAD,CAAC,AARD,CAAoC,cAAK,GAQxC;IARY,sBAAc,iBAQ1B,CAAA;IAED;QAAmC,iCAAK;QAGvC,uBAAY,QAAa,EAAE,aAAmB;YAC7C,kBAAM,aAAa,CAAC,CAAC;YAErB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QAC1B,CAAC;QACF,oBAAC;IAAD,CAAC,AARD,CAAmC,cAAK,GAQvC;IARY,qBAAa,gBAQzB,CAAA;IAED;QAAyC,uCAAa;QAAtD;YAAyC,8BAAa;QAEtD,CAAC;QAAD,0BAAC;IAAD,CAAC,AAFD,CAAyC,aAAa,GAErD;IAFY,2BAAmB,sBAE/B,CAAA","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport URI from 'vs/base/common/uri';\nimport {Event} from 'vs/base/common/events';\nimport {IEditorSelection} from 'vs/editor/common/editorCommon';\nimport {IEditor} from 'vs/platform/editor/common/editor';\nimport {EditorInput, EditorOptions} from 'vs/workbench/common/editor';\nimport {Position} from 'vs/platform/editor/common/editor';\n\n/**\n * All workbench events are listed here. For DOM events, see Monaco.Base.DomUtils.EventType.\n */\nexport class EventType {\n\n\t/**\n\t * Event type for when an editor is opened. This event is only sent once for a specific editor type until another\n\t * editor type gets opened. For example, when the user opens a file, the editorOpened event will be sent. If another\n\t * file is opened, this event will not be fired again. If the user opens, e.g. the diff editor, editorOpened will be\n\t * fired, since another editor type opened.\n\t */\n\tstatic EDITOR_OPENED = 'editorOpened';\n\n\t/**\n\t * Event type for when an editor is closed because another editor type is opened.\n\t */\n\tstatic EDITOR_CLOSED = 'editorClosed';\n\n\t/**\n\t * Event to indciate that an editor input is about to open. This event can be prevented to do something else instead.\n\t */\n\tstatic EDITOR_INPUT_OPENING = 'editorInputOpening';\n\n\t/**\n\t * Event type for when the editor input is about to change. This event is being sent before (!) the input is being set\n\t * to the active editor. Use EDITOR_INPUT_CHANGED to react after the input has been set and displayed by the editor.\n\t *\n\t * Note: This event will also be emitted when multiple editors are open and the user sets focus from the active editor\n\t * to another one. This allows to detect a focus change of the active editor.\n\t */\n\tstatic EDITOR_INPUT_CHANGING = 'editorInputChanging';\n\n\t/**\n\t * Event type to indicate that the editor options of the current active editor are changing.\n\t */\n\tstatic EDITOR_OPTIONS_CHANGING = 'editorOptionsChanging';\n\n\t/**\n\t * Event type for when the editor input has been changed in the currently active editor. This event is being sent after\n\t * the input has been set and displayed by the editor.\n\t *\n\t * Note: This event will also be emitted when multiple editors are open and the user sets focus from the active editor\n\t * to another one. This allows to detect a focus change of the active editor.\n\t */\n\tstatic EDITOR_INPUT_CHANGED = 'editorInputChanged';\n\n\t/**\n\t * Event type for when the editor input state changed.\n\t */\n\tstatic EDITOR_INPUT_STATE_CHANGED = 'editorInputStateChanged';\n\n\t/**\n\t * Event type for when the editor input failed to be set to the editor.\n\t */\n\tstatic EDITOR_SET_INPUT_ERROR = 'editorSetInputError';\n\n\t/**\n\t * Event type for when the editor position has been changed\n\t */\n\tstatic EDITOR_POSITION_CHANGED = 'editorPositionChanged';\n\n\t/**\n\t * An event type that fires when a text editor changes its selection.\n\t */\n\tstatic TEXT_EDITOR_SELECTION_CHANGED = 'textEditorSelectionChanged';\n\n\t/**\n\t * An event type that fires when a text editor mode changes.\n\t */\n\tstatic TEXT_EDITOR_MODE_CHANGED = 'textEditorModeChanged';\n\n\t/**\n\t * An event type that fires when a text editor content changes.\n\t */\n\tstatic TEXT_EDITOR_CONTENT_CHANGED = 'textEditorContentChanged';\n\n\t/**\n\t * An event type that fires when a text editor content options changed.\n\t */\n\tstatic TEXT_EDITOR_CONTENT_OPTIONS_CHANGED = 'textEditorContentOptionsChanged';\n\n\t/**\n\t * An event type that fires when a text editor's configuration changes.\n\t */\n\tstatic TEXT_EDITOR_CONFIGURATION_CHANGED = 'textEditorOptionsChanged';\n\n\t/**\n\t * Event type for when a composite is about to open.\n\t */\n\tstatic COMPOSITE_OPENING = 'compositeOpening';\n\n\t/**\n\t * Event type for when a composite is opened.\n\t */\n\tstatic COMPOSITE_OPENED = 'compositeOpened';\n\n\t/**\n\t * Event type for when a composite is closed.\n\t */\n\tstatic COMPOSITE_CLOSED = 'compositeClosed';\n\n\t/**\n\t * Event type for when the workbench has been fully created.\n\t */\n\tstatic WORKBENCH_CREATED = 'workbenchCreated';\n\n\t/**\n\t * Event type for when the workbench is about to being disposed.\n\t */\n\tstatic WORKBENCH_DISPOSING = 'workbenchDisposing';\n\n\t/**\n\t * Event type for when the workbench is fully disposed.\n\t */\n\tstatic WORKBENCH_DISPOSED = 'workbenchDisposed';\n\n\t/**\n\t * Event type for when an untitled file is becoming dirty.\n\t */\n\tstatic UNTITLED_FILE_DIRTY = 'untitledFileDirty';\n\n\t/**\n\t * Event type for when an untitled file is deleted.\n\t */\n\tstatic UNTITLED_FILE_DELETED = 'untitledFileDeleted';\n\n\t/**\n\t * Event type for when a resources encoding changes.\n\t */\n\tstatic RESOURCE_ENCODING_CHANGED = 'resourceEncodingChanged';\n\n\t/**\n\t * Event type for when the workbench options change. Listeners should refresh their\n\t * assumption on workbench options after this event is emitted.\n\t */\n\tstatic WORKBENCH_OPTIONS_CHANGED = 'workbenchOptionsChanged';\n}\n\n/**\n * Editor events are being emitted when the editor input changes, shows, is being saved or when the editor content changes.\n */\nexport class EditorEvent extends Event {\n\tpublic editor: IEditor;\n\tpublic editorId: string;\n\tpublic editorInput: EditorInput;\n\tpublic editorOptions: EditorOptions;\n\tpublic position: Position;\n\n\tprivate prevented: boolean;\n\n\tconstructor(editor: IEditor, editorId: string, editorInput: EditorInput, editorOptions: EditorOptions, position: Position, originalEvent?: any) {\n\t\tsuper(originalEvent);\n\n\t\tthis.editor = editor;\n\t\tthis.editorId = editorId;\n\t\tthis.editorInput = editorInput;\n\t\tthis.editorOptions = editorOptions;\n\t\tthis.position = position;\n\t}\n\n\tpublic prevent(): void {\n\t\tthis.prevented = true;\n\t}\n\n\tpublic isPrevented(): boolean {\n\t\treturn this.prevented;\n\t}\n}\n\n/**\n * Editor input events are being emitted when the editor input state changes.\n */\nexport class EditorInputEvent extends Event {\n\tpublic editorInput: EditorInput;\n\n\tconstructor(editorInput: EditorInput, originalEvent?: any) {\n\t\tsuper(originalEvent);\n\n\t\tthis.editorInput = editorInput;\n\t}\n}\n\n/**\n * A subclass of EditorEvent for text editor selection changes.\n */\nexport class TextEditorSelectionEvent extends EditorEvent {\n\tpublic selection: IEditorSelection;\n\n\tconstructor(selection: IEditorSelection, editor: IEditor, editorId: string, editorInput: EditorInput, editorOptions: EditorOptions, position: Position, originalEvent?: any) {\n\t\tsuper(editor, editorId, editorInput, editorOptions, position, originalEvent);\n\n\t\tthis.selection = selection;\n\t}\n}\n\n/**\n * Option change events are send when the options in the running instance change.\n */\nexport class OptionsChangeEvent extends Event {\n\tpublic key: string;\n\tpublic before: any;\n\tpublic after: any;\n\n\tconstructor(key: string, before: any, after: any, originalEvent?: any) {\n\t\tsuper(originalEvent);\n\n\t\tthis.key = key;\n\t\tthis.before = before;\n\t\tthis.after = after;\n\t}\n}\n\n/**\n * Command events are emitted when an action is being executed through a command handler (Keybinding).\n */\nexport class CommandEvent extends Event {\n\tpublic actionId: string;\n\n\tconstructor(actionId: string, originalEvent?: any) {\n\t\tsuper(originalEvent);\n\n\t\tthis.actionId = actionId;\n\t}\n}\n\n/**\n * Composite events are emitted when a composite opens or closes in the sidebar or panel.\n */\nexport class CompositeEvent extends Event {\n\tpublic compositeId: string;\n\n\tconstructor(compositeId: string, originalEvent?: any) {\n\t\tsuper(originalEvent);\n\n\t\tthis.compositeId = compositeId;\n\t}\n}\n\nexport class ResourceEvent extends Event {\n\tpublic resource: URI;\n\n\tconstructor(resource: URI, originalEvent?: any) {\n\t\tsuper(originalEvent);\n\n\t\tthis.resource = resource;\n\t}\n}\n\nexport class UntitledEditorEvent extends ResourceEvent {\n\t// No new methods\n}"]}