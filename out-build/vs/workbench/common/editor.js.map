{"version":3,"file":"vs/workbench/common/editor.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/workbench/common/editor.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport {EventEmitter} from 'vs/base/common/eventEmitter';\nimport types = require('vs/base/common/types');\nimport URI from 'vs/base/common/uri';\nimport objects = require('vs/base/common/objects');\nimport {IEditor, IEditorViewState, IRange} from 'vs/editor/common/editorCommon';\nimport {IEditorInput, IEditorModel, IEditorOptions, IResourceInput} from 'vs/platform/editor/common/editor';\n\n/**\n * A simple bag for input related status that can be shown in the UI\n */\nexport interface IInputStatus {\n\n\t/**\n\t * An identifier of the state that can be used e.g. as CSS class when displaying the input.\n\t */\n\tstate?: string;\n\n\t/**\n\t * A label to display describing the current input status.\n\t */\n\tdisplayText?: string;\n\n\t/**\n\t * A longer description giving more detail about the current input status.\n\t */\n\tdescription?: string;\n\n\t/**\n\t * Preferably a short label to append to the input name to indicate the input status.\n\t */\n\tdecoration?: string;\n}\n\n/**\n * Editor inputs are lightweight objects that can be passed to the workbench API to open inside the editor part.\n * Each editor input is mapped to an editor that is capable of opening it through the Platform facade.\n */\nexport abstract class EditorInput extends EventEmitter implements IEditorInput {\n\tprivate disposed: boolean;\n\n\t/**\n\t * Returns the unique id of this input.\n\t */\n\tpublic abstract getId(): string;\n\n\t/**\n\t * Returns the name of this input that can be shown to the user. Examples include showing the name of the input\n\t * above the editor area when the input is shown.\n\t */\n\tpublic getName(): string {\n\t\treturn null;\n\t}\n\n\t/**\n\t * Returns the description of this input that can be shown to the user. Examples include showing the description of\n\t * the input above the editor area to the side of the name of the input.\n\t *\n\t * @param verbose controls if the description should be short or can contain additional details.\n\t */\n\tpublic getDescription(verbose?: boolean): string {\n\t\treturn null;\n\t}\n\n\t/**\n\t * Returns status information about this input that can be shown to the user. Examples include showing the status\n\t * of the input when hovering over the name of the input.\n\t */\n\tpublic getStatus(): IInputStatus {\n\t\treturn null;\n\t}\n\n\t/**\n\t * Returns the preferred editor for this input. A list of candidate editors is passed in that whee registered\n\t * for the input. This allows subclasses to decide late which editor to use for the input on a case by case basis.\n\t */\n\tpublic getPreferredEditorId(candidates: string[]): string {\n\t\tif (candidates && candidates.length > 0) {\n\t\t\treturn candidates[0];\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Returns true if this input is identical to the otherInput.\n\t */\n\tpublic matches(otherInput: any): boolean {\n\t\treturn this === otherInput;\n\t}\n\n\t/**\n\t * Returns a type of EditorModel that represents the resolved input. Subclasses should\n\t * override to provide a meaningful model. The optional second argument allows to specify\n\t * if the EditorModel should be refreshed before returning it. Depending on the implementation\n\t * this could mean to refresh the editor model contents with the version from disk.\n\t */\n\tpublic abstract resolve(refresh?: boolean): TPromise<EditorModel>;\n\n\t/**\n\t * Called when an editor input is no longer needed. Allows to free up any resources taken by\n\t * resolving the editor input.\n\t */\n\tpublic dispose(): void {\n\t\tthis.disposed = true;\n\t\tthis.emit('dispose');\n\n\t\tsuper.dispose();\n\t}\n\n\t/**\n\t * Returns whether this input was disposed or not.\n\t */\n\tpublic isDisposed(): boolean {\n\t\treturn this.disposed;\n\t}\n}\n\nexport enum EncodingMode {\n\n\t/**\n\t * Instructs the encoding support to encode the current input with the provided encoding\n\t */\n\tEncode,\n\n\t/**\n\t * Instructs the encoding support to decode the current input with the provided encoding\n\t */\n\tDecode\n}\n\nexport interface IEncodingSupport {\n\n\t/**\n\t * Gets the encoding of the input if known.\n\t */\n\tgetEncoding(): string;\n\n\t/**\n\t * Sets the encoding for the input for saving.\n\t */\n\tsetEncoding(encoding: string, mode: EncodingMode): void;\n}\n\n/**\n * This is a tagging interface to declare an editor input being capable of dealing with files. It is only used in the editor registry\n * to register this kind of input to the platform.\n */\nexport interface IFileEditorInput extends IEditorInput, IEncodingSupport {\n\n\t/**\n\t * Gets the mime type of the file this input is about.\n\t */\n\tgetMime(): string;\n\n\t/**\n\t * Sets the mime type of the file this input is about.\n\t */\n\tsetMime(mime: string): void;\n\n\t/**\n\t * Gets the absolute file resource URI this input is about.\n\t */\n\tgetResource(): URI;\n\n\t/**\n\t * Sets the absolute file resource URI this input is about.\n\t */\n\tsetResource(resource: URI): void;\n}\n\n/**\n * The base class of untitled editor inputs in the workbench.\n */\nexport abstract class UntitledEditorInput extends EditorInput implements IEncodingSupport {\n\n\tabstract getResource(): URI;\n\n\tabstract isDirty(): boolean;\n\n\tabstract suggestFileName(): string;\n\n\tabstract getMime(): string;\n\n\tabstract getEncoding(): string;\n\n\tabstract setEncoding(encoding: string, mode: EncodingMode): void;\n}\n\n/**\n * The base class of editor inputs that have an original and modified side.\n */\nexport abstract class BaseDiffEditorInput extends EditorInput {\n\tprivate _originalInput: EditorInput;\n\tprivate _modifiedInput: EditorInput;\n\n\tconstructor(originalInput: EditorInput, modifiedInput: EditorInput) {\n\t\tsuper();\n\n\t\tthis._originalInput = originalInput;\n\t\tthis._modifiedInput = modifiedInput;\n\t}\n\n\tpublic get originalInput(): EditorInput {\n\t\treturn this._originalInput;\n\t}\n\n\tpublic get modifiedInput(): EditorInput {\n\t\treturn this._modifiedInput;\n\t}\n\n\tpublic getOriginalInput(): EditorInput {\n\t\treturn this.originalInput;\n\t}\n\n\tpublic getModifiedInput(): EditorInput {\n\t\treturn this.modifiedInput;\n\t}\n}\n\n/**\n * The editor model is the heavyweight counterpart of editor input. Depending on the editor input, it\n * connects to the disk to retrieve content and may allow for saving it back or reverting it. Editor models\n * are typically cached for some while because they are expensive to construct.\n */\nexport class EditorModel extends EventEmitter implements IEditorModel {\n\n\t/**\n\t * Causes this model to load returning a promise when loading is completed.\n\t */\n\tpublic load(): TPromise<EditorModel> {\n\t\treturn TPromise.as(this);\n\t}\n\n\t/**\n\t * Returns whether this model was loaded or not.\n\t */\n\tpublic isResolved(): boolean {\n\t\treturn true;\n\t}\n\n\t/**\n\t * Subclasses should implement to free resources that have been claimed through loading.\n\t */\n\tpublic dispose(): void {\n\t\tthis.emit('dispose');\n\n\t\tsuper.dispose();\n\t}\n}\n\n/**\n * The editor options is the base class of options that can be passed in when opening an editor.\n */\nexport class EditorOptions implements IEditorOptions {\n\n\t/**\n\t * Helper to create EditorOptions inline.\n\t */\n\tpublic static create(settings: { preserveFocus?: boolean; forceOpen?: boolean; }): EditorOptions {\n\t\tlet options = new EditorOptions();\n\t\toptions.preserveFocus = settings.preserveFocus;\n\t\toptions.forceOpen = settings.forceOpen;\n\n\t\treturn options;\n\t}\n\n\t/**\n\t * Tells the editor to not receive keyboard focus when the editor is being opened. By default,\n\t * the editor will receive keyboard focus on open.\n\t */\n\tpublic preserveFocus: boolean;\n\n\t/**\n\t * Tells the editor to replace the editor input in the editor even if it is identical to the one\n\t * already showing. By default, the editor will not replace the input if it is identical to the\n\t * one showing.\n\t */\n\tpublic forceOpen: boolean;\n\n\t/**\n\t * Ensures that the editor is being activated even if the input is already showing. This only applies\n\t * if there is more than one editor open already and preserveFocus is set to false.\n\t */\n\tpublic forceActive: boolean;\n\n\t/**\n\t * Returns true if this options is identical to the otherOptions.\n\t */\n\tpublic matches(otherOptions: any): boolean {\n\t\treturn this === otherOptions;\n\t}\n}\n\n/**\n * Base Text Editor Options.\n */\nexport class TextEditorOptions extends EditorOptions {\n\tprivate startLineNumber: number;\n\tprivate startColumn: number;\n\tprivate endLineNumber: number;\n\tprivate endColumn: number;\n\tprivate editorViewState: IEditorViewState;\n\n\tpublic static from(input: IResourceInput): TextEditorOptions {\n\t\tlet options: TextEditorOptions = null;\n\t\tif (input && input.options) {\n\t\t\tif (input.options.selection || input.options.forceOpen || input.options.preserveFocus) {\n\t\t\t\toptions = new TextEditorOptions();\n\t\t\t}\n\n\t\t\tif (input.options.selection) {\n\t\t\t\tlet selection = input.options.selection;\n\t\t\t\toptions.selection(selection.startLineNumber, selection.startColumn, selection.endLineNumber, selection.endColumn);\n\t\t\t}\n\n\t\t\tif (input.options.forceOpen) {\n\t\t\t\toptions.forceOpen = true;\n\t\t\t}\n\n\t\t\tif (input.options.preserveFocus) {\n\t\t\t\toptions.preserveFocus = true;\n\t\t\t}\n\t\t}\n\n\t\treturn options;\n\t}\n\n\t/**\n\t * Helper to create TextEditorOptions inline.\n\t */\n\tpublic static create(settings: { preserveFocus?: boolean; forceOpen?: boolean; forceActive?: boolean; selection?: IRange }): TextEditorOptions {\n\t\tlet options = new TextEditorOptions();\n\t\toptions.preserveFocus = settings.preserveFocus;\n\t\toptions.forceActive = settings.forceActive;\n\t\toptions.forceOpen = settings.forceOpen;\n\n\t\tif (settings.selection) {\n\t\t\toptions.startLineNumber = settings.selection.startLineNumber;\n\t\t\toptions.startColumn = settings.selection.startColumn;\n\t\t\toptions.endLineNumber = settings.selection.endLineNumber || settings.selection.startLineNumber;\n\t\t\toptions.endColumn = settings.selection.endColumn || settings.selection.startColumn;\n\t\t}\n\n\t\treturn options;\n\t}\n\n\t/**\n\t * Returns if this options object has objects defined for the editor.\n\t */\n\tpublic hasOptionsDefined(): boolean {\n\t\treturn !!this.editorViewState || (!types.isUndefinedOrNull(this.startLineNumber) && !types.isUndefinedOrNull(this.startColumn));\n\t}\n\n\t/**\n\t * Tells the editor to set show the given selection when the editor is being opened.\n\t */\n\tpublic selection(startLineNumber: number, startColumn: number, endLineNumber: number = startLineNumber, endColumn: number = startColumn): EditorOptions {\n\t\tthis.startLineNumber = startLineNumber;\n\t\tthis.startColumn = startColumn;\n\t\tthis.endLineNumber = endLineNumber;\n\t\tthis.endColumn = endColumn;\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the view state to be used when the editor is opening.\n\t */\n\tpublic viewState(viewState: IEditorViewState): void {\n\t\tthis.editorViewState = viewState;\n\t}\n\n\t/**\n\t * Apply the view state or selection to the given editor.\n\t *\n\t * @return if something was applied\n\t */\n\tpublic apply(textEditor: IEditor): boolean {\n\t\tlet gotApplied = false;\n\n\t\t// First try viewstate\n\t\tif (this.editorViewState) {\n\t\t\ttextEditor.restoreViewState(this.editorViewState);\n\t\t\tgotApplied = true;\n\t\t}\n\n\t\t// Otherwise check for selection\n\t\telse if (!types.isUndefinedOrNull(this.startLineNumber) && !types.isUndefinedOrNull(this.startColumn)) {\n\n\t\t\t// Select\n\t\t\tif (!types.isUndefinedOrNull(this.endLineNumber) && !types.isUndefinedOrNull(this.endColumn)) {\n\t\t\t\tlet range = {\n\t\t\t\t\tstartLineNumber: this.startLineNumber,\n\t\t\t\t\tstartColumn: this.startColumn,\n\t\t\t\t\tendLineNumber: this.endLineNumber,\n\t\t\t\t\tendColumn: this.endColumn\n\t\t\t\t};\n\t\t\t\ttextEditor.setSelection(range);\n\t\t\t\ttextEditor.revealRangeInCenter(range);\n\t\t\t}\n\n\t\t\t// Reveal\n\t\t\telse {\n\t\t\t\tlet pos = {\n\t\t\t\t\tlineNumber: this.startLineNumber,\n\t\t\t\t\tcolumn: this.startColumn\n\t\t\t\t};\n\t\t\t\ttextEditor.setPosition(pos);\n\t\t\t\ttextEditor.revealPositionInCenter(pos);\n\t\t\t}\n\n\t\t\tgotApplied = true;\n\t\t}\n\n\t\treturn gotApplied;\n\t}\n\n\tpublic matches(otherOptions: any): boolean {\n\t\tif (super.matches(otherOptions) === true) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (otherOptions) {\n\t\t\treturn otherOptions instanceof TextEditorOptions &&\n\t\t\t\t(<TextEditorOptions>otherOptions).startLineNumber === this.startLineNumber &&\n\t\t\t\t(<TextEditorOptions>otherOptions).startColumn === this.startColumn &&\n\t\t\t\t(<TextEditorOptions>otherOptions).endLineNumber === this.endLineNumber &&\n\t\t\t\t(<TextEditorOptions>otherOptions).endColumn === this.endColumn &&\n\t\t\t\t(<TextEditorOptions>otherOptions).preserveFocus === this.preserveFocus &&\n\t\t\t\t(<TextEditorOptions>otherOptions).forceOpen === this.forceOpen &&\n\t\t\t\tobjects.equals((<TextEditorOptions>otherOptions).editorViewState, this.editorViewState);\n\t\t}\n\n\t\treturn false;\n\t}\n}\n\n/**\n * Base Text Diff Editor Options.\n */\nexport class TextDiffEditorOptions extends TextEditorOptions {\n\n\t/**\n\t * Helper to create TextDiffEditorOptions inline.\n\t */\n\tpublic static create(settings: { autoRevealFirstChange?: boolean; preserveFocus?: boolean; forceOpen?: boolean; }): TextDiffEditorOptions {\n\t\tlet options = new TextDiffEditorOptions();\n\t\toptions.autoRevealFirstChange = settings.autoRevealFirstChange;\n\t\toptions.preserveFocus = settings.preserveFocus;\n\t\toptions.forceOpen = settings.forceOpen;\n\n\t\treturn options;\n\t}\n\n\t/**\n\t * Whether to auto reveal the first change when the text editor is opened or not. By default\n\t * the first change will not be revealed.\n\t */\n\tpublic autoRevealFirstChange: boolean;\n}\n\n/**\n * Given an input, tries to get the associated URI for it (either file or untitled scheme).\n */\nexport function getUntitledOrFileResource(input: IEditorInput, supportDiff?: boolean): URI {\n\tif (!input) {\n\t\treturn null;\n\t}\n\n\t// Untitled\n\tif (input instanceof UntitledEditorInput) {\n\t\treturn input.getResource();\n\t}\n\n\t// File\n\tlet fileInput = asFileEditorInput(input, supportDiff);\n\treturn fileInput && fileInput.getResource();\n}\n\n/**\n * Returns the object as IFileEditorInput only if it matches the signature.\n */\nexport function asFileEditorInput(obj: any, supportDiff?: boolean): IFileEditorInput {\n\tif (!obj) {\n\t\treturn null;\n\t}\n\n\t// Check for diff if we are asked to\n\tif (supportDiff && types.isFunction((<BaseDiffEditorInput>obj).getModifiedInput)) {\n\t\tobj = (<BaseDiffEditorInput>obj).getModifiedInput();\n\t}\n\n\tlet i = <IFileEditorInput>obj;\n\n\treturn i instanceof EditorInput && types.areFunctions(i.setResource, i.setMime, i.setEncoding, i.getEncoding, i.getResource, i.getMime) ? i : null;\n}"]}