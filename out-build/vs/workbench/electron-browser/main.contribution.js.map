{"version":3,"sources":["vs/workbench/electron-browser/main.contribution.ts"],"names":[],"mappings":"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","file":"vs/workbench/electron-browser/main.contribution.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport {Registry} from 'vs/platform/platform';\nimport nls = require('vs/nls');\nimport {SyncActionDescriptor} from 'vs/platform/actions/common/actions';\nimport {IConfigurationRegistry, Extensions as ConfigurationExtensions} from 'vs/platform/configuration/common/configurationRegistry';\nimport {IWorkbenchActionRegistry, Extensions} from 'vs/workbench/common/actionRegistry';\nimport {KeyMod, KeyCode} from 'vs/base/common/keyCodes';\nimport platform = require('vs/base/common/platform');\nimport {KbExpr} from 'vs/platform/keybinding/common/keybindingService';\nimport {WorkbenchMessageService} from 'vs/workbench/services/message/browser/messageService';\nimport {CloseEditorAction, ReloadWindowAction, ShowStartupPerformance, ZoomResetAction, ZoomOutAction, ZoomInAction, ToggleDevToolsAction, ToggleFullScreenAction, ToggleMenuBarAction, OpenRecentAction, CloseFolderAction, CloseWindowAction, NewWindowAction, CloseMessagesAction} from 'vs/workbench/electron-browser/actions';\n\n// Contribute Global Actions\nconst viewCategory = nls.localize('view', \"View\");\nconst developerCategory = nls.localize('developer', \"Developer\");\nconst fileCategory = nls.localize('file', \"File\");\nconst workbenchActionsRegistry = <IWorkbenchActionRegistry>Registry.as(Extensions.WorkbenchActions);\nworkbenchActionsRegistry.registerWorkbenchAction(new SyncActionDescriptor(NewWindowAction, NewWindowAction.ID, NewWindowAction.LABEL, { primary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KEY_N }));\nworkbenchActionsRegistry.registerWorkbenchAction(new SyncActionDescriptor(CloseWindowAction, CloseWindowAction.ID, CloseWindowAction.LABEL, { primary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KEY_W }));\nworkbenchActionsRegistry.registerWorkbenchAction(new SyncActionDescriptor(CloseFolderAction, CloseFolderAction.ID, CloseFolderAction.LABEL, { primary: KeyMod.chord(KeyMod.CtrlCmd | KeyCode.KEY_K, KeyCode.KEY_F) }), fileCategory);\nworkbenchActionsRegistry.registerWorkbenchAction(new SyncActionDescriptor(OpenRecentAction, OpenRecentAction.ID, OpenRecentAction.LABEL), fileCategory);\nworkbenchActionsRegistry.registerWorkbenchAction(new SyncActionDescriptor(ToggleDevToolsAction, ToggleDevToolsAction.ID, ToggleDevToolsAction.LABEL), developerCategory);\nworkbenchActionsRegistry.registerWorkbenchAction(new SyncActionDescriptor(ZoomInAction, ZoomInAction.ID, ZoomInAction.LABEL, { primary: KeyMod.CtrlCmd | KeyCode.US_EQUAL }), viewCategory);\nworkbenchActionsRegistry.registerWorkbenchAction(new SyncActionDescriptor(ZoomOutAction, ZoomOutAction.ID, ZoomOutAction.LABEL, { primary: KeyMod.CtrlCmd | KeyCode.US_MINUS }), viewCategory);\nworkbenchActionsRegistry.registerWorkbenchAction(new SyncActionDescriptor(ZoomResetAction, ZoomResetAction.ID, ZoomResetAction.LABEL), viewCategory);\nworkbenchActionsRegistry.registerWorkbenchAction(new SyncActionDescriptor(ShowStartupPerformance, ShowStartupPerformance.ID, ShowStartupPerformance.LABEL), developerCategory);\nworkbenchActionsRegistry.registerWorkbenchAction(new SyncActionDescriptor(ReloadWindowAction, ReloadWindowAction.ID, ReloadWindowAction.LABEL));\nworkbenchActionsRegistry.registerWorkbenchAction(new SyncActionDescriptor(CloseMessagesAction, CloseMessagesAction.ID, CloseMessagesAction.LABEL, { primary: KeyCode.Escape, secondary: [KeyMod.Shift | KeyCode.Escape] }, KbExpr.has(WorkbenchMessageService.GLOBAL_MESSAGES_SHOWING_CONTEXT)));\nworkbenchActionsRegistry.registerWorkbenchAction(new SyncActionDescriptor(CloseEditorAction, CloseEditorAction.ID, CloseEditorAction.LABEL, { primary: KeyMod.CtrlCmd | KeyCode.KEY_W, win: { primary: KeyMod.CtrlCmd | KeyCode.F4, secondary: [KeyMod.CtrlCmd | KeyCode.KEY_W] } }), viewCategory);\nworkbenchActionsRegistry.registerWorkbenchAction(new SyncActionDescriptor(ToggleFullScreenAction, ToggleFullScreenAction.ID, ToggleFullScreenAction.LABEL, { primary: KeyCode.F11, mac: { primary: KeyMod.CtrlCmd | KeyMod.WinCtrl | KeyCode.KEY_F } }), viewCategory);\nif (platform.isWindows || platform.isLinux) {\n\tworkbenchActionsRegistry.registerWorkbenchAction(new SyncActionDescriptor(ToggleMenuBarAction, ToggleMenuBarAction.ID, ToggleMenuBarAction.LABEL), viewCategory);\n}\n\n// Configuration: Window\nconst configurationRegistry = <IConfigurationRegistry>Registry.as(ConfigurationExtensions.Configuration);\nconfigurationRegistry.registerConfiguration({\n\t'id': 'window',\n\t'order': 6,\n\t'title': nls.localize('windowConfigurationTitle', \"Window configuration\"),\n\t'type': 'object',\n\t'properties': {\n\t\t'window.openFilesInNewWindow': {\n\t\t\t'type': 'boolean',\n\t\t\t'default': true,\n\t\t\t'description': nls.localize('openFilesInNewWindow', \"When enabled, will open files in a new window instead of reusing an existing instance.\")\n\t\t},\n\t\t'window.reopenFolders': {\n\t\t\t'type': 'string',\n\t\t\t'enum': ['none', 'one', 'all'],\n\t\t\t'default': 'one',\n\t\t\t'description': nls.localize('reopenFolders', \"Controls how folders are being reopened after a restart. Select 'none' to never reopen a folder, 'one' to reopen the last folder you worked on or 'all' to reopen all folders of your last session.\")\n\t\t},\n\t\t'window.zoomLevel': {\n\t\t\t'type': 'number',\n\t\t\t'default': 0,\n\t\t\t'description': nls.localize('zoomLevel', \"Adjust the zoom level of the window. The original size is 0 and each increment above (e.g. 1) or below (e.g. -1) represents zooming 20% larger or smaller. You can also enter decimals to adjust the zoom level with a finer granularity.\")\n\t\t}\n\t}\n});\n\n// Configuration: Update\nconfigurationRegistry.registerConfiguration({\n\t'id': 'update',\n\t'order': 10,\n\t'title': nls.localize('updateConfigurationTitle', \"Update configuration\"),\n\t'type': 'object',\n\t'properties': {\n\t\t'update.channel': {\n\t\t\t'type': 'string',\n\t\t\t'enum': ['none', 'default'],\n\t\t\t'default': 'default',\n\t\t\t'description': nls.localize('updateChannel', \"Configure the update channel to receive updates from. Requires a restart after change.\")\n\t\t}\n\t}\n});"]}