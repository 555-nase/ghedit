{"version":3,"file":"panel.js","sourceRoot":"","sources":["../../../../src/vs/workbench/browser/panel.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;IAMhG;QAAoC,yBAAS;QAA7C;YAAoC,8BAAS;QAAqB,CAAC;QAAD,YAAC;IAAD,CAAC,AAAnE,CAAoC,qBAAS,GAAsB;IAA7C,aAAK,QAAwC,CAAA;IAEnE;;OAEG;IACH;QAAqC,mCAA0B;QAC9D,yBAAY,QAAgB,EAAE,QAAgB,EAAE,EAAU,EAAE,IAAY,EAAE,QAAiB;YAC1F,kBAAM,QAAQ,EAAE,QAAQ,EAAE,EAAE,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC;QAC/C,CAAC;QACF,sBAAC;IAAD,CAAC,AAJD,CAAqC,+BAAmB,GAIvD;IAJY,uBAAe,kBAI3B,CAAA;IAED;QAAmC,iCAAwB;QAA3D;YAAmC,8BAAwB;QAqC3D,CAAC;QAlCA;;WAEG;QACI,qCAAa,GAApB,UAAqB,UAA2B;YAC/C,gBAAK,CAAC,iBAAiB,YAAC,UAAU,CAAC,CAAC;QACrC,CAAC;QAED;;WAEG;QACI,gCAAQ,GAAf,UAAgB,EAAU;YACzB,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;QAC9B,CAAC;QAED;;WAEG;QACI,iCAAS,GAAhB;YACC,MAAM,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC;QAC5B,CAAC;QAED;;WAEG;QACI,yCAAiB,GAAxB,UAAyB,EAAU;YAClC,IAAI,CAAC,cAAc,GAAG,EAAE,CAAC;QAC1B,CAAC;QAED;;WAEG;QACI,yCAAiB,GAAxB;YACC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC;QAC5B,CAAC;QACF,oBAAC;IAAD,CAAC,AArCD,CAAmC,6BAAiB,GAqCnD;IArCY,qBAAa,gBAqCzB,CAAA;IAEY,kBAAU,GAAG;QACzB,MAAM,EAAE,gCAAgC;KACxC,CAAC;IAEF,mBAAQ,CAAC,GAAG,CAAC,kBAAU,CAAC,MAAM,EAAE,IAAI,aAAa,EAAE,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport {Registry} from 'vs/platform/platform';\nimport {IPanel} from 'vs/workbench/common/panel';\nimport {Composite, CompositeDescriptor, CompositeRegistry} from 'vs/workbench/browser/composite';\n\nexport abstract class Panel extends Composite implements IPanel { }\n\n/**\n * A panel descriptor is a leightweight descriptor of a panel in the monaco workbench.\n */\nexport class PanelDescriptor extends CompositeDescriptor<Panel> {\n\tconstructor(moduleId: string, ctorName: string, id: string, name: string, cssClass?: string) {\n\t\tsuper(moduleId, ctorName, id, name, cssClass);\n\t}\n}\n\nexport class PanelRegistry extends CompositeRegistry<Panel> {\n\tprivate defaultPanelId: string;\n\n\t/**\n\t * Registers a panel to the platform.\n\t */\n\tpublic registerPanel(descriptor: PanelDescriptor): void {\n\t\tsuper.registerComposite(descriptor);\n\t}\n\n\t/**\n\t * Returns the panel descriptor for the given id or null if none.\n\t */\n\tpublic getPanel(id: string): PanelDescriptor {\n\t\treturn this.getComposite(id);\n\t}\n\n\t/**\n\t * Returns an array of registered panels known to the platform.\n\t */\n\tpublic getPanels(): PanelDescriptor[] {\n\t\treturn this.getComposits();\n\t}\n\n\t/**\n\t * Sets the id of the panel that should open on startup by default.\n\t */\n\tpublic setDefaultPanelId(id: string): void {\n\t\tthis.defaultPanelId = id;\n\t}\n\n\t/**\n\t * Gets the id of the panel that should open on startup by default.\n\t */\n\tpublic getDefaultPanelId(): string {\n\t\treturn this.defaultPanelId;\n\t}\n}\n\nexport const Extensions = {\n\tPanels: 'workbench.contributions.panels'\n};\n\nRegistry.add(Extensions.Panels, new PanelRegistry());\n"]}