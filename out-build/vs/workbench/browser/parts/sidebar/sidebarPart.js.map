{"version":3,"sources":["vs/workbench/browser/parts/sidebar/sidebarPart.ts"],"names":[],"mappings":"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","file":"vs/workbench/browser/parts/sidebar/sidebarPart.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport 'vs/css!./media/sidebarpart';\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport nls = require('vs/nls');\nimport {Registry} from 'vs/platform/platform';\nimport {Action} from 'vs/base/common/actions';\nimport {CompositePart} from 'vs/workbench/browser/parts/compositePart';\nimport {Viewlet, ViewletRegistry, Extensions as ViewletExtensions} from 'vs/workbench/browser/viewlet';\nimport {IWorkbenchActionRegistry, Extensions as ActionExtensions} from 'vs/workbench/common/actionRegistry';\nimport {SyncActionDescriptor} from 'vs/platform/actions/common/actions';\nimport {IViewletService} from 'vs/workbench/services/viewlet/common/viewletService';\nimport {IPartService} from 'vs/workbench/services/part/common/partService';\nimport {IViewlet} from 'vs/workbench/common/viewlet';\nimport {Scope} from 'vs/workbench/browser/actionBarRegistry';\nimport {IStorageService} from 'vs/platform/storage/common/storage';\nimport {IContextMenuService} from 'vs/platform/contextview/browser/contextView';\nimport {IEventService} from 'vs/platform/event/common/event';\nimport {IMessageService} from 'vs/platform/message/common/message';\nimport {ITelemetryService} from 'vs/platform/telemetry/common/telemetry';\nimport {IKeybindingService} from 'vs/platform/keybinding/common/keybindingService';\nimport {KeyMod, KeyCode} from 'vs/base/common/keyCodes';\n\nexport class SidebarPart extends CompositePart<Viewlet> implements IViewletService {\n\n\tpublic static activeViewletSettingsKey = 'workbench.sidebar.activeviewletid';\n\n\tpublic serviceId = IViewletService;\n\n\tprivate blockOpeningViewlet: boolean;\n\n\tconstructor(\n\t\tmessageService: IMessageService,\n\t\tstorageService: IStorageService,\n\t\teventService: IEventService,\n\t\ttelemetryService: ITelemetryService,\n\t\tcontextMenuService: IContextMenuService,\n\t\tpartService: IPartService,\n\t\tkeybindingService: IKeybindingService,\n\t\tid: string\n\t) {\n\t\tsuper(\n\t\t\tmessageService,\n\t\t\tstorageService,\n\t\t\teventService,\n\t\t\ttelemetryService,\n\t\t\tcontextMenuService,\n\t\t\tpartService,\n\t\t\tkeybindingService,\n\t\t\t(<ViewletRegistry>Registry.as(ViewletExtensions.Viewlets)),\n\t\t\tSidebarPart.activeViewletSettingsKey,\n\t\t\t'sideBar',\n\t\t\t'viewlet',\n\t\t\tScope.VIEWLET,\n\t\t\tid\n\t\t);\n\t}\n\n\tpublic openViewlet(id: string, focus?: boolean): TPromise<Viewlet> {\n\t\tif (this.blockOpeningViewlet) {\n\t\t\treturn TPromise.as(null); // Workaround against a potential race condition\n\t\t}\n\n\t\t// First check if sidebar is hidden and show if so\n\t\tif (this.partService.isSideBarHidden()) {\n\t\t\ttry {\n\t\t\t\tthis.blockOpeningViewlet = true;\n\t\t\t\tthis.partService.setSideBarHidden(false);\n\t\t\t} finally {\n\t\t\t\tthis.blockOpeningViewlet = false;\n\t\t\t}\n\t\t}\n\n\t\treturn this.openComposite(id, focus);\n\t}\n\n\tpublic getActiveViewlet(): IViewlet {\n\t\treturn <IViewlet>this.getActiveComposite();\n\t}\n\n\tpublic getLastActiveViewletId(): string {\n\t\treturn this.getLastActiveCompositetId();\n\t}\n\n\tpublic hideActiveViewlet(): TPromise<void> {\n\t\treturn this.hideActiveComposite();\n\t}\n}\n\nexport class FocusSideBarAction extends Action {\n\n\tpublic static ID = 'workbench.action.focusSideBar';\n\tpublic static LABEL = nls.localize('focusSideBar', \"Focus into Side Bar\");\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@IViewletService private viewletService: IViewletService,\n\t\t@IPartService private partService: IPartService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\tpublic run(): TPromise<boolean> {\n\n\t\t// Show side bar\n\t\tif (this.partService.isSideBarHidden()) {\n\t\t\tthis.partService.setSideBarHidden(false);\n\t\t}\n\n\t\t// Focus into active viewlet\n\t\telse {\n\t\t\tlet viewlet = this.viewletService.getActiveViewlet();\n\t\t\tif (viewlet) {\n\t\t\t\tviewlet.focus();\n\t\t\t}\n\t\t}\n\n\t\treturn TPromise.as(true);\n\t}\n}\n\nlet registry = <IWorkbenchActionRegistry>Registry.as(ActionExtensions.WorkbenchActions);\nregistry.registerWorkbenchAction(new SyncActionDescriptor(FocusSideBarAction, FocusSideBarAction.ID, FocusSideBarAction.LABEL, {\n\tprimary: KeyMod.CtrlCmd | KeyCode.KEY_0\n}), nls.localize('viewCategory', \"View\"));\n"]}