{"version":3,"file":"statusbar.js","sourceRoot":"","sources":["../../../../../../src/vs/workbench/browser/parts/statusbar/statusbar.ts"],"names":[],"mappings":";IAAA;;;oGAGgG;IAChG,YAAY,CAAC;IAcC,0BAAkB,GAAG,gBAAgB,CAAC,kBAAkB,CAAC;IAEvE;QAMC,iCAAY,IAA4C,EAAE,SAA8B,EAAE,QAAiB;YAC1G,IAAI,CAAC,cAAc,GAAG,kCAAoB,CAAC,IAAI,CAAC,CAAC;YACjD,IAAI,CAAC,SAAS,GAAG,SAAS,IAAI,0BAAkB,CAAC,IAAI,CAAC;YACtD,IAAI,CAAC,QAAQ,GAAG,QAAQ,IAAI,CAAC,CAAC;QAC/B,CAAC;QACF,8BAAC;IAAD,CAAC,AAXD,IAWC;IAXY,+BAAuB,0BAWnC,CAAA;IAOD;QAIC;YACC,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;QAClB,CAAC;QAED,sBAAW,oCAAK;iBAAhB;gBACC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;YACpB,CAAC;;;WAAA;QAEM,iDAAqB,GAA5B,UAA6B,UAAmC;YAC/D,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAC9B,CAAC;QACF,wBAAC;IAAD,CAAC,AAfD,IAeC;IAEY,kBAAU,GAAG;QACzB,SAAS,EAAE,mCAAmC;KAC9C,CAAC;IAEF,mBAAQ,CAAC,GAAG,CAAC,kBAAU,CAAC,SAAS,EAAE,IAAI,iBAAiB,EAAE,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {Registry} from 'vs/platform/platform';\nimport {IDisposable} from 'vs/base/common/lifecycle';\n/* tslint:disable:no-unused-variable */\nimport statusbarService = require('vs/workbench/services/statusbar/common/statusbarService');\n/* tslint:enable:no-unused-variable */\nimport {SyncDescriptor0, createSyncDescriptor} from 'vs/platform/instantiation/common/descriptors';\nimport {IConstructorSignature0} from 'vs/platform/instantiation/common/instantiation';\n\nexport interface IStatusbarItem {\n\trender(element: HTMLElement): IDisposable;\n}\n\nexport import StatusbarAlignment = statusbarService.StatusbarAlignment;\n\nexport class StatusbarItemDescriptor {\n\n\tpublic syncDescriptor: SyncDescriptor0<IStatusbarItem>;\n\tpublic alignment: StatusbarAlignment;\n\tpublic priority: number;\n\n\tconstructor(ctor: IConstructorSignature0<IStatusbarItem>, alignment?: StatusbarAlignment, priority?: number) {\n\t\tthis.syncDescriptor = createSyncDescriptor(ctor);\n\t\tthis.alignment = alignment || StatusbarAlignment.LEFT;\n\t\tthis.priority = priority || 0;\n\t}\n}\n\nexport interface IStatusbarRegistry {\n\tregisterStatusbarItem(descriptor: StatusbarItemDescriptor): void;\n\titems: StatusbarItemDescriptor[];\n}\n\nclass StatusbarRegistry implements IStatusbarRegistry {\n\n\tprivate _items: StatusbarItemDescriptor[];\n\n\tconstructor() {\n\t\tthis._items = [];\n\t}\n\n\tpublic get items(): StatusbarItemDescriptor[] {\n\t\treturn this._items;\n\t}\n\n\tpublic registerStatusbarItem(descriptor: StatusbarItemDescriptor): void {\n\t\tthis._items.push(descriptor);\n\t}\n}\n\nexport const Extensions = {\n\tStatusbar: 'workbench.contributions.statusbar'\n};\n\nRegistry.add(Extensions.Statusbar, new StatusbarRegistry());\n"]}