{"version":3,"sources":["vs/workbench/browser/parts/quickopen/quickOpenController.ts"],"names":[],"mappings":"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","file":"vs/workbench/browser/parts/quickopen/quickOpenController.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport 'vs/css!./media/quickopen';\nimport {TPromise, ValueCallback} from 'vs/base/common/winjs.base';\nimport nls = require('vs/nls');\nimport {Dimension, withElementById} from 'vs/base/browser/builder';\nimport strings = require('vs/base/common/strings');\nimport filters = require('vs/base/common/filters');\nimport uuid = require('vs/base/common/uuid');\nimport types = require('vs/base/common/types');\nimport {Mode, IContext, IAutoFocus, IQuickNavigateConfiguration, IModel} from 'vs/base/parts/quickopen/common/quickOpen';\nimport {QuickOpenEntryItem, QuickOpenEntry, QuickOpenModel, QuickOpenEntryGroup} from 'vs/base/parts/quickopen/browser/quickOpenModel';\nimport {QuickOpenWidget} from 'vs/base/parts/quickopen/browser/quickOpenWidget';\nimport {ContributableActionProvider} from 'vs/workbench/browser/actionBarRegistry';\nimport {ITree, IElementCallback} from 'vs/base/parts/tree/browser/tree';\nimport {Registry} from 'vs/platform/platform';\nimport {WorkbenchComponent} from 'vs/workbench/common/component';\nimport {EditorEvent, EventType} from 'vs/workbench/common/events';\nimport Event, {Emitter} from 'vs/base/common/event';\nimport {Identifiers} from 'vs/workbench/common/constants';\nimport {Scope} from 'vs/workbench/common/memento';\nimport {QuickOpenHandler, QuickOpenHandlerDescriptor, IQuickOpenRegistry, Extensions} from 'vs/workbench/browser/quickopen';\nimport {EditorHistoryModel} from 'vs/workbench/browser/parts/quickopen/editorHistoryModel';\nimport {EditorInput} from 'vs/workbench/common/editor';\nimport errors = require('vs/base/common/errors');\nimport {IWorkbenchEditorService} from 'vs/workbench/services/editor/common/editorService';\nimport {IPickOpenEntry, IInputOptions, IQuickOpenService, IPickOptions} from 'vs/workbench/services/quickopen/common/quickOpenService';\nimport {IViewletService} from 'vs/workbench/services/viewlet/common/viewletService';\nimport {IStorageService} from 'vs/platform/storage/common/storage';\nimport {IEventService} from 'vs/platform/event/common/event';\nimport {IInstantiationService} from 'vs/platform/instantiation/common/instantiation';\nimport {IMessageService, Severity} from 'vs/platform/message/common/message';\nimport {ITelemetryService} from 'vs/platform/telemetry/common/telemetry';\nimport {IWorkspaceContextService} from 'vs/workbench/services/workspace/common/contextService';\nimport {IKeybindingService, IKeybindingContextKey} from 'vs/platform/keybinding/common/keybindingService';\n\nconst ID = 'workbench.component.quickopen';\nconst EDITOR_HISTORY_STORAGE_KEY = 'quickopen.editorhistory';\nconst HELP_PREFIX = '?';\nconst AUTO_SAVE_HISTORY_THRESHOLD = 5;\nconst QUICK_OPEN_MODE = 'inQuickOpen';\n\ninterface IPickOpenEntryItem extends IPickOpenEntry {\n\theight?: number;\n\trender?: (tree: ITree, container: HTMLElement, previousCleanupFn: IElementCallback) => IElementCallback;\n}\n\ninterface IInternalPickOptions {\n\tvalue?: string;\n\tplaceHolder?: string;\n\tinputDecoration?: Severity;\n\tpassword?: boolean;\n\tautoFocus?: IAutoFocus;\n\tmatchOnDescription?: boolean;\n\tmatchOnDetail?: boolean;\n\tignoreFocusLost?: boolean;\n\tonDidType?: (value: string) => any;\n}\n\nexport class QuickOpenController extends WorkbenchComponent implements IQuickOpenService {\n\n\tpublic serviceId = IQuickOpenService;\n\n\tprivate _onShow: Emitter<void>;\n\tprivate _onHide: Emitter<void>;\n\n\tprivate instantiationService: IInstantiationService;\n\tprivate quickOpenWidget: QuickOpenWidget;\n\tprivate pickOpenWidget: QuickOpenWidget;\n\tprivate layoutDimensions: Dimension;\n\tprivate editorHistoryModel: EditorHistoryModel;\n\tprivate memento: any;\n\tprivate mapResolvedHandlersToPrefix: { [prefix: string]: QuickOpenHandler; };\n\tprivate currentResultToken: string;\n\tprivate currentPickerToken: string;\n\tprivate autoSaveHistoryCounter: number;\n\tprivate inQuickOpenMode: IKeybindingContextKey<boolean>;\n\tprivate promisesToCompleteOnHide: ValueCallback[];\n\tprivate previousActiveHandlerDescriptor: QuickOpenHandlerDescriptor;\n\tprivate actionProvider = new ContributableActionProvider();\n\tprivate previousValue = '';\n\tprivate visibilityChangeTimeoutHandle: number;\n\n\tconstructor(\n\t\tprivate eventService: IEventService,\n\t\tprivate storageService: IStorageService,\n\t\tprivate editorService: IWorkbenchEditorService,\n\t\tprivate viewletService: IViewletService,\n\t\tprivate messageService: IMessageService,\n\t\tprivate telemetryService: ITelemetryService,\n\t\tprivate contextService: IWorkspaceContextService,\n\t\tkeybindingService: IKeybindingService\n\t) {\n\t\tsuper(ID);\n\n\t\tthis.mapResolvedHandlersToPrefix = {};\n\t\tthis.autoSaveHistoryCounter = 0;\n\n\t\tthis.promisesToCompleteOnHide = [];\n\n\t\tthis.inQuickOpenMode = keybindingService.createKey(QUICK_OPEN_MODE, false);\n\n\t\tthis._onShow = new Emitter<void>();\n\t\tthis._onHide = new Emitter<void>();\n\t}\n\n\tpublic get onShow(): Event<void> {\n\t\treturn this._onShow.event;\n\t}\n\n\tpublic get onHide(): Event<void> {\n\t\treturn this._onHide.event;\n\t}\n\n\tpublic setInstantiationService(service: IInstantiationService): void {\n\t\tthis.instantiationService = service;\n\t}\n\n\tpublic getEditorHistoryModel(): EditorHistoryModel {\n\t\treturn this.editorHistoryModel;\n\t}\n\n\tpublic create(): void {\n\n\t\t// Listen on Editor Input Changes to show in MRU List\n\t\tthis.toUnbind.push(this.eventService.addListener(EventType.EDITOR_INPUT_CHANGING, (e: EditorEvent) => this.onEditorInputChanging(e)));\n\t\tthis.toUnbind.push(this.eventService.addListener(EventType.EDITOR_SET_INPUT_ERROR, (e: EditorEvent) => this.onEditorInputSetError(e)));\n\n\t\t// Editor History Model\n\t\tthis.editorHistoryModel = new EditorHistoryModel(this.editorService, this.instantiationService, this.contextService);\n\t\tthis.memento = this.getMemento(this.storageService, Scope.WORKSPACE);\n\t\tif (this.memento[EDITOR_HISTORY_STORAGE_KEY]) {\n\t\t\tthis.editorHistoryModel.loadFrom(this.memento[EDITOR_HISTORY_STORAGE_KEY]);\n\t\t}\n\t}\n\n\tprivate onEditorInputChanging(e: EditorEvent): void {\n\t\tif (e.editorInput) {\n\n\t\t\t// If an active editor is set, but is different from the one from the event, return early\n\t\t\tlet activeEditor = this.editorService.getActiveEditor();\n\t\t\tif (activeEditor && e.editor && activeEditor !== e.editor) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Add to History\n\t\t\tthis.editorHistoryModel.add(e.editorInput);\n\n\t\t\t// Save to Local Storage periodically\n\t\t\tif (this.autoSaveHistoryCounter++ >= AUTO_SAVE_HISTORY_THRESHOLD) {\n\t\t\t\tthis.saveEditorHistory(true);\n\t\t\t\tthis.autoSaveHistoryCounter = 0;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate onEditorInputSetError(e: EditorEvent): void {\n\t\tif (e.editorInput) {\n\t\t\tthis.removeEditorHistoryEntry(e.editorInput); // make sure this input does not show up in history if it failed to open\u000b\n\t\t}\n\t}\n\n\tpublic getEditorHistory(): EditorInput[] {\n\t\treturn this.editorHistoryModel ? this.editorHistoryModel.getEntries().map((entry) => entry.getInput()) : [];\n\t}\n\n\tpublic removeEditorHistoryEntry(input: EditorInput): void {\n\t\tthis.editorHistoryModel.remove(input);\n\t}\n\n\tpublic quickNavigate(configuration: IQuickNavigateConfiguration, next: boolean): void {\n\t\tif (this.quickOpenWidget) {\n\t\t\tthis.quickOpenWidget.quickNavigate(configuration, next);\n\t\t}\n\t}\n\n\tpublic input(options?: IInputOptions): TPromise<string> {\n\t\tconst defaultMessage = options && options.prompt\n\t\t\t? nls.localize('inputModeEntryDescription', \"{0} (Press 'Enter' to confirm or 'Escape' to cancel)\", options.prompt)\n\t\t\t: nls.localize('inputModeEntry', \"Press 'Enter' to confirm your input or 'Escape' to cancel\");\n\n\t\tlet currentPick = defaultMessage;\n\t\tlet currentValidation = TPromise.as(true);\n\t\tlet currentDecoration: Severity;\n\t\tlet lastValue = options && options.value || '';\n\n\t\tconst init = (resolve: (value: IPickOpenEntry | TPromise<IPickOpenEntry>) => any, reject: (value: any) => any) => {\n\n\t\t\t// open quick pick with just one choise. we will recurse whenever\n\t\t\t// the validation/success message changes\n\t\t\tthis.doPick(TPromise.as([{ label: currentPick }]), {\n\t\t\t\tignoreFocusLost: true,\n\t\t\t\tautoFocus: { autoFocusFirstEntry: true },\n\t\t\t\tpassword: options.password,\n\t\t\t\tplaceHolder: options.placeHolder,\n\t\t\t\tvalue: options.value,\n\t\t\t\tinputDecoration: currentDecoration,\n\t\t\t\tonDidType: (value) => {\n\t\t\t\t\tlastValue = value;\n\n\t\t\t\t\tif (options.validateInput) {\n\t\t\t\t\t\tif (currentValidation) {\n\t\t\t\t\t\t\tcurrentValidation.cancel();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcurrentValidation = TPromise.timeout(100).then(() => {\n\t\t\t\t\t\t\treturn options.validateInput(value).then(message => {\n\t\t\t\t\t\t\t\tcurrentDecoration = !!message ? Severity.Error : void 0;\n\t\t\t\t\t\t\t\tlet newPick = message || defaultMessage;\n\t\t\t\t\t\t\t\tif (newPick !== currentPick) {\n\t\t\t\t\t\t\t\t\tcurrentPick = newPick;\n\t\t\t\t\t\t\t\t\tresolve(new TPromise(init));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn !message;\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}, err => {\n\t\t\t\t\t\t\t// ignore\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}).then(resolve, reject);\n\t\t};\n\n\t\treturn new TPromise(init).then(item => {\n\t\t\treturn currentValidation.then(valid => {\n\t\t\t\tif (valid && item) {\n\t\t\t\t\treturn lastValue;\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tpublic pick(picks: TPromise<string[]>, options?: IPickOptions): TPromise<string>;\n\tpublic pick<T extends IPickOpenEntry>(picks: TPromise<T[]>, options?: IPickOptions): TPromise<string>;\n\tpublic pick(picks: string[], options?: IPickOptions): TPromise<string>;\n\tpublic pick<T extends IPickOpenEntry>(picks: T[], options?: IPickOptions): TPromise<T>;\n\tpublic pick(arg1: string[] | TPromise<string[]> | IPickOpenEntry[] | TPromise<IPickOpenEntry[]>, options?: IPickOptions): TPromise<string | IPickOpenEntry> {\n\t\tif (!options) {\n\t\t\toptions = Object.create(null);\n\t\t}\n\n\t\tlet arrayPromise: TPromise<string[] | IPickOpenEntry[]>;\n\t\tif (Array.isArray(arg1)) {\n\t\t\tarrayPromise = TPromise.as(arg1);\n\t\t} else if (TPromise.is(arg1)) {\n\t\t\tarrayPromise = arg1;\n\t\t} else {\n\t\t\tthrow new Error('illegal input');\n\t\t}\n\n\t\tlet isAboutStrings = false;\n\t\tlet entryPromise = arrayPromise.then(elements => {\n\t\t\treturn (<Array<string | IPickOpenEntry>>elements).map(element => {\n\t\t\t\tif (typeof element === 'string') {\n\t\t\t\t\tisAboutStrings = true;\n\t\t\t\t\treturn <IPickOpenEntry>{ label: element };\n\t\t\t\t} else {\n\t\t\t\t\treturn element;\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\treturn new TPromise<string | IPickOpenEntry>((resolve, reject, progress) => {\n\n\t\t\tfunction onItem(item: IPickOpenEntry): string | IPickOpenEntry {\n\t\t\t\treturn item && isAboutStrings ? item.label : item;\n\t\t\t}\n\n\t\t\tthis.doPick(entryPromise, options).then(item => resolve(onItem(item)),\n\t\t\t\terr => reject(err),\n\t\t\t\titem => progress(onItem(item)));\n\t\t});\n\t}\n\n\tprivate doPick(picksPromise: TPromise<IPickOpenEntry[]>, options: IInternalPickOptions): TPromise<IPickOpenEntry> {\n\t\tlet autoFocus = options.autoFocus;\n\n\t\t// Use a generated token to avoid race conditions from long running promises\n\t\tlet currentPickerToken = uuid.generateUuid();\n\t\tthis.currentPickerToken = currentPickerToken;\n\n\t\t// Create upon first open\n\t\tif (!this.pickOpenWidget) {\n\t\t\tthis.pickOpenWidget = new QuickOpenWidget(\n\t\t\t\twithElementById(Identifiers.WORKBENCH_CONTAINER).getHTMLElement(),\n\t\t\t\t{\n\t\t\t\t\tonOk: () => { /* ignore, handle later */ },\n\t\t\t\t\tonCancel: () => { /* ignore, handle later */ },\n\t\t\t\t\tonType: (value: string) => { /* ignore, handle later */ },\n\t\t\t\t\tonShow: () => this.emitQuickOpenVisibilityChange(true),\n\t\t\t\t\tonHide: () => {\n\t\t\t\t\t\tthis.restoreFocus(); // focus back to editor or viewlet\n\t\t\t\t\t\tthis.emitQuickOpenVisibilityChange(false); // event\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tinputPlaceHolder: options.placeHolder || ''\n\t\t\t\t},\n\t\t\t\tthis.telemetryService\n\t\t\t);\n\n\t\t\tthis.pickOpenWidget.create();\n\t\t}\n\n\t\t// Update otherwise\n\t\telse {\n\t\t\tthis.pickOpenWidget.setPlaceHolder(options.placeHolder || '');\n\t\t}\n\n\t\t// Respect input value\n\t\tif (options.value) {\n\t\t\tthis.pickOpenWidget.setValue(options.value);\n\t\t}\n\n\t\t// Respect password\n\t\tthis.pickOpenWidget.setPassword(options.password);\n\n\t\t// Input decoration\n\t\tif (!types.isUndefinedOrNull(options.inputDecoration)) {\n\t\t\tthis.pickOpenWidget.showInputDecoration(options.inputDecoration);\n\t\t} else {\n\t\t\tthis.pickOpenWidget.clearInputDecoration();\n\t\t}\n\n\t\t// Layout\n\t\tif (this.layoutDimensions) {\n\t\t\tthis.pickOpenWidget.layout(this.layoutDimensions);\n\t\t}\n\n\t\treturn new TPromise<IPickOpenEntry | string>((complete, error, progress) => {\n\t\t\tlet picksPromiseDone = false;\n\n\t\t\t// Resolve picks\n\t\t\tpicksPromise.then((picks) => {\n\t\t\t\tif (this.currentPickerToken !== currentPickerToken) {\n\t\t\t\t\treturn; // Return if another request came after\n\t\t\t\t}\n\n\t\t\t\tpicksPromiseDone = true;\n\n\t\t\t\t// Reset Progress\n\t\t\t\tthis.pickOpenWidget.getProgressBar().stop().getContainer().hide();\n\n\t\t\t\t// Model\n\t\t\t\tlet model = new QuickOpenModel();\n\t\t\t\tlet entries = picks.map((e) => {\n\t\t\t\t\tlet entry = (<IPickOpenEntryItem>e);\n\t\t\t\t\tif (entry.height && entry.render) {\n\t\t\t\t\t\treturn new PickOpenItem(entry.label, entry.description, entry.height, entry.render.bind(entry), () => progress(e));\n\t\t\t\t\t}\n\n\t\t\t\t\treturn new PickOpenEntry(entry.label, entry.description, entry.detail, () => progress(e), entry.separator && entry.separator.border, entry.separator && entry.separator.label);\n\t\t\t\t});\n\n\t\t\t\tif (picks.length === 0) {\n\t\t\t\t\tentries.push(new PickOpenEntry(nls.localize('emptyPicks', \"There are no entries to pick from\")));\n\t\t\t\t}\n\n\t\t\t\tmodel.setEntries(entries);\n\n\t\t\t\t// Handlers\n\t\t\t\tthis.pickOpenWidget.setCallbacks({\n\t\t\t\t\tonOk: () => {\n\n\t\t\t\t\t\tif (picks.length === 0) {\n\t\t\t\t\t\t\treturn complete(null);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tlet index = -1;\n\t\t\t\t\t\tentries.forEach((entry, i) => {\n\t\t\t\t\t\t\tif (entry.selected) {\n\t\t\t\t\t\t\t\tindex = i;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tcomplete(picks[index] || null);\n\t\t\t\t\t},\n\t\t\t\t\tonCancel: () => complete(void 0),\n\t\t\t\t\tonFocusLost: () => options.ignoreFocusLost,\n\t\t\t\t\tonType: (value: string) => {\n\n\t\t\t\t\t\t// the caller takes care of all input\n\t\t\t\t\t\tif (options.onDidType) {\n\t\t\t\t\t\t\toptions.onDidType(value);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (picks.length === 0) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvalue = value ? strings.trim(value) : value;\n\n\t\t\t\t\t\t// Reset filtering\n\t\t\t\t\t\tif (!value) {\n\t\t\t\t\t\t\tentries.forEach((e) => {\n\t\t\t\t\t\t\t\te.setHighlights(null);\n\t\t\t\t\t\t\t\te.setHidden(false);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Filter by value\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tentries.forEach((entry) => {\n\t\t\t\t\t\t\t\tlet labelHighlights = filters.matchesFuzzy(value, entry.getLabel());\n\t\t\t\t\t\t\t\tlet descriptionHighlights = options.matchOnDescription\n\t\t\t\t\t\t\t\t\t&& filters.matchesFuzzy(value, entry.getDescription());\n\n\t\t\t\t\t\t\t\tlet detailHighlights = options.matchOnDetail && entry.getDetail()\n\t\t\t\t\t\t\t\t\t&& filters.matchesFuzzy(value, entry.getDetail());\n\n\t\t\t\t\t\t\t\tif (labelHighlights || descriptionHighlights || detailHighlights) {\n\t\t\t\t\t\t\t\t\tentry.setHighlights(labelHighlights, descriptionHighlights, detailHighlights);\n\t\t\t\t\t\t\t\t\tentry.setHidden(false);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tentry.setHighlights(null, null, null);\n\t\t\t\t\t\t\t\t\tentry.setHidden(true);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis.pickOpenWidget.refresh(model, value ? { autoFocusFirstEntry: true } : autoFocus);\n\t\t\t\t\t},\n\t\t\t\t\tonShow: () => {\n\t\t\t\t\t\tthis.emitQuickOpenVisibilityChange(true); // event\n\t\t\t\t\t},\n\t\t\t\t\tonHide: () => {\n\t\t\t\t\t\tthis.restoreFocus(); // focus back to editor or viewlet\n\t\t\t\t\t\tthis.emitQuickOpenVisibilityChange(false); // event\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\t// Set input\n\t\t\t\tif (!this.pickOpenWidget.isVisible()) {\n\t\t\t\t\tthis.pickOpenWidget.show(model, autoFocus);\n\t\t\t\t} else {\n\t\t\t\t\tthis.pickOpenWidget.setInput(model, autoFocus);\n\t\t\t\t}\n\t\t\t}, (err) => {\n\t\t\t\tthis.pickOpenWidget.hide();\n\n\t\t\t\terror(err);\n\t\t\t});\n\n\t\t\t// Progress if task takes a long time\n\t\t\tTPromise.timeout(800).then(() => {\n\t\t\t\tif (!picksPromiseDone && this.currentPickerToken === currentPickerToken) {\n\t\t\t\t\tthis.pickOpenWidget.getProgressBar().infinite().getContainer().show();\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Show picker empty if resolving takes a while\n\t\t\tif (!picksPromiseDone) {\n\t\t\t\tthis.pickOpenWidget.show(new QuickOpenModel());\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate emitQuickOpenVisibilityChange(isVisible: boolean): void {\n\t\tif (this.visibilityChangeTimeoutHandle) {\n\t\t\twindow.clearTimeout(this.visibilityChangeTimeoutHandle);\n\t\t}\n\n\t\tthis.visibilityChangeTimeoutHandle = setTimeout(() => {\n\t\t\tif (isVisible) {\n\t\t\t\tthis._onShow.fire();\n\t\t\t} else {\n\t\t\t\tthis._onHide.fire();\n\t\t\t}\n\n\t\t\tthis.visibilityChangeTimeoutHandle = void 0;\n\t\t}, 100 /* to prevent flashing, we accumulate visibility changes over a timeout of 100ms */);\n\t}\n\n\tpublic refresh(input?: string): TPromise<void> {\n\t\tif (!this.quickOpenWidget.isVisible()) {\n\t\t\treturn TPromise.as(null);\n\t\t}\n\n\t\tif (input && this.previousValue !== input) {\n\t\t\treturn TPromise.as(null);\n\t\t}\n\n\t\treturn this.show(this.previousValue);\n\t}\n\n\tpublic show(prefix?: string, quickNavigateConfiguration?: IQuickNavigateConfiguration): TPromise<void> {\n\t\tthis.previousValue = prefix;\n\n\t\tlet promiseCompletedOnHide = new TPromise<void>((c) => {\n\t\t\tthis.promisesToCompleteOnHide.push(c);\n\t\t});\n\n\t\t// Telemetry: log that quick open is shown and log the mode\n\t\tlet registry = (<IQuickOpenRegistry>Registry.as(Extensions.Quickopen));\n\t\tlet handlerDescriptor = registry.getQuickOpenHandler(prefix);\n\t\tif (!handlerDescriptor) {\n\t\t\tlet defaultHandlerDescriptors = registry.getDefaultQuickOpenHandlers();\n\t\t\tif (defaultHandlerDescriptors.length > 0) {\n\t\t\t\thandlerDescriptor = defaultHandlerDescriptors[0];\n\t\t\t}\n\t\t}\n\n\t\tif (handlerDescriptor) {\n\t\t\tthis.telemetryService.publicLog('quickOpenWidgetShown', { mode: handlerDescriptor.getId(), quickNavigate: !!quickNavigateConfiguration });\n\t\t}\n\n\t\t// Create upon first open\n\t\tif (!this.quickOpenWidget) {\n\t\t\tthis.quickOpenWidget = new QuickOpenWidget(\n\t\t\t\twithElementById(Identifiers.WORKBENCH_CONTAINER).getHTMLElement(),\n\t\t\t\t{\n\t\t\t\t\tonOk: () => this.onClose(false),\n\t\t\t\t\tonCancel: () => this.onCancel(),\n\t\t\t\t\tonType: (value: string) => this.onType(value || ''),\n\t\t\t\t\tonShow: () => {\n\t\t\t\t\t\tthis.inQuickOpenMode.set(true);\n\t\t\t\t\t\tthis.emitQuickOpenVisibilityChange(true);\n\t\t\t\t\t},\n\t\t\t\t\tonHide: () => {\n\t\t\t\t\t\tthis.inQuickOpenMode.reset();\n\n\t\t\t\t\t\t// Complete promises that are waiting\n\t\t\t\t\t\twhile (this.promisesToCompleteOnHide.length) {\n\t\t\t\t\t\t\tthis.promisesToCompleteOnHide.pop()(true);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis.restoreFocus(); // focus back to editor or viewlet\n\t\t\t\t\t\tthis.emitQuickOpenVisibilityChange(false);\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tinputPlaceHolder: this.hasHandler(HELP_PREFIX) ? nls.localize('quickOpenInput', \"Type '?' to get help on the actions you can take from here\") : ''\n\t\t\t\t},\n\t\t\t\tthis.telemetryService\n\t\t\t);\n\n\t\t\tthis.quickOpenWidget.create();\n\t\t}\n\n\t\t// Layout\n\t\tif (this.layoutDimensions) {\n\t\t\tthis.quickOpenWidget.layout(this.layoutDimensions);\n\t\t}\n\n\t\t// Show quick open with prefix or editor history\n\t\tif (!this.quickOpenWidget.isVisible() || quickNavigateConfiguration) {\n\t\t\tif (prefix) {\n\t\t\t\tthis.quickOpenWidget.show(prefix);\n\t\t\t} else {\n\t\t\t\tlet editorHistory = this.getEditorHistoryModelWithGroupLabel();\n\t\t\t\tif (editorHistory.getEntries().length < 2) {\n\t\t\t\t\tquickNavigateConfiguration = null; // If no entries can be shown, default to normal quick open mode\n\t\t\t\t}\n\n\t\t\t\tlet autoFocus: IAutoFocus;\n\t\t\t\tif (!quickNavigateConfiguration) {\n\t\t\t\t\tautoFocus = { autoFocusFirstEntry: true };\n\t\t\t\t} else {\n\t\t\t\t\tlet visibleEditorCount = this.editorService.getVisibleEditors().length;\n\t\t\t\t\tautoFocus = { autoFocusFirstEntry: visibleEditorCount === 0, autoFocusSecondEntry: visibleEditorCount !== 0 };\n\t\t\t\t}\n\n\t\t\t\tthis.quickOpenWidget.show(editorHistory, autoFocus, quickNavigateConfiguration);\n\t\t\t}\n\t\t}\n\n\t\t// Otherwise reset the widget to the prefix that is passed in\n\t\telse {\n\t\t\tthis.quickOpenWidget.show(prefix || '');\n\t\t}\n\n\t\treturn promiseCompletedOnHide;\n\t}\n\n\tprivate hasHandler(prefix: string): boolean {\n\t\treturn !!(<IQuickOpenRegistry>Registry.as(Extensions.Quickopen)).getQuickOpenHandler(prefix);\n\t}\n\n\tprivate getEditorHistoryModelWithGroupLabel(): QuickOpenModel {\n\t\tlet entries: QuickOpenEntry[] = this.editorHistoryModel.getEntries();\n\n\t\t// Apply label to first entry\n\t\tif (entries.length > 0) {\n\t\t\tentries[0] = new QuickOpenEntryGroup(entries[0], nls.localize('historyMatches', \"recently opened\"), false);\n\t\t}\n\n\t\treturn new QuickOpenModel(entries, this.actionProvider);\n\t}\n\n\tprivate onCancel(notifyHandlers = true): void {\n\n\t\t// Indicate to handlers\n\t\tif (notifyHandlers) {\n\t\t\tthis.onClose(true);\n\t\t}\n\t}\n\n\tprivate onClose(canceled: boolean): void {\n\n\t\t// Clear state\n\t\tthis.previousActiveHandlerDescriptor = null;\n\n\t\t// Pass to handlers\n\t\tfor (let prefix in this.mapResolvedHandlersToPrefix) {\n\t\t\tif (this.mapResolvedHandlersToPrefix.hasOwnProperty(prefix)) {\n\t\t\t\tlet handler = this.mapResolvedHandlersToPrefix[prefix];\n\t\t\t\thandler.onClose(canceled);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate restoreFocus(): void {\n\n\t\t// Try to focus active editor\n\t\tlet editor = this.editorService.getActiveEditor();\n\t\tif (editor) {\n\t\t\teditor.focus();\n\t\t}\n\t}\n\n\tprivate onType(value: string): void {\n\t\tthis.previousValue = value;\n\n\t\t// look for a handler\n\t\tconst registry = Registry.as<IQuickOpenRegistry>(Extensions.Quickopen);\n\t\tconst handlerDescriptor = registry.getQuickOpenHandler(value);\n\t\tconst instantProgress = handlerDescriptor && handlerDescriptor.instantProgress;\n\n\t\t// Use a generated token to avoid race conditions from long running promises\n\t\tlet currentResultToken = uuid.generateUuid();\n\t\tthis.currentResultToken = currentResultToken;\n\n\t\t// Reset Progress\n\t\tif (!instantProgress) {\n\t\t\tthis.quickOpenWidget.getProgressBar().stop().getContainer().hide();\n\t\t}\n\n\t\t// Reset Extra Class\n\t\tthis.quickOpenWidget.setExtraClass(null);\n\n\t\t// Remove leading and trailing whitespace\n\t\tlet trimmedValue = strings.trim(value);\n\n\t\t// If no value provided, default to editor history\n\t\tif (!trimmedValue) {\n\t\t\tthis.quickOpenWidget.setInput(this.getEditorHistoryModelWithGroupLabel(), { autoFocusFirstEntry: true });\n\t\t\treturn;\n\t\t}\n\n\t\tlet resultPromise: TPromise<void>;\n\t\tlet resultPromiseDone = false;\n\n\t\tif (handlerDescriptor) {\n\t\t\tresultPromise = this.handleSpecificHandler(handlerDescriptor, value, currentResultToken);\n\t\t}\n\n\t\t// Otherwise handle default handlers if no specific handler present\n\t\telse {\n\t\t\tlet defaultHandlers = registry.getDefaultQuickOpenHandlers();\n\t\t\tresultPromise = this.handleDefaultHandlers(defaultHandlers, value, currentResultToken);\n\t\t}\n\n\t\t// Remember as the active one\n\t\tthis.previousActiveHandlerDescriptor = handlerDescriptor;\n\n\t\t// Progress if task takes a long time\n\t\tTPromise.timeout(instantProgress ? 0 : 800).then(() => {\n\t\t\tif (!resultPromiseDone && currentResultToken === this.currentResultToken) {\n\t\t\t\tthis.quickOpenWidget.getProgressBar().infinite().getContainer().show();\n\t\t\t}\n\t\t});\n\n\t\t// Promise done handling\n\t\tresultPromise.done(() => {\n\t\t\tresultPromiseDone = true;\n\n\t\t\tif (currentResultToken === this.currentResultToken) {\n\t\t\t\tthis.quickOpenWidget.getProgressBar().getContainer().hide();\n\t\t\t}\n\t\t}, (error: any) => {\n\t\t\tresultPromiseDone = true;\n\t\t\terrors.onUnexpectedError(error);\n\t\t\tthis.messageService.show(Severity.Error, types.isString(error) ? new Error(error) : error);\n\t\t});\n\t}\n\n\tprivate handleDefaultHandlers(defaultHandlers: QuickOpenHandlerDescriptor[], value: string, currentResultToken: string): TPromise<void> {\n\n\t\t// Fill in history results if matching\n\t\tlet matchingHistoryEntries = this.editorHistoryModel.getResults(value);\n\t\tif (matchingHistoryEntries.length > 0) {\n\t\t\tmatchingHistoryEntries[0] = new QuickOpenEntryGroup(matchingHistoryEntries[0], nls.localize('historyMatches', \"recently opened\"), false);\n\t\t}\n\n\t\tlet quickOpenModel = new QuickOpenModel(matchingHistoryEntries, this.actionProvider);\n\n\t\t// Set input and await additional results from handlers coming in later\n\t\tthis.quickOpenWidget.setInput(quickOpenModel, { autoFocusFirstEntry: true });\n\n\t\t// If no handler present, return early\n\t\tif (defaultHandlers.length === 0) {\n\t\t\treturn TPromise.as(null);\n\t\t}\n\n\t\t// Resolve all default handlers\n\t\tlet resolvePromises: TPromise<QuickOpenHandler>[] = [];\n\t\tdefaultHandlers.forEach((defaultHandler) => {\n\t\t\tresolvePromises.push(this.resolveHandler(defaultHandler));\n\t\t});\n\n\t\treturn TPromise.join(resolvePromises).then((resolvedHandlers: QuickOpenHandler[]) => {\n\t\t\tlet resultPromises: TPromise<void>[] = [];\n\t\t\tresolvedHandlers.forEach((resolvedHandler) => {\n\n\t\t\t\t// Return early if the handler can not run in the current environment\n\t\t\t\tlet canRun = resolvedHandler.canRun();\n\t\t\t\tif (types.isUndefinedOrNull(canRun) || (typeof canRun === 'boolean' && !canRun) || typeof canRun === 'string') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Receive Results from Handler and apply\n\t\t\t\tresultPromises.push(resolvedHandler.getResults(value).then((result) => {\n\t\t\t\t\tif (this.currentResultToken === currentResultToken) {\n\t\t\t\t\t\tlet handlerResults = result && result.entries;\n\n\t\t\t\t\t\tif (!handlerResults) {\n\t\t\t\t\t\t\thandlerResults = []; // guard against handler returning nothing\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis.mergeResults(quickOpenModel, handlerResults, resolvedHandler.getGroupLabel());\n\t\t\t\t\t}\n\t\t\t\t}));\n\t\t\t});\n\n\t\t\treturn TPromise.join(resultPromises).then(() => void 0);\n\t\t});\n\t}\n\n\tprivate mergeResults(quickOpenModel: QuickOpenModel, handlerResults: QuickOpenEntry[], groupLabel: string): void {\n\n\t\t// Remove results already showing by checking for a \"resource\" property\n\t\tlet mapEntryToResource = this.mapEntriesToResource(quickOpenModel);\n\t\tlet additionalHandlerResults: QuickOpenEntry[] = [];\n\t\tfor (let i = 0; i < handlerResults.length; i++) {\n\t\t\tlet result = handlerResults[i];\n\t\t\tlet resource = result.getResource();\n\n\t\t\tif (!resource || !mapEntryToResource[resource.toString()]) {\n\t\t\t\tadditionalHandlerResults.push(result);\n\t\t\t}\n\t\t}\n\n\t\t// Show additional handler results below any existing results\n\t\tif (additionalHandlerResults.length > 0) {\n\t\t\tlet useTopBorder = quickOpenModel.getEntries().length > 0;\n\t\t\tadditionalHandlerResults[0] = new QuickOpenEntryGroup(additionalHandlerResults[0], groupLabel, useTopBorder);\n\t\t\tquickOpenModel.addEntries(additionalHandlerResults);\n\t\t\tthis.quickOpenWidget.refresh(quickOpenModel, { autoFocusFirstEntry: true });\n\t\t}\n\n\t\t// Otherwise if no results are present (even from histoy) indicate this to the user\n\t\telse if (quickOpenModel.getEntries().length === 0) {\n\t\t\tquickOpenModel.addEntries([new PlaceholderQuickOpenEntry(nls.localize('noResultsFound1', \"No results found\"))]);\n\t\t\tthis.quickOpenWidget.refresh(quickOpenModel, { autoFocusFirstEntry: true });\n\t\t}\n\t}\n\n\tprivate handleSpecificHandler(handlerDescriptor: QuickOpenHandlerDescriptor, value: string, currentResultToken: string): TPromise<void> {\n\t\treturn this.resolveHandler(handlerDescriptor).then((resolvedHandler: QuickOpenHandler) => {\n\n\t\t\t// Remove handler prefix from search value\n\t\t\tvalue = value.substr(handlerDescriptor.prefix.length);\n\n\t\t\t// Return early if the handler can not run in the current environment and inform the user\n\t\t\tlet canRun = resolvedHandler.canRun();\n\t\t\tif (types.isUndefinedOrNull(canRun) || (typeof canRun === 'boolean' && !canRun) || typeof canRun === 'string') {\n\t\t\t\tlet placeHolderLabel = (typeof canRun === 'string') ? canRun : nls.localize('canNotRunPlaceholder', \"This quick open handler can not be used in the current context\");\n\n\t\t\t\tconst model = new QuickOpenModel([new PlaceholderQuickOpenEntry(placeHolderLabel)], this.actionProvider);\n\t\t\t\tthis.showModel(model, resolvedHandler.getAutoFocus(value), resolvedHandler.getAriaLabel());\n\n\t\t\t\treturn TPromise.as(null);\n\t\t\t}\n\n\t\t\t// Support extra class from handler\n\t\t\tlet extraClass = resolvedHandler.getClass();\n\t\t\tif (extraClass) {\n\t\t\t\tthis.quickOpenWidget.setExtraClass(extraClass);\n\t\t\t}\n\n\t\t\t// When handlers change, clear the result list first before loading the new results\n\t\t\tif (this.previousActiveHandlerDescriptor !== handlerDescriptor) {\n\t\t\t\tthis.clearModel();\n\t\t\t}\n\n\t\t\t// Receive Results from Handler and apply\n\t\t\treturn resolvedHandler.getResults(value).then((result) => {\n\t\t\t\tif (this.currentResultToken === currentResultToken) {\n\t\t\t\t\tif (!result || !result.entries.length) {\n\t\t\t\t\t\tconst model = new QuickOpenModel([new PlaceholderQuickOpenEntry(resolvedHandler.getEmptyLabel(value))]);\n\t\t\t\t\t\tthis.showModel(model, resolvedHandler.getAutoFocus(value), resolvedHandler.getAriaLabel());\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.showModel(result, resolvedHandler.getAutoFocus(value), resolvedHandler.getAriaLabel());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate showModel(model: IModel<any>, autoFocus?: IAutoFocus, ariaLabel?: string): void {\n\n\t\t// If the given model is already set in the widget, refresh and return early\n\t\tif (this.quickOpenWidget.getInput() === model) {\n\t\t\tthis.quickOpenWidget.refresh(model, autoFocus);\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Otherwise just set it\n\t\tthis.quickOpenWidget.setInput(model, autoFocus, ariaLabel);\n\t}\n\n\tprivate clearModel(): void {\n\t\tthis.showModel(new QuickOpenModel(), null);\n\t}\n\n\tprivate mapEntriesToResource(model: QuickOpenModel): { [resource: string]: QuickOpenEntry; } {\n\t\tlet entries = model.getEntries();\n\t\tlet mapEntryToPath: { [path: string]: QuickOpenEntry; } = {};\n\t\tentries.forEach((entry: QuickOpenEntry) => {\n\t\t\tif (entry.getResource()) {\n\t\t\t\tmapEntryToPath[entry.getResource().toString()] = entry;\n\t\t\t}\n\t\t});\n\n\t\treturn mapEntryToPath;\n\t}\n\n\tprivate resolveHandler(handler: QuickOpenHandlerDescriptor): TPromise<QuickOpenHandler> {\n\t\tlet id = handler.getId();\n\n\t\t// Return Cached\n\t\tif (this.mapResolvedHandlersToPrefix[id]) {\n\t\t\treturn TPromise.as(this.mapResolvedHandlersToPrefix[id]);\n\t\t}\n\n\t\t// Otherwise load and create\n\t\treturn this.instantiationService.createInstance(handler).then((resolvedHandler: QuickOpenHandler) => {\n\t\t\tthis.mapResolvedHandlersToPrefix[id] = resolvedHandler;\n\n\t\t\treturn resolvedHandler;\n\t\t}, (error) => {\n\t\t\treturn TPromise.wrapError('Unable to instanciate quick open handler ' + handler.moduleName + ' - ' + handler.ctorName + ': ' + JSON.stringify(error));\n\t\t});\n\t}\n\n\tpublic shutdown(): void {\n\n\t\t// Save Editor Input History\n\t\tthis.saveEditorHistory(false);\n\n\t\t// Call Super\n\t\tsuper.shutdown();\n\t}\n\n\tprivate saveEditorHistory(toLocalStorage: boolean): void {\n\t\tif (!this.memento[EDITOR_HISTORY_STORAGE_KEY]) {\n\t\t\tthis.memento[EDITOR_HISTORY_STORAGE_KEY] = {};\n\t\t}\n\t\tthis.editorHistoryModel.saveTo(this.memento[EDITOR_HISTORY_STORAGE_KEY]);\n\n\t\tif (toLocalStorage) {\n\t\t\tthis.saveMemento();\n\t\t}\n\t}\n\n\tpublic layout(dimension: Dimension): void {\n\t\tthis.layoutDimensions = dimension;\n\t\tif (this.quickOpenWidget) {\n\t\t\tthis.quickOpenWidget.layout(this.layoutDimensions);\n\t\t}\n\n\t\tif (this.pickOpenWidget) {\n\t\t\tthis.pickOpenWidget.layout(this.layoutDimensions);\n\t\t}\n\t}\n\n\tpublic dispose(): void {\n\t\tif (this.quickOpenWidget) {\n\t\t\tthis.quickOpenWidget.dispose();\n\t\t}\n\n\t\tif (this.pickOpenWidget) {\n\t\t\tthis.pickOpenWidget.dispose();\n\t\t}\n\n\t\tsuper.dispose();\n\t}\n}\n\nclass PlaceholderQuickOpenEntry extends QuickOpenEntryGroup {\n\tprivate placeHolderLabel: string;\n\n\tconstructor(placeHolderLabel: string) {\n\t\tsuper();\n\n\t\tthis.placeHolderLabel = placeHolderLabel;\n\t}\n\n\tpublic getLabel(): string {\n\t\treturn this.placeHolderLabel;\n\t}\n}\n\nclass PickOpenEntry extends PlaceholderQuickOpenEntry {\n\tprivate _selected: boolean;\n\tprivate description: string;\n\tprivate detail: string;\n\n\tconstructor(label: string, description?: string, detail?: string, private onPreview?: () => void, private hasSeparator?: boolean, private separatorLabel?: string) {\n\t\tsuper(label);\n\n\t\tthis.description = description;\n\t\tthis.detail = detail;\n\t}\n\n\tpublic get selected(): boolean {\n\t\treturn this._selected;\n\t}\n\n\tpublic getDescription(): string {\n\t\treturn this.description;\n\t}\n\n\tpublic getDetail(): string {\n\t\treturn this.detail;\n\t}\n\n\tpublic showBorder(): boolean {\n\t\treturn this.hasSeparator;\n\t}\n\n\tpublic getGroupLabel(): string {\n\t\treturn this.separatorLabel;\n\t}\n\n\tpublic run(mode: Mode, context: IContext): boolean {\n\t\tif (mode === Mode.OPEN) {\n\t\t\tthis._selected = true;\n\n\t\t\treturn true;\n\t\t}\n\n\t\tif (mode === Mode.PREVIEW && this.onPreview) {\n\t\t\tthis.onPreview();\n\t\t}\n\n\t\treturn false;\n\t}\n}\n\nclass PickOpenItem extends QuickOpenEntryItem {\n\tprivate _selected: boolean;\n\n\tconstructor(private label: string, private description: string, private height: number, private renderFn: (tree: ITree, container: HTMLElement, previousCleanupFn: IElementCallback) => IElementCallback, private onPreview?: () => void) {\n\t\tsuper();\n\t}\n\n\tpublic getHeight(): number {\n\t\treturn this.height;\n\t}\n\n\tpublic render(tree: ITree, container: HTMLElement, previousCleanupFn: IElementCallback): IElementCallback {\n\t\treturn this.renderFn(tree, container, previousCleanupFn);\n\t}\n\n\tpublic get selected(): boolean {\n\t\treturn this._selected;\n\t}\n\n\tpublic getLabel(): string {\n\t\treturn this.label;\n\t}\n\n\tpublic getDescription(): string {\n\t\treturn this.description;\n\t}\n\n\tpublic run(mode: Mode, context: IContext): boolean {\n\t\tif (mode === Mode.OPEN) {\n\t\t\tthis._selected = true;\n\n\t\t\treturn true;\n\t\t}\n\n\t\tif (mode === Mode.PREVIEW && this.onPreview) {\n\t\t\tthis.onPreview();\n\t\t}\n\n\t\treturn false;\n\t}\n}"]}