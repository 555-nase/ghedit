{"version":3,"file":"panelPart.js","sourceRoot":"","sources":["../../../../../../src/vs/workbench/browser/parts/panel/panelPart.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport 'vs/css!./media/panelPart';\nimport nls = require('vs/nls');\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport {KeyMod, KeyCode, CommonKeybindings} from 'vs/base/common/keyCodes';\nimport {Action, IAction} from 'vs/base/common/actions';\nimport {Builder} from 'vs/base/browser/builder';\nimport dom = require('vs/base/browser/dom');\nimport {Registry} from 'vs/platform/platform';\nimport {Scope} from 'vs/workbench/browser/actionBarRegistry';\nimport {SyncActionDescriptor} from 'vs/platform/actions/common/actions';\nimport {IWorkbenchActionRegistry, Extensions as WorkbenchExtensions} from 'vs/workbench/common/actionRegistry';\nimport {IPanel} from 'vs/workbench/common/panel';\nimport {CompositePart} from 'vs/workbench/browser/parts/compositePart';\nimport {Panel, PanelRegistry, Extensions as PanelExtensions} from 'vs/workbench/browser/panel';\nimport {IPanelService} from 'vs/workbench/services/panel/common/panelService';\nimport {IPartService} from 'vs/workbench/services/part/common/partService';\nimport {IStorageService} from 'vs/platform/storage/common/storage';\nimport {IContextMenuService} from 'vs/platform/contextview/browser/contextView';\nimport {IEventService} from 'vs/platform/event/common/event';\nimport {IMessageService} from 'vs/platform/message/common/message';\nimport {ITelemetryService} from 'vs/platform/telemetry/common/telemetry';\nimport {IKeybindingService} from 'vs/platform/keybinding/common/keybindingService';\nimport {IKeyboardEvent} from 'vs/base/browser/keyboardEvent';\n\nexport class PanelPart extends CompositePart<Panel> implements IPanelService {\n\n\tpublic static activePanelSettingsKey = 'workbench.panelpart.activepanelid';\n\n\tpublic serviceId = IPanelService;\n\tprivate blockOpeningPanel: boolean;\n\n\tconstructor(\n\t\tmessageService: IMessageService,\n\t\tstorageService: IStorageService,\n\t\teventService: IEventService,\n\t\ttelemetryService: ITelemetryService,\n\t\tcontextMenuService: IContextMenuService,\n\t\tpartService: IPartService,\n\t\tkeybindingService: IKeybindingService,\n\t\tid: string\n\t) {\n\t\tsuper(\n\t\t\tmessageService,\n\t\t\tstorageService,\n\t\t\teventService,\n\t\t\ttelemetryService,\n\t\t\tcontextMenuService,\n\t\t\tpartService,\n\t\t\tkeybindingService,\n\t\t\t(<PanelRegistry>Registry.as(PanelExtensions.Panels)),\n\t\t\tPanelPart.activePanelSettingsKey,\n\t\t\t'panel',\n\t\t\t'panel',\n\t\t\tScope.PANEL,\n\t\t\tid\n\t\t);\n\t}\n\n\tpublic create(parent: Builder): void {\n\t\tsuper.create(parent);\n\n\t\tdom.addStandardDisposableListener(this.getContainer().getHTMLElement(), 'keyup', (e: IKeyboardEvent) => {\n\t\t\tif (e.equals(CommonKeybindings.ESCAPE)) {\n\t\t\t\tthis.partService.setPanelHidden(true);\n\t\t\t\te.preventDefault();\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic openPanel(id: string, focus?: boolean): TPromise<Panel> {\n\t\tif (this.blockOpeningPanel) {\n\t\t\treturn TPromise.as(null); // Workaround against a potential race condition\n\t\t}\n\n\t\t// First check if panel is hidden and show if so\n\t\tif (this.partService.isPanelHidden()) {\n\t\t\ttry {\n\t\t\t\tthis.blockOpeningPanel = true;\n\t\t\t\tthis.partService.setPanelHidden(false);\n\t\t\t} finally {\n\t\t\t\tthis.blockOpeningPanel = false;\n\t\t\t}\n\t\t}\n\n\t\treturn this.openComposite(id, focus);\n\t}\n\n\tprotected getActions(): IAction[] {\n\t\treturn [this.instantiationService.createInstance(ClosePanelAction, ClosePanelAction.ID, ClosePanelAction.LABEL)];\n\t}\n\n\tpublic getActivePanel(): IPanel {\n\t\treturn this.getActiveComposite();\n\t}\n\n\tpublic getLastActivePanelId(): string {\n\t\treturn this.getLastActiveCompositetId();\n\t}\n\n\tpublic hideActivePanel(): TPromise<void> {\n\t\treturn this.hideActiveComposite();\n\t}\n}\n\n\nclass ClosePanelAction extends Action {\n\tstatic ID = 'workbench.action.closePanel';\n\tstatic LABEL = nls.localize('closePanel', \"Close\");\n\n\tconstructor(\n\t\tid: string,\n\t\tname: string,\n\t\t@IPartService private partService: IPartService\n\t) {\n\t\tsuper(id, name, 'close-editor-action');\n\t}\n\n\tpublic run(): TPromise<boolean> {\n\t\tthis.partService.setPanelHidden(true);\n\t\treturn TPromise.as(true);\n\t}\n}\n\nclass TogglePanelAction extends Action {\n\tstatic ID = 'workbench.action.togglePanel';\n\tstatic LABEL = nls.localize('togglePanel', \"Toggle Panel Visibility\");\n\n\tconstructor(\n\t\tid: string,\n\t\tname: string,\n\t\t@IPartService private partService: IPartService\n\t) {\n\t\tsuper(id, name, null);\n\t}\n\n\tpublic run(): TPromise<boolean> {\n\t\tthis.partService.setPanelHidden(!this.partService.isPanelHidden());\n\t\treturn TPromise.as(true);\n\t}\n}\n\nlet actionRegistry = <IWorkbenchActionRegistry>Registry.as(WorkbenchExtensions.WorkbenchActions);\nactionRegistry.registerWorkbenchAction(new SyncActionDescriptor(TogglePanelAction, TogglePanelAction.ID, TogglePanelAction.LABEL, { primary: KeyMod.CtrlCmd | KeyCode.KEY_J }), nls.localize('view', \"View\"));\n"]}