{"version":3,"sources":["vs/workbench/browser/parts/editor/stringEditor.ts"],"names":[],"mappings":"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","file":"vs/workbench/browser/parts/editor/stringEditor.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport nls = require('vs/nls');\nimport types = require('vs/base/common/types');\nimport {ICodeEditor} from 'vs/editor/browser/editorBrowser';\nimport {IEditorOptions, IEditorViewState} from 'vs/editor/common/editorCommon';\nimport {TextEditorOptions, EditorModel, EditorInput, EditorOptions} from 'vs/workbench/common/editor';\nimport {BaseTextEditorModel} from 'vs/workbench/common/editor/textEditorModel';\nimport {UntitledEditorInput} from 'vs/workbench/common/editor/untitledEditorInput';\nimport {BaseTextEditor} from 'vs/workbench/browser/parts/editor/textEditor';\nimport {UntitledEditorEvent, EventType} from 'vs/workbench/common/events';\nimport {ITelemetryService} from 'vs/platform/telemetry/common/telemetry';\nimport {IWorkspaceContextService} from 'vs/workbench/services/workspace/common/contextService';\nimport {IStorageService} from 'vs/platform/storage/common/storage';\nimport {IConfigurationService} from 'vs/platform/configuration/common/configuration';\nimport {IEventService} from 'vs/platform/event/common/event';\nimport {IInstantiationService} from 'vs/platform/instantiation/common/instantiation';\nimport {IMessageService} from 'vs/platform/message/common/message';\nimport {IWorkbenchEditorService} from 'vs/workbench/services/editor/common/editorService';\nimport {IModeService} from 'vs/editor/common/services/modeService';\nimport {IThemeService} from 'vs/workbench/services/themes/common/themeService';\n\n/**\n * An editor implementation that is capable of showing string inputs or promise inputs that resolve to a string.\n * Uses the Monaco TextEditor widget to show the contents.\n */\nexport class StringEditor extends BaseTextEditor {\n\n\tpublic static ID = 'workbench.editors.stringEditor';\n\n\tprivate mapResourceToEditorViewState: { [resource: string]: IEditorViewState; };\n\n\tconstructor(\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IWorkspaceContextService contextService: IWorkspaceContextService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@IMessageService messageService: IMessageService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IEventService eventService: IEventService,\n\t\t@IWorkbenchEditorService editorService: IWorkbenchEditorService,\n\t\t@IModeService modeService: IModeService,\n\t\t@IThemeService themeService: IThemeService\n\t) {\n\t\tsuper(StringEditor.ID, telemetryService, instantiationService, contextService, storageService, messageService, configurationService, eventService, editorService, modeService, themeService);\n\n\t\tthis.mapResourceToEditorViewState = Object.create(null);\n\n\t\tthis.toUnbind.push(this.eventService.addListener(EventType.UNTITLED_FILE_DELETED, (e: UntitledEditorEvent) => this.onUntitledDeletedEvent(e)));\n\t}\n\n\tprivate onUntitledDeletedEvent(e: UntitledEditorEvent): void {\n\t\tdelete this.mapResourceToEditorViewState[e.resource.toString()];\n\t}\n\n\tpublic getTitle(): string {\n\t\tif (this.input) {\n\t\t\treturn this.input.getName();\n\t\t}\n\n\t\treturn nls.localize('textEditor', \"Text Editor\");\n\t}\n\n\tpublic setInput(input: EditorInput, options: EditorOptions): TPromise<void> {\n\t\tlet oldInput = this.getInput();\n\t\tsuper.setInput(input, options);\n\n\t\t// Detect options\n\t\tlet forceOpen = options && options.forceOpen;\n\n\t\t// Same Input\n\t\tif (!forceOpen && input.matches(oldInput)) {\n\n\t\t\t// TextOptions (avoiding instanceof here for a reason, do not change!)\n\t\t\tlet textOptions = <TextEditorOptions>options;\n\t\t\tif (textOptions && types.isFunction(textOptions.apply)) {\n\t\t\t\ttextOptions.apply(this.getControl());\n\t\t\t}\n\n\t\t\treturn TPromise.as<void>(null);\n\t\t}\n\n\t\t// Remember view settings if input changes\n\t\tif (oldInput instanceof UntitledEditorInput) {\n\t\t\tthis.mapResourceToEditorViewState[oldInput.getResource().toString()] = this.getControl().saveViewState();\n\t\t}\n\n\t\t// Different Input (Reload)\n\t\treturn this.editorService.resolveEditorModel(input, true /* Reload */).then((resolvedModel: EditorModel) => {\n\n\t\t\t// Assert Model instance\n\t\t\tif (!(resolvedModel instanceof BaseTextEditorModel)) {\n\t\t\t\treturn TPromise.wrapError<void>('Invalid editor input. String editor requires a model instance of BaseTextEditorModel.');\n\t\t\t}\n\n\t\t\t// Assert that the current input is still the one we expect. This prevents a race condition when loading takes long and another input was set meanwhile\n\t\t\tif (!this.getInput() || this.getInput() !== input) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t// Set Editor Model\n\t\t\tlet textEditor = this.getControl();\n\t\t\tlet textEditorModel = (<BaseTextEditorModel>resolvedModel).textEditorModel;\n\t\t\ttextEditor.setModel(textEditorModel);\n\n\t\t\t// Apply Options from TextOptions\n\t\t\tlet optionsGotApplied = false;\n\t\t\tlet textOptions = <TextEditorOptions>options;\n\t\t\tif (textOptions && types.isFunction(textOptions.apply)) {\n\t\t\t\toptionsGotApplied = textOptions.apply(textEditor);\n\t\t\t}\n\n\t\t\t// Otherwise restore View State\n\t\t\tif (!optionsGotApplied && input instanceof UntitledEditorInput) {\n\t\t\t\tlet viewState = this.mapResourceToEditorViewState[input.getResource().toString()];\n\t\t\t\tif (viewState) {\n\t\t\t\t\ttextEditor.restoreViewState(viewState);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Apply options again because input has changed\n\t\t\ttextEditor.updateOptions(this.getCodeEditorOptions());\n\t\t});\n\t}\n\n\tprotected getCodeEditorOptions(): IEditorOptions {\n\t\tlet options = super.getCodeEditorOptions();\n\n\t\tlet input = this.getInput();\n\t\tlet isUntitled = input instanceof UntitledEditorInput;\n\t\tlet isReadonly = !isUntitled; // all string editors are readonly except for the untitled one\n\n\t\toptions.readOnly = isReadonly;\n\n\t\tlet ariaLabel: string;\n\t\tlet inputName = input && input.getName();\n\t\tif (isReadonly) {\n\t\t\tariaLabel = inputName ? nls.localize('readonlyEditorWithInputAriaLabel', \"{0}. Readonly text editor.\", inputName) : nls.localize('readonlyEditorAriaLabel', \"Readonly text editor.\");\n\t\t} else {\n\t\t\tariaLabel = inputName ? nls.localize('untitledFileEditorWithInputAriaLabel', \"{0}. Untitled file text editor.\", inputName) : nls.localize('untitledFileEditorAriaLabel', \"Untitled file text editor.\");\n\t\t}\n\n\t\toptions.ariaLabel = ariaLabel;\n\n\t\treturn options;\n\t}\n\n\t/**\n\t * Reveals the last line of this editor if it has a model set.\n\t */\n\tpublic revealLastLine(): void {\n\t\tlet codeEditor = <ICodeEditor>this.getControl();\n\t\tlet model = codeEditor.getModel();\n\t\tif (model) {\n\t\t\tlet lastLine = model.getLineCount();\n\t\t\tcodeEditor.revealLine(lastLine);\n\t\t}\n\t}\n\n\tpublic supportsSplitEditor(): boolean {\n\t\treturn true;\n\t}\n\n\tpublic clearInput(): void {\n\n\t\t// Keep editor view state in settings to restore when coming back\n\t\tif (this.input instanceof UntitledEditorInput) {\n\t\t\tthis.mapResourceToEditorViewState[(<UntitledEditorInput>this.input).getResource().toString()] = this.getControl().saveViewState();\n\t\t}\n\n\t\t// Clear Model\n\t\tthis.getControl().setModel(null);\n\n\t\tsuper.clearInput();\n\t}\n}"]}