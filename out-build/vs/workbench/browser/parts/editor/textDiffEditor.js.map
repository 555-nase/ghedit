{"version":3,"file":"textDiffEditor.js","sourceRoot":"","sources":["../../../../../../src/vs/workbench/browser/parts/editor/textDiffEditor.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport 'vs/css!./media/textdiffeditor';\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport nls = require('vs/nls');\nimport {Builder} from 'vs/base/browser/builder';\nimport {Action, IAction} from 'vs/base/common/actions';\nimport {onUnexpectedError} from 'vs/base/common/errors';\nimport types = require('vs/base/common/types');\nimport {Position} from 'vs/platform/editor/common/editor';\nimport {IDiffEditor} from 'vs/editor/browser/editorBrowser';\nimport {IDiffEditorOptions, IEditorOptions} from 'vs/editor/common/editorCommon';\nimport {BaseEditor} from 'vs/workbench/browser/parts/editor/baseEditor';\nimport {BaseTextEditor} from 'vs/workbench/browser/parts/editor/textEditor';\nimport {TextEditorOptions, TextDiffEditorOptions, EditorModel, EditorInput, EditorOptions} from 'vs/workbench/common/editor';\nimport {StringEditorInput} from 'vs/workbench/common/editor/stringEditorInput';\nimport {ResourceEditorInput} from 'vs/workbench/common/editor/resourceEditorInput';\nimport {DiffEditorInput} from 'vs/workbench/common/editor/diffEditorInput';\nimport {DiffNavigator} from 'vs/editor/contrib/diffNavigator/common/diffNavigator';\nimport {DiffEditorWidget} from 'vs/editor/browser/widget/diffEditorWidget';\nimport {TextDiffEditorModel} from 'vs/workbench/common/editor/textDiffEditorModel';\nimport {DelegatingWorkbenchEditorService} from 'vs/workbench/services/editor/browser/editorService';\nimport {IFileOperationResult, FileOperationResult} from 'vs/platform/files/common/files';\nimport {ITelemetryService} from 'vs/platform/telemetry/common/telemetry';\nimport {IWorkspaceContextService} from 'vs/workbench/services/workspace/common/contextService';\nimport {IStorageService} from 'vs/platform/storage/common/storage';\nimport {IConfigurationService} from 'vs/platform/configuration/common/configuration';\nimport {IEventService} from 'vs/platform/event/common/event';\nimport {IInstantiationService} from 'vs/platform/instantiation/common/instantiation';\nimport {IMessageService} from 'vs/platform/message/common/message';\nimport {IWorkbenchEditorService} from 'vs/workbench/services/editor/common/editorService';\nimport {IModeService} from 'vs/editor/common/services/modeService';\nimport {IKeybindingService, IKeybindingContextKey} from 'vs/platform/keybinding/common/keybindingService';\nimport {IThemeService} from 'vs/workbench/services/themes/common/themeService';\n\n/**\n * The text editor that leverages the monaco diff text editor for the editing experience.\n */\nexport class TextDiffEditor extends BaseTextEditor {\n\n\tpublic static ID = 'workbench.editors.textDiffEditor';\n\n\tprivate diffNavigator: DiffNavigator;\n\tprivate nextDiffAction: NavigateAction;\n\tprivate previousDiffAction: NavigateAction;\n\n\tprivate textDiffEditorVisible: IKeybindingContextKey<boolean>;\n\n\tconstructor(\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IWorkspaceContextService contextService: IWorkspaceContextService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@IMessageService messageService: IMessageService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IEventService eventService: IEventService,\n\t\t@IWorkbenchEditorService editorService: IWorkbenchEditorService,\n\t\t@IModeService modeService: IModeService,\n\t\t@IKeybindingService keybindingService: IKeybindingService,\n\t\t@IThemeService themeService: IThemeService\n\t) {\n\t\tsuper(TextDiffEditor.ID, telemetryService, instantiationService, contextService, storageService, messageService, configurationService, eventService, editorService, modeService, themeService);\n\n\t\tthis.textDiffEditorVisible = keybindingService.createKey<boolean>('textCompareEditorVisible', false);\n\t}\n\n\tpublic getTitle(): string {\n\t\tif (this.input) {\n\t\t\treturn this.input.getName();\n\t\t}\n\n\t\treturn nls.localize('textDiffEditor', \"Text Diff Editor\");\n\t}\n\n\tpublic createEditorControl(parent: Builder): IDiffEditor {\n\t\tthis.nextDiffAction = new NavigateAction(this, true);\n\t\tthis.previousDiffAction = new NavigateAction(this, false);\n\n\t\tlet delegatingService = this.instantiationService.createInstance(DelegatingWorkbenchEditorService, this, (editor: BaseEditor, input: EditorInput, options?: EditorOptions, arg4?: any) => {\n\n\t\t\t// Check if arg4 is a position argument that differs from this editors position\n\t\t\tif (types.isUndefinedOrNull(arg4) || arg4 === false || arg4 === this.position) {\n\t\t\t\tlet activeDiffInput = <DiffEditorInput>this.getInput();\n\t\t\t\tif (input && options && activeDiffInput) {\n\n\t\t\t\t\t// Input matches modified side of the diff editor: perform the action on modified side\n\t\t\t\t\tif (input.matches(activeDiffInput.getModifiedInput())) {\n\t\t\t\t\t\treturn this.setInput(this.getInput(), options).then(() => {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\t// Input matches original side of the diff editor: perform the action on original side\n\t\t\t\t\telse if (input.matches(activeDiffInput.getOriginalInput())) {\n\t\t\t\t\t\tlet originalEditor = this.getControl().getOriginalEditor();\n\t\t\t\t\t\tif (options instanceof TextEditorOptions) {\n\t\t\t\t\t\t\t(<TextEditorOptions>options).apply(originalEditor);\n\n\t\t\t\t\t\t\treturn TPromise.as<boolean>(true);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn TPromise.as<boolean>(false);\n\t\t});\n\n\t\t// Create a special child of instantiator that will delegate all calls to openEditor() to the same diff editor if the input matches with the modified one\n\t\tlet diffEditorInstantiator = this.instantiationService.createChild({\n\t\t\teditorService: delegatingService\n\t\t});\n\n\t\treturn diffEditorInstantiator.createInstance(DiffEditorWidget, parent.getHTMLElement(), this.getCodeEditorOptions());\n\t}\n\n\tpublic setInput(input: EditorInput, options: EditorOptions): TPromise<void> {\n\t\tlet oldInput = this.getInput();\n\t\tsuper.setInput(input, options);\n\n\t\t// Detect options\n\t\tlet forceOpen = options && options.forceOpen;\n\n\t\t// Same Input\n\t\tif (!forceOpen && input.matches(oldInput)) {\n\n\t\t\t// TextOptions (avoiding instanceof here for a reason, do not change!)\n\t\t\tlet textOptions = <TextEditorOptions>options;\n\t\t\tif (textOptions && types.isFunction(textOptions.apply)) {\n\t\t\t\ttextOptions.apply(<IDiffEditor>this.getControl());\n\t\t\t}\n\n\t\t\treturn TPromise.as<void>(null);\n\t\t}\n\n\t\t// Dispose previous diff navigator\n\t\tif (this.diffNavigator) {\n\t\t\tthis.diffNavigator.dispose();\n\t\t}\n\n\t\t// Different Input (Reload)\n\t\treturn this.editorService.resolveEditorModel(input, true /* Reload */).then((resolvedModel: EditorModel) => {\n\n\t\t\t// Assert Model Instance\n\t\t\tif (!(resolvedModel instanceof TextDiffEditorModel) && this.openAsBinary(input, options)) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t// Assert that the current input is still the one we expect. This prevents a race condition when loading a diff takes long and another input was set meanwhile\n\t\t\tif (!this.getInput() || this.getInput() !== input) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t// Editor\n\t\t\tlet diffEditor = <IDiffEditor>this.getControl();\n\t\t\tdiffEditor.setModel((<TextDiffEditorModel>resolvedModel).textDiffEditorModel);\n\n\t\t\t// Respect text diff editor options\n\t\t\tlet autoRevealFirstChange = true;\n\t\t\tif (options instanceof TextDiffEditorOptions) {\n\t\t\t\tlet textDiffOptions = (<TextDiffEditorOptions>options);\n\t\t\t\tautoRevealFirstChange = !types.isUndefinedOrNull(textDiffOptions.autoRevealFirstChange) ? textDiffOptions.autoRevealFirstChange : autoRevealFirstChange;\n\t\t\t}\n\n\t\t\t// listen on diff updated changes to reveal the first change\n\t\t\tthis.diffNavigator = new DiffNavigator(diffEditor, {\n\t\t\t\talwaysRevealFirst: autoRevealFirstChange\n\t\t\t});\n\t\t\tthis.diffNavigator.addListener(DiffNavigator.Events.UPDATED, () => {\n\t\t\t\tthis.nextDiffAction.updateEnablement();\n\t\t\t\tthis.previousDiffAction.updateEnablement();\n\t\t\t});\n\n\t\t\t// Handle TextOptions\n\t\t\tif (options && types.isFunction((<TextEditorOptions>options).apply)) {\n\t\t\t\t(<TextEditorOptions>options).apply(<IDiffEditor>diffEditor);\n\t\t\t}\n\n\t\t\t// Apply options again because input has changed\n\t\t\tdiffEditor.updateOptions(this.getCodeEditorOptions());\n\t\t}, (error) => {\n\n\t\t\t// In case we tried to open a file and the response indicates that this is not a text file, fallback to binary diff.\n\t\t\tif (this.isFileBinaryError(error) && this.openAsBinary(input, options)) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t// Otherwise make sure the error bubbles up\n\t\t\treturn TPromise.wrapError(error);\n\t\t});\n\t}\n\n\tprivate openAsBinary(input: EditorInput, options: EditorOptions): boolean {\n\t\tif (input instanceof DiffEditorInput) {\n\t\t\tlet originalInput = input.originalInput;\n\t\t\tlet modifiedInput = input.modifiedInput;\n\n\t\t\tlet binaryDiffInput = new DiffEditorInput(input.getName(), input.getDescription(), originalInput, modifiedInput, true);\n\n\t\t\tthis.editorService.openEditor(binaryDiffInput, options, this.position).done(null, onUnexpectedError);\n\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tprotected getCodeEditorOptions(): IEditorOptions {\n\t\tlet options: IDiffEditorOptions = super.getCodeEditorOptions();\n\n\t\tlet input = this.input;\n\t\tif (input && types.isFunction((<DiffEditorInput>input).getModifiedInput)) {\n\t\t\tlet modifiedInput = (<DiffEditorInput>input).getModifiedInput();\n\t\t\tlet readOnly = modifiedInput instanceof StringEditorInput || modifiedInput instanceof ResourceEditorInput;\n\n\t\t\toptions.readOnly = readOnly;\n\n\t\t\tlet ariaLabel: string;\n\t\t\tlet inputName = input && input.getName();\n\t\t\tif (readOnly) {\n\t\t\t\tariaLabel = inputName ? nls.localize('readonlyEditorWithInputAriaLabel', \"{0}. Readonly text compare editor.\", inputName) : nls.localize('readonlyEditorAriaLabel', \"Readonly text compare editor.\");\n\t\t\t} else {\n\t\t\t\tariaLabel = inputName ? nls.localize('editableEditorWithInputAriaLabel', \"{0}. Text file compare editor.\", inputName) : nls.localize('editableEditorAriaLabel', \"Text file compare editor.\");\n\t\t\t}\n\n\t\t\toptions.ariaLabel = ariaLabel;\n\t\t}\n\n\t\treturn options;\n\t}\n\n\tprivate isFileBinaryError(error: Error[]): boolean;\n\tprivate isFileBinaryError(error: Error): boolean;\n\tprivate isFileBinaryError(error: any): boolean {\n\t\tif (types.isArray(error)) {\n\t\t\tlet errors = <Error[]>error;\n\t\t\treturn errors.some((e) => this.isFileBinaryError(e));\n\t\t}\n\n\t\treturn (<IFileOperationResult>error).fileOperationResult === FileOperationResult.FILE_IS_BINARY;\n\t}\n\n\tpublic clearInput(): void {\n\n\t\t// Dispose previous diff navigator\n\t\tif (this.diffNavigator) {\n\t\t\tthis.diffNavigator.dispose();\n\t\t}\n\n\t\t// Clear Model\n\t\tthis.getControl().setModel(null);\n\n\t\t// Pass to super\n\t\tsuper.clearInput();\n\t}\n\n\tpublic setVisible(visible: boolean, position: Position): TPromise<void> {\n\t\tthis.textDiffEditorVisible.set(visible);\n\n\t\treturn super.setVisible(visible, position);\n\t}\n\n\tpublic getDiffNavigator(): DiffNavigator {\n\t\treturn this.diffNavigator;\n\t}\n\n\tpublic getActions(): IAction[] {\n\t\treturn [\n\t\t\tthis.previousDiffAction,\n\t\t\tthis.nextDiffAction\n\t\t];\n\t}\n\n\tpublic getSecondaryActions(): IAction[] {\n\t\tlet actions = super.getSecondaryActions();\n\n\t\tconst control = this.getControl();\n\n\t\tlet inlineModeActive = control && !control.renderSideBySide;\n\t\tlet inlineLabel = nls.localize('inlineDiffLabel', \"Switch to Inline View\");\n\t\tlet sideBySideLabel = nls.localize('sideBySideDiffLabel', \"Switch to Side by Side View\");\n\n\t\t// Action to toggle editor mode from inline to side by side\n\t\tlet toggleEditorModeAction = new Action('toggle.diff.editorMode', inlineModeActive ? sideBySideLabel : inlineLabel, null, true, () => {\n\t\t\tthis.getControl().updateOptions(<IDiffEditorOptions>{\n\t\t\t\trenderSideBySide: inlineModeActive\n\t\t\t});\n\n\t\t\tinlineModeActive = !inlineModeActive;\n\t\t\ttoggleEditorModeAction.label = inlineModeActive ? sideBySideLabel : inlineLabel;\n\n\t\t\treturn TPromise.as(true);\n\t\t});\n\n\t\ttoggleEditorModeAction.order = 50; // Closer to the end\n\n\t\tactions.push(...[\n\t\t\ttoggleEditorModeAction\n\t\t]);\n\n\t\treturn actions;\n\t}\n\n\tpublic getControl(): IDiffEditor {\n\t\treturn <any>super.getControl();\n\t}\n\n\tpublic dispose(): void {\n\n\t\t// Dispose previous diff navigator\n\t\tif (this.diffNavigator) {\n\t\t\tthis.diffNavigator.dispose();\n\t\t}\n\n\t\tsuper.dispose();\n\t}\n}\n\nclass NavigateAction extends Action {\n\tstatic ID_NEXT = 'workbench.action.compareEditor.nextChange';\n\tstatic ID_PREV = 'workbench.action.compareEditor.previousChange';\n\n\tprivate editor: TextDiffEditor;\n\tprivate next: boolean;\n\n\tconstructor(editor: TextDiffEditor, next: boolean) {\n\t\tsuper(next ? NavigateAction.ID_NEXT : NavigateAction.ID_PREV);\n\n\t\tthis.editor = editor;\n\t\tthis.next = next;\n\n\t\tthis.label = this.next ? nls.localize('navigate.next.label', \"Next Change\") : nls.localize('navigate.prev.label', \"Previous Change\");\n\t\tthis.class = this.next ? 'textdiff-editor-action next' : 'textdiff-editor-action previous';\n\t\tthis.enabled = false;\n\t}\n\n\tpublic run(): TPromise<any> {\n\t\tif (this.next) {\n\t\t\tthis.editor.getDiffNavigator().next();\n\t\t} else {\n\t\t\tthis.editor.getDiffNavigator().previous();\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tpublic updateEnablement(): void {\n\t\tthis.enabled = this.editor.getDiffNavigator().canNavigate();\n\t}\n}"]}