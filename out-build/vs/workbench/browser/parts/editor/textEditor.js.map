{"version":3,"file":"textEditor.js","sourceRoot":"","sources":["../../../../../../src/vs/workbench/browser/parts/editor/textEditor.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport 'vs/css!./media/texteditor';\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport {Dimension, Builder} from 'vs/base/browser/builder';\nimport objects = require('vs/base/common/objects');\nimport {CodeEditorWidget} from 'vs/editor/browser/widget/codeEditorWidget';\nimport {IEditorViewState} from 'vs/editor/common/editorCommon';\nimport {OptionsChangeEvent, EventType as WorkbenchEventType, EditorEvent, TextEditorSelectionEvent} from 'vs/workbench/common/events';\nimport {Scope} from 'vs/workbench/common/memento';\nimport {EditorInput, EditorOptions} from 'vs/workbench/common/editor';\nimport {BaseEditor} from 'vs/workbench/browser/parts/editor/baseEditor';\nimport {EditorConfiguration} from 'vs/editor/common/config/commonEditorConfig';\nimport {IEditorSelection, IEditor, EventType, IConfigurationChangedEvent, IModelContentChangedEvent, IModelOptionsChangedEvent, IModelModeChangedEvent, ICursorPositionChangedEvent, IEditorOptions} from 'vs/editor/common/editorCommon';\nimport {IWorkspaceContextService} from 'vs/workbench/services/workspace/common/contextService';\nimport {IFilesConfiguration} from 'vs/platform/files/common/files';\nimport {Position} from 'vs/platform/editor/common/editor';\nimport {IStorageService} from 'vs/platform/storage/common/storage';\nimport {IConfigurationService, IConfigurationServiceEvent, ConfigurationServiceEventTypes} from 'vs/platform/configuration/common/configuration';\nimport {IEventService} from 'vs/platform/event/common/event';\nimport {IInstantiationService} from 'vs/platform/instantiation/common/instantiation';\nimport {IMessageService} from 'vs/platform/message/common/message';\nimport {ITelemetryService} from 'vs/platform/telemetry/common/telemetry';\nimport {IWorkbenchEditorService} from 'vs/workbench/services/editor/common/editorService';\nimport {IModeService} from 'vs/editor/common/services/modeService';\nimport {IThemeService} from 'vs/workbench/services/themes/common/themeService';\n\nconst EDITOR_VIEW_STATE_PREFERENCE_KEY = 'editorViewState';\n\n/**\n * The base class of editors that leverage the monaco text editor for the editing experience. This class is only intended to\n * be subclassed and not instantiated.\n */\nexport abstract class BaseTextEditor extends BaseEditor {\n\tprivate editorControl: IEditor;\n\tprivate _editorContainer: Builder;\n\n\tconstructor(\n\t\tid: string,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IInstantiationService private _instantiationService: IInstantiationService,\n\t\t@IWorkspaceContextService private _contextService: IWorkspaceContextService,\n\t\t@IStorageService private _storageService: IStorageService,\n\t\t@IMessageService private _messageService: IMessageService,\n\t\t@IConfigurationService private configurationService: IConfigurationService,\n\t\t@IEventService private _eventService: IEventService,\n\t\t@IWorkbenchEditorService private _editorService: IWorkbenchEditorService,\n\t\t@IModeService private _modeService: IModeService,\n\t\t@IThemeService private _themeService: IThemeService\n\t) {\n\t\tsuper(id, telemetryService);\n\n\t\tthis.toUnbind.push(this._eventService.addListener(WorkbenchEventType.WORKBENCH_OPTIONS_CHANGED, (e) => this.onOptionsChanged(e)));\n\t\tthis.toUnbind.push(this.configurationService.addListener(ConfigurationServiceEventTypes.UPDATED, (e: IConfigurationServiceEvent) => this.applyConfiguration(e.config)));\n\n\t\tthis.toUnbind.push(_themeService.onDidThemeChange(_ => this.onThemeChanged()).dispose);\n}\n\n\tpublic get instantiationService(): IInstantiationService {\n\t\treturn this._instantiationService;\n\t}\n\n\tpublic get contextService(): IWorkspaceContextService {\n\t\treturn this._contextService;\n\t}\n\n\tpublic get storageService(): IStorageService {\n\t\treturn this._storageService;\n\t}\n\n\tpublic get messageService() {\n\t\treturn this._messageService;\n\t}\n\n\tprotected applyConfiguration(configuration: IFilesConfiguration): void {\n\n\t\t// Update Editor with configuration and editor settings\n\t\tif (this.editorControl) {\n\t\t\tlet specificEditorSettings = this.getCodeEditorOptions();\n\t\t\tconfiguration = objects.clone(configuration); // dont modify original config\n\t\t\tobjects.assign(configuration[EditorConfiguration.EDITOR_SECTION], specificEditorSettings);\n\n\t\t\tEditorConfiguration.apply(configuration, this.editorControl);\n\t\t}\n\n\t\t// Update Languages\n\t\tthis._modeService.configureAllModes(configuration);\n\t}\n\n\tprivate onOptionsChanged(event: OptionsChangeEvent): void {\n\t\tif (this.editorControl) {\n\t\t\tthis.editorControl.updateOptions(this.getCodeEditorOptions());\n\t\t}\n\t}\n\n\tprivate onThemeChanged(): void {\n\t\tthis.editorControl.updateOptions(this.getCodeEditorOptions());\n\t}\n\n\tprotected getCodeEditorOptions(): IEditorOptions {\n\t\tlet baseOptions: IEditorOptions = {\n\t\t\toverviewRulerLanes: 3,\n\t\t\treadOnly: this.contextService.getOptions().readOnly,\n\t\t\tglyphMargin: true,\n\t\t\tlineNumbersMinChars: 3,\n\t\t\ttheme: this._themeService.getTheme()\n\t\t};\n\n\t\t// Always mixin editor options from the context into our set to allow for override\n\t\treturn objects.mixin(baseOptions, this.contextService.getOptions().editor);\n\t}\n\n\tpublic get eventService(): IEventService {\n\t\treturn this._eventService;\n\t}\n\n\tpublic get editorService() {\n\t\treturn this._editorService;\n\t}\n\n\tpublic get editorContainer(): Builder {\n\t\treturn this._editorContainer;\n\t}\n\n\tpublic createEditor(parent: Builder): void {\n\n\t\t// Editor for Text\n\t\tthis._editorContainer = parent;\n\t\tthis.editorControl = this.createEditorControl(parent);\n\n\t\t// Hook Listener for Selection changes\n\t\tthis.toUnbind.push(this.editorControl.addListener(EventType.CursorPositionChanged, (event: ICursorPositionChangedEvent) => {\n\t\t\tlet selection = this.editorControl.getSelection();\n\t\t\tthis.eventService.emit(WorkbenchEventType.TEXT_EDITOR_SELECTION_CHANGED, new TextEditorSelectionEvent(selection, this, this.getId(), this.input, null, this.position, event));\n\t\t}));\n\n\t\t// Hook Listener for mode changes\n\t\tthis.toUnbind.push(this.editorControl.addListener(EventType.ModelModeChanged, (event: IModelModeChangedEvent) => {\n\t\t\tthis.eventService.emit(WorkbenchEventType.TEXT_EDITOR_MODE_CHANGED, new EditorEvent(this, this.getId(), this.input, null, this.position, event));\n\t\t}));\n\n\t\t// Hook Listener for content changes\n\t\tthis.toUnbind.push(this.editorControl.addListener(EventType.ModelContentChanged, (event: IModelContentChangedEvent) => {\n\t\t\tthis.eventService.emit(WorkbenchEventType.TEXT_EDITOR_CONTENT_CHANGED, new EditorEvent(this, this.getId(), this.input, null, this.position, event));\n\t\t}));\n\n\t\t// Hook Listener for content options changes\n\t\tthis.toUnbind.push(this.editorControl.addListener(EventType.ModelOptionsChanged, (event: IModelOptionsChangedEvent) => {\n\t\t\tthis.eventService.emit(WorkbenchEventType.TEXT_EDITOR_CONTENT_OPTIONS_CHANGED, new EditorEvent(this, this.getId(), this.input, null, this.position, event));\n\t\t}));\n\n\t\t// Hook Listener for options changes\n\t\tthis.toUnbind.push(this.editorControl.addListener(EventType.ConfigurationChanged, (event: IConfigurationChangedEvent) => {\n\t\t\tthis.eventService.emit(WorkbenchEventType.TEXT_EDITOR_CONFIGURATION_CHANGED, new EditorEvent(this, this.getId(), this.input, null, this.position, event));\n\t\t}));\n\n\t\t// Configuration\n\t\tthis.applyConfiguration(this.configurationService.getConfiguration<IFilesConfiguration>());\n\t}\n\n\t/**\n\t * This method creates and returns the text editor control to be used. Subclasses can override to\n\t * provide their own editor control that should be used (e.g. a DiffEditor).\n\t */\n\tpublic createEditorControl(parent: Builder): IEditor {\n\t\treturn this._instantiationService.createInstance(CodeEditorWidget, parent.getHTMLElement(), this.getCodeEditorOptions());\n\t}\n\n\tpublic setInput(input: EditorInput, options: EditorOptions): TPromise<void> {\n\t\treturn super.setInput(input, options).then(() => {\n\t\t\tthis.editorControl.updateOptions(this.getCodeEditorOptions()); // support input specific editor options\n\t\t});\n\t}\n\n\tpublic setVisible(visible: boolean, position: Position = null): TPromise<void> {\n\t\tlet promise = super.setVisible(visible, position);\n\n\t\t// Pass on to Editor\n\t\tif (visible) {\n\t\t\tthis.editorControl.onVisible();\n\t\t} else {\n\t\t\tthis.editorControl.onHide();\n\t\t}\n\n\t\treturn promise;\n\t}\n\n\tpublic focus(): void {\n\t\tthis.editorControl.focus();\n\t}\n\n\tpublic layout(dimension: Dimension): void {\n\n\t\t// Pass on to Editor\n\t\tthis.editorControl.layout(dimension);\n\t}\n\n\tpublic getControl(): IEditor {\n\t\treturn this.editorControl;\n\t}\n\n\tpublic getSelection(): IEditorSelection {\n\t\treturn this.editorControl.getSelection();\n\t}\n\n\t/**\n\t * Saves the text editor view state under the given key.\n\t */\n\tpublic saveTextEditorViewState(storageService: IStorageService, key: string): void {\n\t\tlet editorViewState = this.editorControl.saveViewState();\n\n\t\tconst memento = this.getMemento(storageService, Scope.WORKSPACE);\n\t\tlet editorViewStateMemento = memento[EDITOR_VIEW_STATE_PREFERENCE_KEY];\n\t\tif (!editorViewStateMemento) {\n\t\t\teditorViewStateMemento = {};\n\t\t\tmemento[EDITOR_VIEW_STATE_PREFERENCE_KEY] = editorViewStateMemento;\n\t\t}\n\n\t\teditorViewStateMemento[key] = editorViewState;\n\t}\n\n\t/**\n\t * Clears the text editor view state under the given key.\n\t */\n\tpublic clearTextEditorViewState(storageService: IStorageService, keys: string[]): void {\n\t\tconst memento = this.getMemento(storageService, Scope.WORKSPACE);\n\t\tlet editorViewStateMemento = memento[EDITOR_VIEW_STATE_PREFERENCE_KEY];\n\t\tif (editorViewStateMemento) {\n\t\t\tkeys.forEach((key) => delete editorViewStateMemento[key]);\n\t\t}\n\t}\n\n\t/**\n\t * Loads the text editor view state for the given key and returns it.\n\t */\n\tpublic loadTextEditorViewState(storageService: IStorageService, key: string): IEditorViewState {\n\t\tconst memento = this.getMemento(storageService, Scope.WORKSPACE);\n\t\tlet editorViewStateMemento = memento[EDITOR_VIEW_STATE_PREFERENCE_KEY];\n\t\tif (editorViewStateMemento) {\n\t\t\treturn editorViewStateMemento[key];\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tpublic dispose(): void {\n\n\t\t// Destroy Editor Control\n\t\tthis.editorControl.destroy();\n\n\t\tsuper.dispose();\n\t}\n}"]}