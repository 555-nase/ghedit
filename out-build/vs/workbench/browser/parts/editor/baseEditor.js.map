{"version":3,"file":"baseEditor.js","sourceRoot":"","sources":["../../../../../../src/vs/workbench/browser/parts/editor/baseEditor.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport {Action, IAction} from 'vs/base/common/actions';\nimport {ActionBarContributor} from 'vs/workbench/browser/actionBarRegistry';\nimport types = require('vs/base/common/types');\nimport {Builder} from 'vs/base/browser/builder';\nimport {EventType, EditorEvent} from 'vs/workbench/common/events';\nimport {Registry} from 'vs/platform/platform';\nimport {Panel} from 'vs/workbench/browser/panel';\nimport {EditorInput, IFileEditorInput, EditorOptions} from 'vs/workbench/common/editor';\nimport {IEditor, Position, POSITIONS} from 'vs/platform/editor/common/editor';\nimport {IInstantiationService, IConstructorSignature0} from 'vs/platform/instantiation/common/instantiation';\nimport {SyncDescriptor, AsyncDescriptor} from 'vs/platform/instantiation/common/descriptors';\nimport {ITelemetryService} from 'vs/platform/telemetry/common/telemetry';\n\n/**\n * The base class of editors in the workbench. Editors register themselves for specific editor inputs.\n * Editors are layed out in the editor part of the workbench. Only one editor can be open at a time.\n * Each editor has a minimized representation that is good enough to provide some information about the\n * state of the editor data.\n * The workbench will keep an editor alive after it has been created and show/hide it based on\n * user interaction. The lifecycle of a editor goes in the order create(), setVisible(true|false),\n * layout(), setInput(), focus(), dispose(). During use of the workbench, a editor will often receive a\n * clearInput, setVisible, layout and focus call, but only one create and dispose call.\n *\n * This class is only intended to be subclassed and not instantiated.\n */\nexport abstract class BaseEditor extends Panel implements IEditor {\n\tprivate _input: EditorInput;\n\tprivate _options: EditorOptions;\n\tprivate _position: Position;\n\n\tconstructor(id: string, telemetryService: ITelemetryService) {\n\t\tsuper(id, telemetryService);\n\t}\n\n\tpublic get input(): EditorInput {\n\t\treturn this._input;\n\t}\n\n\t/**\n\t * Returns the current input of this editor or null if none.\n\t */\n\tpublic getInput(): EditorInput {\n\t\treturn this._input || null;\n\t}\n\n\tpublic get options(): EditorOptions {\n\t\treturn this._options;\n\t}\n\n\t/**\n\t * Returns the current options of this editor or null if none.\n\t */\n\tpublic getOptions(): EditorOptions {\n\t\treturn this._options || null;\n\t}\n\n\t/**\n\t * Note: Clients should not call this method, the monaco workbench calls this\n\t * method. Calling it otherwise may result in unexpected behavior.\n\t *\n\t * Sets the given input with the options to the part. An editor has to deal with the\n\t * situation that the same input is being set with different options.\n\t */\n\tpublic setInput(input: EditorInput, options: EditorOptions): TPromise<void> {\n\t\tthis._input = input;\n\t\tthis._options = options;\n\n\t\treturn TPromise.as<void>(null);\n\t}\n\n\t/**\n\t * Called to indicate to the editor that the input should be cleared and resources associated with the\n\t * input should be freed.\n\t */\n\tpublic clearInput(): void {\n\t\tthis._input = null;\n\t\tthis._options = null;\n\t}\n\n\tpublic create(parent: Builder): TPromise<void> {\n\t\tlet res = super.create(parent);\n\n\t\t// Create Editor\n\t\tthis.createEditor(parent);\n\n\t\treturn res;\n\t}\n\n\t/**\n\t * Called to create the editor in the parent builder.\n\t */\n\tpublic abstract createEditor(parent: Builder): void;\n\n\t/**\n\t * Overload this function to allow for passing in a position argument.\n\t */\n\tpublic setVisible(visible: boolean, position: Position = null): TPromise<void> {\n\t\tlet promise = super.setVisible(visible);\n\n\t\tthis._position = position;\n\n\t\treturn promise;\n\t}\n\n\t/**\n\t * Called when the position of the editor changes while it is visible.\n\t */\n\tpublic changePosition(position: Position): void {\n\t\tthis._position = position;\n\t\tthis.emit(EventType.EDITOR_POSITION_CHANGED, new EditorEvent(this, this.getId(), this.input, this.options, this.position));\n\t}\n\n\t/**\n\t * The position this editor is showing in or null if none.\n\t */\n\tpublic get position(): Position {\n\t\treturn this._position;\n\t}\n\n\t/**\n\t * Controls if the editor shows an action to split the input of the editor to the side. Subclasses should override\n\t * if they are capable of showing the same editor input side by side.\n\t */\n\tpublic supportsSplitEditor(): boolean {\n\t\treturn false;\n\t}\n\n\tpublic dispose(): void {\n\t\tthis._input = null;\n\t\tthis._options = null;\n\n\t\t// Super Dispose\n\t\tsuper.dispose();\n\t}\n}\n\n/**\n * A lightweight descriptor of an editor. The descriptor is deferred so that heavy editors\n * can load lazily in the workbench.\n */\nexport class EditorDescriptor extends AsyncDescriptor<BaseEditor> {\n\tprivate id: string;\n\tprivate name: string;\n\n\tconstructor(id: string, name: string, moduleId: string, ctorName: string) {\n\t\tsuper(moduleId, ctorName);\n\n\t\tthis.id = id;\n\t\tthis.name = name;\n\t}\n\n\tpublic getId(): string {\n\t\treturn this.id;\n\t}\n\n\tpublic getName(): string {\n\t\treturn this.name;\n\t}\n\n\tpublic describes(obj: any): boolean {\n\t\treturn obj instanceof BaseEditor && (<BaseEditor>obj).getId() === this.id;\n\t}\n}\n\nexport const Extensions = {\n\tEditors: 'workbench.contributions.editors'\n};\n\nexport interface IEditorRegistry {\n\n\t/**\n\t * Registers an editor to the platform for the given input type. The second parameter also supports an\n\t * array of input classes to be passed in. If the more than one editor is registered for the same editor\n\t * input, the input itself will be asked which editor it prefers if this method is provided. Otherwise\n\t * the first editor in the list will be returned.\n\t *\n\t * @param editorInputDescriptor a constructor function that returns an instance of EditorInput for which the\n\t * registered editor should be used for.\n\t */\n\tregisterEditor(descriptor: EditorDescriptor, editorInputDescriptor: SyncDescriptor<EditorInput>): void;\n\tregisterEditor(descriptor: EditorDescriptor, editorInputDescriptor: SyncDescriptor<EditorInput>[]): void;\n\n\t/**\n\t * Returns the editor descriptor for the given input or null if none.\n\t */\n\tgetEditor(input: EditorInput): EditorDescriptor;\n\n\t/**\n\t * Returns the editor descriptor for the given identifier or null if none.\n\t */\n\tgetEditorById(editorId: string): EditorDescriptor;\n\n\t/**\n\t * Returns an array of registered editors known to the platform.\n\t */\n\tgetEditors(): EditorDescriptor[];\n\n\t/**\n\t * Registers the default input to be used for files in the workbench.\n\t *\n\t * @param editorInputDescriptor a descriptor that resolves to an instance of EditorInput that\n\t * should be used to handle file inputs.\n\t */\n\tregisterDefaultFileInput(editorInputDescriptor: AsyncDescriptor<IFileEditorInput>): void;\n\n\t/**\n\t * Returns a descriptor of the default input to be used for files in the workbench.\n\t *\n\t * @return a descriptor that resolves to an instance of EditorInput that should be used to handle\n\t * file inputs.\n\t */\n\tgetDefaultFileInput(): AsyncDescriptor<IFileEditorInput>;\n\n\t/**\n\t * Registers a editor input factory for the given editor input to the registry. An editor input factory\n\t * is capable of serializing and deserializing editor inputs from string data.\n\t *\n\t * @param editorInputId the identifier of the editor input\n\t * @param factory the editor input factory for serialization/deserialization\n\t */\n\tregisterEditorInputFactory(editorInputId: string, ctor: IConstructorSignature0<IEditorInputFactory>): void;\n\n\t/**\n\t * Returns the editor input factory for the given editor input.\n\t *\n\t * @param editorInputId the identifier of the editor input\n\t */\n\tgetEditorInputFactory(editorInputId: string): IEditorInputFactory;\n\n\tsetInstantiationService(service: IInstantiationService): void;\n}\n\nexport interface IEditorInputFactory {\n\n\t/**\n\t * Returns a string representation of the provided editor input that contains enough information\n\t * to deserialize back to the original editor input from the deserialize() method.\n\t */\n\tserialize(editorInput: EditorInput): string;\n\n\t/**\n\t * Returns an editor input from the provided serialized form of the editor input. This form matches\n\t * the value returned from the serialize() method.\n\t */\n\tdeserialize(instantiationService: IInstantiationService, serializedEditorInput: string): EditorInput;\n}\n\nconst INPUT_DESCRIPTORS_PROPERTY = '__$inputDescriptors';\n\nclass EditorRegistry implements IEditorRegistry {\n\tprivate editors: EditorDescriptor[];\n\tprivate instantiationService: IInstantiationService;\n\tprivate defaultFileInputDescriptor: AsyncDescriptor<IFileEditorInput>;\n\tprivate editorInputFactoryConstructors: { [editorInputId: string]: IConstructorSignature0<IEditorInputFactory> } = Object.create(null);\n\tprivate editorInputFactoryInstances: { [editorInputId: string]: IEditorInputFactory } = Object.create(null);\n\n\tconstructor() {\n\t\tthis.editors = [];\n\t}\n\n\tpublic setInstantiationService(service: IInstantiationService): void {\n\t\tthis.instantiationService = service;\n\n\t\tfor (let key in this.editorInputFactoryConstructors) {\n\t\t\tlet element = this.editorInputFactoryConstructors[key];\n\t\t\tthis.createEditorInputFactory(key, element);\n\t\t}\n\n\t\tthis.editorInputFactoryConstructors = {};\n\t}\n\n\tprivate createEditorInputFactory(editorInputId: string, ctor: IConstructorSignature0<IEditorInputFactory>): void {\n\t\tlet instance = this.instantiationService.createInstance(ctor);\n\t\tthis.editorInputFactoryInstances[editorInputId] = instance;\n\t}\n\n\tpublic registerEditor(descriptor: EditorDescriptor, editorInputDescriptor: SyncDescriptor<EditorInput>): void;\n\tpublic registerEditor(descriptor: EditorDescriptor, editorInputDescriptor: SyncDescriptor<EditorInput>[]): void;\n\tpublic registerEditor(descriptor: EditorDescriptor, editorInputDescriptor: any): void {\n\n\t\t// Support both non-array and array parameter\n\t\tlet inputDescriptors: SyncDescriptor<EditorInput>[] = [];\n\t\tif (!types.isArray(editorInputDescriptor)) {\n\t\t\tinputDescriptors.push(editorInputDescriptor);\n\t\t} else {\n\t\t\tinputDescriptors = editorInputDescriptor;\n\t\t}\n\n\t\t// Register (Support multiple Editors per Input)\n\t\tdescriptor[INPUT_DESCRIPTORS_PROPERTY] = inputDescriptors;\n\t\tthis.editors.push(descriptor);\n\t}\n\n\tpublic getEditor(input: EditorInput): EditorDescriptor {\n\t\tlet findEditorDescriptors = (input: EditorInput, byInstanceOf?: boolean): EditorDescriptor[]=> {\n\t\t\tlet matchingDescriptors: EditorDescriptor[] = [];\n\n\t\t\tfor (let i = 0; i < this.editors.length; i++) {\n\t\t\t\tlet editor = this.editors[i];\n\t\t\t\tlet inputDescriptors = <SyncDescriptor<EditorInput>[]>editor[INPUT_DESCRIPTORS_PROPERTY];\n\t\t\t\tfor (let j = 0; j < inputDescriptors.length; j++) {\n\t\t\t\t\tlet inputClass = inputDescriptors[j].ctor;\n\n\t\t\t\t\t// Direct check on constructor type (ignores prototype chain)\n\t\t\t\t\tif (!byInstanceOf && (<any>input).constructor === inputClass) {\n\t\t\t\t\t\tmatchingDescriptors.push(editor);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Normal instanceof check\n\t\t\t\t\telse if (byInstanceOf && input instanceof inputClass) {\n\t\t\t\t\t\tmatchingDescriptors.push(editor);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// If no descriptors found, continue search using instanceof and prototype chain\n\t\t\tif (!byInstanceOf && matchingDescriptors.length === 0) {\n\t\t\t\treturn findEditorDescriptors(input, true);\n\t\t\t}\n\n\t\t\tif (byInstanceOf) {\n\t\t\t\treturn matchingDescriptors;\n\t\t\t}\n\n\t\t\treturn matchingDescriptors;\n\t\t};\n\n\t\tlet descriptors = findEditorDescriptors(input);\n\t\tif (descriptors && descriptors.length > 0) {\n\n\t\t\t// Ask the input for its preferred Editor\n\t\t\tlet preferredEditorId = input.getPreferredEditorId(descriptors.map(d => d.getId()));\n\t\t\tif (preferredEditorId) {\n\t\t\t\treturn this.getEditorById(preferredEditorId);\n\t\t\t}\n\n\t\t\t// Otherwise, first come first serve\n\t\t\treturn descriptors[0];\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tpublic getEditorById(editorId: string): EditorDescriptor {\n\t\tfor (let i = 0; i < this.editors.length; i++) {\n\t\t\tlet editor = this.editors[i];\n\t\t\tif (editor.getId() === editorId) {\n\t\t\t\treturn editor;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tpublic getEditors(): EditorDescriptor[] {\n\t\treturn this.editors.slice(0);\n\t}\n\n\tpublic setEditors(editorsToSet: EditorDescriptor[]): void {\n\t\tthis.editors = editorsToSet;\n\t}\n\n\tpublic getEditorInputs(): any[] {\n\t\tlet inputClasses: any[] = [];\n\t\tfor (let i = 0; i < this.editors.length; i++) {\n\t\t\tlet editor = this.editors[i];\n\t\t\tlet editorInputDescriptors = <SyncDescriptor<EditorInput>[]>editor[INPUT_DESCRIPTORS_PROPERTY];\n\t\t\tinputClasses.push(...editorInputDescriptors.map(descriptor=> descriptor.ctor));\n\t\t}\n\n\t\treturn inputClasses;\n\t}\n\n\tpublic registerDefaultFileInput(editorInputDescriptor: AsyncDescriptor<IFileEditorInput>): void {\n\t\tthis.defaultFileInputDescriptor = editorInputDescriptor;\n\t}\n\n\tpublic getDefaultFileInput(): AsyncDescriptor<IFileEditorInput> {\n\t\treturn this.defaultFileInputDescriptor;\n\t}\n\n\tpublic registerEditorInputFactory(editorInputId: string, ctor: IConstructorSignature0<IEditorInputFactory>): void {\n\t\tif (!this.instantiationService) {\n\t\t\tthis.editorInputFactoryConstructors[editorInputId] = ctor;\n\t\t} else {\n\t\t\tthis.createEditorInputFactory(editorInputId, ctor);\n\t\t}\n\t}\n\n\tpublic getEditorInputFactory(editorInputId: string): IEditorInputFactory {\n\t\treturn this.editorInputFactoryInstances[editorInputId];\n\t}\n}\n\nRegistry.add(Extensions.Editors, new EditorRegistry());\n\n/**\n * The context that will be passed in to the EditorInputActionContributor.\n */\nexport interface IEditorInputActionContext {\n\teditor: BaseEditor;\n\tinput: EditorInput;\n\tposition: Position;\n}\n\n/**\n * A variant of the action bar contributor to register actions to specific editor inputs of the editor. This allows to have more\n * fine grained control over actions compared to contributing an action to a specific editor.\n */\nexport class EditorInputActionContributor extends ActionBarContributor {\n\n\t// The following data structures are partitioned into arrays of Position (left, center, right)\n\tprivate mapEditorInputActionContextToPrimaryActions: { [id: string]: IEditorInputAction[] }[];\n\tprivate mapEditorInputActionContextToSecondaryActions: { [id: string]: IEditorInputAction[] }[];\n\n\tconstructor() {\n\t\tsuper();\n\n\t\tthis.mapEditorInputActionContextToPrimaryActions = this.createPositionArray();\n\t\tthis.mapEditorInputActionContextToSecondaryActions = this.createPositionArray();\n\t}\n\n\tprivate createPositionArray(): any[] {\n\t\tlet array: any[] = [];\n\n\t\tfor (let i = 0; i < POSITIONS.length; i++) {\n\t\t\tarray[i] = {};\n\t\t}\n\n\t\treturn array;\n\t}\n\n\t/* Subclasses can override to provide a custom cache implementation */\n\tprotected toId(context: IEditorInputActionContext): string {\n\t\treturn context.editor.getId() + context.input.getId();\n\t}\n\n\tprivate clearInputsFromCache(position: Position, isPrimary: boolean): void {\n\t\tif (isPrimary) {\n\t\t\tthis.doClearInputsFromCache(this.mapEditorInputActionContextToPrimaryActions[position]);\n\t\t} else {\n\t\t\tthis.doClearInputsFromCache(this.mapEditorInputActionContextToSecondaryActions[position]);\n\t\t}\n\t}\n\n\tprivate doClearInputsFromCache(cache: { [id: string]: IEditorInputAction[] }): void {\n\t\tfor (let key in cache) {\n\t\t\tif (cache.hasOwnProperty(key)) {\n\t\t\t\tlet cachedActions = cache[key];\n\t\t\t\tcachedActions.forEach((action) => {\n\t\t\t\t\taction.input = null;\n\t\t\t\t\taction.position = null;\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Returns true if this contributor has actions for the given editor input. Subclasses must not\n\t * override this method but instead hasActionsForEditorInput();\n\t */\n\tpublic hasActions(context: IEditorInputActionContext): boolean {\n\t\tif (!this.checkEditorContext(context)) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Ask Cache\n\t\tif (this.mapEditorInputActionContextToPrimaryActions[context.position][this.toId(context)]) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Ask Client\n\t\treturn this.hasActionsForEditorInput(context);\n\t}\n\n\t/**\n\t * Returns an array of actions for the given editor input. Subclasses must not override this\n\t * method but instead getActionsForEditorInput();\n\t */\n\tpublic getActions(context: IEditorInputActionContext): IAction[] {\n\t\tif (!this.checkEditorContext(context)) {\n\t\t\treturn [];\n\t\t}\n\n\t\t// This will cause any cached action to be set with null for the current editor input to prevent\n\t\t// leaking actions that still think the current editor input is what was set before.\n\t\tthis.clearInputsFromCache(context.position, true /* primary actions */);\n\n\t\t// First consult cache\n\t\tlet editorInput = context.input;\n\t\tlet editorPosition = context.position;\n\t\tlet cachedActions = this.mapEditorInputActionContextToPrimaryActions[context.position][this.toId(context)];\n\t\tif (cachedActions) {\n\n\t\t\t// Update the input field and position in all actions to indicate this change and return\n\t\t\tcachedActions.forEach((action) => {\n\t\t\t\taction.input = editorInput;\n\t\t\t\taction.position = editorPosition;\n\t\t\t});\n\n\t\t\treturn cachedActions;\n\t\t}\n\n\t\t// Otherwise collect and keep in cache\n\t\tlet actions = this.getActionsForEditorInput(context);\n\t\tactions.forEach((action) => {\n\t\t\taction.input = editorInput;\n\t\t\taction.position = editorPosition;\n\t\t});\n\n\t\tthis.mapEditorInputActionContextToPrimaryActions[context.position][this.toId(context)] = actions;\n\n\t\treturn actions;\n\t}\n\n\t/**\n\t * Returns true if this contributor has actions for the given editor input. Subclasses must not\n\t * override this method but instead hasSecondaryActionsForEditorInput();\n\t */\n\tpublic hasSecondaryActions(context: IEditorInputActionContext): boolean {\n\t\tif (!this.checkEditorContext(context)) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Ask Cache\n\t\tif (this.mapEditorInputActionContextToSecondaryActions[context.position][this.toId(context)]) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Ask Client\n\t\treturn this.hasSecondaryActionsForEditorInput(context);\n\t}\n\n\t/**\n\t * Returns an array of actions for the given editor input. Subclasses must not override this\n\t * method but instead getSecondaryActionsForEditorInput();\n\t */\n\tpublic getSecondaryActions(context: IEditorInputActionContext): IAction[] {\n\t\tif (!this.checkEditorContext(context)) {\n\t\t\treturn [];\n\t\t}\n\n\t\t// This will cause any cached action to be set with null for the current editor input to prevent\n\t\t// leaking actions that still think the current editor input is what was set before.\n\t\tthis.clearInputsFromCache(context.position, false /* secondary actions */);\n\n\t\t// First consult cache\n\t\tlet editorInput = context.input;\n\t\tlet editorPosition = context.position;\n\t\tlet cachedActions = this.mapEditorInputActionContextToSecondaryActions[context.position][this.toId(context)];\n\t\tif (cachedActions) {\n\n\t\t\t// Update the input field and position in all actions to indicate this change and return\n\t\t\tcachedActions.forEach((action) => {\n\t\t\t\taction.input = editorInput;\n\t\t\t\taction.position = editorPosition;\n\t\t\t});\n\n\t\t\treturn cachedActions;\n\t\t}\n\n\t\t// Otherwise collect and keep in cache\n\t\tlet actions = this.getSecondaryActionsForEditorInput(context);\n\t\tactions.forEach((action) => {\n\t\t\taction.input = editorInput;\n\t\t\taction.position = editorPosition;\n\t\t});\n\n\t\tthis.mapEditorInputActionContextToSecondaryActions[context.position][this.toId(context)] = actions;\n\n\t\treturn actions;\n\t}\n\n\tprivate checkEditorContext(context: IEditorInputActionContext): boolean {\n\t\treturn context && context.input instanceof EditorInput && context.editor instanceof BaseEditor && !types.isUndefinedOrNull(context.position);\n\t}\n\n\t/**\n\t * Returns true if this contributor has primary actions for the given editor input.\n\t */\n\tpublic hasActionsForEditorInput(context: IEditorInputActionContext): boolean {\n\t\treturn false;\n\t}\n\n\t/**\n\t * Returns an array of primary actions for the given editor input.\n\t */\n\tpublic getActionsForEditorInput(context: IEditorInputActionContext): IEditorInputAction[] {\n\t\treturn [];\n\t}\n\n\t/**\n\t * Returns true if this contributor has secondary actions for the given editor input.\n\t */\n\tpublic hasSecondaryActionsForEditorInput(context: IEditorInputActionContext): boolean {\n\t\treturn false;\n\t}\n\n\t/**\n\t * Returns an array of secondary actions for the given editor input.\n\t */\n\tpublic getSecondaryActionsForEditorInput(context: IEditorInputActionContext): IEditorInputAction[] {\n\t\treturn [];\n\t}\n}\n\n/**\n * An editorinput action is contributed to an editor based on the editor input of the editor that is currently\n * active. When the editor input changes, the action will be get the new editor input set so that the enablement\n * state can be updated. In addition the position of the editor for the given input is applied.\n */\nexport interface IEditorInputAction extends IAction {\n\n\t/**\n\t * The input of the editor for which this action is running.\n\t */\n\tinput: EditorInput;\n\n\t/**\n\t * The position of the editor for which this action is running.\n\t */\n\tposition: Position;\n\n\t/**\n\t * Implementors to define if the action is enabled or not.\n\t */\n\tisEnabled(): boolean;\n}\n\nexport class EditorInputAction extends Action implements IEditorInputAction {\n\tprivate _input: EditorInput;\n\tprivate _position: Position;\n\n\tpublic get input(): EditorInput {\n\t\treturn this._input;\n\t}\n\n\tpublic set input(input: EditorInput) {\n\t\tthis._input = input;\n\t\tthis.enabled = this.isEnabled();\n\t}\n\n\tpublic get position(): Position {\n\t\treturn this._position;\n\t}\n\n\tpublic set position(position: Position) {\n\t\tthis._position = position;\n\t}\n\n\tpublic isEnabled(): boolean {\n\t\treturn !!this._input;\n\t}\n}"]}