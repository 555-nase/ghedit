{"version":3,"file":"vs/workbench/browser/composite.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/workbench/browser/composite.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;;;;IAchG;;OAEG;IACU,iBAAS,GAAG;QACxB,oCAAoC,EAAE,kCAAkC;KACxE,CAAC;IAEF;;;;;;;;;OASG;IACH;QAAwC,6BAAkB;QAOzD;;WAEG;QACH,mBAAY,EAAU,EAA6B,iBAAoC;YACtF,kBAAM,EAAE,CAAC,CAAC;YADwC,sBAAiB,GAAjB,iBAAiB,CAAmB;YAT/E,mBAAc,GAAQ,EAAE,CAAC;YAYhC,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;QACtB,CAAC;QAEM,4BAAQ,GAAf;YACC,MAAM,CAAC,IAAI,CAAC;QACb,CAAC;QAED,sBAAW,uCAAgB;iBAA3B;gBACC,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC;YAC/B,CAAC;;;WAAA;QAED,sBAAW,oCAAa;iBAAxB;gBACC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC;YAC5B,CAAC;;;WAAA;QAED;;;;;;;;WAQG;QACI,0BAAM,GAAb,UAAc,MAAe;YAC5B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;YAErB,MAAM,CAAC,qBAAQ,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;QAC1B,CAAC;QAED;;WAEG;QACI,gCAAY,GAAnB;YACC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;QACpB,CAAC;QAED;;;;;;;;;;;WAWG;QACI,8BAAU,GAAjB,UAAkB,OAAgB;YACjC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;YAEvB,sDAAsD;YACtD,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;gBACb,IAAI,CAAC,cAAc,GAAG,EAAE,CAAC;gBACzB,IAAI,CAAC,cAAc,CAAC,SAAS,GAAG,IAAI,IAAI,EAAE,CAAC;YAC5C,CAAC;YAGD,IAAI,CAAC,CAAC;gBACL,IAAI,CAAC,cAAc,CAAC,SAAS,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC;gBACpF,OAAO,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC;gBAErC,uEAAuE;gBACvE,EAAE,CAAC,CAAC,IAAI,CAAC,iBAAiB,IAAI,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC,CAAC;oBAChE,IAAI,SAAS,GAAW,gBAAgB,CAAC;oBACzC,IAAI,CAAC,cAAc,CAAC,SAAS,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC;oBAC7C,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,SAAS,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;gBAClE,CAAC;YACF,CAAC;YAED,MAAM,CAAC,qBAAQ,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;QAC1B,CAAC;QAED;;WAEG;QACI,yBAAK,GAAZ;YACC,2BAA2B;QAC5B,CAAC;QAOD;;WAEG;QACI,8BAAU,GAAjB;YACC,MAAM,CAAC,EAAE,CAAC;QACX,CAAC;QAED;;;WAGG;QACI,uCAAmB,GAA1B;YACC,MAAM,CAAC,EAAE,CAAC;QACX,CAAC;QAED;;;;;WAKG;QACI,iCAAa,GAApB,UAAqB,MAAe;YACnC,MAAM,CAAC,IAAI,CAAC;QACb,CAAC;QAED;;;WAGG;QACI,mCAAe,GAAtB;YACC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;gBACxB,IAAI,CAAC,YAAY,GAAG,IAAI,sBAAY,EAAE,CAAC;YACxC,CAAC;YAED,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC;QAC1B,CAAC;QAED;;;;;WAKG;QACO,mCAAe,GAAzB;YACC,IAAI,CAAC,IAAI,CAAC,iBAAS,CAAC,oCAAoC,EAAE,IAAI,uBAAc,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;QAC7F,CAAC;QAED;;WAEG;QACI,gCAAY,GAAnB;YACC,MAAM,CAAC,qBAAS,CAAC,KAAK,CAAC;QACxB,CAAC;QAED;;WAEG;QACI,6BAAS,GAAhB;YACC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;QACrB,CAAC;QAED;;WAEG;QACI,8BAAU,GAAjB;YACC,MAAM,CAAC,IAAI,CAAC;QACb,CAAC;QA3JuB;uBAAC,6BAAiB;qBAAA;QA4J3C,gBAAC;IAAD,CAAC,AAtKD,CAAwC,8BAAkB,GAsKzD;IAtKqB,iBAAS,YAsK9B,CAAA;IAED;;OAEG;IACH;QAAuE,uCAAkB;QAMxF,6BAAY,QAAgB,EAAE,QAAgB,EAAE,EAAU,EAAE,IAAY,EAAE,QAAiB,EAAE,KAAc;YAC1G,kBAAM,QAAQ,EAAE,QAAQ,CAAC,CAAC;YAE1B,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;YACb,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;YACjB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;YACzB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACpB,CAAC;QACF,0BAAC;IAAD,CAAC,AAdD,CAAuE,6BAAe,GAcrF;IAdqB,2BAAmB,sBAcxC,CAAA;IAED;QAGC;YACC,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;QACrB,CAAC;QAES,6CAAiB,GAA3B,UAA4B,UAAkC;YAC7D,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,EAAE,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC;gBAChD,MAAM,CAAC;YACR,CAAC;YAED,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACjC,CAAC;QAEM,wCAAY,GAAnB,UAAoB,EAAU;YAC7B,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC;QAC/B,CAAC;QAES,wCAAY,GAAtB;YACC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QAChC,CAAC;QAES,wCAAY,GAAtB,UAAuB,cAAwC;YAC9D,IAAI,CAAC,SAAS,GAAG,cAAc,CAAC;QACjC,CAAC;QAEO,yCAAa,GAArB,UAAsB,EAAU;YAC/B,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;gBAChD,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;oBACjC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;gBAC1B,CAAC;YACF,CAAC;YAED,MAAM,CAAC,IAAI,CAAC;QACb,CAAC;QACF,wBAAC;IAAD,CAAC,AApCD,IAoCC;IApCqB,yBAAiB,oBAoCtC,CAAA","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport {IEventEmitter} from 'vs/base/common/eventEmitter';\nimport {Dimension, Builder} from 'vs/base/browser/builder';\nimport {IAction, IActionRunner, ActionRunner} from 'vs/base/common/actions';\nimport {IActionItem} from 'vs/base/browser/ui/actionbar/actionbar';\nimport {WorkbenchComponent} from 'vs/workbench/common/component';\nimport {CompositeEvent} from 'vs/workbench/common/events';\nimport {ITelemetryService} from 'vs/platform/telemetry/common/telemetry';\nimport {AsyncDescriptor} from 'vs/platform/instantiation/common/descriptors';\nimport {IComposite} from 'vs/workbench/common/composite';\nimport {ISelection, Selection} from 'vs/platform/selection/common/selection';\n\n/**\n * Internal composite events to communicate with composite container.\n */\nexport const EventType = {\n\tINTERNAL_COMPOSITE_TITLE_AREA_UPDATE: 'internalCompositeTitleAreaUpdate'\n};\n\n/**\n * Composites are layed out in the sidebar and panel part of the workbench. At a time only one composite\n * can be open in the sidebar, and only one composite can be open in the panel.\n * Each composite has a minimized representation that is good enough to provide some\n * information about the state of the composite data.\n * The workbench will keep a composite alive after it has been created and show/hide it based on\n * user interaction. The lifecycle of a composite goes in the order create(), setVisible(true|false),\n * layout(), focus(), dispose(). During use of the workbench, a composite will often receive a setVisible,\n * layout and focus call, but only one create and dispose call.\n */\nexport abstract class Composite extends WorkbenchComponent implements IComposite {\n\tprivate _telemetryData: any = {};\n\tprivate visible: boolean;\n\tprivate parent: Builder;\n\n\tprotected actionRunner: IActionRunner;\n\n\t/**\n\t * Create a new composite with the given ID and context.\n\t */\n\tconstructor(id: string, @ITelemetryService private _telemetryService: ITelemetryService) {\n\t\tsuper(id);\n\n\t\tthis.visible = false;\n\t}\n\n\tpublic getTitle(): string {\n\t\treturn null;\n\t}\n\n\tpublic get telemetryService(): ITelemetryService {\n\t\treturn this._telemetryService;\n\t}\n\n\tpublic get telemetryData(): any {\n\t\treturn this._telemetryData;\n\t}\n\n\t/**\n\t * Note: Clients should not call this method, the monaco workbench calls this\n\t * method. Calling it otherwise may result in unexpected behavior.\n\t *\n\t * Called to create this composite on the provided builder. This method is only\n\t * called once during the lifetime of the workbench.\n\t * Note that DOM-dependent calculations should be performed from the setVisible()\n\t * call. Only then the composite will be part of the DOM.\n\t */\n\tpublic create(parent: Builder): TPromise<void> {\n\t\tthis.parent = parent;\n\n\t\treturn TPromise.as(null);\n\t}\n\n\t/**\n\t * Returns the container this composite is being build in.\n\t */\n\tpublic getContainer(): Builder {\n\t\treturn this.parent;\n\t}\n\n\t/**\n\t * Note: Clients should not call this method, the monaco workbench calls this\n\t * method. Calling it otherwise may result in unexpected behavior.\n\t *\n\t * Called to indicate that the composite has become visible or hidden. This method\n\t * is called more than once during workbench lifecycle depending on the user interaction.\n\t * The composite will be on-DOM if visible is set to true and off-DOM otherwise.\n\t *\n\t * The returned promise is complete when the composite is visible. As such it is valid\n\t * to do a long running operation from this call. Typically this operation should be\n\t * fast though because setVisible might be called many times during a session.\n\t */\n\tpublic setVisible(visible: boolean): TPromise<void> {\n\t\tthis.visible = visible;\n\n\t\t// Reset telemetry data when composite becomes visible\n\t\tif (visible) {\n\t\t\tthis._telemetryData = {};\n\t\t\tthis._telemetryData.startTime = new Date();\n\t\t}\n\n\t\t// Send telemetry data when composite hides\n\t\telse {\n\t\t\tthis._telemetryData.timeSpent = (Date.now() - this._telemetryData.startTime) / 1000;\n\t\t\tdelete this._telemetryData.startTime;\n\n\t\t\t// Only submit telemetry data when not running from an integration test\n\t\t\tif (this._telemetryService && this._telemetryService.publicLog) {\n\t\t\t\tlet eventName: string = 'compositeShown';\n\t\t\t\tthis._telemetryData.composite = this.getId();\n\t\t\t\tthis._telemetryService.publicLog(eventName, this._telemetryData);\n\t\t\t}\n\t\t}\n\n\t\treturn TPromise.as(null);\n\t}\n\n\t/**\n\t * Called when this composite should receive keyboard focus.\n\t */\n\tpublic focus(): void {\n\t\t// Subclasses can implement\n\t}\n\n\t/**\n\t * Layout the contents of this composite using the provided dimensions.\n\t */\n\tpublic abstract layout(dimension: Dimension): void;\n\n\t/**\n\t * Returns an array of actions to show in the action bar of the composite.\n\t */\n\tpublic getActions(): IAction[] {\n\t\treturn [];\n\t}\n\n\t/**\n\t * Returns an array of actions to show in the action bar of the composite\n\t * in a less prominent way then action from getActions.\n\t */\n\tpublic getSecondaryActions(): IAction[] {\n\t\treturn [];\n\t}\n\n\t/**\n\t * For any of the actions returned by this composite, provide an IActionItem in\n\t * cases where the implementor of the composite wants to override the presentation\n\t * of an action. Returns null to indicate that the action is not rendered through\n\t * an action item.\n\t */\n\tpublic getActionItem(action: IAction): IActionItem {\n\t\treturn null;\n\t}\n\n\t/**\n\t * Returns the instance of IActionRunner to use with this composite for the\n\t * composite tool bar.\n\t */\n\tpublic getActionRunner(): IActionRunner {\n\t\tif (!this.actionRunner) {\n\t\t\tthis.actionRunner = new ActionRunner();\n\t\t}\n\n\t\treturn this.actionRunner;\n\t}\n\n\t/**\n\t * Method for composite implementors to indicate to the composite container that the title or the actions\n\t * of the composite have changed. Calling this method will cause the container to ask for title (getTitle())\n\t * and actions (getActions(), getSecondaryActions()) if the composite is visible or the next time the composite\n\t * gets visible.\n\t */\n\tprotected updateTitleArea(): void {\n\t\tthis.emit(EventType.INTERNAL_COMPOSITE_TITLE_AREA_UPDATE, new CompositeEvent(this.getId()));\n\t}\n\n\t/**\n\t * Returns an array of elements that are selected in the composite.\n\t */\n\tpublic getSelection(): ISelection {\n\t\treturn Selection.EMPTY;\n\t}\n\n\t/**\n\t * Returns true if this composite is currently visible and false otherwise.\n\t */\n\tpublic isVisible(): boolean {\n\t\treturn this.visible;\n\t}\n\n\t/**\n\t * Returns the underlying composite control or null if it is not accessible.\n\t */\n\tpublic getControl(): IEventEmitter {\n\t\treturn null;\n\t}\n}\n\n/**\n * A composite descriptor is a leightweight descriptor of a composite in the monaco workbench.\n */\nexport abstract class CompositeDescriptor<T extends Composite> extends AsyncDescriptor<T> {\n\tpublic id: string;\n\tpublic name: string;\n\tpublic cssClass: string;\n\tpublic order: number;\n\n\tconstructor(moduleId: string, ctorName: string, id: string, name: string, cssClass?: string, order?: number) {\n\t\tsuper(moduleId, ctorName);\n\n\t\tthis.id = id;\n\t\tthis.name = name;\n\t\tthis.cssClass = cssClass;\n\t\tthis.order = order;\n\t}\n}\n\nexport abstract class CompositeRegistry<T extends Composite> {\n\tprivate composits: CompositeDescriptor<T>[];\n\n\tconstructor() {\n\t\tthis.composits = [];\n\t}\n\n\tprotected registerComposite(descriptor: CompositeDescriptor<T>): void {\n\t\tif (this.compositeById(descriptor.id) !== null) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.composits.push(descriptor);\n\t}\n\n\tpublic getComposite(id: string): CompositeDescriptor<T> {\n\t\treturn this.compositeById(id);\n\t}\n\n\tprotected getComposits(): CompositeDescriptor<T>[] {\n\t\treturn this.composits.slice(0);\n\t}\n\n\tprotected setComposits(compositsToSet: CompositeDescriptor<T>[]): void {\n\t\tthis.composits = compositsToSet;\n\t}\n\n\tprivate compositeById(id: string): CompositeDescriptor<T> {\n\t\tfor (let i = 0; i < this.composits.length; i++) {\n\t\t\tif (this.composits[i].id === id) {\n\t\t\t\treturn this.composits[i];\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n}\n"]}