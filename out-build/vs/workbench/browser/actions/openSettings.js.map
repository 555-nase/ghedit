{"version":3,"file":"openSettings.js","sourceRoot":"","sources":["../../../../../src/vs/workbench/browser/actions/openSettings.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport nls = require('vs/nls');\nimport URI from 'vs/base/common/uri';\nimport labels = require('vs/base/common/labels');\nimport {Registry} from 'vs/platform/platform';\nimport {Action} from 'vs/base/common/actions';\nimport {IWorkbenchActionRegistry, Extensions} from 'vs/workbench/common/actionRegistry';\nimport {StringEditorInput} from 'vs/workbench/common/editor/stringEditorInput';\nimport {getDefaultValuesContent} from 'vs/platform/configuration/common/model';\nimport {IWorkbenchEditorService} from 'vs/workbench/services/editor/common/editorService';\nimport {IWorkspaceContextService} from 'vs/workbench/services/workspace/common/contextService';\nimport {IConfigurationService} from 'vs/platform/configuration/common/configuration';\nimport {Position, IEditor} from 'vs/platform/editor/common/editor';\nimport {IStorageService, StorageScope} from 'vs/platform/storage/common/storage';\nimport {IFileService, IFileOperationResult, FileOperationResult} from 'vs/platform/files/common/files';\nimport {IMessageService, Severity, CloseAction} from 'vs/platform/message/common/message';\nimport {IKeybindingService} from 'vs/platform/keybinding/common/keybindingService';\nimport {SyncActionDescriptor} from 'vs/platform/actions/common/actions';\nimport {IInstantiationService} from 'vs/platform/instantiation/common/instantiation';\nimport {KeyMod, KeyCode} from 'vs/base/common/keyCodes';\n\nexport class BaseTwoEditorsAction extends Action {\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@IWorkbenchEditorService protected editorService: IWorkbenchEditorService,\n\t\t@IFileService protected fileService: IFileService,\n\t\t@IConfigurationService protected configurationService: IConfigurationService,\n\t\t@IMessageService protected messageService: IMessageService,\n\t\t@IWorkspaceContextService protected contextService: IWorkspaceContextService,\n\t\t@IKeybindingService protected keybindingService: IKeybindingService,\n\t\t@IInstantiationService protected instantiationService: IInstantiationService\n\t) {\n\t\tsuper(id, label);\n\n\t\tthis.enabled = true;\n\t}\n\n\tprotected createIfNotExists(resource: URI, contents: string): TPromise<boolean> {\n\t\treturn this.fileService.resolveContent(resource, { acceptTextOnly: true }).then(null, (error) => {\n\t\t\tif ((<IFileOperationResult>error).fileOperationResult === FileOperationResult.FILE_NOT_FOUND) {\n\t\t\t\treturn this.fileService.updateContent(resource, contents).then(null, (error) => {\n\t\t\t\t\treturn TPromise.wrapError(new Error(nls.localize('fail.createSettings', \"Unable to create '{0}' ({1}).\", labels.getPathLabel(resource, this.contextService), error)));\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn TPromise.wrapError(error);\n\t\t});\n\t}\n\n\tprotected openTwoEditors(leftHandDefaultInput: StringEditorInput, editableResource: URI, defaultEditableContents: string): TPromise<IEditor> {\n\n\t\t// Create as needed and open in editor\n\t\treturn this.createIfNotExists(editableResource, defaultEditableContents).then(() => {\n\t\t\treturn this.editorService.inputToType({ resource: editableResource }).then((typedRightHandEditableInput) => {\n\t\t\t\treturn this.editorService.setEditors([leftHandDefaultInput, typedRightHandEditableInput]).then(() => {\n\t\t\t\t\treturn this.editorService.focusEditor(Position.CENTER);\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t}\n}\n\nexport class BaseOpenSettingsAction extends BaseTwoEditorsAction {\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@IWorkbenchEditorService editorService: IWorkbenchEditorService,\n\t\t@IFileService fileService: IFileService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IMessageService messageService: IMessageService,\n\t\t@IWorkspaceContextService contextService: IWorkspaceContextService,\n\t\t@IKeybindingService keybindingService: IKeybindingService,\n\t\t@IInstantiationService instantiationService: IInstantiationService\n\t) {\n\t\tsuper(id, label, editorService, fileService, configurationService, messageService, contextService, keybindingService, instantiationService);\n\t}\n\n\tprotected open(emptySettingsContents: string, settingsResource: URI): TPromise<IEditor> {\n\t\treturn this.openTwoEditors(DefaultSettingsInput.getInstance(this.instantiationService), settingsResource, emptySettingsContents);\n\t}\n}\n\nexport class OpenGlobalSettingsAction extends BaseOpenSettingsAction {\n\tpublic static ID = 'workbench.action.openGlobalSettings';\n\tpublic static LABEL = nls.localize('openGlobalSettings', \"Open User Settings\");\n\n\tprivate static SETTINGS_INFO_IGNORE_KEY = 'settings.workspace.info.ignore';\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@IWorkbenchEditorService editorService: IWorkbenchEditorService,\n\t\t@IFileService fileService: IFileService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IMessageService messageService: IMessageService,\n\t\t@IWorkspaceContextService contextService: IWorkspaceContextService,\n\t\t@IKeybindingService keybindingService: IKeybindingService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IStorageService private storageService: IStorageService\n\t) {\n\t\tsuper(id, label, editorService, fileService, configurationService, messageService, contextService, keybindingService, instantiationService);\n\t}\n\n\tpublic run(event?: any): TPromise<IEditor> {\n\n\t\t// Inform user about workspace settings\n\t\tif (this.configurationService.hasWorkspaceConfiguration() && !this.storageService.getBoolean(OpenGlobalSettingsAction.SETTINGS_INFO_IGNORE_KEY, StorageScope.WORKSPACE)) {\n\t\t\tthis.messageService.show(Severity.Info, {\n\t\t\t\tmessage: nls.localize('workspaceHasSettings', \"The currently opened folder contains workspace settings that may override user settings\"),\n\t\t\t\tactions: [\n\t\t\t\t\tCloseAction,\n\t\t\t\t\tnew Action('neverShowAgain', nls.localize('neverShowAgain', \"Don't show again\"), null, true, () => {\n\t\t\t\t\t\tthis.storageService.store(OpenGlobalSettingsAction.SETTINGS_INFO_IGNORE_KEY, true, StorageScope.WORKSPACE);\n\n\t\t\t\t\t\treturn TPromise.as(true);\n\t\t\t\t\t}),\n\t\t\t\t\tnew Action('open.workspaceSettings', nls.localize('openWorkspaceSettings', \"Open Workspace Settings\"), null, true, () => {\n\t\t\t\t\t\tlet editorCount = this.editorService.getVisibleEditors().length;\n\n\t\t\t\t\t\treturn this.editorService.inputToType({ resource: this.contextService.toResource('.vscode/settings.json') }).then((typedInput) => {\n\t\t\t\t\t\t\treturn this.editorService.openEditor(typedInput, null, editorCount === 2 ? Position.RIGHT : editorCount === 1 ? Position.CENTER : void 0);\n\t\t\t\t\t\t});\n\t\t\t\t\t})\n\t\t\t\t]\n\t\t\t});\n\t\t}\n\n\t\t// Open settings\n\t\tlet emptySettingsHeader = nls.localize('emptySettingsHeader', \"Place your settings in this file to overwrite the default settings\");\n\n\t\treturn this.open('// ' + emptySettingsHeader + '\\n{\\n}', URI.file(this.contextService.getConfiguration().env.appSettingsPath));\n\t}\n}\n\nexport class OpenGlobalKeybindingsAction extends BaseTwoEditorsAction {\n\tpublic static ID = 'workbench.action.openGlobalKeybindings';\n\tpublic static LABEL = nls.localize('openGlobalKeybindings', \"Open Keyboard Shortcuts\");\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@IWorkbenchEditorService editorService: IWorkbenchEditorService,\n\t\t@IFileService fileService: IFileService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IMessageService messageService: IMessageService,\n\t\t@IWorkspaceContextService contextService: IWorkspaceContextService,\n\t\t@IKeybindingService keybindingService: IKeybindingService,\n\t\t@IInstantiationService instantiationService: IInstantiationService\n\t) {\n\t\tsuper(id, label, editorService, fileService, configurationService, messageService, contextService, keybindingService, instantiationService);\n\t}\n\n\tpublic run(event?: any): TPromise<IEditor> {\n\t\tlet emptyContents = '// ' + nls.localize('emptyKeybindingsHeader', \"Place your key bindings in this file to overwrite the defaults\") + '\\n[\\n]';\n\n\t\treturn this.openTwoEditors(DefaultKeybindingsInput.getInstance(this.instantiationService, this.keybindingService), URI.file(this.contextService.getConfiguration().env.appKeybindingsPath), emptyContents);\n\t}\n}\n\nexport class OpenWorkspaceSettingsAction extends BaseOpenSettingsAction {\n\tpublic static ID = 'workbench.action.openWorkspaceSettings';\n\tpublic static LABEL = nls.localize('openWorkspaceSettings', \"Open Workspace Settings\");\n\n\tpublic run(event?: any): TPromise<IEditor> {\n\t\tif (!this.contextService.getWorkspace()) {\n\t\t\tthis.messageService.show(Severity.Info, nls.localize('openFolderFirst', \"Open a folder first to create workspace settings\"));\n\n\t\t\treturn;\n\t\t}\n\n\t\tlet emptySettingsHeader = [\n\t\t\t'// ' + nls.localize('emptySettingsHeader1', \"Place your settings in this file to overwrite default and user settings.\"),\n\t\t\t'{',\n\t\t\t'}'\n\t\t].join('\\n');\n\n\t\treturn this.open(emptySettingsHeader, this.contextService.toResource('.vscode/settings.json'));\n\t}\n}\n\nclass DefaultSettingsInput extends StringEditorInput {\n\tprivate static INSTANCE: DefaultSettingsInput;\n\n\tpublic static getInstance(instantiationService: IInstantiationService): DefaultSettingsInput {\n\t\tif (!DefaultSettingsInput.INSTANCE) {\n\t\t\tlet defaults = getDefaultValuesContent();\n\n\t\t\tlet defaultsHeader = '// ' + nls.localize('defaultSettingsHeader', \"Overwrite settings by placing them into your settings file.\");\n\t\t\tDefaultSettingsInput.INSTANCE = instantiationService.createInstance(DefaultSettingsInput, nls.localize('defaultName', \"Default Settings\"), null, defaultsHeader + '\\n' + defaults, 'application/json', false);\n\t\t}\n\n\t\treturn DefaultSettingsInput.INSTANCE;\n\t}\n\n\tprotected getResource(): URI {\n\t\treturn URI.create('vscode', 'defaultsettings', '/settings.json'); // URI is used to register JSON schema support\n\t}\n}\n\nclass DefaultKeybindingsInput extends StringEditorInput {\n\tprivate static INSTANCE: DefaultKeybindingsInput;\n\n\tpublic static getInstance(instantiationService: IInstantiationService, keybindingService: IKeybindingService): DefaultKeybindingsInput {\n\t\tif (!DefaultKeybindingsInput.INSTANCE) {\n\t\t\tlet defaultsHeader = '// ' + nls.localize('defaultKeybindingsHeader', \"Overwrite key bindings by placing them into your key bindings file.\");\n\t\t\tlet defaultContents = keybindingService.getDefaultKeybindings();\n\n\t\t\tDefaultKeybindingsInput.INSTANCE = instantiationService.createInstance(DefaultKeybindingsInput, nls.localize('defaultKeybindings', \"Default Keyboard Shortcuts\"), null, defaultsHeader + '\\n' + defaultContents, 'application/json', false);\n\t\t}\n\n\t\treturn DefaultKeybindingsInput.INSTANCE;\n\t}\n\n\tprotected getResource(): URI {\n\t\treturn URI.create('vscode', 'defaultsettings', '/keybindings.json'); // URI is used to register JSON schema support\n\t}\n}\n\n// Contribute Global Actions\nconst category = nls.localize('preferences', \"Preferences\");\nlet actionRegistry = <IWorkbenchActionRegistry>Registry.as(Extensions.WorkbenchActions);\nactionRegistry.registerWorkbenchAction(new SyncActionDescriptor(OpenGlobalSettingsAction, OpenGlobalSettingsAction.ID, OpenGlobalSettingsAction.LABEL, {\n\tprimary: null,\n\tmac: { primary: KeyMod.CtrlCmd | KeyCode.US_COMMA }\n}), category);\nactionRegistry.registerWorkbenchAction(new SyncActionDescriptor(OpenGlobalKeybindingsAction, OpenGlobalKeybindingsAction.ID, OpenGlobalKeybindingsAction.LABEL), category);\nactionRegistry.registerWorkbenchAction(new SyncActionDescriptor(OpenWorkspaceSettingsAction, OpenWorkspaceSettingsAction.ID, OpenWorkspaceSettingsAction.LABEL), category);"]}