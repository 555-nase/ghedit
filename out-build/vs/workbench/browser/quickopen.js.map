{"version":3,"file":"quickopen.js","sourceRoot":"","sources":["../../../../src/vs/workbench/browser/quickopen.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport nls = require('vs/nls');\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport filters = require('vs/base/common/filters');\nimport arrays = require('vs/base/common/arrays');\nimport strings = require('vs/base/common/strings');\nimport types = require('vs/base/common/types');\nimport errors = require('vs/base/common/errors');\nimport {Registry} from 'vs/platform/platform';\nimport {Mode, IContext, IAutoFocus, IModel} from 'vs/base/parts/quickopen/common/quickOpen';\nimport {QuickOpenEntry, IHighlight, QuickOpenEntryGroup, QuickOpenModel} from 'vs/base/parts/quickopen/browser/quickOpenModel';\nimport {EditorOptions, EditorInput} from 'vs/workbench/common/editor';\nimport {IResourceInput} from 'vs/platform/editor/common/editor';\nimport {IWorkbenchEditorService} from 'vs/workbench/services/editor/common/editorService';\nimport {IQuickOpenService} from 'vs/workbench/services/quickopen/common/quickOpenService';\nimport {AsyncDescriptor} from 'vs/platform/instantiation/common/descriptors';\n\nexport class QuickOpenHandler {\n\n\t/**\n\t * A quick open handler returns results for a given input string. The resolved promise\n\t * returns an instance of quick open model. It is up to the handler to keep and reuse an\n\t * instance of the same model across multiple calls. This helps in situations where the user is\n\t * narrowing down a search and the model is just filtering some items out.\n\t *\n\t * As such, returning the same model instance across multiple searches will yield best\n\t * results in terms of performance when many items are shown.\n\t */\n\tpublic getResults(searchValue: string): TPromise<IModel<any>> {\n\t\treturn TPromise.as(null);\n\t}\n\n\t/**\n\t * The ARIA label to apply when this quick open handler is active in quick open.\n\t */\n\tpublic getAriaLabel(): string {\n\t\treturn null;\n\t}\n\n\t/**\n\t * Extra CSS class name to add to the quick open widget to do custom styling of entries.\n\t */\n\tpublic getClass(): string {\n\t\treturn null;\n\t}\n\n\t/**\n\t * Indicates if the handler can run in the current environment. Return a string if the handler cannot run but has\n\t * a good message to show in this case.\n\t */\n\tpublic canRun(): boolean | string {\n\t\treturn true;\n\t}\n\n\t/**\n\t * Indicates if the handler wishes the quick open widget to automatically select the first result entry or an entry\n\t * based on a specific prefix match.\n\t */\n\tpublic getAutoFocus(searchValue: string): IAutoFocus {\n\t\treturn {};\n\t}\n\n\t/**\n\t * Indicates to the handler that the quick open widget has been closed. Allows to free up any resources as needed.\n\t * The parameter canceled indicates if the quick open widget was closed with an entry being run or not.\n\t */\n\tpublic onClose(canceled: boolean): void {\n\t\treturn;\n\t}\n\n\t/**\n\t * Allows to return a label that will be placed to the side of the results from this handler or null if none.\n\t */\n\tpublic getGroupLabel(): string {\n\t\treturn null;\n\t}\n\n\t/**\n\t * Allows to return a label that will be used when there are no results found\n\t */\n\tpublic getEmptyLabel(searchString: string): string {\n\t\tif (searchString.length > 0) {\n\t\t\treturn nls.localize('noResultsMatching', \"No results matching\");\n\t\t}\n\t\treturn nls.localize('noResultsFound2', \"No results found\");\n\t}\n}\n\nexport interface QuickOpenHandlerHelpEntry {\n\tprefix: string;\n\tdescription: string;\n\tneedsEditor: boolean;\n}\n\n/**\n * A lightweight descriptor of a quick open handler.\n */\nexport class QuickOpenHandlerDescriptor extends AsyncDescriptor<QuickOpenHandler> {\n\tpublic prefix: string;\n\tpublic description: string;\n\tpublic isDefault: boolean;\n\tpublic helpEntries: QuickOpenHandlerHelpEntry[];\n\tpublic instantProgress: boolean;\n\tprivate id: string;\n\n\tconstructor(moduleId: string, ctorName: string, prefix: string, description: string, instantProgress?: boolean);\n\tconstructor(moduleId: string, ctorName: string, prefix: string, helpEntries: QuickOpenHandlerHelpEntry[], instantProgress?: boolean);\n\tconstructor(moduleId: string, ctorName: string, prefix: string, param: any, instantProgress: boolean = false) {\n\t\tsuper(moduleId, ctorName);\n\n\t\tthis.prefix = prefix;\n\t\tthis.id = moduleId + ctorName;\n\t\tthis.instantProgress = instantProgress;\n\n\t\tif (types.isString(param)) {\n\t\t\tthis.description = param;\n\t\t} else {\n\t\t\tthis.helpEntries = param;\n\t\t}\n\t}\n\n\tpublic getId(): string {\n\t\treturn this.id;\n\t}\n}\n\nexport const Extensions = {\n\tQuickopen: 'workbench.contributions.quickopen'\n};\n\nexport interface IQuickOpenRegistry {\n\n\t/**\n\t * Registers a quick open handler to the platform.\n\t */\n\tregisterQuickOpenHandler(descriptor: QuickOpenHandlerDescriptor): void;\n\n\t/**\n\t * Registers a default quick open handler to fallback to.\n\t */\n\tregisterDefaultQuickOpenHandler(descriptor: QuickOpenHandlerDescriptor): void;\n\n\t/**\n\t * Get all registered quick open handlers\n\t */\n\tgetQuickOpenHandlers(): QuickOpenHandlerDescriptor[];\n\n\t/**\n\t * Get a specific quick open handler for a given prefix.\n\t */\n\tgetQuickOpenHandler(prefix: string): QuickOpenHandlerDescriptor;\n\n\t/**\n\t * Returns the default quick open handlers.\n\t */\n\tgetDefaultQuickOpenHandlers(): QuickOpenHandlerDescriptor[];\n}\n\nclass QuickOpenRegistry implements IQuickOpenRegistry {\n\tprivate handlers: QuickOpenHandlerDescriptor[];\n\tprivate defaultHandlers: QuickOpenHandlerDescriptor[];\n\n\tconstructor() {\n\t\tthis.handlers = [];\n\t\tthis.defaultHandlers = [];\n\t}\n\n\tpublic registerQuickOpenHandler(descriptor: QuickOpenHandlerDescriptor): void {\n\t\tthis.handlers.push(descriptor);\n\n\t\t// sort the handlers by decreasing prefix length, such that longer\n\t\t// prefixes take priority: 'ext' vs 'ext install' - the latter should win\n\t\tthis.handlers.sort((h1, h2) => h2.prefix.length - h1.prefix.length);\n\t}\n\n\tpublic registerDefaultQuickOpenHandler(descriptor: QuickOpenHandlerDescriptor): void {\n\t\tthis.defaultHandlers.push(descriptor);\n\t}\n\n\tpublic getQuickOpenHandlers(): QuickOpenHandlerDescriptor[] {\n\t\treturn this.handlers.slice(0);\n\t}\n\n\tpublic getQuickOpenHandler(text: string): QuickOpenHandlerDescriptor {\n\t\treturn text ? arrays.first(this.handlers, h => strings.startsWith(text, h.prefix), null) : null;\n\t}\n\n\tpublic getDefaultQuickOpenHandlers(): QuickOpenHandlerDescriptor[] {\n\t\treturn this.defaultHandlers;\n\t}\n}\n\nRegistry.add(Extensions.Quickopen, new QuickOpenRegistry());\n\nexport interface IEditorQuickOpenEntry {\n\n\t/**\n\t * The editor input used for this entry when opening.\n\t */\n\tgetInput(): IResourceInput | EditorInput;\n\n\t/**\n\t * The editor options used for this entry when opening.\n\t */\n\tgetOptions(): EditorOptions;\n}\n\n/**\n * A subclass of quick open entry that will open an editor with input and options when running.\n */\nexport class EditorQuickOpenEntry extends QuickOpenEntry implements IEditorQuickOpenEntry {\n\n\tconstructor(private _editorService: IWorkbenchEditorService) {\n\t\tsuper();\n\t}\n\n\tpublic get editorService() {\n\t\treturn this._editorService;\n\t}\n\n\tpublic getInput(): IResourceInput | EditorInput {\n\t\treturn null;\n\t}\n\n\tpublic getOptions(): EditorOptions {\n\t\treturn null;\n\t}\n\n\tpublic run(mode: Mode, context: IContext): boolean {\n\t\tif (mode === Mode.OPEN) {\n\t\t\tlet event = context.event;\n\t\t\tlet sideBySide = (event && (event.ctrlKey || event.metaKey || (event.payload && event.payload.originalEvent && (event.payload.originalEvent.ctrlKey || event.payload.originalEvent.metaKey))));\n\n\t\t\tlet input = this.getInput();\n\t\t\tif (input instanceof EditorInput) {\n\t\t\t\tthis.editorService.openEditor(input, this.getOptions(), sideBySide).done(null, errors.onUnexpectedError);\n\t\t\t} else {\n\t\t\t\tthis.editorService.openEditor(<IResourceInput>input, sideBySide).done(null, errors.onUnexpectedError);\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n}\n\n/**\n * A subclass of quick open entry group that provides access to editor input and options.\n */\nexport class EditorQuickOpenEntryGroup extends QuickOpenEntryGroup implements IEditorQuickOpenEntry {\n\n\tpublic getInput(): EditorInput {\n\t\treturn null;\n\t}\n\n\tpublic getOptions(): EditorOptions {\n\t\treturn null;\n\t}\n}\n\n// Infrastructure for quick open commands\n\nexport interface ICommand {\n\taliases: string[];\n\tgetResults(input: string): TPromise<QuickOpenEntry[]>;\n\tgetEmptyLabel(input: string): string;\n\ticon?: string;\n}\n\nclass CommandEntry extends QuickOpenEntry {\n\n\tconstructor(private quickOpenService: IQuickOpenService, private prefix: string, private command: ICommand, highlights: IHighlight[]) {\n\t\tsuper(highlights);\n\t\tthis.command = command;\n\t}\n\n\tpublic getIcon(): string {\n\t\treturn this.command.icon || null;\n\t}\n\n\tpublic getLabel(): string {\n\t\treturn this.command.aliases[0];\n\t}\n\n\tpublic getAriaLabel(): string {\n\t\treturn nls.localize('entryAriaLabel', \"{0}, command\", this.getLabel());\n\t}\n\n\tpublic run(mode: Mode, context: IContext): boolean {\n\t\tif (mode === Mode.PREVIEW) {\n\t\t\treturn false;\n\t\t}\n\n\t\tthis.quickOpenService.show(`${ this.prefix } ${ this.command.aliases[0]} `);\n\t\treturn false;\n\t}\n}\n\nexport interface ICommandQuickOpenHandlerOptions {\n\tprefix: string;\n\tcommands: ICommand[];\n\tdefaultCommand?: ICommand;\n}\n\nexport abstract class CommandQuickOpenHandler extends QuickOpenHandler {\n\n\tprivate prefix: string;\n\tprivate defaultCommand: ICommand;\n\tprivate commands: { regexp: RegExp; command: ICommand; }[];\n\n\tconstructor(\n\t\t@IQuickOpenService private quickOpenService: IQuickOpenService,\n\t\toptions: ICommandQuickOpenHandlerOptions\n\t) {\n\t\tsuper();\n\n\t\tthis.prefix = options.prefix;\n\t\tthis.commands = options.commands.map(c => ({\n\t\t\tregexp: new RegExp('^(' + c.aliases.join('|') + ')\\\\b\\\\W+'),\n\t\t\tcommand: c\n\t\t}));\n\t\tthis.defaultCommand = options.defaultCommand || null;\n\t}\n\n\tpublic getResults(input: string): TPromise<QuickOpenModel> {\n\t\tlet match: RegExpMatchArray;\n\t\tlet command = arrays.first(this.commands, c => !!(match = input.match(c.regexp)));\n\t\tlet promise: TPromise<QuickOpenEntry[]>;\n\n\t\tif (command) {\n\t\t\tpromise = command.command.getResults(input.substr(match[0].length));\n\t\t} else if (this.defaultCommand) {\n\t\t\tpromise = this.defaultCommand.getResults(input);\n\t\t} else {\n\t\t\tpromise = this.getCommands(input);\n\t\t}\n\n\t\treturn promise.then(e => new QuickOpenModel(e));\n\t}\n\n\tprivate getCommands(input: string): TPromise<QuickOpenEntry[]> {\n\t\tlet entries: QuickOpenEntry[] = this.commands\n\t\t\t.map(c => ({ command: c.command, highlights: filters.matchesFuzzy(input, c.command.aliases[0]) }))\n\t\t\t.filter(({ command, highlights }) => !!highlights || command.aliases.some(a => input === a))\n\t\t\t.map(({ command, highlights }) => new CommandEntry(this.quickOpenService, this.prefix, command, highlights));\n\n\t\treturn TPromise.as(entries);\n\t}\n\n\tpublic getClass(): string {\n\t\treturn null;\n\t}\n\n\tpublic canRun(): boolean {\n\t\treturn true;\n\t}\n\n\tpublic getAutoFocus(input: string): IAutoFocus {\n\t\treturn { autoFocusFirstEntry: true };\n\t}\n\n\tpublic onClose(canceled: boolean): void {\n\t\treturn;\n\t}\n\n\tpublic getGroupLabel(): string {\n\t\treturn null;\n\t}\n\n\tpublic getEmptyLabel(input: string): string {\n\t\tlet match: RegExpMatchArray;\n\t\tlet command = arrays.first(this.commands, c => !!(match = input.match(c.regexp)));\n\n\t\tif (!command) {\n\t\t\treturn nls.localize('noCommands', \"No commands matching\");\n\t\t}\n\n\t\treturn command.command.getEmptyLabel(input);\n\t}\n}\n"]}