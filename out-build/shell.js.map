{"version":3,"file":"shell.js","sourceRoot":"","sources":["../src/shell.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\n// This is a port of vs/workbench/electron-browser/shell.ts with Electron and Node dependencies\n// removed/replaced.\n\nimport 'vs/css!vs/workbench/electron-browser/media/shell';\n\n// TODO: import * as nls from 'vs/nls';\nimport {TPromise} from 'vs/base/common/winjs.base';\n// TODO: import * as platform from 'vs/base/common/platform';\nimport {Dimension, Builder, $} from 'vs/base/browser/builder';\n// TODO: import {escapeRegExpCharacters} from 'vs/base/common/strings';\nimport dom = require('vs/base/browser/dom');\nimport aria = require('vs/base/browser/ui/aria/aria');\nimport {dispose, IDisposable} from 'vs/base/common/lifecycle';\nimport errors = require('vs/base/common/errors');\nimport {ContextViewService} from 'vs/platform/contextview/browser/contextViewService';\nimport {ContextMenuService} from 'vs/platform/contextview/browser/contextMenuService';\nimport timer = require('vs/base/common/timer');\nimport {Workbench} from 'vs/workbench/browser/workbench';\nimport {Storage, inMemoryLocalStorageInstance} from 'vs/workbench/common/storage';\nimport {ITelemetryService, NullTelemetryService} from 'vs/platform/telemetry/common/telemetry';\n// TODO: import {ElectronTelemetryService} from  'vs/platform/telemetry/electron-browser/electronTelemetryService';\n// TODO: import {ElectronIntegration} from 'vs/workbench/electron-browser/integration';\n// TODO: import {Update} from 'vs/workbench/electron-browser/update';\nimport {WorkspaceStats} from 'vs/platform/telemetry/common/workspaceStats';\nimport {IWindowService, WindowService} from 'windowService';\n// TODO: import {MessageService} from 'vs/workbench/services/message/electron-browser/messageService';\nimport {WorkbenchMessageService as MessageService} from 'vs/workbench/services/message/browser/messageService';\n// TODO: import {RequestService} from 'vs/workbench/services/request/node/requestService';\nimport {IConfigurationService} from 'vs/platform/configuration/common/configuration';\nimport {FileService} from 'fileService';\n// TODO: import {SearchService} from 'vs/workbench/services/search/node/searchService';\n// TODO: import {LifecycleService} from 'vs/workbench/services/lifecycle/electron-browser/lifecycleService';\nimport {BaseLifecycleService as LifecycleService} from 'vs/platform/lifecycle/common/baseLifecycleService';\n// TODO: import {WorkbenchKeybindingService} from 'vs/workbench/services/keybinding/electron-browser/keybindingService';\nimport {StandaloneKeybindingService as WorkbenchKeybindingService, SimpleExtensionService as MainProcessExtensionService} from 'vs/editor/browser/standalone/simpleServices';\n// TODO: import {MainThreadService} from 'vs/workbench/services/thread/electron-browser/threadService';\nimport {MainThreadService} from 'vs/platform/thread/common/mainThreadService';\nimport {MainProcessMarkerService} from 'vs/platform/markers/common/markerService';\nimport {IActionsService} from 'vs/platform/actions/common/actions';\nimport ActionsService from 'vs/platform/actions/common/actionsService';\nimport {IModelService} from 'vs/editor/common/services/modelService';\nimport {ModelServiceImpl} from 'vs/editor/common/services/modelServiceImpl';\nimport {CodeEditorServiceImpl} from 'vs/editor/browser/services/codeEditorServiceImpl';\nimport {ICodeEditorService} from 'vs/editor/common/services/codeEditorService';\nimport {EditorWorkerServiceImpl} from 'vs/editor/common/services/editorWorkerServiceImpl';\nimport {IEditorWorkerService} from 'vs/editor/common/services/editorWorkerService';\n// TODO: import {MainProcessVSCodeAPIHelper} from 'vs/workbench/api/node/extHost.api.impl';\n// TODO: import {MainProcessExtensionService} from 'vs/platform/extensions/common/nativeExtensionService';\n// TODO: import {MainThreadDocuments} from 'vs/workbench/api/node/extHostDocuments';\n// TODO: import {MainProcessTextMateSyntax} from 'vs/editor/node/textMate/TMSyntax';\n// TODO: import {MainProcessTextMateSnippet} from 'vs/editor/node/textMate/TMSnippets';\nimport {JSONValidationExtensionPoint} from 'vs/platform/jsonschemas/common/jsonValidationExtensionPoint';\n// TODO: import {LanguageConfigurationFileHandler} from 'vs/editor/node/languageConfiguration';\n// TODO: import {MainThreadFileSystemEventService} from 'vs/workbench/api/node/extHostFileSystemEventService';\n// TODO: import {MainThreadQuickOpen} from 'vs/workbench/api/node/extHostQuickOpen';\n// TODO: import {MainThreadStatusBar} from 'vs/workbench/api/node/extHostStatusBar';\n// TODO: import {MainThreadCommands} from 'vs/workbench/api/node/extHostCommands';\nimport {RemoteTelemetryServiceHelper} from 'vs/platform/telemetry/common/remoteTelemetryService';\n// TODO: import {MainThreadDiagnostics} from 'vs/workbench/api/node/extHostDiagnostics';\n// TODO: import {MainThreadOutputService} from 'vs/workbench/api/node/extHostOutputService';\n// TODO: import {MainThreadMessageService} from 'vs/workbench/api/node/extHostMessageService';\n// TODO: import {MainThreadLanguages} from 'vs/workbench/api/node/extHostLanguages';\n// TODO: import {MainThreadEditors} from 'vs/workbench/api/node/extHostEditors';\n// TODO: import {MainThreadWorkspace} from 'vs/workbench/api/node/extHostWorkspace';\n// TODO: import {MainThreadConfiguration} from 'vs/workbench/api/node/extHostConfiguration';\n// TODO: import {MainThreadLanguageFeatures} from 'vs/workbench/api/node/extHostLanguageFeatures';\nimport {IOptions} from 'vs/workbench/common/options';\nimport {IStorageService} from 'vs/platform/storage/common/storage';\n// TODO: import {MainThreadStorage} from 'vs/platform/storage/common/remotable.storage';\nimport {IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport {createInstantiationService as createInstantiationService } from 'vs/platform/instantiation/common/instantiationService';\nimport {IContextViewService, IContextMenuService} from 'vs/platform/contextview/browser/contextView';\nimport {IEventService} from 'vs/platform/event/common/event';\nimport {IFileService} from 'vs/platform/files/common/files';\nimport {IKeybindingService} from 'vs/platform/keybinding/common/keybindingService';\nimport {ILifecycleService} from 'vs/platform/lifecycle/common/lifecycle';\nimport {IMarkerService} from 'vs/platform/markers/common/markers';\nimport {IMessageService, Severity} from 'vs/platform/message/common/message';\n// TODO: import {IRequestService} from 'vs/platform/request/common/request';\n// TODO: import {ISearchService} from 'vs/platform/search/common/search';\nimport {IThreadService} from 'vs/platform/thread/common/thread';\nimport {IConfiguration, IWorkspace} from 'vs/platform/workspace/common/workspace';\nimport {IWorkspaceContextService} from 'vs/workbench/services/workspace/common/contextService';\nimport {IExtensionService} from 'vs/platform/extensions/common/extensions';\nimport {MainThreadModeServiceImpl} from 'vs/editor/common/services/modeServiceImpl';\nimport {IModeService} from 'vs/editor/common/services/modeService';\nimport {IUntitledEditorService, UntitledEditorService} from 'vs/workbench/services/untitled/common/untitledEditorService';\n// TODO: import {CrashReporter} from 'vs/workbench/electron-browser/crashReporter';\nimport {IThemeService} from 'vs/workbench/services/themes/common/themeService';\n// TODO: import {ThemeService} from 'vs/workbench/services/themes/electron-browser/themeService';\nimport {ThemeService} from 'themeService';\n// TODO: import {getService } from 'vs/base/common/service';\n// TODO: import {connect} from 'vs/base/node/service.net';\n// TODO: import {IExtensionsService} from 'vs/workbench/parts/extensions/common/extensions';\n// TODO: import {ExtensionsService} from 'vs/workbench/parts/extensions/node/extensionsService';\n// TODO: import {ReloadWindowAction} from 'vs/workbench/electron-browser/actions';\n\n// Import everything we need to add all the standalone language and json schema support.\nimport {ITextFileService} from 'vs/workbench/parts/files/common/files';\nimport {TextFileService} from 'bogusTextFileServices';\nimport {ILanguageExtensionPoint} from 'vs/editor/common/services/modeService';\nimport {ModesRegistry} from 'vs/editor/common/modes/modesRegistry';\nimport {ExtensionsRegistry} from 'vs/platform/extensions/common/extensionsRegistry';\nimport {ILanguage} from 'vs/editor/common/modes/monarch/monarchTypes';\nimport {IJSONSchema} from 'vs/base/common/jsonSchema';\nimport {Extensions, IJSONContributionRegistry} from 'vs/platform/jsonschemas/common/jsonContributionRegistry';\nimport {Registry} from 'vs/platform/platform';\nimport {ILanguageDef} from 'vs/editor/standalone-languages/types';\nimport 'vs/languages/json/common/json.contribution';\nimport 'vs/editor/standalone-languages/all';\nimport 'vs/editor/browser/standalone/standaloneSchemas';\nimport {Github, Repository, Error as GithubError} from 'github';\n\n/**\n * Services that we require for the Shell\n */\nexport interface ICoreServices {\n\tcontextService: IWorkspaceContextService;\n\teventService: IEventService;\n\tconfigurationService: IConfigurationService;\n\tgithubService: Github;\n}\n\nlet MonacoEditorLanguages: ILanguageDef[] = this.MonacoEditorLanguages || [];\nlet MonacoEditorSchemas: { [url:string]: IJSONSchema } = this.MonacoEditorSchemas || {};\n\n/**\n * The Monaco Workbench Shell contains the Monaco workbench with a rich header containing navigation and the activity bar.\n * With the Shell being the top level element in the page, it is also responsible for driving the layouting.\n */\nexport class WorkbenchShell {\n\tprivate storageService: IStorageService;\n\tprivate messageService: IMessageService;\n\tprivate eventService: IEventService;\n\tprivate contextViewService: ContextViewService;\n\tprivate windowService: IWindowService;\n\tprivate threadService: MainThreadService;\n\tprivate configurationService: IConfigurationService;\n\tprivate themeService: ThemeService;\n\tprivate contextService: IWorkspaceContextService;\n\tprivate telemetryService: ITelemetryService;\n\tprivate keybindingService: WorkbenchKeybindingService;\n\tprivate githubService: Github;\n\tprivate modeService: IModeService;\n\tprivate modelService: IModelService;\n\n\t// DWM: These are dependency injected into various modules. Normally they would\n\t// be provided by Electron-dependent modules.\n\tprivate textFileService: TextFileService;\n\tprivate editorWorkerService: IEditorWorkerService;\n\n\tprivate container: HTMLElement;\n\tprivate toUnbind: IDisposable[];\n\tprivate previousErrorValue: string;\n\tprivate previousErrorTime: number;\n\tprivate content: HTMLElement;\n\tprivate contentsContainer: Builder;\n\tprivate currentTheme: string;\n\n\tprivate configuration: IConfiguration;\n\tprivate workspace: IWorkspace;\n\tprivate options: IOptions;\n\tprivate workbench: Workbench;\n\n\tconstructor(container: HTMLElement, workspace: IWorkspace, services: ICoreServices, configuration: IConfiguration, options: IOptions) {\n\t\tthis.container = container;\n\n\t\tthis.workspace = workspace;\n\t\tthis.configuration = configuration;\n\t\tthis.options = options;\n\n\t\tthis.contextService = services.contextService;\n\t\tthis.eventService = services.eventService;\n\t\tthis.configurationService = services.configurationService;\n\t\tthis.githubService = services.githubService;\n\n\t\tthis.toUnbind = [];\n\t\tthis.previousErrorTime = 0;\n\t}\n\n\tprivate createContents(parent: Builder): Builder {\n\n\t\t// ARIA\n\t\taria.setARIAContainer(document.body);\n\n\t\t// Workbench Container\n\t\tlet workbenchContainer = $(parent).div();\n\n\t\t// Instantiation service with services\n\t\tlet instantiationService = this.initInstantiationService();\n\n\t\t//crash reporting\n\t\tif (!!this.configuration.env.crashReporter) {\n// TODO: \t\t\tlet crashReporter = instantiationService.createInstance(CrashReporter, this.configuration.env.version, this.configuration.env.commitHash);\n// TODO: \t\t\tcrashReporter.start(this.configuration.env.crashReporter);\n\t\t}\n\n\t\t/* TODO:\n\t\tconst sharedProcessClientPromise = connect(process.env['VSCODE_SHARED_IPC_HOOK']);\n\t\tsharedProcessClientPromise.done(service => {\n\t\t\tservice.onClose(() => {\n\t\t\t\tthis.messageService.show(Severity.Error, {\n\t\t\t\t\tmessage: nls.localize('sharedProcessCrashed', \"The shared process terminated unexpectedly. Please reload the window to recover.\"),\n\t\t\t\t\tactions: [instantiationService.createInstance(ReloadWindowAction, ReloadWindowAction.ID, ReloadWindowAction.LABEL)]\n\t\t\t\t});\n\t\t\t});\n\t\t}, errors.onUnexpectedError);\n\t\t*/\n\n// TODO:\t\tinstantiationService.addSingleton(IExtensionsService, getService<IExtensionsService>(sharedProcessClientPromise, 'ExtensionService', ExtensionsService));\n\n\t\t// Workbench\n\t\tthis.workbench = new Workbench(workbenchContainer.getHTMLElement(), this.workspace, this.configuration, this.options, instantiationService);\n\t\tthis.workbench.startup({\n\t\t\tonServicesCreated: () => {\n\t\t\t\tthis.initExtensionSystem();\n\t\t\t},\n\t\t\tonWorkbenchStarted: () => {\n\t\t\t\tthis.onWorkbenchStarted();\n\t\t\t}\n\t\t});\n\n\t\t// Electron integration\n// TODO:\t\tthis.workbench.getInstantiationService().createInstance(ElectronIntegration).integrate(this.container);\n\n\t\t// Update\n// TODO:\t\tthis.workbench.getInstantiationService().createInstance(Update);\n\n\t\t// Handle case where workbench is not starting up properly\n\t\tlet timeoutHandle = setTimeout(() => {\n\t\t\tconsole.warn('Workbench did not finish loading in 10 seconds, that might be a problem that should be reported.');\n\t\t}, 10000);\n\n\t\tthis.workbench.joinCreation().then(() => {\n\t\t\tclearTimeout(timeoutHandle);\n\t\t});\n\n\t\treturn workbenchContainer;\n\t}\n\n\tprivate onWorkbenchStarted(): void {\n\n\t\t// Log to telemetry service\n\t\tlet windowSize = {\n\t\t\tinnerHeight: window.innerHeight,\n\t\t\tinnerWidth: window.innerWidth,\n\t\t\touterHeight: window.outerHeight,\n\t\t\touterWidth: window.outerWidth\n\t\t};\n\n\t\tthis.telemetryService.publicLog('workspaceLoad',\n\t\t\t{\n\t\t\t\tuserAgent: navigator.userAgent,\n\t\t\t\twindowSize: windowSize,\n\t\t\t\temptyWorkbench: !this.contextService.getWorkspace(),\n\t\t\t\tcustomKeybindingsCount: this.keybindingService.customKeybindingsCount(),\n\t\t\t\ttheme: this.currentTheme\n\t\t\t});\n\n\t\tlet workspaceStats: WorkspaceStats = <WorkspaceStats>this.workbench.getInstantiationService().createInstance(WorkspaceStats);\n\t\tworkspaceStats.reportWorkspaceTags();\n\n\t\t// Register all built-in standalone languages.\n\t\tMonacoEditorLanguages.forEach((language) => {\n\t\t\tthis.registerMonarchStandaloneLanguage(language, language.defModule);\n\t\t});\n\n\t\t// Register the languages we have smarter handlers for.\n\t\t// These lines come from typescript.contrbution.ts which can't simply be imported\n\t\t// because of its dependency on vs/editor/browser/standalone/standaloneCodeEditor\n\t\t// for the registerStandaloneLanguage implementation.\n\t\tthis.registerStandaloneLanguage({\n\t\t\tid: 'typescript',\n\t\t\textensions: ['.ts'],\n\t\t\taliases: ['TypeScript', 'ts', 'typescript'],\n\t\t\tmimetypes: ['text/typescript'],\n\t\t}, 'vs/languages/typescript/common/mode');\n\n\t\tthis.registerStandaloneLanguage({\n\t\t\tid: 'javascript',\n\t\t\textensions: ['.js', '.es6'],\n\t\t\tfirstLine: '^#!.*\\\\bnode',\n\t\t\tfilenames: ['jakefile'],\n\t\t\taliases: ['JavaScript', 'javascript', 'js'],\n\t\t\tmimetypes: ['text/javascript'],\n\t\t}, 'vs/languages/typescript/common/mode');\n\n\t\t// Register all built-in standalone JSON schemas.\n\t\tfor (var uri in MonacoEditorSchemas) {\n\t\t\tthis.registerStandaloneSchema(uri, MonacoEditorSchemas[uri]);\n\t\t}\n\t}\n\n\t// These are adapted versions of functions in vs/editor/browser/standalone/standaloneCodeEditor\n\t// without the creation of conflicting supporting services.\n\tprivate registerMonarchStandaloneLanguage(language:ILanguageExtensionPoint, defModule:string): void {\n\t\tModesRegistry.registerLanguage(language);\n\n\t\tExtensionsRegistry.registerOneTimeActivationEventListener('onLanguage:' + language.id, () => {\n\t\t\trequire([defModule], (value:{language:ILanguage}) => {\n\t\t\t\tif (!value.language) {\n\t\t\t\t\tconsole.error('Expected ' + defModule + ' to export an `language`');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tlet modeService = this.modeService;\n\t\t\t\tlet modelService = this.modelService;\n\t\t\t\tmodeService.registerMonarchDefinition(modelService, this.editorWorkerService, language.id, value.language);\n\t\t\t}, (err) => {\n\t\t\t\tconsole.error('Cannot find module ' + defModule, err);\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate registerStandaloneLanguage(language:ILanguageExtensionPoint, defModule:string): void {\n\t\tModesRegistry.registerLanguage(language);\n\n\t\tExtensionsRegistry.registerOneTimeActivationEventListener('onLanguage:' + language.id, () => {\n\t\t\trequire([defModule], (value:{activate:()=>void}) => {\n\t\t\t\tif (!value.activate) {\n\t\t\t\t\tconsole.error('Expected ' + defModule + ' to export an `activate` function');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tthis.workbench.getInstantiationService().invokeFunction(value.activate);\n\t\t\t}, (err) => {\n\t\t\t\tconsole.error('Cannot find module ' + defModule, err);\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate registerStandaloneSchema(uri:string, schema:IJSONSchema) {\n\t\tlet schemaRegistry = <IJSONContributionRegistry>Registry.as(Extensions.JSONContribution);\n\t\tschemaRegistry.registerSchema(uri, schema);\n\t}\n\n\n\tprivate initInstantiationService(): IInstantiationService {\n\t\tthis.windowService = new WindowService();\n\n\t\tlet disableWorkspaceStorage = this.configuration.env.extensionTestsPath || (!this.workspace && !this.configuration.env.extensionDevelopmentPath); // without workspace or in any extension test, we use inMemory storage unless we develop an extension where we want to preserve state\n\t\tthis.storageService = new Storage(this.contextService, window.localStorage, disableWorkspaceStorage ? inMemoryLocalStorageInstance : window.localStorage);\n\n\t\tif (this.configuration.env.isBuilt\n\t\t\t&& !this.configuration.env.extensionDevelopmentPath // no telemetry in a window for extension development!\n\t\t\t&& !!this.configuration.env.enableTelemetry) {\n\n\t\t\t/* TODO:\n\t\t\tthis.telemetryService = new ElectronTelemetryService(this.configurationService, this.storageService, {\n\t\t\t\tcleanupPatterns: [new RegExp(escapeRegExpCharacters(this.configuration.env.appRoot), 'gi'), new RegExp(escapeRegExpCharacters(this.configuration.env.userExtensionsHome), 'gi')],\n\t\t\t\tversion: this.configuration.env.version,\n\t\t\t\tcommitHash: this.configuration.env.commitHash\n\t\t\t});\n\t\t\t*/\n\t\t} else {\n\t\t\tthis.telemetryService = NullTelemetryService;\n\t\t}\n\n// TODO: \t\tthis.keybindingService = new WorkbenchKeybindingService(this.configurationService, this.contextService, this.eventService, this.telemetryService, <any>window);\n\t\tthis.keybindingService = new WorkbenchKeybindingService(this.configurationService, document.body);\n\n// TODO: \t\tthis.messageService = new MessageService(this.contextService, this.windowService, this.telemetryService, this.keybindingService);\n\t\tthis.messageService = new MessageService(this.telemetryService, this.keybindingService);\n\t\tthis.keybindingService.setMessageService(this.messageService);\n\n\t\tlet fileService = new FileService(\n\t\t\tthis.configurationService,\n\t\t\tthis.eventService,\n\t\t\tthis.contextService,\n\t\t\tthis.githubService\n\t\t);\n\t\tthis.contextViewService = new ContextViewService(this.container, this.telemetryService, this.messageService);\n\n// TODO: \t\tlet lifecycleService = new LifecycleService(this.messageService, this.windowService);\n\t\tlet lifecycleService = new LifecycleService();\n// TODO: \t\tlifecycleService.onShutdown(() => fileService.dispose());\n\n// TODO: \t\tthis.threadService = new MainThreadService(this.contextService, this.messageService, this.windowService);\n\t\tthis.threadService = new MainThreadService(this.contextService, 'vs/editor/common/worker/editorWorkerServer', 1);\n// TODO: \t\tlifecycleService.onShutdown(() => this.threadService.dispose());\n\n/* TODO:\n\t\tlet requestService = new RequestService(\n\t\t\tthis.contextService,\n\t\t\tthis.configurationService,\n\t\t\tthis.telemetryService\n\t\t);\n*/\n// TODO: \t\tlifecycleService.onShutdown(() => requestService.dispose());\n\n\t\tlet markerService = new MainProcessMarkerService(this.threadService);\n\n// TODO: \t\tlet extensionService = new MainProcessExtensionService(this.contextService, this.threadService, this.messageService, this.telemetryService);\n\t\tlet extensionService = new MainProcessExtensionService();\n// TODO: \t\tthis.keybindingService.setExtensionService(extensionService);\n\n\t\tlet modeService = this.modeService = new MainThreadModeServiceImpl(this.threadService, extensionService, this.configurationService);\n\t\tlet modelService = this.modelService = new ModelServiceImpl(this.threadService, markerService, modeService, this.configurationService, this.messageService);\n\t\tlet editorWorkerService = this.editorWorkerService = new EditorWorkerServiceImpl(modelService);\n\n\t\tlet untitledEditorService = new UntitledEditorService();\n\t\tthis.themeService = new ThemeService(extensionService, this.windowService, this.storageService);\n\n\t\tlet result = createInstantiationService();\n\t\tresult.addSingleton(ITelemetryService, this.telemetryService);\n\t\tresult.addSingleton(IEventService, this.eventService);\n// TODO:\t\tresult.addSingleton(IRequestService, requestService);\n\t\tresult.addSingleton(IWorkspaceContextService, this.contextService);\n\t\tresult.addSingleton(IContextViewService, this.contextViewService);\n\t\tresult.addSingleton(IContextMenuService, new ContextMenuService(document.body /* TODO: correct element? */, this.telemetryService, this.messageService, this.contextViewService));\n\t\tresult.addSingleton(IMessageService, this.messageService);\n\t\tresult.addSingleton(IStorageService, this.storageService);\n\t\tresult.addSingleton(ILifecycleService, lifecycleService);\n\t\tresult.addSingleton(IThreadService, this.threadService);\n\t\tresult.addSingleton(IExtensionService, extensionService);\n\t\tresult.addSingleton(IModeService, modeService);\n\t\tresult.addSingleton(IFileService, fileService);\n\t\tresult.addSingleton(IUntitledEditorService, untitledEditorService);\n// TODO: \t\tresult.addSingleton(ISearchService, new SearchService(modelService, untitledEditorService, this.contextService, configService));\n\t\tresult.addSingleton(IWindowService, this.windowService);\n\t\tresult.addSingleton(IConfigurationService, this.configurationService);\n\t\tresult.addSingleton(IKeybindingService, this.keybindingService);\n\t\tresult.addSingleton(IMarkerService, markerService);\n\t\tresult.addSingleton(IModelService, modelService);\n\t\tresult.addSingleton(ICodeEditorService, new CodeEditorServiceImpl());\n\t\tresult.addSingleton(IEditorWorkerService, editorWorkerService);\n\t\tresult.addSingleton(IThemeService, this.themeService);\n\t\tresult.addSingleton(IActionsService, new ActionsService(extensionService, this.keybindingService));\n\n\t\t// TODO: this should be moved to workbench.ts\n\t\tthis.textFileService = new TextFileService(this.contextService, result, fileService, untitledEditorService,\n\t\t\t\tlifecycleService, this.telemetryService, this.configurationService, this.eventService, modeService, null /* TODO: IWorkbenchEditorService */, this.windowService);\n\t\tresult.addSingleton(ITextFileService, this.textFileService);\n\n\t\treturn result;\n\t}\n\n\t// TODO@Alex, TODO@Joh move this out of here?\n\tprivate initExtensionSystem(): void {\n// TODO: \t\tthis.threadService.getRemotable(MainProcessVSCodeAPIHelper);\n// TODO: \t\tthis.threadService.getRemotable(MainThreadDocuments);\n\t\tthis.threadService.getRemotable(RemoteTelemetryServiceHelper);\n// TODO:\t\tthis.workbench.getInstantiationService().createInstance(MainProcessTextMateSyntax);\n// TODO:\t\tthis.workbench.getInstantiationService().createInstance(MainProcessTextMateSnippet);\n\t\tthis.workbench.getInstantiationService().createInstance(JSONValidationExtensionPoint);\n// TODO:\t\tthis.workbench.getInstantiationService().createInstance(LanguageConfigurationFileHandler);\n// TODO: \t\tthis.threadService.getRemotable(MainThreadConfiguration);\n// TODO: \t\tthis.threadService.getRemotable(MainThreadQuickOpen);\n// TODO: \t\tthis.threadService.getRemotable(MainThreadStatusBar);\n// TODO:\t\tthis.workbench.getInstantiationService().createInstance(MainThreadFileSystemEventService);\n// TODO: \t\tthis.threadService.getRemotable(MainThreadCommands);\n// TODO: \t\tthis.threadService.getRemotable(MainThreadOutputService);\n// TODO: \t\tthis.threadService.getRemotable(MainThreadDiagnostics);\n// TODO: \t\tthis.threadService.getRemotable(MainThreadMessageService);\n// TODO: \t\tthis.threadService.getRemotable(MainThreadLanguages);\n// TODO: \t\tthis.threadService.getRemotable(MainThreadWorkspace);\n// TODO: \t\tthis.threadService.getRemotable(MainThreadEditors);\n// TODO: \t\tthis.threadService.getRemotable(MainThreadStorage);\n// TODO: \t\tthis.threadService.getRemotable(MainThreadLanguageFeatures);\n\t}\n\n\tpublic open(): void {\n\n\t\t// Listen on unexpected errors\n\t\terrors.setUnexpectedErrorHandler((error: any) => {\n\t\t\tthis.onUnexpectedError(error);\n\t\t});\n\n\t\t// Shell Class for CSS Scoping\n\t\t$(this.container).addClass('monaco-shell');\n\n\t\t// Controls\n\t\tthis.content = $('.monaco-shell-content').appendTo(this.container).getHTMLElement();\n\n\t\t// Handle Load Performance Timers\n\t\tthis.writeTimers();\n\n\t\t// Create Contents\n\t\tthis.contentsContainer = this.createContents($(this.content));\n\n\t\t// Layout\n\t\tthis.layout();\n\n\t\t// Listeners\n\t\tthis.registerListeners();\n\n\t\t// Enable theme support\n\t\tthis.themeService.initialize(this.container).then(null, error => {\n\t\t\terrors.onUnexpectedError(error);\n\t\t});\n\t}\n\n\tprivate registerListeners(): void {\n\n\t\t// Resize\n\t\t$(window).on(dom.EventType.RESIZE, () => this.layout(), this.toUnbind);\n\t}\n\n\tprivate writeTimers(): void {\n\t\tlet timers = (<any>window).MonacoEnvironment.timers;\n\t\tif (timers) {\n\t\t\tlet events: timer.IExistingTimerEvent[] = [];\n\n\t\t\t// Program\n\t\t\tif (timers.beforeProgram) {\n\t\t\t\tevents.push({\n\t\t\t\t\tstartTime: timers.beforeProgram,\n\t\t\t\t\tstopTime: timers.afterProgram,\n\t\t\t\t\ttopic: 'Startup',\n\t\t\t\t\tname: 'Program Start',\n\t\t\t\t\tdescription: 'Time it takes to pass control to VSCodes main method'\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Window\n\t\t\tif (timers.vscodeStart) {\n\t\t\t\tevents.push({\n\t\t\t\t\tstartTime: timers.vscodeStart,\n\t\t\t\t\tstopTime: timers.beforeLoad,\n\t\t\t\t\ttopic: 'Startup',\n\t\t\t\t\tname: 'VSCode Startup',\n\t\t\t\t\tdescription: 'Time it takes to create a window and startup VSCode'\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Load\n\t\t\tevents.push({\n\t\t\t\tstartTime: timers.beforeLoad,\n\t\t\t\tstopTime: timers.afterLoad,\n\t\t\t\ttopic: 'Startup',\n\t\t\t\tname: 'Load Modules',\n\t\t\t\tdescription: 'Time it takes to load VSCodes main modules'\n\t\t\t});\n\n\t\t\t// Ready\n\t\t\tevents.push({\n\t\t\t\tstartTime: timers.beforeReady,\n\t\t\t\tstopTime: timers.afterReady,\n\t\t\t\ttopic: 'Startup',\n\t\t\t\tname: 'Event DOMContentLoaded',\n\t\t\t\tdescription: 'Time it takes for the DOM to emit DOMContentLoaded event'\n\t\t\t});\n\n\t\t\t// Write to Timer\n\t\t\ttimer.getTimeKeeper().setInitialCollectedEvents(events, timers.start);\n\t\t}\n\t}\n\n\tpublic onUnexpectedError(error: any): void {\n\t\tlet errorMsg = errors.toErrorMessage(error, true);\n\t\tif (!errorMsg) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet now = new Date().getTime();\n\t\tif (errorMsg === this.previousErrorValue && now - this.previousErrorTime <= 1000) {\n\t\t\treturn; // Return if error message identical to previous and shorter than 1 second\n\t\t}\n\n\t\tthis.previousErrorTime = now;\n\t\tthis.previousErrorValue = errorMsg;\n\n\t\t// Log to console\n\t\tconsole.error(errorMsg);\n\n\t\t// Show to user if friendly message provided\n\t\tif (error && error.friendlyMessage && this.messageService) {\n\t\t\tthis.messageService.show(Severity.Error, error.friendlyMessage);\n\t\t}\n\t}\n\n\tpublic layout(): void {\n\t\tlet clArea = $(this.container).getClientArea();\n\n\t\tlet contentsSize = new Dimension(clArea.width, clArea.height);\n\t\tthis.contentsContainer.size(contentsSize.width, contentsSize.height);\n\n\t\tthis.contextViewService.layout();\n\t\tthis.workbench.layout();\n\t}\n\n\tpublic joinCreation(): TPromise<boolean> {\n\t\treturn this.workbench.joinCreation();\n\t}\n\n\tpublic dispose(force?: boolean): void {\n\n\t\t// Workbench\n\t\tif (this.workbench) {\n\t\t\tlet veto = this.workbench.shutdown(force);\n\n\t\t\t// If Workbench vetos dispose, return early\n\t\t\tif (veto) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tthis.contextViewService.dispose();\n\t\tthis.storageService.dispose();\n\n\t\t// Listeners\n\t\tthis.toUnbind = dispose(this.toUnbind);\n\n\t\t// Container\n\t\t$(this.container).empty();\n\t}\n}"]}