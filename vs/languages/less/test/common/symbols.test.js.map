{"version":3,"file":"vs/languages/less/test/common/symbols.test.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/languages/less/test/common/symbols.test.ts"],"names":[],"mappings":";IAAA;;;oGAGgG;IAChG,YAAY,CAAC;IAOb,KAAK,CAAC,gBAAgB,EAAE;QAEvB,IAAI,CAAC,gBAAgB,EAAE;YACtB,IAAI,CAAC,GAAG,IAAI,MAAM,CAAC,UAAU,EAAE,CAAC;YAChC,WAAW,CAAC,mBAAmB,CAAC,CAAC,EAAE,YAAY,CAAC,CAAC;YACjD,WAAW,CAAC,mBAAmB,CAAC,CAAC,EAAE,uBAAuB,EAAE,EAAE,MAAM,EAAE,CAAC,EAAE,MAAM,EAAE,EAAE,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC;QACnH,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,mBAAmB,EAAE;YACzB,IAAI,CAAC,GAAG,IAAI,MAAM,CAAC,UAAU,EAAE,CAAC;YAChC,WAAW,CAAC,oBAAoB,CAAC,CAAC,EAAE,cAAc,EAAE,CAAC,EAAE,EAAE,IAAI,EAAC,MAAM,EAAE,IAAI,EAAC,KAAK,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC,CAAC;YAC3G,WAAW,CAAC,oBAAoB,CAAC,CAAC,EAAE,cAAc,EAAE,EAAE,EAAE,EAAE,IAAI,EAAC,MAAM,EAAE,IAAI,EAAC,KAAK,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC,CAAC;YAC5G,WAAW,CAAC,oBAAoB,CAAC,CAAC,EAAE,uCAAuC,EAAE,EAAE,EAAE,EAAE,IAAI,EAAC,MAAM,EAAE,IAAI,EAAC,KAAK,CAAC,aAAa,CAAC,QAAQ,EAAE,EAAE,EAAE,IAAI,EAAC,QAAQ,EAAE,IAAI,EAAC,KAAK,CAAC,aAAa,CAAC,IAAI,EAAE,CAAC,CAAC;YACvL,WAAW,CAAC,oBAAoB,CAAC,CAAC,EAAE,uCAAuC,EAAE,EAAE,EAAE,EAAE,IAAI,EAAC,QAAQ,EAAE,IAAI,EAAC,KAAK,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC,CAAC;YACvI,WAAW,CAAC,oBAAoB,CAAC,CAAC,EAAE,uCAAuC,EAAE,EAAE,EAAE,EAAE,IAAI,EAAC,QAAQ,EAAE,IAAI,EAAC,KAAK,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC,CAAC;YAEvI,WAAW,CAAC,oBAAoB,CAAC,CAAC,EAAE,6BAA6B,EAAE,CAAC,EAAE,EAAE,IAAI,EAAC,QAAQ,EAAE,IAAI,EAAC,KAAK,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC,CAAC;YACzH,WAAW,CAAC,oBAAoB,CAAC,CAAC,EAAE,2BAA2B,EAAE,EAAE,EAAE,EAAE,IAAI,EAAC,SAAS,EAAE,IAAI,EAAC,KAAK,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC,CAAC;YACzH,WAAW,CAAC,oBAAoB,CAAC,CAAC,EAAE,2BAA2B,EAAE,EAAE,CAAC,CAAC;YAErE,WAAW,CAAC,oBAAoB,CAAC,CAAC,EAAE,0BAA0B,EAAE,CAAC,EAAE,EAAE,IAAI,EAAC,WAAW,EAAE,IAAI,EAAC,KAAK,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC,CAAC;QAC7H,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,oBAAoB,EAAE;YAC1B,IAAI,CAAC,GAAG,IAAI,MAAM,CAAC,UAAU,EAAE,CAAC;YAChC,WAAW,CAAC,sBAAsB,CAAC,CAAC,EAAE,wCAAwC,EAAE,0BAA0B,CAAC,CAAC;YAC5G,WAAW,CAAC,sBAAsB,CAAC,CAAC,EAAE,iDAAiD,EAAE,uCAAuC,CAAC,CAAC;YAClI,WAAW,CAAC,sBAAsB,CAAC,CAAC,EAAE,+BAA+B,EAAE,kBAAkB,CAAC,CAAC;QAC5F,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,kBAAkB,EAAE;YACxB,IAAI,CAAC,GAAG,IAAI,MAAM,CAAC,UAAU,EAAE,CAAC;YAChC,WAAW,CAAC,iBAAiB,CAAC,CAAC,EAAE,6BAA6B,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;YAC5G,WAAW,CAAC,iBAAiB,CAAC,CAAC,EAAE,mCAAmC,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;YAClH,WAAW,CAAC,iBAAiB,CAAC,CAAC,EAAE,sEAAsE,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;YACrJ,WAAW,CAAC,iBAAiB,CAAC,CAAC,EAAE,0CAA0C,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;YACrH,WAAW,CAAC,iBAAiB,CAAC,CAAC,EAAE,qDAAqD,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;YACjI,WAAW,CAAC,iBAAiB,CAAC,CAAC,EAAE,qDAAqD,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;YACjI,WAAW,CAAC,iBAAiB,CAAC,CAAC,EAAE,oCAAoC,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;YACnH,WAAW,CAAC,iBAAiB,CAAC,CAAC,EAAE,oCAAoC,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;YACnH,WAAW,CAAC,iBAAiB,CAAC,CAAC,EAAE,oCAAoC,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;QACpH,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport parser = require('vs/languages/less/common/parser/lessParser');\nimport symbols = require('vs/languages/css/common/parser/cssSymbols');\nimport nodes = require('vs/languages/css/common/parser/cssNodes');\nimport symbolsTest = require('vs/languages/css/test/common/symbols.test');\n\nsuite('LESS - Symbols', () => {\n\n\ttest('scope building', function() {\n\t\tvar p = new parser.LessParser();\n\t\tsymbolsTest.assertScopeBuilding(p, '@var: blue');\n\t\tsymbolsTest.assertScopeBuilding(p, '.class { .nested {} }', { offset: 7, length: 14 }, { offset: 17, length: 2 });\n\t});\n\n\ttest('symbols in scopes', function() {\n\t\tvar p = new parser.LessParser();\n\t\tsymbolsTest.assertSymbolsInScope(p, '@var: iable;', 0, { name:'@var', type:nodes.ReferenceType.Variable });\n\t\tsymbolsTest.assertSymbolsInScope(p, '@var: iable;', 11, { name:'@var', type:nodes.ReferenceType.Variable });\n\t\tsymbolsTest.assertSymbolsInScope(p, '@var: iable; .class { @color: blue; }', 11, { name:'@var', type:nodes.ReferenceType.Variable }, { name:'.class', type:nodes.ReferenceType.Rule });\n\t\tsymbolsTest.assertSymbolsInScope(p, '@var: iable; .class { @color: blue; }', 21, { name:'@color', type:nodes.ReferenceType.Variable });\n\t\tsymbolsTest.assertSymbolsInScope(p, '@var: iable; .class { @color: blue; }', 36, { name:'@color', type:nodes.ReferenceType.Variable });\n\n\t\tsymbolsTest.assertSymbolsInScope(p, '@namespace \"x\"; .mixin() {}', 0, { name:'.mixin', type:nodes.ReferenceType.Mixin });\n\t\tsymbolsTest.assertSymbolsInScope(p, '.mixin() { .nested() {} }', 10, { name:'.nested', type:nodes.ReferenceType.Mixin });\n\t\tsymbolsTest.assertSymbolsInScope(p, '.mixin() { .nested() {} }', 11);\n\n\t\tsymbolsTest.assertSymbolsInScope(p, '@keyframes animation {};', 0, { name:'animation', type:nodes.ReferenceType.Keyframe });\n\t});\n\n\ttest('scopes and symbols', function() {\n\t\tvar p = new parser.LessParser();\n\t\tsymbolsTest.assertScopesAndSymbols(p, '@var1: 1; @var2: 2; .foo { @var3: 3; }', '@var1,@var2,.foo,[@var3]');\n\t\tsymbolsTest.assertScopesAndSymbols(p, '.mixin1 { @var0: 1} .mixin2(@var1) { @var3: 3 }', '.mixin1,.mixin2,[@var0],[@var1,@var3]');\n\t\tsymbolsTest.assertScopesAndSymbols(p, 'a b { @var0: 1; c { d { } } }', '[@var0,c,[d,[]]]');\n\t});\n\n\ttest('mark occurrences', function() {\n\t\tvar p = new parser.LessParser();\n\t\tsymbolsTest.assertOccurrences(p, '@var1: 1; @var2: /**/@var1;', '/**/', 2, 1, nodes.ReferenceType.Variable);\n\t\tsymbolsTest.assertOccurrences(p, '@var1: 1; p { @var2: /**/@var1; }', '/**/', 2, 1, nodes.ReferenceType.Variable);\n\t\tsymbolsTest.assertOccurrences(p, 'r1 { @var1: 1; p1: @var1;} r2,r3 { @var1: 1; p1: /**/@var1 + @var1;}', '/**/', 3, 1, nodes.ReferenceType.Variable);\n\t\tsymbolsTest.assertOccurrences(p, '.r1 { r1: 1em; } r2 { r1: 2em; /**/.r1;}', '/**/', 2, 1, nodes.ReferenceType.Rule);\n\t\tsymbolsTest.assertOccurrences(p, '.r1(@p1) { r1: @p1; } r2 { r1: 2em; /**/.r1(2px); }', '/**/', 2, 1, nodes.ReferenceType.Mixin);\n\t\tsymbolsTest.assertOccurrences(p, '/**/.r1(@p1) { r1: @p1; } r2 { r1: 2em; .r1(2px); }', '/**/', 2, 1, nodes.ReferenceType.Mixin);\n\t\tsymbolsTest.assertOccurrences(p, '@p1 : 1; .r1(@p1) { r1: /**/@p1; }', '/**/', 2, 1, nodes.ReferenceType.Variable);\n\t\tsymbolsTest.assertOccurrences(p, '/**/@p1 : 1; .r1(@p1) { r1: @p1; }', '/**/', 1, 1, nodes.ReferenceType.Variable);\n\t\tsymbolsTest.assertOccurrences(p, '@p1 : 1; .r1(/**/@p1) { r1: @p1; }', '/**/', 2, 1, nodes.ReferenceType.Variable);\n\t});\n});"]}