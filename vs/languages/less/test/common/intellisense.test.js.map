{"version":3,"file":"vs/languages/less/test/common/intellisense.test.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/languages/less/test/common/intellisense.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport assert = require('assert');\nimport mm = require('vs/editor/common/model/mirrorModel');\nimport lessWorker = require('vs/languages/less/common/lessWorker');\nimport URI from 'vs/base/common/uri';\nimport ResourceService = require('vs/editor/common/services/resourceServiceImpl');\nimport WinJS = require('vs/base/common/winjs.base');\nimport EditorCommon = require('vs/editor/common/editorCommon');\nimport Modes = require('vs/editor/common/modes');\nimport servicesUtil2 = require('vs/editor/test/common/servicesTestUtils');\nimport modesUtil = require('vs/editor/test/common/modesTestUtils');\n\nsuite('LESS - Intellisense', () => {\n\n\n\t//------------ TEST suggestions ----------------\n\n\tvar testSuggestionsFor = function(value:string, stringBefore:string):WinJS.TPromise<Modes.ISuggestResult> {\n\t\tvar resourceService = new ResourceService.ResourceService();\n\t\tvar url = URI.parse('test://1');\n\t\tresourceService.insert(url,  mm.createTestMirrorModelFromString(value, modesUtil.createMockMode('mock.mode.id', /(-?\\d*\\.\\d+)|([\\w-]+)/g), url));\n\n\t\tlet services = servicesUtil2.createMockEditorWorkerServices({\n\t\t\tresourceService: resourceService,\n\t\t});\n\n\t\tvar worker = new lessWorker.LessWorker('mock.mode.id', services.resourceService, services.markerService);\n\t\tvar position: EditorCommon.IPosition;\n\t\tif (stringBefore === null) {\n\t\t\tposition = { column: 1, lineNumber: 1 };\n\t\t} else {\n\t\t\tvar idx = value.indexOf(stringBefore);\n\t\t\tposition = {\n\t\t\t\tcolumn: idx + stringBefore.length + 1,\n\t\t\t\tlineNumber: 1\n\t\t\t};\n\t\t}\n\t\treturn worker.suggest(url, position).then(result => result[0]);\n\t};\n\n\tvar assertSuggestion= function(completion:Modes.ISuggestResult, label:string) {\n\t\tvar proposalsFound = completion.suggestions.filter(function(suggestion: Modes.ISuggestion) {\n\t\t\treturn suggestion.label === label;\n\t\t});\n\t\tif (proposalsFound.length != 1) {\n\t\t\tassert.fail(\"Suggestion not found: \" + label + \", has \" + completion.suggestions.map(s => s.label).join(', '));\n\t\t}\n\t};\n\n\ttest('LESS - Intellisense', function(testDone):any {\n\t\tWinJS.Promise.join([\n\t\t\ttestSuggestionsFor('body { ', '{ ').then(function(completion:Modes.ISuggestResult):void {\n\t\t\t\tassert.equal(completion.currentWord, '');\n\t\t\t\tassertSuggestion(completion, 'display');\n\t\t\t\tassertSuggestion(completion, 'background');\n\t\t\t}),\n\t\t\ttestSuggestionsFor('body { ver', 'ver').then(function(completion:Modes.ISuggestResult):void {\n\t\t\t\tassert.equal(completion.currentWord, 'ver');\n\t\t\t\tassertSuggestion(completion, 'vertical-align');\n\t\t\t}),\n\t\t\ttestSuggestionsFor('body { word-break: ', ': ').then(function(completion:Modes.ISuggestResult):void {\n\t\t\t\tassert.equal(completion.currentWord, '');\n\t\t\t\tassertSuggestion(completion, 'keep-all');\n\t\t\t}),\n\t\t\ttestSuggestionsFor('body { inner { vertical-align: }', ': ').then(function(completion:Modes.ISuggestResult):void {\n\t\t\t\tassert.equal(completion.currentWord, '');\n\t\t\t\tassertSuggestion(completion, 'bottom');\n\t\t\t}),\n\t\t\ttestSuggestionsFor('@var1: 3; body { inner { vertical-align: }', 'align: ').then(function(completion:Modes.ISuggestResult):void {\n\t\t\t\tassert.equal(completion.currentWord, '');\n\t\t\t\tassertSuggestion(completion, '@var1');\n\t\t\t}),\n\t\t\ttestSuggestionsFor('.foo { background-color: d', 'background-color: d').then((completion) => {\n\t\t\t\tassert.equal(completion.currentWord, 'd');\n\t\t\t\tassertSuggestion(completion, 'darken');\n\t\t\t\tassertSuggestion(completion, 'desaturate');\n\t\t\t})\n\t\t]).done(() => testDone(), (errors:any[]) => {\n\t\t\ttestDone(errors.reduce((e1, e2) => e1 || e2));\n\t\t});\n\t});\n});\n"]}