{"version":3,"file":"vs/languages/css/test/common/languageFacts.test.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/languages/css/test/common/languageFacts.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport assert = require('assert');\nimport languageFacts = require('vs/languages/css/common/services/languageFacts');\nimport _parser = require('vs/languages/css/common/parser/cssParser');\nimport nodes = require ('vs/languages/css/common/parser/cssNodes');\nimport workerTests = require('./css-worker.test');\n\nexport function assertColor(parser: _parser.Parser, text: string, selection: string, isColor: boolean):void {\n\tvar stylesheet = parser.parseStylesheet(workerTests.mockMirrorModel(text));\n\tassert.equal(0, nodes.ParseErrorCollector.entries(stylesheet).length, 'compile errors');\n\n\tvar node = nodes.getNodeAtOffset(stylesheet, text.indexOf(selection));\n\n\tassert.equal(isColor, languageFacts.isColorValue(node));\n}\n\nsuite('CSS language facts', () => {\n\n\ttest('properties', function() {\n\t\tvar properties = languageFacts.getProperties();\n\t\tvar alignLast = properties['text-align-last'];\n\n\t\tassert.ok(alignLast !== null);\n\t\tassert.equal(alignLast.name, 'text-align-last');\n\t\tvar b = alignLast.browsers;\n\t\tassert.equal(b['FF'], '12');\n\t\tassert.equal(b['IE'], '5');\n\t\tassert.equal(b['E'], '');\n\t\tassert.equal(b['C'], void 0);\n\t\tassert.equal(b['count'], 3);\n\n\t\tassert.equal(languageFacts.getBrowserLabel(alignLast.browsers) , 'Edge, Firefox 12, IE 5');\n\n\t\tvar r = alignLast.restrictions;\n\n\t\tassert.equal(r.length, 1);\n\t\tassert.equal(r[0], 'enum');\n\n\t\tvar v = alignLast.values;\n\t\tassert.equal(v.length, 5);\n\t\tassert.equal(v[0].name, 'auto');\n\t\tassert.equal(v[0].browsers.all, true);\n\t\tassert.equal(v[0].browsers.count, Number.MAX_VALUE);\n\t});\n\n\ttest('is color', function() {\n\t\tvar parser = new _parser.Parser();\n\t\tassertColor(parser, '#main { color: red }', 'red', true);\n\t\tassertColor(parser, '#main { color: #231 }', '#231', true);\n\t\tassertColor(parser, '#main { red: 1 }', 'red', false);\n\t\tassertColor(parser, '#red { foo: 1 }', 'red', false);\n\t});\n});\n\n"]}