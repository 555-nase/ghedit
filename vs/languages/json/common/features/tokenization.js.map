{"version":3,"file":"vs/languages/json/common/features/tokenization.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/languages/json/common/features/tokenization.ts"],"names":[],"mappings":";IAAA;;;oGAGgG;IAChG,YAAY,CAAC;IAMb,mCAA0C,IAAgB,EAAE,eAAuB;QAClF,MAAM,CAAC;YACN,4BAA4B,EAAE,KAAK;YACnC,eAAe,EAAE,cAAM,OAAA,IAAI,SAAS,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,CAAC,EAAtC,CAAsC;YAC7D,QAAQ,EAAE,UAAC,IAAI,EAAE,KAAK,EAAE,WAAY,EAAE,YAAa,IAAK,OAAA,QAAQ,CAAC,IAAI,EAAE,eAAe,EAAE,IAAI,EAAc,KAAK,EAAE,WAAW,EAAE,YAAY,CAAC,EAAnF,CAAmF;SAC3I,CAAC;IACH,CAAC;IANe,iCAAyB,4BAMxC,CAAA;IAED;QAQC,mBAAY,IAAiB,EAAE,KAAmB,EAAE,SAAyB,EAAE,YAAoB;YAClG,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;YAClB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;YACpB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;YAC3B,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QAClC,CAAC;QAEM,yBAAK,GAAZ;YACC,MAAM,CAAC,IAAI,SAAS,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;QAClF,CAAC;QAEM,0BAAM,GAAb,UAAc,KAAkB;YAC/B,EAAE,CAAA,CAAC,KAAK,KAAK,IAAI,CAAC,CAAC,CAAC;gBACnB,MAAM,CAAC,IAAI,CAAC;YACb,CAAC;YACD,EAAE,CAAA,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,KAAK,YAAY,SAAS,CAAC,CAAC,CAAC,CAAC;gBAC5C,MAAM,CAAC,KAAK,CAAC;YACd,CAAC;YACD,MAAM,CAAC,IAAI,CAAC,SAAS,KAAkB,KAAM,CAAC,SAAS;gBACtD,IAAI,CAAC,YAAY,KAAkB,KAAM,CAAC,YAAY,CAAC;QACzD,CAAC;QAEM,2BAAO,GAAd;YACC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;QACnB,CAAC;QAEM,4BAAQ,GAAf,UAAgB,MAAU;YACzB,MAAM,IAAI,KAAK,EAAE,CAAC;QACnB,CAAC;QAEM,gCAAY,GAAnB;YACC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;QACpB,CAAC;QAEM,gCAAY,GAAnB,UAAoB,KAAkB;YACrC,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACrB,CAAC;QACF,gBAAC;IAAD,CAAC,AA7CD,IA6CC;IAED,kBAAkB,IAAgB,EAAE,QAAgB,EAAE,IAAW,EAAE,KAAe,EAAE,WAAsB,EAAE,YAAoB;QAA5C,2BAAsB,GAAtB,eAAsB;QAEzG,8CAA8C;QAC9C,IAAI,0BAA0B,GAAG,CAAC,EACjC,YAAY,GAAG,KAAK,CAAC;QAEtB,MAAM,CAAA,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC;YACxB,KAAK,IAAI,CAAC,SAAS,CAAC,qBAAqB;gBACxC,IAAI,GAAG,GAAG,GAAG,IAAI,CAAC;gBAClB,0BAA0B,GAAG,CAAC,CAAC;gBAC/B,KAAK,CAAC;YACP,KAAK,IAAI,CAAC,SAAS,CAAC,sBAAsB;gBACzC,IAAI,GAAG,IAAI,GAAG,IAAI,CAAC;gBACnB,0BAA0B,GAAG,CAAC,CAAC;gBAC/B,KAAK,CAAC;QACR,CAAC;QAED,IAAI,OAAO,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,EACrC,IAAqB,EACrB,GAAqB,EACrB,YAAY,GAAG,KAAK,CAAC,YAAY,CAAC;QAEnC,GAAG,GAAG;YACL,MAAM,EAAkB,EAAE;YAC1B,gBAAgB,EAAE,IAAI,CAAC,MAAM;YAC7B,QAAQ,EAAE,KAAK,CAAC,KAAK,EAAE;YACvB,eAAe,EAAE,CAAC,EAAE,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;SAChD,CAAC;QAEF,OAAM,IAAI,EAAE,CAAC;YAEZ,IAAI,MAAM,GAAG,WAAW,GAAG,OAAO,CAAC,WAAW,EAAE,EAC/C,IAAI,GAAG,EAAE,CAAC;YAEX,IAAI,GAAG,OAAO,CAAC,IAAI,EAAE,CAAC;YACtB,EAAE,CAAA,CAAC,IAAI,KAAK,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC;gBACjC,KAAK,CAAC;YACP,CAAC;YAED,sCAAsC;YACtC,EAAE,CAAC,CAAC,MAAM,KAAK,WAAW,GAAG,OAAO,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;gBACpD,MAAM,IAAI,KAAK,CAAC,kDAAkD,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;YAC7G,CAAC;YAED,oDAAoD;YACpD,qDAAqD;YACrD,EAAE,CAAA,CAAC,YAAY,CAAC,CAAC,CAAC;gBACjB,MAAM,IAAI,0BAA0B,CAAC;YACtC,CAAC;YACD,YAAY,GAAG,0BAA0B,GAAG,CAAC,CAAC;YAG9C,oBAAoB;YACpB,MAAM,CAAA,CAAC,IAAI,CAAC,CAAC,CAAC;gBACb,KAAK,IAAI,CAAC,UAAU,CAAC,cAAc;oBAClC,IAAI,GAAG,cAAc,CAAC,kBAAkB,CAAC;oBACzC,YAAY,GAAG,KAAK,CAAC;oBACrB,KAAK,CAAC;gBACP,KAAK,IAAI,CAAC,UAAU,CAAC,eAAe;oBACnC,IAAI,GAAG,cAAc,CAAC,kBAAkB,CAAC;oBACzC,YAAY,GAAG,KAAK,CAAC;oBACrB,KAAK,CAAC;gBACP,KAAK,IAAI,CAAC,UAAU,CAAC,gBAAgB;oBACpC,IAAI,GAAG,cAAc,CAAC,iBAAiB,CAAC;oBACxC,YAAY,GAAG,KAAK,CAAC;oBACrB,KAAK,CAAC;gBACP,KAAK,IAAI,CAAC,UAAU,CAAC,iBAAiB;oBACrC,IAAI,GAAG,cAAc,CAAC,iBAAiB,CAAC;oBACxC,YAAY,GAAG,KAAK,CAAC;oBACrB,KAAK,CAAC;gBACP,KAAK,IAAI,CAAC,UAAU,CAAC,UAAU;oBAC9B,IAAI,GAAG,cAAc,CAAC,iBAAiB,CAAC;oBACxC,YAAY,GAAG,IAAI,CAAC;oBACpB,KAAK,CAAC;gBACP,KAAK,IAAI,CAAC,UAAU,CAAC,UAAU;oBAC9B,IAAI,GAAG,cAAc,CAAC,iBAAiB,CAAC;oBACxC,YAAY,GAAG,KAAK,CAAC;oBACrB,KAAK,CAAC;gBACP,KAAK,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC;gBACjC,KAAK,IAAI,CAAC,UAAU,CAAC,YAAY;oBAChC,IAAI,GAAG,cAAc,CAAC,mBAAmB,CAAC;oBAC1C,YAAY,GAAG,KAAK,CAAC;oBACrB,KAAK,CAAC;gBACP,KAAK,IAAI,CAAC,UAAU,CAAC,WAAW;oBAC/B,IAAI,GAAG,cAAc,CAAC,gBAAgB,CAAC;oBACvC,YAAY,GAAG,KAAK,CAAC;oBACrB,KAAK,CAAC;gBACP,KAAK,IAAI,CAAC,UAAU,CAAC,aAAa;oBACjC,IAAI,GAAG,YAAY,GAAG,cAAc,CAAC,kBAAkB,GAAG,cAAc,CAAC,mBAAmB,CAAC;oBAC7F,YAAY,GAAG,KAAK,CAAC;oBACrB,KAAK,CAAC;gBACP,KAAK,IAAI,CAAC,UAAU,CAAC,cAAc;oBAClC,IAAI,GAAG,cAAc,CAAC,kBAAkB,CAAC;oBACzC,YAAY,GAAG,KAAK,CAAC;oBACrB,KAAK,CAAC;YACR,CAAC;YAED,wBAAwB;YACxB,EAAE,CAAA,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACb,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;oBACd,KAAK,IAAI,CAAC,UAAU,CAAC,iBAAiB;wBACrC,IAAI,GAAG,cAAc,CAAC,kBAAkB,CAAC;wBACzC,KAAK,CAAC;oBACP,KAAK,IAAI,CAAC,UAAU,CAAC,kBAAkB;wBACtC,IAAI,GAAG,cAAc,CAAC,mBAAmB,CAAC;wBAC1C,KAAK,CAAC;gBACR,CAAC;YACF,CAAC;YAED,GAAG,CAAC,QAAQ,GAAG,IAAI,SAAS,CAAC,KAAK,CAAC,OAAO,EAAE,EAAE,KAAK,CAAC,YAAY,EAAE,EAAE,OAAO,CAAC,aAAa,EAAE,EAAE,YAAY,CAAC,CAAC;YAC3G,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC;gBACf,UAAU,EAAE,MAAM;gBAClB,IAAI,EAAE,IAAI;aACV,CAAC,CAAC;QACJ,CAAC;QAED,MAAM,CAAC,GAAG,CAAC;IACZ,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport json = require('vs/base/common/json');\nimport Modes = require('vs/editor/common/modes');\nimport jsonTokenTypes = require('vs/languages/json/common/features/jsonTokenTypes');\n\nexport function createTokenizationSupport(mode:Modes.IMode, supportComments:boolean):Modes.ITokenizationSupport {\n\treturn {\n\t\tshouldGenerateEmbeddedModels: false,\n\t\tgetInitialState: () => new JSONState(mode, null, null, false),\n\t\ttokenize: (line, state, offsetDelta?, stopAtOffset?) => tokenize(mode, supportComments, line, <JSONState> state, offsetDelta, stopAtOffset)\n\t};\n}\n\nclass JSONState implements Modes.IState {\n\n\tprivate _mode: Modes.IMode;\n\tprivate _state: Modes.IState;\n\n\tpublic scanError: json.ScanError;\n\tpublic lastWasColon: boolean;\n\n\tconstructor(mode: Modes.IMode, state: Modes.IState, scanError: json.ScanError, lastWasColon:boolean) {\n\t\tthis._mode = mode;\n\t\tthis._state = state;\n\t\tthis.scanError = scanError;\n\t\tthis.lastWasColon = lastWasColon;\n\t}\n\n\tpublic clone():JSONState {\n\t\treturn new JSONState(this._mode, this._state, this.scanError, this.lastWasColon);\n\t}\n\n\tpublic equals(other:Modes.IState):boolean {\n\t\tif(other === this) {\n\t\t\treturn true;\n\t\t}\n\t\tif(!other || !(other instanceof JSONState)) {\n\t\t\treturn false;\n\t\t}\n\t\treturn this.scanError === (<JSONState> other).scanError &&\n\t\t\tthis.lastWasColon === (<JSONState> other).lastWasColon;\n\t}\n\n\tpublic getMode():Modes.IMode {\n\t\treturn this._mode;\n\t}\n\n\tpublic tokenize(stream:any):Modes.ITokenizationResult {\n\t\tthrow new Error();\n\t}\n\n\tpublic getStateData():Modes.IState {\n\t\treturn this._state;\n\t}\n\n\tpublic setStateData(state:Modes.IState):void {\n\t\tthis._state = state;\n\t}\n}\n\nfunction tokenize(mode:Modes.IMode, comments:boolean, line:string, state:JSONState, offsetDelta:number = 0, stopAtOffset?:number):Modes.ILineTokens {\n\n\t// handle multiline strings and block comments\n\tvar numberOfInsertedCharacters = 0,\n\t\tadjustOffset = false;\n\n\tswitch(state.scanError) {\n\t\tcase json.ScanError.UnexpectedEndOfString:\n\t\t\tline = '\"' + line;\n\t\t\tnumberOfInsertedCharacters = 1;\n\t\t\tbreak;\n\t\tcase json.ScanError.UnexpectedEndOfComment:\n\t\t\tline = '/*' + line;\n\t\t\tnumberOfInsertedCharacters = 2;\n\t\t\tbreak;\n\t}\n\n\tvar scanner = json.createScanner(line),\n\t\tkind: json.SyntaxKind,\n\t\tret:Modes.ILineTokens,\n\t\tlastWasColon = state.lastWasColon;\n\n\tret = {\n\t\ttokens: <Modes.IToken[]>[],\n\t\tactualStopOffset: line.length,\n\t\tendState: state.clone(),\n\t\tmodeTransitions: [{ startIndex: 0, mode: mode }],\n\t};\n\n\twhile(true) {\n\n\t\tvar offset = offsetDelta + scanner.getPosition(),\n\t\t\ttype = '';\n\n\t\tkind = scanner.scan();\n\t\tif(kind === json.SyntaxKind.EOF) {\n\t\t\tbreak;\n\t\t}\n\n\t\t// Check that the scanner has advanced\n\t\tif (offset === offsetDelta + scanner.getPosition()) {\n\t\t\tthrow new Error('Scanner did not advance, next 3 characters are: ' + line.substr(scanner.getPosition(), 3));\n\t\t}\n\n\t\t// In case we inserted /* or \" character, we need to\n\t\t// adjust the offset of all tokens (except the first)\n\t\tif(adjustOffset) {\n\t\t\toffset -= numberOfInsertedCharacters;\n\t\t}\n\t\tadjustOffset = numberOfInsertedCharacters > 0;\n\n\n\t\t// brackets and type\n\t\tswitch(kind) {\n\t\t\tcase json.SyntaxKind.OpenBraceToken:\n\t\t\t\ttype = jsonTokenTypes.TOKEN_DELIM_OBJECT;\n\t\t\t\tlastWasColon = false;\n\t\t\t\tbreak;\n\t\t\tcase json.SyntaxKind.CloseBraceToken:\n\t\t\t\ttype = jsonTokenTypes.TOKEN_DELIM_OBJECT;\n\t\t\t\tlastWasColon = false;\n\t\t\t\tbreak;\n\t\t\tcase json.SyntaxKind.OpenBracketToken:\n\t\t\t\ttype = jsonTokenTypes.TOKEN_DELIM_ARRAY;\n\t\t\t\tlastWasColon = false;\n\t\t\t\tbreak;\n\t\t\tcase json.SyntaxKind.CloseBracketToken:\n\t\t\t\ttype = jsonTokenTypes.TOKEN_DELIM_ARRAY;\n\t\t\t\tlastWasColon = false;\n\t\t\t\tbreak;\n\t\t\tcase json.SyntaxKind.ColonToken:\n\t\t\t\ttype = jsonTokenTypes.TOKEN_DELIM_COLON;\n\t\t\t\tlastWasColon = true;\n\t\t\t\tbreak;\n\t\t\tcase json.SyntaxKind.CommaToken:\n\t\t\t\ttype = jsonTokenTypes.TOKEN_DELIM_COMMA;\n\t\t\t\tlastWasColon = false;\n\t\t\t\tbreak;\n\t\t\tcase json.SyntaxKind.TrueKeyword:\n\t\t\tcase json.SyntaxKind.FalseKeyword:\n\t\t\t\ttype = jsonTokenTypes.TOKEN_VALUE_BOOLEAN;\n\t\t\t\tlastWasColon = false;\n\t\t\t\tbreak;\n\t\t\tcase json.SyntaxKind.NullKeyword:\n\t\t\t\ttype = jsonTokenTypes.TOKEN_VALUE_NULL;\n\t\t\t\tlastWasColon = false;\n\t\t\t\tbreak;\n\t\t\tcase json.SyntaxKind.StringLiteral:\n\t\t\t\ttype = lastWasColon ? jsonTokenTypes.TOKEN_VALUE_STRING : jsonTokenTypes.TOKEN_PROPERTY_NAME;\n\t\t\t\tlastWasColon = false;\n\t\t\t\tbreak;\n\t\t\tcase json.SyntaxKind.NumericLiteral:\n\t\t\t\ttype = jsonTokenTypes.TOKEN_VALUE_NUMBER;\n\t\t\t\tlastWasColon = false;\n\t\t\t\tbreak;\n\t\t}\n\n\t\t// comments, iff enabled\n\t\tif(comments) {\n\t\t\tswitch (kind) {\n\t\t\t\tcase json.SyntaxKind.LineCommentTrivia:\n\t\t\t\t\ttype = jsonTokenTypes.TOKEN_COMMENT_LINE;\n\t\t\t\t\tbreak;\n\t\t\t\tcase json.SyntaxKind.BlockCommentTrivia:\n\t\t\t\t\ttype = jsonTokenTypes.TOKEN_COMMENT_BLOCK;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tret.endState = new JSONState(state.getMode(), state.getStateData(), scanner.getTokenError(), lastWasColon);\n\t\tret.tokens.push({\n\t\t\tstartIndex: offset,\n\t\t\ttype: type\n\t\t});\n\t}\n\n\treturn ret;\n}"]}