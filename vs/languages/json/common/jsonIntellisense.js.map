{"version":3,"sources":["vs/languages/json/common/jsonIntellisense.ts"],"names":[],"mappings":"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","file":"vs/languages/json/common/jsonIntellisense.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport EditorCommon = require('vs/editor/common/editorCommon');\nimport Modes = require('vs/editor/common/modes');\nimport URI from 'vs/base/common/uri';\nimport Parser = require('./parser/jsonParser');\nimport SchemaService = require('./jsonSchemaService');\nimport Types = require('vs/base/common/types');\nimport WinJS = require('vs/base/common/winjs.base');\nimport JsonWorker = require('./jsonWorker');\nimport JsonSchema = require('vs/base/common/jsonSchema');\nimport nls = require('vs/nls');\nimport errors = require('vs/base/common/errors');\nimport {IRequestService} from 'vs/platform/request/common/request';\n\nexport class JSONIntellisense {\n\n\tprivate schemaService: SchemaService.IJSONSchemaService;\n\tprivate requestService: IRequestService;\n\tprivate contributions: JsonWorker.IJSONWorkerContribution[];\n\n\tconstructor(schemaService: SchemaService.IJSONSchemaService, requestService: IRequestService, contributions: JsonWorker.IJSONWorkerContribution[]) {\n\t\tthis.schemaService = schemaService;\n\t\tthis.requestService = requestService;\n\t\tthis.contributions = contributions;\n\t}\n\n\tpublic doSuggest(resource: URI, modelMirror: EditorCommon.IMirrorModel, position: EditorCommon.IPosition): WinJS.TPromise<Modes.ISuggestResult> {\n\t\tvar currentWord = modelMirror.getWordUntilPosition(position).word;\n\n\t\tvar parser = new Parser.JSONParser();\n\t\tvar config = new Parser.JSONDocumentConfig();\n\t\t// so you can invoke suggest after the comma in an object literal\n\t\tconfig.ignoreDanglingComma = true;\n\n\t\tvar doc = parser.parse(modelMirror.getValue(), config);\n\n\t\tvar result: Modes.ISuggestResult = {\n\t\t\tcurrentWord: currentWord,\n\t\t\tincomplete: false,\n\t\t\tsuggestions: []\n\t\t};\n\t\tvar overwriteBefore = void 0;\n\t\tvar overwriteAfter = void 0;\n\n\t\tvar proposed: { [key: string]: boolean } = {};\n\t\tvar collector : JsonWorker.ISuggestionsCollector = {\n\t\t\tadd: (suggestion: Modes.ISuggestion) => {\n\t\t\t\tif (!proposed[suggestion.label]) {\n\t\t\t\t\tproposed[suggestion.label] = true;\n\n\t\t\t\t\tsuggestion.overwriteBefore = overwriteBefore;\n\t\t\t\t\tsuggestion.overwriteAfter = overwriteAfter;\n\t\t\t\t\tresult.suggestions.push(suggestion);\n\t\t\t\t}\n\t\t\t},\n\t\t\tsetAsIncomplete: () => {\n\t\t\t\tresult.incomplete = true;\n\t\t\t},\n\t\t\terror: (message: string) => {\n\t\t\t\terrors.onUnexpectedError(message);\n\t\t\t}\n\t\t};\n\n\t\treturn this.schemaService.getSchemaForResource(resource.toString(), doc).then((schema) => {\n\t\t\tvar collectionPromises: WinJS.Promise[] = [];\n\n\t\t\tvar offset = modelMirror.getOffsetFromPosition(position);\n\t\t\tvar node = doc.getNodeFromOffsetEndInclusive(offset);\n\t\t\tvar addValue = true;\n\t\t\tvar currentKey = currentWord;\n\t\t\tvar currentProperty : Parser.PropertyASTNode = null;\n\t\t\tif (node) {\n\n\t\t\t\tif (node.type === 'string') {\n\t\t\t\t\tvar stringNode = <Parser.StringASTNode> node;\n\t\t\t\t\tif (stringNode.isKey) {\n\t\t\t\t\t\tvar nodeRange = modelMirror.getRangeFromOffsetAndLength(node.start, node.end - node.start);\n\t\t\t\t\t\toverwriteBefore = position.column - nodeRange.startColumn;\n\t\t\t\t\t\toverwriteAfter = nodeRange.endColumn - position.column;\n\t\t\t\t\t\taddValue = !(node.parent && ((<Parser.PropertyASTNode> node.parent).value));\n\t\t\t\t\t\tcurrentProperty = node.parent ? <Parser.PropertyASTNode> node.parent : null;\n\t\t\t\t\t\tcurrentKey = modelMirror.getValueInRange({ startColumn: nodeRange.startColumn + 1, startLineNumber: nodeRange.startLineNumber, endColumn: position.column, endLineNumber: position.lineNumber });\n\t\t\t\t\t\tif (node.parent) {\n\t\t\t\t\t\t\tnode = node.parent.parent;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// proposals for properties\n\t\t\tif (node && node.type === 'object') {\n\t\t\t\t// don't suggest keys when the cursor is just before the opening curly brace\n\t\t\t\tif (node.start === offset) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\t\t\t\t// don't suggest properties that are already present\n\t\t\t\tvar properties = (<Parser.ObjectASTNode> node).properties;\n\t\t\t\tproperties.forEach(p => {\n\t\t\t\t\tif (!currentProperty || currentProperty !== p) {\n\t\t\t\t\t\tproposed[p.key.value] = true;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tif (schema) {\n\t\t\t\t\t// property proposals with schema\n\t\t\t\t\tvar isLast = properties.length === 0 || offset >= properties[properties.length - 1].start;\n\t\t\t\t\tthis.getPropertySuggestions(resource, schema, doc, node, currentKey, addValue, isLast, collector);\n\t\t\t\t} else if (node.parent) {\n\t\t\t\t\t// property proposals without schema\n\t\t\t\t\tthis.getSchemaLessPropertySuggestions(doc, node, collector);\n\t\t\t\t}\n\n\t\t\t\tvar location = node.getNodeLocation();\n\t\t\t\tthis.contributions.forEach((contribution) => {\n\t\t\t\t\tvar collectPromise = contribution.collectPropertySuggestions(resource, location, currentWord, addValue, isLast, collector);\n\t\t\t\t\tif (collectPromise) {\n\t\t\t\t\t\tcollectionPromises.push(collectPromise);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// proposals for values\n\t\t\tif (node && (node.type === 'string' || node.type === 'number' || node.type === 'integer' || node.type === 'boolean' || node.type === 'null')) {\n\t\t\t\tvar nodeRange = modelMirror.getRangeFromOffsetAndLength(node.start, node.end - node.start);\n\t\t\t\toverwriteBefore = position.column - nodeRange.startColumn;\n\t\t\t\toverwriteAfter = nodeRange.endColumn - position.column;\n\t\t\t\tnode = node.parent;\n\t\t\t}\n\n\t\t\tif (schema) {\n\t\t\t\t// value proposals with schema\n\t\t\t\tthis.getValueSuggestions(resource, schema, doc, node, offset, collector);\n\t\t\t} else {\n\t\t\t\t// value proposals without schema\n\t\t\t\tthis.getSchemaLessValueSuggestions(doc, node, offset, modelMirror, collector);\n\t\t\t}\n\t\t\tif (!node) {\n\t\t\t\tthis.contributions.forEach((contribution) => {\n\t\t\t\t\tvar collectPromise = contribution.collectDefaultSuggestions(resource, collector);\n\t\t\t\t\tif (collectPromise) {\n\t\t\t\t\t\tcollectionPromises.push(collectPromise);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tif ((node.type === 'property') && offset > (<Parser.PropertyASTNode> node).colonOffset) {\n\t\t\t\t\tvar parentKey = (<Parser.PropertyASTNode>node).key.value;\n\n\t\t\t\t\tvar valueNode = (<Parser.PropertyASTNode> node).value;\n\t\t\t\t\tif (!valueNode || offset <= valueNode.end) {\n\t\t\t\t\t\tvar location = node.parent.getNodeLocation();\n\t\t\t\t\t\tthis.contributions.forEach((contribution) => {\n\t\t\t\t\t\t\tvar collectPromise = contribution.collectValueSuggestions(resource, location, parentKey, collector);\n\t\t\t\t\t\t\tif (collectPromise) {\n\t\t\t\t\t\t\t\tcollectionPromises.push(collectPromise);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\treturn WinJS.Promise.join(collectionPromises).then(() => { return result; } );\n\t\t});\n\t}\n\n\tprivate getPropertySuggestions(resource: URI, schema: SchemaService.ResolvedSchema, doc: Parser.JSONDocument, node: Parser.ASTNode, currentWord: string, addValue: boolean, isLast: boolean, collector: JsonWorker.ISuggestionsCollector): void {\n\t\tvar matchingSchemas: Parser.IApplicableSchema[] = [];\n\t\tdoc.validate(schema.schema, matchingSchemas, node.start);\n\n\t\tmatchingSchemas.forEach((s) => {\n\t\t\tif (s.node === node && !s.inverted) {\n\t\t\t\tvar schemaProperties = s.schema.properties;\n\t\t\t\tif (schemaProperties) {\n\t\t\t\t\tObject.keys(schemaProperties).forEach((key: string) => {\n\t\t\t\t\t\tvar propertySchema = schemaProperties[key];\n\t\t\t\t\t\tcollector.add({ type: 'property', label: key, codeSnippet: this.getTextForProperty(key, propertySchema, addValue, isLast), documentationLabel: propertySchema.description || '' });\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate getSchemaLessPropertySuggestions(doc: Parser.JSONDocument, node: Parser.ASTNode, collector: JsonWorker.ISuggestionsCollector): void {\n\t\tvar collectSuggestionsForSimilarObject = (obj: Parser.ObjectASTNode) => {\n\t\t\tobj.properties.forEach((p) => {\n\t\t\t\tvar key = p.key.value;\n\t\t\t\tcollector.add({ type: 'property', label: key, codeSnippet: this.getTextForSimilarProperty(key, p.value), documentationLabel: '' });\n\t\t\t});\n\t\t};\n\t\tif (node.parent.type === 'property') {\n\t\t\t// if the object is a property value, check the tree for other objects that hang under a property of the same name\n\t\t\tvar parentKey = (<Parser.PropertyASTNode>node.parent).key.value;\n\t\t\tdoc.visit((n) => {\n\t\t\t\tif (n.type === 'property' && (<Parser.PropertyASTNode>n).key.value === parentKey && (<Parser.PropertyASTNode>n).value && (<Parser.PropertyASTNode>n).value.type === 'object') {\n\t\t\t\t\tcollectSuggestionsForSimilarObject(<Parser.ObjectASTNode> (<Parser.PropertyASTNode>n).value);\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t});\n\t\t} else if (node.parent.type === 'array') {\n\t\t\t// if the object is in an array, use all other array elements as similar objects\n\t\t\t(<Parser.ArrayASTNode> node.parent).items.forEach((n) => {\n\t\t\t\tif (n.type === 'object' && n !== node) {\n\t\t\t\t\tcollectSuggestionsForSimilarObject(<Parser.ObjectASTNode> n);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tpublic getSchemaLessValueSuggestions(doc: Parser.JSONDocument, node: Parser.ASTNode, offset: number, modelMirror: EditorCommon.IMirrorModel, collector: JsonWorker.ISuggestionsCollector): void {\n\t\tvar collectSuggestionsForValues = (value: Parser.ASTNode) => {\n\t\t\tvar content = this.getTextForMatchingNode(value, modelMirror);\n\t\t\tcollector.add({ type: this.getSuggestionType(value.type), label: content, codeSnippet: content, documentationLabel: '' });\n\t\t\tif (value.type === 'boolean') {\n\t\t\t\tthis.addBooleanSuggestion(!value.getValue(), collector);\n\t\t\t}\n\t\t};\n\n\t\tif (!node) {\n\t\t\tcollector.add({ type: this.getSuggestionType('object'), label: 'Empty object', codeSnippet: '{\\n\\t{{}}\\n}', documentationLabel: '' });\n\t\t\tcollector.add({ type: this.getSuggestionType('array'), label: 'Empty array', codeSnippet: '[\\n\\t{{}}\\n]', documentationLabel: '' });\n\t\t} else {\n\t\t\tif (node.type === 'property' && offset > (<Parser.PropertyASTNode> node).colonOffset) {\n\t\t\t\tvar valueNode = (<Parser.PropertyASTNode>node).value;\n\t\t\t\tif (valueNode && offset > valueNode.end) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t// suggest values at the same key\n\t\t\t\tvar parentKey = (<Parser.PropertyASTNode>node).key.value;\n\t\t\t\tdoc.visit((n) => {\n\t\t\t\t\tif (n.type === 'property' && (<Parser.PropertyASTNode>n).key.value === parentKey && (<Parser.PropertyASTNode>n).value) {\n\t\t\t\t\t\tcollectSuggestionsForValues((<Parser.PropertyASTNode>n).value);\n\t\t\t\t\t}\n\t\t\t\t\treturn true;\n\t\t\t\t});\n\t\t\t}\n\t\t\tif (node.type === 'array') {\n\t\t\t\tif (node.parent && node.parent.type === 'property') {\n\t\t\t\t\t// suggest items of an array at the same key\n\t\t\t\t\tvar parentKey = (<Parser.PropertyASTNode>node.parent).key.value;\n\t\t\t\t\tdoc.visit((n) => {\n\t\t\t\t\t\tif (n.type === 'property' && (<Parser.PropertyASTNode>n).key.value === parentKey && (<Parser.PropertyASTNode>n).value && (<Parser.PropertyASTNode>n).value.type === 'array') {\n\t\t\t\t\t\t\t((<Parser.ArrayASTNode>(<Parser.PropertyASTNode>n).value).items).forEach((n) => {\n\t\t\t\t\t\t\t\tcollectSuggestionsForValues(<Parser.ObjectASTNode> n);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\t// suggest items in the same array\n\t\t\t\t\t(<Parser.ArrayASTNode> node).items.forEach((n) => {\n\t\t\t\t\t\tcollectSuggestionsForValues(<Parser.ObjectASTNode> n);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\n\tpublic getValueSuggestions(resource: URI, schema: SchemaService.ResolvedSchema, doc: Parser.JSONDocument, node: Parser.ASTNode, offset: number, collector: JsonWorker.ISuggestionsCollector) : void {\n\n\t\tif (!node) {\n\t\t\tthis.addDefaultSuggestion(schema.schema, collector);\n\t\t} else {\n\t\t\tvar parentKey: string = null;\n\t\t\tif (node && (node.type === 'property') && offset > (<Parser.PropertyASTNode> node).colonOffset) {\n\t\t\t\tvar valueNode = (<Parser.PropertyASTNode> node).value;\n\t\t\t\tif (valueNode && offset > valueNode.end) {\n\t\t\t\t\treturn; // we are past the value node\n\t\t\t\t}\n\t\t\t\tparentKey = (<Parser.PropertyASTNode>node).key.value;\n\t\t\t\tnode = node.parent;\n\t\t\t}\n\t\t\tif (node && (parentKey !== null || node.type === 'array')) {\n\t\t\t\tvar matchingSchemas: Parser.IApplicableSchema[] = [];\n\t\t\t\tdoc.validate(schema.schema, matchingSchemas, node.start);\n\n\t\t\t\tmatchingSchemas.forEach((s) => {\n\t\t\t\t\tif (s.node === node && !s.inverted && s.schema) {\n\t\t\t\t\t\tif (s.schema.items) {\n\t\t\t\t\t\t\tthis.addDefaultSuggestion(s.schema.items, collector);\n\t\t\t\t\t\t\tthis.addEnumSuggestion(s.schema.items, collector);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (s.schema.properties) {\n\t\t\t\t\t\t\tvar propertySchema = s.schema.properties[parentKey];\n\t\t\t\t\t\t\tif (propertySchema) {\n\t\t\t\t\t\t\t\tthis.addDefaultSuggestion(propertySchema, collector);\n\t\t\t\t\t\t\t\tthis.addEnumSuggestion(propertySchema, collector);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate addBooleanSuggestion(value: boolean, collector: JsonWorker.ISuggestionsCollector): void {\n\t\tcollector.add({ type: this.getSuggestionType('boolean'), label: value ? 'true' : 'false', codeSnippet: this.getTextForEnumValue(value), documentationLabel: '' });\n\t}\n\n\tprivate addEnumSuggestion(schema: JsonSchema.IJSONSchema, collector: JsonWorker.ISuggestionsCollector): void {\n\t\tif (Array.isArray(schema.enum)) {\n\t\t\tschema.enum.forEach((enm) => collector.add({ type: this.getSuggestionType(schema.type), label: this.getLabelForValue(enm), codeSnippet: this.getTextForEnumValue(enm), documentationLabel: '' }));\n\t\t} else if (schema.type === 'boolean') {\n\t\t\tthis.addBooleanSuggestion(true, collector);\n\t\t\tthis.addBooleanSuggestion(false, collector);\n\t\t}\n\t\tif (Array.isArray(schema.allOf)) {\n\t\t\tschema.allOf.forEach((s) => this.addEnumSuggestion(s, collector));\n\t\t}\n\t\tif (Array.isArray(schema.anyOf)) {\n\t\t\tschema.anyOf.forEach((s) => this.addEnumSuggestion(s, collector));\n\t\t}\n\t\tif (Array.isArray(schema.oneOf)) {\n\t\t\tschema.oneOf.forEach((s) => this.addEnumSuggestion(s, collector));\n\t\t}\n\t}\n\n\tprivate addDefaultSuggestion(schema: JsonSchema.IJSONSchema, collector: JsonWorker.ISuggestionsCollector): void {\n\t\tif (schema.default) {\n\t\t\tcollector.add({\n\t\t\t\ttype: this.getSuggestionType(schema.type),\n\t\t\t\tlabel: this.getLabelForValue(schema.default),\n\t\t\t\tcodeSnippet: this.getTextForValue(schema.default),\n\t\t\t\ttypeLabel:  nls.localize('json.suggest.default', 'Default value'),\n\t\t\t});\n\t\t}\n\t\tif (Array.isArray(schema.defaultSnippets)) {\n\t\t\tschema.defaultSnippets.forEach(s => {\n\t\t\t\tcollector.add({\n\t\t\t\t\ttype: 'snippet',\n\t\t\t\t\tlabel: this.getLabelForSnippetValue(s.body),\n\t\t\t\t\tcodeSnippet: this.getTextForSnippetValue(s.body)\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t\tif (Array.isArray(schema.allOf)) {\n\t\t\tschema.allOf.forEach((s) => this.addDefaultSuggestion(s, collector));\n\t\t}\n\t\tif (Array.isArray(schema.anyOf)) {\n\t\t\tschema.anyOf.forEach((s) => this.addDefaultSuggestion(s, collector));\n\t\t}\n\t\tif (Array.isArray(schema.oneOf)) {\n\t\t\tschema.oneOf.forEach((s) => this.addDefaultSuggestion(s, collector));\n\t\t}\n\t}\n\n\tprivate getLabelForValue(value: any) : string {\n\t\tvar label = JSON.stringify(value);\n\t\tlabel = label.replace('{{', '').replace('}}', '');\n\t\tif (label.length > 57) {\n\t\t\treturn label.substr(0, 57).trim() + '...';\n\t\t}\n\t\treturn label;\n\t}\n\n\tprivate getLabelForSnippetValue(value: any): string {\n\t\tlet label = JSON.stringify(value);\n\t\tlabel = label.replace(/\\{\\{|\\}\\}/g, '');\n\t\tif (label.length > 57) {\n\t\t\treturn label.substr(0, 57).trim() + '...';\n\t\t}\n\t\treturn label;\n\t}\n\n\tprivate getTextForValue(value: any): string {\n\t\tvar text = JSON.stringify(value, null, '\\t');\n\t\ttext = text.replace(/[\\\\\\{\\}]/g, '\\\\$&');\n\t\treturn text;\n\t}\n\n\tprivate getTextForSnippetValue(value: any): string {\n\t\treturn JSON.stringify(value, null, '\\t');\n\t}\n\n\tprivate getTextForEnumValue(value: any) : string {\n\t\tvar snippet = JSON.stringify(value, null, '\\t');\n\t\tswitch (typeof value) {\n\t\t\tcase 'object':\n\t\t\t\tif (value === null) {\n\t\t\t\t\treturn '{{null}}';\n\t\t\t\t}\n\t\t\t\treturn snippet;\n\t\t\tcase 'string':\n\t\t\t\treturn '\"{{' + snippet.substr(1, snippet.length - 2) + '}}\"';\n\t\t\tcase 'number':\n\t\t\tcase 'integer':\n\t\t\tcase 'boolean':\n\t\t\t\treturn '{{' + snippet + '}}';\n\t\t}\n\t\treturn snippet;\n\t}\n\n\tprivate getSuggestionType(type: any): Modes.SuggestionType {\n\t\tif (Array.isArray(type)) {\n\t\t\tvar array = <any[]> type;\n\t\t\ttype = array.length > 0 ? array[0] : null;\n\t\t}\n\t\tif (!type) {\n\t\t\treturn 'text';\n\t\t}\n\t\tswitch (type) {\n\t\t\tcase 'string': return 'text';\n\t\t\tcase 'object': return 'module';\n\t\t\tcase 'property': return 'property';\n\t\t\tdefault: return 'value';\n\t\t}\n\t}\n\n\n\tprivate getTextForMatchingNode(node: Parser.ASTNode, modelMirror: EditorCommon.IMirrorModel): string {\n\t\tswitch (node.type) {\n\t\t\tcase 'array':\n\t\t\t\treturn '[]';\n\t\t\tcase 'object':\n\t\t\t\treturn '{}';\n\t\t\tdefault:\n\t\t\t\tvar content = modelMirror.getValueInRange(modelMirror.getRangeFromOffsetAndLength(node.start, node.end - node.start));\n\t\t\t\treturn content;\n\t\t}\n\t}\n\n\tprivate getTextForProperty(key: string, propertySchema: JsonSchema.IJSONSchema, addValue:boolean, isLast: boolean): string {\n\n\t\tlet result = this.getTextForValue(key);\n\t\tif (!addValue) {\n\t\t\treturn result;\n\t\t}\n\t\tresult += ': ';\n\n\t\tvar defaultVal = propertySchema.default;\n\t\tif (!Types.isUndefined(defaultVal)) {\n\t\t\tresult = result + this.getTextForEnumValue(defaultVal);\n\t\t} else if (propertySchema.enum && propertySchema.enum.length > 0) {\n\t\t\tresult = result + this.getTextForEnumValue(propertySchema.enum[0]);\n\t\t} else {\n\t\t\tswitch (propertySchema.type) {\n\t\t\t\tcase 'boolean':\n\t\t\t\t\tresult += '{{false}}';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'string':\n\t\t\t\t\tresult += '\"{{}}\"';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'object':\n\t\t\t\t\tresult += '{\\n\\t{{}}\\n}';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'array':\n\t\t\t\t\tresult += '[\\n\\t{{}}\\n]';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'number':\n\t\t\t\tcase 'integer':\n\t\t\t\t\tresult += '{{0}}';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'null':\n\t\t\t\t\tresult += '{{null}}';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\t\tif (!isLast) {\n\t\t\tresult += ',';\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate getTextForSimilarProperty(key: string, templateValue: Parser.ASTNode): string {\n\t\treturn this.getTextForValue(key);\n\t}\n}\n"]}