{"version":3,"file":"vs/languages/typescript/common/workerManager.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/languages/typescript/common/workerManager.ts"],"names":[],"mappings":";IAAA;;;oGAGgG;IAChG,YAAY,CAAC;IAWb;QAQC,uBAAY,YAA2B,EAAE,QAAiC;YAJlE,YAAO,GAAgF,IAAI,CAAC;YAC5F,mBAAc,GAAkB,EAAE,CAAC;YACnC,aAAQ,GAAG,IAAI,2CAAoB,EAAE,CAAC;YAG7C,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;YAClC,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;QAC3B,CAAC;QAEO,qCAAa,GAArB;YAAA,iBA4BC;YA1BA,IAAM,MAAM,GAAG,IAAI,iCAAkB,CAA2B,IAAI,CAAC,QAAQ,EAAE,uCAAuC,EAAE,qCAAwB,CAAC,CAAC;YAClJ,IAAM,OAAO,GAAG,IAAI,4CAAkB,CAAC,MAAM,CAAC,GAAG,EAAE,EAAE,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC;YAE/E,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAClC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAEjC,IAAM,UAAU,GAAG;gBAClB,KAAI,CAAC,cAAc,GAAG,mBAAO,CAAC,KAAI,CAAC,cAAc,CAAC,CAAC;gBACnD,KAAI,CAAC,OAAO,GAAG,IAAI,CAAC;YACrB,CAAC,CAAC;YAEF,+BAA+B;YAC/B,IAAM,MAAM,GAAG,WAAW,CAAC;gBAC1B,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,MAAM,CAAC,uBAAuB,EAAE,GAAG,IAAI,GAAG,EAAE,CAAC,CAAC,CAAC;oBAC/D,UAAU,EAAE,CAAC;gBACd,CAAC;YACF,CAAC,EAAE,IAAI,GAAG,EAAE,CAAC,CAAC;YACd,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE,OAAO,gBAAK,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;YAEnE,mCAAmC;YACnC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,cAAM,OAAA,UAAU,EAAE,EAAZ,CAAY,CAAC,CAAC,CAAC;YAEzE,oCAAoC;YACpC,IAAM,MAAM,GAAG,MAAM,CAAC,GAAG,EAAE,CAAC;YAC5B,IAAA,mBAAmD,EAA5C,oCAAe,EAAE,wBAAS,CAAmB;YACpD,MAAM,CAAC,MAAM,CAAC,cAAc,CAAC,eAAe,EAAE,SAAS,CAAC,CAAC,IAAI,CAAC,cAAM,OAAA,CAAC,EAAE,QAAA,MAAM,EAAE,SAAA,OAAO,EAAE,CAAC,EAArB,CAAqB,CAAC,CAAC;QAC5F,CAAC;QAED,+BAAO,GAAP;YACC,IAAI,CAAC,cAAc,GAAG,mBAAO,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;YACnD,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACrB,CAAC;QAED,gDAAwB,GAAxB;YAAyB,mBAAmB;iBAAnB,WAAmB,CAAnB,sBAAmB,CAAnB,IAAmB;gBAAnB,kCAAmB;;YAC3C,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;gBACnB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;YACrC,CAAC;YAED,MAAM,CAAC,IAAI,CAAC,OAAO;iBACjB,IAAI,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,OAAO,CAAC,mBAAmB,CAAC,SAAS,CAAC;iBACvD,IAAI,CAAC,UAAA,CAAC,IAAI,OAAA,IAAI,CAAC,MAAM,EAAX,CAAW,CAAC,EADV,CACU,CAAC,CAAC;QAC5B,CAAC;QACF,oBAAC;IAAD,CAAC,AAzDD,IAyDC;IAED,gBAAuB,QAAiC,EAAE,YAA2B;QACpF,MAAM,CAAC,IAAI,aAAa,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC;IAClD,CAAC;IAFe,cAAM,SAErB,CAAA","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport URI from 'vs/base/common/uri';\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport {IDisposable, dispose} from 'vs/base/common/lifecycle';\nimport {DefaultWorkerFactory} from 'vs/base/worker/defaultWorkerFactory';\nimport {SimpleWorkerClient} from 'vs/base/common/worker/simpleWorker';\nimport {IModelService} from 'vs/editor/common/services/modelService';\nimport {EditorModelManager} from 'vs/editor/common/services/editorWorkerServiceImpl';\nimport {LanguageServiceMode, LanguageServiceDefaults, TypeScriptWorkerProtocol} from './typescript';\n\nclass WorkerManager {\n\n\tprivate _modelService: IModelService;\n\tprivate _defaults: LanguageServiceDefaults;\n\tprivate _client: TPromise<{ worker: TypeScriptWorkerProtocol; manager: EditorModelManager }> = null;\n\tprivate _clientDispose: IDisposable[] = [];\n\tprivate _factory = new DefaultWorkerFactory();\n\n\tconstructor(modelService: IModelService, defaults: LanguageServiceDefaults) {\n\t\tthis._modelService = modelService;\n\t\tthis._defaults = defaults;\n\t}\n\n\tprivate _createClient(): TPromise<{ worker: TypeScriptWorkerProtocol; manager: EditorModelManager; }> {\n\n\t\tconst client = new SimpleWorkerClient<TypeScriptWorkerProtocol>(this._factory, 'vs/languages/typescript/common/worker', TypeScriptWorkerProtocol);\n\t\tconst manager = new EditorModelManager(client.get(), this._modelService, true);\n\n\t\tthis._clientDispose.push(manager);\n\t\tthis._clientDispose.push(client);\n\n\t\tconst stopWorker = () => {\n\t\t\tthis._clientDispose = dispose(this._clientDispose);\n\t\t\tthis._client = null;\n\t\t};\n\n\t\t// stop worker after being idle\n\t\tconst handle = setInterval(() => {\n\t\t\tif (Date.now() - client.getLastRequestTimestamp() > 1000 * 60) {\n\t\t\t\tstopWorker();\n\t\t\t}\n\t\t}, 1000 * 60);\n\t\tthis._clientDispose.push({ dispose() { clearInterval(handle); } });\n\n\t\t// stop worker when defaults change\n\t\tthis._clientDispose.push(this._defaults.onDidChange(() => stopWorker()));\n\n\t\t// send default to worker right away\n\t\tconst worker = client.get();\n\t\tconst {compilerOptions, extraLibs} = this._defaults;\n\t\treturn worker.acceptDefaults(compilerOptions, extraLibs).then(() => ({ worker, manager }));\n\t}\n\n\tdispose(): void {\n\t\tthis._clientDispose = dispose(this._clientDispose);\n\t\tthis._client = null;\n\t}\n\n\tgetLanguageServiceWorker(...resources: URI[]): TPromise<TypeScriptWorkerProtocol> {\n\t\tif (!this._client) {\n\t\t\tthis._client = this._createClient();\n\t\t}\n\n\t\treturn this._client\n\t\t\t.then(data => data.manager.withSyncedResources(resources)\n\t\t\t\t.then(_ => data.worker));\n\t}\n}\n\nexport function create(defaults: LanguageServiceDefaults, modelService: IModelService): LanguageServiceMode {\n\treturn new WorkerManager(modelService, defaults);\n}"]}