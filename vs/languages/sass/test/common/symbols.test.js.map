{"version":3,"file":"vs/languages/sass/test/common/symbols.test.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/languages/sass/test/common/symbols.test.ts"],"names":[],"mappings":";IAAA;;;oGAGgG;IAChG,YAAY,CAAC;IAMb,KAAK,CAAC,gBAAgB,EAAE;QAEvB,IAAI,CAAC,mBAAmB,EAAE;YACzB,IAAI,CAAC,GAAG,IAAI,MAAM,CAAC,UAAU,EAAE,CAAC;YAChC,WAAW,CAAC,oBAAoB,CAAC,CAAC,EAAE,cAAc,EAAE,CAAC,EAAE,EAAE,IAAI,EAAC,MAAM,EAAE,IAAI,EAAC,KAAK,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC,CAAC;YAC3G,WAAW,CAAC,oBAAoB,CAAC,CAAC,EAAE,cAAc,EAAE,EAAE,EAAE,EAAE,IAAI,EAAC,MAAM,EAAE,IAAI,EAAC,KAAK,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC,CAAC;YAC5G,WAAW,CAAC,oBAAoB,CAAC,CAAC,EAAE,uCAAuC,EAAE,EAAE,EAAE,EAAE,IAAI,EAAC,MAAM,EAAE,IAAI,EAAC,KAAK,CAAC,aAAa,CAAC,QAAQ,EAAE,EAAE,EAAE,IAAI,EAAC,QAAQ,EAAE,IAAI,EAAC,KAAK,CAAC,aAAa,CAAC,IAAI,EAAE,CAAC,CAAC;YACvL,WAAW,CAAC,oBAAoB,CAAC,CAAC,EAAE,uCAAuC,EAAE,EAAE,EAAE,EAAE,IAAI,EAAC,QAAQ,EAAE,IAAI,EAAC,KAAK,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC,CAAC;YACvI,WAAW,CAAC,oBAAoB,CAAC,CAAC,EAAE,uCAAuC,EAAE,EAAE,EAAE,EAAE,IAAI,EAAC,QAAQ,EAAE,IAAI,EAAC,KAAK,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC,CAAC;YAEvI,WAAW,CAAC,oBAAoB,CAAC,CAAC,EAAE,iCAAiC,EAAE,CAAC,EAAE,EAAE,IAAI,EAAC,KAAK,EAAE,IAAI,EAAC,KAAK,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC,CAAC;YAC1H,WAAW,CAAC,oBAAoB,CAAC,CAAC,EAAE,mCAAmC,EAAE,EAAE,EAAE,EAAE,IAAI,EAAC,QAAQ,EAAE,IAAI,EAAC,KAAK,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC,CAAC;YAChI,WAAW,CAAC,oBAAoB,CAAC,CAAC,EAAE,sCAAsC,EAAE,EAAE,CAAC,CAAC;QACjF,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,oBAAoB,EAAE;YAC1B,IAAI,CAAC,GAAG,IAAI,MAAM,CAAC,UAAU,EAAE,CAAC;YAChC,WAAW,CAAC,sBAAsB,CAAC,CAAC,EAAE,wCAAwC,EAAE,0BAA0B,CAAC,CAAC;YAC5G,WAAW,CAAC,sBAAsB,CAAC,CAAC,EAAE,6DAA6D,EAAE,qCAAqC,CAAC,CAAC;YAC5I,WAAW,CAAC,sBAAsB,CAAC,CAAC,EAAE,+BAA+B,EAAE,kBAAkB,CAAC,CAAC;YAC3F,WAAW,CAAC,sBAAsB,CAAC,CAAC,EAAE,sDAAsD,EAAE,iBAAiB,CAAC,CAAC;YACjH,WAAW,CAAC,sBAAsB,CAAC,CAAC,EAAE,sEAAsE,EAAE,6BAA6B,CAAC,CAAC;YAC7I,WAAW,CAAC,sBAAsB,CAAC,CAAC,EAAE,qFAAqF,EAAE,yBAAyB,CAAC,CAAC;YACxJ,WAAW,CAAC,sBAAsB,CAAC,CAAC,EAAE,gDAAgD,EAAE,kBAAkB,CAAC,CAAC;YAC5G,WAAW,CAAC,sBAAsB,CAAC,CAAC,EAAE,+CAA+C,EAAE,eAAe,CAAC,CAAC;YACxG,WAAW,CAAC,sBAAsB,CAAC,CAAC,EAAE,iCAAiC,EAAE,SAAS,CAAC,CAAC;QACrF,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,kBAAkB,EAAE;YACxB,IAAI,CAAC,GAAG,IAAI,MAAM,CAAC,UAAU,EAAE,CAAC;YAChC,WAAW,CAAC,iBAAiB,CAAC,CAAC,EAAE,6BAA6B,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;YAC5G,WAAW,CAAC,iBAAiB,CAAC,CAAC,EAAE,mCAAmC,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;YAClH,WAAW,CAAC,iBAAiB,CAAC,CAAC,EAAE,sEAAsE,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;YACrJ,WAAW,CAAC,iBAAiB,CAAC,CAAC,EAAE,kDAAkD,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;YAC7H,WAAW,CAAC,iBAAiB,CAAC,CAAC,EAAE,kDAAkD,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;YAC7H,WAAW,CAAC,iBAAiB,CAAC,CAAC,EAAE,yDAAyD,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;YACrI,WAAW,CAAC,iBAAiB,CAAC,CAAC,EAAE,mEAAmE,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;YAC/I,WAAW,CAAC,iBAAiB,CAAC,CAAC,EAAE,2EAA2E,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;YACvJ,WAAW,CAAC,iBAAiB,CAAC,CAAC,EAAE,8CAA8C,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;YAC7H,WAAW,CAAC,iBAAiB,CAAC,CAAC,EAAE,0CAA0C,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;YACzH,WAAW,CAAC,iBAAiB,CAAC,CAAC,EAAE,0CAA0C,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;YACzH,WAAW,CAAC,iBAAiB,CAAC,CAAC,EAAE,0CAA0C,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;YACzH,WAAW,CAAC,iBAAiB,CAAC,CAAC,EAAE,uEAAuE,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;YACtJ,WAAW,CAAC,iBAAiB,CAAC,CAAC,EAAE,uEAAuE,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;YACtJ,WAAW,CAAC,iBAAiB,CAAC,CAAC,EAAE,wFAAwF,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;YACvK,WAAW,CAAC,iBAAiB,CAAC,CAAC,EAAE,uGAAuG,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;YACtL,WAAW,CAAC,iBAAiB,CAAC,CAAC,EAAE,mHAAmH,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;QACnM,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport parser = require('vs/languages/sass/common/parser/sassParser');\nimport nodes = require('vs/languages/css/common/parser/cssNodes');\nimport symbolsTest = require('vs/languages/css/test/common/symbols.test');\n\nsuite('Sass - Symbols', () => {\n\n\ttest('symbols in scopes', function() {\n\t\tvar p = new parser.SassParser();\n\t\tsymbolsTest.assertSymbolsInScope(p, '$var: iable;', 0, { name:'$var', type:nodes.ReferenceType.Variable });\n\t\tsymbolsTest.assertSymbolsInScope(p, '$var: iable;', 11, { name:'$var', type:nodes.ReferenceType.Variable });\n\t\tsymbolsTest.assertSymbolsInScope(p, '$var: iable; .class { $color: blue; }', 11, { name:'$var', type:nodes.ReferenceType.Variable }, { name:'.class', type:nodes.ReferenceType.Rule });\n\t\tsymbolsTest.assertSymbolsInScope(p, '$var: iable; .class { $color: blue; }', 22, { name:'$color', type:nodes.ReferenceType.Variable });\n\t\tsymbolsTest.assertSymbolsInScope(p, '$var: iable; .class { $color: blue; }', 36, { name:'$color', type:nodes.ReferenceType.Variable });\n\n\t\tsymbolsTest.assertSymbolsInScope(p, '@namespace \"x\"; @mixin mix() {}', 0, { name:'mix', type:nodes.ReferenceType.Mixin });\n\t\tsymbolsTest.assertSymbolsInScope(p, '@mixin mix { @mixin nested() {} }', 12, { name:'nested', type:nodes.ReferenceType.Mixin });\n\t\tsymbolsTest.assertSymbolsInScope(p, '@mixin mix () { @mixin nested() {} }', 13);\n\t});\n\n\ttest('scopes and symbols', function() {\n\t\tvar p = new parser.SassParser();\n\t\tsymbolsTest.assertScopesAndSymbols(p, '$var1: 1; $var2: 2; .foo { $var3: 3; }', '$var1,$var2,.foo,[$var3]');\n\t\tsymbolsTest.assertScopesAndSymbols(p, '@mixin mixin1 { $var0: 1} @mixin mixin2($var1) { $var3: 3 }', 'mixin1,mixin2,[$var0],[$var1,$var3]');\n\t\tsymbolsTest.assertScopesAndSymbols(p, 'a b { $var0: 1; c { d { } } }', '[$var0,c,[d,[]]]');\n\t\tsymbolsTest.assertScopesAndSymbols(p, '@function a($p1: 1, $p2: 2) { $v1: 3; @return $v1; }', 'a,[$p1,$p2,$v1]');\n\t\tsymbolsTest.assertScopesAndSymbols(p, '$var1: 3; @if $var1 == 2 { $var2: 1; } @else { $var2: 2; $var3: 2;} ', '$var1,[$var2],[$var2,$var3]');\n\t\tsymbolsTest.assertScopesAndSymbols(p, '@if $var1 == 2 { $var2: 1; } @else if $var1 == 2 { $var3: 2; } @else { $var3: 2; } ', '[$var2],[$var3],[$var3]');\n\t\tsymbolsTest.assertScopesAndSymbols(p, '$var1: 3; @while $var1 < 2 { #rule { a: b; } }', '$var1,[#rule,[]]');\n\t\tsymbolsTest.assertScopesAndSymbols(p, '$i:0; @each $name in f1, f2, f3  { $i:$i+1; }', '$i,[$name,$i]');\n\t\tsymbolsTest.assertScopesAndSymbols(p, '$i:0; @for $x from $i to 5  { }', '$i,[$x]');\n\t});\n\n\ttest('mark occurrences', function() {\n\t\tvar p = new parser.SassParser();\n\t\tsymbolsTest.assertOccurrences(p, '$var1: 1; $var2: /**/$var1;', '/**/', 2, 1, nodes.ReferenceType.Variable);\n\t\tsymbolsTest.assertOccurrences(p, '$var1: 1; p { $var2: /**/$var1; }', '/**/', 2, 1, nodes.ReferenceType.Variable);\n\t\tsymbolsTest.assertOccurrences(p, 'r1 { $var1: 1; p1: $var1;} r2,r3 { $var1: 1; p1: /**/$var1 + $var1;}', '/**/', 3, 1, nodes.ReferenceType.Variable);\n\t\tsymbolsTest.assertOccurrences(p, '.r1 { r1: 1em; } r2 { r1: 2em; @extend /**/.r1;}', '/**/', 2, 1, nodes.ReferenceType.Rule);\n\t\tsymbolsTest.assertOccurrences(p, '/**/%r1 { r1: 1em; } r2 { r1: 2em; @extend %r1;}', '/**/', 2, 1, nodes.ReferenceType.Rule);\n\t\tsymbolsTest.assertOccurrences(p, '@mixin r1 { r1: $p1; } r2 { r2: 2em; @include /**/r1; }', '/**/', 2, 1, nodes.ReferenceType.Mixin);\n\t\tsymbolsTest.assertOccurrences(p, '@mixin r1($p1) { r1: $p1; } r2 { r2: 2em; @include /**/r1(2px); }', '/**/', 2, 1, nodes.ReferenceType.Mixin);\n\t\tsymbolsTest.assertOccurrences(p, '$p1: 1; @mixin r1($p1: $p1) { r1: $p1; } r2 { r2: 2em; @include /**/r1; }', '/**/', 2, 1, nodes.ReferenceType.Mixin);\n\t\tsymbolsTest.assertOccurrences(p, '/**/$p1: 1; @mixin r1($p1: $p1) { r1: $p1; }', '/**/', 2, 1, nodes.ReferenceType.Variable);\n\t\tsymbolsTest.assertOccurrences(p, '$p1 : 1; @mixin r1($p1) { r1: /**/$p1; }', '/**/', 2, 1, nodes.ReferenceType.Variable);\n\t\tsymbolsTest.assertOccurrences(p, '/**/$p1 : 1; @mixin r1($p1) { r1: $p1; }', '/**/', 1, 1, nodes.ReferenceType.Variable);\n\t\tsymbolsTest.assertOccurrences(p, '$p1 : 1; @mixin r1(/**/$p1) { r1: $p1; }', '/**/', 2, 1, nodes.ReferenceType.Variable);\n\t\tsymbolsTest.assertOccurrences(p, '$p1 : 1; @function r1($p1, $p2: /**/$p1) { @return $p1 + $p1 + $p2; }', '/**/', 2, 1, nodes.ReferenceType.Variable);\n\t\tsymbolsTest.assertOccurrences(p, '$p1 : 1; @function r1($p1, /**/$p2: $p1) { @return $p1 + $p2 + $p2; }', '/**/', 3, 1, nodes.ReferenceType.Variable);\n\t\tsymbolsTest.assertOccurrences(p, '@function r1($p1, $p2) { @return $p1 + $p2; } @function r2() { @return /**/r1(1, 2); }', '/**/', 2, 1, nodes.ReferenceType.Function);\n\t\tsymbolsTest.assertOccurrences(p, '@function /**/r1($p1, $p2) { @return $p1 + $p2; } @function r2() { @return r1(1, 2); } p { x: r2(); }', '/**/', 2, 1, nodes.ReferenceType.Function);\n\t\tsymbolsTest.assertOccurrences(p, '@function r1($p1, $p2) { @return $p1 + $p2; } @function r2() { @return r1(/**/$p1 : 1, $p2 : 2); } p { x: r2(); }', '/**/', 3, 1, nodes.ReferenceType.Variable);\n\t});\n});"]}