{"version":3,"file":"vs/languages/razor/common/razor.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/languages/razor/common/razor.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport Modes = require('vs/editor/common/modes');\nimport htmlMode = require('vs/languages/html/common/html');\nimport csharpTokenization = require('vs/languages/razor/common/csharpTokenization');\nimport {createWordRegExp, ModeWorkerManager} from 'vs/editor/common/modes/abstractMode';\nimport razorTokenTypes = require('vs/languages/razor/common/razorTokenTypes');\nimport {RAZORWorker} from 'vs/languages/razor/common/razorWorker';\nimport {IInstantiationService} from 'vs/platform/instantiation/common/instantiation';\nimport {IModeService} from 'vs/editor/common/services/modeService';\nimport {RichEditSupport} from 'vs/editor/common/modes/supports/richEditSupport';\nimport {ILeavingNestedModeData} from 'vs/editor/common/modes/supports/tokenizationSupport';\nimport {IThreadService} from 'vs/platform/thread/common/thread';\n\n// for a brief description of the razor syntax see http://www.mikesdotnetting.com/Article/153/Inline-Razor-Syntax-Overview\n\nclass RAZORState extends htmlMode.State {\n\n\tconstructor(mode:Modes.IMode, kind:htmlMode.States, lastTagName:string, lastAttributeName:string, embeddedContentType:string, attributeValueQuote:string, attributeValue:string) {\n\t\tsuper(mode, kind, lastTagName, lastAttributeName, embeddedContentType, attributeValueQuote, attributeValue);\n\t}\n\n\tpublic makeClone():RAZORState {\n\t\treturn new RAZORState(this.getMode(), this.kind, this.lastTagName, this.lastAttributeName, this.embeddedContentType, this.attributeValueQuote, this.attributeValue);\n\t}\n\n\tpublic equals(other:Modes.IState):boolean {\n\t\tif (other instanceof RAZORState) {\n\t\t\treturn (\n\t\t\t\tsuper.equals(other)\n\t\t\t);\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic tokenize(stream:Modes.IStream):Modes.ITokenizationResult {\n\n\t\tif (!stream.eos() && stream.peek() === '@') {\n\t\t\tstream.next();\n\t\t\tif (!stream.eos() && stream.peek() === '*') {\n\t\t\t\treturn { nextState: new csharpTokenization.CSComment(this.getMode(), this, '@') };\n\t\t\t}\n\t\t\tif (stream.eos() || stream.peek() !== '@') {\n\t\t\t\treturn { type: razorTokenTypes.EMBED_CS, nextState: new csharpTokenization.CSStatement(this.getMode(), this, 0, 0, true, true, true, false) };\n\t\t\t}\n\t\t}\n\n\t\treturn super.tokenize(stream);\n\t}\n}\n\nexport class RAZORMode extends htmlMode.HTMLMode<RAZORWorker> {\n\n\tconstructor(\n\t\tdescriptor:Modes.IModeDescriptor,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IModeService modeService: IModeService,\n\t\t@IThreadService threadService: IThreadService\n\t) {\n\t\tsuper(descriptor, instantiationService, modeService, threadService);\n\n\t\tthis.formattingSupport = null;\n\t}\n\n\tprotected _createModeWorkerManager(descriptor:Modes.IModeDescriptor, instantiationService: IInstantiationService): ModeWorkerManager<RAZORWorker> {\n\t\treturn new ModeWorkerManager<RAZORWorker>(descriptor, 'vs/languages/razor/common/razorWorker', 'RAZORWorker', 'vs/languages/html/common/htmlWorker', instantiationService);\n\t}\n\n\tprotected _createRichEditSupport(): Modes.IRichEditSupport {\n\t\treturn new RichEditSupport(this.getId(), null, {\n\n\t\t\twordPattern: createWordRegExp('#?%'),\n\n\t\t\tcomments: {\n\t\t\t\tblockComment: ['<!--', '-->']\n\t\t\t},\n\n\t\t\tbrackets: [\n\t\t\t\t['<!--', '-->'],\n\t\t\t\t['{', '}'],\n\t\t\t\t['(', ')']\n\t\t\t],\n\n\t\t\t__electricCharacterSupport: {\n\t\t\t\tcaseInsensitive: true,\n\t\t\t\tembeddedElectricCharacters: ['*', '}', ']', ')']\n\t\t\t},\n\n\t\t\t__characterPairSupport: {\n\t\t\t\tautoClosingPairs: [\n\t\t\t\t\t{ open: '{', close: '}' },\n\t\t\t\t\t{ open: '[', close: ']' },\n\t\t\t\t\t{ open: '(', close: ')' },\n\t\t\t\t\t{ open: '\"', close: '\"' },\n\t\t\t\t\t{ open: '\\'', close: '\\'' }\n\t\t\t\t],\n\t\t\t\tsurroundingPairs: [\n\t\t\t\t\t{ open: '\"', close: '\"' },\n\t\t\t\t\t{ open: '\\'', close: '\\'' }\n\t\t\t\t]\n\t\t\t},\n\n\t\t\tonEnterRules: [\n\t\t\t\t{\n\t\t\t\t\tbeforeText: new RegExp(`<(?!(?:${htmlMode.EMPTY_ELEMENTS.join('|')}))(\\\\w[\\\\w\\\\d]*)([^/>]*(?!/)>)[^<]*$`, 'i'),\n\t\t\t\t\tafterText: /^<\\/(\\w[\\w\\d]*)\\s*>$/i,\n\t\t\t\t\taction: { indentAction: Modes.IndentAction.IndentOutdent }\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tbeforeText: new RegExp(`<(?!(?:${htmlMode.EMPTY_ELEMENTS.join('|')}))(\\\\w[\\\\w\\\\d]*)([^/>]*(?!/)>)[^<]*$`, 'i'),\n\t\t\t\t\taction: { indentAction: Modes.IndentAction.Indent }\n\t\t\t\t}\n\t\t\t],\n\t\t});\n\t}\n\n\tpublic getInitialState(): Modes.IState {\n\t\treturn new RAZORState(this, htmlMode.States.Content, '', '', '', '', '');\n\t}\n\n\tpublic getLeavingNestedModeData(line:string, state:Modes.IState): ILeavingNestedModeData {\n\t\tvar leavingNestedModeData = super.getLeavingNestedModeData(line, state);\n\t\tif (leavingNestedModeData) {\n\t\t\tleavingNestedModeData.stateAfterNestedMode = new RAZORState(this, htmlMode.States.Content, '', '', '', '', '');\n\t\t}\n\t\treturn leavingNestedModeData;\n\t}\n}\n"]}