{"version":3,"file":"vs/languages/html/common/htmlScanner.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/languages/html/common/htmlScanner.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {isTag, DELIM_END, DELIM_START, DELIM_ASSIGN, ATTRIB_NAME, ATTRIB_VALUE} from 'vs/languages/html/common/htmlTokenTypes';\n\nimport EditorCommon = require('vs/editor/common/editorCommon');\n\nexport interface IHTMLScanner {\n\tgetTokenType(): string;\n\tisOpenBrace(): boolean;\n\tisAtTokenStart(): boolean;\n\tisAtTokenEnd(): boolean;\n\tgetTokenContent(): string;\n\tscanBack() : boolean;\n\tscanForward() : boolean;\n\tgetTokenPosition(): EditorCommon.IPosition;\n\tgetTokenRange(): EditorCommon.IRange;\n\tgetModel(): EditorCommon.ITokenizedModel;\n}\n\nfunction isDelimiter(tokenType: string) {\n\tswitch (tokenType) {\n\t\tcase DELIM_START:\n\t\tcase DELIM_END:\n\t\tcase DELIM_ASSIGN:\n\t\t\treturn true;\n\t}\n\treturn false;\n}\n\nfunction isInterestingToken(tokenType: string) {\n\tswitch (tokenType) {\n\t\tcase DELIM_START:\n\t\tcase DELIM_END:\n\t\tcase DELIM_ASSIGN:\n\t\tcase ATTRIB_NAME:\n\t\tcase ATTRIB_VALUE:\n\t\t\treturn true;\n\t}\n\treturn isTag(tokenType);\n}\n\nexport function getScanner(model: EditorCommon.ITokenizedModel, position:EditorCommon.IPosition) : IHTMLScanner {\n\n\tvar lineOffset = position.column - 1;\n\tvar currentLine = position.lineNumber;\n\n\tvar tokens = model.getLineTokens(currentLine);\n\tvar lineContent = model.getLineContent(currentLine);\n\tvar tokenIndex = tokens.findIndexOfOffset(lineOffset);\n\tvar tokensOnLine = tokens.getTokenCount();\n\n\tvar tokenType = tokens.getTokenType(tokenIndex);\n\tvar tokenStart = tokens.getTokenStartIndex(tokenIndex);\n\tvar tokenEnd = tokens.getTokenEndIndex(tokenIndex, lineContent.length);\n\n\tif ((tokenType === '' || isDelimiter(tokenType)) && tokenStart === lineOffset) {\n\t\ttokenIndex--;\n\t\tif (tokenIndex >= 0) {\n\t\t\t// we are at the end of a different token\n\t\t\ttokenType = tokens.getTokenType(tokenIndex);\n\t\t\ttokenStart = tokens.getTokenStartIndex(tokenIndex);\n\t\t\ttokenEnd = tokens.getTokenEndIndex(tokenIndex, lineContent.length);\n\t\t} else {\n\t\t\ttokenType = '';\n\t\t\ttokenStart = tokenEnd = 0;\n\t\t}\n\t}\n\n\treturn {\n\t\tgetTokenType: () => tokenType,\n\t\tisAtTokenEnd: () => lineOffset === tokenEnd,\n\t\tisAtTokenStart: () => lineOffset === tokenStart,\n\t\tgetTokenContent: () => lineContent.substring(tokenStart, tokenEnd),\n\t\tisOpenBrace: () => tokenStart < tokenEnd && lineContent.charAt(tokenStart) === '<',\n\t\tgetTokenPosition: () => <EditorCommon.IPosition> { lineNumber: currentLine, column: tokenStart + 1 },\n\t\tgetTokenRange: () => <EditorCommon.IRange> { startLineNumber: currentLine, startColumn: tokenStart + 1, endLineNumber: currentLine, endColumn: tokenEnd + 1 },\n\t\tgetModel: () => model,\n\t\tscanBack: () => {\n\t\t\tif (currentLine <= 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\ttokenIndex--;\n\t\t\tdo {\n\t\t\t\twhile (tokenIndex >= 0) {\n\t\t\t\t\ttokenType = tokens.getTokenType(tokenIndex);\n\t\t\t\t\ttokenStart = tokens.getTokenStartIndex(tokenIndex);\n\t\t\t\t\ttokenEnd = tokens.getTokenEndIndex(tokenIndex, lineContent.length);\n\n\t\t\t\t\tif (isInterestingToken(tokenType)) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\ttokenIndex--;\n\t\t\t\t}\n\t\t\t\tcurrentLine--;\n\t\t\t\tif (currentLine > 0) {\n\t\t\t\t\ttokens = model.getLineTokens(currentLine);\n\t\t\t\t\tlineContent = model.getLineContent(currentLine);\n\t\t\t\t\ttokensOnLine = tokens.getTokenCount();\n\t\t\t\t\ttokenIndex = tokensOnLine - 1;\n\t\t\t\t}\n\t\t\t} while (currentLine > 0);\n\t\t\ttokens = null;\n\t\t\ttokenType = lineContent = '';\n\t\t\ttokenStart = tokenEnd = tokensOnLine = 0;\n\t\t\treturn false;\n\t\t},\n\t\tscanForward: () => {\n\t\t\tif (currentLine > model.getLineCount()) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\ttokenIndex++;\n\t\t\tdo {\n\t\t\t\twhile (tokenIndex < tokensOnLine) {\n\t\t\t\t\ttokenType = tokens.getTokenType(tokenIndex);\n\t\t\t\t\ttokenStart = tokens.getTokenStartIndex(tokenIndex);\n\t\t\t\t\ttokenEnd = tokens.getTokenEndIndex(tokenIndex, lineContent.length);\n\n\t\t\t\t\tif (isInterestingToken(tokenType)) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\ttokenIndex++;\n\t\t\t\t}\n\t\t\t\tcurrentLine++;\n\t\t\t\ttokenIndex = 0;\n\t\t\t\tif (currentLine <= model.getLineCount()) {\n\t\t\t\t\ttokens = model.getLineTokens(currentLine);\n\t\t\t\t\tlineContent = model.getLineContent(currentLine);\n\t\t\t\t\ttokensOnLine = tokens.getTokenCount();\n\t\t\t\t}\n\t\t\t} while (currentLine <= model.getLineCount());\n\t\t\ttokenType = lineContent = '';\n\t\t\ttokenStart = tokenEnd = tokensOnLine = 0;\n\t\t\treturn false;\n\t\t}\n\t};\n}"]}