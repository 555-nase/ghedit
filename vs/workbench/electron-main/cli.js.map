{"version":3,"file":"vs/workbench/electron-main/cli.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/workbench/electron-main/cli.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as path from 'path';\nimport * as fs from 'fs';\nimport * as os from 'os';\nimport { spawn } from 'child_process';\nimport uri from 'vs/base/common/uri';\n\nconst rootPath = path.dirname(uri.parse(require.toUrl('')).fsPath);\nconst packageJsonPath = path.join(rootPath, 'package.json');\nconst packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));\n\nclass ArgParser {\n\n\tconstructor(private argv: string[]) {}\n\n\thasFlag(flag, alias): boolean {\n\t\treturn (flag && this.argv.indexOf('--' + flag) >= 0)\n\t\t\t|| (alias && this.argv.indexOf('-' + alias) >= 0);\n\t}\n\n\thelp(): string {\n\t\tconst executable = 'code' + (os.platform() === 'win32' ? '.exe' : '');\n\t\tconst indent = '  ';\n\t\treturn `Visual Studio Code v${ packageJson.version }\n\nUsage: ${ executable } [arguments] [paths...]\n\nOptions:\n${ indent }-d, --diff            Open a diff editor. Requires to pass two file paths\n${ indent }                      as arguments.\n${ indent }--disable-extensions  Disable all installed extensions.\n${ indent }-g, --goto            Open the file at path at the line and column (add\n${ indent }                      :line[:column] to path).\n${ indent }-h, --help            Print usage.\n${ indent }--locale=LOCALE       The locale to use (e.g. en-US or zh-TW).\n${ indent }-n, --new-window      Force a new instance of Code.\n${ indent }-r, --reuse-window    Force opening a file or folder in the last active\n${ indent }                      window.\n${ indent }--user-data-dir=DIR   Specifies the directory that user data is kept in,\n${ indent }                      useful when running as root.\n${ indent }-v, --version         Print version.\n${ indent }-w, --wait            Wait for the window to be closed before returning.`;\n\t}\n}\n\nexport function main(argv: string[]) {\n\tconst argParser = new ArgParser(argv);\n\tlet exit = true;\n\n\tif (argParser.hasFlag('help', 'h')) {\n\t\tconsole.log(argParser.help());\n\t} else if (argParser.hasFlag('version', 'v')) {\n\t\tconsole.log(packageJson.version);\n\t} else {\n\t\tdelete process.env['ATOM_SHELL_INTERNAL_RUN_AS_NODE'];\n\t\tif (argParser.hasFlag('wait', 'w')) {\n\t\t\texit = false;\n\n\t\t\tlet child = spawn(process.execPath, process.argv.slice(2), { detached: true, stdio: 'ignore' });\n\t\t\tchild.on('exit', process.exit);\n\t\t} else {\n\t\t\tspawn(process.execPath, process.argv.slice(2), { detached: true, stdio: 'ignore' });\n\t\t}\n\t}\n\n\tif (exit) {\n\t\tprocess.exit(0);\n\t}\n}\n\nmain(process.argv.slice(2));\n"]}