{"version":3,"sources":["vs/workbench/electron-main/windows.ts"],"names":[],"mappings":"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","file":"vs/workbench/electron-main/windows.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\n'use strict';\n\nimport events = require('events');\nimport path = require('path');\nimport fs = require('fs');\n\nimport {ipcMain as ipc, app, screen, crashReporter, BrowserWindow, dialog} from 'electron';\n\nimport platform = require('vs/base/common/platform');\nimport env = require('vs/workbench/electron-main/env');\nimport window = require('vs/workbench/electron-main/window');\nimport lifecycle = require('vs/workbench/electron-main/lifecycle');\nimport nls = require('vs/nls');\nimport paths = require('vs/base/common/paths');\nimport arrays = require('vs/base/common/arrays');\nimport objects = require('vs/base/common/objects');\nimport storage = require('vs/workbench/electron-main/storage');\nimport settings = require('vs/workbench/electron-main/settings');\nimport {Instance as UpdateManager, IUpdate} from 'vs/workbench/electron-main/update-manager';\n\nconst eventEmitter = new events.EventEmitter();\n\nconst EventTypes = {\n\tOPEN: 'open',\n\tCLOSE: 'close',\n\tREADY: 'ready'\n};\n\nexport function onOpen<T>(clb: (path: window.IPath) => void): () => void {\n\teventEmitter.addListener(EventTypes.OPEN, clb);\n\n\treturn () => eventEmitter.removeListener(EventTypes.OPEN, clb);\n}\n\nexport function onReady<T>(clb: (win: window.VSCodeWindow) => void): () => void {\n\teventEmitter.addListener(EventTypes.READY, clb);\n\n\treturn () => eventEmitter.removeListener(EventTypes.READY, clb);\n}\n\nexport function onClose<T>(clb: (id: number) => void): () => void {\n\teventEmitter.addListener(EventTypes.CLOSE, clb);\n\n\treturn () => eventEmitter.removeListener(EventTypes.CLOSE, clb);\n}\n\nenum WindowError {\n\tUNRESPONSIVE,\n\tCRASHED\n}\n\nexport interface IOpenConfiguration {\n\tcli: env.ICommandLineArguments;\n\tuserEnv?: env.IProcessEnvironment;\n\tpathsToOpen?: string[];\n\tpreferNewWindow?: boolean;\n\tforceNewWindow?: boolean;\n\tforceEmpty?: boolean;\n\twindowToUse?: window.VSCodeWindow;\n\tdiffMode?: boolean;\n}\n\ninterface IWindowState {\n\tworkspacePath?: string;\n\tuiState: window.IWindowState;\n}\n\ninterface IWindowsState {\n\tlastActiveWindow?: IWindowState;\n\tlastPluginDevelopmentHostWindow?: IWindowState;\n\topenedFolders: IWindowState[];\n}\n\nexport interface IOpenedPathsList {\n\tfolders: string[];\n\tfiles: string[];\n}\n\ninterface ILogEntry {\n\tseverity: string;\n\targuments: any;\n}\n\ninterface INativeOpenDialogOptions {\n\tpickFolders?: boolean;\n\tpickFiles?: boolean;\n}\n\nexport class WindowsManager {\n\n\tpublic static openedPathsListStorageKey = 'openedPathsList';\n\n\tprivate static workingDirPickerStorageKey = 'pickerWorkingDir';\n\tprivate static windowsStateStorageKey = 'windowsState';\n\n\tprivate static WINDOWS: window.VSCodeWindow[] = [];\n\n\tprivate initialUserEnv: env.IProcessEnvironment;\n\tprivate windowsState: IWindowsState;\n\n\tpublic ready(initialUserEnv: env.IProcessEnvironment): void {\n\t\tthis.registerListeners();\n\n\t\tthis.initialUserEnv = initialUserEnv;\n\t\tthis.windowsState = storage.getItem<IWindowsState>(WindowsManager.windowsStateStorageKey) || { openedFolders: [] };\n\t}\n\n\tprivate registerListeners(): void {\n\t\tapp.on('activate', (event: Event, hasVisibleWindows: boolean) => {\n\t\t\tenv.log('App#activate');\n\n\t\t\t// Mac only event: reopen last window when we get activated\n\t\t\tif (!hasVisibleWindows) {\n\n\t\t\t\t// We want to open the previously opened folder, so we dont pass on the path argument\n\t\t\t\tlet cliArgWithoutPath = objects.clone(env.cliArgs);\n\t\t\t\tcliArgWithoutPath.pathArguments = [];\n\t\t\t\tthis.windowsState.openedFolders = []; // make sure we do not restore too much\n\n\t\t\t\tthis.open({ cli: cliArgWithoutPath });\n\t\t\t}\n\t\t});\n\n\t\tlet macOpenFiles: string[] = [];\n\t\tlet runningTimeout: number = null;\n\t\tapp.on('open-file', (event: Event, path: string) => {\n\t\t\tenv.log('App#open-file: ', path);\n\t\t\tevent.preventDefault();\n\n\t\t\t// Keep in array because more might come!\n\t\t\tmacOpenFiles.push(path);\n\n\t\t\t// Clear previous handler if any\n\t\t\tif (runningTimeout !== null) {\n\t\t\t\tclearTimeout(runningTimeout);\n\t\t\t\trunningTimeout = null;\n\t\t\t}\n\n\t\t\t// Handle paths delayed in case more are coming!\n\t\t\trunningTimeout = setTimeout(() => {\n\t\t\t\tthis.open({ cli: env.cliArgs, pathsToOpen: macOpenFiles, preferNewWindow: true /* dropping on the dock prefers to open in a new window */ });\n\t\t\t\tmacOpenFiles = [];\n\t\t\t\trunningTimeout = null;\n\t\t\t}, 100);\n\t\t});\n\n\t\tsettings.manager.onChange((newSettings) => {\n\t\t\tthis.sendToAll('vscode:optionsChange', JSON.stringify({ globalSettings: newSettings }));\n\t\t}, this);\n\n\t\tipc.on('vscode:startCrashReporter', (event: any, config: any) => {\n\t\t\tenv.log('IPC#vscode:startCrashReporter');\n\n\t\t\tcrashReporter.start(config);\n\t\t});\n\n\t\tipc.on('vscode:windowOpen', (event, paths: string[], forceNewWindow?: boolean) => {\n\t\t\tenv.log('IPC#vscode-windowOpen: ', paths);\n\n\t\t\tif (paths && paths.length) {\n\t\t\t\tthis.open({ cli: env.cliArgs, pathsToOpen: paths, forceNewWindow: forceNewWindow });\n\t\t\t}\n\t\t});\n\n\t\tipc.on('vscode:workbenchLoaded', (event, windowId: number) => {\n\t\t\tenv.log('IPC#vscode-workbenchLoaded');\n\n\t\t\tlet win = this.getWindowById(windowId);\n\t\t\tif (win) {\n\t\t\t\twin.setReady();\n\n\t\t\t\t// Event\n\t\t\t\teventEmitter.emit(EventTypes.READY, win);\n\t\t\t}\n\t\t});\n\n\t\tipc.on('vscode:openFilePicker', () => {\n\t\t\tenv.log('IPC#vscode-openFilePicker');\n\n\t\t\tthis.openFilePicker();\n\t\t});\n\n\t\tipc.on('vscode:openFolderPicker', (event, forceNewWindow?: boolean) => {\n\t\t\tenv.log('IPC#vscode-openFolderPicker');\n\n\t\t\tthis.openFolderPicker(forceNewWindow);\n\t\t});\n\n\t\tipc.on('vscode:openFileFolderPicker', (event, forceNewWindow?: boolean) => {\n\t\t\tenv.log('IPC#vscode-openFileFolderPicker');\n\n\t\t\tthis.openFileFolderPicker(forceNewWindow);\n\t\t});\n\n\t\tipc.on('vscode:closeFolder', (event, windowId: number) => {\n\t\t\tenv.log('IPC#vscode-closeFolder');\n\n\t\t\tlet win = this.getWindowById(windowId);\n\t\t\tif (win) {\n\t\t\t\tthis.open({ cli: env.cliArgs, forceEmpty: true, windowToUse: win });\n\t\t\t}\n\t\t});\n\n\t\tipc.on('vscode:openNewWindow', () => {\n\t\t\tenv.log('IPC#vscode-openNewWindow');\n\n\t\t\tthis.openNewWindow();\n\t\t});\n\n\t\tipc.on('vscode:reloadWindow', (event, windowId: number) => {\n\t\t\tenv.log('IPC#vscode:reloadWindow');\n\n\t\t\tlet vscodeWindow = this.getWindowById(windowId);\n\t\t\tif (vscodeWindow) {\n\t\t\t\tthis.reload(vscodeWindow);\n\t\t\t}\n\t\t});\n\n\t\tipc.on('vscode:toggleFullScreen', (event, windowId: number) => {\n\t\t\tenv.log('IPC#vscode:toggleFullScreen');\n\n\t\t\tlet vscodeWindow = this.getWindowById(windowId);\n\t\t\tif (vscodeWindow) {\n\t\t\t\tvscodeWindow.toggleFullScreen();\n\t\t\t}\n\t\t});\n\n\t\tipc.on('vscode:setFullScreen', (event, windowId: number, fullscreen: boolean) => {\n\t\t\tenv.log('IPC#vscode:setFullScreen');\n\n\t\t\tlet vscodeWindow = this.getWindowById(windowId);\n\t\t\tif (vscodeWindow) {\n\t\t\t\tvscodeWindow.win.setFullScreen(fullscreen);\n\t\t\t}\n\t\t});\n\n\t\tipc.on('vscode:toggleDevTools', (event, windowId: number) => {\n\t\t\tenv.log('IPC#vscode:toggleDevTools');\n\n\t\t\tlet vscodeWindow = this.getWindowById(windowId);\n\t\t\tif (vscodeWindow) {\n\t\t\t\tvscodeWindow.win.webContents.toggleDevTools();\n\t\t\t}\n\t\t});\n\n\t\tipc.on('vscode:openDevTools', (event, windowId: number) => {\n\t\t\tenv.log('IPC#vscode:openDevTools');\n\n\t\t\tlet vscodeWindow = this.getWindowById(windowId);\n\t\t\tif (vscodeWindow) {\n\t\t\t\tvscodeWindow.win.webContents.openDevTools();\n\t\t\t\tvscodeWindow.win.show();\n\t\t\t}\n\t\t});\n\n\t\tipc.on('vscode:setRepresentedFilename', (event, windowId: number, fileName: string) => {\n\t\t\tenv.log('IPC#vscode:setRepresentedFilename');\n\n\t\t\tlet vscodeWindow = this.getWindowById(windowId);\n\t\t\tif (vscodeWindow) {\n\t\t\t\tvscodeWindow.win.setRepresentedFilename(fileName);\n\t\t\t}\n\t\t});\n\n\t\tipc.on('vscode:setMenuBarVisibility', (event, windowId: number, visibility: boolean) => {\n\t\t\tenv.log('IPC#vscode:setMenuBarVisibility');\n\n\t\t\tlet vscodeWindow = this.getWindowById(windowId);\n\t\t\tif (vscodeWindow) {\n\t\t\t\tvscodeWindow.win.setMenuBarVisibility(visibility);\n\t\t\t}\n\t\t});\n\n\t\tipc.on('vscode:flashFrame', (event, windowId: number) => {\n\t\t\tenv.log('IPC#vscode:flashFrame');\n\n\t\t\tlet vscodeWindow = this.getWindowById(windowId);\n\t\t\tif (vscodeWindow) {\n\t\t\t\tvscodeWindow.win.flashFrame(!vscodeWindow.win.isFocused());\n\t\t\t}\n\t\t});\n\n\t\tipc.on('vscode:focusWindow', (event, windowId: number) => {\n\t\t\tenv.log('IPC#vscode:focusWindow');\n\n\t\t\tlet vscodeWindow = this.getWindowById(windowId);\n\t\t\tif (vscodeWindow) {\n\t\t\t\tvscodeWindow.win.focus();\n\t\t\t}\n\t\t});\n\n\t\tipc.on('vscode:setDocumentEdited', (event, windowId: number, edited: boolean) => {\n\t\t\tenv.log('IPC#vscode:setDocumentEdited');\n\n\t\t\tlet vscodeWindow = this.getWindowById(windowId);\n\t\t\tif (vscodeWindow && vscodeWindow.win.isDocumentEdited() !== edited) {\n\t\t\t\tvscodeWindow.win.setDocumentEdited(edited);\n\t\t\t}\n\t\t});\n\n\t\tipc.on('vscode:toggleMenuBar', (event, windowId: number) => {\n\t\t\tenv.log('IPC#vscode:toggleMenuBar');\n\n\t\t\t// Update in settings\n\t\t\tlet menuBarHidden = storage.getItem(window.VSCodeWindow.menuBarHiddenKey, false);\n\t\t\tlet newMenuBarHidden = !menuBarHidden;\n\t\t\tstorage.setItem(window.VSCodeWindow.menuBarHiddenKey, newMenuBarHidden);\n\n\t\t\t// Update across windows\n\t\t\tWindowsManager.WINDOWS.forEach(w => w.setMenuBarVisibility(!newMenuBarHidden));\n\n\t\t\t// Inform user if menu bar is now hidden\n\t\t\tif (newMenuBarHidden) {\n\t\t\t\tlet vscodeWindow = this.getWindowById(windowId);\n\t\t\t\tif (vscodeWindow) {\n\t\t\t\t\tvscodeWindow.send('vscode:showInfoMessage', nls.localize('hiddenMenuBar', \"You can still access the menu bar by pressing the **Alt** key.\"));\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tipc.on('vscode:broadcast', (event, windowId: number, target: string, broadcast: { channel: string; payload: any; }) => {\n\t\t\tif (broadcast.channel && broadcast.payload) {\n\t\t\t\tenv.log('IPC#vscode:broadcast', target, broadcast.channel, broadcast.payload);\n\n\t\t\t\t// Handle specific events on main side\n\t\t\t\tthis.onBroadcast(broadcast.channel, broadcast.payload);\n\n\t\t\t\t// Send to windows\n\t\t\t\tif (target) {\n\t\t\t\t\tconst otherWindowsWithTarget = WindowsManager.WINDOWS.filter(w => w.id !== windowId && typeof w.openedWorkspacePath === 'string');\n\t\t\t\t\tconst directTargetMatch = otherWindowsWithTarget.filter(w => this.isPathEqual(target, w.openedWorkspacePath));\n\t\t\t\t\tconst parentTargetMatch = otherWindowsWithTarget.filter(w => paths.isEqualOrParent(target, w.openedWorkspacePath));\n\n\t\t\t\t\tconst targetWindow = directTargetMatch.length ? directTargetMatch[0] : parentTargetMatch[0]; // prefer direct match over parent match\n\t\t\t\t\tif (targetWindow) {\n\t\t\t\t\t\ttargetWindow.send('vscode:broadcast', broadcast);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthis.sendToAll('vscode:broadcast', broadcast, [windowId]);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tipc.on('vscode:log', (event, logEntry: ILogEntry) => {\n\t\t\tlet args = [];\n\t\t\ttry {\n\t\t\t\tlet parsed = JSON.parse(logEntry.arguments);\n\t\t\t\targs.push(...Object.getOwnPropertyNames(parsed).map(o => parsed[o]));\n\t\t\t} catch (error) {\n\t\t\t\targs.push(logEntry.arguments);\n\t\t\t}\n\n\t\t\tconsole[logEntry.severity].apply(console, args);\n\t\t});\n\n\t\tipc.on('vscode:exit', (event, code: number) => {\n\t\t\tenv.log('IPC#vscode:exit', code);\n\n\t\t\tprocess.exit(code);\n\t\t});\n\n\t\tipc.on('vscode:closeExtensionHostWindow', (event, extensionDevelopmentPath: string) => {\n\t\t\tenv.log('IPC#vscode:closeExtensionHostWindow', extensionDevelopmentPath);\n\n\t\t\tconst windowOnExtension = this.findWindow(null, null, extensionDevelopmentPath);\n\t\t\tif (windowOnExtension) {\n\t\t\t\twindowOnExtension.win.close();\n\t\t\t}\n\t\t});\n\n\t\tUpdateManager.on('update-downloaded', (update: IUpdate) => {\n\t\t\tthis.sendToFocused('vscode:telemetry', { eventName: 'update:downloaded', data: { version: update.version } });\n\n\t\t\tthis.sendToAll('vscode:update-downloaded', JSON.stringify({\n\t\t\t\treleaseNotes: update.releaseNotes,\n\t\t\t\tversion: update.version,\n\t\t\t\tdate: update.date\n\t\t\t}));\n\t\t});\n\n\t\tipc.on('vscode:update-apply', () => {\n\t\t\tenv.log('IPC#vscode:update-apply');\n\n\t\t\tif (UpdateManager.availableUpdate) {\n\t\t\t\tUpdateManager.availableUpdate.quitAndUpdate();\n\t\t\t}\n\t\t});\n\n\t\tUpdateManager.on('update-not-available', (explicit: boolean) => {\n\t\t\tthis.sendToFocused('vscode:telemetry', { eventName: 'update:notAvailable', data: { explicit } });\n\n\t\t\tif (explicit) {\n\t\t\t\tthis.sendToFocused('vscode:update-not-available', '');\n\t\t\t}\n\t\t});\n\n\t\tUpdateManager.on('update-available', (url: string) => {\n\t\t\tif (url) {\n\t\t\t\tthis.sendToFocused('vscode:update-available', url);\n\t\t\t}\n\t\t});\n\n\t\tlifecycle.onBeforeQuit(() => {\n\n\t\t\t// 0-1 window open: Do not keep the list but just rely on the active window to be stored\n\t\t\tif (WindowsManager.WINDOWS.length < 2) {\n\t\t\t\tthis.windowsState.openedFolders = [];\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// 2-N windows open: Keep a list of windows that are opened on a specific folder to restore it in the next session as needed\n\t\t\tthis.windowsState.openedFolders = WindowsManager.WINDOWS.filter(w => w.readyState === window.ReadyState.READY && !!w.openedWorkspacePath && !w.isPluginDevelopmentHost).map(w => {\n\t\t\t\treturn <IWindowState>{\n\t\t\t\t\tworkspacePath: w.openedWorkspacePath,\n\t\t\t\t\tuiState: w.serializeWindowState()\n\t\t\t\t};\n\t\t\t});\n\t\t});\n\n\t\tapp.on('will-quit', () => {\n\t\t\tstorage.setItem(WindowsManager.windowsStateStorageKey, this.windowsState);\n\t\t});\n\n\t\tlet loggedStartupTimes = false;\n\t\tonReady(window => {\n\t\t\tif (loggedStartupTimes) {\n\t\t\t\treturn; // only for the first window\n\t\t\t}\n\n\t\t\tloggedStartupTimes = true;\n\n\t\t\twindow.send('vscode:telemetry', { eventName: 'startupTime', data: { ellapsed: Date.now() - global.vscodeStart } });\n\t\t});\n\t}\n\n\tprivate onBroadcast(event: string, payload: any): void {\n\n\t\t// Theme changes\n\t\tif (event === 'vscode:changeTheme' && typeof payload === 'string') {\n\t\t\tstorage.setItem(window.VSCodeWindow.themeStorageKey, payload);\n\t\t}\n\t}\n\n\tpublic reload(win: window.VSCodeWindow, cli?: env.ICommandLineArguments): void {\n\n\t\t// Only reload when the window has not vetoed this\n\t\tlifecycle.manager.unload(win).done((veto) => {\n\t\t\tif (!veto) {\n\t\t\t\twin.reload(cli);\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic open(openConfig: IOpenConfiguration): window.VSCodeWindow[] {\n\t\tlet iPathsToOpen: window.IPath[];\n\t\tlet usedWindows: window.VSCodeWindow[] = [];\n\n\t\t// Find paths from provided paths if any\n\t\tif (openConfig.pathsToOpen && openConfig.pathsToOpen.length > 0) {\n\t\t\tiPathsToOpen = openConfig.pathsToOpen.map((pathToOpen) => {\n\t\t\t\tlet iPath = this.toIPath(pathToOpen, false, openConfig.cli && openConfig.cli.gotoLineMode);\n\n\t\t\t\t// Warn if the requested path to open does not exist\n\t\t\t\tif (!iPath) {\n\t\t\t\t\tlet options = {\n\t\t\t\t\t\ttitle: env.product.nameLong,\n\t\t\t\t\t\ttype: 'info',\n\t\t\t\t\t\tbuttons: [nls.localize('ok', \"OK\")],\n\t\t\t\t\t\tmessage: nls.localize('pathNotExistTitle', \"Path does not exist\"),\n\t\t\t\t\t\tdetail: nls.localize('pathNotExistDetail', \"The path '{0}' does not seem to exist anymore on disk.\", pathToOpen),\n\t\t\t\t\t\tnoLink: true\n\t\t\t\t\t};\n\n\t\t\t\t\tlet activeWindow = BrowserWindow.getFocusedWindow();\n\t\t\t\t\tif (activeWindow) {\n\t\t\t\t\t\tdialog.showMessageBox(activeWindow, options);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdialog.showMessageBox(options);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn iPath;\n\t\t\t});\n\n\t\t\t// get rid of nulls\n\t\t\tiPathsToOpen = arrays.coalesce(iPathsToOpen);\n\n\t\t\tif (iPathsToOpen.length === 0) {\n\t\t\t\treturn null; // indicate to outside that open failed\n\t\t\t}\n\t\t}\n\n\t\t// Check for force empty\n\t\telse if (openConfig.forceEmpty) {\n\t\t\tiPathsToOpen = [Object.create(null)];\n\t\t}\n\n\t\t// Otherwise infer from command line arguments\n\t\telse {\n\t\t\tlet ignoreFileNotFound = openConfig.cli.pathArguments.length > 0; // we assume the user wants to create this file from command line\n\t\t\tiPathsToOpen = this.cliToPaths(openConfig.cli, ignoreFileNotFound);\n\t\t}\n\n\t\tlet filesToOpen: window.IPath[] = [];\n\t\tlet filesToDiff: window.IPath[] = [];\n\t\tlet foldersToOpen = iPathsToOpen.filter((iPath) => iPath.workspacePath && !iPath.filePath && !iPath.installExtensionPath);\n\t\tlet emptyToOpen = iPathsToOpen.filter((iPath) => !iPath.workspacePath && !iPath.filePath && !iPath.installExtensionPath);\n\t\tlet extensionsToInstall = iPathsToOpen.filter((iPath) => iPath.installExtensionPath).map(ipath => ipath.filePath);\n\t\tlet filesToCreate = iPathsToOpen.filter((iPath) => !!iPath.filePath && iPath.createFilePath && !iPath.installExtensionPath);\n\n\t\t// Diff mode needs special care\n\t\tlet candidates = iPathsToOpen.filter((iPath) => !!iPath.filePath && !iPath.createFilePath && !iPath.installExtensionPath);\n\t\tif (openConfig.diffMode) {\n\t\t\tif (candidates.length === 2) {\n\t\t\t\tfilesToDiff = candidates;\n\t\t\t} else {\n\t\t\t\temptyToOpen = [Object.create(null)]; // improper use of diffMode, open empty\n\t\t\t}\n\n\t\t\tfoldersToOpen = []; // diff is always in empty workspace\n\t\t\tfilesToCreate = []; // diff ignores other files that do not exist\n\t\t} else {\n\t\t\tfilesToOpen = candidates;\n\t\t}\n\n\t\tlet configuration: window.IWindowConfiguration;\n\n\t\t// Handle files to open/diff or to create when we dont open a folder\n\t\tif (!foldersToOpen.length && (filesToOpen.length > 0 || filesToCreate.length > 0 || filesToDiff.length > 0 || extensionsToInstall.length > 0)) {\n\n\t\t\t// Let the user settings override how files are open in a new window or same window unless we are forced\n\t\t\tlet openFilesInNewWindow: boolean;\n\t\t\tif (openConfig.forceNewWindow) {\n\t\t\t\topenFilesInNewWindow = true;\n\t\t\t} else {\n\t\t\t\topenFilesInNewWindow = openConfig.preferNewWindow;\n\t\t\t\tif (openFilesInNewWindow && !openConfig.cli.extensionDevelopmentPath) { // can be overriden via settings (not for PDE though!)\n\t\t\t\t\topenFilesInNewWindow = settings.manager.getValue('window.openFilesInNewWindow', openFilesInNewWindow);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Open Files in last instance if any and flag tells us so\n\t\t\tlet lastActiveWindow = this.getLastActiveWindow();\n\t\t\tif (!openFilesInNewWindow && lastActiveWindow) {\n\t\t\t\tlastActiveWindow.focus();\n\t\t\t\tlastActiveWindow.ready().then((readyWindow) => {\n\t\t\t\t\treadyWindow.send('vscode:openFiles', {\n\t\t\t\t\t\tfilesToOpen: filesToOpen,\n\t\t\t\t\t\tfilesToCreate: filesToCreate,\n\t\t\t\t\t\tfilesToDiff: filesToDiff\n\t\t\t\t\t});\n\n\t\t\t\t\tif (extensionsToInstall.length) {\n\t\t\t\t\t\treadyWindow.send('vscode:installExtensions', { extensionsToInstall });\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tusedWindows.push(lastActiveWindow);\n\t\t\t}\n\n\t\t\t// Otherwise open instance with files\n\t\t\telse {\n\t\t\t\tconfiguration = this.toConfiguration(openConfig.userEnv || this.initialUserEnv, openConfig.cli, null, filesToOpen, filesToCreate, filesToDiff, extensionsToInstall);\n\t\t\t\tlet browserWindow = this.openInBrowserWindow(configuration, true /* new window */);\n\t\t\t\tusedWindows.push(browserWindow);\n\n\t\t\t\topenConfig.forceNewWindow = true; // any other folders to open must open in new window then\n\t\t\t}\n\t\t}\n\n\t\t// Handle folders to open\n\t\tlet openInNewWindow = openConfig.preferNewWindow || openConfig.forceNewWindow;\n\t\tif (foldersToOpen.length > 0) {\n\n\t\t\t// Check for existing instances\n\t\t\tlet windowsOnWorkspacePath = arrays.coalesce(foldersToOpen.map((iPath) => this.findWindow(iPath.workspacePath)));\n\t\t\tif (windowsOnWorkspacePath.length > 0) {\n\t\t\t\tlet browserWindow = windowsOnWorkspacePath[0];\n\t\t\t\tbrowserWindow.focus(); // just focus one of them\n\t\t\t\tbrowserWindow.ready().then((readyWindow) => {\n\t\t\t\t\treadyWindow.send('vscode:openFiles', {\n\t\t\t\t\t\tfilesToOpen: filesToOpen,\n\t\t\t\t\t\tfilesToCreate: filesToCreate,\n\t\t\t\t\t\tfilesToDiff: filesToDiff\n\t\t\t\t\t});\n\n\t\t\t\t\tif (extensionsToInstall.length) {\n\t\t\t\t\t\treadyWindow.send('vscode:installExtensions', { extensionsToInstall });\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tusedWindows.push(browserWindow);\n\n\t\t\t\t// Reset these because we handled them\n\t\t\t\tfilesToOpen = [];\n\t\t\t\tfilesToCreate = [];\n\t\t\t\tfilesToDiff = [];\n\t\t\t\textensionsToInstall = [];\n\n\t\t\t\topenInNewWindow = true; // any other folders to open must open in new window then\n\t\t\t}\n\n\t\t\t// Open remaining ones\n\t\t\tfoldersToOpen.forEach((folderToOpen) => {\n\t\t\t\tif (windowsOnWorkspacePath.some((win) => this.isPathEqual(win.openedWorkspacePath, folderToOpen.workspacePath))) {\n\t\t\t\t\treturn; // ignore folders that are already open\n\t\t\t\t}\n\n\t\t\t\tconfiguration = this.toConfiguration(openConfig.userEnv || this.initialUserEnv, openConfig.cli, folderToOpen.workspacePath, filesToOpen, filesToCreate, filesToDiff, extensionsToInstall);\n\t\t\t\tlet browserWindow = this.openInBrowserWindow(configuration, openInNewWindow, openInNewWindow ? void 0 : openConfig.windowToUse);\n\t\t\t\tusedWindows.push(browserWindow);\n\n\t\t\t\t// Reset these because we handled them\n\t\t\t\tfilesToOpen = [];\n\t\t\t\tfilesToCreate = [];\n\t\t\t\tfilesToDiff = [];\n\t\t\t\textensionsToInstall = [];\n\n\t\t\t\topenInNewWindow = true; // any other folders to open must open in new window then\n\t\t\t});\n\t\t}\n\n\t\t// Handle empty\n\t\tif (emptyToOpen.length > 0) {\n\t\t\temptyToOpen.forEach(() => {\n\t\t\t\tlet configuration = this.toConfiguration(openConfig.userEnv || this.initialUserEnv, openConfig.cli);\n\t\t\t\tlet browserWindow = this.openInBrowserWindow(configuration, openInNewWindow, openInNewWindow ? void 0 : openConfig.windowToUse);\n\t\t\t\tusedWindows.push(browserWindow);\n\n\t\t\t\topenInNewWindow = true; // any other folders to open must open in new window then\n\t\t\t});\n\t\t}\n\n\t\t// Remember in recent document list\n\t\tiPathsToOpen.forEach((iPath) => {\n\t\t\tif (iPath.filePath || iPath.workspacePath) {\n\t\t\t\tapp.addRecentDocument(iPath.filePath || iPath.workspacePath);\n\t\t\t}\n\t\t});\n\n\t\t// Emit events\n\t\tiPathsToOpen.forEach((iPath) => eventEmitter.emit(EventTypes.OPEN, iPath));\n\n\t\treturn arrays.distinct(usedWindows);\n\t}\n\n\tpublic openPluginDevelopmentHostWindow(openConfig: IOpenConfiguration): void {\n\n\t\t// Reload an existing plugin development host window on the same path\n\t\t// We currently do not allow more than one extension development window\n\t\t// on the same plugin path.\n\t\tlet res = WindowsManager.WINDOWS.filter((w) => w.config && this.isPathEqual(w.config.extensionDevelopmentPath, openConfig.cli.extensionDevelopmentPath));\n\t\tif (res && res.length === 1) {\n\t\t\tthis.reload(res[0], openConfig.cli);\n\t\t\tres[0].focus(); // make sure it gets focus and is restored\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Fill in previously opened workspace unless an explicit path is provided and we are not unit testing\n\t\tif (openConfig.cli.pathArguments.length === 0 && !openConfig.cli.extensionTestsPath) {\n\t\t\tlet workspaceToOpen = this.windowsState.lastPluginDevelopmentHostWindow && this.windowsState.lastPluginDevelopmentHostWindow.workspacePath;\n\t\t\tif (workspaceToOpen) {\n\t\t\t\topenConfig.cli.pathArguments = [workspaceToOpen];\n\t\t\t}\n\t\t}\n\n\t\t// Make sure we are not asked to open a path that is already opened\n\t\tif (openConfig.cli.pathArguments.length > 0) {\n\t\t\tres = WindowsManager.WINDOWS.filter((w) => w.openedWorkspacePath && openConfig.cli.pathArguments.indexOf(w.openedWorkspacePath) >= 0);\n\t\t\tif (res.length) {\n\t\t\t\topenConfig.cli.pathArguments = [];\n\t\t\t}\n\t\t}\n\n\t\t// Open it\n\t\tthis.open({ cli: openConfig.cli, forceNewWindow: true, forceEmpty: openConfig.cli.pathArguments.length === 0 });\n\t}\n\n\tprivate toConfiguration(userEnv: env.IProcessEnvironment, cli: env.ICommandLineArguments, workspacePath?: string, filesToOpen?: window.IPath[], filesToCreate?: window.IPath[], filesToDiff?: window.IPath[], extensionsToInstall?: string[]): window.IWindowConfiguration {\n\t\tlet configuration: window.IWindowConfiguration = objects.mixin({}, cli); // inherit all properties from CLI\n\t\tconfiguration.execPath = process.execPath;\n\t\tconfiguration.workspacePath = workspacePath;\n\t\tconfiguration.filesToOpen = filesToOpen;\n\t\tconfiguration.filesToCreate = filesToCreate;\n\t\tconfiguration.filesToDiff = filesToDiff;\n\t\tconfiguration.extensionsToInstall = extensionsToInstall;\n\t\tconfiguration.appName = env.product.nameLong;\n\t\tconfiguration.applicationName = env.product.applicationName;\n\t\tconfiguration.darwinBundleIdentifier = env.product.darwinBundleIdentifier;\n\t\tconfiguration.appRoot = env.appRoot;\n\t\tconfiguration.version = env.version;\n\t\tconfiguration.commitHash = env.product.commit;\n\t\tconfiguration.appSettingsHome = env.appSettingsHome;\n\t\tconfiguration.appSettingsPath = env.appSettingsPath;\n\t\tconfiguration.appKeybindingsPath = env.appKeybindingsPath;\n\t\tconfiguration.userExtensionsHome = env.userExtensionsHome;\n\t\tconfiguration.extensionTips = env.product.extensionTips;\n\t\tconfiguration.mainIPCHandle = env.mainIPCHandle;\n\t\tconfiguration.sharedIPCHandle = env.sharedIPCHandle;\n\t\tconfiguration.isBuilt = env.isBuilt;\n\t\tconfiguration.crashReporter = env.product.crashReporter;\n\t\tconfiguration.extensionsGallery = env.product.extensionsGallery;\n\t\tconfiguration.welcomePage = env.product.welcomePage;\n\t\tconfiguration.productDownloadUrl = env.product.downloadUrl;\n\t\tconfiguration.releaseNotesUrl = env.product.releaseNotesUrl;\n\t\tconfiguration.licenseUrl = env.product.licenseUrl;\n\t\tconfiguration.updateFeedUrl = UpdateManager.feedUrl;\n\t\tconfiguration.updateChannel = UpdateManager.channel;\n\t\tconfiguration.aiConfig = env.product.aiConfig;\n\t\tconfiguration.sendASmile = env.product.sendASmile;\n\t\tconfiguration.enableTelemetry = env.product.enableTelemetry;\n\t\tconfiguration.userEnv = userEnv;\n\n\t\tconst recents = this.getRecentlyOpenedPaths(workspacePath, filesToOpen);\n\t\tconfiguration.recentFiles = recents.files;\n\t\tconfiguration.recentFolders = recents.folders;\n\n\t\treturn configuration;\n\t}\n\n\tprivate getRecentlyOpenedPaths(workspacePath?: string, filesToOpen?: window.IPath[]): IOpenedPathsList {\n\t\tlet files: string[];\n\t\tlet folders: string[];\n\n\t\t// Get from storage\n\t\tlet storedRecents = storage.getItem<IOpenedPathsList>(WindowsManager.openedPathsListStorageKey);\n\t\tif (storedRecents) {\n\t\t\tfiles = storedRecents.files || [];\n\t\t\tfolders = storedRecents.folders || [];\n\t\t} else {\n\t\t\tfiles = [];\n\t\t\tfolders = [];\n\t\t}\n\n\t\t// Add currently files to open to the beginning if any\n\t\tif (filesToOpen) {\n\t\t\tfiles.unshift(...filesToOpen.map(f => f.filePath));\n\t\t}\n\n\t\t// Add current workspace path to beginning if set\n\t\tif (workspacePath) {\n\t\t\tfolders.unshift(workspacePath);\n\t\t}\n\n\t\t// Clear those dupes\n\t\tfiles = arrays.distinct(files);\n\t\tfolders = arrays.distinct(folders);\n\n\t\tif (platform.isMacintosh && files.length > 0) {\n\t\t\tfiles = files.filter(f => folders.indexOf(f) < 0); // TODO@Ben migration (remove in the future)\n\t\t}\n\n\t\t// Make sure it is bounded\n\t\tfiles = files.slice(0, 10);\n\t\tfolders = folders.slice(0, 10);\n\n\t\treturn { files, folders };\n\t}\n\n\tprivate toIPath(anyPath: string, ignoreFileNotFound?: boolean, gotoLineMode?: boolean): window.IPath {\n\t\tif (!anyPath) {\n\t\t\treturn null;\n\t\t}\n\n\t\tlet parsedPath: env.IParsedPath;\n\t\tif (gotoLineMode) {\n\t\t\tparsedPath = env.parseLineAndColumnAware(anyPath);\n\t\t\tanyPath = parsedPath.path;\n\t\t}\n\n\t\tlet candidate = path.normalize(anyPath);\n\t\ttry {\n\t\t\tlet candidateStat = fs.statSync(candidate);\n\t\t\tif (candidateStat) {\n\t\t\t\treturn candidateStat.isFile() ?\n\t\t\t\t\t{\n\t\t\t\t\t\tfilePath: candidate,\n\t\t\t\t\t\tlineNumber: gotoLineMode ? parsedPath.line : void 0,\n\t\t\t\t\t\tcolumnNumber: gotoLineMode ? parsedPath.column : void 0,\n\t\t\t\t\t\tinstallExtensionPath: /\\.vsix$/i.test(candidate)\n\t\t\t\t\t} :\n\t\t\t\t\t{ workspacePath: candidate };\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tif (ignoreFileNotFound) {\n\t\t\t\treturn { filePath: candidate, createFilePath: true }; // assume this is a file that does not yet exist\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tprivate cliToPaths(cli: env.ICommandLineArguments, ignoreFileNotFound?: boolean): window.IPath[] {\n\n\t\t// Check for pass in candidate or last opened path\n\t\tlet candidates: string[] = [];\n\t\tif (cli.pathArguments.length > 0) {\n\t\t\tcandidates = cli.pathArguments;\n\t\t}\n\n\t\t// No path argument, check settings for what to do now\n\t\telse {\n\t\t\tlet reopenFolders = settings.manager.getValue('window.reopenFolders', 'one');\n\t\t\tlet lastActiveFolder = this.windowsState.lastActiveWindow && this.windowsState.lastActiveWindow.workspacePath;\n\n\t\t\t// Restore all\n\t\t\tif (reopenFolders === 'all') {\n\t\t\t\tlet lastOpenedFolders = this.windowsState.openedFolders.map(o => o.workspacePath);\n\n\t\t\t\t// If we have a last active folder, move it to the end\n\t\t\t\tif (lastActiveFolder) {\n\t\t\t\t\tlastOpenedFolders.splice(lastOpenedFolders.indexOf(lastActiveFolder), 1);\n\t\t\t\t\tlastOpenedFolders.push(lastActiveFolder);\n\t\t\t\t}\n\n\t\t\t\tcandidates.push(...lastOpenedFolders);\n\t\t\t}\n\n\t\t\t// Restore last active\n\t\t\telse if (lastActiveFolder && (reopenFolders === 'one' || reopenFolders !== 'none')) {\n\t\t\t\tcandidates.push(lastActiveFolder);\n\t\t\t}\n\t\t}\n\n\t\tlet iPaths = candidates.map((candidate) => this.toIPath(candidate, ignoreFileNotFound, cli.gotoLineMode)).filter((path) => !!path);\n\t\tif (iPaths.length > 0) {\n\t\t\treturn iPaths;\n\t\t}\n\n\t\t// No path provided, return empty to open empty\n\t\treturn [Object.create(null)];\n\t}\n\n\tprivate openInBrowserWindow(configuration: window.IWindowConfiguration, forceNewWindow?: boolean, windowToUse?: window.VSCodeWindow): window.VSCodeWindow {\n\t\tlet vscodeWindow: window.VSCodeWindow;\n\n\t\tif (!forceNewWindow) {\n\t\t\tvscodeWindow = windowToUse || this.getLastActiveWindow();\n\n\t\t\tif (vscodeWindow) {\n\t\t\t\tvscodeWindow.focus();\n\t\t\t}\n\t\t}\n\n\t\t// New window\n\t\tif (!vscodeWindow) {\n\t\t\tvscodeWindow = new window.VSCodeWindow({\n\t\t\t\tstate: this.getNewWindowState(configuration),\n\t\t\t\textensionDevelopmentPath: configuration.extensionDevelopmentPath\n\t\t\t});\n\n\t\t\tWindowsManager.WINDOWS.push(vscodeWindow);\n\n\t\t\t// Window Events\n\t\t\tvscodeWindow.win.webContents.on('crashed', () => this.onWindowError(vscodeWindow, WindowError.CRASHED));\n\t\t\tvscodeWindow.win.on('unresponsive', () => this.onWindowError(vscodeWindow, WindowError.UNRESPONSIVE));\n\t\t\tvscodeWindow.win.on('close', () => this.onBeforeWindowClose(vscodeWindow));\n\t\t\tvscodeWindow.win.on('closed', () => this.onWindowClosed(vscodeWindow));\n\n\t\t\t// Lifecycle\n\t\t\tlifecycle.manager.registerWindow(vscodeWindow);\n\t\t}\n\n\t\t// Existing window\n\t\telse {\n\n\t\t\t// Some configuration things get inherited if the window is being reused and we are\n\t\t\t// in plugin development host mode. These options are all development related.\n\t\t\tlet currentWindowConfig = vscodeWindow.config;\n\t\t\tif (!configuration.extensionDevelopmentPath && currentWindowConfig && !!currentWindowConfig.extensionDevelopmentPath) {\n\t\t\t\tconfiguration.extensionDevelopmentPath = currentWindowConfig.extensionDevelopmentPath;\n\t\t\t\tconfiguration.verboseLogging = currentWindowConfig.verboseLogging;\n\t\t\t\tconfiguration.logExtensionHostCommunication = currentWindowConfig.logExtensionHostCommunication;\n\t\t\t\tconfiguration.debugBrkExtensionHost = currentWindowConfig.debugBrkExtensionHost;\n\t\t\t\tconfiguration.debugExtensionHostPort = currentWindowConfig.debugExtensionHostPort;\n\t\t\t\tconfiguration.extensionsHomePath = currentWindowConfig.extensionsHomePath;\n\t\t\t}\n\t\t}\n\n\t\t// Only load when the window has not vetoed this\n\t\tlifecycle.manager.unload(vscodeWindow).done((veto) => {\n\t\t\tif (!veto) {\n\n\t\t\t\t// Load it\n\t\t\t\tvscodeWindow.load(configuration);\n\t\t\t}\n\t\t});\n\n\t\treturn vscodeWindow;\n\t}\n\n\tprivate getNewWindowState(configuration: window.IWindowConfiguration): window.IWindowState {\n\n\t\t// plugin development host Window - load from stored settings if any\n\t\tif (!!configuration.extensionDevelopmentPath && this.windowsState.lastPluginDevelopmentHostWindow) {\n\t\t\treturn this.windowsState.lastPluginDevelopmentHostWindow.uiState;\n\t\t}\n\n\t\t// Known Folder - load from stored settings if any\n\t\tif (configuration.workspacePath) {\n\t\t\tlet stateForWorkspace = this.windowsState.openedFolders.filter(o => this.isPathEqual(o.workspacePath, configuration.workspacePath)).map(o => o.uiState);\n\t\t\tif (stateForWorkspace.length) {\n\t\t\t\treturn stateForWorkspace[0];\n\t\t\t}\n\t\t}\n\n\t\t// First Window\n\t\tlet lastActive = this.getLastActiveWindow();\n\t\tif (!lastActive && this.windowsState.lastActiveWindow) {\n\t\t\treturn this.windowsState.lastActiveWindow.uiState;\n\t\t}\n\n\t\t//\n\t\t// In any other case, we do not have any stored settings for the window state, so we come up with something smart\n\t\t//\n\n\t\t// We want the new window to open on the same display that the last active one is in\n\t\tlet displayToUse: Electron.Display;\n\t\tlet displays = screen.getAllDisplays();\n\n\t\t// Single Display\n\t\tif (displays.length === 1) {\n\t\t\tdisplayToUse = displays[0];\n\t\t}\n\n\t\t// Multi Display\n\t\telse {\n\n\t\t\t// on mac there is 1 menu per window so we need to use the monitor where the cursor currently is\n\t\t\tif (platform.isMacintosh) {\n\t\t\t\tlet cursorPoint = screen.getCursorScreenPoint();\n\t\t\t\tdisplayToUse = screen.getDisplayNearestPoint(cursorPoint);\n\t\t\t}\n\n\t\t\t// if we have a last active window, use that display for the new window\n\t\t\tif (!displayToUse && lastActive) {\n\t\t\t\tdisplayToUse = screen.getDisplayMatching(lastActive.getBounds());\n\t\t\t}\n\n\t\t\t// fallback to first display\n\t\t\tif (!displayToUse) {\n\t\t\t\tdisplayToUse = displays[0];\n\t\t\t}\n\t\t}\n\n\t\tlet defaultState = window.defaultWindowState();\n\t\tdefaultState.x = displayToUse.bounds.x + (displayToUse.bounds.width / 2) - (defaultState.width / 2);\n\t\tdefaultState.y = displayToUse.bounds.y + (displayToUse.bounds.height / 2) - (defaultState.height / 2);\n\n\t\treturn this.ensureNoOverlap(defaultState);\n\t}\n\n\tprivate ensureNoOverlap(state: window.IWindowState): window.IWindowState {\n\t\tif (WindowsManager.WINDOWS.length === 0) {\n\t\t\treturn state;\n\t\t}\n\n\t\tlet existingWindowBounds = WindowsManager.WINDOWS.map((win) => win.getBounds());\n\t\twhile (existingWindowBounds.some((b) => b.x === state.x || b.y === state.y)) {\n\t\t\tstate.x += 30;\n\t\t\tstate.y += 30;\n\t\t}\n\n\t\treturn state;\n\t}\n\n\tpublic openFileFolderPicker(forceNewWindow?: boolean): void {\n\t\tthis.doPickAndOpen({ pickFolders: true, pickFiles: true }, forceNewWindow);\n\t}\n\n\tpublic openFilePicker(forceNewWindow?: boolean): void {\n\t\tthis.doPickAndOpen({ pickFiles: true }, forceNewWindow);\n\t}\n\n\tpublic openFolderPicker(forceNewWindow?: boolean): void {\n\t\tthis.doPickAndOpen({ pickFolders: true }, forceNewWindow);\n\t}\n\n\tprivate doPickAndOpen(options: INativeOpenDialogOptions, forceNewWindow?: boolean): void {\n\t\tthis.getFileOrFolderPaths(options, (paths: string[]) => {\n\t\t\tif (paths && paths.length) {\n\t\t\t\tthis.open({ cli: env.cliArgs, pathsToOpen: paths, forceNewWindow });\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate getFileOrFolderPaths(options: INativeOpenDialogOptions, clb: (paths: string[]) => void): void {\n\t\tlet workingDir = storage.getItem<string>(WindowsManager.workingDirPickerStorageKey);\n\t\tlet focussedWindow = this.getFocusedWindow();\n\n\t\tlet pickerProperties: string[];\n\t\tif (options.pickFiles && options.pickFolders) {\n\t\t\tpickerProperties = ['multiSelections', 'openDirectory', 'openFile', 'createDirectory'];\n\t\t} else {\n\t\t\tpickerProperties = ['multiSelections', options.pickFolders ? 'openDirectory' : 'openFile', 'createDirectory'];\n\t\t}\n\n\t\tdialog.showOpenDialog(focussedWindow && focussedWindow.win, {\n\t\t\tdefaultPath: workingDir,\n\t\t\tproperties: pickerProperties\n\t\t}, (paths) => {\n\t\t\tif (paths && paths.length > 0) {\n\n\t\t\t\t// Remember path in storage for next time\n\t\t\t\tstorage.setItem(WindowsManager.workingDirPickerStorageKey, path.dirname(paths[0]));\n\n\t\t\t\t// Return\n\t\t\t\tclb(paths);\n\t\t\t} else {\n\t\t\t\tclb(void (0));\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic focusLastActive(cli: env.ICommandLineArguments): window.VSCodeWindow {\n\t\tlet lastActive = this.getLastActiveWindow();\n\t\tif (lastActive) {\n\t\t\tlastActive.focus();\n\n\t\t\treturn lastActive;\n\t\t}\n\n\t\t// No window - open new one\n\t\tthis.windowsState.openedFolders = []; // make sure we do not open too much\n\t\tconst res = this.open({ cli: cli });\n\n\t\treturn res && res[0];\n\t}\n\n\tpublic getLastActiveWindow(): window.VSCodeWindow {\n\t\tif (WindowsManager.WINDOWS.length) {\n\t\t\tlet lastFocussedDate = Math.max.apply(Math, WindowsManager.WINDOWS.map((w) => w.lastFocusTime));\n\t\t\tlet res = WindowsManager.WINDOWS.filter((w) => w.lastFocusTime === lastFocussedDate);\n\t\t\tif (res && res.length) {\n\t\t\t\treturn res[0];\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tpublic findWindow(workspacePath: string, filePath?: string, extensionDevelopmentPath?: string): window.VSCodeWindow {\n\t\tif (WindowsManager.WINDOWS.length) {\n\n\t\t\t// Sort the last active window to the front of the array of windows to test\n\t\t\tlet windowsToTest = WindowsManager.WINDOWS.slice(0);\n\t\t\tlet lastActiveWindow = this.getLastActiveWindow();\n\t\t\tif (lastActiveWindow) {\n\t\t\t\twindowsToTest.splice(windowsToTest.indexOf(lastActiveWindow), 1);\n\t\t\t\twindowsToTest.unshift(lastActiveWindow);\n\t\t\t}\n\n\t\t\t// Find it\n\t\t\tlet res = windowsToTest.filter((w) => {\n\n\t\t\t\t// match on workspace\n\t\t\t\tif (typeof w.openedWorkspacePath === 'string' && (this.isPathEqual(w.openedWorkspacePath, workspacePath))) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\t// match on file\n\t\t\t\tif (typeof w.openedFilePath === 'string' && this.isPathEqual(w.openedFilePath, filePath)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\t// match on file path\n\t\t\t\tif (typeof w.openedWorkspacePath === 'string' && filePath && paths.isEqualOrParent(filePath, w.openedWorkspacePath)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\t// match on extension development path\n\t\t\t\tif (typeof extensionDevelopmentPath === 'string' && w.extensionDevelopmentPath === extensionDevelopmentPath) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\t\t\t});\n\n\t\t\tif (res && res.length) {\n\t\t\t\treturn res[0];\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tpublic openNewWindow(): void {\n\t\tthis.open({ cli: env.cliArgs, forceNewWindow: true, forceEmpty: true });\n\t}\n\n\tpublic sendToFocused(channel: string, ...args: any[]): void {\n\t\tconst focusedWindow = this.getFocusedWindow() || this.getLastActiveWindow();\n\n\t\tif (focusedWindow) {\n\t\t\tfocusedWindow.sendWhenReady(channel, ...args);\n\t\t}\n\t}\n\n\tpublic sendToAll(channel: string, payload: any, windowIdsToIgnore?: number[]): void {\n\t\tWindowsManager.WINDOWS.forEach((w) => {\n\t\t\tif (windowIdsToIgnore && windowIdsToIgnore.indexOf(w.id) >= 0) {\n\t\t\t\treturn; // do not send if we are instructed to ignore it\n\t\t\t}\n\n\t\t\tw.sendWhenReady(channel, payload);\n\t\t});\n\t}\n\n\tpublic getFocusedWindow(): window.VSCodeWindow {\n\t\tlet win = BrowserWindow.getFocusedWindow();\n\t\tif (win) {\n\t\t\treturn this.getWindowById(win.id);\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tpublic getWindowById(windowId: number): window.VSCodeWindow {\n\t\tlet res = WindowsManager.WINDOWS.filter((w) => w.id === windowId);\n\t\tif (res && res.length === 1) {\n\t\t\treturn res[0];\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tpublic getWindows(): window.VSCodeWindow[] {\n\t\treturn WindowsManager.WINDOWS;\n\t}\n\n\tpublic getWindowCount(): number {\n\t\treturn WindowsManager.WINDOWS.length;\n\t}\n\n\tprivate onWindowError(vscodeWindow: window.VSCodeWindow, error: WindowError): void {\n\t\tconsole.error(error === WindowError.CRASHED ? '[VS Code]: render process crashed!' : '[VS Code]: detected unresponsive');\n\n\t\t// Unresponsive\n\t\tif (error === WindowError.UNRESPONSIVE) {\n\t\t\tdialog.showMessageBox(vscodeWindow.win, {\n\t\t\t\ttitle: env.product.nameLong,\n\t\t\t\ttype: 'warning',\n\t\t\t\tbuttons: [nls.localize('reopen', \"Reopen\"), nls.localize('wait', \"Keep Waiting\"), nls.localize('close', \"Close\")],\n\t\t\t\tmessage: nls.localize('appStalled', \"The window is no longer responding\"),\n\t\t\t\tdetail: nls.localize('appStalledDetail', \"You can reopen or close the window or keep waiting.\"),\n\t\t\t\tnoLink: true\n\t\t\t}, (result) => {\n\t\t\t\tif (result === 0) {\n\t\t\t\t\tvscodeWindow.reload();\n\t\t\t\t} else if (result === 2) {\n\t\t\t\t\tthis.onBeforeWindowClose(vscodeWindow); // 'close' event will not be fired on destroy(), so run it manually\n\t\t\t\t\tvscodeWindow.win.destroy(); // make sure to destroy the window as it is unresponsive\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// Crashed\n\t\telse {\n\t\t\tdialog.showMessageBox(vscodeWindow.win, {\n\t\t\t\ttitle: env.product.nameLong,\n\t\t\t\ttype: 'warning',\n\t\t\t\tbuttons: [nls.localize('reopen', \"Reopen\"), nls.localize('close', \"Close\")],\n\t\t\t\tmessage: nls.localize('appCrashed', \"The window has crashed\"),\n\t\t\t\tdetail: nls.localize('appCrashedDetail', \"We are sorry for the inconvenience! You can reopen the window to continue where you left off.\"),\n\t\t\t\tnoLink: true\n\t\t\t}, (result) => {\n\t\t\t\tif (result === 0) {\n\t\t\t\t\tvscodeWindow.reload();\n\t\t\t\t} else if (result === 1) {\n\t\t\t\t\tthis.onBeforeWindowClose(vscodeWindow); // 'close' event will not be fired on destroy(), so run it manually\n\t\t\t\t\tvscodeWindow.win.destroy(); // make sure to destroy the window as it has crashed\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate onBeforeWindowClose(win: window.VSCodeWindow): void {\n\t\tif (win.readyState !== window.ReadyState.READY) {\n\t\t\treturn; // only persist windows that are fully loaded\n\t\t}\n\n\t\t// On Window close, update our stored state of this window\n\t\tlet state: IWindowState = { workspacePath: win.openedWorkspacePath, uiState: win.serializeWindowState() };\n\t\tif (win.isPluginDevelopmentHost) {\n\t\t\tthis.windowsState.lastPluginDevelopmentHostWindow = state;\n\t\t} else {\n\t\t\tthis.windowsState.lastActiveWindow = state;\n\n\t\t\tthis.windowsState.openedFolders.forEach(o => {\n\t\t\t\tif (this.isPathEqual(o.workspacePath, win.openedWorkspacePath)) {\n\t\t\t\t\to.uiState = state.uiState;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate onWindowClosed(win: window.VSCodeWindow): void {\n\n\t\t// Tell window\n\t\twin.dispose();\n\n\t\t// Remove from our list so that Electron can clean it up\n\t\tlet index = WindowsManager.WINDOWS.indexOf(win);\n\t\tWindowsManager.WINDOWS.splice(index, 1);\n\n\t\t// Emit\n\t\teventEmitter.emit(EventTypes.CLOSE, win.id);\n\t}\n\n\tprivate isPathEqual(pathA: string, pathB: string): boolean {\n\t\tif (pathA === pathB) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (!pathA || !pathB) {\n\t\t\treturn false;\n\t\t}\n\n\t\tpathA = path.normalize(pathA);\n\t\tpathB = path.normalize(pathB);\n\n\t\tif (pathA === pathB) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (!platform.isLinux) {\n\t\t\tpathA = pathA.toLowerCase();\n\t\t\tpathB = pathB.toLowerCase();\n\t\t}\n\n\t\treturn pathA === pathB;\n\t}\n}\n\nexport const manager = new WindowsManager();"]}