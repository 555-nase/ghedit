{"version":3,"file":"vs/workbench/electron-main/storage.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/workbench/electron-main/storage.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\n'use strict';\n\nimport path = require('path');\nimport fs = require('fs');\nimport events = require('events');\n\nimport env = require('vs/workbench/electron-main/env');\n\nconst dbPath = path.join(env.appHome, 'storage.json');\nlet database: any = null;\n\nconst EventTypes = {\n\tSTORE: 'store'\n};\n\nconst eventEmitter = new events.EventEmitter();\n\nexport function onStore<T>(clb: (key: string, oldValue: T, newValue: T) => void): () => void {\n\teventEmitter.addListener(EventTypes.STORE, clb);\n\n\treturn () => eventEmitter.removeListener(EventTypes.STORE, clb);\n}\n\nexport function getItem<T>(key: string, defaultValue?: T): T {\n\tif (!database) {\n\t\tdatabase = load();\n\t}\n\n\tconst res = database[key];\n\tif (typeof res === 'undefined') {\n\t\treturn defaultValue;\n\t}\n\n\treturn database[key];\n}\n\nexport function setItem(key: string, data: any): void {\n\tif (!database) {\n\t\tdatabase = load();\n\t}\n\n\t// Shortcut for primitives that did not change\n\tif (typeof data === 'string' || typeof data === 'number' || typeof data === 'boolean') {\n\t\tif (database[key] === data) {\n\t\t\treturn;\n\t\t}\n\t}\n\n\tlet oldValue = database[key];\n\tdatabase[key] = data;\n\tsave();\n\n\teventEmitter.emit(EventTypes.STORE, key, oldValue, data);\n}\n\nexport function removeItem(key: string): void {\n\tif (!database) {\n\t\tdatabase = load();\n\t}\n\n\tif (database[key]) {\n\t\tlet oldValue = database[key];\n\t\tdelete database[key];\n\t\tsave();\n\n\t\teventEmitter.emit(EventTypes.STORE, key, oldValue, null);\n\t}\n}\n\nfunction load(): any {\n\ttry {\n\t\treturn JSON.parse(fs.readFileSync(dbPath).toString());\n\t} catch (error) {\n\t\tif (env.cliArgs.verboseLogging) {\n\t\t\tconsole.error(error);\n\t\t}\n\n\t\treturn {};\n\t}\n}\n\nfunction save(): void {\n\tfs.writeFileSync(dbPath, JSON.stringify(database, null, 4));\n}"]}