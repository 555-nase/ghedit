{"version":3,"file":"vs/workbench/electron-main/lifecycle.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/workbench/electron-main/lifecycle.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport events = require('events');\nimport {ipcMain as ipc, app} from 'electron';\n\nimport {TPromise, TValueCallback} from 'vs/base/common/winjs.base';\nimport {ReadyState, VSCodeWindow} from 'vs/workbench/electron-main/window';\nimport env = require('vs/workbench/electron-main/env');\n\nconst eventEmitter = new events.EventEmitter();\n\nconst EventTypes = {\n\tBEFORE_QUIT: 'before-quit'\n};\n\n/**\n * Due to the way we handle lifecycle with eventing, the general app.on('before-quit')\n * event cannot be used because it can be called twice on shutdown. Instead the onBeforeQuit\n * handler in this module can be used and it is only called once on a shutdown sequence.\n */\nexport function onBeforeQuit(clb: () => void): () => void {\n\teventEmitter.addListener(EventTypes.BEFORE_QUIT, clb);\n\n\treturn () => eventEmitter.removeListener(EventTypes.BEFORE_QUIT, clb);\n}\n\nexport class Lifecycle {\n\tprivate windowToCloseRequest: { [windowId: string]: boolean };\n\tprivate quitRequested: boolean;\n\tprivate pendingQuitPromise: TPromise<boolean>;\n\tprivate pendingQuitPromiseComplete: TValueCallback<boolean>;\n\tprivate oneTimeListenerTokenGenerator: number;\n\n\tconstructor() {\n\t\tthis.windowToCloseRequest = Object.create(null);\n\t\tthis.quitRequested = false;\n\t\tthis.oneTimeListenerTokenGenerator = 0;\n\t}\n\n\tpublic ready(): void {\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\n\t\t// before-quit\n\t\tapp.on('before-quit', (e) => {\n\t\t\tenv.log('Lifecycle#before-quit');\n\n\t\t\tif (!this.quitRequested) {\n\t\t\t\teventEmitter.emit(EventTypes.BEFORE_QUIT); // only send this if this is the first quit request we have\n\t\t\t}\n\n\t\t\tthis.quitRequested = true;\n\t\t});\n\n\t\t// window-all-closed\n\t\tapp.on('window-all-closed', () => {\n\t\t\tenv.log('Lifecycle#window-all-closed');\n\n\t\t\t// Windows/Linux: we quit when all windows have closed\n\t\t\t// Mac: we only quit when quit was requested\n\t\t\t// --wait: we quit when all windows are closed\n\t\t\tif (this.quitRequested || process.platform !== 'darwin' || env.cliArgs.waitForWindowClose) {\n\t\t\t\tapp.quit();\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic registerWindow(vscodeWindow: VSCodeWindow): void {\n\n\t\t// Window Before Closing: Main -> Renderer\n\t\tvscodeWindow.win.on('close', (e) => {\n\t\t\tlet windowId = vscodeWindow.id;\n\t\t\tenv.log('Lifecycle#window-before-close', windowId);\n\n\t\t\t// The window already acknowledged to be closed\n\t\t\tif (this.windowToCloseRequest[windowId]) {\n\t\t\t\tenv.log('Lifecycle#window-close', windowId);\n\n\t\t\t\tdelete this.windowToCloseRequest[windowId];\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Otherwise prevent unload and handle it from window\n\t\t\te.preventDefault();\n\t\t\tthis.unload(vscodeWindow).done(veto => {\n\t\t\t\tif (!veto) {\n\t\t\t\t\tthis.windowToCloseRequest[windowId] = true;\n\t\t\t\t\tvscodeWindow.win.close();\n\t\t\t\t} else {\n\t\t\t\t\tthis.quitRequested = false;\n\t\t\t\t\tdelete this.windowToCloseRequest[windowId];\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tpublic unload(vscodeWindow: VSCodeWindow): TPromise<boolean /* veto */> {\n\n\t\t// Always allow to unload a window that is not yet ready\n\t\tif (vscodeWindow.readyState !== ReadyState.READY) {\n\t\t\treturn TPromise.as<boolean>(false);\n\t\t}\n\t\t\n\t\tenv.log('Lifecycle#unload()', vscodeWindow.id);\n\n\t\treturn new TPromise<boolean>((c) => {\n\t\t\tlet oneTimeEventToken = this.oneTimeListenerTokenGenerator++;\n\t\t\tlet oneTimeOkEvent = 'vscode:ok' + oneTimeEventToken;\n\t\t\tlet oneTimeCancelEvent = 'vscode:cancel' + oneTimeEventToken;\n\n\t\t\tipc.once(oneTimeOkEvent, () => {\n\t\t\t\tc(false); // no veto\n\t\t\t});\n\n\t\t\tipc.once(oneTimeCancelEvent, () => {\n\n\t\t\t\t// Any cancellation also cancels a pending quit if present\n\t\t\t\tif (this.pendingQuitPromiseComplete) {\n\t\t\t\t\tthis.pendingQuitPromiseComplete(true /* veto */);\n\t\t\t\t\tthis.pendingQuitPromiseComplete = null;\n\t\t\t\t\tthis.pendingQuitPromise = null;\n\t\t\t\t}\n\n\t\t\t\tc(true); // veto\n\t\t\t});\n\n\t\t\tvscodeWindow.send('vscode:beforeUnload', { okChannel: oneTimeOkEvent, cancelChannel: oneTimeCancelEvent });\n\t\t});\n\t}\n\n\t/**\n\t * A promise that completes to indicate if the quit request has been veto'd\n\t * by the user or not.\n\t */\n\tpublic quit(): TPromise<boolean /* veto */> {\n\t\tenv.log('Lifecycle#quit()');\n\n\t\tif (!this.pendingQuitPromise) {\n\t\t\tthis.pendingQuitPromise = new TPromise<boolean>((c) => {\n\n\t\t\t\t// Store as field to access it from a window cancellation\n\t\t\t\tthis.pendingQuitPromiseComplete = c;\n\n\t\t\t\tapp.once('will-quit', () => {\n\t\t\t\t\tif (this.pendingQuitPromiseComplete) {\n\t\t\t\t\t\tthis.pendingQuitPromiseComplete(false /* no veto */);\n\t\t\t\t\t\tthis.pendingQuitPromiseComplete = null;\n\t\t\t\t\t\tthis.pendingQuitPromise = null;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tapp.quit();\n\t\t\t});\n\t\t}\n\n\t\treturn this.pendingQuitPromise;\n\t}\n}\n\nexport const manager = new Lifecycle();"]}