{"version":3,"file":"vs/workbench/electron-main/sharedProcess.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/workbench/electron-main/sharedProcess.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;IAWhG,IAAM,YAAY,GAAG,aAAG,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC,MAAM,CAAC;IAElE;QACC,IAAI,aAAa,GAAiB,gBAAM,CAAC,EAAE,EAAE,GAAG,CAAC,OAAO,CAAC,CAAC;QAC1D,aAAa,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC;QAC1C,aAAa,CAAC,OAAO,GAAG,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC;QAC7C,aAAa,CAAC,OAAO,GAAG,GAAG,CAAC,OAAO,CAAC;QACpC,aAAa,CAAC,OAAO,GAAG,GAAG,CAAC,OAAO,CAAC;QACpC,aAAa,CAAC,UAAU,GAAG,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC;QAC9C,aAAa,CAAC,eAAe,GAAG,GAAG,CAAC,eAAe,CAAC;QACpD,aAAa,CAAC,eAAe,GAAG,GAAG,CAAC,eAAe,CAAC;QACpD,aAAa,CAAC,kBAAkB,GAAG,GAAG,CAAC,kBAAkB,CAAC;QAC1D,aAAa,CAAC,kBAAkB,GAAG,GAAG,CAAC,kBAAkB,CAAC;QAC1D,aAAa,CAAC,OAAO,GAAG,GAAG,CAAC,OAAO,CAAC;QACpC,aAAa,CAAC,aAAa,GAAG,yBAAa,CAAC,OAAO,CAAC;QACpD,aAAa,CAAC,aAAa,GAAG,yBAAa,CAAC,OAAO,CAAC;QACpD,aAAa,CAAC,iBAAiB,GAAG,GAAG,CAAC,OAAO,CAAC,iBAAiB,CAAC;QAEhE,MAAM,CAAC,aAAa,CAAC;IACtB,CAAC;IAED;QACC,iEAAiE;QACjE,IAAM,IAAI,GAAG;YACZ,GAAG,EAAE,gBAAM,CAAC,gBAAM,CAAC,EAAE,EAAE,OAAO,CAAC,GAAG,CAAC,EAAE;gBACpC,cAAc,EAAE,8CAA8C;aAC9D,CAAC;SACF,CAAC;QAEF,IAAM,MAAM,GAAG,EAAE,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC,sBAAsB,CAAC,EAAE,IAAI,CAAC,CAAC;QAErE,YAAY;QACZ,MAAM,CAAC,IAAI,CAAC,SAAS,EAAE;YACtB,MAAM,CAAC,IAAI,CAAC;gBACX,aAAa,EAAE;oBACd,GAAG,EAAE,cAAc,EAAE;iBACrB;gBACD,qBAAqB,EAAE;oBACtB,cAAc,EAAE,kBAAe,CAAC,cAAc;iBAC9C;aACD,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,MAAM,CAAC;IACf,CAAC;IAED,IAAI,UAAU,GAAG,CAAC,CAAC;IAEnB;QACC,IAAI,KAAsB,CAAC;QAE3B,IAAM,KAAK,GAAG;YACb,EAAE,CAAC,CAAC,EAAE,UAAU,GAAG,EAAE,CAAC,CAAC,CAAC;gBACvB,MAAM,CAAC;YACR,CAAC;YAED,KAAK,GAAG,mBAAmB,EAAE,CAAC;YAC9B,KAAK,CAAC,EAAE,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;QACzB,CAAC,CAAC;QAEF,KAAK,EAAE,CAAC;QAER,MAAM,CAAC;YACN,OAAO,EAAE;gBACR,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;oBACX,KAAK,CAAC,cAAc,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;oBACpC,KAAK,CAAC,IAAI,EAAE,CAAC;oBACb,KAAK,GAAG,IAAI,CAAC;gBACd,CAAC;YACF,CAAC;SACD,CAAC;IACH,CAAC;IAvBe,0BAAkB,qBAuBjC,CAAA","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as cp from 'child_process';\nimport URI from 'vs/base/common/uri';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { assign } from 'vs/base/common/objects';\nimport { IEnvironment } from 'vs/platform/workspace/common/workspace';\nimport env = require('vs/workbench/electron-main/env');\nimport { manager as SettingsManager } from 'vs/workbench/electron-main/settings';\nimport { Instance as UpdateManager } from 'vs/workbench/electron-main/update-manager';\n\nconst boostrapPath = URI.parse(require.toUrl('bootstrap')).fsPath;\n\nfunction getEnvironment(): IEnvironment {\n\tlet configuration: IEnvironment = assign({}, env.cliArgs);\n\tconfiguration.execPath = process.execPath;\n\tconfiguration.appName = env.product.nameLong;\n\tconfiguration.appRoot = env.appRoot;\n\tconfiguration.version = env.version;\n\tconfiguration.commitHash = env.product.commit;\n\tconfiguration.appSettingsHome = env.appSettingsHome;\n\tconfiguration.appSettingsPath = env.appSettingsPath;\n\tconfiguration.appKeybindingsPath = env.appKeybindingsPath;\n\tconfiguration.userExtensionsHome = env.userExtensionsHome;\n\tconfiguration.isBuilt = env.isBuilt;\n\tconfiguration.updateFeedUrl = UpdateManager.feedUrl;\n\tconfiguration.updateChannel = UpdateManager.channel;\n\tconfiguration.extensionsGallery = env.product.extensionsGallery;\n\n\treturn configuration;\n}\n\nfunction _spawnSharedProcess(): cp.ChildProcess {\n\t// Make sure the nls configuration travels to the shared process.\n\tconst opts = {\n\t\tenv: assign(assign({}, process.env), {\n\t\t\tAMD_ENTRYPOINT: 'vs/workbench/electron-main/sharedProcessMain'\n\t\t})\n\t};\n\n\tconst result = cp.fork(boostrapPath, ['--type=SharedProcess'], opts);\n\n\t// handshake\n\tresult.once('message', () => {\n\t\tresult.send({\n\t\t\tconfiguration: {\n\t\t\t\tenv: getEnvironment()\n\t\t\t},\n\t\t\tcontextServiceOptions: {\n\t\t\t\tglobalSettings: SettingsManager.globalSettings\n\t\t\t}\n\t\t});\n\t});\n\n\treturn result;\n}\n\nlet spawnCount = 0;\n\nexport function spawnSharedProcess(): IDisposable {\n\tlet child: cp.ChildProcess;\n\n\tconst spawn = () => {\n\t\tif (++spawnCount > 10) {\n\t\t\treturn;\n\t\t}\n\n\t\tchild = _spawnSharedProcess();\n\t\tchild.on('exit', spawn);\n\t};\n\n\tspawn();\n\n\treturn {\n\t\tdispose: () => {\n\t\t\tif (child) {\n\t\t\t\tchild.removeListener('exit', spawn);\n\t\t\t\tchild.kill();\n\t\t\t\tchild = null;\n\t\t\t}\n\t\t}\n\t};\n}"]}