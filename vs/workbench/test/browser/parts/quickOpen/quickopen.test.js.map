{"version":3,"file":"vs/workbench/test/browser/parts/quickOpen/quickopen.test.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/workbench/test/browser/parts/quickOpen/quickopen.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport * as assert from 'assert';\nimport {TestContextService, TestStorageService, TestEventService, TestEditorService, TestQuickOpenService} from 'vs/workbench/test/browser/servicesTestUtils';\nimport {MockKeybindingService} from 'vs/platform/keybinding/test/common/mockKeybindingService';\nimport {Registry} from 'vs/platform/platform';\nimport {EditorHistoryModel, EditorHistoryEntry} from 'vs/workbench/browser/parts/quickopen/editorHistoryModel';\nimport {QuickOpenHandlerDescriptor, IQuickOpenRegistry, Extensions as QuickOpenExtensions} from 'vs/workbench/browser/quickopen';\nimport {QuickOpenController} from 'vs/workbench/browser/parts/quickopen/quickOpenController';\nimport {Mode} from 'vs/base/parts/quickopen/common/quickOpen';\nimport {QuickOpenAction} from 'vs/workbench/browser/actions/quickOpenAction';\nimport {StringEditorInput} from 'vs/workbench/common/editor/stringEditorInput';\nimport {EditorInput} from 'vs/workbench/common/editor';\nimport {isEmptyObject} from 'vs/base/common/types';\nimport {join} from 'vs/base/common/paths';\nimport {Extensions, IEditorRegistry} from 'vs/workbench/browser/parts/editor/baseEditor';\nimport URI from 'vs/base/common/uri';\nimport {createInstantiationService} from 'vs/platform/instantiation/common/instantiationService';\nimport {EventType, EditorEvent} from 'vs/workbench/common/events';\nimport {Position} from 'vs/platform/editor/common/editor';\n\nfunction toResource(path) {\n\treturn URI.file(join('C:\\\\', path));\n}\n\nlet EditorRegistry: IEditorRegistry = Registry.as(Extensions.Editors);\nlet fileInputAsyncDescriptor = EditorRegistry.getDefaultFileInput();\nlet fileInputModule = require(fileInputAsyncDescriptor.moduleName);\nlet fileInputCtor = fileInputModule[fileInputAsyncDescriptor.ctorName];\n\nsuite('Workbench QuickOpen', () => {\n\n\ttest('EditorHistoryEntry', () => {\n\t\tlet editorService = new TestEditorService();\n\t\tlet contextService = new TestContextService();\n\t\tlet inst = createInstantiationService({});\n\n\t\tlet model = new EditorHistoryModel(editorService, null, contextService);\n\n\t\tlet input1 = inst.createInstance(StringEditorInput, 'name1', 'description', 'value1', 'text/plain', false);\n\t\tlet entry1 = new EditorHistoryEntry(editorService, contextService, input1, null, null, model);\n\n\t\tassert.equal(input1.getName(), entry1.getLabel());\n\t\tassert.equal(input1.getDescription(), entry1.getDescription());\n\t\tassert.equal(null, entry1.getResource());\n\t\tassert.equal(input1, entry1.getInput());\n\n\t\tlet match = [\n\t\t\t{\n\t\t\t\tstart: 1,\n\t\t\t\tend: 5\n\t\t\t}\n\t\t];\n\t\tlet clone1 = entry1.clone(match);\n\t\tassert.equal(clone1.getLabel(), entry1.getLabel());\n\t\tassert(clone1.getInput() === input1);\n\t\tassert.equal(1, clone1.getHighlights()[0].length);\n\n\t\tlet input2 = inst.createInstance(StringEditorInput, 'name2', 'description', 'value2', 'text/plain', false);\n\t\t(<any>input2).getResource = () => 'path';\n\t\tlet entry2 = new EditorHistoryEntry(editorService, contextService, input2, null, null, model);\n\t\tassert.ok(!entry2.getResource()); // inputs with getResource are not taken as resource for entry, only files and untitled\n\n\t\tassert(!entry1.matches(entry2.getInput()));\n\t\tassert(entry1.matches(entry1.getInput()));\n\n\t\tassert(entry1.run(Mode.OPEN, { event: null, quickNavigateConfiguration: null }));\n\t\tassert(!entry2.run(Mode.PREVIEW, { event: null, quickNavigateConfiguration: null }));\n\t});\n\n\ttest('EditorHistoryEntry is removed when open fails', () => {\n\t\tlet editorService = new TestEditorService();\n\t\tlet contextService = new TestContextService();\n\t\tlet inst = createInstantiationService({});\n\n\t\tlet model = new EditorHistoryModel(editorService, null, contextService);\n\n\t\tlet input1 = inst.createInstance(StringEditorInput, 'name1', 'description', 'value1', 'text/plain', false);\n\n\t\tmodel.add(input1);\n\n\t\tassert.equal(1, model.getEntries().length);\n\n\t\tassert(model.getEntries()[0].run(Mode.OPEN, { event: null, quickNavigateConfiguration: null }));\n\n\t\tassert.equal(0, model.getEntries().length);\n\t});\n\n\ttest('EditorHistoryModel', () => {\n\t\tRegistry.as('workbench.contributions.editors').setInstantiationService(createInstantiationService({}));\n\n\t\tlet editorService = new TestEditorService();\n\t\tlet contextService = new TestContextService();\n\n\t\tlet inst = createInstantiationService({ editorService: editorService });\n\n\t\tlet model = new EditorHistoryModel(editorService, inst, contextService);\n\n\t\tlet input1 = inst.createInstance(StringEditorInput, 'name1', 'description', 'value1', 'text/plain', false);\n\t\tlet input2 = inst.createInstance(StringEditorInput, 'name2', 'description', 'value2', 'text/plain', false);\n\t\tlet input3 = inst.createInstance(StringEditorInput, 'name3', 'description', 'value3', 'text/plain', false);\n\n\t\tassert.equal(0, model.getEntries().length);\n\n\t\tmodel.add(input1);\n\t\tmodel.add(input2);\n\n\t\tassert.equal(2, model.getEntries().length);\n\n\t\tmodel.add(input1);\n\t\tassert.equal(2, model.getEntries().length);\n\n\t\tmodel.add(input3);\n\t\tassert(model.getEntries()[0].matches(input3));\n\n\t\tmodel.remove(input3);\n\t\tassert.equal(2, model.getEntries().length);\n\n\t\tlet memento = {};\n\t\tmodel.saveTo(memento);\n\t\tassert(isEmptyObject(memento));\n\n\t\tlet saveInput1 = <EditorInput>inst.createInstance(fileInputCtor, toResource('path1'), 'text/plain', void 0);\n\t\tlet saveInput2 = <EditorInput>inst.createInstance(fileInputCtor, toResource('path2'), 'text/plain', void 0);\n\n\t\tmodel.add(saveInput1);\n\t\tmodel.add(saveInput2);\n\n\t\tmodel.saveTo(memento);\n\t\tassert(!isEmptyObject(memento));\n\n\t\tmodel = new EditorHistoryModel(editorService, inst, contextService);\n\t\tmodel.loadFrom(memento);\n\n\t\tassert.equal(2, model.getEntries().length);\n\t\tassert(model.getEntries()[0].matches(saveInput2));\n\t\tassert(model.getEntries()[1].matches(saveInput1));\n\n\t\tmodel = new EditorHistoryModel(editorService, inst, contextService);\n\n\t\tlet cinput1 = <EditorInput>inst.createInstance(fileInputCtor, toResource('Hello World'), 'text/plain', void 0);\n\t\tlet cinput2 = <EditorInput>inst.createInstance(fileInputCtor, toResource('Yes World'), 'text/plain', void 0);\n\t\tlet cinput3 = <EditorInput>inst.createInstance(fileInputCtor, toResource('No Hello'), 'text/plain', void 0);\n\n\t\tmodel.add(cinput1);\n\t\tmodel.add(cinput2);\n\t\tmodel.add(cinput3);\n\n\t\tassert.equal(3, model.getResults('*').length);\n\t\tassert.equal(1, model.getResults('HW').length);\n\t\tassert.equal(2, model.getResults('World').length);\n\n\t\tassert.equal(1, model.getResults('*')[0].getHighlights()[0].length);\n\n\t\tmodel = new EditorHistoryModel(editorService, inst, contextService);\n\n\t\tlet cinput4 = <EditorInput>inst.createInstance(fileInputCtor, toResource('foo.ts'), 'text/plain', void 0);\n\t\tlet cinput5 = <EditorInput>inst.createInstance(fileInputCtor, toResource('bar.js'), 'text/plain', void 0);\n\t\tlet cinput6 = <EditorInput>inst.createInstance(fileInputCtor, toResource('foo.js'), 'text/plain', void 0);\n\n\t\tmodel.add(cinput4);\n\t\tmodel.add(cinput5);\n\t\tmodel.add(cinput6);\n\n\t\tlet sortedResults = model.getResults('*');\n\t\tassert.equal(3, model.getResults('*').length);\n\t\tassert.equal('c:/bar.js', sortedResults[0].getResource().fsPath.replace(/\\\\/g, '/'));\n\t\tassert.equal('c:/foo.js', sortedResults[1].getResource().fsPath.replace(/\\\\/g, '/'));\n\t\tassert.equal('c:/foo.ts', sortedResults[2].getResource().fsPath.replace(/\\\\/g, '/'));\n\t});\n\n\ttest('QuickOpen Handler and Registry', () => {\n\t\tlet registry = (<IQuickOpenRegistry>Registry.as(QuickOpenExtensions.Quickopen));\n\t\tlet handler = new QuickOpenHandlerDescriptor(\n\t\t\t'test',\n\t\t\t'TestHandler',\n\t\t\t',',\n\t\t\t'Handler'\n\t\t);\n\n\t\tregistry.registerQuickOpenHandler(handler);\n\n\t\tassert(registry.getQuickOpenHandler(',') === handler);\n\n\t\tlet handlers = registry.getQuickOpenHandlers();\n\t\tassert(handlers.some((handler: QuickOpenHandlerDescriptor) => handler.prefix === ','));\n\t});\n\n\ttest('QuickOpen Action', () => {\n\t\tlet defaultAction = new QuickOpenAction('id', 'label', void 0, new TestQuickOpenService((prefix: string) => assert(!prefix)));\n\t\tlet prefixAction = new QuickOpenAction('id', 'label', ',', new TestQuickOpenService((prefix: string) => assert(!!prefix)));\n\n\t\tdefaultAction.run();\n\t\tprefixAction.run();\n\t});\n\n\ttest('QuickOpenController adds to history on editor input change and removes on dispose', () => {\n\t\tlet editorService = new TestEditorService();\n\n\t\tlet eventService = new TestEventService();\n\t\tlet storageService = new TestStorageService();\n\t\tlet contextService = new TestContextService();\n\n\t\tlet inst = createInstantiationService({ editorService: editorService });\n\n\t\tlet controller = new QuickOpenController(\n\t\t\teventService,\n\t\t\tstorageService,\n\t\t\teditorService,\n\t\t\tnull,\n\t\t\tnull,\n\t\t\tnull,\n\t\t\tcontextService,\n\t\t\tnew MockKeybindingService()\n\t\t);\n\n\t\tcontroller.create();\n\n\t\tassert.equal(0, controller.getEditorHistoryModel().getEntries().length);\n\n\t\tlet cinput1 = <EditorInput>inst.createInstance(fileInputCtor, toResource('Hello World'), 'text/plain', void 0);\n\t\tlet event = new EditorEvent(null, '', cinput1, null, Position.LEFT);\n\t\teventService.emit(EventType.EDITOR_INPUT_CHANGING, event);\n\n\t\tassert.equal(1, controller.getEditorHistoryModel().getEntries().length);\n\n\t\tcinput1.dispose();\n\n\t\tassert.equal(0, controller.getEditorHistoryModel().getEntries().length);\n\t});\n});"]}