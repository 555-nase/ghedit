{"version":3,"sources":["vs/workbench/electron-browser/update.ts"],"names":[],"mappings":"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","file":"vs/workbench/electron-browser/update.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport nls = require('vs/nls');\nimport severity from 'vs/base/common/severity';\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport {Action} from 'vs/base/common/actions';\nimport {ipcRenderer as ipc, shell} from 'electron';\nimport {IMessageService} from 'vs/platform/message/common/message';\nimport {IWorkspaceContextService} from 'vs/workbench/services/workspace/common/contextService';\nimport {IRequestService} from 'vs/platform/request/common/request';\n\ninterface IUpdate {\n\treleaseNotes: string;\n\tversion: string;\n\tdate: string;\n}\n\nconst ApplyUpdateAction = new Action(\n\t'update.applyUpdate',\n\tnls.localize('updateNow', \"Update Now\"),\n\tnull,\n\ttrue,\n\t() => { ipc.send('vscode:update-apply'); return TPromise.as(true); }\n);\n\nconst NotNowAction = new Action(\n\t'update.later',\n\tnls.localize('later', \"Later\"),\n\tnull,\n\ttrue,\n\t() => TPromise.as(true)\n);\n\nexport const ShowReleaseNotesAction = (releaseNotesUrl: string, returnValue = false) => new Action(\n\t'update.showReleaseNotes',\n\tnls.localize('releaseNotes', \"Release Notes\"),\n\tnull,\n\ttrue,\n\t() => { shell.openExternal(releaseNotesUrl); return TPromise.as(returnValue); }\n);\n\nexport const DownloadAction = (url: string) => new Action(\n\t'update.download',\n\tnls.localize('downloadNow', \"Download Now\"),\n\tnull,\n\ttrue,\n\t() => { shell.openExternal(url); return TPromise.as(true); }\n);\n\nexport class Update {\n\n\tconstructor(\n\t\t@IWorkspaceContextService private contextService : IWorkspaceContextService,\n\t\t@IMessageService private messageService : IMessageService,\n\t\t@IRequestService private requestService : IRequestService\n\t) {\n\t\tconst env = this.contextService.getConfiguration().env;\n\n\t\tipc.on('vscode:update-downloaded', (event, update: IUpdate) => {\n\t\t\tthis.messageService.show(severity.Info, {\n\t\t\t\tmessage: nls.localize('updateAvailable', \"{0} will be updated after it restarts.\", env.appName),\n\t\t\t\tactions: [ShowReleaseNotesAction(env.releaseNotesUrl), NotNowAction, ApplyUpdateAction]\n\t\t\t});\n\t\t});\n\n\t\tipc.on('vscode:update-available', (event, url: string) => {\n\t\t\tthis.messageService.show(severity.Info, {\n\t\t\t\tmessage: nls.localize('thereIsUpdateAvailable', \"There is an available update.\"),\n\t\t\t\tactions: [ShowReleaseNotesAction(env.releaseNotesUrl), NotNowAction, DownloadAction(url)]\n\t\t\t});\n\t\t});\n\n\t\tipc.on('vscode:update-not-available', () => {\n\t\t\tthis.messageService.show(severity.Info, nls.localize('noUpdatesAvailable', \"There are no updates currently available.\"));\n\t\t});\n\t}\n}\n"]}