{"version":3,"sources":["vs/workbench/browser/actions/configureLocale.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;IAAA;;;oGAGgG;IAChG,YAAY,CAAC;IAkBb;QAAoC,yCAAM;QAazC,+BAAY,EAAE,EAAE,KAAK,EACE,WAAyB,EACb,cAAwC,EACzC,aAAsC;YAEvE,kBAAM,EAAE,EAAE,KAAK,CAAC,CAAC;YAJK,gBAAW,GAAX,WAAW,CAAc;YACb,mBAAc,GAAd,cAAc,CAA0B;YACzC,kBAAa,GAAb,aAAa,CAAyB;QAGxE,CAAC;QAEM,mCAAG,GAAV,UAAW,KAAW;YAAtB,iBAiBC;YAhBA,IAAI,IAAI,GAAG,aAAG,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,gBAAgB,EAAE,CAAC,GAAG,CAAC,eAAe,EAAE,aAAa,CAAC,CAAC,CAAC;YAC1G,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,UAAC,KAAK;gBAC1D,MAAM,CAAC,KAAI,CAAC,WAAW,CAAC,UAAU,CAAC,IAAI,EAAE,qBAAqB,CAAC,eAAe,CAAC,CAAC;YACjF,CAAC,CAAC,CAAC,IAAI,CAAC,UAAC,IAAI;gBACZ,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;oBACX,MAAM,CAAC;gBACR,CAAC;gBACD,MAAM,CAAC,KAAI,CAAC,aAAa,CAAC,UAAU,CAAC;oBACpC,QAAQ,EAAE,IAAI,CAAC,QAAQ;oBACvB,OAAO,EAAE;wBACR,SAAS,EAAE,IAAI;qBACf;iBACD,CAAC,CAAC;YACJ,CAAC,EAAE,UAAC,KAAK;gBACR,MAAM,IAAI,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,qBAAqB,EAAE,+BAA+B,EAAE,MAAM,CAAC,YAAY,CAAC,IAAI,EAAE,KAAI,CAAC,cAAc,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;YAC9I,CAAC,CAAC,CAAC;QACJ,CAAC;QArCa,wBAAE,GAAG,kCAAkC,CAAC;QACxC,2BAAK,GAAG,GAAG,CAAC,QAAQ,CAAC,CAAiB,EAAE,IAAoB,CAAC,CAAC;QAE7D,qCAAe,GAAW;YACxC,GAAG;YACH,WAAQ,GAAG,CAAC,QAAQ,CAAC,CAAiB,EAAE,IAAqC,CAAC,CAAE;YAChF,WAAQ,GAAG,CAAC,QAAQ,CAAC,CAAK,EAAE,IAA4C,EAAE,+CAA+C,CAAC,CAAE;YAC5H,WAAQ,GAAG,CAAC,QAAQ,CAAC,CAAS,EAAE,IAAgD,CAAC,CAAE;YACnF,wBAAoB;YACpB,GAAG;SACH,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAGZ;uBAAC,oBAAY;uBACZ,yCAAwB;uBACxB,uCAAuB;iCAFX;QAyBf,4BAAC;IAAD,CAvCA,AAuCC,CAvCmC,gBAAM,GAuCzC;IAED,IAAI,wBAAwB,GAA6B,mBAAQ,CAAC,EAAE,CAAC,2BAAU,CAAC,gBAAgB,CAAC,CAAC;IAClG,wBAAwB,CAAC,uBAAuB,CAAC,IAAI,8BAAoB,CAAC,qBAAqB,EAAE,qBAAqB,CAAC,EAAE,EAAE,qBAAqB,CAAC,KAAK,CAAC,CAAC,CAAC","file":"vs/workbench/browser/actions/configureLocale.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport { TPromise } from 'vs/base/common/winjs.base';\nimport nls = require('vs/nls');\nimport * as Path from 'vs/base/common/paths';\nimport URI from 'vs/base/common/uri';\nimport * as Labels from 'vs/base/common/labels';\nimport { Action } from 'vs/base/common/actions';\n\nimport { Registry } from 'vs/platform/platform';\nimport { IWorkbenchActionRegistry, Extensions } from 'vs/workbench/common/actionRegistry';\nimport { IWorkbenchEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { IWorkspaceContextService } from 'vs/workbench/services/workspace/common/contextService';\nimport { IEditor } from 'vs/platform/editor/common/editor';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { SyncActionDescriptor } from 'vs/platform/actions/common/actions';\n\n\nclass ConfigureLocaleAction extends Action {\n\tpublic static ID = 'workbench.action.configureLocale';\n\tpublic static LABEL = nls.localize('configureLocale', \"Configure Language\");\n\n\tprivate static DEFAULT_CONTENT: string = [\n\t\t'{',\n\t\t`\\t// ${nls.localize('displayLanguage', 'Defines VSCode\\'s display language.')}`,\n\t\t`\\t// ${nls.localize('doc', 'See {0} for a list of supported languages.', 'http://go.microsoft.com/fwlink/?LinkId=761051')}`,\n\t\t`\\t// ${nls.localize('restart', 'Changing the value requires to restart VSCode.')}`,\n\t\t`\\t\"locale\":\"en-US\"`,\n\t\t'}'\n\t].join('\\n');\n\n\tconstructor(id, label,\n\t\t@IFileService private fileService: IFileService,\n\t\t@IWorkspaceContextService private contextService: IWorkspaceContextService,\n\t\t@IWorkbenchEditorService private editorService: IWorkbenchEditorService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\tpublic run(event?: any): TPromise<IEditor> {\n\t\tlet file = URI.file(Path.join(this.contextService.getConfiguration().env.appSettingsHome, 'locale.json'));\n\t\treturn this.fileService.resolveFile(file).then(null, (error) => {\n\t\t\treturn this.fileService.createFile(file, ConfigureLocaleAction.DEFAULT_CONTENT);\n\t\t}).then((stat) => {\n\t\t\tif (!stat) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\treturn this.editorService.openEditor({\n\t\t\t\tresource: stat.resource,\n\t\t\t\toptions: {\n\t\t\t\t\tforceOpen: true\n\t\t\t\t}\n\t\t\t});\n\t\t}, (error) => {\n\t\t\tthrow new Error(nls.localize('fail.createSettings', \"Unable to create '{0}' ({1}).\", Labels.getPathLabel(file, this.contextService), error));\n\t\t});\n\t}\n}\n\nlet workbenchActionsRegistry = <IWorkbenchActionRegistry>Registry.as(Extensions.WorkbenchActions);\nworkbenchActionsRegistry.registerWorkbenchAction(new SyncActionDescriptor(ConfigureLocaleAction, ConfigureLocaleAction.ID, ConfigureLocaleAction.LABEL));\n"]}