{"version":3,"sources":["vs/workbench/browser/parts/editor/binaryEditor.ts"],"names":[],"mappings":"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","file":"vs/workbench/browser/parts/editor/binaryEditor.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport 'vs/css!./media/binaryeditor';\nimport nls = require('vs/nls');\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport {Dimension, Builder, $} from 'vs/base/browser/builder';\nimport {ResourceViewer} from 'vs/base/browser/ui/resourceviewer/resourceViewer';\nimport {EditorModel, EditorInput, EditorOptions} from 'vs/workbench/common/editor';\nimport {BaseEditor} from 'vs/workbench/browser/parts/editor/baseEditor';\nimport {BinaryEditorModel} from 'vs/workbench/common/editor/binaryEditorModel';\nimport {IWorkbenchEditorService} from 'vs/workbench/services/editor/common/editorService';\nimport {ITelemetryService} from 'vs/platform/telemetry/common/telemetry';\n\n/*\n * This class is only intended to be subclassed and not instantiated.\n */\nexport abstract class BaseBinaryResourceEditor extends BaseEditor {\n\tprivate binaryContainer: Builder;\n\n\tconstructor(id: string, telemetryService: ITelemetryService, private _editorService: IWorkbenchEditorService) {\n\t\tsuper(id, telemetryService);\n\t}\n\n\tpublic getTitle(): string {\n\t\treturn this.getInput() ? this.getInput().getName() : nls.localize('binaryEditor', \"Binary Viewer\");\n\t}\n\n\tpublic get editorService() {\n\t\treturn this._editorService;\n\t}\n\n\tpublic createEditor(parent: Builder): void {\n\n\t\t// Container for Binary\n\t\tlet binaryContainerElement = document.createElement('div');\n\t\tbinaryContainerElement.className = 'binary-container';\n\t\tthis.binaryContainer = $(binaryContainerElement);\n\t\tthis.binaryContainer.tabindex(0); // enable focus support from the editor part (do not remove)\n\t\tparent.getHTMLElement().appendChild(this.binaryContainer.getHTMLElement());\n\t}\n\n\tpublic setInput(input: EditorInput, options: EditorOptions): TPromise<void> {\n\t\tlet oldInput = this.getInput();\n\t\tsuper.setInput(input, options);\n\n\t\t// Detect options\n\t\tlet forceOpen = options && options.forceOpen;\n\n\t\t// Same Input\n\t\tif (!forceOpen && input.matches(oldInput)) {\n\t\t\treturn TPromise.as<void>(null);\n\t\t}\n\n\t\t// Different Input (Reload)\n\t\treturn this._editorService.resolveEditorModel(input, true /* Reload */).then((resolvedModel: EditorModel) => {\n\n\t\t\t// Assert Model instance\n\t\t\tif (!(resolvedModel instanceof BinaryEditorModel)) {\n\t\t\t\treturn TPromise.wrapError<void>('Invalid editor input. Binary resource editor requires a model instance of BinaryEditorModel.');\n\t\t\t}\n\n\t\t\t// Assert that the current input is still the one we expect. This prevents a race condition when loading takes long and another input was set meanwhile\n\t\t\tif (!this.getInput() || this.getInput() !== input) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t// Render Input\n\t\t\tlet binaryResourceModel = <BinaryEditorModel>resolvedModel;\n\t\t\tResourceViewer.show(binaryResourceModel.getName(), binaryResourceModel.getResource(), this.binaryContainer);\n\n\t\t\treturn TPromise.as<void>(null);\n\t\t});\n\t}\n\n\tpublic clearInput(): void {\n\n\t\t// Empty HTML Container\n\t\t$(this.binaryContainer).empty();\n\n\t\tsuper.clearInput();\n\t}\n\n\tpublic layout(dimension: Dimension): void {\n\n\t\t// Pass on to Binary Container\n\t\tthis.binaryContainer.size(dimension.width, dimension.height);\n\t}\n\n\tpublic focus(): void {\n\t\tthis.binaryContainer.domFocus();\n\t}\n\n\tpublic dispose(): void {\n\n\t\t// Destroy Container\n\t\tthis.binaryContainer.destroy();\n\n\t\tsuper.dispose();\n\t}\n}\n\n/**\n * An implementation of editor for binary files like images or videos.\n */\nexport class BinaryResourceEditor extends BaseBinaryResourceEditor {\n\n\tpublic static ID = 'workbench.editors.binaryResourceEditor';\n\n\tconstructor(\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IWorkbenchEditorService editorService: IWorkbenchEditorService\n\t) {\n\t\tsuper(BinaryResourceEditor.ID, telemetryService, editorService);\n\t}\n}"]}