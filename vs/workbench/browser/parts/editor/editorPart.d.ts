import 'vs/css!./media/editorpart';
import 'vs/workbench/browser/parts/editor/editor.contribution';
import { TPromise } from 'vs/base/common/winjs.base';
import { Dimension, Builder } from 'vs/base/browser/builder';
import { Part } from 'vs/workbench/browser/part';
import { BaseEditor } from 'vs/workbench/browser/parts/editor/baseEditor';
import { EditorInput, EditorOptions, EditorInputEvent } from 'vs/workbench/common/editor';
import { GroupArrangement } from 'vs/workbench/services/group/common/groupService';
import { IConfigurationService } from 'vs/platform/configuration/common/configuration';
import { IEditorPart } from 'vs/workbench/services/editor/browser/editorService';
import { IPartService } from 'vs/workbench/services/part/common/partService';
import { Position, Direction } from 'vs/platform/editor/common/editor';
import { IStorageService } from 'vs/platform/storage/common/storage';
import { IEventService } from 'vs/platform/event/common/event';
import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
import { IMessageService } from 'vs/platform/message/common/message';
import { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';
import { IEditorGroupService } from 'vs/workbench/services/group/common/groupService';
import { EditorStacksModel, EditorGroup } from 'vs/workbench/common/editor/editorStacksModel';
import Event from 'vs/base/common/event';
/**
 * The editor part is the container for editors in the workbench. Based on the editor input being opened, it asks the registered
 * editor for the given input to show the contents. The editor part supports up to 3 side-by-side editors.
 */
export declare class EditorPart extends Part implements IEditorPart, IEditorGroupService {
    private messageService;
    private eventService;
    private telemetryService;
    private storageService;
    private partService;
    private configurationService;
    private instantiationService;
    _serviceBrand: any;
    private static GROUP_LEFT_LABEL;
    private static GROUP_CENTER_LABEL;
    private static GROUP_RIGHT_LABEL;
    private static EDITOR_PART_UI_STATE_STORAGE_KEY;
    private dimension;
    private sideBySideControl;
    private memento;
    private stacks;
    private previewEditors;
    private _onEditorsChanged;
    private _onEditorOpening;
    private _onEditorsMoved;
    private _onEditorOpenFail;
    private visibleEditors;
    private instantiatedEditors;
    private mapEditorInstantiationPromiseToEditor;
    private editorOpenToken;
    private pendingEditorInputsToClose;
    private pendingEditorInputCloseTimeout;
    constructor(id: string, messageService: IMessageService, eventService: IEventService, telemetryService: ITelemetryService, storageService: IStorageService, partService: IPartService, configurationService: IConfigurationService, instantiationService: IInstantiationService);
    private registerListeners();
    private onConfigurationUpdated(configuration);
    private onEditorDirty(identifier);
    private onEditorDisposed(identifier);
    onEditorsChanged: Event<void>;
    onEditorOpening: Event<EditorInputEvent>;
    onEditorsMoved: Event<void>;
    onEditorOpenFail: Event<EditorInput>;
    openEditor(input: EditorInput, options?: EditorOptions, sideBySide?: boolean): TPromise<BaseEditor>;
    openEditor(input: EditorInput, options?: EditorOptions, position?: Position, widthRatios?: number[]): TPromise<BaseEditor>;
    private doOpenEditor(position, descriptor, input, options, widthRatios);
    private doShowEditor(group, descriptor, input, options, widthRatios, monitor);
    private doCreateEditor(group, descriptor, monitor);
    private doInstantiateEditor(group, descriptor);
    private doSetInput(group, editor, input, options, monitor);
    private doHandleSetInputError(e, group, editor, input, options, monitor);
    closeEditor(position: Position, input: EditorInput): TPromise<void>;
    private doCloseEditor(group, input, focusNext?);
    private doCloseActiveEditor(group, focusNext?);
    private doCloseInactiveEditor(group, input);
    private doCloseGroup(group, focusNext?);
    private doHideEditor(position, layoutAndRochade);
    closeAllEditors(except?: Position): TPromise<void>;
    closeEditors(position: Position, except?: EditorInput, direction?: Direction): TPromise<void>;
    private doCloseEditors(group, except?, direction?);
    private handleDirty(identifiers);
    private doHandleDirty(identifier);
    getStacksModel(): EditorStacksModel;
    getActiveEditorInput(): EditorInput;
    getActiveEditor(): BaseEditor;
    getVisibleEditors(): BaseEditor[];
    moveGroup(from: EditorGroup, to: EditorGroup): void;
    moveGroup(from: Position, to: Position): void;
    moveEditor(input: EditorInput, from: EditorGroup, to: EditorGroup, index?: number): void;
    moveEditor(input: EditorInput, from: Position, to: Position, index?: number): void;
    private doMoveEditorInsideGroups(input, group, toIndex);
    private doMoveEditorAcrossGroups(input, fromGroup, to, index?);
    arrangeGroups(arrangement: GroupArrangement): void;
    createContentArea(parent: Builder): Builder;
    private onGroupFocusChanged();
    replaceEditors(editors: {
        toReplace: EditorInput;
        replaceWith: EditorInput;
        options?: EditorOptions;
    }[]): TPromise<BaseEditor[]>;
    openEditors(editors: {
        input: EditorInput;
        position: Position;
        options?: EditorOptions;
    }[]): TPromise<BaseEditor[]>;
    restoreEditors(): TPromise<BaseEditor[]>;
    private doOpenEditors(editors, activePosition?, widthRatios?);
    activateGroup(group: EditorGroup): void;
    activateGroup(position: Position): void;
    focusGroup(group: EditorGroup): void;
    focusGroup(position: Position): void;
    pinEditor(group: EditorGroup, input: EditorInput): void;
    pinEditor(position: Position, input: EditorInput): void;
    unpinEditor(group: EditorGroup, input: EditorInput): void;
    unpinEditor(position: Position, input: EditorInput): void;
    layout(dimension: Dimension): Dimension[];
    shutdown(): void;
    dispose(): void;
    private findPosition(input, options?, sideBySide?, widthRatios?);
    private findPosition(input, options?, desiredPosition?, widthRatios?);
    private startDelayedCloseEditorsFromInputDispose();
    private rochade(rochade);
    private rochade(from, to);
    private doRochade(array, from, to, empty);
    private ensureGroup(position, activate?);
    private modifyGroups(modification);
    private renameGroups();
    private hasGroup(position);
}
