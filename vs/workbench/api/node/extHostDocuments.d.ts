import * as editorCommon from 'vs/editor/common/editorCommon';
import { MirrorModel2 } from 'vs/editor/common/model/mirrorModel2';
import { IThreadService } from 'vs/workbench/services/thread/common/threadService';
import Event from 'vs/base/common/event';
import URI from 'vs/base/common/uri';
import { TPromise } from 'vs/base/common/winjs.base';
import * as vscode from 'vscode';
import { MainThreadDocumentsShape, ExtHostDocumentsShape, IModelAddedData } from './extHost.protocol';
export declare class ExtHostDocuments extends ExtHostDocumentsShape {
    private static _handlePool;
    private _onDidAddDocumentEventEmitter;
    onDidAddDocument: Event<vscode.TextDocument>;
    private _onDidRemoveDocumentEventEmitter;
    onDidRemoveDocument: Event<vscode.TextDocument>;
    private _onDidChangeDocumentEventEmitter;
    onDidChangeDocument: Event<vscode.TextDocumentChangeEvent>;
    private _onDidSaveDocumentEventEmitter;
    onDidSaveDocument: Event<vscode.TextDocument>;
    private _documentData;
    private _documentLoader;
    private _documentContentProviders;
    private _proxy;
    constructor(threadService: IThreadService);
    getAllDocumentData(): ExtHostDocumentData[];
    getDocumentData(resource: vscode.Uri): ExtHostDocumentData;
    ensureDocumentData(uri: URI): TPromise<ExtHostDocumentData>;
    registerTextDocumentContentProvider(scheme: string, provider: vscode.TextDocumentContentProvider): vscode.Disposable;
    $provideTextDocumentContent(handle: number, uri: URI): TPromise<string>;
    $acceptModelAdd(initData: IModelAddedData): void;
    $acceptModelModeChanged(strURL: string, oldModeId: string, newModeId: string): void;
    $acceptModelSaved(strURL: string): void;
    $acceptModelDirty(strURL: string): void;
    $acceptModelReverted(strURL: string): void;
    $acceptModelRemoved(strURL: string): void;
    $acceptModelChanged(strURL: string, events: editorCommon.IModelContentChangedEvent2[]): void;
    setWordDefinitionFor(modeId: string, wordDefinition: RegExp): void;
}
export declare class ExtHostDocumentData extends MirrorModel2 {
    private _proxy;
    private _languageId;
    private _isDirty;
    private _textLines;
    private _document;
    constructor(proxy: MainThreadDocumentsShape, uri: URI, lines: string[], eol: string, languageId: string, versionId: number, isDirty: boolean);
    dispose(): void;
    document: vscode.TextDocument;
    _acceptLanguageId(newLanguageId: string): void;
    _acceptIsDirty(isDirty: boolean): void;
    private _getTextInRange(_range);
    lineAt(lineOrPosition: number | vscode.Position): vscode.TextLine;
    offsetAt(position: vscode.Position): number;
    positionAt(offset: number): vscode.Position;
    validateRange(range: vscode.Range): vscode.Range;
    validatePosition(position: vscode.Position): vscode.Position;
    getWordRangeAtPosition(_position: vscode.Position): vscode.Range;
}
