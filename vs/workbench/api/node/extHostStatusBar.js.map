{"version":3,"file":"vs/workbench/api/node/extHostStatusBar.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/workbench/api/node/extHostStatusBar.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {Remotable, IThreadService} from 'vs/platform/thread/common/thread';\nimport {IStatusbarService, StatusbarAlignment as MainThreadStatusBarAlignment} from 'vs/workbench/services/statusbar/common/statusbarService';\nimport {IDisposable} from 'vs/base/common/lifecycle';\nimport {StatusBarAlignment as ExtHostStatusBarAlignment, Disposable} from './extHostTypes';\nimport {StatusBarItem, StatusBarAlignment} from 'vscode';\n\nexport class ExtHostStatusBarEntry implements StatusBarItem {\n\tprivate static ID_GEN = 0;\n\n\tprivate _id: number;\n\tprivate _alignment: number;\n\tprivate _priority: number;\n\tprivate _disposed: boolean;\n\tprivate _visible: boolean;\n\n\tprivate _text: string;\n\tprivate _tooltip: string;\n\tprivate _color: string;\n\tprivate _command: string;\n\n\tprivate _timeoutHandle: number;\n\tprivate _proxy: MainThreadStatusBar;\n\n\tconstructor(proxy: MainThreadStatusBar, alignment: ExtHostStatusBarAlignment = ExtHostStatusBarAlignment.Left, priority?: number) {\n\t\tthis._id = ExtHostStatusBarEntry.ID_GEN++;\n\t\tthis._proxy = proxy;\n\t\tthis._alignment = alignment;\n\t\tthis._priority = priority;\n\t}\n\n\tpublic get id(): number {\n\t\treturn this._id;\n\t}\n\n\tpublic get alignment(): StatusBarAlignment {\n\t\treturn this._alignment;\n\t}\n\n\tpublic get priority(): number {\n\t\treturn this._priority;\n\t}\n\n\tpublic get text(): string {\n\t\treturn this._text;\n\t}\n\n\tpublic get tooltip(): string {\n\t\treturn this._tooltip;\n\t}\n\n\tpublic get color(): string {\n\t\treturn this._color;\n\t}\n\n\tpublic get command(): string {\n\t\treturn this._command;\n\t}\n\n\tpublic set text(text: string) {\n\t\tthis._text = text;\n\t\tthis.update();\n\t}\n\n\tpublic set tooltip(tooltip: string) {\n\t\tthis._tooltip = tooltip;\n\t\tthis.update();\n\t}\n\n\tpublic set color(color: string) {\n\t\tthis._color = color;\n\t\tthis.update();\n\t}\n\n\tpublic set command(command: string) {\n\t\tthis._command = command;\n\t\tthis.update();\n\t}\n\n\tpublic show(): void {\n\t\tthis._visible = true;\n\t\tthis.update();\n\t}\n\n\tpublic hide(): void {\n\t\tthis._visible = false;\n\t\tthis._proxy.dispose(this.id);\n\t}\n\n\tprivate update(): void {\n\t\tif (this._disposed || !this._visible) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this._timeoutHandle) {\n\t\t\tclearTimeout(this._timeoutHandle);\n\t\t}\n\n\t\t// Defer the update so that multiple changes to setters dont cause a redraw each\n\t\tthis._timeoutHandle = setTimeout(() => {\n\t\t\tthis._timeoutHandle = null;\n\n\t\t\t// Set to status bar\n\t\t\tthis._proxy.setEntry(this.id, this.text, this.tooltip, this.command, this.color,\n\t\t\t\tthis._alignment === ExtHostStatusBarAlignment.Left ? MainThreadStatusBarAlignment.LEFT : MainThreadStatusBarAlignment.RIGHT,\n\t\t\t\tthis._priority);\n\t\t}, 0);\n\t}\n\n\tpublic dispose(): void {\n\t\tthis.hide();\n\t\tthis._disposed = true;\n\t}\n}\n\nclass StatusBarMessage {\n\n\tprivate _item: StatusBarItem;\n\tprivate _messages: { message: string }[] = [];\n\n\tconstructor(statusBar: ExtHostStatusBar) {\n\t\tthis._item = statusBar.createStatusBarEntry(ExtHostStatusBarAlignment.Left, Number.MIN_VALUE);\n\t}\n\n\tdispose() {\n\t\tthis._messages.length = 0;\n\t\tthis._item.dispose();\n\t}\n\n\tsetMessage(message: string): Disposable {\n\t\tconst data: { message: string } = { message }; // use object to not confuse equal strings\n\t\tthis._messages.unshift(data);\n\t\tthis._update();\n\n\t\treturn new Disposable(() => {\n\t\t\tlet idx = this._messages.indexOf(data);\n\t\t\tif (idx >= 0) {\n\t\t\t\tthis._messages.splice(idx, 1);\n\t\t\t\tthis._update();\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate _update() {\n\t\tif (this._messages.length > 0) {\n\t\t\tthis._item.text = this._messages[0].message;\n\t\t\tthis._item.show();\n\t\t} else {\n\t\t\tthis._item.hide();\n\t\t}\n\t}\n}\n\nexport class ExtHostStatusBar {\n\n\tprivate _proxy: MainThreadStatusBar;\n\tprivate _statusMessage: StatusBarMessage;\n\n\tconstructor( @IThreadService threadService: IThreadService) {\n\t\tthis._proxy = threadService.getRemotable(MainThreadStatusBar);\n\t\tthis._statusMessage = new StatusBarMessage(this);\n\t}\n\n\tcreateStatusBarEntry(alignment?: ExtHostStatusBarAlignment, priority?: number): StatusBarItem {\n\t\treturn new ExtHostStatusBarEntry(this._proxy, alignment, priority);\n\t}\n\n\tsetStatusBarMessage(text: string, timeoutOrThenable?: number | Thenable<any>): Disposable {\n\n\t\tlet d = this._statusMessage.setMessage(text);\n\t\tlet handle: number;\n\n\t\tif (typeof timeoutOrThenable === 'number') {\n\t\t\thandle = setTimeout(() => d.dispose(), timeoutOrThenable);\n\t\t} else if (typeof timeoutOrThenable !== 'undefined') {\n\t\t\ttimeoutOrThenable.then(() => d.dispose(), () => d.dispose());\n\t\t}\n\n\t\treturn new Disposable(() => {\n\t\t\td.dispose();\n\t\t\tclearTimeout(handle);\n\t\t});\n\t}\n}\n\n@Remotable.MainContext('MainThreadStatusBar')\nexport class MainThreadStatusBar {\n\tprivate mapIdToDisposable: { [id: number]: IDisposable };\n\n\tconstructor(\n\t\t@IStatusbarService private statusbarService: IStatusbarService\n\t) {\n\t\tthis.mapIdToDisposable = Object.create(null);\n\t}\n\n\tsetEntry(id: number, text: string, tooltip: string, command: string, color: string, alignment: MainThreadStatusBarAlignment, priority: number): void {\n\n\t\t// Dispose any old\n\t\tthis.dispose(id);\n\n\t\t// Add new\n\t\tlet disposeable = this.statusbarService.addEntry({ text, tooltip, command, color }, alignment, priority);\n\t\tthis.mapIdToDisposable[id] = disposeable;\n\t}\n\n\tdispose(id: number) {\n\t\tlet disposeable = this.mapIdToDisposable[id];\n\t\tif (disposeable) {\n\t\t\tdisposeable.dispose();\n\t\t}\n\n\t\tdelete this.mapIdToDisposable[id];\n\t}\n}"]}