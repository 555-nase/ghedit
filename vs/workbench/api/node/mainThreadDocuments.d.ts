import { IModelService } from 'vs/editor/common/services/modelService';
import { IThreadService } from 'vs/workbench/services/thread/common/threadService';
import URI from 'vs/base/common/uri';
import { IEventService } from 'vs/platform/event/common/event';
import { IWorkbenchEditorService } from 'vs/workbench/services/editor/common/editorService';
import { ITextFileService } from 'vs/workbench/parts/files/common/files';
import { TPromise } from 'vs/base/common/winjs.base';
import { IFileService } from 'vs/platform/files/common/files';
import { IModeService } from 'vs/editor/common/services/modeService';
import { IUntitledEditorService } from 'vs/workbench/services/untitled/common/untitledEditorService';
import { MainThreadDocumentsShape } from './extHost.protocol';
export declare class MainThreadDocuments extends MainThreadDocumentsShape {
    private _modelService;
    private _modeService;
    private _textFileService;
    private _editorService;
    private _fileService;
    private _untitledEditorService;
    private _toDispose;
    private _modelToDisposeMap;
    private _proxy;
    private _modelIsSynced;
    private _resourceContentProvider;
    private _virtualDocumentSet;
    constructor(threadService: IThreadService, modelService: IModelService, modeService: IModeService, eventService: IEventService, textFileService: ITextFileService, editorService: IWorkbenchEditorService, fileService: IFileService, untitledEditorService: IUntitledEditorService);
    dispose(): void;
    private _shouldHandleFileEvent(e);
    private _onModelAdded(model);
    private _onModelModeChanged(event);
    private _onModelRemoved(model);
    private _onModelEvents(modelUrl, events);
    $trySaveDocument(uri: URI): TPromise<boolean>;
    $tryOpenDocument(uri: URI): TPromise<any>;
    private _handleAsResourceInput(uri);
    private _handleUnititledScheme(uri);
    $registerTextContentProvider(handle: number, scheme: string): void;
    $unregisterTextContentProvider(handle: number): void;
    $onVirtualDocumentChange(uri: URI, value: string): void;
    private _runDocumentCleanup();
}
