{"version":3,"file":"vs/workbench/parts/feedback/electron-browser/feedbackStatusbarItem.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/workbench/parts/feedback/electron-browser/feedbackStatusbarItem.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;IAEhG,YAAY,CAAC;IASb;QAAA;QA8BA,CAAC;QAxBQ,wDAAuB,GAA/B;YACC,MAAM,CAAC,sBAAsB,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAClD,CAAC;QAEM,+CAAc,GAArB,UAAsB,QAAmB;YACxC,IAAI,WAAW,GAAG,OAAI,QAAQ,CAAC,SAAS,KAAK,CAAC,GAAG,cAAY,IAAI,CAAC,uBAAuB,EAAE,MAAG,GAAG,IAAI,+DAAyD,QAAQ,CAAC,QAAQ,8BAAyB,sBAAsB,CAAC,QAAU,CAAC;YAC1O,IAAI,GAAG,GAAG,sBAAsB,CAAC,WAAW,GAAG,WAAW,CAAC;YAC3D,gBAAK,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;QACzB,CAAC;QAEM,kDAAiB,GAAxB,UAAyB,SAAiB;YACzC,IAAI,MAAM,GAAY,CAAC,CAAC;YACxB,EAAE,CAAC,CAAC,SAAS,KAAK,CAAC,CAAC,CACpB,CAAC;gBACA,sBAAsB,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAA,OAAO;oBAC9C,MAAM,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC;gBAC9B,CAAC,CAAC,CAAC;YACJ,CAAC;YAED,EAAE,CAAC,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACrC,MAAM,IAAI,YAAS,sBAAsB,CAAC,QAAQ,CAAE,CAAC,MAAM,CAAC;YAC7D,CAAC;YACD,MAAM,CAAC,GAAG,GAAG,MAAM,CAAC;QACrB,CAAC;QA3Bc,kCAAW,GAAW,kCAAkC,CAAC;QACzD,+BAAQ,GAAW,MAAM,CAAC;QAC1B,+BAAQ,GAAc,CAAC,aAAa,CAAC,CAAC;QA0BtD,6BAAC;IAAD,CAAC,AA9BD,IA8BC;IAED;QAEC,+BACgC,oBAA2C,EAC7C,kBAAuC;YADrC,yBAAoB,GAApB,oBAAoB,CAAuB;YAC7C,uBAAkB,GAAlB,kBAAkB,CAAqB;QAErE,CAAC;QAEM,sCAAM,GAAb,UAAc,OAAoB;YACjC,MAAM,CAAC,IAAI,CAAC,oBAAoB,CAAC,cAAc,CAAC,2BAAgB,EAAE,OAAO,EAAE;gBAC1E,mBAAmB,EAAE,IAAI,CAAC,kBAAkB;gBAC5C,eAAe,EAAE,IAAI,CAAC,oBAAoB,CAAC,cAAc,CAAC,sBAAsB,CAAC;aACjF,CAAC,CAAC;QACJ,CAAC;QAVA;uBAAC,qCAAqB;uBACrB,iCAAmB;iCADE;QAWxB,4BAAC;IAAD,CAAC,AAdD,IAcC;IAdY,6BAAqB,wBAcjC,CAAA","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport {IDisposable} from 'vs/base/common/lifecycle';\nimport {IStatusbarItem} from 'vs/workbench/browser/parts/statusbar/statusbar';\nimport {FeedbackDropdown, IFeedback, IFeedbackService} from 'vs/workbench/parts/feedback/browser/feedback';\nimport {IContextViewService} from 'vs/platform/contextview/browser/contextView';\nimport {IInstantiationService} from 'vs/platform/instantiation/common/instantiation';\nimport {shell} from 'electron';\n\nclass TwitterFeedbackService implements IFeedbackService {\n\n\tprivate static TWITTER_URL: string = 'https://twitter.com/intent/tweet';\n\tprivate static VIA_NAME: string = 'code';\n\tprivate static HASHTAGS: string[]  = ['HappyCoding'];\n\n\tprivate combineHashTagsAsString() : string {\n\t\treturn TwitterFeedbackService.HASHTAGS.join(',');\n\t}\n\n\tpublic submitFeedback(feedback: IFeedback): void {\n\t\tvar queryString = `?${feedback.sentiment === 1 ? `hashtags=${this.combineHashTagsAsString()}&` : null}ref_src=twsrc%5Etfw&related=twitterapi%2Ctwitter&text=${feedback.feedback}&tw_p=tweetbutton&via=${TwitterFeedbackService.VIA_NAME}`;\n\t\tvar url = TwitterFeedbackService.TWITTER_URL + queryString;\n\t\tshell.openExternal(url);\n\t}\n\n\tpublic getCharacterLimit(sentiment: number): number {\n\t\tlet length : number = 0;\n\t\tif (sentiment === 1)\n\t\t{\n\t\t\tTwitterFeedbackService.HASHTAGS.forEach(element => {\n\t\t\t\tlength += element.length + 2;\n\t\t\t});\n\t\t}\n\n\t\tif (TwitterFeedbackService.VIA_NAME) {\n\t\t\tlength += ` via @${TwitterFeedbackService.VIA_NAME}`.length;\n\t\t}\n\t\treturn 140 - length;\n\t}\n}\n\nexport class FeedbackStatusbarItem implements IStatusbarItem {\n\n\tconstructor(\n\t\t@IInstantiationService private instantiationService: IInstantiationService,\n\t\t@IContextViewService private contextViewService: IContextViewService\n\t) {\n\t}\n\n\tpublic render(element: HTMLElement): IDisposable {\n\t\treturn this.instantiationService.createInstance(FeedbackDropdown, element, {\n\t\t\tcontextViewProvider: this.contextViewService,\n\t\t\tfeedbackService: this.instantiationService.createInstance(TwitterFeedbackService)\n\t\t});\n\t}\n}"]}