{"version":3,"file":"vs/workbench/parts/git/electron-browser/gitApp.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/workbench/parts/git/electron-browser/gitApp.ts"],"names":[],"mappings":";;;;;;IAAA;;;oGAGgG;IAChG,YAAY,CAAC;IAab;QAA+B,oCAAoB;QAElD,0BAAY,OAAe,EAAE,aAAqB,EAAE,eAAuB,EAAE,OAAe,EAAE,OAAe;YAC5G,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;gBACd,kBAAM,qBAAQ,CAAC,EAAE,CAAC,IAAI,6BAAa,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC7C,CAAC;YAAC,IAAI,CAAC,CAAC;gBACP,IAAM,WAAW,GAAG,aAAG,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,sCAAsC,CAAC,CAAC,CAAC,MAAM,CAAC;gBAC5F,IAAM,aAAa,GAAO,aAAG,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC,MAAM,QAAM,CAAC;gBAC7E,aAAa,GAAG,gBAAS,CAAC,aAAa,CAAC,CAAC;gBAEzC,IAAM,GAAG,GAAG,OAAO,CAAC,MAAM,CAAC,EAAE,EAAE,OAAO,CAAC,GAAG,EAAE;oBAC3C,WAAW,EAAE,WAAI,CAAC,WAAW,EAAE,YAAY,CAAC;oBAC5C,4BAA4B,EAAE,aAAa;oBAC3C,uBAAuB,EAAE,OAAO;oBAChC,4BAA4B,EAAE,8CAA8C;iBAC5E,CAAC,CAAC;gBAEH,IAAM,KAAG,GAAG,IAAI,MAAM,CAAC,GAAG,CAAC;oBAC1B,SAAA,OAAO,EAAE,SAAA,OAAO;oBAChB,OAAO,EAAE,WAAM,EAAE;oBACjB,eAAe,EAAE,eAAe;oBAChC,GAAG,EAAE,GAAG;iBACR,CAAC,CAAC;gBAEH,IAAM,IAAI,GAAG,KAAG,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;gBACrC,IAAM,OAAO,GAAG,IAAI,CAAC,OAAO,EAAE;qBAC5B,IAAI,CAAS,IAAI,EAAE,UAAC,GAAoB;oBACxC,EAAE,CAAC,CAAC,GAAG,YAAY,MAAM,CAAC,QAAQ,IAAI,GAAG,CAAC,YAAY,KAAK,mBAAa,CAAC,iBAAiB,CAAC,CAAC,CAAC;wBAC5F,MAAM,CAAC,aAAa,CAAC;oBACtB,CAAC;oBAED,MAAM,CAAC,qBAAQ,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;gBAChC,CAAC,CAAC;qBACD,IAAI,CAAC,UAAA,IAAI,IAAI,OAAA,cAAQ,CAAC,IAAI,CAAC,EAAd,CAAc,CAAC;qBAC5B,IAAI,CAAC,UAAA,IAAI,IAAI,OAAA,KAAG,CAAC,IAAI,CAAC,IAAI,CAAC,EAAd,CAAc,CAAC;qBAC5B,IAAI,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,6BAAa,CAAC,IAAI,CAAC,EAAvB,CAAuB,CAAC,CAAC;gBAExC,kBAAM,OAAO,CAAC,CAAC;YAChB,CAAC;QACF,CAAC;QACF,uBAAC;IAAD,CAAC,AAxCD,CAA+B,oCAAoB,GAwClD;IAED,IAAM,MAAM,GAAG,IAAI,mBAAM,EAAE,CAAC;IAC5B,MAAM,CAAC,eAAe,CAAC,YAAY,EAAE,IAAI,gBAAgB,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport { TPromise } from 'vs/base/common/winjs.base';\nimport { Server } from 'vs/base/node/service.cp';\nimport objects = require('vs/base/common/objects');\nimport uri from 'vs/base/common/uri';\nimport { GitErrorCodes } from 'vs/workbench/parts/git/common/git';\nimport gitlib = require('vs/workbench/parts/git/node/git.lib');\nimport { RawGitService, DelayedRawGitService } from 'vs/workbench/parts/git/node/rawGitService';\nimport { join, normalize } from 'path';\nimport { tmpdir } from 'os';\nimport { realpath } from 'vs/base/node/pfs';\n\nclass IPCRawGitService extends DelayedRawGitService {\n\n\tconstructor(gitPath: string, workspaceRoot: string, defaultEncoding: string, exePath: string, version: string) {\n\t\tif (!gitPath) {\n\t\t\tsuper(TPromise.as(new RawGitService(null)));\n\t\t} else {\n\t\t\tconst gitRootPath = uri.parse(require.toUrl('vs/workbench/parts/git/electron-main')).fsPath;\n\t\t\tconst bootstrapPath = `${ uri.parse(require.toUrl('bootstrap')).fsPath }.js`;\n\t\t\tworkspaceRoot = normalize(workspaceRoot);\n\n\t\t\tconst env = objects.assign({}, process.env, {\n\t\t\t\tGIT_ASKPASS: join(gitRootPath, 'askpass.sh'),\n\t\t\t\tVSCODE_GIT_ASKPASS_BOOTSTRAP: bootstrapPath,\n\t\t\t\tVSCODE_GIT_ASKPASS_NODE: exePath,\n\t\t\t\tVSCODE_GIT_ASKPASS_MODULE_ID: 'vs/workbench/parts/git/electron-main/askpass'\n\t\t\t});\n\n\t\t\tconst git = new gitlib.Git({\n\t\t\t\tgitPath, version,\n\t\t\t\ttmpPath: tmpdir(),\n\t\t\t\tdefaultEncoding: defaultEncoding,\n\t\t\t\tenv: env\n\t\t\t});\n\n\t\t\tconst repo = git.open(workspaceRoot);\n\t\t\tconst promise = repo.getRoot()\n\t\t\t\t.then<string>(null, (err: gitlib.GitError) => {\n\t\t\t\t\tif (err instanceof gitlib.GitError && err.gitErrorCode === GitErrorCodes.NotAGitRepository) {\n\t\t\t\t\t\treturn workspaceRoot;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn TPromise.wrapError(err);\n\t\t\t\t})\n\t\t\t\t.then(root => realpath(root))\n\t\t\t\t.then(root => git.open(root))\n\t\t\t\t.then(repo => new RawGitService(repo));\n\n\t\t\tsuper(promise);\n\t\t}\n\t}\n}\n\nconst server = new Server();\nserver.registerService('GitService', new IPCRawGitService(process.argv[2], process.argv[3], process.argv[4], process.argv[5], process.argv[6]));"]}