{"version":3,"file":"vs/workbench/parts/git/electron-browser/electronGitService.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/workbench/parts/git/electron-browser/electronGitService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { TPromise } from 'vs/base/common/winjs.base';\nimport { RawServiceState } from 'vs/workbench/parts/git/common/git';\nimport { NoOpGitService } from 'vs/workbench/parts/git/common/noopGitService';\nimport { GitService } from 'vs/workbench/parts/git/browser/gitServices';\nimport { ILifecycleService } from 'vs/platform/lifecycle/common/lifecycle';\nimport { IOutputService } from 'vs/workbench/parts/output/common/output';\nimport { IWorkbenchEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IEventService } from 'vs/platform/event/common/event';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { IMessageService } from 'vs/platform/message/common/message';\nimport { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';\nimport { Client } from 'vs/base/node/service.cp';\nimport { RawGitService, DelayedRawGitService } from 'vs/workbench/parts/git/node/rawGitService';\nimport URI from 'vs/base/common/uri';\nimport { spawn, exec } from 'child_process';\nimport { join } from 'path';\nimport { remote } from 'electron';\nimport { IStorageService } from 'vs/platform/storage/common/storage';\n\ninterface IGit {\n\tpath: string;\n\tversion: string;\n}\n\nfunction parseVersion(raw: string): string {\n\treturn raw.replace(/^git version /, '');\n}\n\nfunction findSpecificGit(path: string): TPromise<IGit> {\n\treturn new TPromise<IGit>((c, e) => {\n\t\tconst buffers: Buffer[] = [];\n\t\tconst child = spawn(path, ['--version']);\n\t\tchild.stdout.on('data', b => buffers.push(b));\n\t\tchild.on('error', e);\n\t\tchild.on('exit', code => code ? e(new Error('Not found')) : c({ path, version: parseVersion(Buffer.concat(buffers).toString('utf8').trim()) }));\n\t});\n}\n\nfunction findGitDarwin(): TPromise<IGit> {\n\treturn new TPromise<IGit>((c, e) => {\n\t\texec('which git', (err, gitPathBuffer) => {\n\t\t\tif (err) {\n\t\t\t\treturn e('git not found');\n\t\t\t}\n\n\t\t\tconst path = gitPathBuffer.toString().replace(/^\\s+|\\s+$/g, '');\n\n\t\t\tfunction getVersion(path: string) {\n\t\t\t\t// make sure git executes\n\t\t\t\texec('git --version', (err, stdout) => {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\treturn e('git not found');\n\t\t\t\t\t}\n\n\t\t\t\t\treturn c({ path, version: parseVersion(stdout.toString('utf8').trim()) });\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (path !== '/usr/bin/git')\t{\n\t\t\t\treturn getVersion(path);\n\t\t\t}\n\n\t\t\t// must check if XCode is installed\n\t\t\texec('xcode-select -p', (err: any) => {\n\t\t\t\tif (err && err.code === 2) {\n\t\t\t\t\t// git is not installed, and launching /usr/bin/git\n\t\t\t\t\t// will prompt the user to install it\n\n\t\t\t\t\treturn e('git not found');\n\t\t\t\t}\n\n\t\t\t\tgetVersion(path);\n\t\t\t});\n\t\t});\n\t});\n}\n\nfunction findSystemGitWin32(base: string): TPromise<IGit> {\n\tif (!base) {\n\t\treturn TPromise.wrapError('Not found');\n\t}\n\n\treturn findSpecificGit(join(base, 'Git', 'cmd', 'git.exe'));\n}\n\nfunction findGitWin32(): TPromise<IGit> {\n\treturn findSystemGitWin32(process.env['ProgramW6432'])\n\t\t.then(null, () => findSystemGitWin32(process.env['ProgramFiles(x86)']))\n\t\t.then(null, () => findSystemGitWin32(process.env['ProgramFiles']))\n\t\t.then(null, () => findSpecificGit('git'));\n}\n\nfunction findGit(hint: string): TPromise<IGit> {\n\tvar first = hint ? findSpecificGit(hint) : TPromise.wrapError(null);\n\n\treturn first.then(null, () => {\n\t\tswitch (process.platform) {\n\t\t\tcase 'darwin': return findGitDarwin();\n\t\t\tcase 'win32': return findGitWin32();\n\t\t\tdefault: return findSpecificGit('git');\n\t\t}\n\t});\n}\n\nclass UnavailableRawGitService extends RawGitService {\n\tconstructor() {\n\t\tsuper(null);\n\t}\n}\n\nclass DisabledRawGitService extends RawGitService {\n\tconstructor() {\n\t\tsuper(null);\n\t}\n\n\tpublic serviceState(): TPromise<RawServiceState> {\n\t\treturn TPromise.as<RawServiceState>(RawServiceState.Disabled);\n\t}\n}\n\nfunction createNativeRawGitService(workspaceRoot: string, path: string, defaultEncoding: string): TPromise<RawGitService> {\n\treturn findGit(path).then(({ path, version }) => {\n\t\tconst client = new Client(\n\t\t\tURI.parse(require.toUrl('bootstrap')).fsPath,\n\t\t\t{\n\t\t\t\tserverName: 'Git',\n\t\t\t\ttimeout: 1000 * 60,\n\t\t\t\targs: [path, workspaceRoot, defaultEncoding, remote.process.execPath, version],\n\t\t\t\tenv: {\n\t\t\t\t\tATOM_SHELL_INTERNAL_RUN_AS_NODE: 1,\n\t\t\t\t\tAMD_ENTRYPOINT: 'vs/workbench/parts/git/electron-browser/gitApp'\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\n\t\treturn client.getService('GitService', RawGitService);\n\t}, () => new UnavailableRawGitService());\n}\n\nclass ElectronRawGitService extends DelayedRawGitService {\n\tconstructor(workspaceRoot: string, @IConfigurationService configurationService: IConfigurationService) {\n\t\tsuper(TPromise.as(configurationService.getConfiguration<any>()).then(conf => {\n\t\t\tvar enabled = conf.git ? conf.git.enabled : true;\n\n\t\t\tif (!enabled) {\n\t\t\t\treturn TPromise.as(new DisabledRawGitService());\n\t\t\t}\n\n\t\t\tvar gitPath = (conf.git && conf.git.path) || null;\n\t\t\tvar encoding = (conf.files && conf.files.encoding) || 'utf8';\n\n\t\t\treturn createNativeRawGitService(workspaceRoot, gitPath, encoding);\n\t\t}));\n\t}\n}\n\nexport class ElectronGitService extends GitService {\n\tconstructor(\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IEventService eventService: IEventService,\n\t\t@IMessageService messageService: IMessageService,\n\t\t@IWorkbenchEditorService editorService: IWorkbenchEditorService,\n\t\t@IOutputService outputService: IOutputService,\n\t\t@IWorkspaceContextService contextService: IWorkspaceContextService,\n\t\t@ILifecycleService lifecycleService: ILifecycleService,\n\t\t@IStorageService storageService: IStorageService\n\t) {\n\t\tlet workspace = contextService.getWorkspace();\n\t\tlet raw = !workspace\n\t\t\t? new NoOpGitService()\n\t\t\t: instantiationService.createInstance(ElectronRawGitService, workspace.resource.fsPath);\n\n\t\tsuper(raw, instantiationService, eventService, messageService, editorService, outputService, contextService, lifecycleService, storageService);\n\t}\n}\n"]}