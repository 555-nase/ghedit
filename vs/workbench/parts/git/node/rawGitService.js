define(["require","exports","path","vs/base/common/winjs.base","vs/base/node/mime","vs/base/node/pfs","vs/workbench/parts/git/node/git.lib","vs/workbench/parts/git/common/git","vs/base/common/event"],function(t,n,r,e,o,u,i,s,p){/*---------------------------------------------------------------------------------------------
     *  Copyright (c) Microsoft Corporation. All rights reserved.
     *  Licensed under the MIT License. See License.txt in the project root for license information.
     *--------------------------------------------------------------------------------------------*/
"use strict";var c=function(){function t(t){var n=this;this.repo=t;var r;this._onOutput=new p.Emitter({onFirstListenerAdd:function(){r=n.repo.onOutput(function(t){return n._onOutput.fire(t)})},onLastListenerRemove:function(){r(),r=null}})}return Object.defineProperty(t.prototype,"onOutput",{get:function(){return this._onOutput.event},enumerable:!0,configurable:!0}),t.prototype.getVersion=function(){return this.repo?e.TPromise.as(this.repo.version):e.TPromise.as(null)},t.prototype.getRepositoryRoot=function(){return this._repositoryRoot||(this._repositoryRoot=u.realpath(this.repo.path))},t.prototype.serviceState=function(){return e.TPromise.as(this.repo?s.RawServiceState.OK:s.RawServiceState.GitNotFound)},t.prototype.statusCount=function(){return this.repo?this.status().then(function(t){return t?t.status.length:0}):e.TPromise.as(0)},t.prototype.status=function(){var t=this;return this.repo.getStatus().then(function(n){return t.repo.getHEAD().then(function(n){return n.name?t.repo.getBranch(n.name).then(null,function(){return n}):n},function(){return null}).then(function(r){return e.Promise.join([t.getRepositoryRoot(),t.repo.getRefs(),t.repo.getRemotes()]).then(function(t){return{repositoryRoot:t[0],status:n,HEAD:r,refs:t[1],remotes:t[2]}})})}).then(null,function(t){return t.gitErrorCode===s.GitErrorCodes.BadConfigFile?e.Promise.wrapError(t):t.gitErrorCode===s.GitErrorCodes.NotAtRepositoryRoot?e.Promise.wrapError(t):null})},t.prototype.init=function(){var t=this;return this.repo.init().then(function(){return t.status()})},t.prototype.add=function(t){var n=this;return this.repo.add(t).then(function(){return n.status()})},t.prototype.stage=function(t,n){var r=this;return this.repo.stage(t,n).then(function(){return r.status()})},t.prototype.branch=function(t,n){var r=this;return this.repo.branch(t,n).then(function(){return r.status()})},t.prototype.checkout=function(t,n){var r=this;return this.repo.checkout(t,n).then(function(){return r.status()})},t.prototype.clean=function(t){var n=this;return this.repo.clean(t).then(function(){return n.status()})},t.prototype.undo=function(){var t=this;return this.repo.undo().then(function(){return t.status()})},t.prototype.reset=function(t,n){var r=this;return this.repo.reset(t,n).then(function(){return r.status()})},t.prototype.revertFiles=function(t,n){var r=this;return this.repo.revertFiles(t,n).then(function(){return r.status()})},t.prototype.fetch=function(){var t=this;return this.repo.fetch().then(null,function(t){return t.gitErrorCode===s.GitErrorCodes.NoRemoteRepositorySpecified?e.TPromise.as(null):e.Promise.wrapError(t)}).then(function(){return t.status()})},t.prototype.pull=function(t){var n=this;return this.repo.pull(t).then(function(){return n.status()})},t.prototype.push=function(t,n,r){var e=this;return this.repo.push(t,n,r).then(function(){return e.status()})},t.prototype.sync=function(){var t=this;return this.repo.sync().then(function(){return t.status()})},t.prototype.commit=function(t,n,r){var o=this,u=e.TPromise.as(null);return r&&(u=this.repo.add(null)),u.then(function(){return o.repo.commit(t,r,n)}).then(function(){return o.status()})},t.prototype.detectMimetypes=function(t,n){var i=this;return u.exists(r.join(this.repo.path,t)).then(function(u){if(u)return new e.TPromise(function(n,e){o.detectMimesFromFile(r.join(i.repo.path,t),function(t,r){t?e(t):n(r.mimes)})});var s=i.repo.show(n+":"+t);return new e.TPromise(function(n,r){o.detectMimesFromStream(s.stdout,t,function(t,e){t?r(t):n(e.mimes)})})})},t.prototype.show=function(t,n){return n=n&&"~"!==n?n:"",this.repo.buffer(n+":"+t).then(null,function(t){return t instanceof i.GitError?"":e.TPromise.wrapError(t)})},t.prototype.getCommitTemplate=function(){return this.repo.getCommitTemplate()},t}();n.RawGitService=c;var h=function(){function t(t){this.raw=t,this.onOutput=p.fromPromise(this.raw.then(function(t){return t.onOutput}))}return t.prototype.getVersion=function(){return this.raw.then(function(t){return t.getVersion()})},t.prototype.serviceState=function(){return this.raw.then(function(t){return t.serviceState()})},t.prototype.statusCount=function(){return this.raw.then(function(t){return t.statusCount()})},t.prototype.status=function(){return this.raw.then(function(t){return t.status()})},t.prototype.init=function(){return this.raw.then(function(t){return t.init()})},t.prototype.add=function(t){return this.raw.then(function(n){return n.add(t)})},t.prototype.stage=function(t,n){return this.raw.then(function(r){return r.stage(t,n)})},t.prototype.branch=function(t,n){return this.raw.then(function(r){return r.branch(t,n)})},t.prototype.checkout=function(t,n){return this.raw.then(function(r){return r.checkout(t,n)})},t.prototype.clean=function(t){return this.raw.then(function(n){return n.clean(t)})},t.prototype.undo=function(){return this.raw.then(function(t){return t.undo()})},t.prototype.reset=function(t,n){return this.raw.then(function(r){return r.reset(t,n)})},t.prototype.revertFiles=function(t,n){return this.raw.then(function(r){return r.revertFiles(t,n)})},t.prototype.fetch=function(){return this.raw.then(function(t){return t.fetch()})},t.prototype.pull=function(t){return this.raw.then(function(n){return n.pull(t)})},t.prototype.push=function(t,n,r){return this.raw.then(function(e){return e.push(t,n,r)})},t.prototype.sync=function(){return this.raw.then(function(t){return t.sync()})},t.prototype.commit=function(t,n,r){return this.raw.then(function(e){return e.commit(t,n,r)})},t.prototype.detectMimetypes=function(t,n){return this.raw.then(function(r){return r.detectMimetypes(t,n)})},t.prototype.show=function(t,n){return this.raw.then(function(r){return r.show(t,n)})},t.prototype.getCommitTemplate=function(){return this.raw.then(function(t){return t.getCommitTemplate()})},t}();n.DelayedRawGitService=h});