/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
define(["require","exports","os","path","vs/base/common/winjs.base","vs/base/node/extfs","vs/base/node/pfs","vs/base/common/mime","vs/base/common/lifecycle","vs/base/common/objects","vs/base/common/async","vs/base/common/uuid","vs/nls","vs/base/common/arrays","vs/workbench/parts/git/common/git","vs/base/node/mime","vs/platform/files/common/files","child_process","vs/base/node/encoding"],function(t,r,e,n,o,i,s,u,a,c,p,h,d,f,m,l,g,v,y){"use strict";function E(t,r){void 0===r&&(r="utf8");var e=[],n=function(t,r,n){t.once(r,n),e.push(a.toDisposable(function(){return t.removeListener(r,n)}))},i=function(t,r,n){t.on(r,n),e.push(a.toDisposable(function(){return t.removeListener(r,n)}))};return o.TPromise.join([new o.TPromise(function(r,e){n(t,"error",e),n(t,"exit",r)}),new o.TPromise(function(e){var o=[];i(t.stdout,"data",function(t){return o.push(t)}),n(t.stdout,"close",function(){return e(y.decode(Buffer.concat(o),r))})}),new o.TPromise(function(e){var o=[];i(t.stderr,"data",function(t){return o.push(t)}),n(t.stderr,"close",function(){return e(y.decode(Buffer.concat(o),r))})})]).then(function(t){return a.dispose(e),{exitCode:t[0],stdout:t[1],stderr:t[2]}})}var C=function(){function t(t){t.error?(this.error=t.error,this.message=t.error.message):this.error=null,this.message=this.message||t.message||"Git error",this.stdout=t.stdout||null,this.stderr=t.stderr||null,this.exitCode=t.exitCode||null,this.gitErrorCode=t.gitErrorCode||null,this.gitCommand=t.gitCommand||null}return t.prototype.toString=function(){var t=this.message+" "+JSON.stringify({exitCode:this.exitCode,gitErrorCode:this.gitErrorCode,gitCommand:this.gitCommand,stdout:this.stdout,stderr:this.stderr},null,2);return this.error&&(t+=this.error.stack),t},t}();r.GitError=C;var b=function(){function t(t){this.gitPath=t.gitPath,this.version=t.version,this.tmpPath=t.tmpPath;var r=t.defaultEncoding||"utf8";this.defaultEncoding=y.encodingExists(r)?r:"utf8",this.env=t.env||{},this.outputListeners=[]}return t.prototype.run=function(t,r,e){return void 0===e&&(e={}),e=c.assign({cwd:t},e||{}),this.exec(r,e)},t.prototype.stream=function(t,r,e){return void 0===e&&(e={}),e=c.assign({cwd:t},e||{}),this.spawn(r,e)},t.prototype.open=function(t,r){return void 0===r&&(r={}),new w(this,t,this.defaultEncoding,r)},t.prototype.clone=function(t,r){var e=this;return this.exec(["clone",r,t]).then(function(){return!0},function(r){return new o.TPromise(function(r,n){i.del(t,e.tmpPath,function(t){return t?n(t):void r(!0)})})})},t.prototype.config=function(t,r){return this.exec(["config","--global",t,r])},t.prototype.exec=function(t,r){var e=this;void 0===r&&(r={});var n=this.spawn(t,r);return r.input&&n.stdin.end(r.input,"utf8"),E(n).then(function(n){if(n.exitCode){var i=null;return/Authentication failed/.test(n.stderr)?i=m.GitErrorCodes.AuthenticationFailed:/Not a git repository/.test(n.stderr)?i=m.GitErrorCodes.NotAGitRepository:/bad config file/.test(n.stderr)?i=m.GitErrorCodes.BadConfigFile:/cannot make pipe for command substitution|cannot create standard input pipe/.test(n.stderr)?i=m.GitErrorCodes.CantCreatePipe:/Repository not found/.test(n.stderr)?i=m.GitErrorCodes.RepositoryNotFound:/unable to access/.test(n.stderr)&&(i=m.GitErrorCodes.CantAccessRemote),r.log!==!1&&e.log(n.stderr),o.TPromise.wrapError(new C({message:"Failed to execute git",stdout:n.stdout,stderr:n.stderr,exitCode:n.exitCode,gitErrorCode:i,gitCommand:t[0]}))}return n})},t.prototype.spawn=function(t,r){if(void 0===r&&(r={}),!this.gitPath)throw new Error("git could not be found in the system.");return r||(r={}),r.stdio||r.input||(r.stdio=["ignore",null,null]),r.env=c.assign({},r.env||{}),r.env=c.assign(r.env,this.env),r.env=c.assign(r.env,{MONACO_REQUEST_GUID:h.v4().asHex(),VSCODE_GIT_REQUEST_ID:h.v4().asHex(),MONACO_GIT_COMMAND:t[0]}),r.log!==!1&&this.log("git "+t.join(" ")+"\n"),v.spawn(this.gitPath,t,r)},t.prototype.onOutput=function(t){var r=this;return this.outputListeners.push(t),function(){return r.outputListeners.splice(r.outputListeners.indexOf(t),1)}},t.prototype.log=function(t){this.outputListeners.forEach(function(r){return r(t)})},t}();r.Git=b;var w=function(){function t(t,r,e,n){void 0===n&&(n={}),this.git=t,this.repository=r,this.defaultEncoding=e,this.env=n}return Object.defineProperty(t.prototype,"version",{get:function(){return this.git.version},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"path",{get:function(){return this.repository},enumerable:!0,configurable:!0}),t.prototype.run=function(t,r){return void 0===r&&(r={}),r.env=c.assign({},r.env||{}),r.env=c.assign(r.env,this.env),this.git.run(this.repository,t,r)},t.prototype.stream=function(t,r){return void 0===r&&(r={}),r.env=c.assign({},r.env||{}),r.env=c.assign(r.env,this.env),this.git.stream(this.repository,t,r)},t.prototype.spawn=function(t,r){return void 0===r&&(r={}),r.env=c.assign({},r.env||{}),r.env=c.assign(r.env,this.env),this.git.spawn(t,r)},t.prototype.init=function(){return this.run(["init"])},t.prototype.config=function(t,r,e,n){var o=["config"];return t&&o.push("--"+t),o.push(r),e&&o.push(e),this.run(o,n).then(function(t){return t.stdout})},t.prototype.show=function(t){return this.stream(["show",t])},t.prototype.buffer=function(t){var r=this,e=this.show(t);return new o.Promise(function(n,o){l.detectMimesFromStream(e.stdout,null,function(e,i){e?o(e):u.isBinaryMime(i.mimes)?o({message:d.localize("fileBinaryError","File seems to be binary and cannot be opened as text"),fileOperationResult:g.FileOperationResult.FILE_IS_BINARY}):n(r.doBuffer(t))})})},t.prototype.doBuffer=function(t){var r=this.show(t);return E(r,this.defaultEncoding).then(function(t){var r=t.exitCode,e=t.stdout;return r?o.TPromise.wrapError(new C({message:"Could not buffer object.",exitCode:r})):o.TPromise.as(e)})},t.prototype.add=function(t){var r=["add","-A","--"];return t&&t.length?r.push.apply(r,t):r.push("."),this.run(r)},t.prototype.stage=function(t,r){var e=this,n=this.stream(["hash-object","--stdin","-w"],{stdio:[null,null,null]});return n.stdin.end(r,"utf8"),E(n).then(function(r){var n=r.exitCode,i=r.stdout;return n?o.TPromise.wrapError(new C({message:"Could not hash object.",exitCode:n})):e.run(["update-index","--cacheinfo","100644",i,t])})},t.prototype.checkout=function(t,r){var e=["checkout","-q"];return t&&e.push(t),r&&r.length&&(e.push("--"),e.push.apply(e,r)),this.run(e).then(null,function(t){return/Please, commit your changes or stash them/.test(t.stderr)&&(t.gitErrorCode=m.GitErrorCodes.DirtyWorkTree),o.Promise.wrapError(t)})},t.prototype.commit=function(t,r,e){var n=this,i=["commit","--quiet","--allow-empty-message","--file","-"];return r&&i.push("--all"),e&&i.push("--amend"),this.run(i,{input:t||""}).then(null,function(t){return/not possible because you have unmerged files/.test(t.stderr)?(t.gitErrorCode=m.GitErrorCodes.UnmergedChanges,o.Promise.wrapError(t)):n.run(["config","--get-all","user.name"]).then(null,function(t){return t.gitErrorCode=m.GitErrorCodes.NoUserNameConfigured,o.Promise.wrapError(t)}).then(function(){return n.run(["config","--get-all","user.email"]).then(null,function(t){return t.gitErrorCode=m.GitErrorCodes.NoUserEmailConfigured,o.Promise.wrapError(t)}).then(function(){return o.Promise.wrapError(t)})})})},t.prototype.branch=function(t,r){var e=r?["checkout","-q","-b",t]:["branch","-q",t];return this.run(e)},t.prototype.clean=function(t){var r=this,e=f.index(t,function(t){return n.dirname(t)},function(t,r){return(r||[]).concat([t])}),o=Object.keys(e).map(function(t){return e[t]}),i=o.map(function(t){return function(){return r.run(["clean","-f","-q","--"].concat(t))}});return p.sequence(i)},t.prototype.undo=function(){var t=this;return this.run(["clean","-fd"]).then(function(){return t.run(["checkout","--","."]).then(null,function(t){return/did not match any file\(s\) known to git\./.test(t.stderr)?o.TPromise.as(null):o.Promise.wrapError(t)})})},t.prototype.reset=function(t,r){void 0===r&&(r=!1);var e=["reset"];return r&&e.push("--hard"),e.push(t),this.run(e)},t.prototype.revertFiles=function(t,r){var e=this;return this.run(["branch"]).then(function(n){var i;return i=n.stdout?["reset","-q",t,"--"]:["rm","--cached","-r","--"],r&&r.length?i.push.apply(i,r):i.push("."),e.run(i).then(null,function(t){return/([^:]+: needs merge\n)+/m.test(t.stdout)?o.TPromise.as(null):o.Promise.wrapError(t)})})},t.prototype.fetch=function(){return this.run(["fetch"]).then(null,function(t){return/No remote repository specified\./.test(t.stderr)?t.gitErrorCode=m.GitErrorCodes.NoRemoteRepositorySpecified:/Could not read from remote repository/.test(t.stderr)&&(t.gitErrorCode=m.GitErrorCodes.RemoteConnectionError),o.Promise.wrapError(t)})},t.prototype.pull=function(t){var r=["pull"];return t&&r.push("-r"),this.run(r).then(null,function(t){return/^CONFLICT \([^)]+\): \b/m.test(t.stdout)?t.gitErrorCode=m.GitErrorCodes.Conflict:/Please tell me who you are\./.test(t.stderr)?t.gitErrorCode=m.GitErrorCodes.NoUserNameConfigured:/Could not read from remote repository/.test(t.stderr)?t.gitErrorCode=m.GitErrorCodes.RemoteConnectionError:/Pull is not possible because you have unmerged files|Cannot pull with rebase: You have unstaged changes|Your local changes to the following files would be overwritten|Please, commit your changes before you can merge/.test(t.stderr)&&(t.gitErrorCode=m.GitErrorCodes.DirtyWorkTree),o.Promise.wrapError(t)})},t.prototype.push=function(t,r,e){var n=["push"];return e&&e.setUpstream&&n.push("-u"),t&&n.push(t),r&&n.push(r),this.run(n).then(null,function(t){return/^error: failed to push some refs to\b/m.test(t.stderr)?t.gitErrorCode=m.GitErrorCodes.PushRejected:/Could not read from remote repository/.test(t.stderr)&&(t.gitErrorCode=m.GitErrorCodes.RemoteConnectionError),o.Promise.wrapError(t)})},t.prototype.sync=function(){var t=this;return this.pull().then(function(){return t.push()})},t.prototype.getRoot=function(){return this.run(["rev-parse","--show-toplevel"],{log:!1}).then(function(t){return t.stdout.trim()})},t.prototype.getStatus=function(){return this.run(["status","-z","-u"],{log:!1}).then(function(t){function r(){for(var t,r=s;"\0"!==(t=n.charAt(s));)s++;return n.substring(r,s++)}for(var e,n=t.stdout,i=[],s=0;s<n.length;)e={x:n.charAt(s++),y:n.charAt(s++),path:null,mimetype:null},s++,"R"===e.x&&(e.rename=r()),e.path=r(),e.mimetype=u.guessMimeTypes(e.path)[0],"/"!==e.path[e.path.length-1]&&i.push(e);return o.TPromise.as(i)})},t.prototype.getHEAD=function(){var t=this;return this.run(["symbolic-ref","--short","HEAD"],{log:!1}).then(function(t){return t.stdout?o.TPromise.as({name:t.stdout.trim(),commit:void 0,type:m.RefType.Head}):o.TPromise.wrapError(new Error("Not in a branch"))},function(r){return t.run(["rev-parse","HEAD"],{log:!1}).then(function(t){return t.stdout?o.TPromise.as({name:void 0,commit:t.stdout.trim(),type:m.RefType.Head}):o.TPromise.wrapError(new Error("Error parsing HEAD"))})})},t.prototype.getRefs=function(){return this.run(["for-each-ref","--format","%(refname) %(objectname)"],{log:!1}).then(function(t){return t.stdout.trim().split("\n").filter(function(t){return!!t}).map(function(t){var r;return(r=/^refs\/heads\/([^ ]+) ([0-9a-f]{40})$/.exec(t))?{name:r[1],commit:r[2],type:m.RefType.Head}:(r=/^refs\/remotes\/([^\/]+)\/([^ ]+) ([0-9a-f]{40})$/.exec(t))?{name:r[1]+"/"+r[2],commit:r[3],type:m.RefType.RemoteHead,remote:r[1]}:(r=/^refs\/tags\/([^ ]+) ([0-9a-f]{40})$/.exec(t))?{name:r[1],commit:r[2],type:m.RefType.Tag}:null}).filter(function(t){return!!t})})},t.prototype.getRemotes=function(){var t=/^([^\s]+)\s+([^\s]+)\s/;return this.run(["remote","--verbose"],{log:!1}).then(function(r){return r.stdout.trim().split("\n").filter(function(t){return!!t}).map(function(r){return t.exec(r)}).filter(function(t){return!!t}).map(function(t){return{name:t[1],url:t[2]}}).filter(f.uniqueFilter(function(t){return t.name}))})},t.prototype.getBranch=function(t){var r=this;return"HEAD"===t?this.getHEAD():this.run(["rev-parse",t],{log:!1}).then(function(e){if(!e.stdout)return o.TPromise.wrapError(new Error("No such branch"));var n=e.stdout.trim();return r.run(["rev-parse","--symbolic-full-name","--abbrev-ref",t+"@{u}"],{log:!1}).then(function(e){var o=e.stdout.trim();return r.run(["rev-list","--left-right",t+"..."+o],{log:!1}).then(function(r){for(var e=0,i=0,s=0;s<r.stdout.length;){switch(r.stdout.charAt(s)){case"<":e++;break;case">":i++;break;default:s++}for(;"\n"!==r.stdout.charAt(s++););}return{name:t,commit:n,upstream:o,ahead:e,behind:i}})},function(){return{name:t,commit:n}})})},t.prototype.getCommitTemplate=function(){var t=this;return this.run(["config","--get","commit.template"]).then(function(r){if(!r.stdout)return"";var o=e.homedir(),i=r.stdout.trim().replace(/^~([^\/]*)\//,function(t,r){return(r?n.join(n.dirname(o),r):o)+"/"});return n.isAbsolute(i)||(i=n.join(t.repository,i)),s.readFile(i,"utf8").then(null,function(){return""})},function(){return""})},t.prototype.onOutput=function(t){return this.git.onOutput(t)},t}();r.Repository=w});