{"version":3,"file":"vs/workbench/parts/git/electron-main/askpass.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/workbench/parts/git/electron-main/askpass.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;IAEhG,YAAY,CAAC;IAWb;QAAA;QAIA,CAAC;QAHO,uCAAO,GAAd,UAAe,EAAU,EAAE,IAAY,EAAE,OAAe;YACvD,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;QACpC,CAAC;QACF,4BAAC;IAAD,CAAC,AAJD,IAIC;IAJY,6BAAqB,wBAIjC,CAAA;IAED,eAAe,GAAQ;QACtB,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QACnB,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IACjB,CAAC;IAED,cAAc,IAAc;QAC3B,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;YACvB,MAAM,CAAC,KAAK,CAAC,2BAA2B,CAAC,CAAC;QAC3C,CAAC;QAED,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC;YACrC,MAAM,CAAC,KAAK,CAAC,kBAAkB,CAAC,CAAC;QAClC,CAAC;QAED,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,uBAAuB,CAAC,CAAC,CAAC,CAAC;YAC3C,MAAM,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC;QAChC,CAAC;QAED,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,yBAAyB,CAAC,CAAC,CAAC,CAAC;YAC7C,MAAM,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;QAC9B,CAAC;QAED,IAAI,EAAE,GAAG,OAAO,CAAC,GAAG,CAAC,uBAAuB,CAAC,CAAC;QAC9C,IAAI,MAAM,GAAG,OAAO,CAAC,GAAG,CAAC,yBAAyB,CAAC,CAAC;QACpD,IAAI,OAAO,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;QACtB,IAAI,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QAEpD,qBAAO,CAAC,OAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;aACrC,IAAI,CAAC,UAAA,MAAM;YACX,IAAM,OAAO,GAAG,MAAM,CAAC,UAAU,CAAwB,mBAAmB,EAAE,qBAAqB,CAAC,CAAC;YAErG,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,EAAE,IAAI,EAAE,OAAO,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC,CAAC,IAAI,CAAC,UAAA,MAAM;gBAC9E,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;oBACZ,EAAE,CAAC,aAAa,CAAC,MAAM,EAAE,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,MAAM,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC,CAAC;gBACpG,CAAC;gBAED,MAAM,CAAC,MAAM,CAAC;YACf,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC;aACD,IAAI,CAAC,UAAA,CAAC;YACN,CAAC,CAAC,OAAO,EAAE,CAAC;YACZ,UAAU,CAAC,cAAM,OAAA,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAf,CAAe,EAAE,CAAC,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;IACL,CAAC;IAED,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport { connect } from 'vs/base/node/service.net';\nimport { TPromise } from 'vs/base/common/winjs.base';\nimport * as fs from 'fs';\n\nexport interface ICredentials {\n\tusername: string;\n\tpassword: string;\n}\n\nexport class GitAskpassServiceStub {\n\tpublic askpass(id: string, host: string, command: string): TPromise<ICredentials> {\n\t\tthrow new Error('not implemented');\n\t}\n}\n\nfunction fatal(err: any): void {\n\tconsole.error(err);\n\tprocess.exit(1);\n}\n\nfunction main(argv: string[]): void {\n\tif (argv.length !== 5) {\n\t\treturn fatal('Wrong number of arguments');\n\t}\n\n\tif (!process.env['VSCODE_IPC_HOOK']) {\n\t\treturn fatal('Missing ipc hook');\n\t}\n\n\tif (!process.env['VSCODE_GIT_REQUEST_ID']) {\n\t\treturn fatal('Missing git id');\n\t}\n\n\tif (!process.env['VSCODE_GIT_ASKPASS_PIPE']) {\n\t\treturn fatal('Missing pipe');\n\t}\n\n\tvar id = process.env['VSCODE_GIT_REQUEST_ID'];\n\tvar output = process.env['VSCODE_GIT_ASKPASS_PIPE'];\n\tvar request = argv[2];\n\tvar host = argv[4].substring(1, argv[4].length - 2);\n\n\tconnect(process.env['VSCODE_IPC_HOOK'])\n\t\t.then(client => {\n\t\t\tconst service = client.getService<GitAskpassServiceStub>('GitAskpassService', GitAskpassServiceStub);\n\n\t\t\treturn service.askpass(id, host, process.env['MONACO_GIT_COMMAND']).then(result => {\n\t\t\t\tif (result) {\n\t\t\t\t\tfs.writeFileSync(output, (/^Username$/i.test(request) ? result.username : result.password) + '\\n');\n\t\t\t\t}\n\n\t\t\t\treturn client;\n\t\t\t});\n\t\t})\n\t\t.done(c => {\n\t\t\tc.dispose();\n\t\t\tsetTimeout(() => process.exit(0), 0);\n\t\t});\n}\n\nmain(process.argv);\n"]}