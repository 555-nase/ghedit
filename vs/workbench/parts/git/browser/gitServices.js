var __extends=this&&this.__extends||function(e,t){function i(){this.constructor=e}for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r]);e.prototype=null===t?Object.create(t):(i.prototype=t.prototype,new i)},__decorate=this&&this.__decorate||function(e,t,i,r){var n,o=arguments.length,s=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,i):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,r);else for(var a=e.length-1;a>=0;a--)(n=e[a])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s},__param=this&&this.__param||function(e,t){return function(i,r){t(i,r,e)}};define(["require","exports","vs/nls","vs/base/common/platform","vs/base/common/winjs.base","vs/base/common/lifecycle","vs/base/common/types","vs/base/common/actions","vs/base/common/errors","vs/base/common/mime","vs/base/common/paths","vs/base/common/eventEmitter","vs/workbench/parts/git/common/git","vs/workbench/parts/git/common/gitModel","vs/workbench/parts/git/browser/gitEditorInputs","vs/workbench/parts/git/browser/gitOperations","vs/workbench/parts/files/common/files","vs/platform/files/common/files","vs/base/common/async","vs/base/common/severity","vs/workbench/parts/output/common/output","vs/workbench/services/editor/common/editorService","vs/platform/configuration/common/configuration","vs/platform/event/common/event","vs/platform/instantiation/common/instantiation","vs/platform/message/common/message","vs/platform/workspace/common/workspace","vs/platform/lifecycle/common/lifecycle","vs/base/common/uri","semver","electron","vs/platform/storage/common/storage","vs/base/browser/event","vs/workbench/services/group/common/groupService"],function(e,t,i,r,n,o,s,a,c,u,h,p,l,v,g,f,S,d,m,E,y,D,w,I,_,C,O,T,R,b,A,P,M,N){/*---------------------------------------------------------------------------------------------
     *  Copyright (c) Microsoft Corporation. All rights reserved.
     *  Licensed under the MIT License. See License.txt in the project root for license information.
     *--------------------------------------------------------------------------------------------*/
"use strict";function F(e){return r.isWindows?e.replace(/\//g,"\\"):e}var G=function(){function e(e,t,i,r,n,o,s){var a=this;this.instantiationService=t,this.fileService=i,this.eventService=r,this.editorService=n,this.editorGroupService=o,this.contextService=s,this.gitService=e,this.cache={},this.toDispose=[],this.toDispose.push(this.gitService.getModel().addListener2("fileStatus:dispose",function(e){return a.onFileStatusDispose(e)}))}return e.prototype.getInput=function(e){var t=this.cache[e.getId()];return t?t:(t=this.createInput(e),this.cache[e.getId()]=t,t)},e.prototype.createInput=function(e){var t=this;return n.TPromise.join([this.createLeftInput(e),this.createRightInput(e)]).then(function(t){var r,o,s=t[0],a=t[1];if(e.getStatus()===l.Status.INDEX_RENAMED){var c=e.getRename().split("/");r=c[c.length-1],o=F(c.slice(0,c.length-1).join("/"))}else{var c=e.getPathComponents();r=c[c.length-1],o=F(c.slice(0,c.length-1).join("/"))}if(!s){if(!a){var u=new Error(i.localize("cantOpen","Can't open this git resource."));return u.gitErrorCode=l.GitErrorCodes.CantOpenResource,n.Promise.wrapError(u)}return n.TPromise.as(a)}switch(e.getStatus()){case l.Status.INDEX_MODIFIED:return n.TPromise.as(new g.GitIndexDiffEditorInput(i.localize("gitIndexChanges","{0} (index) ↔ {1}",r,r),i.localize("gitIndexChangesDesc","{0} - Changes on index",o),s,a,e));case l.Status.INDEX_RENAMED:return n.TPromise.as(new g.GitIndexDiffEditorInput(i.localize("gitIndexChangesRenamed","{0} ← {1}",e.getRename(),e.getPath()),i.localize("gitIndexChangesRenamedDesc","{0} - Renamed - Changes on index",o),s,a,e));case l.Status.MODIFIED:return n.TPromise.as(new g.GitWorkingTreeDiffEditorInput(i.localize("workingTreeChanges","{0} (HEAD) ↔ {1}",r,r),i.localize("workingTreeChangesDesc","{0} - Changes on working tree",o),s,a,e));default:return n.TPromise.as(new g.GitDiffEditorInput(i.localize("gitMergeChanges","{0} (merge) ↔ {1}",r,r),i.localize("gitMergeChangesDesc","{0} - Merge changes",o),s,a,e))}}).then(function(i){return i.addOneTimeDisposableListener("dispose",function(){delete t.cache[e.getId()]}),i},function(e){return n.Promise.wrapError(s.isArray(e)?e[0]||e[1]:e)})},e.prototype.createLeftInput=function(e){var t=e.getPath(),i=this.gitService.getModel();switch(e.getStatus()){case l.Status.INDEX_MODIFIED:case l.Status.INDEX_RENAMED:return this.gitService.show(t,e,"HEAD",e.getMimetype());case l.Status.MODIFIED:var r=i.getStatus().find(t,l.StatusType.INDEX);return r&&r.getStatus()===l.Status.INDEX_RENAMED?this.gitService.show(r.getRename(),e,"~",e.getMimetype()):r?this.gitService.show(t,e,"~",e.getMimetype()):this.gitService.show(t,e,"HEAD",e.getMimetype());default:return n.TPromise.as(null)}},e.prototype.createRightInput=function(e){var t=this.gitService.getModel(),i=e.getPath(),r=R["default"].file(h.join(t.getRepositoryRoot(),i));switch(e.getStatus()){case l.Status.INDEX_MODIFIED:case l.Status.INDEX_ADDED:case l.Status.INDEX_COPIED:return this.gitService.show(i,e,"~",e.getMimetype());case l.Status.INDEX_RENAMED:return this.gitService.show(e.getRename(),e,"~",e.getMimetype());case l.Status.INDEX_DELETED:case l.Status.DELETED:return this.gitService.show(i,e,"HEAD",e.getMimetype());case l.Status.MODIFIED:case l.Status.UNTRACKED:case l.Status.IGNORED:var o=t.getStatus().find(i,l.StatusType.INDEX);return o&&o.getStatus()===l.Status.INDEX_RENAMED&&(r=R["default"].file(h.join(t.getRepositoryRoot(),o.getRename()))),this.editorService.createInput({resource:r});case l.Status.BOTH_MODIFIED:return this.editorService.createInput({resource:r});default:return n.TPromise.as(null)}},e.prototype.onFileStatusDispose=function(e){var t=this,i=e.getId(),r=this.cache[i];r&&r.done(function(e){t.eventuallyDispose(e)})},e.prototype.eventuallyDispose=function(e){var t=this;if(!this.maybeDispose(e))var i=this.editorGroupService.onEditorsChanged(function(){t.maybeDispose(e)&&i.dispose()})},e.prototype.maybeDispose=function(e){return!e.isDirty()&&!this.editorService.getVisibleEditors().some(function(t){return t.input&&t.input.matches(e)})&&(e.dispose(),!0)},e.prototype.dispose=function(){var e=this;Object.keys(this.cache).forEach(function(t){e.cache[t].done(function(e){e.dispose()}),delete e.cache[t]}),this.toDispose=o.dispose(this.toDispose)},e=__decorate([__param(1,_.IInstantiationService),__param(2,d.IFileService),__param(3,I.IEventService),__param(4,D.IWorkbenchEditorService),__param(5,N.IEditorGroupService),__param(6,O.IWorkspaceContextService)],e)}(),x=function(){function e(t,i,r,n,o,s){var a=this;this._state=l.AutoFetcherState.Disabled,this.gitService=t,this.eventService=i,this.messageService=r,this.configurationService=o,this.instantiationService=s,this.currentRequest=null,this.timeout=e.MIN_TIMEOUT,this.toDispose=[],this.toDispose.push(this.configurationService.onDidUpdateConfiguration(function(e){return a.onConfiguration(e.config.git)})),this.onConfiguration(o.getConfiguration("git"))}return Object.defineProperty(e.prototype,"state",{get:function(){return this._state},enumerable:!0,configurable:!0}),e.prototype.onConfiguration=function(e){e.autofetch===!1?this.disable():this.enable()},e.prototype.enable=function(){var e=this;this._state===l.AutoFetcherState.Disabled&&(this.gitServiceStateDisposable=this.gitService.addListener2(l.ServiceEvents.STATE_CHANGED,function(t){return e.onGitServiceStateChange(t)}),this._state=l.AutoFetcherState.Active,this.onGitServiceStateChange(this.gitService.getState()))},e.prototype.disable=function(){this.gitServiceStateDisposable&&(this.gitServiceStateDisposable.dispose(),this.gitServiceStateDisposable=null),this.deactivate(),this._state=l.AutoFetcherState.Disabled},e.prototype.onGitServiceStateChange=function(e){e===l.ServiceState.OK?this.activate():this.deactivate()},e.prototype.activate=function(){this.currentRequest&&this.currentRequest.cancel(),this._state=l.AutoFetcherState.Active,this.loop()},e.prototype.deactivate=function(){this.currentRequest&&(this._state=l.AutoFetcherState.Inactive,this.currentRequest.cancel(),this.currentRequest=null)},e.prototype.loop=function(){var t=this;this._state=l.AutoFetcherState.Fetching,this.currentRequest=this.gitService.fetch().then(function(){t.timeout=e.MIN_TIMEOUT},function(i){return c.isPromiseCanceledError(i)?n.Promise.wrapError(i):i.gitErrorCode===l.GitErrorCodes.AuthenticationFailed?n.Promise.wrapError(i):void(t.timeout=Math.min(Math.round(1.2*t.timeout),e.MAX_TIMEOUT))}),this.currentRequest.then(function(){return t._state=l.AutoFetcherState.Active,t.currentRequest=n.TPromise.timeout(t.timeout),t.currentRequest}).then(function(){return t.loop()},function(e){return t.deactivate()})},e.prototype.dispose=function(){this.disable()},e.MIN_TIMEOUT=12e4,e.MAX_TIMEOUT=3e5,e=__decorate([__param(1,I.IEventService),__param(2,C.IMessageService),__param(3,D.IWorkbenchEditorService),__param(4,w.IConfigurationService),__param(5,_.IInstantiationService)],e)}();t.AutoFetcher=x;var k="settings.workspace.git.ignoreOld",H=function(e){function t(t,r,n,o,s,c,u,h,p,g){var f=this;e.call(this),this.configurationService=g,this.isStatusPending=!1,this.isFocused=!0,this.instantiationService=r,this.eventService=n,this.messageService=o,this.editorService=s,this.outputService=c,this.contextService=u,this.lifecycleService=h,this.raw=t,this.state=l.ServiceState.NotInitialized,this.operations=[],this.model=new v.Model,this.toDispose=[],this.needsRefresh=!1,this.statusDelayer=new m.ThrottledDelayer(500),this.reactiveStatusDelayer=new m.PeriodThrottledDelayer(500,1e4),this.autoFetcher=this.instantiationService.createInstance(x,this),this._allowHugeRepositories=!1,this.registerListeners(),this.inputCache=this.instantiationService.createInstance(G,this),this.triggerAutoStatus(!0),p.getBoolean(k,P.StorageScope.GLOBAL,!1)||this.raw.serviceState().done(function(e){if(e===l.RawServiceState.OK)return f.raw.getVersion().then(function(e){e=e||"",e=e.replace(/^(\d+\.\d+\.\d+).*$/,"$1"),e=b.valid(e),e&&b.satisfies(e,"<2.0.0")&&o.show(E["default"].Warning,{message:i.localize("updateGit","You seem to have git {0} installed. Code works best with git >=2.0.0.",e),actions:[C.CloseAction,new a.Action("neverShowAgain",i.localize("neverShowAgain","Don't show again"),null,(!0),function(){return p.store(k,!0,P.StorageScope.GLOBAL),null}),new a.Action("downloadLatest",i.localize("download","Download"),"",(!0),function(){return A.shell.openExternal("https://git-scm.com/"),null})]})})})}return __extends(t,e),Object.defineProperty(t.prototype,"allowHugeRepositories",{get:function(){return this._allowHugeRepositories},set:function(e){this._allowHugeRepositories=e,e&&this.state===l.ServiceState.Huge&&this.transition(l.ServiceState.OK)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"onOutput",{get:function(){return this.raw.onOutput},enumerable:!0,configurable:!0}),t.prototype.registerListeners=function(){var e=this;this.toDispose.push(this.eventService.addListener2(d.EventType.FILE_CHANGES,function(t){return e.onFileChanges(t)})),this.toDispose.push(this.eventService.addListener2(S.EventType.FILE_SAVED,function(t){return e.onTextFileChange(t)})),this.toDispose.push(this.eventService.addListener2(S.EventType.FILE_REVERTED,function(t){return e.onTextFileChange(t)})),this.toDispose.push(this.configurationService.onDidUpdateConfiguration(function(){if(!e._allowHugeRepositories){var t=e.configurationService.getConfiguration("git");e._allowHugeRepositories=t.allowLargeRepositories,e._allowHugeRepositories&&e.triggerAutoStatus()}})),this.lifecycleService.onShutdown(this.dispose,this);var t=M.domEvent(window,"focus");this.toDispose.push(t(function(){e.isFocused=!0,e.isStatusPending&&e.triggerAutoStatus()}));var i=M.domEvent(window,"blur");this.toDispose.push(i(function(){return e.isFocused=!1}))},t.prototype.onTextFileChange=function(e){var t=".gitignore"===h.basename(e.resource.fsPath);t&&this.triggerAutoStatus()},t.prototype.onFileChanges=function(e){var t=this,i=this.isIdle(),r=e.changes.some(function(e){var r=t.contextService.toWorkspaceRelativePath(e.resource);return!!r&&(".git/index"===r?i:!/^\.git/.test(r)||(".git"===r?e.type===d.FileChangeType.ADDED||e.type===d.FileChangeType.DELETED:[".git/index.lock",".git/FETCH_HEAD",".gitignore",".gitmodules"].indexOf(r)===-1))});r&&this.triggerAutoStatus()},t.prototype.onGitServiceOperationEnd=function(e){e.operation.id===l.ServiceOperations.COMMAND&&this.triggerAutoStatus()},t.prototype.getState=function(){return this.state},t.prototype.getModel=function(){return this.model},t.prototype.status=function(){var e=this;return this.statusDelayer.trigger(function(){return e._status()})},t.prototype._status=function(){var e=this,t=this.configurationService.getConfiguration("git");return this._allowHugeRepositories||t.allowLargeRepositories?this.run(l.ServiceOperations.STATUS,function(){return e.raw.status()}):this.state===l.ServiceState.Huge?n.TPromise.as(this.model):this.raw.statusCount().then(function(t){return t>5e3&&!e._allowHugeRepositories?(e.transition(l.ServiceState.Huge),n.TPromise.as(e.model)):e.run(l.ServiceOperations.STATUS,function(){return e.raw.status()})})},t.prototype.triggerAutoStatus=function(e){var t=this;if(void 0===e&&(e=!1),this.isStatusPending=!0,this.isFocused||e){this.isStatusPending=!1;var i=this.configurationService.getConfiguration("git");i.autorefresh&&this.reactiveStatusDelayer.trigger(function(){return t.status()}).done(null,function(e){c.isPromiseCanceledError(e)||t.messageService.show(E["default"].Error,e)})}},t.prototype.init=function(){var e=this;return this.run(l.ServiceOperations.INIT,function(){return e.raw.init()})},t.prototype.add=function(e){var i=this;return this.run(l.ServiceOperations.ADD,function(){return i.raw.add(t.toPaths(e))})},t.prototype.stage=function(e,t){var i=this;return this.run(l.ServiceOperations.STAGE,function(){return i.raw.stage(e,t)})},t.prototype.branch=function(e,t){var i=this;return void 0===t&&(t=!1),this.run(l.ServiceOperations.BRANCH,function(){return i.raw.branch(e,t)})},t.prototype.checkout=function(e,i){var r=this;return void 0===e&&(e=""),void 0===i&&(i=null),this.run(l.ServiceOperations.CHECKOUT,function(){return r.raw.checkout(e,t.toPaths(i))})},t.prototype.clean=function(e){var t=this;return this.run(l.ServiceOperations.CLEAN,function(){return t.raw.clean(e.map(function(e){return e.getPath()}))})},t.prototype.undo=function(){var e=this;return this.run(l.ServiceOperations.UNDO,function(){return e.raw.undo()})},t.prototype.reset=function(e,t){var i=this;return this.run(l.ServiceOperations.RESET,function(){return i.raw.reset(e,t)})},t.prototype.revertFiles=function(e,t){var i=this;return this.run(l.ServiceOperations.RESET,function(){return i.raw.revertFiles(e,(t||[]).map(function(e){return e.getPath()}))})},t.prototype.fetch=function(){var e=this;return this.run(l.ServiceOperations.BACKGROUND_FETCH,function(){return e.raw.fetch()})},t.prototype.pull=function(e){var t=this;return this.run(l.ServiceOperations.PULL,function(){return t.raw.pull(e)})},t.prototype.push=function(e,t,i){var r=this;return this.run(l.ServiceOperations.PUSH,function(){return r.raw.push(e,t,i)})},t.prototype.sync=function(e){var t=this,i=this.model.getHEAD(),r=i&&i.upstream&&!!i.ahead;return r?this.run(l.ServiceOperations.SYNC,function(){return t.raw.sync()}):this.run(l.ServiceOperations.SYNC,function(){return t.raw.pull(e)})},t.prototype.commit=function(e,t,i){var r=this;return void 0===t&&(t=!1),void 0===i&&(i=!1),this.run(l.ServiceOperations.COMMIT,function(){return r.raw.commit(e,t,i)})},t.prototype.getCommitTemplate=function(){return this.raw.getCommitTemplate()},t.prototype.detectMimetypes=function(e,t){return void 0===t&&(t="~"),this.raw.detectMimetypes(e,t)},t.prototype.run=function(e,t){var i=this;return this.raw.serviceState().then(function(r){return r===l.RawServiceState.GitNotFound?(i.transition(l.ServiceState.NoGit),n.TPromise.as(null)):r===l.RawServiceState.Disabled?(i.transition(l.ServiceState.Disabled),n.TPromise.as(null)):i._run(e,t)})},t.prototype._run=function(e,t){var r=this,o=new f.GitOperation(e,t);this.operations.push(o),this.emit(l.ServiceEvents.OPERATION_START,o),this.emit(l.ServiceEvents.OPERATION,o);var u=function(e){void 0===e&&(e=null);var t=r.operations.indexOf(o);t>-1&&r.operations.splice(t,1);var i={operation:o,error:e};r.emit(l.ServiceEvents.OPERATION_END,i),r.onGitServiceOperationEnd(i),r.emit(l.ServiceEvents.OPERATION,o)};return o.run().then(function(e){return r.model.update(e),u(),e?r.transition(s.isUndefinedOrNull(e.state)?l.ServiceState.OK:e.state):r.transition(l.ServiceState.NotARepo),r.model},function(e){if(u(e),c.isPromiseCanceledError(e))return n.Promise.wrapError(e);var t=e.gitErrorCode||null;if(t===l.GitErrorCodes.NotAtRepositoryRoot)return r.transition(l.ServiceState.NotAtRepoRoot),n.TPromise.as(r.model);if(r.emit(l.ServiceEvents.ERROR,e),r.transition(l.ServiceState.OK),t===l.GitErrorCodes.NoUserNameConfigured||t===l.GitErrorCodes.NoUserEmailConfigured)return r.messageService.show(E["default"].Warning,i.localize("configureUsernameEmail","Please configure your git user name and e-mail.")),n.TPromise.as(null);if(t===l.GitErrorCodes.BadConfigFile)return r.messageService.show(E["default"].Error,i.localize("badConfigFile","Git {0}",e.message)),n.TPromise.as(null);if(t===l.GitErrorCodes.UnmergedChanges)return r.messageService.show(E["default"].Warning,i.localize("unmergedChanges","You should first resolve the unmerged changes before committing your changes.")),n.TPromise.as(null);var o,s=new a.Action("show.gitOutput",i.localize("showOutput","Show Output"),null,(!0),function(){return r.outputService.getChannel("Git").show()}),h=new a.Action("close.message",i.localize("cancel","Cancel"),null,(!0),function(){return n.TPromise.as(!0)});return o=c.create(i.localize("checkNativeConsole","There was an issue running a git operation. Please review the output or use a console to check the state of your repository."),{actions:[s,h]}),o.gitErrorCode=t,n.Promise.wrapError(o)})},t.prototype.transition=function(e){var t=this.state;this.state=e,e!==t&&this.emit(l.ServiceEvents.STATE_CHANGED,e)},t.prototype.buffer=function(e,t){return void 0===t&&(t="~"),this.raw.show(e,t)},t.prototype.show=function(e,t,r,o){var s=this;return void 0===r&&(r="~"),void 0===o&&(o="text/plain"),this.detectMimetypes(e,r).then(function(o){var a,c,h=t.getPathComponents(),p=h[h.length-1],l=F(h.slice(0,h.length-1).join("/"));return"~"===r?(a=i.localize("changesFromIndex","{0} (index)",p),c=i.localize("changesFromIndexDesc","{0} - Changes on index",l)):(a=i.localize("changesFromTree","{0} ({1})",p,r),c=i.localize("changesFromTreeDesc","{0} - Changes on {1}",l,r)),u.isUnspecific(o)&&(o=u.guessMimeTypes(e)),u.isBinaryMime(u.guessMimeTypes(e))||o.indexOf(u.MIME_BINARY)>=0?n.Promise.wrapError(new Error("The resource seems to be binary and cannot be displayed")):n.TPromise.as(s.instantiationService.createInstance(g.NativeGitIndexStringEditorInput,a,c,o.join(", "),t,e,r))})},t.prototype.getInput=function(e){var t=this;return this.inputCache.getInput(e).then(null,function(e){return(e.gitErrorCode=l.GitErrorCodes.CantOpenResource)?(t.messageService.show(E["default"].Warning,i.localize("cantOpenResource","Can't open this git resource.")),n.TPromise.as(null)):n.Promise.wrapError(e)})},t.prototype.isInitialized=function(){return this.state===l.ServiceState.OK},t.prototype.isIdle=function(){return this.isInitialized()&&!this.operations.some(function(e){return e.id!==l.ServiceOperations.BACKGROUND_FETCH})},t.prototype.getRunningOperations=function(){return this.operations},t.prototype.getAutoFetcher=function(){return this.autoFetcher},t.toPaths=function(e){return e?e.map(function(e){switch(e.getStatus()){case l.Status.MODIFIED:case l.Status.DELETED:if(e.getRename())return e.getRename();default:return e.getPath()}}):null},t.prototype.dispose=function(){this.emit(l.ServiceEvents.DISPOSE),this.model&&(this.model.dispose(),this.model=null),e.prototype.dispose.call(this)},t=__decorate([__param(1,_.IInstantiationService),__param(2,I.IEventService),__param(3,C.IMessageService),__param(4,D.IWorkbenchEditorService),__param(5,y.IOutputService),__param(6,O.IWorkspaceContextService),__param(7,T.ILifecycleService),__param(8,P.IStorageService),__param(9,w.IConfigurationService)],t)}(p.EventEmitter);t.GitService=H});