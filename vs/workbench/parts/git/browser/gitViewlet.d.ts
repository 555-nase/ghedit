import 'vs/css!./media/gitViewlet';
import winjs = require('vs/base/common/winjs.base');
import eventemitter = require('vs/base/common/eventEmitter');
import $ = require('vs/base/browser/builder');
import actions = require('vs/base/common/actions');
import viewlet = require('vs/workbench/browser/viewlet');
import git = require('vs/workbench/parts/git/common/git');
import view = require('vs/workbench/parts/git/browser/views/view');
import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
import { IProgressService } from 'vs/platform/progress/common/progress';
import { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';
import IGitService = git.IGitService;
export declare class GitViewlet extends viewlet.Viewlet implements view.IController {
    private progressService;
    private gitService;
    private instantiationService;
    private $el;
    private currentView;
    private progressRunner;
    private currentDimension;
    private views;
    private toDispose;
    constructor(telemetryService: ITelemetryService, progressService: IProgressService, instantiationService: IInstantiationService, gitService: IGitService);
    setView(id: string): winjs.Promise;
    create(parent: $.Builder): winjs.TPromise<void>;
    setVisible(visible: boolean): winjs.TPromise<void>;
    focus(): void;
    layout(dimension?: $.Dimension): void;
    getActions(): actions.IAction[];
    getSecondaryActions(): actions.IAction[];
    getControl(): eventemitter.IEventEmitter;
    private onGitServiceChanges();
    dispose(): void;
}
