/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __extends=this&&this.__extends||function(t,e){function i(){this.constructor=t}for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)},__decorate=this&&this.__decorate||function(t,e,i,n){var o,r=arguments.length,s=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,i,n);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,i,s):o(e,i))||s);return r>3&&s&&Object.defineProperty(e,i,s),s},__param=this&&this.__param||function(t,e){return function(i,n){e(i,n,t)}};define(["require","exports","vs/nls","vs/base/common/platform","vs/base/common/lifecycle","vs/base/common/eventEmitter","vs/base/common/strings","vs/base/common/errors","vs/base/common/paths","vs/base/common/winjs.base","vs/base/browser/builder","vs/base/browser/keyboardEvent","vs/base/common/actions","vs/base/browser/ui/actionbar/actionbar","vs/base/parts/tree/browser/treeImpl","vs/workbench/parts/git/common/git","vs/workbench/parts/git/browser/gitActions","vs/workbench/parts/git/common/gitModel","vs/workbench/parts/git/browser/views/changes/changesViewer","vs/workbench/parts/git/browser/gitEditorInputs","vs/workbench/parts/files/common/files","vs/workbench/parts/output/common/output","vs/workbench/common/editor","vs/base/browser/ui/inputbox/inputBox","vs/base/common/severity","vs/workbench/services/editor/common/editorService","vs/platform/contextview/browser/contextView","vs/platform/instantiation/common/instantiation","vs/platform/message/common/message","vs/platform/workspace/common/workspace","vs/platform/event/common/event","vs/base/common/keyCodes","vs/workbench/services/group/common/groupService","vs/platform/configuration/common/configuration","vs/css!./changesView"],function(t,e,i,n,o,r,s,a,c,l,u,m,h,p,d,v,g,f,S,I,y,b,E,w,C,A,M,_,O,x,T,D,B,G){"use strict";var P=v.IGitService,L=u.$,N=function(t){function e(e,i,n,o,r,s,c,l,u,m,h){var p=this;t.call(this),this.configurationService=h,this.ID="changes",this.instantiationService=i,this.editorService=n,this.messageService=r,this.contextViewService=s,this.contextService=c,this.gitService=l,this.outputService=u,this.visible=!1,this.currentDimension=null,this.actionRunner=e,this.toDispose=[this.smartCommitAction=this.instantiationService.createInstance(g.SmartCommitAction,this),o.onEditorsChanged(function(){return p.onEditorsChanged(p.editorService.getActiveEditorInput()).done(null,a.onUnexpectedError)}),this.gitService.addListener2(v.ServiceEvents.OPERATION_START,function(t){return p.onGitOperationStart(t)}),this.gitService.addListener2(v.ServiceEvents.OPERATION_END,function(t){return p.onGitOperationEnd(t)}),this.gitService.getModel().addListener2(v.ModelEvents.MODEL_UPDATED,this.onGitModelUpdate.bind(this))]}return __extends(e,t),Object.defineProperty(e.prototype,"element",{get:function(){return this.render(),this.$el.getHTMLElement()},enumerable:!0,configurable:!0}),e.prototype.render=function(){var t=this;if(!this.$el){this.$el=L(".changes-view"),this.$commitView=L(".commit-view").appendTo(this.$el),this.commitInputBox=new w.InputBox(this.$commitView.getHTMLElement(),this.contextViewService,{placeholder:i.localize("commitMessage","Message (press {0} to commit)",e.COMMIT_KEYBINDING),validationOptions:{showMessage:!0,validation:function(i){var n=t.configurationService.getConfiguration("git");return n.enableLongCommitWarning&&/^[^\n]{51}/.test(i)?{content:e.LONG_COMMIT,type:w.MessageType.WARNING}:null}},ariaLabel:i.localize("commitMessageAriaLabel","Git: Type commit message and press {0} to commit",e.COMMIT_KEYBINDING),flexibleHeight:!0}),this.commitInputBox.onDidChange(function(e){return t.emit("change",e)}),this.commitInputBox.onDidHeightChange(function(e){return t.emit("heightchange",e)}),L(this.commitInputBox.inputElement).on("keydown",function(i){var n=new m.StandardKeyboardEvent(i);(n.equals(D.CommonKeybindings.CTRLCMD_ENTER)||n.equals(D.CommonKeybindings.CTRLCMD_S))&&(t.smartCommitAction.enabled?t.actionRunner.run(t.smartCommitAction).done():t.commitInputBox.showMessage({content:e.NOTHING_TO_COMMIT,formatContent:!0,type:w.MessageType.INFO}))}).on("blur",function(){t.commitInputBox.hideMessage()}),this.$statusView=L(".status-view").appendTo(this.$el);var n=this.instantiationService.createInstance(S.ActionProvider),o=this.instantiationService.createInstance(S.Renderer,n,this.actionRunner),r=this.instantiationService.createInstance(S.DragAndDrop),s=this.instantiationService.createInstance(S.Controller,n);this.tree=new d.Tree(this.$statusView.getHTMLElement(),{dataSource:new S.DataSource,renderer:o,filter:new S.Filter,sorter:new S.Sorter,accessibilityProvider:new S.AccessibilityProvider,dnd:r,controller:s},{indentPixels:0,twistiePixels:20,ariaLabel:i.localize("treeAriaLabel","Git Changes View")}),this.tree.setInput(this.gitService.getModel().getStatus()),this.tree.expandAll(this.gitService.getModel().getStatus().getGroups()),this.toDispose.push(this.tree.addListener2("selection",function(e){return t.onSelection(e)})),this.toDispose.push(this.commitInputBox.onDidHeightChange(function(){return t.layout()}))}},e.prototype.focus=function(){var t=this.tree.getSelection();t.length>0&&this.tree.reveal(t[0],.5).done(null,a.onUnexpectedError),this.commitInputBox.focus()},e.prototype.layout=function(t){if(void 0===t&&(t=this.currentDimension),t){this.currentDimension=t,this.commitInputBox.layout();var e=t.height-(this.commitInputBox.height+12);this.$statusView.size(t.width,e),this.tree.layout(e),134===this.commitInputBox.height?this.$commitView.addClass("scroll"):this.$commitView.removeClass("scroll")}},e.prototype.setVisible=function(t){return this.visible=t,t?(this.tree.onVisible(),this.updateCommitInputTemplate(),this.onEditorsChanged(this.editorService.getActiveEditorInput())):(this.tree.onHidden(),l.TPromise.as(null))},e.prototype.updateCommitInputTemplate=function(){var t=this;this.commitInputBox.value||this.gitService.getCommitTemplate().then(function(e){return e&&(t.commitInputBox.value=e)}).done(null,a.onUnexpectedError)},e.prototype.getControl=function(){return this.tree},e.prototype.getActions=function(){var t=this;return this.actions||(this.actions=[this.smartCommitAction,this.instantiationService.createInstance(g.RefreshAction)],this.actions.forEach(function(e){return t.toDispose.push(e)})),this.actions},e.prototype.getSecondaryActions=function(){var t=this;return this.secondaryActions||(this.secondaryActions=[this.instantiationService.createInstance(g.SyncAction,g.SyncAction.ID,g.SyncAction.LABEL),this.instantiationService.createInstance(g.PullAction,g.PullAction.ID,g.PullAction.LABEL),this.instantiationService.createInstance(g.PullWithRebaseAction),this.instantiationService.createInstance(g.PushAction,g.PushAction.ID,g.PushAction.LABEL),new p.Separator,this.instantiationService.createInstance(g.PublishAction,g.PublishAction.ID,g.PublishAction.LABEL),new p.Separator,this.instantiationService.createInstance(g.CommitAction,this),this.instantiationService.createInstance(g.StageAndCommitAction,this),this.instantiationService.createInstance(g.UndoLastCommitAction,g.UndoLastCommitAction.ID,g.UndoLastCommitAction.LABEL),new p.Separator,this.instantiationService.createInstance(g.GlobalUnstageAction),this.instantiationService.createInstance(g.GlobalUndoAction),new p.Separator,new h.Action("show.gitOutput",i.localize("showOutput","Show Git Output"),null,(!0),function(){return t.outputService.getChannel("Git").show()})],this.secondaryActions.forEach(function(e){return t.toDispose.push(e)})),this.secondaryActions},e.prototype.getCommitMessage=function(){return s.trim(this.commitInputBox.value)},e.prototype.onEmptyCommitMessage=function(){this.commitInputBox.focus(),this.commitInputBox.showMessage({content:e.NEED_MESSAGE,formatContent:!0,type:w.MessageType.INFO})},e.prototype.onGitModelUpdate=function(){var t=this;this.tree&&this.tree.refresh().done(function(){return t.tree.expandAll(t.gitService.getModel().getStatus().getGroups())})},e.prototype.onEditorsChanged=function(t){var e=this;if(!this.tree)return l.TPromise.as(null);var i=this.getStatusFromInput(t);return i||this.tree.clearSelection(),this.visible&&this.tree.getSelection().indexOf(i)===-1?this.tree.reveal(i,.5).then(function(){e.tree.setSelection([i],{origin:"implicit"})}):l.TPromise.as(null)},e.prototype.onSelection=function(t){var e=this;if(!(t.payload&&t.payload&&"implicit"===t.payload.origin||1!==t.selection.length)){var i=t.selection[0];if(i instanceof f.FileStatus&&(!t.payload||"keyboard"!==t.payload.origin||t.payload.originalEvent.equals(D.CommonKeybindings.ENTER))){var n=t.payload&&"mouse"===t.payload.origin;if(!n||!t.payload.originalEvent.metaKey&&!t.payload.originalEvent.shiftKey){var o=n&&t.payload.originalEvent&&2===t.payload.originalEvent.detail,r=i;this.gitService.getInput(r).done(function(i){var r=new E.TextDiffEditorOptions;if(n){r.preserveFocus=!0;var s=t&&t.payload&&"mouse"===t.payload.origin&&t.payload.originalEvent;s&&2===s.detail&&(r.preserveFocus=!1,s.preventDefault())}r.forceOpen=!0,r.pinned=o;var a=t&&t.payload&&t.payload.originalEvent&&t.payload.originalEvent.altKey;return e.editorService.openEditor(i,r,a)},function(t){return t.gitErrorCode===v.GitErrorCodes.CantOpenResource?void e.messageService.show(C["default"].Warning,t):void e.messageService.show(C["default"].Error,t)})}}}},e.prototype.onGitOperationStart=function(t){t.id===v.ServiceOperations.COMMIT&&this.commitInputBox&&this.commitInputBox.disable()},e.prototype.onGitOperationEnd=function(t){t.operation.id===v.ServiceOperations.COMMIT&&this.commitInputBox&&(this.commitInputBox.enable(),t.error||(this.commitInputBox.value="",this.updateCommitInputTemplate()))},e.prototype.getStatusFromInput=function(t){if(!t)return null;if(t instanceof I.GitDiffEditorInput)return t.getFileStatus();if(t instanceof I.NativeGitIndexStringEditorInput)return t.getFileStatus()||null;if(t instanceof y.FileEditorInput){var e=t,i=e.getResource(),n=this.contextService.getWorkspace().resource.fsPath;if(!n||!c.isEqualOrParent(i.fsPath,n))return null;var o=this.gitService.getModel().getRepositoryRoot();if(!o||!c.isEqualOrParent(i.fsPath,o))return null;var r=c.normalize(c.relative(o,i.fsPath)),s=this.gitService.getModel().getStatus().getWorkingTreeStatus().find(r);if(s&&(s.getStatus()===v.Status.UNTRACKED||s.getStatus()===v.Status.IGNORED))return s;if(s=this.gitService.getModel().getStatus().getMergeStatus().find(r))return s}return null},e.prototype.dispose=function(){this.$el&&(this.$el.dispose(),this.$el=null),this.toDispose=o.dispose(this.toDispose),t.prototype.dispose.call(this)},e.COMMIT_KEYBINDING=n.isMacintosh?"Cmd+Enter":"Ctrl+Enter",e.NEED_MESSAGE=i.localize("needMessage","Please provide a commit message. You can always press **{0}** to commit changes. If there are any staged changes, only those will be committed; otherwise, all changes will.",e.COMMIT_KEYBINDING),e.NOTHING_TO_COMMIT=i.localize("nothingToCommit","Once there are some changes to commit, type in the commit message and either press **{0}** to commit changes. If there are any staged changes, only those will be committed; otherwise, all changes will.",e.COMMIT_KEYBINDING),e.LONG_COMMIT=i.localize("longCommit","It is recommended to keep the commit's first line under 50 characters. Feel free to use more lines for extra information."),e=__decorate([__param(1,_.IInstantiationService),__param(2,A.IWorkbenchEditorService),__param(3,B.IEditorGroupService),__param(4,O.IMessageService),__param(5,M.IContextViewService),__param(6,x.IWorkspaceContextService),__param(7,P),__param(8,b.IOutputService),__param(9,T.IEventService),__param(10,G.IConfigurationService)],e)}(r.EventEmitter);e.ChangesView=N});