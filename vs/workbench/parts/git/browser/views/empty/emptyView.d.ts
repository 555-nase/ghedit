import 'vs/css!./emptyView';
import EventEmitter = require('vs/base/common/eventEmitter');
import WinJS = require('vs/base/common/winjs.base');
import Builder = require('vs/base/browser/builder');
import Actions = require('vs/base/common/actions');
import git = require('vs/workbench/parts/git/common/git');
import GitView = require('vs/workbench/parts/git/browser/views/view');
import { IFileService } from 'vs/platform/files/common/files';
import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
import { IMessageService } from 'vs/platform/message/common/message';
import IGitService = git.IGitService;
export declare class EmptyView extends EventEmitter.EventEmitter implements GitView.IView {
    ID: string;
    private static EMPTY_MESSAGE;
    private gitService;
    private instantiationService;
    private messageService;
    private fileService;
    private actionRunner;
    private refreshAction;
    private isVisible;
    private needsRender;
    private $el;
    private urlInputBox;
    private cloneButton;
    private initButton;
    private controller;
    private toDispose;
    constructor(controller: GitView.IController, actionRunner: Actions.IActionRunner, gitService: IGitService, instantiationService: IInstantiationService, messageService: IMessageService, fileService: IFileService);
    private _initAction;
    private initAction;
    element: HTMLElement;
    private render();
    private disableUI();
    private enableUI();
    focus(): void;
    layout(dimension: Builder.Dimension): void;
    setVisible(visible: boolean): WinJS.TPromise<void>;
    getControl(): EventEmitter.IEventEmitter;
    getActions(): Actions.IAction[];
    getSecondaryActions(): Actions.IAction[];
    private onGitOperation();
    dispose(): void;
}
