import winjs = require('vs/base/common/winjs.base');
import lifecycle = require('vs/base/common/lifecycle');
import ee = require('vs/base/common/eventEmitter');
import WorkbenchEditorCommon = require('vs/workbench/common/editor');
import git = require('vs/workbench/parts/git/common/git');
import { IOutputService } from 'vs/workbench/parts/output/common/output';
import { IWorkbenchEditorService } from 'vs/workbench/services/editor/common/editorService';
import { IConfigurationService } from 'vs/platform/configuration/common/configuration';
import { IEventService } from 'vs/platform/event/common/event';
import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
import { IMessageService } from 'vs/platform/message/common/message';
import { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';
import { ILifecycleService } from 'vs/platform/lifecycle/common/lifecycle';
import { IStorageService } from 'vs/platform/storage/common/storage';
import Event from 'vs/base/common/event';
export declare class AutoFetcher implements git.IAutoFetcher, lifecycle.IDisposable {
    private static MIN_TIMEOUT;
    private static MAX_TIMEOUT;
    private _state;
    private gitService;
    private eventService;
    private messageService;
    private configurationService;
    private instantiationService;
    private currentRequest;
    private timeout;
    private toDispose;
    private gitServiceStateDisposable;
    constructor(gitService: git.IGitService, eventService: IEventService, messageService: IMessageService, editorService: IWorkbenchEditorService, configurationService: IConfigurationService, instantiationService: IInstantiationService);
    state: git.AutoFetcherState;
    private onConfiguration(config);
    enable(): void;
    disable(): void;
    private onGitServiceStateChange(state);
    activate(): void;
    deactivate(): void;
    private loop();
    dispose(): void;
}
export declare class GitService extends ee.EventEmitter implements git.IGitService {
    private configurationService;
    _serviceBrand: any;
    private eventService;
    private contextService;
    private messageService;
    private instantiationService;
    private editorService;
    private lifecycleService;
    private outputService;
    protected raw: git.IRawGitService;
    private state;
    private operations;
    private model;
    private inputCache;
    private toDispose;
    private needsRefresh;
    private statusDelayer;
    private reactiveStatusDelayer;
    private autoFetcher;
    private isStatusPending;
    private isFocused;
    private _allowHugeRepositories;
    allowHugeRepositories: boolean;
    onOutput: Event<string>;
    constructor(raw: git.IRawGitService, instantiationService: IInstantiationService, eventService: IEventService, messageService: IMessageService, editorService: IWorkbenchEditorService, outputService: IOutputService, contextService: IWorkspaceContextService, lifecycleService: ILifecycleService, storageService: IStorageService, configurationService: IConfigurationService);
    private registerListeners();
    private onTextFileChange(e);
    private onFileChanges(e);
    private onGitServiceOperationEnd(e);
    getState(): git.ServiceState;
    getModel(): git.IModel;
    status(): winjs.Promise;
    private _status();
    private triggerAutoStatus(force?);
    init(): winjs.Promise;
    add(files?: git.IFileStatus[]): winjs.Promise;
    stage(filePath: string, content: string): winjs.Promise;
    branch(name: string, checkout?: boolean): winjs.Promise;
    checkout(treeish?: string, files?: git.IFileStatus[]): winjs.Promise;
    clean(files: git.IFileStatus[]): winjs.Promise;
    undo(): winjs.Promise;
    reset(treeish: string, hard?: boolean): winjs.Promise;
    revertFiles(treeish: string, files?: git.IFileStatus[]): winjs.Promise;
    fetch(): winjs.Promise;
    pull(rebase?: boolean): winjs.Promise;
    push(remote?: string, name?: string, options?: git.IPushOptions): winjs.Promise;
    sync(rebase?: boolean): winjs.Promise;
    commit(message: string, amend?: boolean, stage?: boolean): winjs.Promise;
    getCommitTemplate(): winjs.Promise;
    detectMimetypes(path: string, treeish?: string): winjs.Promise;
    private run(operationId, fn);
    private _run(operationId, fn);
    private transition(state);
    buffer(path: string, treeish?: string): winjs.TPromise<string>;
    show(path: string, status: git.IFileStatus, treeish?: string, mimetype?: string): winjs.Promise;
    getInput(status: git.IFileStatus): winjs.TPromise<WorkbenchEditorCommon.EditorInput>;
    isInitialized(): boolean;
    isIdle(): boolean;
    getRunningOperations(): git.IGitOperation[];
    getAutoFetcher(): git.IAutoFetcher;
    private static toPaths(files);
    dispose(): void;
}
