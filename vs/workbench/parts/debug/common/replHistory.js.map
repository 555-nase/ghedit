{"version":3,"file":"vs/workbench/parts/debug/common/replHistory.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/workbench/parts/debug/common/replHistory.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nconst MAX_HISTORY_ENTRIES = 50;\n\n/**\n * The repl history has the following characteristics:\n * - the history is stored in local storage up to N items\n * - every time a expression is evaluated, it is being added to the history\n * - when starting to navigate in history, the current expression is remembered to be able to go back\n * - when navigating in history and making changes to any expression, these changes are remembered until a expression is evaluated\n * - the navigation state is not remembered so that the user always ends up at the end of the history stack when evaluating a expression\n */\nexport class ReplHistory {\n\n\tprivate historyPointer: number;\n\tprivate currentExpressionStoredMarkers: boolean;\n\tprivate historyOverwrites: { [position: string]: string; };\n\n\tconstructor(private history: string[]) {\n\t\tthis.historyPointer = this.history.length;\n\t\tthis.currentExpressionStoredMarkers = false;\n\t\tthis.historyOverwrites = {};\n\t}\n\n\tpublic next(): string {\n\t\treturn this.navigate(false);\n\t}\n\n\tpublic previous(): string {\n\t\treturn this.navigate(true);\n\t}\n\n\tprivate navigate(previous: boolean): string {\n\t\t// validate new pointer\n\t\tlet newPointer = -1;\n\t\tif (previous && this.historyPointer > 0 && this.history.length > this.historyPointer - 1) {\n\t\t\tnewPointer = this.historyPointer - 1;\n\t\t} else if (!previous && this.history.length > this.historyPointer + 1) {\n\t\t\tnewPointer = this.historyPointer + 1;\n\t\t}\n\n\t\tif (newPointer >= 0) {\n\n\t\t\t// remember pointer for next navigation\n\t\t\tthis.historyPointer = newPointer;\n\n\t\t\t// check for overwrite\n\t\t\tif (this.historyOverwrites && this.historyOverwrites[newPointer.toString()]) {\n\t\t\t\treturn this.historyOverwrites[newPointer.toString()];\n\t\t\t}\n\n\t\t\treturn this.history[newPointer];\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tpublic remember(expression: string, fromPrevious: boolean): void {\n\t\tlet previousPointer: number;\n\n\t\t// this method is called after the user has navigated in the history. Therefor we need to\n\t\t// restore the value of the pointer from the point when the user started the navigation.\n\t\tif (fromPrevious) {\n\t\t\tpreviousPointer = this.historyPointer + 1;\n\t\t} else {\n\t\t\tpreviousPointer = this.historyPointer - 1;\n\t\t}\n\n\t\t// when the user starts to navigate in history, add the current expression to the history\n\t\t// once so that the user can always navigate back to it and does not loose its data.\n\t\tif (previousPointer === this.history.length && !this.currentExpressionStoredMarkers) {\n\t\t\tthis.history.push(expression);\n\t\t\tthis.currentExpressionStoredMarkers = true;\n\t\t}\n\n\t\t// keep edits that are made to history items up until the user actually evaluates a expression\n\t\telse {\n\t\t\tif (!this.historyOverwrites) {\n\t\t\t\tthis.historyOverwrites = {};\n\t\t\t}\n\n\t\t\tthis.historyOverwrites[previousPointer.toString()] = expression;\n\t\t}\n\t}\n\n\tpublic evaluated(expression: string): void {\n\t\t// clear current expression that was stored previously to support history navigation now on evaluate\n\t\tif (this.currentExpressionStoredMarkers) {\n\t\t\tthis.history.pop();\n\t\t}\n\n\t\t// keep in local history if expression provided and not equal to previous expression stored in history\n\t\tif (expression && (this.history.length === 0 || this.history[this.history.length - 1] !== expression)) {\n\t\t\tthis.history.push(expression);\n\t\t}\n\n\t\t// advance History Pointer to the end\n\t\tthis.historyPointer = this.history.length;\n\n\t\t// reset marker\n\t\tthis.currentExpressionStoredMarkers = false;\n\n\t\t// reset overwrites\n\t\tthis.historyOverwrites = null;\n\t}\n\n\tpublic save(): string[] {\n\t\t// remove current expression from history since it was not evaluated\n\t\tif (this.currentExpressionStoredMarkers) {\n\t\t\tthis.history.pop();\n\t\t}\n\t\tif (this.history.length > MAX_HISTORY_ENTRIES) {\n\t\t\tthis.history = this.history.splice(this.history.length - MAX_HISTORY_ENTRIES, MAX_HISTORY_ENTRIES);\n\t\t}\n\n\t\treturn this.history;\n\t}\n}\n"]}