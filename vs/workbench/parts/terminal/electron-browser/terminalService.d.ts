import Event from 'vs/base/common/event';
import { Builder } from 'vs/base/browser/builder';
import { ICodeEditorService } from 'vs/editor/common/services/codeEditorService';
import { IConfigurationService } from 'vs/platform/configuration/common/configuration';
import { IKeybindingContextKey, IKeybindingService } from 'vs/platform/keybinding/common/keybinding';
import { IMessageService } from 'vs/platform/message/common/message';
import { IPanelService } from 'vs/workbench/services/panel/common/panelService';
import { IPartService } from 'vs/workbench/services/part/common/partService';
import { IStringDictionary } from 'vs/base/common/collections';
import { ITerminalProcess, ITerminalService } from 'vs/workbench/parts/terminal/electron-browser/terminal';
import { IWorkspaceContextService, IWorkspace } from 'vs/platform/workspace/common/workspace';
import { TPromise } from 'vs/base/common/winjs.base';
import { IShell } from 'vs/workbench/parts/terminal/electron-browser/terminalConfigHelper';
export declare class TerminalService implements ITerminalService {
    private codeEditorService;
    private configurationService;
    private keybindingService;
    private messageService;
    private panelService;
    private partService;
    private contextService;
    _serviceBrand: any;
    private activeTerminalIndex;
    private terminalProcesses;
    protected _terminalFocusContextKey: IKeybindingContextKey<boolean>;
    private configHelper;
    private _onActiveInstanceChanged;
    private _onInstancesChanged;
    private _onInstanceTitleChanged;
    constructor(codeEditorService: ICodeEditorService, configurationService: IConfigurationService, keybindingService: IKeybindingService, messageService: IMessageService, panelService: IPanelService, partService: IPartService, contextService: IWorkspaceContextService);
    onActiveInstanceChanged: Event<string>;
    onInstancesChanged: Event<string>;
    onInstanceTitleChanged: Event<string>;
    setActiveTerminal(index: number): TPromise<any>;
    focus(): TPromise<any>;
    focusNext(): TPromise<any>;
    focusPrevious(): TPromise<any>;
    runSelectedText(): TPromise<any>;
    toggle(): TPromise<any>;
    show(): TPromise<any>;
    hide(): TPromise<any>;
    createNew(): TPromise<any>;
    close(): TPromise<any>;
    copySelection(): TPromise<any>;
    paste(): TPromise<any>;
    private showAndGetTerminalPanel();
    getActiveTerminalIndex(): number;
    getTerminalInstanceTitles(): string[];
    initConfigHelper(panelElement: Builder): void;
    killTerminalProcess(terminalProcess: ITerminalProcess): void;
    private createTerminalProcess();
    static createTerminalEnv(parentEnv: IStringDictionary<string>, shell: IShell, workspace: IWorkspace, locale?: string): IStringDictionary<string>;
    private static cloneEnv(env);
    private static getLangEnvVariable(locale);
}
