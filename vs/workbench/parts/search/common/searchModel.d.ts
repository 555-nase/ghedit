import { Disposable } from 'vs/base/common/lifecycle';
import { TPromise, PPromise } from 'vs/base/common/winjs.base';
import URI from 'vs/base/common/uri';
import Event from 'vs/base/common/event';
import * as Search from 'vs/platform/search/common/search';
import { ISearchProgressItem, ISearchComplete, ISearchQuery } from 'vs/platform/search/common/search';
import { ReplacePattern } from 'vs/platform/search/common/replace';
import { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';
import { Range } from 'vs/editor/common/core/range';
import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
import { IModelService } from 'vs/editor/common/services/modelService';
import { IReplaceService } from 'vs/workbench/parts/search/common/replace';
import { IProgressRunner } from 'vs/platform/progress/common/progress';
export declare class Match {
    private _parent;
    private _lineText;
    private _id;
    private _range;
    constructor(_parent: FileMatch, text: string, lineNumber: number, offset: number, length: number);
    id(): string;
    parent(): FileMatch;
    text(): string;
    range(): Range;
    preview(): {
        before: string;
        inside: string;
        after: string;
    };
    replaceString: string;
    getMatchString(): string;
}
export declare class FileMatch extends Disposable {
    private _query;
    private _parent;
    private rawMatch;
    private modelService;
    private replaceService;
    private static getDecorationOption(selected);
    private _onChange;
    onChange: Event<boolean>;
    private _onDispose;
    onDispose: Event<void>;
    private _resource;
    private _model;
    private _modelListener;
    private _matches;
    private _removedMatches;
    private _selectedMatch;
    private _updateScheduler;
    private _modelDecorations;
    constructor(_query: Search.IPatternInfo, _parent: SearchResult, rawMatch: Search.IFileMatch, modelService: IModelService, replaceService: IReplaceService);
    private createMatches();
    private registerListeners();
    private bindModel(model);
    private onModelWillDispose();
    private unbindModel();
    private updateMatches();
    updateHighlights(): void;
    id(): string;
    parent(): SearchResult;
    matches(): Match[];
    remove(match: Match): void;
    replace(match: Match): TPromise<any>;
    setSelectedMatch(match: Match): void;
    getSelectedMatch(): Match;
    isMatchSelected(match: Match): boolean;
    count(): number;
    resource(): URI;
    name(): string;
    add(match: Match, trigger?: boolean): void;
    private removeMatch(match);
    dispose(): void;
}
export interface IChangeEvent {
    elements: FileMatch[];
    added?: boolean;
    removed?: boolean;
}
export declare class SearchResult extends Disposable {
    private _searchModel;
    private replaceService;
    private telemetryService;
    private instantiationService;
    private _onChange;
    onChange: Event<IChangeEvent>;
    private _fileMatches;
    private _unDisposedFileMatches;
    private _query;
    private _showHighlights;
    private _replacingAll;
    constructor(_searchModel: SearchModel, replaceService: IReplaceService, telemetryService: ITelemetryService, instantiationService: IInstantiationService);
    query: Search.IPatternInfo;
    searchModel: SearchModel;
    add(raw: Search.IFileMatch[], silent?: boolean): void;
    clear(): void;
    remove(match: FileMatch): void;
    replace(match: FileMatch): TPromise<any>;
    replaceAll(progressRunner: IProgressRunner): TPromise<any>;
    matches(): FileMatch[];
    isEmpty(): boolean;
    fileCount(): number;
    count(): number;
    showHighlights: boolean;
    toggleHighlights(value: boolean): void;
    private onFileChange(fileMatch);
    private doAdd(fileMatch);
    private doRemove(fileMatch, dispose?, trigger?);
    private disposeMatches();
    dispose(): void;
}
export declare class SearchModel extends Disposable {
    private searchService;
    private telemetryService;
    private instantiationService;
    private _searchResult;
    private _searchQuery;
    private _replaceActive;
    private _replaceString;
    private _replacePattern;
    private currentRequest;
    private progressTimer;
    private doneTimer;
    private timerEvent;
    constructor(searchService: any, telemetryService: ITelemetryService, instantiationService: IInstantiationService);
    isReplaceActive(): boolean;
    replaceActive: boolean;
    replacePattern: ReplacePattern;
    replaceString: string;
    searchResult: SearchResult;
    search(query: ISearchQuery): PPromise<ISearchComplete, ISearchProgressItem>;
    private onSearchCompleted(completed);
    private onSearchError(e);
    private onSearchProgress(p);
    cancelSearch(): boolean;
    dispose(): void;
}
export declare type FileMatchOrMatch = FileMatch | Match;
