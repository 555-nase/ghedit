import 'vs/css!./media/searchviewlet';
import { TPromise } from 'vs/base/common/winjs.base';
import URI from 'vs/base/common/uri';
import { IAction } from 'vs/base/common/actions';
import { Dimension, Builder } from 'vs/base/browser/builder';
import { ITree } from 'vs/base/parts/tree/browser/tree';
import { IEditorGroupService } from 'vs/workbench/services/group/common/groupService';
import { Viewlet } from 'vs/workbench/browser/viewlet';
import { FileMatchOrMatch } from 'vs/workbench/parts/search/common/searchModel';
import { IWorkbenchEditorService } from 'vs/workbench/services/editor/common/editorService';
import { IStorageService } from 'vs/platform/storage/common/storage';
import { IConfigurationService } from 'vs/platform/configuration/common/configuration';
import { IContextViewService } from 'vs/platform/contextview/browser/contextView';
import { IEventService } from 'vs/platform/event/common/event';
import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
import { IMessageService } from 'vs/platform/message/common/message';
import { ISearchService } from 'vs/platform/search/common/search';
import { IProgressService } from 'vs/platform/progress/common/progress';
import { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';
import { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';
import { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';
import { SearchWidget } from 'vs/workbench/parts/search/browser/searchWidget';
import { IReplaceService } from 'vs/workbench/parts/search/common/replace';
export declare class SearchViewlet extends Viewlet {
    private eventService;
    private editorService;
    private editorGroupService;
    private progressService;
    private messageService;
    private storageService;
    private contextViewService;
    private instantiationService;
    private configurationService;
    private contextService;
    private searchService;
    private keybindingService;
    private replaceService;
    private static MAX_TEXT_RESULTS;
    private static SHOW_REPLACE_STORAGE_KEY;
    private isDisposed;
    private toDispose;
    private loading;
    private queryBuilder;
    private viewModel;
    private callOnModelChange;
    private viewletVisible;
    private actionRegistry;
    private tree;
    private viewletSettings;
    private domNode;
    private messages;
    private searchWidgetsContainer;
    private searchWidget;
    private size;
    private queryDetails;
    private inputPatternExclusions;
    private inputPatternGlobalExclusions;
    private inputPatternGlobalExclusionsContainer;
    private inputPatternIncludes;
    private results;
    private currentSelectedFileMatch;
    constructor(telemetryService: ITelemetryService, eventService: IEventService, editorService: IWorkbenchEditorService, editorGroupService: IEditorGroupService, progressService: IProgressService, messageService: IMessageService, storageService: IStorageService, contextViewService: IContextViewService, instantiationService: IInstantiationService, configurationService: IConfigurationService, contextService: IWorkspaceContextService, searchService: ISearchService, keybindingService: IKeybindingService, replaceService: IReplaceService);
    private onConfigurationUpdated(configuration);
    create(parent: Builder): TPromise<void>;
    searchAndReplaceWidget: SearchWidget;
    private createSearchWidget(builder);
    private onReplaceToggled();
    private onSearchResultsChanged(event?);
    private refreshTree(event?);
    private refreshInputs();
    private replaceAll();
    private showMessage(text);
    private createSearchResultsView(builder);
    private updateGlobalPatternExclusions(configuration);
    setVisible(visible: boolean): TPromise<void>;
    focus(): void;
    moveFocusFromResults(): void;
    private reLayout();
    layout(dimension: Dimension): void;
    getControl(): ITree;
    clearSearchResults(): void;
    cancelSearch(): boolean;
    private selectTreeIfNotSelected();
    private getSearchTextFromEditor();
    private showsFileTypes();
    toggleFileTypes(moveFocus?: boolean, show?: boolean, skipLayout?: boolean, reverse?: boolean): void;
    searchInFolder(resource: URI): void;
    onQueryChanged(rerunQuery: boolean, preserveFocus?: boolean): void;
    private autoExpandFileMatch(fileMatch, alwaysExpandIfOneResult);
    private onQueryTriggered(query, excludePattern, includePattern);
    private showEmptyStage();
    private onFocus(lineMatch, preserveFocus?, sideBySide?, pinned?);
    open(element: FileMatchOrMatch, preserveFocus?: boolean, sideBySide?: boolean, pinned?: boolean): TPromise<any>;
    private getSelectionFrom(element);
    private onUntitledFileSaved(e);
    private onFilesChanged(e);
    getActions(): IAction[];
    dispose(): void;
}
