{"version":3,"sources":["vs/workbench/parts/search/browser/openFileHandler.ts"],"names":[],"mappings":"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","file":"vs/workbench/parts/search/browser/openFileHandler.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport nls = require('vs/nls');\nimport paths = require('vs/base/common/paths');\nimport labels = require('vs/base/common/labels');\nimport URI from 'vs/base/common/uri';\nimport {IRange} from 'vs/editor/common/editorCommon';\nimport {IAutoFocus} from 'vs/base/parts/quickopen/common/quickOpen';\nimport {QuickOpenEntry, QuickOpenModel} from 'vs/base/parts/quickopen/browser/quickOpenModel';\nimport {QuickOpenHandler, EditorQuickOpenEntry} from 'vs/workbench/browser/quickopen';\nimport {QueryBuilder} from 'vs/workbench/parts/search/common/searchQuery';\nimport {ITextFileService} from 'vs/workbench/parts/files/common/files';\nimport {EditorInput} from 'vs/workbench/common/editor';\nimport {IResourceInput} from 'vs/platform/editor/common/editor';\nimport {IWorkbenchEditorService} from 'vs/workbench/services/editor/common/editorService';\nimport {IConfigurationService} from 'vs/platform/configuration/common/configuration';\nimport {IInstantiationService} from 'vs/platform/instantiation/common/instantiation';\nimport {IMessageService} from 'vs/platform/message/common/message';\nimport {IQueryOptions, ISearchService} from 'vs/platform/search/common/search';\nimport {IWorkspaceContextService} from 'vs/platform/workspace/common/workspace';\n\nexport class FileEntry extends EditorQuickOpenEntry {\n\tprivate name: string;\n\tprivate description: string;\n\tprivate resource: URI;\n\tprivate range: IRange;\n\n\tconstructor(\n\t\tname: string,\n\t\tdescription: string,\n\t\tresource: URI,\n\t\t@IWorkbenchEditorService editorService: IWorkbenchEditorService,\n\t\t@IInstantiationService private instantiationService: IInstantiationService,\n\t\t@IWorkspaceContextService contextService: IWorkspaceContextService\n\t) {\n\t\tsuper(editorService);\n\n\t\tthis.resource = resource;\n\t\tthis.name = name;\n\t\tthis.description = description;\n\t}\n\n\tpublic getLabel(): string {\n\t\treturn this.name;\n\t}\n\n\tpublic getAriaLabel(): string {\n\t\treturn nls.localize('entryAriaLabel', \"{0}, file picker\", this.getLabel());\n\t}\n\n\tpublic getDescription(): string {\n\t\treturn this.description;\n\t}\n\n\tpublic getIcon(): string {\n\t\treturn 'file';\n\t}\n\n\tpublic getResource(): URI {\n\t\treturn this.resource;\n\t}\n\n\tpublic setRange(range: IRange): void {\n\t\tthis.range = range;\n\t}\n\n\tpublic getInput(): IResourceInput | EditorInput {\n\t\tlet input: IResourceInput = {\n\t\t\tresource: this.resource,\n\t\t};\n\n\t\tif (this.range) {\n\t\t\tinput.options = {\n\t\t\t\tselection: this.range\n\t\t\t};\n\t\t}\n\n\t\treturn input;\n\t}\n}\n\nexport class OpenFileHandler extends QuickOpenHandler {\n\tprivate queryBuilder: QueryBuilder;\n\n\tconstructor(\n\t\t@IWorkbenchEditorService private editorService: IWorkbenchEditorService,\n\t\t@IMessageService private messageService: IMessageService,\n\t\t@IInstantiationService private instantiationService: IInstantiationService,\n\t\t@IConfigurationService private configurationService: IConfigurationService,\n\t\t@IWorkspaceContextService private contextService: IWorkspaceContextService,\n\t\t@ITextFileService private textFileService: ITextFileService,\n\t\t@ISearchService private searchService: ISearchService\n\t) {\n\t\tsuper();\n\n\t\tthis.queryBuilder = this.instantiationService.createInstance(QueryBuilder);\n\t}\n\n\tpublic getResults(searchValue: string): TPromise<QuickOpenModel> {\n\t\tsearchValue = searchValue.trim();\n\t\tlet promise: TPromise<QuickOpenEntry[]>;\n\n\t\t// Respond directly to empty search\n\t\tif (!searchValue) {\n\t\t\tpromise = TPromise.as([]);\n\t\t} else {\n\t\t\tpromise = this.doFindResults(searchValue);\n\t\t}\n\n\t\treturn promise.then(e => new QuickOpenModel(e));\n\t}\n\n\tprivate doFindResults(searchValue: string): TPromise<QuickOpenEntry[]> {\n\t\tconst query: IQueryOptions = {\n\t\t\tfolderResources: this.contextService.getWorkspace() ? [this.contextService.getWorkspace().resource] : [],\n\t\t\textraFileResources: this.textFileService.getWorkingFilesModel().getOutOfWorkspaceContextEntries().map(e => e.resource),\n\t\t\tfilePattern: searchValue\n\t\t};\n\n\t\treturn this.searchService.search(this.queryBuilder.file(query)).then((complete) => {\n\t\t\tlet results: QuickOpenEntry[] = [];\n\t\t\tfor (let i = 0; i < complete.results.length; i++) {\n\t\t\t\tlet fileMatch = complete.results[i];\n\n\t\t\t\tlet label = paths.basename(fileMatch.resource.fsPath);\n\t\t\t\tlet description = labels.getPathLabel(paths.dirname(fileMatch.resource.fsPath), this.contextService);\n\n\t\t\t\tresults.push(this.instantiationService.createInstance(FileEntry, label, description, fileMatch.resource));\n\t\t\t}\n\n\t\t\treturn results;\n\t\t});\n\t}\n\n\tpublic getGroupLabel(): string {\n\t\treturn nls.localize('searchResults', \"search results\");\n\t}\n\n\tpublic getAutoFocus(searchValue: string): IAutoFocus {\n\t\treturn {\n\t\t\tautoFocusFirstEntry: true\n\t\t};\n\t}\n}"]}