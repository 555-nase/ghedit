{"version":3,"file":"vs/workbench/parts/contentprovider/common/contentprovider.contribution.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/workbench/parts/contentprovider/common/contentprovider.contribution.ts"],"names":[],"mappings":";;;;;;;;;;IAAA;;;oGAGgG;IAChG,YAAY,CAAC;IAab,IAAI,cAAc,GAAuD,mBAAQ,CAAC,EAAE,CAAC,wBAAwB,CAAC,UAAU,CAAC,gBAAgB,CAAC,CAAC;IAE3I;QAKC,kCACgB,YAA2B,EAC5B,WAAyB;YAEvC,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;YACjC,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;YAE/B,IAAI,CAAC,KAAK,EAAE,CAAC;QACd,CAAC;QAEM,wCAAK,GAAZ;YACC,MAAM,CAAC,oBAAoB,CAAC;QAC7B,CAAC;QAEO,wCAAK,GAAb;YAAA,iBAkBC;YAjBA,yCAAmB,CAAC,+BAA+B,CAAC,QAAQ,EAAE;gBAC7D,kBAAkB,EAAE,UAAC,GAAQ;oBAC5B,EAAE,CAAC,CAAC,GAAG,CAAC,MAAM,KAAK,QAAQ,CAAC,CAAC,CAAC;wBAC7B,MAAM,CAAC,IAAI,CAAC;oBACb,CAAC;oBACD,EAAE,CAAC,CAAC,GAAG,CAAC,SAAS,KAAK,SAAS,CAAC,CAAC,CAAC;wBACjC,IAAI,OAAO,GAAG,cAAc,CAAC,sBAAsB,EAAE,CAAC,OAAO,CAAC;wBAC9D,IAAI,MAAM,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC;wBACrC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;4BACZ,IAAI,YAAY,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;4BAC1C,IAAI,IAAI,GAAG,KAAI,CAAC,WAAW,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;4BACpD,MAAM,CAAC,qBAAQ,CAAC,EAAE,CAAC,KAAI,CAAC,YAAY,CAAC,WAAW,CAAC,YAAY,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC;wBAC5E,CAAC;oBACF,CAAC;oBACD,MAAM,CAAC,IAAI,CAAC;gBACb,CAAC;aACD,CAAC,CAAC;QACJ,CAAC;QA/BA;uBAAC,4BAAa;uBACb,0BAAY;oCADC;QAgChB,+BAAC;IAAD,CAAC,AAtCD,IAsCC;IAtCY,gCAAwB,2BAsCpC,CAAA;IAEiC,mBAAQ,CAAC,EAAE,CAAC,0BAAmB,CAAC,SAAS,CAAE,CAAC,6BAA6B,CAAC,wBAAwB,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {ResourceEditorInput} from 'vs/workbench/common/editor/resourceEditorInput';\nimport {IModelService} from 'vs/editor/common/services/modelService';\nimport {IModeService} from 'vs/editor/common/services/modeService';\nimport URI from 'vs/base/common/uri';\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport {IModel} from 'vs/editor/common/editorCommon';\nimport JSONContributionRegistry = require('vs/platform/jsonschemas/common/jsonContributionRegistry');\nimport {Registry} from 'vs/platform/platform';\nimport {IWorkbenchContribution} from 'vs/workbench/common/contributions';\nimport {IWorkbenchContributionsRegistry, Extensions as WorkbenchExtensions} from 'vs/workbench/common/contributions';\n\nlet schemaRegistry = <JSONContributionRegistry.IJSONContributionRegistry>Registry.as(JSONContributionRegistry.Extensions.JSONContribution);\n\nexport class WorkbenchContentProvider implements IWorkbenchContribution {\n\n\tprivate modelService: IModelService;\n\tprivate modeService: IModeService;\n\n\tconstructor(\n\t\t@IModelService modelService: IModelService,\n\t\t@IModeService modeService: IModeService\n\t) {\n\t\tthis.modelService = modelService;\n\t\tthis.modeService = modeService;\n\n\t\tthis.start();\n\t}\n\n\tpublic getId(): string {\n\t\treturn 'vs.contentprovider';\n\t}\n\n\tprivate start(): void {\n\t\tResourceEditorInput.registerResourceContentProvider('vscode', {\n\t\t\tprovideTextContent: (uri: URI): TPromise<IModel> => {\n\t\t\t\tif (uri.scheme !== 'vscode') {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\tif (uri.authority === 'schemas') {\n\t\t\t\t\tlet schemas = schemaRegistry.getSchemaContributions().schemas;\n\t\t\t\t\tlet schema = schemas[uri.toString()];\n\t\t\t\t\tif (schema) {\n\t\t\t\t\t\tlet modelContent = JSON.stringify(schema);\n\t\t\t\t\t\tlet mode = this.modeService.getOrCreateMode('json');\n\t\t\t\t\t\treturn TPromise.as(this.modelService.createModel(modelContent, mode, uri));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\t}\n\t\t});\n\t}\n}\n\n(<IWorkbenchContributionsRegistry>Registry.as(WorkbenchExtensions.Workbench)).registerWorkbenchContribution(WorkbenchContentProvider);"]}