{"version":3,"file":"vs/workbench/parts/output/common/outputMode.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/workbench/parts/output/common/outputMode.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;IAAA;;;oGAGgG;IAChG,YAAY,CAAC;IAiBA,gBAAQ,GAAoB;QACxC,WAAW,EAAE,KAAK;QAClB,IAAI,EAAE,KAAK;QACX,YAAY,EAAE,EAAE;QAChB,UAAU,EAAE,IAAI;QAEhB,SAAS,EAAE;YACV,IAAI,EAAE;gBAEL,oBAAoB;gBACpB,CAAC,uBAAuB,EAAE,oBAAoB,CAAC;gBAC/C,CAAC,qBAAqB,EAAE,oBAAoB,CAAC;gBAC7C,CAAC,uBAAuB,EAAE,oBAAoB,CAAC;gBAC/C,CAAC,2BAA2B,EAAE,oBAAoB,CAAC;gBACnD,CAAC,mCAAmC,EAAE,mBAAmB,CAAC;gBAC1D,CAAC,qBAAqB,EAAE,mBAAmB,CAAC;gBAC5C,CAAC,2BAA2B,EAAE,mBAAmB,CAAC;gBAClD,CAAC,qBAAqB,EAAE,mBAAmB,CAAC;gBAC5C,CAAC,uBAAuB,EAAE,oBAAoB,CAAC;gBAC/C,CAAC,uBAAuB,EAAE,oBAAoB,CAAC;aAC/C;SACD;KACD,CAAC;IAEF;QAAgC,8BAAW;QAM1C,oBACC,UAA0B,EACH,oBAA2C,EACpD,WAAyB,EACxB,YAA2B,EACpB,mBAAyC;YAE/D,kBAAM,UAAU,CAAC,EAAE,EAAE,wBAAO,CAAC,gBAAQ,CAAC,EAAE,WAAW,EAAE,YAAY,EAAE,mBAAmB,CAAC,CAAC;YACxF,IAAI,CAAC,kBAAkB,GAAG,IAAI,gCAAiB,CAAe,UAAU,EAAE,+CAA+C,EAAE,cAAc,EAAE,IAAI,EAAE,oBAAoB,CAAC,CAAC;YAEvK,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QACzB,CAAC;QAEO,4BAAO,GAAf,UAAmB,MAA+C;YACjE,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QAC/C,CAAC;QAGM,iCAAY,GAAnB,UAAoB,QAAY;YAC/B,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,UAAC,CAAC,IAAK,OAAA,CAAC,CAAC,YAAY,CAAC,QAAQ,CAAC,EAAxB,CAAwB,CAAC,CAAC;QACtD,CAAC;QAHM,wBAAa,GAAG,6BAAa,CAAC,UAAU,EAAE,UAAU,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;QAfnF;uBAAC,qCAAqB;uBACrB,0BAAY;uBACZ,4BAAa;uBACb,0CAAoB;sBAHC;QAmBxB,iBAAC;IAAD,CAAC,AA3BD,CAAgC,qBAAW,GA2B1C;IA3BY,kBAAU,aA2BtB,CAAA","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {MonarchMode} from 'vs/editor/common/modes/monarch/monarch';\nimport types = require('vs/editor/common/modes/monarch/monarchTypes');\nimport {compile} from 'vs/editor/common/modes/monarch/monarchCompile';\nimport {IModeDescriptor} from 'vs/editor/common/modes';\nimport {IInstantiationService} from 'vs/platform/instantiation/common/instantiation';\nimport {IModelService} from 'vs/editor/common/services/modelService';\nimport {IModeService} from 'vs/editor/common/services/modeService';\nimport {OutputWorker} from 'vs/workbench/parts/output/common/outputWorker';\nimport winjs = require('vs/base/common/winjs.base');\nimport {OneWorkerAttr} from 'vs/platform/thread/common/threadService';\nimport URI from 'vs/base/common/uri';\nimport Modes = require('vs/editor/common/modes');\nimport {IEditorWorkerService} from 'vs/editor/common/services/editorWorkerService';\nimport {ModeWorkerManager} from 'vs/editor/common/modes/abstractMode';\n\nexport const language: types.ILanguage = {\n\tdisplayName: 'Log',\n\tname: 'Log',\n\tdefaultToken: '',\n\tignoreCase: true,\n\n\ttokenizer: {\n\t\troot: [\n\n\t\t\t// Monaco log levels\n\t\t\t[/^\\[trace.*?\\]|trace:?/, 'debug-token.output'],\n\t\t\t[/^\\[http.*?\\]|http:?/, 'debug-token.output'],\n\t\t\t[/^\\[debug.*?\\]|debug:?/, 'debug-token.output'],\n\t\t\t[/^\\[verbose.*?\\]|verbose:?/, 'debug-token.output'],\n\t\t\t[/^\\[information.*?\\]|information:?/, 'info-token.output'],\n\t\t\t[/^\\[info.*?\\]|info:?/, 'info-token.output'],\n\t\t\t[/^\\[warning.*?\\]|warning:?/, 'warn-token.output'],\n\t\t\t[/^\\[warn.*?\\]|warn:?/, 'warn-token.output'],\n\t\t\t[/^\\[error.*?\\]|error:?/, 'error-token.output'],\n\t\t\t[/^\\[fatal.*?\\]|fatal:?/, 'error-token.output']\n\t\t]\n\t}\n};\n\nexport class OutputMode extends MonarchMode {\n\n\tpublic linkSupport:Modes.ILinkSupport;\n\n\tprivate _modeWorkerManager: ModeWorkerManager<OutputWorker>;\n\n\tconstructor(\n\t\tdescriptor:IModeDescriptor,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IModeService modeService: IModeService,\n\t\t@IModelService modelService: IModelService,\n\t\t@IEditorWorkerService editorWorkerService: IEditorWorkerService\n\t) {\n\t\tsuper(descriptor.id, compile(language), modeService, modelService, editorWorkerService);\n\t\tthis._modeWorkerManager = new ModeWorkerManager<OutputWorker>(descriptor, 'vs/workbench/parts/output/common/outputWorker', 'OutputWorker', null, instantiationService);\n\n\t\tthis.linkSupport = this;\n\t}\n\n\tprivate _worker<T>(runner:(worker:OutputWorker)=>winjs.TPromise<T>): winjs.TPromise<T> {\n\t\treturn this._modeWorkerManager.worker(runner);\n\t}\n\n\tstatic $computeLinks = OneWorkerAttr(OutputMode, OutputMode.prototype.computeLinks);\n\tpublic computeLinks(resource:URI):winjs.TPromise<Modes.ILink[]> {\n\t\treturn this._worker((w) => w.computeLinks(resource));\n\t}\n}\n"]}