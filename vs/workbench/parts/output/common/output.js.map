{"version":3,"file":"vs/workbench/parts/output/common/output.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/workbench/parts/output/common/output.ts"],"names":[],"mappings":";IAAA;;;oGAGgG;IAChG,YAAY,CAAC;IAQb;;OAEG;IACU,mBAAW,GAAG,sBAAsB,CAAC;IAElD;;OAEG;IACU,sBAAc,GAAG,KAAK,CAAC;IAEpC;;OAEG;IACU,8BAAsB,GAAG,WAAW,CAAC;IAElD;;OAEG;IACU,uBAAe,GAAG,wBAAwB,CAAC;IAE3C,kBAAU,GAAG;QACzB,cAAc,EAAE,wCAAwC;KACxD,CAAC;IAEW,yBAAiB,GAAG,eAAe,CAAC;IAEpC,yBAAiB,GAAG,KAAK,CAAC,mDAAmD,GAAG,GAAG,CAAkC;IAUvH,sBAAc,GAAG,+BAAe,CAAiB,yBAAiB,CAAC,CAAC;IAkF/E;QAGC;YACC,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;QACpB,CAAC;QAEM,+CAAe,GAAtB,UAAuB,EAAU,EAAE,KAAa;YAC/C,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,UAAA,OAAO,IAAI,OAAA,OAAO,CAAC,EAAE,KAAK,EAAE,EAAjB,CAAiB,CAAC,CAAC,CAAC,CAAC;gBACvD,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,IAAA,EAAE,EAAE,OAAA,KAAK,EAAE,CAAC,CAAC;YACnC,CAAC;QACF,CAAC;QAEM,2CAAW,GAAlB;YACC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;QACtB,CAAC;QACF,4BAAC;IAAD,CAAC,AAhBD,IAgBC;IAED,mBAAQ,CAAC,GAAG,CAAC,kBAAU,CAAC,cAAc,EAAE,IAAI,qBAAqB,EAAE,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport Event from 'vs/base/common/event';\nimport {Registry} from 'vs/platform/platform';\nimport {createDecorator, ServiceIdentifier} from 'vs/platform/instantiation/common/instantiation';\nimport {IEditor} from 'vs/platform/editor/common/editor';\n\n/**\n * Mime type used by the output editor.\n */\nexport const OUTPUT_MIME = 'text/x-monaco-output';\n\n/**\n * Id used by the output editor.\n */\nexport const OUTPUT_MODE_ID = 'Log';\n\n/**\n * Output editor input id.\n */\nexport const OUTPUT_EDITOR_INPUT_ID = 'vs.output';\n\n/**\n * Output panel id\n */\nexport const OUTPUT_PANEL_ID = 'workbench.panel.output';\n\nexport const Extensions = {\n\tOutputChannels: 'workbench.contributions.outputChannels'\n};\n\nexport const OUTPUT_SERVICE_ID = 'outputService';\n\nexport const MAX_OUTPUT_LENGTH = 10000 /* Max. number of output lines to show in output */ * 100 /* Guestimated chars per line */;\n\n/**\n * The output event informs when new output got received.\n */\nexport interface IOutputEvent {\n\toutput: string;\n\tchannelId?: string;\n}\n\nexport var IOutputService = createDecorator<IOutputService>(OUTPUT_SERVICE_ID);\n\n/**\n * The output service to manage output from the various processes running.\n */\nexport interface IOutputService {\n\tserviceId: ServiceIdentifier<any>;\n\n\t/**\n\t * Given the channel id returns the output channel instance.\n\t * Channel should be first registered via OutputChannelRegistry.\n\t */\n\tgetChannel(id: string): IOutputChannel;\n\n\t/**\n\t * Returns the currently active channel.\n\t * Only one channel can be active at a given moment.\n\t */\n\tgetActiveChannel(): IOutputChannel;\n\n\t/**\n\t * Allows to register on Output events.\n\t */\n\tonOutput: Event<IOutputEvent>;\n\n\t/**\n\t * Allows to register on a new Output channel getting filled with output.\n\t */\n\tonOutputChannel: Event<string>;\n\n\t/**\n\t * Allows to register on active output channel change.\n\t */\n\tonActiveOutputChannel: Event<string>;\n}\n\nexport interface IOutputChannel {\n\n\t/**\n\t * Identifier of the output channel.\n\t */\n\tid: string;\n\n\t/**\n\t * Label of the output channel to be displayed to the user.\n\t */\n\tlabel: string;\n\n\t/**\n\t * Returns the received output content.\n\t */\n\toutput: string;\n\n\t/**\n\t * Appends output to the channel.\n\t */\n\tappend(output: string): void;\n\n\t/**\n\t * Opens the output for this channel.\n\t */\n\tshow(preserveFocus?: boolean): TPromise<IEditor>;\n\n\t/**\n\t * Clears all received output for this channel.\n\t */\n\tclear(): void;\n}\n\nexport interface IOutputChannelRegistry {\n\n\t/**\n\t * Make an output channel known to the output world.\n\t */\n\tregisterChannel(id: string, name: string): void;\n\n\t/**\n\t * Returns the list of channels known to the output world.\n\t */\n\tgetChannels(): { id: string, label: string}[];\n}\n\nclass OutputChannelRegistry implements IOutputChannelRegistry {\n\tprivate channels: { id: string, label: string }[];\n\n\tconstructor() {\n\t\tthis.channels = [];\n\t}\n\n\tpublic registerChannel(id: string, label: string): void {\n\t\tif (this.channels.every(channel => channel.id !== id)) {\n\t\t\tthis.channels.push({ id, label });\n\t\t}\n\t}\n\n\tpublic getChannels(): { id: string, label: string}[] {\n\t\treturn this.channels;\n\t}\n}\n\nRegistry.add(Extensions.OutputChannels, new OutputChannelRegistry());\n"]}