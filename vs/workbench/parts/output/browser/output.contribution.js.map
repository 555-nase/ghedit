{"version":3,"sources":["vs/workbench/parts/output/browser/output.contribution.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;IAgBhG,mBAAmB;IACnB,8BAAiB,CAAC,uBAAc,EAAE,8BAAa,CAAC,CAAC;IAEjD,uBAAuB;IACvB,6BAAa,CAAC,kBAAkB,CAAC;QAChC,EAAE,EAAE,uBAAc;QAClB,UAAU,EAAE,EAAE;QACd,OAAO,EAAE,CAAC,IAAI,CAAC;QACf,SAAS,EAAE,CAAC,oBAAW,CAAC;QACxB,QAAQ,EAAE,6CAA6C;QACvD,QAAQ,EAAE,YAAY;KACtB,CAAC,CAAC;IAEH,wBAAwB;IACF,QAAQ,CAAC,QAAQ,CAAC,EAAE,CAAC,KAAK,CAAC,UAAU,CAAC,MAAM,CAAE,CAAC,aAAa,CAAC,IAAI,KAAK,CAAC,eAAe,CAC3G,+CAA+C,EAC/C,aAAa,EACb,wBAAe,EACf,GAAG,CAAC,QAAQ,CAAC,CAAQ,EAAE,IAAQ,CAAC,EAChC,QAAQ,CACR,CAAC,CAAC;IAEH,yCAAyC;IACzC,IAAI,cAAc,GAA6B,QAAQ,CAAC,QAAQ,CAAC,EAAE,CAAC,2BAAgB,CAAC,gBAAgB,CAAC,CAAC;IACvG,cAAc,CAAC,uBAAuB,CAAC,IAAI,8BAAoB,CAAC,kCAAkB,EAAE,kCAAkB,CAAC,EAAE,EAAE,kCAAkB,CAAC,KAAK,EAAE;QACpI,OAAO,EAAE,iBAAM,CAAC,OAAO,GAAG,iBAAM,CAAC,KAAK,GAAG,kBAAO,CAAC,KAAK;QACtD,KAAK,EAAE;YACN,OAAO,EAAE,iBAAM,CAAC,OAAO,GAAG,iBAAM,CAAC,KAAK,GAAG,kBAAO,CAAC,KAAK,CAAE,4DAA4D;SACpH;KACD,CAAC,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAc,EAAE,IAAM,CAAC,CAAC,CAAC;IAE1C,8CAA8C;IAC9C,6CAAoB,CAAC,oBAAoB,CAAC,IAAI,+CAAsB,CAAC,uCAAuB,EAAE,uCAAuB,CAAC,EAAE,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAmB,EAAE,IAAc,CAAC,CAAC,CAAC,CAAC","file":"vs/workbench/parts/output/browser/output.contribution.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport 'vs/css!../browser/media/output.contribution';\nimport nls = require('vs/nls');\nimport {KeyMod, KeyCode} from 'vs/base/common/keyCodes';\nimport {CommonEditorRegistry, EditorActionDescriptor} from 'vs/editor/common/editorCommonExtensions';\nimport {ModesRegistry} from 'vs/editor/common/modes/modesRegistry';\nimport platform = require('vs/platform/platform');\nimport {SyncActionDescriptor} from 'vs/platform/actions/common/actions';\nimport {registerSingleton} from 'vs/platform/instantiation/common/extensions';\nimport {IWorkbenchActionRegistry, Extensions as ActionExtensions} from 'vs/workbench/common/actionRegistry';\nimport {OutputService} from 'vs/workbench/parts/output/common/outputServices';\nimport {ClearOutputEditorAction, ToggleOutputAction} from 'vs/workbench/parts/output/browser/outputActions';\nimport {OUTPUT_MIME, OUTPUT_MODE_ID, OUTPUT_PANEL_ID, IOutputService} from 'vs/workbench/parts/output/common/output';\nimport panel = require('vs/workbench/browser/panel');\n\n// Register Service\nregisterSingleton(IOutputService, OutputService);\n\n// Register Output Mode\nModesRegistry.registerCompatMode({\n\tid: OUTPUT_MODE_ID,\n\textensions: [],\n\taliases: [null],\n\tmimetypes: [OUTPUT_MIME],\n\tmoduleId: 'vs/workbench/parts/output/common/outputMode',\n\tctorName: 'OutputMode'\n});\n\n// Register Output Panel\n(<panel.PanelRegistry>platform.Registry.as(panel.Extensions.Panels)).registerPanel(new panel.PanelDescriptor(\n\t'vs/workbench/parts/output/browser/outputPanel',\n\t'OutputPanel',\n\tOUTPUT_PANEL_ID,\n\tnls.localize('output', \"Output\"),\n\t'output'\n));\n\n// register toggle output action globally\nlet actionRegistry = <IWorkbenchActionRegistry>platform.Registry.as(ActionExtensions.WorkbenchActions);\nactionRegistry.registerWorkbenchAction(new SyncActionDescriptor(ToggleOutputAction, ToggleOutputAction.ID, ToggleOutputAction.LABEL, {\n\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KEY_U,\n\tlinux: {\n\t\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KEY_H  // On Ubuntu Ctrl+Shift+U is taken by some global OS command\n\t}\n}), nls.localize('viewCategory', \"View\"));\n\n// Contribute to Context Menu of Output Window\nCommonEditorRegistry.registerEditorAction(new EditorActionDescriptor(ClearOutputEditorAction, ClearOutputEditorAction.ID, nls.localize('clearOutput.label', \"Clear Output\")));\n"]}