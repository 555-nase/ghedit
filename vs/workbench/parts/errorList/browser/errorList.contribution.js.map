{"version":3,"sources":["vs/workbench/parts/errorList/browser/errorList.contribution.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;;;;IAchG;QAAoC,yCAAM;QAKzC,+BAAY,EAAU,EAAE,KAAa,EACd,WAAyB,EACxB,YAA2B;YAElD,kBAAM,EAAE,EAAE,KAAK,CAAC,CAAC;YAHK,gBAAW,GAAX,WAAW,CAAc;YACxB,iBAAY,GAAZ,YAAY,CAAe;QAGnD,CAAC;QAEM,mCAAG,GAAV,UAAW,KAAW;YACrB,IAAM,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,cAAc,EAAE,CAAC;YACjD,EAAE,CAAC,CAAC,KAAK,IAAI,KAAK,CAAC,KAAK,EAAE,KAAK,wCAAmB,CAAC,CAAC,CAAC;gBACpD,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;gBAEtC,MAAM,CAAC,qBAAQ,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;YAC1B,CAAC;YAED,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,wCAAmB,EAAE,IAAI,CAAC,CAAC;QAC/D,CAAC;QAnBa,wBAAE,GAAG,mCAAmC,CAAC;QACzC,2BAAK,GAAG,GAAG,CAAC,QAAQ,CAAC,CAAiB,EAAE,IAAmB,CAAC,CAAC;QAG1E;uBAAC,0BAAY;uBACZ,4BAAa;iCADD;QAgBf,4BAAC;IAAD,CAtBA,AAsBC,CAtBmC,gBAAM,GAsBzC;IAED,iBAAiB;IACK,QAAQ,CAAC,QAAQ,CAAC,EAAE,CAAC,KAAK,CAAC,UAAU,CAAC,MAAM,CAAE,CAAC,aAAa,CAAC,IAAI,KAAK,CAAC,eAAe,CAC3G,gDAAgD,EAChD,WAAW,EACX,wCAAmB,EACnB,GAAG,CAAC,QAAQ,CAAC,CAAgB,EAAE,IAAY,CAAC,EAC5C,WAAW,CACX,CAAC,CAAC;;AAGH,yCAAyC;AACzC,0GAA0G;AAC1G,kJAAkJ;AAClJ,2DAA2D;AAC3D,YAAY;AACZ,2DAA2D;AAC3D,KAAK;AACL,6CAA6C","file":"vs/workbench/parts/errorList/browser/errorList.contribution.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport nls = require('vs/nls');\nimport { Action } from 'vs/base/common/actions';\nimport { TPromise } from 'vs/base/common/winjs.base';\n// import { KeyMod, KeyCode } from 'vs/base/common/keyCodes';\nimport platform = require('vs/platform/platform');\n// import { SyncActionDescriptor } from 'vs/platform/actions/common/actions';\n// import { IWorkbenchActionRegistry, Extensions as ActionExtensions } from 'vs/workbench/common/actionRegistry';\nimport panel = require('vs/workbench/browser/panel');\nimport { ERROR_LIST_PANEL_ID } from 'vs/workbench/parts/errorList/browser/errorListConstants';\nimport { IPartService } from 'vs/workbench/services/part/common/partService';\nimport { IPanelService } from 'vs/workbench/services/panel/common/panelService';\n\nclass ToggleErrorListAction extends Action {\n\n\tpublic static ID = 'workbench.action.errorList.toggle';\n\tpublic static LABEL = nls.localize('toggleErrorList', \"Toggle Error List\");\n\n\tconstructor(id: string, label: string,\n\t\t@IPartService private partService: IPartService,\n\t\t@IPanelService private panelService: IPanelService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\tpublic run(event?: any): TPromise<any> {\n\t\tconst panel = this.panelService.getActivePanel();\n\t\tif (panel && panel.getId() === ERROR_LIST_PANEL_ID) {\n\t\t\tthis.partService.setPanelHidden(true);\n\n\t\t\treturn TPromise.as(null);\n\t\t}\n\n\t\treturn this.panelService.openPanel(ERROR_LIST_PANEL_ID, true);\n\t}\n}\n\n// register panel\n(<panel.PanelRegistry>platform.Registry.as(panel.Extensions.Panels)).registerPanel(new panel.PanelDescriptor(\n\t'vs/workbench/parts/errorList/browser/errorList',\n\t'ErrorList',\n\tERROR_LIST_PANEL_ID,\n\tnls.localize('errorListPanel', \"Error List\"),\n\t'errorList'\n));\n\n\n// register toggle output action globally\n// let actionRegistry = <IWorkbenchActionRegistry>platform.Registry.as(ActionExtensions.WorkbenchActions);\n// actionRegistry.registerWorkbenchAction(new SyncActionDescriptor(ToggleErrorListAction, ToggleErrorListAction.ID, ToggleErrorListAction.LABEL, {\n// \tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KEY_A,\n// \tlinux: {\n// \t\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KEY_A\n// \t}\n// }), nls.localize('viewCategory', \"View\"));\n"]}