{"version":3,"sources":["vs/workbench/parts/tasks/node/processRunnerConfiguration.ts"],"names":[],"mappings":"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","file":"vs/workbench/parts/tasks/node/processRunnerConfiguration.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport nls = require('vs/nls');\n\nimport * as Objects from 'vs/base/common/objects';\nimport { IStringDictionary } from 'vs/base/common/collections';\nimport * as Platform from 'vs/base/common/platform';\nimport * as Types from 'vs/base/common/types';\nimport * as UUID from 'vs/base/common/uuid';\nimport { Config as ProcessConfig } from 'vs/base/common/processes';\n\nimport { ValidationStatus, ValidationState, ILogger } from 'vs/base/common/parsers';\nimport { NamedProblemMatcher, ProblemMatcher, ProblemMatcherParser, Config as ProblemMatcherConfig, registry as ProblemMatcherRegistry, isNamedProblemMatcher } from 'vs/platform/markers/common/problemMatcher';\nimport * as TaskSystem from 'vs/workbench/parts/tasks/common/taskSystem';\n\n/**\n * Defines the problem handling strategy\n */\nexport class ProblemHandling {\n\t/**\n\t * Cleans all problems for the owner defined in the\n\t * error pattern.\n\t */\n\tpublic static clean: string = 'cleanMatcherMatchers';\n}\n\nexport namespace ShowOutput {\n\t// let always: string = 'always';\n\t// let silent: string = 'silent';\n\t// let never: string = 'never';\n}\n\n/**\n * The description of a task.\n */\nexport interface TaskDescription {\n\n\t/**\n\t * The task's name\n\t */\n\ttaskName: string;\n\n\t/**\n\t * Additional arguments passed to the command when this task is\n\t * executed.\n\t */\n\targs?: string[];\n\n\t/**\n\t * Whether the executed command is kept alive and is watching the file system.\n\t */\n\tisWatching?:boolean;\n\n\t/**\n\t * Whether the task should prompt on close for confirmation if running.\n\t */\n\tpromptOnClose?: boolean;\n\n\t/**\n\t * Whether this task maps to the default build command.\n\t */\n\tisBuildCommand?:boolean;\n\n\t/**\n\t * Whether this task maps to the default test command.\n\t */\n\tisTestCommand?: boolean;\n\n\t/**\n\t * Controls whether the output view of the running tasks is brought to front or not.\n\t * See BaseTaskRunnerConfiguration#showOutput for details.\n\t */\n\tshowOutput?: string;\n\n\t/**\n\t * Controls whether the executed command is printed to the output windows as well.\n\t */\n\techoCommand?: boolean;\n\n\t/**\n\t * See BaseTaskRunnerConfiguration#suppressTaskName for details.\n\t */\n\tsuppressTaskName?: boolean;\n\n\t/**\n\t * The problem matcher(s) to use to capture problems in the tasks\n\t * output.\n\t */\n\tproblemMatcher?: ProblemMatcherConfig.ProblemMatcherType;\n}\n\n/**\n * The base task runner configuration\n */\nexport interface BaseTaskRunnerConfiguration extends TaskSystem.TaskConfiguration {\n\n\t/**\n\t * The command to be executed. Can be an external program or a shell\n\t * command.\n\t */\n\tcommand?: string;\n\n\t/**\n\t * Specifies whether the command is a shell command and therefore must\n\t * be executed in a shell interpreter (e.g. cmd.exe, bash, ...).\n\t *\n\t * Defaults to false if omitted.\n\t */\n\tisShellCommand?: boolean;\n\n\t/**\n\t * The command options used when the command is executed. Can be omitted.\n\t */\n\toptions?: ProcessConfig.CommandOptions;\n\n\t/**\n\t * The arguments passed to the command. Can be omitted.\n\t */\n\targs?: string[];\n\n\t/**\n\t * Controls whether the output view of the running tasks is brought to front or not.\n\t * Valid values are:\n\t *   \"always\": bring the output window always to front when a task is executed.\n\t *   \"silent\": only bring it to front if no problem matcher is defined for the task executed.\n\t *   \"never\": never bring the output window to front.\n\t *\n\t * If omitted \"always\" is used.\n\t */\n\tshowOutput?: string;\n\n\t/**\n\t * Controls whether the executed command is printed to the output windows as well.\n\t */\n\techoCommand?: boolean;\n\n\t/**\n\t * If set to false the task name is added as an additional argument to the\n\t * command when executed. If set to true the task name is suppressed. If\n\t * omitted false is used.\n\t */\n\tsuppressTaskName?: boolean;\n\n\t/**\n\t * Some commands require that the task argument is highlighted with a special\n\t * prefix (e.g. /t: for msbuild). This property can be used to control such\n\t * a prefix.\n\t */\n\ttaskSelector?:string;\n\n\t/**\n\t * The problem matcher(s) to used if a global command is exucuted (e.g. no tasks\n\t * are defined). A tasks.json file can either contain a global problemMatcher\n\t * property or a tasks property but not both.\n\t */\n\tproblemMatcher?: ProblemMatcherConfig.ProblemMatcherType;\n\n\t/**\n\t * Specifies whether a global command is a watching the filesystem. A task.json\n\t * file can iether contains a global isWatching property or a tasks property\n\t * but not both.\n\t */\n\tisWatching?: boolean;\n\n\t/**\n\t * Whether the task should prompt on close for confirmation if running.\n\t */\n\tpromptOnClose?: boolean;\n\n\t/**\n\t * The configuration of the available tasks. A tasks.json file can either\n\t * contain a global problemMatcher property or a tasks property but not both.\n\t */\n\ttasks?: TaskDescription[];\n\n\t/**\n\t * Problem matcher declarations\n\t */\n\tdeclares?: ProblemMatcherConfig.NamedProblemMatcher[];\n}\n\n/**\n * A configuration of an external build system. BuildConfiguration.buildSystem\n * must be set to 'program'\n */\nexport interface ExternalTaskRunnerConfiguration extends BaseTaskRunnerConfiguration {\n\n\t/**\n\t * The config's version number\n\t */\n\tversion: string;\n\n\t/**\n\t * Windows specific task configuration\n\t */\n\twindows?: BaseTaskRunnerConfiguration;\n\n\t/**\n\t * Mac specific task configuration\n\t */\n\tosx?: BaseTaskRunnerConfiguration;\n\n\t/**\n\t * Linux speciif task configuration\n\t */\n\tlinux?: BaseTaskRunnerConfiguration;\n}\n\nenum ProblemMatcherKind {\n\tUnknown,\n\tString,\n\tProblemMatcher,\n\tArray\n}\n\ninterface Globals {\n\tcommand?: string;\n\tisShellCommand?: boolean;\n\ttaskSelector?: string;\n\tsuppressTaskName?: boolean;\n\tshowOutput?: TaskSystem.ShowOutput;\n\techoCommand?: boolean;\n}\n\ninterface ParseContext {\n\tisMain: boolean;\n\tglobals: Globals;\n}\n\nexport interface ParseResult {\n\tvalidationStatus: ValidationStatus;\n\tconfiguration: TaskSystem.TaskRunnerConfiguration;\n\tdefaultBuildTaskIdentifier: string;\n\tdefaultTestTaskIdentifier: string;\n}\n\nexport interface ILogger {\n\tlog(value:string):void;\n}\n\nclass ConfigurationParser {\n\n\tprivate validationStatus: ValidationStatus;\n\tprivate defaultBuildTaskIdentifier: string;\n\tprivate defaultTestTaskIdentifier: string;\n\n\tprivate logger:ILogger;\n\tprivate namedProblemMatchers: IStringDictionary<NamedProblemMatcher>;\n\n\tconstructor(logger: ILogger) {\n\t\tthis.logger = logger;\n\t\tthis.validationStatus = new ValidationStatus();\n\t\tthis.namedProblemMatchers = Object.create(null);\n\t}\n\n\tprivate log(value: string): void {\n\t\tthis.logger.log(value);\n\t}\n\n\tpublic run(fileConfig: ExternalTaskRunnerConfiguration): ParseResult {\n\t\treturn {\n\t\t\tvalidationStatus: this.validationStatus,\n\t\t\tconfiguration: this.createTaskRunnerConfiguration(fileConfig),\n\t\t\tdefaultBuildTaskIdentifier: this.defaultBuildTaskIdentifier,\n\t\t\tdefaultTestTaskIdentifier: this.defaultTestTaskIdentifier\n\t\t};\n\t}\n\n\tprivate createTaskRunnerConfiguration(fileConfig: ExternalTaskRunnerConfiguration): TaskSystem.TaskRunnerConfiguration {\n\t\tlet globals = this.createGlobals(fileConfig);\n\t\tlet result = this.createBaseTaskRunnerConfiguration(fileConfig, { isMain: true, globals: globals });\n\t\tif (!this.validationStatus.isFatal()) {\n\t\t\tlet osConfig: TaskSystem.BaseTaskRunnerConfiguration = null;\n\t\t\tlet osContext: ParseContext = { isMain: false, globals: globals };\n\t\t\tif (fileConfig.windows && Platform.platform === Platform.Platform.Windows) {\n\t\t\t\tosConfig = this.createBaseTaskRunnerConfiguration(fileConfig.windows, osContext);\n\t\t\t} else if (fileConfig.osx && Platform.platform === Platform.Platform.Mac) {\n\t\t\t\tosConfig = this.createBaseTaskRunnerConfiguration(fileConfig.osx, osContext);\n\t\t\t} else if (fileConfig.linux && Platform.platform === Platform.Platform.Linux) {\n\t\t\t\tosConfig = this.createBaseTaskRunnerConfiguration(fileConfig.linux, osContext);\n\t\t\t}\n\t\t\tif (!this.validationStatus.isFatal()) {\n\t\t\t\tif (osConfig) {\n\t\t\t\t\tthis.mergeTaskRunnerConigurations(result, osConfig);\n\t\t\t\t}\n\t\t\t\tif (Types.isUndefined(result.options.cwd)) {\n\t\t\t\t\tresult.options.cwd = '${workspaceRoot}';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (!result.command) {\n\t\t\tthis.validationStatus.state = ValidationState.Fatal;\n\t\t\tthis.log(nls.localize('ConfigurationParser.noCommand', 'Error: no valid command name provided.'));\n\t\t\treturn null;\n\t\t}\n\t\treturn <TaskSystem.TaskRunnerConfiguration>result;\n\t}\n\n\tprivate createGlobals(fileConfig: ExternalTaskRunnerConfiguration) : Globals {\n\t\tlet result = this.parseGlobals(fileConfig);\n\t\tlet osGlobals: Globals = null;\n\t\tif (fileConfig.windows && Platform.platform === Platform.Platform.Windows) {\n\t\t\tosGlobals = this.parseGlobals(fileConfig.windows);\n\t\t} else if (fileConfig.osx && Platform.platform === Platform.Platform.Mac) {\n\t\t\tosGlobals = this.parseGlobals(fileConfig.osx);\n\t\t} else if (fileConfig.linux && Platform.platform === Platform.Platform.Linux) {\n\t\t\tosGlobals = this.parseGlobals(fileConfig.linux);\n\t\t}\n\t\tif (osGlobals) {\n\t\t\tObjects.mixin(result, osGlobals, true);\n\t\t}\n\t\tif (Types.isUndefined(result.isShellCommand)) {\n\t\t\tresult.isShellCommand = false;\n\t\t}\n\t\tif (Types.isUndefined(result.showOutput)) {\n\t\t\tresult.showOutput = TaskSystem.ShowOutput.Always;\n\t\t}\n\t\tif (Types.isUndefined(result.echoCommand)) {\n\t\t\tresult.echoCommand = false;\n\t\t}\n\t\tif (Types.isUndefined(result.suppressTaskName)) {\n\t\t\tresult.suppressTaskName = false;\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate parseGlobals(fileConfig: BaseTaskRunnerConfiguration): Globals {\n\t\tlet result: Globals = {};\n\t\tif (Types.isString(fileConfig.command)) {\n\t\t\tresult.command = fileConfig.command;\n\t\t}\n\t\tif (Types.isBoolean(fileConfig.isShellCommand)) {\n\t\t\tresult.isShellCommand = fileConfig.isShellCommand;\n\t\t}\n\t\tif (Types.isString(fileConfig.showOutput)) {\n\t\t\tresult.showOutput = TaskSystem.ShowOutput.fromString(fileConfig.showOutput);\n\t\t}\n\t\tif (!Types.isUndefined(fileConfig.echoCommand)) {\n\t\t\tresult.echoCommand = !!fileConfig.echoCommand;\n\t\t}\n\t\tif (!Types.isUndefined(fileConfig.suppressTaskName)) {\n\t\t\tresult.suppressTaskName = !!fileConfig.suppressTaskName;\n\t\t}\n\t\tif (Types.isString(fileConfig.taskSelector)) {\n\t\t\tresult.taskSelector = fileConfig.taskSelector;\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate mergeTaskRunnerConigurations(result: TaskSystem.BaseTaskRunnerConfiguration, osConfig: TaskSystem.BaseTaskRunnerConfiguration): void {\n\t\tif (osConfig.command) {\n\t\t\tresult.command = osConfig.command;\n\t\t}\n\t\tif (osConfig.args) {\n\t\t\tresult.args = result.args ? result.args.concat(osConfig.args) : osConfig.args;\n\t\t}\n\t\tif (!Types.isUndefined(osConfig.isShellCommand)) {\n\t\t\tresult.isShellCommand = osConfig.isShellCommand;\n\t\t}\n\t\tif (osConfig.options) {\n\t\t\tif (Types.isString(osConfig.options.cwd)) {\n\t\t\t\tresult.options.cwd = osConfig.options.cwd;\n\t\t\t}\n\t\t\tif (osConfig.options.env) {\n\t\t\t\tlet osEnv = osConfig.options.env;\n\t\t\t\tlet env = result.options.env;\n\t\t\t\tif (env) {\n\t\t\t\t\tObject.keys(osEnv).forEach((key) => {\n\t\t\t\t\t\tenv[key] = osEnv[key];\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tresult.options.env = osEnv;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (osConfig.tasks) {\n\t\t\tlet taskNames: IStringDictionary<string> = Object.create(null);\n\t\t\tObject.keys(result.tasks).forEach(key => {\n\t\t\t\tlet task = result.tasks[key];\n\t\t\t\ttaskNames[task.name] = task.id;\n\t\t\t});\n\n\t\t\tlet osTaskNames: IStringDictionary<string> = Object.create(null);\n\t\t\tObject.keys(osConfig.tasks).forEach(key => {\n\t\t\t\tlet task = osConfig.tasks[key];\n\t\t\t\tosTaskNames[task.name] = task.id;\n\t\t\t});\n\n\t\t\tObject.keys(osTaskNames).forEach(taskName => {\n\t\t\t\tlet id = taskNames[taskName];\n\t\t\t\tlet osId = osTaskNames[taskName];\n\t\t\t\t// Same name exists globally\n\t\t\t\tif (id) {\n\t\t\t\t\tdelete result.tasks[id];\n\t\t\t\t}\n\t\t\t\tresult.tasks[osId] = osConfig.tasks[osId];\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate createBaseTaskRunnerConfiguration(fileConfig: BaseTaskRunnerConfiguration, context: ParseContext): TaskSystem.BaseTaskRunnerConfiguration {\n\t\tlet globals = context.globals;\n\t\tlet result: TaskSystem.BaseTaskRunnerConfiguration = {\n\t\t\tisShellCommand: globals.isShellCommand,\n\t\t\targs: [],\n\t\t};\n\t\tif (Types.isString(fileConfig.command)) {\n\t\t\tresult.command = fileConfig.command;\n\t\t}\n\t\tif (!Types.isUndefined(fileConfig.isShellCommand)) {\n\t\t\tresult.isShellCommand = fileConfig.isShellCommand;\n\t\t}\n\t\tlet argsIsValid:boolean = Types.isUndefined(fileConfig.args);\n\t\tif (Types.isStringArray(fileConfig.args)) {\n\t\t\targsIsValid = true;\n\t\t\tresult.args = fileConfig.args.slice();\n\t\t}\n\t\tif (!argsIsValid) {\n\t\t\tthis.validationStatus.state = ValidationState.Fatal;\n\t\t\tthis.log(nls.localize('ConfigurationParser.noargs', 'Error: command arguments must be an array of strings. Provided value is:\\n{0}', fileConfig.args ? JSON.stringify(fileConfig.args, null, 4) : 'undefined'));\n\t\t}\n\t\tresult.options = this.createCommandOptions(fileConfig.options);\n\t\tif (context.isMain) {\n\t\t\tthis.namedProblemMatchers = this.createNamedProblemMatchers(fileConfig);\n\t\t}\n\t\tlet hasGlobalMatcher = !Types.isUndefined(fileConfig.problemMatcher);\n\t\tlet hasTasks = Types.isArray(fileConfig.tasks);\n\t\tif (hasTasks) {\n\t\t\tresult.tasks = this.createTasks(fileConfig.tasks, context);\n\t\t\tif (hasGlobalMatcher) {\n\t\t\t\tthis.validationStatus.state = ValidationState.Warning;\n\t\t\t\tthis.log(nls.localize('ConfigurationParser.globalMatcher', 'Warning: global matchers and tasks can\\'t be mixed. Ignoring global matchers.'));\n\t\t\t}\n\t\t} else if (context.isMain) {\n\t\t\tlet isWatching: boolean = false;\n\t\t\tif (!Types.isUndefined(fileConfig.isWatching)) {\n\t\t\t\tisWatching = !!fileConfig.isWatching;\n\t\t\t}\n\t\t\tlet promptOnClose: boolean = true;\n\t\t\tif (!Types.isUndefined(fileConfig.promptOnClose)) {\n\t\t\t\tpromptOnClose = !!fileConfig.promptOnClose;\n\t\t\t} else {\n\t\t\t\tpromptOnClose = !isWatching;\n\t\t\t}\n\t\t\tlet task: TaskSystem.TaskDescription = {\n\t\t\t\tid: UUID.generateUuid(),\n\t\t\t\tname: globals.command,\n\t\t\t\tshowOutput: globals.showOutput,\n\t\t\t\tsuppressTaskName: true,\n\t\t\t\tisWatching: isWatching,\n\t\t\t\tpromptOnClose: promptOnClose,\n\t\t\t\techoCommand: globals.echoCommand,\n\t\t\t};\n\t\t\tif (hasGlobalMatcher) {\n\t\t\t\tlet problemMatchers = this.createProblemMatchers(fileConfig.problemMatcher);\n\t\t\t\ttask.problemMatchers = problemMatchers;\n\t\t\t} else {\n\t\t\t\ttask.problemMatchers = [];\n\t\t\t}\n\t\t\t// ToDo@dirkb: this is very special for the tsc watch mode. We should find\n\t\t\t// a exensible solution for this.\n\t\t\tfor (let matcher of task.problemMatchers) {\n\t\t\t\tif ((<any>matcher).tscWatch) {\n\t\t\t\t\t(<any>task).tscWatch = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.defaultBuildTaskIdentifier = task.id;\n\t\t\tresult.tasks = Object.create(null);\n\t\t\tresult.tasks[task.id] = task;\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate createCommandOptions(fileOptions: ProcessConfig.CommandOptions): TaskSystem.CommandOptions {\n\t\tlet result: TaskSystem.CommandOptions = {};\n\t\tif (fileOptions) {\n\t\t\tif (!Types.isUndefined(fileOptions.cwd)) {\n\t\t\t\tif (Types.isString(fileOptions.cwd)) {\n\t\t\t\t\tresult.cwd = fileOptions.cwd;\n\t\t\t\t} else {\n\t\t\t\t\tthis.validationStatus.state = ValidationState.Warning;\n\t\t\t\t\tthis.log(nls.localize('ConfigurationParser.invalidCWD', 'Warning: options.cwd must be of type string. Ignoring value {0}\\n', fileOptions.cwd));\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!Types.isUndefined(fileOptions.env)) {\n\t\t\t\tresult.env = Objects.clone(fileOptions.env);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate createNamedProblemMatchers(fileConfig: BaseTaskRunnerConfiguration): IStringDictionary<NamedProblemMatcher> {\n\t\tlet result:IStringDictionary<NamedProblemMatcher> = Object.create(null);\n\t\tif (!Types.isArray(fileConfig.declares)) {\n\t\t\treturn result;\n\t\t}\n\t\tlet values = fileConfig.declares;\n\t\t(<ProblemMatcherConfig.NamedProblemMatcher[]>values).forEach((value) => {\n\t\t\tlet namedProblemMatcher = this.createNamedProblemMatcher(value);\n\t\t\tif (namedProblemMatcher) {\n\t\t\t\tresult[namedProblemMatcher.name] = namedProblemMatcher;\n\t\t\t}\n\t\t});\n\t\treturn result;\n\t}\n\n\tprivate createNamedProblemMatcher(value: ProblemMatcherConfig.NamedProblemMatcher): NamedProblemMatcher {\n\t\tlet result = (new ProblemMatcherParser(ProblemMatcherRegistry, this.logger, this.validationStatus)).parse(value);\n\t\tif (isNamedProblemMatcher(result)) {\n\t\t\treturn result;\n\t\t} else {\n\t\t\tthis.validationStatus.state = ValidationState.Error;\n\t\t\tthis.log(nls.localize('ConfigurationParser.noName', 'Error: Problem Matcher in declare scope must have a name:\\n{0}\\n', JSON.stringify(value, null, 4)));\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tprivate createTasks(tasks: TaskDescription[], context: ParseContext): IStringDictionary<TaskSystem.TaskDescription> {\n\t\tlet result: IStringDictionary<TaskSystem.TaskDescription> = Object.create(null);\n\t\tif (!tasks) {\n\t\t\treturn result;\n\t\t}\n\t\tlet defaultBuildTask: {id:string; exact:number;} = { id: null, exact: -1};\n\t\tlet defaultTestTask: {id:string; exact:number;} = { id: null, exact: -1};\n\t\ttasks.forEach((externalTask) => {\n\t\t\tlet taskName = externalTask.taskName;\n\t\t\tif (!taskName) {\n\t\t\t\tthis.validationStatus.state = ValidationState.Fatal;\n\t\t\t\tthis.log(nls.localize('ConfigurationParser.noTaskName', 'Error: tasks must provide a taskName property. The task will be ignored.\\n{0}\\n', JSON.stringify(externalTask, null, 4)));\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tlet problemMatchers = this.createProblemMatchers(externalTask.problemMatcher);\n\t\t\tlet task: TaskSystem.TaskDescription = { id: UUID.generateUuid(), name: taskName, showOutput: context.globals.showOutput };\n\t\t\tif (Types.isStringArray(externalTask.args)) {\n\t\t\t\ttask.args = externalTask.args.slice();\n\t\t\t}\n\t\t\ttask.isWatching = false;\n\t\t\tif (!Types.isUndefined(externalTask.isWatching)) {\n\t\t\t\ttask.isWatching = !!externalTask.isWatching;\n\t\t\t}\n\t\t\ttask.promptOnClose = true;\n\t\t\tif (!Types.isUndefined(externalTask.promptOnClose)) {\n\t\t\t\ttask.promptOnClose = !!externalTask.promptOnClose;\n\t\t\t} else {\n\t\t\t\ttask.promptOnClose = !task.isWatching;\n\t\t\t}\n\t\t\tif (Types.isString(externalTask.showOutput)) {\n\t\t\t\ttask.showOutput = TaskSystem.ShowOutput.fromString(externalTask.showOutput);\n\t\t\t}\n\t\t\tif (Types.isUndefined(task.showOutput)) {\n\t\t\t\ttask.showOutput = context.globals.showOutput;\n\t\t\t}\n\t\t\ttask.echoCommand = context.globals.echoCommand;\n\t\t\tif (!Types.isUndefined(externalTask.echoCommand)) {\n\t\t\t\ttask.echoCommand = !!externalTask.echoCommand;\n\t\t\t}\n\t\t\ttask.suppressTaskName = context.globals.suppressTaskName;\n\t\t\tif (!Types.isUndefined(externalTask.suppressTaskName)) {\n\t\t\t\ttask.suppressTaskName = !!externalTask.suppressTaskName;\n\t\t\t}\n\t\t\tif (problemMatchers) {\n\t\t\t\ttask.problemMatchers = problemMatchers;\n\t\t\t}\n\t\t\t// ToDo@dirkb: this is very special for the tsc watch mode. We should find\n\t\t\t// a exensible solution for this.\n\t\t\tfor (let matcher of task.problemMatchers) {\n\t\t\t\tif ((<any>matcher).tscWatch) {\n\t\t\t\t\t(<any>task).tscWatch = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tresult[task.id] = task;\n\t\t\tif (!Types.isUndefined(externalTask.isBuildCommand) && externalTask.isBuildCommand && defaultBuildTask.exact < 2) {\n\t\t\t\tdefaultBuildTask.id = task.id;\n\t\t\t\tdefaultBuildTask.exact = 2;\n\t\t\t} else if (taskName === 'build' && defaultBuildTask.exact < 2) {\n\t\t\t\tdefaultBuildTask.id = task.id;\n\t\t\t\tdefaultBuildTask.exact = 1;\n\t\t\t}\n\t\t\tif (!Types.isUndefined(externalTask.isTestCommand) && externalTask.isTestCommand && defaultTestTask.exact < 2) {\n\t\t\t\tdefaultTestTask.id = task.id;\n\t\t\t\tdefaultTestTask.exact = 2;\n\t\t\t} else if (taskName === 'test' && defaultTestTask.exact < 2) {\n\t\t\t\tdefaultTestTask.id = task.id;\n\t\t\t\tdefaultTestTask.exact = 1;\n\t\t\t}\n\t\t});\n\t\tif (defaultBuildTask.exact > 0) {\n\t\t\tthis.defaultBuildTaskIdentifier = defaultBuildTask.id;\n\t\t}\n\t\tif (defaultTestTask.exact > 0) {\n\t\t\tthis.defaultTestTaskIdentifier = defaultTestTask.id;\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate createProblemMatchers(problemMatcher: ProblemMatcherConfig.ProblemMatcherType): ProblemMatcher[] {\n\t\tlet result: ProblemMatcher[] = [];\n\t\tif (Types.isUndefined(problemMatcher)) {\n\t\t\treturn result;\n\t\t}\n\t\tlet kind = this.getProblemMatcherKind(problemMatcher);\n\t\tif (kind === ProblemMatcherKind.Unknown) {\n\t\t\tthis.validationStatus.state = ValidationState.Warning;\n\t\t\tthis.log(nls.localize(\n\t\t\t\t'ConfigurationParser.unknownMatcherKind',\n\t\t\t\t'Warning: the defined problem matcher is unknown. Supported types are string | ProblemMatcher | (string | ProblemMatcher)[].\\n{0}\\n',\n\t\t\t\tJSON.stringify(problemMatcher, null, 4)));\n\t\t\treturn result;\n\t\t} else if (kind === ProblemMatcherKind.String || kind === ProblemMatcherKind.ProblemMatcher) {\n\t\t\tlet matcher = this.resolveProblemMatcher(problemMatcher);\n\t\t\tif (matcher) {\n\t\t\t\tresult.push(matcher);\n\t\t\t}\n\t\t} else if (kind === ProblemMatcherKind.Array) {\n\t\t\tlet problemMatchers = <(string | ProblemMatcherConfig.ProblemMatcher)[]>problemMatcher;\n\t\t\tproblemMatchers.forEach(problemMatcher => {\n\t\t\t\tlet matcher = this.resolveProblemMatcher(problemMatcher);\n\t\t\t\tif (matcher) {\n\t\t\t\t\tresult.push(matcher);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate getProblemMatcherKind(value: ProblemMatcherConfig.ProblemMatcherType): ProblemMatcherKind {\n\t\tif (Types.isString(value)) {\n\t\t\treturn ProblemMatcherKind.String;\n\t\t} else if (Types.isArray(value)) {\n\t\t\treturn ProblemMatcherKind.Array;\n\t\t} else if (!Types.isUndefined(value)) {\n\t\t\treturn ProblemMatcherKind.ProblemMatcher;\n\t\t} else {\n\t\t\treturn ProblemMatcherKind.Unknown;\n\t\t}\n\t}\n\n\tprivate resolveProblemMatcher(value: string | ProblemMatcherConfig.ProblemMatcher): ProblemMatcher {\n\t\tif (Types.isString(value)) {\n\t\t\tlet variableName = <string>value;\n\t\t\tif (variableName.length > 1 && variableName[0] === '$') {\n\t\t\t\tvariableName = variableName.substring(1);\n\t\t\t\tlet global = ProblemMatcherRegistry.get(variableName);\n\t\t\t\tif (global) {\n\t\t\t\t\treturn Objects.clone(global);\n\t\t\t\t}\n\t\t\t\tlet localProblemMatcher = this.namedProblemMatchers[variableName];\n\t\t\t\tif (localProblemMatcher) {\n\t\t\t\t\tlocalProblemMatcher = Objects.clone(localProblemMatcher);\n\t\t\t\t\t// remove the name\n\t\t\t\t\tdelete localProblemMatcher.name;\n\t\t\t\t\treturn localProblemMatcher;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.validationStatus.state = ValidationState.Error;\n\t\t\tthis.log(nls.localize('ConfigurationParser.invalidVaraibleReference', 'Error: Invalid problemMatcher reference: {0}\\n', value));\n\t\t\treturn null;\n\t\t} else {\n\t\t\tlet json = <ProblemMatcherConfig.ProblemMatcher>value;\n\t\t\treturn new ProblemMatcherParser(ProblemMatcherRegistry, this.logger, this.validationStatus).parse(json);\n\t\t}\n\t}\n}\n\nexport function parse(configuration: ExternalTaskRunnerConfiguration, logger: ILogger): ParseResult {\n\treturn (new ConfigurationParser(logger)).run(configuration);\n}"]}