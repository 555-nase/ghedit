{"version":3,"sources":["vs/workbench/parts/tasks/browser/taskQuickOpen.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;IAAA;;;oGAGgG;IAChG,YAAY,CAAC;IAYb;QAAwB,6BAAoB;QAK3C,mBAAY,WAAyB,EAAE,IAAqB,EAAE,UAAkC;YAAlC,0BAAkC,GAAlC,eAAkC;YAC/F,kBAAM,UAAU,CAAC,CAAC;YAClB,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;YAC/B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QAClB,CAAC;QAEM,4BAAQ,GAAf;YACC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;QACvB,CAAC;QAEM,gCAAY,GAAnB;YACC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAgB,EAAE,IAAY,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;QACtE,CAAC;QAEM,uBAAG,GAAV,UAAW,IAAmB,EAAE,OAAsB;YACrD,EAAE,CAAC,CAAC,IAAI,KAAK,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;gBACrC,MAAM,CAAC,KAAK,CAAC;YACd,CAAC;YACD,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YACnC,MAAM,CAAC,IAAI,CAAC;QACb,CAAC;QACF,gBAAC;IAAD,CA1BA,AA0BC,CA1BuB,KAAK,CAAC,cAAc,GA0B3C;IAED;QAAsC,oCAA0B;QAK/D,0BACoB,gBAAmC,EACxC,WAAyB;YAEvC,iBAAO,CAAC;YAER,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;YACzC,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAChC,CAAC;QAEM,uCAAY,GAAnB;YACC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAgB,EAAE,IAAgC,CAAC,CAAC;QACzE,CAAC;QAEM,qCAAU,GAAjB,UAAkB,KAAa;YAA/B,iBAOC;YANA,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC,IAAI,CAAC,UAAA,KAAK,IAAI,OAAA,KAAK;iBACjD,IAAI,CAAC,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,IAAI,CAAC,EAA5B,CAA4B,CAAC;iBAC5C,GAAG,CAAC,UAAA,IAAI,IAAI,OAAA,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,CAAC,0BAA0B,CAAC,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,EAAlF,CAAkF,CAAC;iBAC/F,MAAM,CAAC,UAAC,EAAc;oBAAZ,0BAAU;gBAAO,OAAA,CAAC,CAAC,UAAU;YAAZ,CAAY,CAAC;iBACxC,GAAG,CAAC,UAAC,EAAoB;oBAAlB,cAAI,EAAE,0BAAU;gBAAO,OAAA,IAAI,SAAS,CAAC,KAAI,CAAC,WAAW,EAAE,IAAI,EAAE,UAAU,CAAC;YAAjD,CAAiD,CAAC,EAJpC,CAIoC,EAChF,UAAA,CAAC,IAAI,OAAA,EAAE,EAAF,CAAE,CAAC,CAAC,IAAI,CAAC,UAAA,CAAC,IAAI,OAAA,IAAI,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC,EAA3B,CAA2B,CAAC,CAAC;QACnD,CAAC;QAEM,mCAAQ,GAAf;YACC,MAAM,CAAC,IAAI,CAAC;QACb,CAAC;QAEM,iCAAM,GAAb;YACC,MAAM,CAAC,IAAI,CAAC;QACb,CAAC;QAEM,uCAAY,GAAnB,UAAoB,KAAY;YAC/B,MAAM,CAAC;gBACN,mBAAmB,EAAE,CAAC,CAAC,KAAK;aAC5B,CAAC;QACH,CAAC;QAEM,kCAAO,GAAd,UAAe,QAAgB;YAC9B,MAAM,CAAC;QACR,CAAC;QAEM,wCAAa,GAApB;YACC,MAAM,CAAC,IAAI,CAAC;QACb,CAAC;QAEM,wCAAa,GAApB,UAAqB,YAAoB;YACxC,EAAE,CAAC,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;gBAC7B,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAiB,EAAE,IAAmB,CAAC,CAAC;YAC7D,CAAC;YACD,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAc,EAAE,IAAgB,CAAC,CAAC;QACvD,CAAC;QAjDA;uBAAC,oCAAiB;uBACjB,0BAAY;4BADK;QAkDpB,uBAAC;IAAD,CAxDA,AAwDC,CAxDqC,SAAS,CAAC,gBAAgB,GAwD/D;IAxDY,wBAAgB,mBAwD5B,CAAA","file":"vs/workbench/parts/tasks/browser/taskQuickOpen.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport nls = require('vs/nls');\nimport Filters = require('vs/base/common/filters');\nimport { TPromise } from 'vs/base/common/winjs.base';\nimport Quickopen = require('vs/workbench/browser/quickopen');\nimport QuickOpen = require('vs/base/parts/quickopen/common/quickOpen');\nimport Model = require('vs/base/parts/quickopen/browser/quickOpenModel');\nimport {IQuickOpenService} from 'vs/workbench/services/quickopen/common/quickOpenService';\n\nimport { ITaskService, TaskDescription } from 'vs/workbench/parts/tasks/common/taskService';\n\nclass TaskEntry extends Model.QuickOpenEntry {\n\n\tprivate taskService: ITaskService;\n\tprivate task: TaskDescription;\n\n\tconstructor(taskService: ITaskService, task: TaskDescription, highlights:Model.IHighlight[] = []) {\n\t\tsuper(highlights);\n\t\tthis.taskService = taskService;\n\t\tthis.task = task;\n\t}\n\n\tpublic getLabel(): string {\n\t\treturn this.task.name;\n\t}\n\n\tpublic getAriaLabel(): string {\n\t\treturn nls.localize('entryAriaLabel', \"{0}, tasks\", this.getLabel());\n\t}\n\n\tpublic run(mode:QuickOpen.Mode, context:Model.IContext):boolean {\n\t\tif (mode === QuickOpen.Mode.PREVIEW) {\n\t\t\treturn false;\n\t\t}\n\t\tthis.taskService.run(this.task.id);\n\t\treturn true;\n\t}\n}\n\nexport class QuickOpenHandler extends Quickopen.QuickOpenHandler {\n\n\tprivate quickOpenService: IQuickOpenService;\n\tprivate taskService: ITaskService;\n\n\tconstructor(\n\t\t@IQuickOpenService quickOpenService: IQuickOpenService,\n\t\t@ITaskService taskService: ITaskService\n\t) {\n\t\tsuper();\n\n\t\tthis.quickOpenService = quickOpenService;\n\t\tthis.taskService = taskService;\n\t}\n\n\tpublic getAriaLabel(): string {\n\t\treturn nls.localize('tasksAriaLabel', \"Type the name of a task to run\");\n\t}\n\n\tpublic getResults(input: string): TPromise<Model.QuickOpenModel> {\n\t\treturn this.taskService.tasks().then(tasks => tasks\n\t\t\t.sort((a, b) => a.name.localeCompare(b.name))\n\t\t\t.map(task => ({ task: task, highlights: Filters.matchesContiguousSubString(input, task.name) }))\n\t\t\t.filter(({ highlights }) => !!highlights)\n\t\t\t.map(({ task, highlights }) => new TaskEntry(this.taskService, task, highlights))\n\t\t, _ => []).then(e => new Model.QuickOpenModel(e));\n\t}\n\n\tpublic getClass(): string {\n\t\treturn null;\n\t}\n\n\tpublic canRun(): boolean {\n\t\treturn true;\n\t}\n\n\tpublic getAutoFocus(input:string): QuickOpen.IAutoFocus {\n\t\treturn {\n\t\t\tautoFocusFirstEntry: !!input\n\t\t};\n\t}\n\n\tpublic onClose(canceled:boolean): void {\n\t\treturn;\n\t}\n\n\tpublic getGroupLabel(): string {\n\t\treturn null;\n\t}\n\n\tpublic getEmptyLabel(searchString: string): string {\n\t\tif (searchString.length > 0) {\n\t\t\treturn nls.localize('noTasksMatching', \"No tasks matching\");\n\t\t}\n\t\treturn nls.localize('noTasksFound', \"No tasks found\");\n\t}\n}"]}