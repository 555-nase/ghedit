var __extends=this&&this.__extends||function(e,t){function r(){this.constructor=e}for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n]);e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)};define(["require","exports","vs/base/common/winjs.base","vs/base/common/eventEmitter","vs/workbench/parts/tasks/common/taskSystem"],function(e,t,r,n,o){/*---------------------------------------------------------------------------------------------
     *  Copyright (c) Microsoft Corporation. All rights reserved.
     *  Licensed under the MIT License. See License.txt in the project root for license information.
     *--------------------------------------------------------------------------------------------*/
"use strict";var i=function(e){function t(t,r,n){e.call(this),this.configuration=t,this.telemetryService=r,this.modeService=n}return __extends(t,e),t.prototype.build=function(){return this.processMode(function(e){return null},"build",o.Triggers.shortcut)},t.prototype.rebuild=function(){return this.processMode(function(e){return null},"rebuild",o.Triggers.shortcut)},t.prototype.clean=function(){return this.processMode(function(e){return null},"clean",o.Triggers.shortcut)},t.prototype.runTest=function(){return{promise:r.TPromise.wrapError("Not implemented yet.")}},t.prototype.run=function(e){return{promise:r.TPromise.wrapError("Not implemented yet.")}},t.prototype.isActive=function(){return r.TPromise.as(!1)},t.prototype.isActiveSync=function(){return!1},t.prototype.canAutoTerminate=function(){return!1},t.prototype.terminate=function(){return r.TPromise.as({success:!0})},t.prototype.terminateSync=function(){return{success:!0}},t.prototype.tasks=function(){var e=[];return r.TPromise.as(e)},t.prototype.processMode=function(e,n,o){var i=this,s={trigger:o,command:"languageService",success:!0};return{promise:r.Promise.join(this.configuration.modes.map(function(e){return i.modeService.getOrCreateMode(e)})).then(function(t){var n=[];return t.forEach(function(t){var r=e(t);r&&n.push(r)}),r.Promise.join(n)}).then(function(e){return i.telemetryService.publicLog(t.TelemetryEventName,s),e},function(e){return s.success=!1,i.telemetryService.publicLog(t.TelemetryEventName,s),r.Promise.wrapError(e)})}},t.TelemetryEventName="taskService",t}(n.EventEmitter);t.LanguageServiceTaskSystem=i});