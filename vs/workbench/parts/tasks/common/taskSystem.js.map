{"version":3,"file":"vs/workbench/parts/tasks/common/taskSystem.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/workbench/parts/tasks/common/taskSystem.ts"],"names":[],"mappings":";IAAA;;;oGAGgG;IAChG,YAAY,CAAC;IASb,WAAY,UAAU;QACrB,6DAAa,CAAA;QACb,yDAAW,CAAA;QACX,yDAAW,CAAA;QACX,uDAAU,CAAA;QACV,6EAAqB,CAAA;QACrB,2DAAY,CAAA;QACZ,qEAAiB,CAAA;QACjB,2DAAY,CAAA;IACb,CAAC,EATW,kBAAU,KAAV,kBAAU,QASrB;IATD,IAAY,UAAU,GAAV,kBASX,CAAA;IAED;QAKC,mBAAY,QAAkB,EAAE,OAAe,EAAE,IAAgB;YAChE,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;YACzB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;YACvB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QAClB,CAAC;QACF,gBAAC;IAAD,CAAC,AAVD,IAUC;IAVY,iBAAS,YAUrB,CAAA;IAaD,IAAiB,QAAQ,CAGxB;IAHD,WAAiB,QAAQ,EAAC,CAAC;QACf,iBAAQ,GAAW,UAAU,CAAC;QAC9B,gBAAO,GAAW,SAAS,CAAC;IACxC,CAAC,EAHgB,QAAQ,GAAR,gBAAQ,KAAR,gBAAQ,QAGxB;IAED,WAAY,UAAU;QACrB,+CAAM,CAAA;QACN,+CAAM,CAAA;QACN,6CAAK,CAAA;IACN,CAAC,EAJW,kBAAU,KAAV,kBAAU,QAIrB;IAJD,IAAY,UAAU,GAAV,kBAIX,CAAA;IAED,IAAiB,UAAU,CAa1B;IAbD,WAAiB,UAAU,EAAC,CAAC;QAC5B,oBAA2B,KAAa;YACvC,KAAK,GAAG,KAAK,CAAC,WAAW,EAAE,CAAC;YAC5B,EAAE,CAAC,CAAC,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC;gBACxB,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC;YAC1B,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC;gBAC/B,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC;YAC1B,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,KAAK,KAAK,OAAO,CAAC,CAAC,CAAC;gBAC9B,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC;YACzB,CAAC;YAAC,IAAI,CAAC,CAAC;gBACP,MAAM,CAAC,SAAS,CAAC;YAClB,CAAC;QACF,CAAC;QAXe,qBAAU,aAWzB,CAAA;IACF,CAAC,EAbgB,UAAU,GAAV,kBAAU,KAAV,kBAAU,QAa1B;IA4HD,IAAiB,gBAAgB,CAGhC;IAHD,WAAiB,gBAAgB,EAAC,CAAC;QACvB,uBAAM,GAAW,QAAQ,CAAC;QAC1B,yBAAQ,GAAW,UAAU,CAAC;IAC1C,CAAC,EAHgB,gBAAgB,GAAhB,wBAAgB,KAAhB,wBAAgB,QAGhC;IAED,WAAY,QAAQ;QACnB,iDAAS,CAAA;QACT,+CAAQ,CAAA;IACT,CAAC,EAHW,gBAAQ,KAAR,gBAAQ,QAGnB;IAHD,IAAY,QAAQ,GAAR,gBAGX,CAAA","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport Severity from 'vs/base/common/severity';\nimport { TPromise } from 'vs/base/common/winjs.base';\nimport { TerminateResponse } from 'vs/base/common/processes';\nimport { IEventEmitter } from 'vs/base/common/eventEmitter';\n\nimport { ProblemMatcher } from 'vs/platform/markers/common/problemMatcher';\n\nexport enum TaskErrors {\n\tNotConfigured,\n\tRunningTask,\n\tNoBuildTask,\n\tNoTestTask,\n\tConfigValidationError,\n\tTaskNotFound,\n\tNoValidTaskRunner,\n\tUnknownError\n}\n\nexport class TaskError {\n\tpublic severity: Severity;\n\tpublic message: string;\n\tpublic code: TaskErrors;\n\n\tconstructor(severity: Severity, message: string, code: TaskErrors) {\n\t\tthis.severity = severity;\n\t\tthis.message = message;\n\t\tthis.code = code;\n\t}\n}\n\nexport interface TelemetryEvent {\n\t// How the task got trigger. Is either shortcut or command\n\ttrigger: string;\n\n\t// The command triggered\n\tcommand: string;\n\n\t// Whether the task ran successful\n\tsuccess: boolean;\n}\n\nexport namespace Triggers {\n\texport let shortcut: string = 'shortcut';\n\texport let command: string = 'command';\n}\n\nexport enum ShowOutput {\n\tAlways,\n\tSilent,\n\tNever\n}\n\nexport namespace ShowOutput {\n\texport function fromString(value: string): ShowOutput {\n\t\tvalue = value.toLowerCase();\n\t\tif (value === 'always') {\n\t\t\treturn ShowOutput.Always;\n\t\t} else if (value === 'silent') {\n\t\t\treturn ShowOutput.Silent;\n\t\t} else if (value === 'never') {\n\t\t\treturn ShowOutput.Never;\n\t\t} else {\n\t\t\treturn undefined;\n\t\t}\n\t}\n}\n\n/**\n * A task description\n */\nexport interface TaskDescription {\n\n\t/**\n\t * The task's internal id\n\t */\n\tid: string;\n\n\t/**\n\t * The task's name\n\t */\n\tname: string;\n\n\t/**\n\t * Suppresses the task name when calling the task using the task runner.\n\t */\n\tsuppressTaskName?: boolean;\n\n\t/**\n\t * Additional arguments passed to the command when this target is\n\t * invoked.\n\t */\n\targs?: string[];\n\n\t/**\n\t * Whether the task is running in watching mode or not.\n\t */\n\tisWatching?: boolean;\n\n\t/**\n\t * Whether the task should prompt on close for confirmation if running.\n\t */\n\tpromptOnClose?: boolean;\n\n\t/**\n\t * Controls whether the output of the running tasks is shown or not. Default\n\t * value is \"always\".\n\t */\n\tshowOutput: ShowOutput;\n\n\t/**\n\t * Controls whether the executed command is printed to the output windows as well.\n\t */\n\techoCommand?: boolean;\n\n\t/**\n\t * The problem watchers to use for this task\n\t */\n\tproblemMatchers?:ProblemMatcher[];\n}\n\nexport interface CommandOptions {\n\t/**\n\t * The current working directory of the executed program or shell.\n\t * If omitted VSCode's current workspace root is used.\n\t */\n\tcwd?: string;\n\n\t/**\n\t * The environment of the executed program or shell. If omitted\n\t * the parent process' environment is used.\n\t */\n\tenv?: { [key:string]: string; };\n}\n\n\n/**\n * Describs the settings of a task runner\n */\nexport interface BaseTaskRunnerConfiguration {\n\n\t/**\n\t * The command to execute\n\t */\n\tcommand?:string;\n\n\t/**\n\t * Whether the task is a shell command or not\n\t */\n\tisShellCommand?:boolean;\n\n\t/**\n\t * Additional command options\n\t */\n\toptions?: CommandOptions;\n\n\t/**\n\t * General args\n\t */\n\targs?:string[];\n\n\t/**\n\t * The configured tasks\n\t */\n\ttasks?: { [id:string]: TaskDescription; };\n}\n\n/**\n * Describs the settings of a task runner\n */\nexport interface TaskRunnerConfiguration extends BaseTaskRunnerConfiguration {\n\n\t/**\n\t * The command to execute. Not optional.\n\t */\n\tcommand:string;\n}\n\nexport interface ITaskSummary {\n\t/**\n\t * Exit code of the process.\n\t */\n\texitCode?: number;\n}\n\nexport interface ITaskRunResult {\n\trestartOnFileChanges?: string;\n\tpromise: TPromise<ITaskSummary>;\n}\n\nexport namespace TaskSystemEvents {\n\texport let Active: string = 'active';\n\texport let Inactive: string = 'inactive';\n}\n\nexport enum TaskType {\n\tSingleRun,\n\tWatching\n}\n\nexport interface TaskEvent {\n\ttaskId?: string;\n\ttaskName?: string;\n\ttype?: TaskType;\n}\n\nexport interface ITaskSystem extends IEventEmitter {\n\tbuild(): ITaskRunResult;\n\trebuild(): ITaskRunResult;\n\tclean(): ITaskRunResult;\n\trunTest(): ITaskRunResult;\n\trun(taskIdentifier: string): ITaskRunResult;\n\tisActive(): TPromise<boolean>;\n\tisActiveSync(): boolean;\n\tcanAutoTerminate(): boolean;\n\tterminate(): TPromise<TerminateResponse>;\n\ttasks(): TPromise<TaskDescription[]>;\n}\n\n/**\n * Build configuration settings shared between program and\n * service build systems.\n */\nexport interface TaskConfiguration {\n\t/**\n\t * The build system to use. If omitted program is used.\n\t */\n\tbuildSystem?:string;\n}"]}