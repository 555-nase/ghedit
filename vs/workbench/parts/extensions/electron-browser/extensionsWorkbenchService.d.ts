import 'vs/css!./media/extensionsViewlet';
import Event from 'vs/base/common/event';
import { TPromise } from 'vs/base/common/winjs.base';
import { IPager } from 'vs/base/common/paging';
import { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';
import { IExtensionManagementService, IExtensionGalleryService, IExtensionTipsService, IQueryOptions } from 'vs/platform/extensionManagement/common/extensionManagement';
import { IExtension, IExtensionsWorkbenchService } from './extensions';
export declare class ExtensionsWorkbenchService implements IExtensionsWorkbenchService {
    private extensionService;
    private galleryService;
    private telemetryService;
    private tipsService;
    private static SyncPeriod;
    _serviceBrand: any;
    private stateProvider;
    private installing;
    private uninstalling;
    private installed;
    private syncDelayer;
    private disposables;
    private _onChange;
    onChange: Event<void>;
    constructor(extensionService: IExtensionManagementService, galleryService: IExtensionGalleryService, telemetryService: ITelemetryService, tipsService: IExtensionTipsService);
    local: IExtension[];
    queryLocal(): TPromise<IExtension[]>;
    queryGallery(options?: IQueryOptions): TPromise<IPager<IExtension>>;
    getRecommendations(): TPromise<IExtension[]>;
    private fromGallery(gallery);
    private syncWithGallery(immediate?);
    private doSyncWithGallery();
    canInstall(extension: IExtension): boolean;
    install(extension: IExtension): TPromise<void>;
    uninstall(extension: IExtension): TPromise<void>;
    private onInstallExtension(id, gallery);
    private onDidInstallExtension(id, local, error);
    private onUninstallExtension(id);
    private onDidUninstallExtension(id);
    private getExtensionState(extension);
    private reportTelemetry(active, success);
    dispose(): void;
}
