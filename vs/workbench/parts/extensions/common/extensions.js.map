{"version":3,"sources":["vs/workbench/parts/extensions/common/extensions.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;IAEhG,YAAY,CAAC;IAuCA,0BAAkB,GAAG,+BAAe,CAAqB,mBAAmB,CAAC,CAAC;IAC9E,uBAAe,GAAG,+BAAe,CAAkB,gBAAgB,CAAC,CAAC;IAkCrE,6BAAqB,GAAG,+BAAe,CAAwB,sBAAsB,CAAC,CAAC;IAOvF,uBAAe,GAAG,GAAG,CAAC,QAAQ,CAAC,CAAY,EAAE,IAAY,CAAC,CAAC;IAC3D,2BAAmB,GAAG,YAAY,CAAC","file":"vs/workbench/parts/extensions/common/extensions.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport nls = require('vs/nls');\nimport { TPromise } from 'vs/base/common/winjs.base';\nimport Event from 'vs/base/common/event';\nimport { createDecorator, ServiceIdentifier } from 'vs/platform/instantiation/common/instantiation';\n\nexport interface IExtensionManifest {\n\tname: string;\n\tpublisher: string;\n\tversion: string;\n\tengines: { vscode: string };\n\tdisplayName?: string;\n\tdescription?: string;\n\tmain?: string;\n}\n\nexport interface IGalleryVersion {\n\tversion: string;\n\tdate: string;\n\tmanifestUrl: string;\n\tdownloadUrl: string;\n\tdownloadHeaders: { [key: string]: string; };\n}\n\nexport interface IGalleryMetadata {\n\tgalleryApiUrl: string;\n\tid: string;\n\tpublisherId: string;\n\tpublisherDisplayName: string;\n\tinstallCount: number;\n\tversions: IGalleryVersion[];\n}\n\nexport interface IExtension extends IExtensionManifest {\n\tgalleryInformation?: IGalleryMetadata;\n\tpath?: string;\n}\n\nexport const IExtensionsService = createDecorator<IExtensionsService>('extensionsService');\nexport const IGalleryService = createDecorator<IGalleryService>('galleryService');\n\nexport interface IQueryOptions {\n\ttext?: string;\n\tids?: string[];\n\tpageSize?: number;\n}\n\nexport interface IQueryResult {\n\tfirstPage: IExtension[];\n\ttotal: number;\n\tpageSize: number;\n\tgetPage(pageNumber: number): TPromise<IExtension[]>;\n}\n\nexport interface IGalleryService {\n\tserviceId: ServiceIdentifier<any>;\n\tisEnabled(): boolean;\n\tquery(options?: IQueryOptions): TPromise<IQueryResult>;\n}\n\nexport interface IExtensionsService {\n\tserviceId: ServiceIdentifier<any>;\n\tonInstallExtension: Event<IExtensionManifest>;\n\tonDidInstallExtension: Event<{ extension: IExtension; error?: Error; }>;\n\tonUninstallExtension: Event<IExtension>;\n\tonDidUninstallExtension: Event<IExtension>;\n\n\tinstall(extension: IExtension): TPromise<IExtension>;\n\tinstall(zipPath: string): TPromise<IExtension>;\n\tuninstall(extension: IExtension): TPromise<void>;\n\tgetInstalled(includeDuplicateVersions?: boolean): TPromise<IExtension[]>;\n}\n\nexport const IExtensionTipsService = createDecorator<IExtensionTipsService>('extensionTipsService');\n\nexport interface IExtensionTipsService {\n\tserviceId: ServiceIdentifier<any>;\n\tgetRecommendations(): TPromise<IExtension[]>;\n}\n\nexport const ExtensionsLabel = nls.localize('extensions', \"Extensions\");\nexport const ExtensionsChannelId = 'extensions';"]}