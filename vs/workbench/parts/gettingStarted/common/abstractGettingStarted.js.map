{"version":3,"file":"vs/workbench/parts/gettingStarted/common/abstractGettingStarted.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/workbench/parts/gettingStarted/common/abstractGettingStarted.ts"],"names":[],"mappings":";;;;;;;;;;IAAA;;;oGAGgG;IAChG,YAAY,CAAC;IAOb;;OAEG;IACH;QAMC,gCAC0B,cAA+B,EACtB,cAAwC,EAC/C,gBAAmC;YAFrC,mBAAc,GAAd,cAAc,CAAiB;YACtB,mBAAc,GAAd,cAAc,CAA0B;YAC/C,qBAAgB,GAAhB,gBAAgB,CAAmB;YAE9D,IAAM,GAAG,GAAG,cAAc,CAAC,gBAAgB,EAAE,CAAC,GAAG,CAAC;YAClD,IAAI,CAAC,OAAO,GAAG,GAAG,CAAC,OAAO,CAAC;YAE3B,EAAE,CAAC,CAAC,GAAG,CAAC,WAAW,IAAI,CAAC,GAAG,CAAC,kBAAkB,CAAC,6CAA6C,CAAC,CAAC,CAAC;gBAC9F,IAAI,CAAC,cAAc,GAAI,GAAG,CAAC,WAAW,CAAC;gBACvC,IAAI,CAAC,aAAa,EAAE,CAAC;YACtB,CAAC;QACF,CAAC;QAES,8CAAa,GAAvB;YAAA,iBAUC;YATA,IAAI,YAAY,GAAG,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,sBAAsB,CAAC,sBAAsB,CAAC,CAAC;YAE3F,EAAE,CAAC,CAAC,YAAY,IAAI,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC;gBACzC,IAAI,CAAC,gBAAgB,CAAC,gBAAgB,EAAE,CAAC,IAAI,CAAC,UAAA,IAAI;oBACjD,IAAI,GAAG,GAAG,KAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;oBAC5B,KAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;oBACvB,KAAI,CAAC,cAAc,CAAC,KAAK,CAAC,sBAAsB,CAAC,sBAAsB,EAAE,IAAI,CAAC,CAAC;gBAChF,CAAC,CAAC,CAAC;YACJ,CAAC;QACF,CAAC;QAEO,uCAAM,GAAd,UAAe,aAA6B;YAC3C,MAAM,CAAI,IAAI,CAAC,cAAc,eAAU,IAAI,CAAC,OAAO,aAAQ,aAAa,CAAC,SAAW,CAAC;QACtF,CAAC;QAES,6CAAY,GAAtB,UAAuB,GAAW;YACjC,MAAM,IAAI,KAAK,CAAC,cAAc,CAAC,CAAC;QACjC,CAAC;QAEM,sCAAK,GAAZ;YACC,MAAM,CAAC,mBAAmB,CAAC;QAC5B,CAAC;QAzCgB,6CAAsB,GAAG,wBAAwB,CAAC;QAMlE;uBAAC,yBAAe;uBACf,yCAAwB;uBACxB,6BAAiB;kCAFF;QAoClB,6BAAC;IAAD,CAAC,AA3CD,IA2CC;IA3CqB,8BAAsB,yBA2C3C,CAAA","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {IWorkbenchContribution} from 'vs/workbench/common/contributions';\nimport {IWorkspaceContextService} from 'vs/workbench/services/workspace/common/contextService';\nimport {IStorageService} from 'vs/platform/storage/common/storage';\nimport {ITelemetryService, ITelemetryInfo} from 'vs/platform/telemetry/common/telemetry';\n\n/**\n * This extensions handles the first launch expereince for new users\n */\nexport abstract class AbstractGettingStarted implements IWorkbenchContribution {\n\tprotected static hideWelcomeSettingskey = 'workbench.hide.welcome';\n\n\tprotected welcomePageURL: string;\n\tprotected appName: string;\n\n\tconstructor(\n\t\t@IStorageService private storageService: IStorageService,\n\t\t@IWorkspaceContextService private contextService: IWorkspaceContextService,\n\t\t@ITelemetryService private telemetryService: ITelemetryService\n\t) {\n\t\tconst env = contextService.getConfiguration().env;\n\t\tthis.appName = env.appName;\n\n\t\tif (env.welcomePage && !env.extensionTestsPath /* do not open a browser when we run tests */) {\n\t\t\tthis.welcomePageURL =  env.welcomePage;\n\t\t\tthis.handleWelcome();\n\t\t}\n\t}\n\n\tprotected handleWelcome(): void {\n\t\tlet firstStartup = !this.storageService.get(AbstractGettingStarted.hideWelcomeSettingskey);\n\n\t\tif (firstStartup && this.welcomePageURL) {\n\t\t\tthis.telemetryService.getTelemetryInfo().then(info=>{\n\t\t\t\tlet url = this.getUrl(info);\n\t\t\t\tthis.openExternal(url);\n\t\t\t\tthis.storageService.store(AbstractGettingStarted.hideWelcomeSettingskey, true);\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate getUrl(telemetryInfo: ITelemetryInfo): string {\n\t\treturn `${this.welcomePageURL}&&from=${this.appName}&&id=${telemetryInfo.machineId}`;\n\t}\n\n\tprotected openExternal(url: string) {\n\t\tthrow new Error('implement me');\n\t}\n\n\tpublic getId(): string {\n\t\treturn 'vs.gettingstarted';\n\t}\n}"]}