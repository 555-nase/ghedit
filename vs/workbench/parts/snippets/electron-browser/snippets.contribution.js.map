{"version":3,"sources":["vs/workbench/parts/snippets/electron-browser/snippets.contribution.ts"],"names":[],"mappings":"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","file":"vs/workbench/parts/snippets/electron-browser/snippets.contribution.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport nls = require('vs/nls');\nimport winjs = require('vs/base/common/winjs.base');\nimport paths = require('vs/base/common/paths');\nimport actions = require('vs/base/common/actions');\nimport {SyncActionDescriptor} from 'vs/platform/actions/common/actions';\nimport platform = require('vs/platform/platform');\nimport workbenchActionRegistry = require('vs/workbench/common/actionRegistry');\nimport workbenchContributions = require('vs/workbench/common/contributions');\nimport snippetsTracker = require('./snippetsTracker');\nimport errors = require('vs/base/common/errors');\nimport {IQuickOpenService, IPickOpenEntry} from 'vs/workbench/services/quickopen/common/quickOpenService';\nimport {IWorkspaceContextService} from 'vs/platform/workspace/common/workspace';\nimport * as JSONContributionRegistry from 'vs/platform/jsonschemas/common/jsonContributionRegistry';\nimport {IJSONSchema} from 'vs/base/common/jsonSchema';\nimport {IModeService} from 'vs/editor/common/services/modeService';\n\nimport {ipcRenderer as ipc} from 'electron';\nimport fs = require('fs');\n\nclass OpenSnippetsAction extends actions.Action {\n\n\tpublic static ID = 'workbench.action.openSnippets';\n\tpublic static LABEL = nls.localize('openSnippet.label', 'Snippets');\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel:string,\n\t\t@IWorkspaceContextService private contextService: IWorkspaceContextService,\n\t\t@IQuickOpenService private quickOpenService:IQuickOpenService,\n\t\t@IModeService private modeService:IModeService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\tprivate openFile(filePath: string): void {\n\t\tipc.send('vscode:windowOpen', [filePath]); // handled from browser process\n\t}\n\n\tpublic run(): winjs.Promise {\n\t\tvar modeIds = this.modeService.getRegisteredModes();\n\t\tvar picks: IPickOpenEntry[] = [];\n\t\tmodeIds.forEach((modeId) => {\n\t\t\tvar name = this.modeService.getLanguageName(modeId);\n\t\t\tif (name) {\n\t\t\t\tpicks.push({ label: name, id: modeId });\n\t\t\t}\n\t\t});\n\t\tpicks = picks.sort((e1, e2) =>\n\t\t\te1.label.localeCompare(e2.label)\n\t\t);\n\n\t\treturn this.quickOpenService.pick(picks, { placeHolder: nls.localize('openSnippet.pickLanguage', \"Select Language for Snippet\") }).then((language) => {\n\t\t\tif (language) {\n\t\t\t\tvar snippetPath = paths.join(this.contextService.getConfiguration().env.appSettingsHome, 'snippets', language.id + '.json');\n\t\t\t\treturn fileExists(snippetPath).then((success) => {\n\t\t\t\t\tif (success) {\n\t\t\t\t\t\tthis.openFile(snippetPath);\n\t\t\t\t\t\treturn winjs.TPromise.as(null);\n\t\t\t\t\t}\n\t\t\t\t\tvar defaultContent = [\n\t\t\t\t\t\t'{',\n\t\t\t\t\t\t'/*',\n\t\t\t\t\t\t'\\t // Place your snippets for ' + language.label + ' here. Each snippet is defined under a snippet name and has a prefix, body and ',\n\t\t\t\t\t\t'\\t // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:',\n\t\t\t\t\t\t'\\t // $1, $2 for tab stops, ${id} and ${id:label} and ${1:label} for variables. Variables with the same id are connected.',\n\t\t\t\t\t\t'\\t // Example:',\n\t\t\t\t\t\t'\\t \"Print to console\": {',\n\t\t\t\t\t\t'\\t\\t\"prefix\": \"log\",',\n\t\t\t\t\t\t'\\t\\t\"body\": [',\n\t\t\t\t\t\t'\\t\\t\\t\"console.log(\\'$1\\');\",',\n\t\t\t\t\t\t'\\t\\t\\t\"$2\"',\n\t\t\t\t\t\t'\\t\\t],',\n\t\t\t\t\t\t'\\t\\t\"description\": \"Log output to console\"',\n\t\t\t\t\t\t'\\t}',\n\t\t\t\t\t\t'*/',\n\t\t\t\t\t\t'}'\n\t\t\t\t\t].join('\\n');\n\t\t\t\t\treturn createFile(snippetPath, defaultContent).then(() => {\n\t\t\t\t\t\tthis.openFile(snippetPath);\n\t\t\t\t\t}, (err) => {\n\t\t\t\t\t\terrors.onUnexpectedError(nls.localize('openSnippet.errorOnCreate', 'Unable to create {0}', snippetPath));\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn winjs.TPromise.as(null);\n\t\t});\n\t}\n}\n\nfunction fileExists(path: string): winjs.TPromise<boolean> {\n\treturn new winjs.TPromise<boolean>((c, e, p) => {\n\t\tfs.stat(path,(err, stats) => {\n\t\t\tif (err) {\n\t\t\t\treturn c(false);\n\t\t\t}\n\n\t\t\tif (stats.isFile()) {\n\t\t\t\treturn c(true);\n\t\t\t}\n\n\t\t\tc(false);\n\t\t});\n\t});\n}\n\nfunction createFile(path: string, content: string): winjs.Promise {\n\treturn new winjs.Promise((c, e, p) => {\n\t\tfs.writeFile(path, content, function(err) {\n\t\t\tif(err) {\n\t\t\t\te(err);\n\t\t\t}\n\t\t\tc(true);\n\t\t});\n\t});\n}\n\nvar preferencesCategory = nls.localize('preferences', \"Preferences\");\nvar workbenchActionsRegistry = <workbenchActionRegistry.IWorkbenchActionRegistry> platform.Registry.as(workbenchActionRegistry.Extensions.WorkbenchActions);\n\nworkbenchActionsRegistry.registerWorkbenchAction(new SyncActionDescriptor(OpenSnippetsAction, OpenSnippetsAction.ID, OpenSnippetsAction.LABEL), preferencesCategory);\n\n(<workbenchContributions.IWorkbenchContributionsRegistry>platform.Registry.as(workbenchContributions.Extensions.Workbench)).registerWorkbenchContribution(\n\tsnippetsTracker.SnippetsTracker\n);\n\nlet schemaId = 'vscode://schemas/snippets';\nlet schema : IJSONSchema = {\n\t'id': schemaId,\n\t'defaultSnippets': [{\n\t\t'label': nls.localize('snippetSchema.json.default', \"Empty snippet\"),\n\t\t'body': { '{{snippetName}}': { 'prefix': '{{prefix}}', 'body': '{{snippet}}', 'description': '{{description}}' } }\n\t}],\n\t'type': 'object',\n\t'description': nls.localize('snippetSchema.json', 'User snippet configuration'),\n\t'additionalProperties': {\n\t\t'type': 'object',\n\t\t'required': ['prefix', 'body'],\n\t\t'properties': {\n\t\t\t'prefix': {\n\t\t\t\t'description': nls.localize('snippetSchema.json.prefix', 'The prefix to used when selecting the snippet in intellisense'),\n\t\t\t\t'type': 'string'\n\t\t\t},\n\t\t\t'body': {\n\t\t\t\t'description': nls.localize('snippetSchema.json.body', 'The snippet content. Use \\'${id}\\', \\'${id:label}\\', \\'${1:label}\\' for variables and \\'$0\\', \\'$1\\' for the cursor positions'),\n\t\t\t\t'type': ['string', 'array'],\n\t\t\t\t'items': {\n\t\t\t\t\t'type': 'string'\n\t\t\t\t}\n\t\t\t},\n\t\t\t'description': {\n\t\t\t\t'description': nls.localize('snippetSchema.json.description', 'The snippet description.'),\n\t\t\t\t'type': 'string'\n\t\t\t}\n\t\t},\n\t\t'additionalProperties': false\n\t}\n};\n\nlet schemaRegistry = <JSONContributionRegistry.IJSONContributionRegistry>platform.Registry.as(JSONContributionRegistry.Extensions.JSONContribution);\nschemaRegistry.registerSchema(schemaId, schema);\nschemaRegistry.addSchemaFileAssociation('%APP_SETTINGS_HOME%/snippets/*.json', schemaId);"]}