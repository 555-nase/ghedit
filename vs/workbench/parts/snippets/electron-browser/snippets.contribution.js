var __extends=this&&this.__extends||function(e,t){function n(){this.constructor=e}for(var i in t)t.hasOwnProperty(i)&&(e[i]=t[i]);e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)},__decorate=this&&this.__decorate||function(e,t,n,i){var o,r=arguments.length,s=r<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,i);else for(var c=e.length-1;c>=0;c--)(o=e[c])&&(s=(r<3?o(s):r>3?o(t,n,s):o(t,n))||s);return r>3&&s&&Object.defineProperty(t,n,s),s},__param=this&&this.__param||function(e,t){return function(n,i){t(n,i,e)}};define(["require","exports","vs/nls","vs/base/common/winjs.base","vs/base/common/paths","vs/base/common/actions","vs/platform/actions/common/actions","vs/platform/platform","vs/workbench/common/actionRegistry","vs/workbench/common/contributions","./snippetsTracker","vs/base/common/errors","vs/workbench/services/quickopen/common/quickOpenService","vs/platform/workspace/common/workspace","vs/platform/jsonschemas/common/jsonContributionRegistry","vs/editor/common/services/modeService","electron","fs"],function(e,t,n,i,o,r,s,c,p,a,l,d,u,f,m,h,b,v){/*---------------------------------------------------------------------------------------------
     *  Copyright (c) Microsoft Corporation. All rights reserved.
     *  Licensed under the MIT License. See License.txt in the project root for license information.
     *--------------------------------------------------------------------------------------------*/
"use strict";function g(e){return new i.TPromise(function(t,n,i){v.stat(e,function(e,n){return e?t(!1):n.isFile()?t(!0):void t(!1)})})}function y(e,t){return new i.Promise(function(n,i,o){v.writeFile(e,t,function(e){e&&i(e),n(!0)})})}var S=function(e){function t(t,n,i,o,r){e.call(this,t,n),this.contextService=i,this.quickOpenService=o,this.modeService=r}return __extends(t,e),t.prototype.openFile=function(e){b.ipcRenderer.send("vscode:windowOpen",[e])},t.prototype.run=function(){var e=this,t=this.modeService.getRegisteredModes(),r=[];return t.forEach(function(t){var n=e.modeService.getLanguageName(t);n&&r.push({label:n,id:t})}),r=r.sort(function(e,t){return e.label.localeCompare(t.label)}),this.quickOpenService.pick(r,{placeHolder:n.localize("openSnippet.pickLanguage","Select Language for Snippet")}).then(function(t){if(t){var r=o.join(e.contextService.getConfiguration().env.appSettingsHome,"snippets",t.id+".json");return g(r).then(function(o){if(o)return e.openFile(r),i.TPromise.as(null);var s=["{","/*","\t // Place your snippets for "+t.label+" here. Each snippet is defined under a snippet name and has a prefix, body and ","\t // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:","\t // $1, $2 for tab stops, ${id} and ${id:label} and ${1:label} for variables. Variables with the same id are connected.","\t // Example:",'\t "Print to console": {','\t\t"prefix": "log",','\t\t"body": [',"\t\t\t\"console.log('$1');\",",'\t\t\t"$2"',"\t\t],",'\t\t"description": "Log output to console"',"\t}","*/","}"].join("\n");return y(r,s).then(function(){e.openFile(r)},function(e){d.onUnexpectedError(n.localize("openSnippet.errorOnCreate","Unable to create {0}",r))})})}return i.TPromise.as(null)})},t.ID="workbench.action.openSnippets",t.LABEL=n.localize("openSnippet.label","Open User Snippets"),t=__decorate([__param(2,f.IWorkspaceContextService),__param(3,u.IQuickOpenService),__param(4,h.IModeService)],t)}(r.Action),x=n.localize("preferences","Preferences"),_=c.Registry.as(p.Extensions.WorkbenchActions);_.registerWorkbenchAction(new s.SyncActionDescriptor(S,S.ID,S.LABEL),"Preferences: Snippets",x),c.Registry.as(a.Extensions.Workbench).registerWorkbenchContribution(l.SnippetsTracker);var k="vscode://schemas/snippets",w={id:k,defaultSnippets:[{label:n.localize("snippetSchema.json.default","Empty snippet"),body:{"{{snippetName}}":{prefix:"{{prefix}}",body:"{{snippet}}",description:"{{description}}"}}}],type:"object",description:n.localize("snippetSchema.json","User snippet configuration"),additionalProperties:{type:"object",required:["prefix","body"],properties:{prefix:{description:n.localize("snippetSchema.json.prefix","The prefix to used when selecting the snippet in intellisense"),type:"string"},body:{description:n.localize("snippetSchema.json.body","The snippet content. Use '${id}', '${id:label}', '${1:label}' for variables and '$0', '$1' for the cursor positions"),type:["string","array"],items:{type:"string"}},description:{description:n.localize("snippetSchema.json.description","The snippet description."),type:"string"}},additionalProperties:!1}},j=c.Registry.as(m.Extensions.JSONContribution);j.registerSchema(k,w)});