import { IWorkbenchContribution } from 'vs/workbench/common/contributions';
import { ITextFileService } from 'vs/workbench/parts/files/common/files';
import { IEditorGroupService } from 'vs/workbench/services/group/common/groupService';
import { IUntitledEditorService } from 'vs/workbench/services/untitled/common/untitledEditorService';
import { IWorkbenchEditorService } from 'vs/workbench/services/editor/common/editorService';
import { IActivityService } from 'vs/workbench/services/activity/common/activityService';
import { IEventService } from 'vs/platform/event/common/event';
import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
import { IHistoryService } from 'vs/workbench/services/history/common/history';
export declare class FileTracker implements IWorkbenchContribution {
    private eventService;
    private editorService;
    private activityService;
    private textFileService;
    private historyService;
    private editorGroupService;
    private instantiationService;
    private untitledEditorService;
    private static FILE_CHANGE_UPDATE_DELAY;
    private lastDirtyCount;
    private stacks;
    private toUnbind;
    private pendingDirtyResources;
    private pendingDirtyHandle;
    constructor(eventService: IEventService, editorService: IWorkbenchEditorService, activityService: IActivityService, textFileService: ITextFileService, historyService: IHistoryService, editorGroupService: IEditorGroupService, instantiationService: IInstantiationService, untitledEditorService: IUntitledEditorService);
    getId(): string;
    private registerListeners();
    private onEditorsChanged();
    private onTextFileDirty(e);
    private doOpenDirtyResources();
    private onTextFileSaveError(e);
    private onTextFileSaved(e);
    private onTextFileReverted(e);
    private onUntitledEditorDirty(e);
    private onUntitledEditorSaved(e);
    private updateActivityBadge();
    private onLocalFileChange(e);
    private onFileChanges(e);
    private isEditorShowingPath(editor, resource);
    private handleMovedFileInVisibleEditors(oldResource, newResource, mimeHint?);
    private getMatchingFileEditorInputFromDiff(input, deletedResource);
    private getMatchingFileEditorInputFromDiff(input, updatedFiles);
    private getMatchingFileEditorInputFromInput(input, deletedResource);
    private getMatchingFileEditorInputFromInput(input, updatedFiles);
    private handleDelete(resource);
    private containsResource(input, resource);
    private disposeUnusedTextFileModels();
    private canDispose(textModel);
    dispose(): void;
}
