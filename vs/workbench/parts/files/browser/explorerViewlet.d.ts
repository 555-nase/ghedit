import 'vs/css!./media/explorerviewlet';
import { IAction } from 'vs/base/common/actions';
import { TPromise } from 'vs/base/common/winjs.base';
import { Dimension, Builder } from 'vs/base/browser/builder';
import { Viewlet } from 'vs/workbench/browser/viewlet';
import { IActionRunner } from 'vs/base/common/actions';
import { IConfigurationService } from 'vs/platform/configuration/common/configuration';
import { ExplorerView } from 'vs/workbench/parts/files/browser/views/explorerView';
import { OpenEditorsView } from 'vs/workbench/parts/files/browser/views/openEditorsView';
import { IStorageService } from 'vs/platform/storage/common/storage';
import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
import { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';
import { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';
import { IWorkbenchEditorService } from 'vs/workbench/services/editor/common/editorService';
import { IEditorGroupService } from 'vs/workbench/services/group/common/groupService';
import { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';
export declare class ExplorerViewlet extends Viewlet {
    private contextService;
    private storageService;
    private editorGroupService;
    private editorService;
    private configurationService;
    private instantiationService;
    private viewletContainer;
    private splitView;
    private views;
    private explorerView;
    private openEditorsView;
    private openEditorsVisible;
    private lastFocusedView;
    private focusListener;
    private delayEditorOpeningInOpenedEditors;
    private viewletSettings;
    private viewletState;
    private dimension;
    private viewletVisibleContextKey;
    constructor(telemetryService: ITelemetryService, contextService: IWorkspaceContextService, storageService: IStorageService, editorGroupService: IEditorGroupService, editorService: IWorkbenchEditorService, configurationService: IConfigurationService, instantiationService: IInstantiationService, keybindingService: IKeybindingService);
    create(parent: Builder): TPromise<void>;
    getActions(): IAction[];
    private onConfigurationUpdated(config);
    private addOpenEditorsView();
    private addExplorerView();
    getExplorerView(): ExplorerView;
    getOpenEditorsView(): OpenEditorsView;
    setVisible(visible: boolean): TPromise<void>;
    focus(): void;
    private hasSelectionOrFocus(view);
    layout(dimension: Dimension): void;
    getActionRunner(): IActionRunner;
    getOptimalWidth(): number;
    shutdown(): void;
    dispose(): void;
}
