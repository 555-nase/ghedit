{"version":3,"sources":["vs/workbench/parts/files/browser/saveErrorHandler.ts"],"names":[],"mappings":"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","file":"vs/workbench/parts/files/browser/saveErrorHandler.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport nls = require('vs/nls');\nimport errors = require('vs/base/common/errors');\nimport paths = require('vs/base/common/paths');\nimport {Action} from 'vs/base/common/actions';\nimport URI from 'vs/base/common/uri';\nimport {EditorModel} from 'vs/workbench/common/editor';\nimport {guessMimeTypes} from 'vs/base/common/mime';\nimport {EditorInputAction} from 'vs/workbench/browser/parts/editor/baseEditor';\nimport {ResourceEditorInput} from 'vs/workbench/common/editor/resourceEditorInput';\nimport {DiffEditorInput} from 'vs/workbench/common/editor/diffEditorInput';\nimport {DiffEditorModel} from 'vs/workbench/common/editor/diffEditorModel';\nimport {FileEditorInput} from 'vs/workbench/parts/files/browser/editors/fileEditorInput';\nimport {SaveFileAsAction, RevertFileAction, SaveFileAction} from 'vs/workbench/parts/files/browser/fileActions';\nimport {IFileService, IFileOperationResult, FileOperationResult} from 'vs/platform/files/common/files';\nimport {TextFileEditorModel, ISaveErrorHandler} from 'vs/workbench/parts/files/common/editors/textFileEditorModel';\nimport {IWorkbenchEditorService} from 'vs/workbench/services/editor/common/editorService';\nimport {IEventService} from 'vs/platform/event/common/event';\nimport {IInstantiationService} from 'vs/platform/instantiation/common/instantiation';\nimport {IMessageService, IMessageWithAction, Severity, CancelAction} from 'vs/platform/message/common/message';\nimport {IWorkspaceContextService} from 'vs/platform/workspace/common/workspace';\nimport {IModeService} from 'vs/editor/common/services/modeService';\nimport {IModelService} from 'vs/editor/common/services/modelService';\n\n// A handler for save error happening with conflict resolution actions\nexport class SaveErrorHandler implements ISaveErrorHandler {\n\n\tconstructor(\n\t\t@IMessageService private messageService: IMessageService,\n\t\t@IInstantiationService private instantiationService: IInstantiationService\n\t) {\n\t}\n\n\tpublic onSaveError(error: any, model: TextFileEditorModel): void {\n\t\tlet message: IMessageWithAction;\n\n\t\t// Dirty write prevention\n\t\tif ((<IFileOperationResult>error).fileOperationResult === FileOperationResult.FILE_MODIFIED_SINCE) {\n\t\t\tmessage = this.instantiationService.createInstance(ResolveSaveConflictMessage, model, null);\n\t\t}\n\n\t\t// Any other save error\n\t\telse {\n\t\t\tlet isReadonly = (<IFileOperationResult>error).fileOperationResult === FileOperationResult.FILE_READ_ONLY;\n\t\t\tlet actions: Action[] = [];\n\n\t\t\t// Cancel\n\t\t\tactions.push(CancelAction);\n\n\t\t\t// Retry\n\t\t\tif (isReadonly) {\n\t\t\t\tactions.push(new Action('workbench.files.action.overwrite', nls.localize('overwrite', \"Overwrite\"), null, true, () => {\n\t\t\t\t\tif (!model.isDisposed()) {\n\t\t\t\t\t\treturn model.save(true /* overwrite readonly */).then(() => true);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn TPromise.as(true);\n\t\t\t\t}));\n\t\t\t} else {\n\t\t\t\tactions.push(new Action('workbench.files.action.retry', nls.localize('retry', \"Retry\"), null, true, () => {\n\t\t\t\t\tlet saveFileAction = this.instantiationService.createInstance(SaveFileAction, SaveFileAction.ID, SaveFileAction.LABEL);\n\t\t\t\t\tsaveFileAction.setResource(model.getResource());\n\n\t\t\t\t\treturn saveFileAction.run().then(() => { saveFileAction.dispose(); return true; });\n\t\t\t\t}));\n\t\t\t}\n\n\t\t\t// Discard\n\t\t\tactions.push(new Action('workbench.files.action.discard', nls.localize('discard', \"Discard\"), null, true, () => {\n\t\t\t\tlet revertFileAction = this.instantiationService.createInstance(RevertFileAction, RevertFileAction.ID, RevertFileAction.LABEL);\n\t\t\t\trevertFileAction.setResource(model.getResource());\n\n\t\t\t\treturn revertFileAction.run().then(() => { revertFileAction.dispose(); return true; });\n\t\t\t}));\n\n\t\t\t// Save As\n\t\t\tactions.push(new Action('workbench.files.action.saveAs', SaveFileAsAction.LABEL, null, true, () => {\n\t\t\t\tlet saveAsAction = this.instantiationService.createInstance(SaveFileAsAction, SaveFileAsAction.ID, SaveFileAsAction.LABEL);\n\t\t\t\tsaveAsAction.setResource(model.getResource());\n\n\t\t\t\treturn saveAsAction.run().then(() => { saveAsAction.dispose(); return true; });\n\t\t\t}));\n\n\t\t\tlet errorMessage: string;\n\t\t\tif (isReadonly) {\n\t\t\t\terrorMessage = nls.localize('readonlySaveError', \"Failed to save '{0}': File is write protected. Select 'Overwrite' to remove protection.\", paths.basename(model.getResource().fsPath));\n\t\t\t} else {\n\t\t\t\terrorMessage = nls.localize('genericSaveError', \"Failed to save '{0}': {1}\", paths.basename(model.getResource().fsPath), errors.toErrorMessage(error, false));\n\t\t\t}\n\n\t\t\tmessage = {\n\t\t\t\tmessage: errorMessage,\n\t\t\t\tactions: actions\n\t\t\t};\n\t\t}\n\n\t\tif (this.messageService) {\n\t\t\tthis.messageService.show(Severity.Error, message);\n\t\t}\n\t}\n}\n\n// Save conflict resolution editor input\nexport class ConflictResolutionDiffEditorInput extends DiffEditorInput {\n\n\tpublic static ID = 'workbench.editors.files.conflictResolutionDiffEditorInput';\n\n\tprivate model: TextFileEditorModel;\n\n\tconstructor(\n\t\tmodel: TextFileEditorModel,\n\t\tname: string,\n\t\tdescription: string,\n\t\toriginalInput: FileOnDiskEditorInput,\n\t\tmodifiedInput: FileEditorInput,\n\t\t@IMessageService private messageService: IMessageService,\n\t\t@IInstantiationService private instantiationService: IInstantiationService,\n\t\t@IEventService private eventService: IEventService,\n\t\t@IWorkbenchEditorService private editorService: IWorkbenchEditorService\n\t) {\n\t\tsuper(name, description, originalInput, modifiedInput);\n\n\t\tthis.model = model;\n\t}\n\n\tpublic getModel(): TextFileEditorModel {\n\t\treturn this.model;\n\t}\n\n\tpublic getId(): string {\n\t\treturn ConflictResolutionDiffEditorInput.ID;\n\t}\n}\n\nexport class FileOnDiskEditorInput extends ResourceEditorInput {\n\tprivate fileResource: URI;\n\tprivate lastModified: number;\n\tprivate mime: string;\n\tprivate createdEditorModel: boolean;\n\n\tconstructor(\n\t\tfileResource: URI,\n\t\tmime: string,\n\t\tname: string,\n\t\tdescription: string,\n\t\t@IModelService modelService: IModelService,\n\t\t@IModeService private modeService: IModeService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IFileService private fileService: IFileService\n\t) {\n\t\t// We create a new resource URI here that is different from the file resource because we represent the state of\n\t\t// the file as it is on disk and not as it is (potentially cached) in Code. That allows us to have a different\n\t\t// model for the left-hand comparision compared to the conflicting one in Code to the right.\n\t\tsuper(name, description, URI.create('disk', null, fileResource.fsPath), modelService, instantiationService);\n\n\t\tthis.fileResource = fileResource;\n\t\tthis.mime = mime;\n\t}\n\n\tpublic getLastModified(): number {\n\t\treturn this.lastModified;\n\t}\n\n\tpublic resolve(refresh?: boolean): TPromise<EditorModel> {\n\n\t\t// Make sure our file from disk is resolved up to date\n\t\treturn this.fileService.resolveContent(this.fileResource).then(content => {\n\t\t\tthis.lastModified = content.mtime;\n\n\t\t\tlet codeEditorModel = this.modelService.getModel(this.resource);\n\t\t\tif (!codeEditorModel) {\n\t\t\t\tthis.modelService.createModel(content.value, this.modeService.getOrCreateMode(this.mime), this.resource);\n\t\t\t\tthis.createdEditorModel = true;\n\t\t\t} else {\n\t\t\t\tcodeEditorModel.setValue(content.value);\n\t\t\t}\n\n\t\t\treturn super.resolve(refresh);\n\t\t});\n\t}\n\n\tpublic dispose(): void {\n\t\tif (this.createdEditorModel) {\n\t\t\tthis.modelService.destroyModel(this.resource);\n\t\t\tthis.createdEditorModel = false;\n\t\t}\n\n\t\tsuper.dispose();\n\t}\n}\n\n// A message with action to resolve a 412 save conflict\nclass ResolveSaveConflictMessage implements IMessageWithAction {\n\tpublic message: string;\n\tpublic actions: Action[];\n\n\tprivate model: TextFileEditorModel;\n\n\tconstructor(\n\t\tmodel: TextFileEditorModel,\n\t\tmessage: string,\n\t\t@IMessageService private messageService: IMessageService,\n\t\t@IInstantiationService private instantiationService: IInstantiationService,\n\t\t@IWorkspaceContextService private contextService: IWorkspaceContextService,\n\t\t@IWorkbenchEditorService private editorService: IWorkbenchEditorService\n\t) {\n\t\tthis.model = model;\n\n\t\tconst resource = model.getResource();\n\t\tif (message) {\n\t\t\tthis.message = message;\n\t\t} else {\n\t\t\tthis.message = nls.localize('staleSaveError', \"Failed to save '{0}': The content on disk is newer. Click on **Compare** to compare your version with the one on disk.\", paths.basename(resource.fsPath));\n\t\t}\n\n\t\tthis.actions = [\n\t\t\tnew Action('workbench.files.action.resolveConflict', nls.localize('compareChanges', \"Compare\"), null, true, () => {\n\t\t\t\tif (!this.model.isDisposed()) {\n\t\t\t\t\tlet mime = guessMimeTypes(resource.fsPath).join(', ');\n\t\t\t\t\tlet originalInput = this.instantiationService.createInstance(FileOnDiskEditorInput, resource, mime, paths.basename(resource.fsPath), resource.fsPath);\n\t\t\t\t\tlet modifiedInput = this.instantiationService.createInstance(FileEditorInput, resource, mime, void 0);\n\t\t\t\t\tlet conflictInput = this.instantiationService.createInstance(ConflictResolutionDiffEditorInput, this.model, nls.localize('saveConflictDiffLabel', \"{0} - on disk ↔ in {1}\", modifiedInput.getName(), this.contextService.getConfiguration().env.appName), nls.localize('resolveSaveConflict', \"{0} - Resolve save conflict\", modifiedInput.getDescription()), originalInput, modifiedInput);\n\n\t\t\t\t\treturn this.editorService.openEditor(conflictInput).then(() => {\n\n\t\t\t\t\t\t// We have to bring the model into conflict resolution mode to prevent subsequent save erros when the user makes edits\n\t\t\t\t\t\tthis.model.setConflictResolutionMode();\n\n\t\t\t\t\t\t// Inform user\n\t\t\t\t\t\tthis.messageService.show(Severity.Info, nls.localize('userGuide', \"Use the actions in the editor tool bar to either **undo** your changes or **overwrite** the content on disk with your changes\"));\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\treturn TPromise.as(true);\n\t\t\t})\n\t\t];\n\t}\n}\n\n// Accept changes to resolve a conflicting edit\nexport class AcceptLocalChangesAction extends EditorInputAction {\n\tprivate messagesToHide: { (): void; }[];\n\n\tconstructor(\n\t\t@IMessageService private messageService: IMessageService,\n\t\t@IInstantiationService private instantiationService: IInstantiationService,\n\t\t@IWorkbenchEditorService private editorService: IWorkbenchEditorService\n\t) {\n\t\tsuper('workbench.files.action.acceptLocalChanges', nls.localize('acceptLocalChanges', \"Use local changes and overwrite disk contents\"), 'conflict-editor-action accept-changes');\n\n\t\tthis.messagesToHide = [];\n\t}\n\n\tpublic run(): TPromise<void> {\n\t\tlet conflictInput = <ConflictResolutionDiffEditorInput>this.input;\n\t\tlet model = conflictInput.getModel();\n\t\tlet localModelValue = model.getValue();\n\n\t\t// 1.) Get the diff editor model from cache (resolve(false)) to have access to the mtime of the file we currently show to the left\n\t\treturn conflictInput.resolve(false).then((diffModel: DiffEditorModel) => {\n\t\t\tlet knownLastModified = (<FileOnDiskEditorInput>conflictInput.originalInput).getLastModified();\n\n\t\t\t// 2.) Revert the model to get the latest copy from disk and to have access to the mtime of the file now\n\t\t\treturn model.revert().then(() => {\n\t\t\t\tlet diskLastModified = model.getLastModifiedTime();\n\n\t\t\t\t// 3. a) If we know that the file on the left hand side was not modified meanwhile, restore the user value and trigger a save\n\t\t\t\tif (diskLastModified <= knownLastModified) {\n\n\t\t\t\t\t// Restore user value\n\t\t\t\t\tmodel.textEditorModel.setValue(localModelValue);\n\n\t\t\t\t\t// Trigger save\n\t\t\t\t\treturn model.save().then(() => {\n\n\t\t\t\t\t\t// Hide any previously shown messages\n\t\t\t\t\t\twhile (this.messagesToHide.length) {\n\t\t\t\t\t\t\tthis.messagesToHide.pop()();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Reopen file input\n\t\t\t\t\t\tlet input = this.instantiationService.createInstance(FileEditorInput, model.getResource(), guessMimeTypes(model.getResource().fsPath).join(', '), void 0);\n\t\t\t\t\t\treturn this.editorService.openEditor(input, null, this.position).then(() => {\n\n\t\t\t\t\t\t\t// Dispose conflict input\n\t\t\t\t\t\t\tconflictInput.dispose();\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\t// 3. b) The file was changed on disk while it was shown in the conflict editor\n\t\t\t\telse {\n\n\t\t\t\t\t// Again, we have to bring the model into conflict resolution because revert() would have cleared it\n\t\t\t\t\tmodel.setConflictResolutionMode();\n\n\t\t\t\t\t// Restore user value\n\t\t\t\t\tmodel.textEditorModel.setValue(localModelValue);\n\n\t\t\t\t\t// Reload the left hand side of the diff editor to show the up to date version and inform the user that he has to redo the action\n\t\t\t\t\treturn conflictInput.originalInput.resolve(true).then(() => {\n\t\t\t\t\t\tthis.messagesToHide.push(this.messageService.show(Severity.Info, nls.localize('conflictingFileHasChanged', \"The content of the file on disk has changed and the left hand side of the compare editor was refreshed. Please review and resolve again.\")));\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n}\n\n// Revert changes to resolve a conflicting edit\nexport class RevertLocalChangesAction extends EditorInputAction {\n\n\tconstructor(\n\t\t@IInstantiationService private instantiationService: IInstantiationService,\n\t\t@IWorkbenchEditorService private editorService: IWorkbenchEditorService\n\t) {\n\t\tsuper('workbench.action.files.revert', nls.localize('revertLocalChanges', \"Discard local changes and revert to content on disk\"), 'conflict-editor-action revert-changes');\n\t}\n\n\tpublic run(): TPromise<void> {\n\t\tlet conflictInput = <ConflictResolutionDiffEditorInput>this.input;\n\t\tlet model = conflictInput.getModel();\n\n\t\t// Revert on model\n\t\treturn model.revert().then(() => {\n\n\t\t\t// Reopen file input\n\t\t\tlet input = this.instantiationService.createInstance(FileEditorInput, model.getResource(), guessMimeTypes(model.getResource().fsPath).join(', '), void 0);\n\t\t\treturn this.editorService.openEditor(input, null, this.position).then(() => {\n\n\t\t\t\t// Dispose conflict input\n\t\t\t\tconflictInput.dispose();\n\t\t\t});\n\t\t});\n\t}\n}"]}