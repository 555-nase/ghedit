{"version":3,"file":"vs/workbench/parts/markdown/browser/markdownExtension.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/workbench/parts/markdown/browser/markdownExtension.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport types = require('vs/base/common/types');\nimport URI from 'vs/base/common/uri';\nimport {EventType} from 'vs/base/common/events';\nimport {FileChangeType, FileChangesEvent, EventType as FileEventType} from 'vs/platform/files/common/files';\nimport paths = require('vs/base/common/paths');\nimport {EventType as EditorEventType, IModelContentChangedEvent} from 'vs/editor/common/editorCommon';\nimport {getBaseThemeId} from 'vs/platform/theme/common/themes';\nimport {IWorkbenchContribution} from 'vs/workbench/common/contributions';\nimport {IFrameEditor} from 'vs/workbench/browser/parts/editor/iframeEditor';\nimport {MarkdownEditorInput} from 'vs/workbench/parts/markdown/common/markdownEditorInput';\nimport {EditorEvent, EventType as WorkbenchEventType} from 'vs/workbench/common/events';\nimport {IWorkbenchEditorService} from 'vs/workbench/services/editor/common/editorService';\nimport {IWorkspaceContextService} from 'vs/workbench/services/workspace/common/contextService';\nimport {IConfigurationService, IConfigurationServiceEvent, ConfigurationServiceEventTypes} from 'vs/platform/configuration/common/configuration';\nimport {IModelService} from 'vs/editor/common/services/modelService';\nimport {IEventService} from 'vs/platform/event/common/event';\nimport {IInstantiationService} from 'vs/platform/instantiation/common/instantiation';\nimport {IModeService} from 'vs/editor/common/services/modeService';\nimport {IThemeService} from 'vs/workbench/services/themes/common/themeService';\nimport {IDisposable} from 'vs/base/common/lifecycle';\n\ninterface ILanguageConfiguration {\n\tmarkdown: {\n\t\tstyles: string[];\n\t};\n}\n\n// This extension tracks markdown files for changes to update markdown editors and inputs accordingly.\nexport class MarkdownFileTracker implements IWorkbenchContribution {\n\n\tprivate static RELOAD_MARKDOWN_DELAY = 300; // delay before reloading markdown preview after user typing\n\n\tprivate fileChangeListener: () => void;\n\tprivate configFileChangeListener: () => void;\n\tprivate themeChangeListener: IDisposable;\n\tprivate editorInputChangeListener: () => void;\n\tprivate markdownConfigurationThumbprint: string;\n\tprivate markdownConfigurationPaths: string[];\n\tprivate reloadTimeout: number;\n\tprivate hasModelListenerOnResourcePath: { [resource: string]: boolean; };\n\n\tconstructor(\n\t\t@IModeService private modeService: IModeService,\n\t\t@IEventService private eventService: IEventService,\n\t\t@IWorkbenchEditorService private editorService: IWorkbenchEditorService,\n\t\t@IConfigurationService private configurationService: IConfigurationService,\n\t\t@IWorkspaceContextService private contextService: IWorkspaceContextService,\n\t\t@IModelService private modelService: IModelService,\n\t\t@IInstantiationService private instantiationService: IInstantiationService,\n\t\t@IThemeService private themeService: IThemeService\n\t) {\n\t\tthis.markdownConfigurationPaths = [];\n\t\tthis.hasModelListenerOnResourcePath = Object.create(null);\n\n\t\tthis.configureMode(themeService.getTheme());\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis.fileChangeListener = this.eventService.addListener(FileEventType.FILE_CHANGES, (e: FileChangesEvent) => this.onFileChanges(e));\n\t\tthis.configFileChangeListener = this.configurationService.addListener(ConfigurationServiceEventTypes.UPDATED, (e: IConfigurationServiceEvent) => this.onConfigFileChange(e));\n\n\t\t// reload markdown editors when their resources change\n\t\tthis.editorInputChangeListener = this.eventService.addListener(WorkbenchEventType.EDITOR_INPUT_CHANGED, (e: EditorEvent) => this.onEditorInputChanged(e));\n\n\t\t// initially read the config for CSS styles in preview\n\t\tthis.readMarkdownConfiguration(this.configurationService.getConfiguration<ILanguageConfiguration>());\n\n\t\t// listen to theme changes\n\t\tthis.themeChangeListener = this.themeService.onDidThemeChange(themeId => {\n\t\t\tthis.configureMode(themeId);\n\t\t\tthis.reloadMarkdownEditors(true);\n\t\t});\n\t}\n\n\tprivate onEditorInputChanged(e: EditorEvent): void {\n\t\tlet input = e.editorInput;\n\t\tif (input instanceof MarkdownEditorInput) {\n\t\t\tlet markdownResource = input.getResource();\n\t\t\tlet editorModel = this.modelService.getModel(markdownResource);\n\t\t\tif (editorModel && !this.hasModelListenerOnResourcePath[markdownResource.toString()]) {\n\t\t\t\tlet toUnbind: Function[] = [];\n\t\t\t\tlet unbind = () => {\n\t\t\t\t\twhile (toUnbind.length) {\n\t\t\t\t\t\ttoUnbind.pop()();\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.hasModelListenerOnResourcePath[markdownResource.toString()] = false;\n\t\t\t\t};\n\n\t\t\t\t// Listen on changes to the underlying resource of the markdown preview\n\t\t\t\ttoUnbind.push(editorModel.addListener(EditorEventType.ModelContentChanged, (modelEvent: IModelContentChangedEvent) => {\n\t\t\t\t\tif (this.reloadTimeout) {\n\t\t\t\t\t\twindow.clearTimeout(this.reloadTimeout);\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.reloadTimeout = setTimeout(() => {\n\t\t\t\t\t\tif (!this.reloadMarkdownEditors(false, markdownResource)) {\n\t\t\t\t\t\t\tunbind();\n\t\t\t\t\t\t}\n\t\t\t\t\t}, MarkdownFileTracker.RELOAD_MARKDOWN_DELAY);\n\t\t\t\t}));\n\n\t\t\t\t// Mark as being listened\n\t\t\t\tthis.hasModelListenerOnResourcePath[markdownResource.toString()] = true;\n\n\t\t\t\t// Unbind when input or model gets disposed\n\t\t\t\ttoUnbind.push(input.addListener(EventType.DISPOSE, unbind));\n\t\t\t\ttoUnbind.push(editorModel.addListener(EditorEventType.ModelDispose, unbind));\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate configureMode(theme: string): void {\n\t\tif (theme) {\n\t\t\tlet baseTheme = getBaseThemeId(theme);\n\t\t\tthis.modeService.configureMode('text/x-web-markdown', { theme: baseTheme });\n\t\t}\n\t}\n\n\tpublic getId(): string {\n\t\treturn 'vs.markdown.filetracker';\n\t}\n\n\tprivate onConfigFileChange(e: IConfigurationServiceEvent): void {\n\n\t\t// reload markdown editors if styles change\n\t\tif (this.readMarkdownConfiguration(e.config)) {\n\t\t\tthis.reloadMarkdownEditors(true);\n\t\t}\n\t}\n\n\tprivate readMarkdownConfiguration(languageConfiguration: ILanguageConfiguration): boolean {\n\t\tlet oldMarkdownConfigurationThumbprint = this.markdownConfigurationThumbprint;\n\t\tlet newMarkdownConfigurationThumbprint: string;\n\n\t\t// Reset old\n\t\tthis.markdownConfigurationThumbprint = null;\n\t\tthis.markdownConfigurationPaths = [];\n\n\t\tif (languageConfiguration) {\n\t\t\tlet markdownConfiguration = languageConfiguration.markdown;\n\t\t\tif (markdownConfiguration && types.isArray(markdownConfiguration.styles)) {\n\t\t\t\tnewMarkdownConfigurationThumbprint = markdownConfiguration.styles.join('');\n\n\t\t\t\tlet styles: string[] = markdownConfiguration.styles.map((style: string) => paths.makeAbsolute(paths.normalize(style)));\n\t\t\t\tthis.markdownConfigurationPaths = styles;\n\t\t\t}\n\t\t}\n\n\t\t// Remember as current\n\t\tthis.markdownConfigurationThumbprint = newMarkdownConfigurationThumbprint;\n\n\t\treturn (oldMarkdownConfigurationThumbprint !== newMarkdownConfigurationThumbprint);\n\t}\n\n\tprivate onFileChanges(e: FileChangesEvent): void {\n\n\t\t// If any of the markdown CSS styles have updated, reload all markdown editors\n\t\tif (this.markdownConfigurationPaths.length && e.containsAny(this.markdownConfigurationPaths.map((p) => this.contextService.toResource(p)), FileChangeType.UPDATED)) {\n\t\t\tthis.reloadMarkdownEditors(true);\n\t\t}\n\t}\n\n\tprivate reloadMarkdownEditors(clearIFrame: boolean, resource?: URI): boolean {\n\t\tlet didReload = false;\n\n\t\tlet editors = this.editorService.getVisibleEditors();\n\t\teditors.forEach((editor) => {\n\n\t\t\t// Only applicable to markdown editor inputs in iframe editors\n\t\t\tlet input = editor.input;\n\t\t\tif (input instanceof MarkdownEditorInput && editor instanceof IFrameEditor) {\n\t\t\t\tif (!resource || resource.toString() === input.getResource().toString()) {\n\t\t\t\t\t(<IFrameEditor>editor).reload(clearIFrame);\n\t\t\t\t\tdidReload = true;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn didReload;\n\t}\n\n\tpublic dispose(): void {\n\t\tif (this.fileChangeListener) {\n\t\t\tthis.fileChangeListener();\n\t\t\tthis.fileChangeListener = null;\n\t\t}\n\n\t\tif (this.configFileChangeListener) {\n\t\t\tthis.configFileChangeListener();\n\t\t\tthis.configFileChangeListener = null;\n\t\t}\n\n\t\tif (this.editorInputChangeListener) {\n\t\t\tthis.editorInputChangeListener();\n\t\t\tthis.editorInputChangeListener = null;\n\t\t}\n\t}\n}"]}