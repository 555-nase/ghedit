{"version":3,"sources":["vs/workbench/parts/markdown/common/markdownEditorInput.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;IAAA;;;oGAGgG;IAChG,YAAY,CAAC;IAYb;;OAEG;IACH;QAAyC,uCAAiB;QAIzD,6BACC,QAAa,EACb,KAAa,EACb,WAAmB,EACY,oBAA2C,EACxC,cAAwC;YAE1E,kBAAM,QAAQ,EAAE,KAAK,IAAI,GAAG,CAAC,QAAQ,CAAC,CAAS,EAAE,IAAe,EAAE,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,EAAE,WAAW,IAAI,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,cAAc,CAAC,CAAC,CAAC;YAHzJ,yBAAoB,GAApB,oBAAoB,CAAuB;YACxC,mBAAc,GAAd,cAAc,CAA0B;QAG3E,CAAC;QAEM,uCAAS,GAAhB,UAAiB,QAAa;YAC7B,MAAM,CAAC,IAAI,CAAC,oBAAoB,CAAC,cAAc,CAAC,mBAAmB,EAAE,QAAQ,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;QAChG,CAAC;QAEM,mCAAK,GAAZ;YACC,MAAM,CAAC,mBAAmB,CAAC,EAAE,CAAC;QAC/B,CAAC;QAES,yCAAW,GAArB;YACC,MAAM,CAAC,IAAI,CAAC,oBAAoB,CAAC,cAAc,CAAC,yCAAmB,EAAE,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;QAC1F,CAAC;QAEM,qCAAO,GAAd,UAAe,UAAe;YAC7B,EAAE,CAAC,CAAC,CAAC,CAAC,UAAU,YAAY,mBAAmB,CAAC,CAAC,CAAC,CAAC;gBAClD,MAAM,CAAC,KAAK,CAAC;YACd,CAAC;YAED,MAAM,CAAC,gBAAK,CAAC,OAAO,YAAC,UAAU,CAAC,CAAC;QAClC,CAAC;QA9Ba,sBAAE,GAAW,aAAa,CAAC;QAMxC;uBAAC,qCAAqB;uBACrB,oCAAwB;+BADH;QAyBxB,0BAAC;IAAD,CAjCA,AAiCC,CAjCwC,qCAAiB,GAiCzD;IAjCY,2BAAmB,sBAiC/B,CAAA","file":"vs/workbench/parts/markdown/common/markdownEditorInput.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport nls = require('vs/nls');\nimport URI from 'vs/base/common/uri';\nimport paths = require('vs/base/common/paths');\nimport labels = require('vs/base/common/labels');\nimport {IFrameEditorInput} from 'vs/workbench/common/editor/iframeEditorInput';\nimport {MarkdownEditorModel} from 'vs/workbench/parts/markdown/common/markdownEditorModel';\nimport {EditorModel} from 'vs/workbench/common/editor';\nimport {IInstantiationService} from 'vs/platform/instantiation/common/instantiation';\nimport {IWorkspaceContextService} from 'vs/platform/workspace/common/workspace';\n\n/**\n * An editor input to show a rendered version of a markdown file.\n */\nexport class MarkdownEditorInput extends IFrameEditorInput {\n\n\tpublic static ID: string = 'vs.markdown';\n\n\tconstructor(\n\t\tresource: URI,\n\t\tlabel: string,\n\t\tdescription: string,\n\t\t@IInstantiationService private instantiationService: IInstantiationService,\n\t\t@IWorkspaceContextService private contextService: IWorkspaceContextService\n\t) {\n\t\tsuper(resource, label || nls.localize('preview', \"Preview '{0}'\", paths.basename(resource.fsPath)), description || labels.getPathLabel(paths.dirname(resource.fsPath), contextService));\n\t}\n\n\tpublic createNew(resource: URI): MarkdownEditorInput {\n\t\treturn this.instantiationService.createInstance(MarkdownEditorInput, resource, void 0, void 0);\n\t}\n\n\tpublic getId(): string {\n\t\treturn MarkdownEditorInput.ID;\n\t}\n\n\tprotected createModel(): EditorModel {\n\t\treturn this.instantiationService.createInstance(MarkdownEditorModel, this.getResource());\n\t}\n\n\tpublic matches(otherInput: any): boolean {\n\t\tif (!(otherInput instanceof MarkdownEditorInput)) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn super.matches(otherInput);\n\t}\n}"]}