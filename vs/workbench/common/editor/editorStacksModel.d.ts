import Event from 'vs/base/common/event';
import { EditorInput, IEditorStacksModel, IEditorGroup, IEditorIdentifier, IGroupEvent, GroupIdentifier, IStacksModelChangeEvent } from 'vs/workbench/common/editor';
import URI from 'vs/base/common/uri';
import { IStorageService } from 'vs/platform/storage/common/storage';
import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
import { IConfigurationService } from 'vs/platform/configuration/common/configuration';
import { ILifecycleService } from 'vs/platform/lifecycle/common/lifecycle';
import { IWorkspaceContextService } from 'vs/workbench/services/workspace/common/contextService';
import { Position, Direction } from 'vs/platform/editor/common/editor';
export interface GroupEvent extends IGroupEvent {
    editor: EditorInput;
}
export interface EditorIdentifier extends IEditorIdentifier {
    group: EditorGroup;
    editor: EditorInput;
}
export interface IEditorOpenOptions {
    pinned?: boolean;
    active?: boolean;
    index?: number;
}
export interface ISerializedEditorInput {
    id: string;
    value: string;
}
export interface ISerializedEditorGroup {
    label: string;
    editors: ISerializedEditorInput[];
    mru: number[];
    preview: number;
}
export declare class EditorGroup implements IEditorGroup {
    private instantiationService;
    private configurationService;
    private static IDS;
    private _id;
    private _label;
    private editors;
    private mru;
    private mapResourceToEditorCount;
    private preview;
    private active;
    private toDispose;
    private editorOpenPositioning;
    private _onEditorActivated;
    private _onEditorOpened;
    private _onEditorClosed;
    private _onEditorDisposed;
    private _onEditorDirty;
    private _onEditorMoved;
    private _onEditorPinned;
    private _onEditorUnpinned;
    private _onEditorStateChanged;
    private _onEditorsStructureChanged;
    constructor(arg1: string | ISerializedEditorGroup, instantiationService: IInstantiationService, configurationService: IConfigurationService);
    private registerListeners();
    private onConfigurationUpdated(config);
    id: GroupIdentifier;
    label: string;
    count: number;
    onEditorActivated: Event<EditorInput>;
    onEditorOpened: Event<EditorInput>;
    onEditorClosed: Event<GroupEvent>;
    onEditorDisposed: Event<EditorInput>;
    onEditorDirty: Event<EditorInput>;
    onEditorMoved: Event<EditorInput>;
    onEditorPinned: Event<EditorInput>;
    onEditorUnpinned: Event<EditorInput>;
    onEditorStateChanged: Event<EditorInput>;
    onEditorsStructureChanged: Event<EditorInput>;
    getEditors(mru?: boolean): EditorInput[];
    getEditor(index: number): EditorInput;
    activeEditor: EditorInput;
    isActive(editor: EditorInput): boolean;
    previewEditor: EditorInput;
    isPreview(editor: EditorInput): boolean;
    openEditor(editor: EditorInput, options?: IEditorOpenOptions): void;
    private hookEditorListeners(editor);
    closeEditor(editor: EditorInput, openNext?: boolean): void;
    closeEditors(except: EditorInput, direction?: Direction): void;
    closeAllEditors(): void;
    moveEditor(editor: EditorInput, toIndex: number): void;
    setActive(editor: EditorInput): void;
    pin(editor: EditorInput): void;
    unpin(editor: EditorInput): void;
    isPinned(editor: EditorInput): boolean;
    private fireEvent(emitter, arg2, isStructuralChange);
    private splice(index, del, editor?);
    private updateResourceMap(editor, remove);
    indexOf(candidate: EditorInput, editors?: EditorInput[]): number;
    contains(candidate: EditorInput): boolean;
    contains(resource: URI): boolean;
    private setMostRecentlyUsed(editor);
    private matches(editorA, editorB);
    serialize(): ISerializedEditorGroup;
    private deserialize(data);
    dispose(): void;
}
export declare class EditorStacksModel implements IEditorStacksModel {
    private storageService;
    private lifecycleService;
    private contextService;
    private instantiationService;
    private static STORAGE_KEY;
    private toDispose;
    private loaded;
    private _groups;
    private _activeGroup;
    private groupToIdentifier;
    private _onGroupOpened;
    private _onGroupClosed;
    private _onGroupMoved;
    private _onGroupActivated;
    private _onGroupDeactivated;
    private _onGroupRenamed;
    private _onEditorDisposed;
    private _onEditorDirty;
    private _onEditorClosed;
    private _onModelChanged;
    constructor(storageService: IStorageService, lifecycleService: ILifecycleService, contextService: IWorkspaceContextService, instantiationService: IInstantiationService);
    private registerListeners();
    onGroupOpened: Event<EditorGroup>;
    onGroupClosed: Event<EditorGroup>;
    onGroupActivated: Event<EditorGroup>;
    onGroupDeactivated: Event<EditorGroup>;
    onGroupMoved: Event<EditorGroup>;
    onGroupRenamed: Event<EditorGroup>;
    onModelChanged: Event<IStacksModelChangeEvent>;
    onEditorDisposed: Event<EditorIdentifier>;
    onEditorDirty: Event<EditorIdentifier>;
    onEditorClosed: Event<GroupEvent>;
    groups: EditorGroup[];
    activeGroup: EditorGroup;
    isActive(group: EditorGroup): boolean;
    getGroup(id: GroupIdentifier): EditorGroup;
    openGroup(label: string, activate?: boolean, index?: number): EditorGroup;
    renameGroup(group: EditorGroup, label: string): void;
    closeGroup(group: EditorGroup): void;
    closeGroups(except?: EditorGroup): void;
    setActive(group: EditorGroup): void;
    moveGroup(group: EditorGroup, toIndex: number): void;
    private indexOf(group);
    positionOfGroup(group: IEditorGroup): Position;
    positionOfGroup(group: EditorGroup): Position;
    groupAt(position: Position): EditorGroup;
    next(): IEditorIdentifier;
    previous(): IEditorIdentifier;
    private save();
    private serialize();
    private fireEvent(emitter, group, isStructuralChange);
    private ensureLoaded();
    private load();
    private doValidate(serialized);
    private doCreateGroup(arg1);
    private handleOnEditorClosed(event);
    isOpen(resource: URI): boolean;
    isOpen(editor: EditorInput): boolean;
    private onShutdown();
    validate(): void;
    toString(): string;
}
