{"version":3,"file":"vs/platform/extensions/common/nativeExtensionService.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/platform/extensions/common/nativeExtensionService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {dispose} from 'vs/base/common/lifecycle';\nimport {IDisposable} from 'vs/base/common/lifecycle';\nimport * as paths from 'vs/base/common/paths';\nimport Severity from 'vs/base/common/severity';\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport {AbstractExtensionService, ActivatedExtension} from 'vs/platform/extensions/common/abstractExtensionService';\nimport {IMessage, IExtensionDescription, IExtensionsStatus} from 'vs/platform/extensions/common/extensions';\nimport {ExtensionsRegistry} from 'vs/platform/extensions/common/extensionsRegistry';\nimport {IMessageService} from 'vs/platform/message/common/message';\nimport {ExtHostStorage} from 'vs/platform/storage/common/remotable.storage';\nimport {ITelemetryService} from 'vs/platform/telemetry/common/telemetry';\nimport {IThreadService, Remotable} from 'vs/platform/thread/common/thread';\nimport {IWorkspaceContextService} from 'vs/platform/workspace/common/workspace';\n\nconst hasOwnProperty = Object.hasOwnProperty;\n\n/**\n * Represents a failed extension in the ext host.\n */\nclass MainProcessFailedExtension extends ActivatedExtension {\n\tconstructor() {\n\t\tsuper(true);\n\t}\n}\n\n/**\n * Represents an extension that was successfully loaded or an\n * empty extension in the ext host.\n */\nclass MainProcessSuccessExtension extends ActivatedExtension {\n\tconstructor() {\n\t\tsuper(false);\n\t}\n}\n\nfunction messageWithSource(msg:IMessage): string {\n\treturn (msg.source ? '[' + msg.source + ']: ' : '') + msg.message;\n}\n\n@Remotable.MainContext('MainProcessExtensionService')\nexport class MainProcessExtensionService extends AbstractExtensionService<ActivatedExtension> {\n\n\tprivate _threadService: IThreadService;\n\tprivate _messageService: IMessageService;\n\tprivate _telemetryService: ITelemetryService;\n\tprivate _proxy: ExtHostExtensionService;\n\tprivate _isDev: boolean;\n\tprivate _extensionsStatus: { [id: string]: IExtensionsStatus };\n\n\t/**\n\t * This class is constructed manually because it is a service, so it doesn't use any ctor injection\n\t */\n\tconstructor(\n\t\tcontextService: IWorkspaceContextService,\n\t\tthreadService: IThreadService,\n\t\tmessageService: IMessageService,\n\t\ttelemetryService: ITelemetryService\n\t) {\n\t\tsuper(false);\n\t\tlet config = contextService.getConfiguration();\n\t\tthis._isDev = !config.env.isBuilt || !!config.env.extensionDevelopmentPath;\n\n\t\tthis._messageService = messageService;\n\t\tthreadService.registerRemotableInstance(MainProcessExtensionService, this);\n\t\tthis._threadService = threadService;\n\t\tthis._telemetryService = telemetryService;\n\t\tthis._proxy = this._threadService.getRemotable(ExtHostExtensionService);\n\t\tthis._extensionsStatus = {};\n\n\t\tExtensionsRegistry.handleExtensionPoints((msg) => this._handleMessage(msg));\n\t}\n\n\tprivate _handleMessage(msg: IMessage) {\n\t\tthis._showMessage(msg.type, messageWithSource(msg));\n\n\t\tif (!this._extensionsStatus[msg.source]) {\n\t\t\tthis._extensionsStatus[msg.source] = { messages: [] };\n\t\t}\n\t\tthis._extensionsStatus[msg.source].messages.push(msg);\n\t}\n\n\tpublic $localShowMessage(severity: Severity, msg: string): void {\n\t\tlet messageShown = false;\n\t\tif (severity === Severity.Error || severity === Severity.Warning) {\n\t\t\tif (this._isDev) {\n\t\t\t\t// Only show nasty intrusive messages if doing extension development.\n\t\t\t\tthis._messageService.show(severity, msg);\n\t\t\t\tmessageShown = true;\n\t\t\t}\n\t\t}\n\n\t\tif (!messageShown) {\n\t\t\tswitch (severity) {\n\t\t\t\tcase Severity.Error:\n\t\t\t\t\tconsole.error(msg);\n\t\t\t\t\tbreak;\n\t\t\t\tcase Severity.Warning:\n\t\t\t\t\tconsole.warn(msg);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.log(msg);\n\t\t\t}\n\t\t}\n\t}\n\n\t// -- overwriting AbstractExtensionService\n\n\tpublic getExtensionsStatus(): { [id: string]: IExtensionsStatus } {\n\t\treturn this._extensionsStatus;\n\t}\n\n\tprotected _showMessage(severity: Severity, msg: string): void {\n\t\tthis._proxy.$localShowMessage(severity, msg);\n\t\tthis.$localShowMessage(severity, msg);\n\t}\n\n\tprotected _createFailedExtension(): ActivatedExtension {\n\t\treturn new MainProcessFailedExtension();\n\t}\n\n\tprotected _actualActivateExtension(extensionDescription: IExtensionDescription): TPromise<ActivatedExtension> {\n\n\t\t// redirect extension activation to the extension host\n\t\treturn this._proxy.$activateExtension(extensionDescription).then(_ => {\n\n\t\t\t// the extension host calls $onExtensionActivated, where we write to `_activatedExtensions`\n\t\t\treturn this._activatedExtensions[extensionDescription.id];\n\t\t});\n\t}\n\n\t// -- called by extension host\n\n\tpublic $onExtensionHostReady(extensionDescriptions: IExtensionDescription[], messages: IMessage[]): void {\n\t\tExtensionsRegistry.registerExtensions(extensionDescriptions);\n\t\tmessages.forEach((entry) => this._handleMessage(entry));\n\t\tthis._triggerOnReady();\n\t}\n\n\tpublic $onExtensionActivated(extensionId: string): void {\n\t\tthis._activatedExtensions[extensionId] = new MainProcessSuccessExtension();\n\t}\n\n\tpublic $onExtensionActivationFailed(extensionId: string): void {\n\t\tthis._activatedExtensions[extensionId] = new MainProcessFailedExtension();\n\t}\n}\n\n/**\n * Represents the source code (module) of an extension.\n */\nexport interface IExtensionModule {\n\tactivate(ctx: IExtensionContext): TPromise<IExtensionAPI>;\n\tdeactivate(): void;\n}\n\n/**\n * Represents the API of an extension (return value of `activate`).\n */\nexport interface IExtensionAPI {\n\t// _extensionAPIBrand: any;\n}\n\nexport class ExtHostExtension extends ActivatedExtension {\n\n\tmodule: IExtensionModule;\n\texports: IExtensionAPI;\n\tsubscriptions: IDisposable[];\n\n\tconstructor(activationFailed: boolean, module: IExtensionModule, exports: IExtensionAPI, subscriptions: IDisposable[]) {\n\t\tsuper(activationFailed);\n\t\tthis.module = module;\n\t\tthis.exports = exports;\n\t\tthis.subscriptions = subscriptions;\n\t}\n}\n\nexport class ExtHostEmptyExtension extends ExtHostExtension {\n\tconstructor() {\n\t\tsuper(false, { activate: undefined, deactivate: undefined }, undefined, []);\n\t}\n}\n\nexport interface IExtensionMemento {\n\tget<T>(key: string, defaultValue: T): T;\n\tupdate(key: string, value: any): Thenable<boolean>;\n}\n\nclass ExtensionMemento implements IExtensionMemento {\n\n\tprivate _id: string;\n\tprivate _shared: boolean;\n\tprivate _storage: ExtHostStorage;\n\n\tprivate _init: TPromise<ExtensionMemento>;\n\tprivate _value: { [n: string]: any; };\n\n\tconstructor(id: string, global: boolean, storage: ExtHostStorage) {\n\t\tthis._id = id;\n\t\tthis._shared = global;\n\t\tthis._storage = storage;\n\n\t\tthis._init = this._storage.getValue(this._shared, this._id, Object.create(null)).then(value => {\n\t\t\tthis._value = value;\n\t\t\treturn this;\n\t\t});\n\t}\n\n\tget whenReady(): TPromise<ExtensionMemento> {\n\t\treturn this._init;\n\t}\n\n\tget<T>(key: string, defaultValue: T): T {\n\t\tlet value = this._value[key];\n\t\tif (typeof value === 'undefined') {\n\t\t\tvalue = defaultValue;\n\t\t}\n\t\treturn value;\n\t}\n\n\tupdate(key: string, value: any): Thenable<boolean> {\n\t\tthis._value[key] = value;\n\t\treturn this._storage\n\t\t\t.setValue(this._shared, this._id, this._value)\n\t\t\t.then(() => true);\n\t}\n}\n\nexport interface IExtensionContext {\n\tsubscriptions: IDisposable[];\n\tworkspaceState: IExtensionMemento;\n\tglobalState: IExtensionMemento;\n\textensionPath: string;\n\tasAbsolutePath(relativePath: string): string;\n}\n\n@Remotable.ExtHostContext('ExtHostExtensionService')\nexport class ExtHostExtensionService extends AbstractExtensionService<ExtHostExtension> {\n\n\tprivate _threadService: IThreadService;\n\tprivate _storage: ExtHostStorage;\n\tprivate _proxy: MainProcessExtensionService;\n\tprivate _telemetryService: ITelemetryService;\n\n\t/**\n\t * This class is constructed manually because it is a service, so it doesn't use any ctor injection\n\t */\n\tconstructor(threadService: IThreadService, telemetryService: ITelemetryService) {\n\t\tsuper(true);\n\t\tthreadService.registerRemotableInstance(ExtHostExtensionService, this);\n\t\tthis._threadService = threadService;\n\t\tthis._storage = new ExtHostStorage(threadService);\n\t\tthis._proxy = this._threadService.getRemotable(MainProcessExtensionService);\n\t\tthis._telemetryService = telemetryService;\n\t}\n\n\tpublic $localShowMessage(severity: Severity, msg: string): void {\n\t\tswitch (severity) {\n\t\t\tcase Severity.Error:\n\t\t\t\tconsole.error(msg);\n\t\t\t\tbreak;\n\t\t\tcase Severity.Warning:\n\t\t\t\tconsole.warn(msg);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tconsole.log(msg);\n\t\t}\n\t}\n\n\tpublic get(extensionId: string): IExtensionAPI {\n\t\tif (!hasOwnProperty.call(this._activatedExtensions, extensionId)) {\n\t\t\tthrow new Error('Extension `' + extensionId + '` is not known or not activated');\n\t\t}\n\t\treturn this._activatedExtensions[extensionId].exports;\n\t}\n\n\tpublic deactivate(extensionId: string): void {\n\t\tlet extension = this._activatedExtensions[extensionId];\n\t\tif (!extension) {\n\t\t\treturn;\n\t\t}\n\n\t\t// call deactivate if available\n\t\ttry {\n\t\t\tif (typeof extension.module.deactivate === 'function') {\n\t\t\t\textension.module.deactivate();\n\t\t\t}\n\t\t} catch (err) {\n\t\t\t// TODO: Do something with err if this is not the shutdown case\n\t\t}\n\n\t\t// clean up subscriptions\n\t\ttry {\n\t\t\tdispose(extension.subscriptions);\n\t\t} catch (err) {\n\t\t\t// TODO: Do something with err if this is not the shutdown case\n\t\t}\n\t}\n\n\tpublic registrationDone(messages: IMessage[]): void {\n\t\tthis._triggerOnReady();\n\t\tthis._proxy.$onExtensionHostReady(ExtensionsRegistry.getAllExtensionDescriptions(), messages);\n\t}\n\n\t// -- overwriting AbstractExtensionService\n\n\tprotected _showMessage(severity: Severity, msg: string): void {\n\t\tthis._proxy.$localShowMessage(severity, msg);\n\t\tthis.$localShowMessage(severity, msg);\n\t}\n\n\tprotected _createFailedExtension() {\n\t\treturn new ExtHostExtension(true, { activate: undefined, deactivate: undefined }, undefined, []);\n\t}\n\n\tprivate _loadExtensionContext(extensionDescription: IExtensionDescription): TPromise<IExtensionContext> {\n\n\t\tlet globalState = new ExtensionMemento(extensionDescription.id, true, this._storage);\n\t\tlet workspaceState = new ExtensionMemento(extensionDescription.id, false, this._storage);\n\n\t\treturn TPromise.join([globalState.whenReady, workspaceState.whenReady]).then(() => {\n\t\t\treturn Object.freeze(<IExtensionContext>{\n\t\t\t\tglobalState,\n\t\t\t\tworkspaceState,\n\t\t\t\tsubscriptions: [],\n\t\t\t\tget extensionPath() { return extensionDescription.extensionFolderPath; },\n\t\t\t\tasAbsolutePath: (relativePath: string) => { return paths.normalize(paths.join(extensionDescription.extensionFolderPath, relativePath), true); }\n\t\t\t});\n\t\t});\n\t}\n\n\tprotected _actualActivateExtension(extensionDescription: IExtensionDescription): TPromise<ActivatedExtension> {\n\t\treturn this._doActualActivateExtension(extensionDescription).then((activatedExtension) => {\n\t\t\tthis._proxy.$onExtensionActivated(extensionDescription.id);\n\t\t\treturn activatedExtension;\n\t\t}, (err) => {\n\t\t\tthis._proxy.$onExtensionActivationFailed(extensionDescription.id);\n\t\t\tthrow err;\n\t\t});\n\t}\n\n\tprivate _doActualActivateExtension(extensionDescription: IExtensionDescription): TPromise<ExtHostExtension> {\n\t\tlet event = getTelemetryActivationEvent(extensionDescription);\n\t\tthis._telemetryService.publicLog('activatePlugin', event);\n\t\tif (!extensionDescription.main) {\n\t\t\t// Treat the extension as being empty => NOT AN ERROR CASE\n\t\t\treturn TPromise.as(new ExtHostEmptyExtension());\n\t\t}\n\n\t\treturn loadCommonJSModule<IExtensionModule>(extensionDescription.main).then((extensionModule) => {\n\t\t\treturn this._loadExtensionContext(extensionDescription).then(context => {\n\t\t\t\treturn ExtHostExtensionService._callActivate(extensionModule, context);\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate static _callActivate(extensionModule: IExtensionModule, context: IExtensionContext): TPromise<ExtHostExtension> {\n\t\t// Make sure the extension's surface is not undefined\n\t\textensionModule = extensionModule || {\n\t\t\tactivate: undefined,\n\t\t\tdeactivate: undefined\n\t\t};\n\n\t\treturn this._callActivateOptional(extensionModule, context).then((extensionExports) => {\n\t\t\treturn new ExtHostExtension(false, extensionModule, extensionExports, context.subscriptions);\n\t\t});\n\t}\n\n\tprivate static _callActivateOptional(extensionModule: IExtensionModule, context: IExtensionContext): TPromise<IExtensionAPI> {\n\t\tif (typeof extensionModule.activate === 'function') {\n\t\t\ttry {\n\t\t\t\treturn TPromise.as(extensionModule.activate.apply(global, [context]));\n\t\t\t} catch (err) {\n\t\t\t\treturn TPromise.wrapError(err);\n\t\t\t}\n\t\t} else {\n\t\t\t// No activate found => the module is the extension's exports\n\t\t\treturn TPromise.as<IExtensionAPI>(extensionModule);\n\t\t}\n\t}\n\n\t// -- called by main thread\n\n\tpublic $activateExtension(extensionDescription: IExtensionDescription): TPromise<void> {\n\t\treturn this._activateExtension(extensionDescription);\n\t}\n\n}\n\nfunction loadCommonJSModule<T>(modulePath: string): TPromise<T> {\n\tlet r: T = null;\n\ttry {\n\t\tr = require.__$__nodeRequire<T>(modulePath);\n\t} catch (e) {\n\t\treturn TPromise.wrapError(e);\n\t}\n\treturn TPromise.as(r);\n}\n\nfunction getTelemetryActivationEvent(extensionDescription: IExtensionDescription): any {\n\tlet event = {\n\t\tid: extensionDescription.id,\n\t\tname: extensionDescription.name,\n\t\tpublisherDisplayName: extensionDescription.publisher,\n\t\tactivationEvents: extensionDescription.activationEvents ? extensionDescription.activationEvents.join(',') : null\n\t};\n\n\tfor (let contribution in extensionDescription.contributes) {\n\t\tlet contributionDetails = extensionDescription.contributes[contribution];\n\n\t\tif (!contributionDetails) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tswitch (contribution) {\n\t\t\tcase 'debuggers':\n\t\t\t\tlet types = contributionDetails.reduce((p, c) => p ? p + ',' + c['type'] : c['type'], '');\n\t\t\t\tevent['contribution.debuggers'] = types;\n\t\t\t\tbreak;\n\t\t\tcase 'grammars':\n\t\t\t\tlet grammers = contributionDetails.reduce((p, c) => p ? p + ',' + c['language'] : c['language'], '');\n\t\t\t\tevent['contribution.grammars'] = grammers;\n\t\t\t\tbreak;\n\t\t\tcase 'languages':\n\t\t\t\tlet languages = contributionDetails.reduce((p, c) => p ? p + ',' + c['id'] : c['id'], '');\n\t\t\t\tevent['contribution.languages'] = languages;\n\t\t\t\tbreak;\n\t\t\tcase 'tmSnippets':\n\t\t\t\tlet tmSnippets = contributionDetails.reduce((p, c) => p ? p + ',' + c['languageId'] : c['languageId'], '');\n\t\t\t\tevent['contribution.tmSnippets'] = tmSnippets;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tevent[`contribution.${contribution}`] = true;\n\t\t}\n\t}\n\n\treturn event;\n}"]}