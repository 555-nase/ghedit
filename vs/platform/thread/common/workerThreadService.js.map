{"version":3,"file":"vs/platform/thread/common/workerThreadService.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/platform/thread/common/workerThreadService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport abstractThreadService = require('vs/platform/thread/common/abstractThreadService');\nimport remote = require('vs/base/common/remote');\nimport {SyncDescriptor0} from 'vs/platform/instantiation/common/descriptors';\nimport {IThreadService, IThreadServiceStatusListener, IThreadSynchronizableObject, ThreadAffinity} from 'vs/platform/thread/common/thread';\n\nexport class WorkerThreadService extends abstractThreadService.AbstractThreadService implements IThreadService {\n\tpublic serviceId = IThreadService;\n\tprotected _remoteCom: remote.IRemoteCom;\n\n\tconstructor(remoteCom: remote.IRemoteCom) {\n\t\tsuper(false);\n\t\tthis._remoteCom = remoteCom;\n\t\tthis._remoteCom.setManyHandler(this);\n\t}\n\n\tprivate _handleRequest(identifier: string, memberName: string, args: any[]): TPromise<any> {\n\t\tif (!this._boundObjects.hasOwnProperty(identifier)) {\n\t\t\t// Wait until all objects are constructed\n\t\t\treturn TPromise.join(this._pendingObjects.slice(0)).then(() => {\n\t\t\t\tif (!this._boundObjects.hasOwnProperty(identifier)) {\n\t\t\t\t\treturn TPromise.wrapError(new Error('Bound object `' + identifier + '` was not found.'));\n\t\t\t\t}\n\t\t\t\t//\t\t\t\t\tconsole.log(identifier + ' > ' + memberName);\n\t\t\t\tlet obj = this._boundObjects[identifier];\n\t\t\t\treturn TPromise.as(obj[memberName].apply(obj, args));\n\t\t\t});\n\t\t}\n\t\t//\t\t\tconsole.log(identifier + ' > ' + memberName);\n\t\tlet obj = this._boundObjects[identifier];\n\t\treturn TPromise.as(obj[memberName].apply(obj, args));\n\t}\n\n\tpublic dispatch(data: { type: string; payload: any; }): TPromise<any> {\n\t\ttry {\n\t\t\tlet args = data.payload;\n\t\t\tlet result = this._handleRequest(args[0], args[1], args[2]);\n\t\t\treturn TPromise.is(result) ? result : TPromise.as(result);\n\t\t} catch (e) {\n\t\t\t// handler error\n\t\t\treturn TPromise.wrapError(e);\n\t\t}\n\t}\n\n\tOneWorker(obj: IThreadSynchronizableObject, methodName: string, target: Function, params: any[], affinity: ThreadAffinity): TPromise<any> {\n\t\treturn target.apply(obj, params);\n\t}\n\n\tAllWorkers(obj: IThreadSynchronizableObject, methodName: string, target: Function, params: any[]): TPromise<any> {\n\t\treturn target.apply(obj, params);\n\t}\n\n\taddStatusListener(listener: IThreadServiceStatusListener): void {\n\t\t// Nothing to do\n\t}\n\n\tremoveStatusListener(listener: IThreadServiceStatusListener): void {\n\t\t// Nothing to do\n\t}\n\n\tprotected _registerAndInstantiateMainProcessActor<T>(id: string, descriptor: SyncDescriptor0<T>): T {\n\t\treturn this._getOrCreateProxyInstance(this._remoteCom, id, descriptor);\n\t}\n\n\tprotected _registerMainProcessActor<T>(id: string, actor: T): void {\n\t\tthrow new Error('Not supported in this runtime context!');\n\t}\n\n\tprotected _registerAndInstantiateExtHostActor<T>(id: string, descriptor: SyncDescriptor0<T>): T {\n\t\tthrow new Error('Not supported in this runtime context: Cannot communicate from Worker directly to Extension Host!');\n\t}\n\n\tprotected _registerExtHostActor<T>(id: string, actor: T): void {\n\t\tthrow new Error('Not supported in this runtime context!');\n\t}\n\n\tprotected _registerAndInstantiateWorkerActor<T>(id: string, descriptor: SyncDescriptor0<T>, whichWorker: ThreadAffinity): T {\n\t\treturn this._getOrCreateLocalInstance(id, descriptor);\n\t}\n\n\tprotected _registerWorkerActor<T>(id: string, actor: T): void {\n\t\tthis._registerLocalInstance(id, actor);\n\t}\n}"]}