{"version":3,"sources":["vs/platform/telemetry/electron-browser/electronTelemetryService.ts"],"names":[],"mappings":"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","file":"vs/platform/telemetry/electron-browser/electronTelemetryService.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport getmac = require('getmac');\nimport crypto = require('crypto');\n\nimport { TPromise } from 'vs/base/common/winjs.base';\nimport * as nls from 'vs/nls';\nimport * as errors from 'vs/base/common/errors';\nimport * as uuid from 'vs/base/common/uuid';\nimport {TelemetryService, ITelemetryServiceConfig} from 'vs/platform/telemetry/browser/telemetryService';\nimport {ITelemetryService, ITelemetryInfo} from 'vs/platform/telemetry/common/telemetry';\nimport {IStorageService} from 'vs/platform/storage/common/storage';\nimport {IConfigurationRegistry, Extensions} from 'vs/platform/configuration/common/configurationRegistry';\nimport {IConfigurationService} from 'vs/platform/configuration/common/configuration';\nimport {Registry} from 'vs/platform/platform';\n\nconst TELEMETRY_SECTION_ID = 'telemetry';\n\nnamespace StorageKeys {\n\texport const MachineId = 'telemetry.machineId';\n\texport const InstanceId = 'telemetry.instanceId';\n}\n\nexport class ElectronTelemetryService extends TelemetryService implements ITelemetryService {\n\n\tprivate _telemetryInfoPromise: TPromise<ITelemetryInfo>;\n\n\tconstructor(\n\t\t@IConfigurationService private _configurationService: IConfigurationService,\n\t\t@IStorageService private _storageService: IStorageService,\n\t\tconfiguration?: ITelemetryServiceConfig\n\t) {\n\t\tsuper(configuration);\n\n\t\tthis._telemetryInfoPromise = this._setupTelemetryInfo();\n\t\tthis._updateUserOptIn();\n\t\tthis._configurationService.onDidUpdateConfiguration(this._updateUserOptIn, this, this._disposables);\n\t\tthis.publicLog('optInStatus', {optIn: this._configuration.userOptIn});\n\t}\n\n\tprivate _updateUserOptIn():void {\n\t\tconst config = this._configurationService.getConfiguration<any>(TELEMETRY_SECTION_ID);\n\t\tthis._configuration.userOptIn = config ? config.enableTelemetry : this._configuration.userOptIn;\n\t}\n\n\tpublic getTelemetryInfo(): TPromise<ITelemetryInfo> {\n\t\treturn this._telemetryInfoPromise;\n\t}\n\n\tprivate _setupTelemetryInfo(): TPromise<ITelemetryInfo> {\n\n\t\tlet instanceId: string, machineId: string;\n\n\t\treturn new TPromise<this>(resolve => {\n\t\t\t// (1) instance identifier (from storage or fresh)\n\t\t\tinstanceId = this._storageService.get(StorageKeys.InstanceId) || uuid.generateUuid();\n\t\t\tthis._storageService.store(StorageKeys.InstanceId, instanceId);\n\n\t\t\t// (2) machine identifier (from stroage or fresh)\n\t\t\tmachineId = this._storageService.get(StorageKeys.MachineId);\n\t\t\tif (machineId) {\n\t\t\t\treturn resolve(this);\n\t\t\t}\n\n\t\t\t// add a unique machine id as a hash of the macAddress\n\t\t\ttry {\n\t\t\t\tgetmac.getMac((error, macAddress) => {\n\t\t\t\t\tif (!error) {\n\t\t\t\t\t\t// crypt machine id\n\t\t\t\t\t\tmachineId = crypto.createHash('sha256').update(macAddress, 'utf8').digest('hex');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmachineId = uuid.generateUuid(); // fallback, generate a UUID\n\t\t\t\t\t}\n\t\t\t\t\tthis._telemetryInfo.machineId = machineId;\n\t\t\t\t\tthis._storageService.store(StorageKeys.MachineId, machineId);\n\t\t\t\t\tresolve(this);\n\t\t\t\t});\n\t\t\t} catch (err) {\n\t\t\t\terrors.onUnexpectedError(err);\n\t\t\t\tmachineId = uuid.generateUuid(); // fallback, generate a UUID\n\t\t\t\tthis._storageService.store(StorageKeys.MachineId, machineId);\n\t\t\t\tresolve(this);\n\t\t\t}\n\n\t\t}).then(() => {\n\t\t\tthis._telemetryInfo.instanceId = instanceId;\n\t\t\tthis._telemetryInfo.machineId = machineId;\n\t\t\treturn this._telemetryInfo;\n\t\t});\n\t}\n}\n\nRegistry.as<IConfigurationRegistry>(Extensions.Configuration).registerConfiguration({\n\t'id': TELEMETRY_SECTION_ID,\n\t'order': 20,\n\t'type': 'object',\n\t'title': nls.localize('telemetryConfigurationTitle', \"Telemetry configuration\"),\n\t'properties': {\n\t\t'telemetry.enableTelemetry': {\n\t\t\t'type': 'boolean',\n\t\t\t'description': nls.localize('telemetry.enableTelemetry', \"Enable usage data and errors to be sent to Microsoft.\"),\n\t\t\t'default': true\n\t\t}\n\t}\n});"]}