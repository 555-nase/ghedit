define(["require","exports","vs/nls","vs/platform/extensions/common/extensionsRegistry","vs/base/common/uri","vs/base/common/strings","vs/base/common/paths"],function(t,i,e,o,n,r,a){/*---------------------------------------------------------------------------------------------
     *  Copyright (c) Microsoft Corporation. All rights reserved.
     *  Licensed under the MIT License. See License.txt in the project root for license information.
     *--------------------------------------------------------------------------------------------*/
"use strict";var s=o.ExtensionsRegistry.registerExtensionPoint("jsonValidation",{description:e.localize("contributes.jsonValidation","Contributes json schema configuration."),type:"array",defaultSnippets:[{body:[{fileMatch:"{{file.json}}",url:"{{url}}"}]}],items:{type:"object",defaultSnippets:[{body:{fileMatch:"{{file.json}}",url:"{{url}}"}}],properties:{fileMatch:{type:"string",description:e.localize("contributes.jsonValidation.fileMatch",'The file pattern to match, for example "package.json" or "*.launch".')},url:{description:e.localize("contributes.jsonValidation.url","A schema URL ('http:', 'https:') or relative path to the extension folder ('./')."),type:"string"}}}}),l=function(){function t(){s.setHandler(function(t){for(var i=0;i<t.length;i++){var o=t[i].value,s=t[i].collector,l=t[i].description.extensionFolderPath;if(!o||!Array.isArray(o))return void s.error(e.localize("invalid.jsonValidation","'configuration.jsonValidation' must be a array"));o.forEach(function(t){if("string"!=typeof t.fileMatch)return void s.error(e.localize("invalid.fileMatch","'configuration.jsonValidation.fileMatch' must be defined"));var i=t.url;if("string"!=typeof t.url)return void s.error(e.localize("invalid.url","'configuration.jsonValidation.url' must be a URL or relative path"));if(r.startsWith(i,"./"))try{i=n["default"].file(a.normalize(a.join(l,i))).toString()}catch(o){s.error(e.localize("invalid.url.fileschema","'configuration.jsonValidation.url' is an invalid relative URL: {0}",o.message))}else if(!r.startsWith(i,"https:/")&&r.startsWith(i,"https:/"))return void s.error(e.localize("invalid.url.schema","'configuration.jsonValidation.url' must start with 'http:', 'https:' or './' to reference schemas located in the extension"))})}})}return t}();i.JSONValidationExtensionPoint=l});