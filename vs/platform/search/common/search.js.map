{"version":3,"file":"vs/platform/search/common/search.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/platform/search/common/search.ts"],"names":[],"mappings":";IAAA;;;oGAGgG;IAChG,YAAY,CAAC;IAQA,UAAE,GAAG,eAAe,CAAC;IAErB,sBAAc,GAAG,+BAAe,CAAiB,UAAE,CAAC,CAAC;IAwBlE,WAAY,SAAS;QACpB,yCAAQ,CAAA;QACR,yCAAQ,CAAA;IACT,CAAC,EAHW,iBAAS,KAAT,iBAAS,QAGpB;IAHD,IAAY,SAAS,GAAT,iBAGX,CAAA;IAmCD,2EAA2E;IAE3E;QAEC,mBAAmB,QAAa;YAAb,aAAQ,GAAR,QAAQ,CAAK;YADzB,gBAAW,GAAgB,EAAE,CAAC;YAEpC,QAAQ;QACT,CAAC;QACF,gBAAC;IAAD,CAAC,AALD,IAKC;IALY,iBAAS,YAKrB,CAAA;IAED;QACC,mBAAmB,OAAe,EAAS,UAAkB,EAAS,gBAA4B;YAA/E,YAAO,GAAP,OAAO,CAAQ;YAAS,eAAU,GAAV,UAAU,CAAQ;YAAS,qBAAgB,GAAhB,gBAAgB,CAAY;YACjG,QAAQ;QACT,CAAC;QACF,gBAAC;IAAD,CAAC,AAJD,IAIC;IAJY,iBAAS,YAIrB,CAAA","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {PPromise} from 'vs/base/common/winjs.base';\nimport uri from 'vs/base/common/uri';\nimport glob = require('vs/base/common/glob');\nimport {IFilesConfiguration} from 'vs/platform/files/common/files';\nimport {createDecorator, ServiceIdentifier} from 'vs/platform/instantiation/common/instantiation';\n\nexport const ID = 'searchService';\n\nexport const ISearchService = createDecorator<ISearchService>(ID);\n/**\n * A service that enables to search for files or with in files.\n */\nexport interface ISearchService {\n\tserviceId: ServiceIdentifier<any>;\n\tsearch(query: ISearchQuery): PPromise<ISearchComplete, ISearchProgressItem>;\n}\n\nexport interface IQueryOptions {\n\tfolderResources?: uri[];\n\textraFileResources?: uri[];\n\tfilePattern?: string;\n\texcludePattern?: glob.IExpression;\n\tincludePattern?: glob.IExpression;\n\tmaxResults?: number;\n\tfileEncoding?: string;\n}\n\nexport interface ISearchQuery extends IQueryOptions {\n\ttype: QueryType;\n\tcontentPattern?: IPatternInfo;\n}\n\nexport enum QueryType {\n\tFile = 1,\n\tText = 2\n}\n\nexport interface IPatternInfo {\n\tpattern: string;\n\tisRegExp?: boolean;\n\tisWordMatch?: boolean;\n\tisCaseSensitive?: boolean;\n}\n\nexport interface IFileMatch {\n\tresource?: uri;\n\tlineMatches?: ILineMatch[];\n}\n\nexport interface ILineMatch {\n\tpreview: string;\n\tlineNumber: number;\n\toffsetAndLengths: number[][];\n}\n\nexport interface IProgress {\n\ttotal?: number;\n\tworked?: number;\n}\n\nexport interface ISearchProgressItem extends IFileMatch, IProgress {\n\t// Marker interface to indicate the possible values for progress calls from the engine\n}\n\nexport interface ISearchComplete {\n\tlimitHit?: boolean;\n\tresults: IFileMatch[];\n}\n\n\n// ---- very simple implementation of the search model --------------------\n\nexport class FileMatch implements IFileMatch {\n\tpublic lineMatches: LineMatch[] = [];\n\tconstructor(public resource: uri) {\n\t\t// empty\n\t}\n}\n\nexport class LineMatch implements ILineMatch {\n\tconstructor(public preview: string, public lineNumber: number, public offsetAndLengths: number[][]) {\n\t\t// empty\n\t}\n}\n\nexport interface ISearchConfiguration extends IFilesConfiguration {\n\tsearch: {\n\t\texclude: glob.IExpression;\n\t};\n}"]}