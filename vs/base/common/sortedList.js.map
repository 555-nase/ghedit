{"version":3,"file":"vs/base/common/sortedList.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/base/common/sortedList.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport Arrays = require('vs/base/common/arrays');\n\nexport interface IIterator<TValue> {\n\tcurrent: TValue;\n\tmoveNext(): boolean;\n\thasNext(): boolean;\n\treset(): void;\n\tdispose(): void;\n}\n\nexport interface IIterable<TValue> {\n\tgetIterator(): IIterator<TValue>;\n}\n\nexport interface ISortedList<TKey, TValue> extends IIterable<KeyValue<TKey, TValue>> {\n\t/**\n\t * Number of elements in a sorted list.\n\t * O(1)\n\t */\n\tcount: number;\n\n\t/**\n\t * Gets the value associated with the specified key.\n\t * Returns null if there is no value associated with the key.\n\t * O(log n)\n\t */\n\tgetValue(key: TKey): TValue;\n\n\t/**\n\t * Gets an iterator over values.\n\t * O(1)\n\t */\n\tgetValues(): IIterator<TValue>;\n\n\t/**\n\t * Gets the value at the specified index.\n\t * Returns null if index is out of bounds.\n\t * O(1)\n\t */\n\tgetValueByIndex(index: number): TValue;\n\n\t/**\n\t * Gets the key at the specified index.\n\t * Returns null if index is out of bounds.\n\t * O(1)\n\t */\n\tgetKey(index: number): TKey;\n\n\t/**\n\t * Gets an iterator over keys.\n\t * O(1)\n\t */\n\tgetKeys(): IIterator<TKey>;\n\n\t/**\n\t * Returns the zero-based index of the specified key in a SortedList object.\n\t * Returns -1 if the key is not found.\n\t * O(log n)\n\t */\n\tindexOfKey(key: TKey): number;\n\n\t/**\n\t * Adds the specified key and value to the sorted list.\n\t * O(n)\n\t */\n\tadd(key: TKey, value: TValue): void;\n\n\t/**\n\t * Removes a value from the sorted list.\n\t * Returns true if the value got removed, false otherwise.\n\t * O(n)\n\t */\n\tremove(key: TKey): boolean;\n}\n\nexport interface KeyValue<TKey, TValue> {\n\tkey: TKey;\n\tvalue: TValue;\n}\n\nexport class SortedList<TKey, TValue> implements ISortedList<TKey, TValue> {\n\n\tprivate static DEFAULT_COMPARATOR = function<TKey>(first: TKey, second: TKey) {\n\t\treturn first < second ? -1 : first > second ? 1 : 0;\n\t};\n\n\tprivate keys: TKey[];\n\tprivate values: TValue[];\n\tprivate comparator: (first: TKey, second: TKey) => number;\n\n\tconstructor(comparator?: (first: TKey, second: TKey) => number) {\n\t\tthis.keys = [];\n\t\tthis.values = [];\n\t\tthis.comparator = comparator || SortedList.DEFAULT_COMPARATOR;\n\t}\n\n\tpublic get count(): number {\n\t\treturn this.keys.length;\n\t}\n\n\tpublic getValueByIndex(index: number): TValue {\n\t\tif (0 <= index && index < this.values.length) {\n\t\t\treturn this.values[index];\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tpublic getKey(index: number): TKey {\n\t\tif (0 <= index && index < this.keys.length) {\n\t\t\treturn this.keys[index];\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tpublic getKeys(): IIterator<TKey> {\n\t\treturn new ListIterator<TKey>(this.keys);\n\t}\n\n\tpublic getValue(key: TKey): TValue {\n\t\tif (!key) {\n\t\t\tthrow new Error('Key must be defined.');\n\t\t}\n\t\tvar indexOfKey = this.indexOfKey(key);\n\t\tif (indexOfKey >= 0) {\n\t\t\treturn this.values[indexOfKey];\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tpublic getValues(): IIterator<TValue> {\n\t\treturn new ListIterator<TValue>(this.values);\n\t}\n\n\tpublic indexOfKey(key: TKey): number {\n\t\tif (!key) {\n\t\t\tthrow new Error('Key must be defined.');\n\t\t}\n\t\treturn Math.max(-1, Arrays.binarySearch(this.keys, key, this.comparator));\n\t}\n\n\tpublic add(key: TKey, value: TValue): void {\n\t\tif (!key || !value) {\n\t\t\tthrow new Error('Key and value must be defined.');\n\t\t}\n\n\t\tvar position = 0;\n\t\twhile (position < this.keys.length && this.comparator(key, this.keys[position]) > 0) {\n\t\t\tposition++;\n\t\t}\n\n\t\tthis.keys.splice(position, 0, key);\n\t\tthis.values.splice(position, 0, value);\n\t}\n\n\tpublic remove(key: TKey): boolean {\n\t\tif (!key) {\n\t\t\tthrow new Error('Key must be defined.');\n\t\t}\n\t\tvar indexOfKey = this.indexOfKey(key);\n\t\tif (indexOfKey >= 0) {\n\t\t\tthis.values.splice(indexOfKey, 1);\n\t\t\tthis.keys.splice(indexOfKey, 1);\n\t\t}\n\n\t\treturn indexOfKey >= 0;\n\t}\n\n\tpublic getIterator(): IIterator<KeyValue<TKey, TValue>> {\n\t\treturn new SortedListIterator<TKey, TValue>(this.keys, this.values);\n\t}\n}\n\nclass SortedListIterator<TKey, TValue> implements IIterator<KeyValue<TKey, TValue>> {\n\tprivate keys: TKey[];\n\tprivate values: TValue[];\n\tprivate index: number;\n\n\tconstructor(keys: TKey[], values: TValue[]) {\n\t\tthis.keys = keys;\n\t\tthis.values = values;\n\t\tthis.index = -1;\n\t}\n\n\tpublic get current(): KeyValue<TKey, TValue> {\n\t\tif (this.index < 0 || this.keys.length < this.index) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn {\n\t\t\tkey: this.keys[this.index],\n\t\t\tvalue: this.values[this.index]\n\t\t};\n\t}\n\n\tpublic moveNext(): boolean {\n\t\tthis.index++;\n\t\treturn this.index < this.keys.length;\n\t}\n\n\tpublic hasNext(): boolean {\n\t\treturn this.index + 1 < this.keys.length;\n\t}\n\n\tpublic reset(): void {\n\t\tthis.index = -1;\n\t}\n\n\tpublic dispose(): void {\n\t\tthis.keys = null;\n\t\tthis.values = null;\n\t}\n}\n\nclass ListIterator<TValue> implements IIterator<TValue> {\n\tprivate values: TValue[];\n\tprivate index: number;\n\n\tconstructor(values: TValue[]) {\n\t\tthis.values = values;\n\t\tthis.index = -1;\n\t}\n\n\tpublic get current(): TValue {\n\t\tif (this.index < 0 || this.values.length < this.index) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn this.values[this.index];\n\t}\n\n\tpublic moveNext(): boolean {\n\t\tthis.index++;\n\t\treturn this.index < this.values.length;\n\t}\n\n\tpublic hasNext(): boolean {\n\t\treturn this.index + 1 < this.values.length;\n\t}\n\n\tpublic reset(): void {\n\t\tthis.index = -1;\n\t}\n\n\tpublic dispose(): void {\n\t\tthis.values = null;\n\t}\n}"]}