var __extends=this&&this.__extends||function(e,t){function o(){this.constructor=e}for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n]);e.prototype=null===t?Object.create(t):(o.prototype=t.prototype,new o)};define(["require","exports","vs/nls","vs/base/common/objects","vs/base/common/platform","vs/base/common/types","vs/base/common/parsers"],function(e,t,o,n,a,s,r){/*---------------------------------------------------------------------------------------------
     *  Copyright (c) Microsoft Corporation. All rights reserved.
     *  Licensed under the MIT License. See License.txt in the project root for license information.
     *--------------------------------------------------------------------------------------------*/
"use strict";function i(e,t){var o=n.clone(e);return o.cwd&&(o.cwd=t.resolve(o.cwd)),o.env&&(o.env=t.resolve(o.env)),o}function l(e,t){var o=n.clone(e);return o.command=t.resolve(o.command),o.args=t.resolve(o.args),o.options&&(o.options=i(o.options,t)),o}!function(e){e[e.stdout=0]="stdout",e[e.stderr=1]="stderr"}(t.Source||(t.Source={}));var m=(t.Source,function(e){function t(t,o){void 0===o&&(o=new r.ValidationStatus),e.call(this,t,o)}return __extends(t,e),t.prototype.parse=function(e,n){void 0===n&&(n={globals:null,emptyCommand:!1,noDefaults:!1});var s=this.parseExecutable(e,n.globals);if(this.status.isFatal())return s;var i;return e.windows&&a.platform===a.Platform.Windows?i=this.parseExecutable(e.windows):e.osx&&a.platform===a.Platform.Mac?i=this.parseExecutable(e.osx):e.linux&&a.platform===a.Platform.Linux&&(i=this.parseExecutable(e.linux)),i&&(s=t.mergeExecutable(s,i)),s&&s.command||n.emptyCommand?(n.noDefaults||r.Parser.merge(s,{command:void 0,isShellCommand:!1,args:[],options:{}},!1),s):(this.status.state=r.ValidationState.Fatal,this.log(o.localize("ExecutableParser.commandMissing","Error: executable info must define a command of type string.")),null)},t.prototype.parseExecutable=function(e,t){var n=void 0,a=void 0,i=void 0,l=void 0;return this.is(e.command,s.isString)&&(n=e.command),this.is(e.isShellCommand,s.isBoolean,r.ValidationState.Warning,o.localize("ExecutableParser.isShellCommand","Warning: isShellCommand must be of type boolean. Ignoring value {0}.",e.isShellCommand))&&(a=e.isShellCommand),this.is(e.args,s.isStringArray,r.ValidationState.Warning,o.localize("ExecutableParser.args","Warning: args must be of type string[]. Ignoring value {0}.",e.isShellCommand))&&(i=e.args.slice(0)),this.is(e.options,s.isObject)&&(l=this.parseCommandOptions(e.options)),{command:n,isShellCommand:a,args:i,options:l}},t.prototype.parseCommandOptions=function(e){var t={};return e?(this.is(e.cwd,s.isString,r.ValidationState.Warning,o.localize("ExecutableParser.invalidCWD","Warning: options.cwd must be of type string. Ignoring value {0}.",e.cwd))&&(t.cwd=e.cwd),s.isUndefined(e.env)||(t.env=n.clone(e.env)),t):t},t.mergeExecutable=function(e,t){return e?(r.Parser.merge(e,t,!0),e):t},t}(r.Parser));t.ExecutableParser=m,t.resolveCommandOptions=i,t.resolveExecutable=l});