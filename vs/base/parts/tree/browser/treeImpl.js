var __extends=this&&this.__extends||function(t,e){function o(){this.constructor=t}for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i]);t.prototype=null===e?Object.create(e):(o.prototype=e.prototype,new o)};define(["require","exports","vs/base/parts/tree/browser/treeDefaults","vs/base/common/eventEmitter","vs/base/parts/tree/browser/treeModel","./treeView","vs/base/common/iterator","vs/css!./tree"],function(t,e,o,i,n,s,r){/*---------------------------------------------------------------------------------------------
     *  Copyright (c) Microsoft Corporation. All rights reserved.
     *  Licensed under the MIT License. See License.txt in the project root for license information.
     *--------------------------------------------------------------------------------------------*/
"use strict";var l=function(){function t(t,e,i){if(void 0===i&&(i={}),this.tree=t,this.configuration=e,this.options=i,!e.dataSource)throw new Error("You must provide a Data Source to the tree.");this.dataSource=e.dataSource,this.renderer=e.renderer||new o.LegacyRenderer,this.controller=e.controller||new o.DefaultController,this.dnd=e.dnd||new o.DefaultDragAndDrop,this.filter=e.filter||new o.DefaultFilter,this.sorter=e.sorter||null,this.accessibilityProvider=e.accessibilityProvider||new o.DefaultAccessibilityProvider}return t}();e.TreeContext=l;var p=function(t){function e(e,o,i){void 0===i&&(i={}),t.call(this),this.container=e,this.configuration=o,this.options=i,this.options.twistiePixels="number"==typeof this.options.twistiePixels?this.options.twistiePixels:32,this.options.indentPixels="number"==typeof this.options.indentPixels?this.options.indentPixels:12,this.options.alwaysFocused=this.options.alwaysFocused===!0,this.options.bare=this.options.bare===!0,this.options.useShadows=this.options.useShadows!==!1,this.options.paddingOnRow=this.options.paddingOnRow!==!1,this.context=new l(this,o,i),this.model=new n.TreeModel(this.context),this.view=new s.TreeView(this.context,this.container),this.view.setModel(this.model),this.addEmitter2(this.model),this.addEmitter2(this.view)}return __extends(e,t),e.prototype.getHTMLElement=function(){return this.view.getHTMLElement()},e.prototype.layout=function(t){this.view.layout(t)},e.prototype.DOMFocus=function(){this.view.focus()},e.prototype.isDOMFocused=function(){return this.view.isFocused()},e.prototype.DOMBlur=function(){this.view.blur()},e.prototype.onVisible=function(){this.view.onVisible()},e.prototype.onHidden=function(){this.view.onHidden()},e.prototype.setInput=function(t){return this.model.setInput(t)},e.prototype.getInput=function(){return this.model.getInput()},e.prototype.refresh=function(t,e){return void 0===t&&(t=null),void 0===e&&(e=!0),this.model.refresh(t,e)},e.prototype.refreshAll=function(t,e){return void 0===e&&(e=!0),this.model.refreshAll(t,e)},e.prototype.expand=function(t){return this.model.expand(t)},e.prototype.expandAll=function(t){return this.model.expandAll(t)},e.prototype.collapse=function(t,e){return void 0===e&&(e=!1),this.model.collapse(t)},e.prototype.collapseAll=function(t,e){return void 0===t&&(t=null),void 0===e&&(e=!1),this.model.collapseAll(t,e)},e.prototype.toggleExpansion=function(t){return this.model.toggleExpansion(t)},e.prototype.toggleExpansionAll=function(t){return this.model.toggleExpansionAll(t)},e.prototype.isExpanded=function(t){return this.model.isExpanded(t)},e.prototype.getExpandedElements=function(){return this.model.getExpandedElements()},e.prototype.reveal=function(t,e){return void 0===e&&(e=null),this.model.reveal(t,e)},e.prototype.getRelativeTop=function(t){var e=this.model.getItem(t);return this.view.getRelativeTop(e)},e.prototype.getScrollPosition=function(){return this.view.getScrollPosition()},e.prototype.setScrollPosition=function(t){this.view.setScrollPosition(t)},e.prototype.getContentHeight=function(){return this.view.getTotalHeight()},e.prototype.setHighlight=function(t,e){this.model.setHighlight(t,e)},e.prototype.getHighlight=function(){return this.model.getHighlight()},e.prototype.isHighlighted=function(t){return this.model.isFocused(t)},e.prototype.clearHighlight=function(t){this.model.setHighlight(null,t)},e.prototype.select=function(t,e){this.model.select(t,e)},e.prototype.selectRange=function(t,e,o){this.model.selectRange(t,e,o)},e.prototype.deselectRange=function(t,e,o){this.model.deselectRange(t,e,o)},e.prototype.selectAll=function(t,e){this.model.selectAll(t,e)},e.prototype.deselect=function(t,e){this.model.deselect(t,e)},e.prototype.deselectAll=function(t,e){this.model.deselectAll(t,e)},e.prototype.setSelection=function(t,e){this.model.setSelection(t,e)},e.prototype.toggleSelection=function(t,e){this.model.toggleSelection(t,e)},e.prototype.isSelected=function(t){return this.model.isSelected(t)},e.prototype.getSelection=function(){return this.model.getSelection()},e.prototype.clearSelection=function(t){this.model.setSelection([],t)},e.prototype.selectNext=function(t,e,o){this.model.selectNext(t,e,o)},e.prototype.selectPrevious=function(t,e,o){this.model.selectPrevious(t,e,o)},e.prototype.selectParent=function(t,e){this.model.selectParent(t,e)},e.prototype.setFocus=function(t,e){this.model.setFocus(t,e)},e.prototype.isFocused=function(t){return this.model.isFocused(t)},e.prototype.getFocus=function(){return this.model.getFocus()},e.prototype.focusNext=function(t,e){this.model.focusNext(t,e)},e.prototype.focusPrevious=function(t,e){this.model.focusPrevious(t,e)},e.prototype.focusParent=function(t){this.model.focusParent(t)},e.prototype.focusFirstChild=function(t){this.model.focusFirstChild(t)},e.prototype.focusFirst=function(t){this.model.focusFirst(t)},e.prototype.focusNth=function(t,e){this.model.focusNth(t,e)},e.prototype.focusLast=function(t){this.model.focusLast(t)},e.prototype.focusNextPage=function(t){this.view.focusNextPage(t)},e.prototype.focusPreviousPage=function(t){this.view.focusPreviousPage(t)},e.prototype.clearFocus=function(t){this.model.setFocus(null,t)},e.prototype.addTraits=function(t,e){this.model.addTraits(t,e)},e.prototype.removeTraits=function(t,e){this.model.removeTraits(t,e)},e.prototype.toggleTrait=function(t,e){this.model.hasTrait(t,e)?this.model.removeTraits(t,[e]):this.model.addTraits(t,[e])},e.prototype.hasTrait=function(t,e){return this.model.hasTrait(t,e)},e.prototype.getNavigator=function(){return new r.MappedNavigator(this.model.getNavigator(),function(t){return t&&t.getElement()})},e.prototype.dispose=function(){null!==this.model&&(this.model.dispose(),this.model=null),null!==this.view&&(this.view.dispose(),this.view=null),t.prototype.dispose.call(this)},e}(i.EventEmitter);e.Tree=p});