{"version":3,"file":"vs/base/test/node/encoding/encoding.test.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/base/test/node/encoding/encoding.test.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;IAEhG,YAAY,CAAC;IAMb,KAAK,CAAC,UAAU,EAAE;QACjB,IAAI,CAAC,iBAAiB,EAAE,UAAU,IAAgB;YACjD,IAAI,IAAI,GAAG,OAAO,CAAC,KAAK,CAAC,0BAA0B,CAAC,CAAC;YAErD,QAAQ,CAAC,mBAAmB,CAAC,IAAI,EAAE,UAAC,KAAY,EAAE,QAAgB;gBACjE,MAAM,CAAC,KAAK,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;gBAC1B,MAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;gBAE/B,IAAI,EAAE,CAAC;YACR,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,qBAAqB,EAAE,UAAU,IAAgB;YACrD,IAAI,IAAI,GAAG,OAAO,CAAC,KAAK,CAAC,6BAA6B,CAAC,CAAC;YAExD,QAAQ,CAAC,mBAAmB,CAAC,IAAI,EAAE,UAAC,KAAY,EAAE,QAAgB;gBACjE,MAAM,CAAC,KAAK,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;gBAC1B,MAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;gBAElC,IAAI,EAAE,CAAC;YACR,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,qBAAqB,EAAE,UAAU,IAAgB;YACrD,IAAI,IAAI,GAAG,OAAO,CAAC,KAAK,CAAC,6BAA6B,CAAC,CAAC;YAExD,QAAQ,CAAC,mBAAmB,CAAC,IAAI,EAAE,UAAC,KAAY,EAAE,QAAgB;gBACjE,MAAM,CAAC,KAAK,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;gBAC1B,MAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;gBAElC,IAAI,EAAE,CAAC;YACR,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,gBAAgB,EAAE,UAAU,IAAgB;YAChD,IAAI,IAAI,GAAG,OAAO,CAAC,KAAK,CAAC,0BAA0B,CAAC,CAAC;YAErD,QAAQ,CAAC,mBAAmB,CAAC,IAAI,EAAE,UAAC,KAAY,EAAE,QAAgB;gBACjE,MAAM,CAAC,KAAK,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;gBAC1B,MAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;gBAE7B,IAAI,EAAE,CAAC;YACR,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,gBAAgB,EAAE,UAAU,IAAgB;YAChD,IAAI,IAAI,GAAG,OAAO,CAAC,KAAK,CAAC,sBAAsB,CAAC,CAAC;YAEjD,QAAQ,CAAC,mBAAmB,CAAC,IAAI,EAAE,UAAC,KAAY,EAAE,QAAgB;gBACjE,MAAM,CAAC,KAAK,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;gBAC1B,MAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;gBAE7B,IAAI,EAAE,CAAC;YACR,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport assert = require('assert');\n\nimport encoding = require('vs/base/node/encoding');\n\nsuite('Encoding', () => {\n\ttest('detectBOM UTF-8', function (done: () => void) {\n\t\tvar file = require.toUrl('./fixtures/some_utf8.css');\n\n\t\tencoding.detectEncodingByBOM(file, (error: Error, encoding: string) => {\n\t\t\tassert.equal(error, null);\n\t\t\tassert.equal(encoding, 'utf8');\n\n\t\t\tdone();\n\t\t});\n\t});\n\n\ttest('detectBOM UTF-16 LE', function (done: () => void) {\n\t\tvar file = require.toUrl('./fixtures/some_utf16le.css');\n\n\t\tencoding.detectEncodingByBOM(file, (error: Error, encoding: string) => {\n\t\t\tassert.equal(error, null);\n\t\t\tassert.equal(encoding, 'utf16le');\n\n\t\t\tdone();\n\t\t});\n\t});\n\n\ttest('detectBOM UTF-16 BE', function (done: () => void) {\n\t\tvar file = require.toUrl('./fixtures/some_utf16be.css');\n\n\t\tencoding.detectEncodingByBOM(file, (error: Error, encoding: string) => {\n\t\t\tassert.equal(error, null);\n\t\t\tassert.equal(encoding, 'utf16be');\n\n\t\t\tdone();\n\t\t});\n\t});\n\n\ttest('detectBOM ANSI', function (done: () => void) {\n\t\tvar file = require.toUrl('./fixtures/some_ansi.css');\n\n\t\tencoding.detectEncodingByBOM(file, (error: Error, encoding: string) => {\n\t\t\tassert.equal(error, null);\n\t\t\tassert.equal(encoding, null);\n\n\t\t\tdone();\n\t\t});\n\t});\n\n\ttest('detectBOM ANSI', function (done: () => void) {\n\t\tvar file = require.toUrl('./fixtures/empty.txt');\n\n\t\tencoding.detectEncodingByBOM(file, (error: Error, encoding: string) => {\n\t\t\tassert.equal(error, null);\n\t\t\tassert.equal(encoding, null);\n\n\t\t\tdone();\n\t\t});\n\t});\n});\n"]}