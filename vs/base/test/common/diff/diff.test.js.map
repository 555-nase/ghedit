{"version":3,"file":"vs/base/test/common/diff/diff.test.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/base/test/common/diff/diff.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\n\nimport * as assert from 'assert';\nimport { LcsDiff, IDiffChange } from 'vs/base/common/diff/diff';\nimport { LcsDiff2 } from 'vs/base/common/diff/diff2';\n\nclass StringDiffSequence {\n\n\tconstructor(private source: string) {\n\n\t}\n\n\tgetLength() {\n\t\treturn this.source.length;\n\t}\n\n\tgetElementHash(i) {\n\t\treturn this.source.charAt(i);\n\t}\n}\n\nfunction createArray<T>(length: number, value: T): T[] {\n\tvar r = [];\n\tfor (var i = 0; i < length; i++) {\n\t\tr[i] = value;\n\t}\n\treturn r;\n}\n\nfunction maskBasedSubstring(str: string, mask: boolean[]): string {\n\tvar r = '';\n\tfor (var i = 0; i < str.length; i++) {\n\t\tif (mask[i]) {\n\t\t\tr += str.charAt(i);\n\t\t}\n\t}\n\treturn r;\n}\n\nfunction assertAnswer(originalStr: string, modifiedStr: string, changes: IDiffChange[], answerStr: string, onlyLength: boolean = false): void {\n\tvar originalMask = createArray(originalStr.length, true);\n\tvar modifiedMask = createArray(modifiedStr.length, true);\n\n\tvar i, j, change;\n\tfor (i = 0; i < changes.length; i++) {\n\t\tchange = changes[i];\n\n\t\tif (change.originalLength) {\n\t\t\tfor (j = 0; j < change.originalLength; j++) {\n\t\t\t\toriginalMask[change.originalStart + j] = false;\n\t\t\t}\n\t\t}\n\n\t\tif (change.modifiedLength) {\n\t\t\tfor (j = 0; j < change.modifiedLength; j++) {\n\t\t\t\tmodifiedMask[change.modifiedStart + j] = false;\n\t\t\t}\n\t\t}\n\t}\n\n\tvar originalAnswer = maskBasedSubstring(originalStr, originalMask);\n\tvar modifiedAnswer = maskBasedSubstring(modifiedStr, modifiedMask);\n\n\tif (onlyLength) {\n\t\tassert.equal(originalAnswer.length, answerStr.length);\n\t\tassert.equal(modifiedAnswer.length, answerStr.length);\n\t} else {\n\t\tassert.equal(originalAnswer, answerStr);\n\t\tassert.equal(modifiedAnswer, answerStr);\n\t}\n}\n\nfunction lcsInnerTest(Algorithm: any, originalStr: string, modifiedStr: string, answerStr: string, onlyLength: boolean = false): void {\n\tvar diff = new Algorithm(new StringDiffSequence(originalStr), new StringDiffSequence(modifiedStr));\n\tvar changes = diff.ComputeDiff();\n\tassertAnswer(originalStr, modifiedStr, changes, answerStr, onlyLength);\n}\n\nfunction stringPower(str: string, power: number): string {\n\tvar r = str;\n\tfor (var i = 0; i < power; i++) {\n\t\tr += r;\n\t}\n\treturn r;\n}\n\nfunction lcsTest(Algorithm: any, originalStr: string, modifiedStr: string, answerStr: string) {\n\tlcsInnerTest(Algorithm, originalStr, modifiedStr, answerStr);\n\tfor (var i = 2; i <= 5; i++) {\n\t\tlcsInnerTest(Algorithm, stringPower(originalStr,i), stringPower(modifiedStr,i), stringPower(answerStr,i), true);\n\t}\n}\n\nfunction lcsTests(Algorithm) {\n\tlcsTest(Algorithm, 'heLLo world', 'hello orlando', 'heo orld');\n\tlcsTest(Algorithm, 'abcde', 'acd', 'acd'); // simple\n\tlcsTest(Algorithm, 'abcdbce', 'bcede', 'bcde'); // skip\n\tlcsTest(Algorithm, 'abcdefgabcdefg', 'bcehafg', 'bceafg'); // long\n\tlcsTest(Algorithm, 'abcde', 'fgh', ''); // no match\n\tlcsTest(Algorithm, 'abcfabc', 'fabc', 'fabc');\n\tlcsTest(Algorithm, '0azby0', '9axbzby9', 'azby');\n\tlcsTest(Algorithm, '0abc00000', '9a1b2c399999', 'abc');\n\n\tlcsTest(Algorithm, 'fooBar', 'myfooBar', 'fooBar'); // all insertions\n\tlcsTest(Algorithm, 'fooBar', 'fooMyBar', 'fooBar'); // all insertions\n\tlcsTest(Algorithm, 'fooBar', 'fooBar', 'fooBar'); // identical sequences\n}\n\nsuite('Diff', () => {\n\ttest('LcsDiff - different strings tests', function () {\n\t\tlcsTests(LcsDiff);\n\t});\n\n\ttest('LcsDiff2 - different strings tests', function () {\n\t\tlcsTests(LcsDiff2);\n\t});\n});\n\nsuite('Diff - Ported from VS', () => {\n\ttest('using continue processing predicate to quit early', function () {\n\t\tvar left = 'abcdef';\n\t\tvar right = 'abxxcyyydzzzzezzzzzzzzzzzzzzzzzzzzf';\n\n\t\t// We use a long non-matching portion at the end of the right-side string, so the backwards tracking logic\n\t\t// doesn't get there first.\n\t\tvar predicateCallCount = 0;\n\n\t\tvar diff = new LcsDiff(new StringDiffSequence(left), new StringDiffSequence(right), function (leftIndex, leftSequence, longestMatchSoFar) {\n\t\t\tassert.equal(predicateCallCount, 0);\n\n\t\t\tpredicateCallCount++;\n\n\t\t\tassert.equal(leftSequence.getLength(), left.length);\n\t\t\tassert.equal(leftIndex, 1);\n\n\t\t\t// cancel processing\n\t\t\treturn false;\n\t\t});\n\t\tvar changes = diff.ComputeDiff();\n\n\t\tassert.equal(predicateCallCount, 1);\n\n\t\t// Doesn't include 'c', 'd', or 'e', since we quit on the first request\n\t\tassertAnswer(left, right, changes, 'abf');\n\n\n\n\t\t// Cancel after the first match ('c')\n\t\tdiff = new LcsDiff(new StringDiffSequence(left), new StringDiffSequence(right), function (leftIndex, leftSequence, longestMatchSoFar) {\n\t\t\tassert(longestMatchSoFar <= 1); // We never see a match of length > 1\n\n\t\t\t// Continue processing as long as there hasn't been a match made.\n\t\t\treturn longestMatchSoFar < 1;\n\t\t});\n\t\tchanges = diff.ComputeDiff();\n\n\t\tassertAnswer(left, right, changes, 'abcf');\n\n\n\n\t\t// Cancel after the second match ('d')\n\t\tdiff = new LcsDiff(new StringDiffSequence(left), new StringDiffSequence(right), function (leftIndex, leftSequence, longestMatchSoFar) {\n\t\t\tassert(longestMatchSoFar <= 2); // We never see a match of length > 2\n\n\t\t\t// Continue processing as long as there hasn't been a match made.\n\t\t\treturn longestMatchSoFar < 2;\n\t\t});\n\t\tchanges = diff.ComputeDiff();\n\n\t\tassertAnswer(left, right, changes, 'abcdf');\n\n\n\n\t\t// Cancel *one iteration* after the second match ('d')\n\t\tvar hitSecondMatch = false;\n\t\tdiff = new LcsDiff(new StringDiffSequence(left), new StringDiffSequence(right), function (leftIndex, leftSequence, longestMatchSoFar) {\n\t\t\tassert(longestMatchSoFar <= 2); // We never see a match of length > 2\n\n\t\t\tvar hitYet = hitSecondMatch;\n\t\t\thitSecondMatch = longestMatchSoFar > 1;\n\t\t\t// Continue processing as long as there hasn't been a match made.\n\t\t\treturn !hitYet;\n\t\t});\n\t\tchanges = diff.ComputeDiff();\n\n\t\tassertAnswer(left, right, changes, 'abcdf');\n\n\n\n\t\t// Cancel after the third and final match ('e')\n\t\tdiff = new LcsDiff(new StringDiffSequence(left), new StringDiffSequence(right), function (leftIndex, leftSequence, longestMatchSoFar) {\n\t\t\tassert(longestMatchSoFar <= 3); // We never see a match of length > 3\n\n\t\t\t// Continue processing as long as there hasn't been a match made.\n\t\t\treturn longestMatchSoFar < 3;\n\t\t});\n\t\tchanges = diff.ComputeDiff();\n\n\t\tassertAnswer(left, right, changes, 'abcdef');\n\t});\n});\n"]}