export declare abstract class FastDomNode {
    private _domNode;
    private _maxWidth;
    private _width;
    private _height;
    private _top;
    private _left;
    private _bottom;
    private _right;
    private _fontFamily;
    private _fontSize;
    private _lineHeight;
    private _className;
    private _display;
    private _position;
    private _visibility;
    private _transform;
    private _lineNumber;
    domNode: HTMLElement;
    constructor(domNode: HTMLElement);
    setMaxWidth(maxWidth: number): void;
    setWidth(width: number): void;
    setHeight(height: number): void;
    setTop(top: number): void;
    setLeft(left: number): void;
    setBottom(bottom: number): void;
    setRight(right: number): void;
    setFontFamily(fontFamily: string): void;
    setFontSize(fontSize: number): void;
    setLineHeight(lineHeight: number): void;
    setClassName(className: string): void;
    toggleClassName(className: string, shouldHaveIt?: boolean): void;
    setDisplay(display: string): void;
    setPosition(position: string): void;
    setVisibility(visibility: string): void;
    setTransform(transform: string): void;
    protected abstract _setTransform(domNode: HTMLElement, transform: string): void;
    setLineNumber(lineNumber: string): void;
}
export declare function createFastDomNode(domNode: HTMLElement): FastDomNode;
export declare const StyleMutator: {
    setMaxWidth: (domNode: HTMLElement, maxWidth: number) => void;
    setWidth: (domNode: HTMLElement, width: number) => void;
    setHeight: (domNode: HTMLElement, height: number) => void;
    setTop: (domNode: HTMLElement, top: number) => boolean;
    setLeft: (domNode: HTMLElement, left: number) => boolean;
    setBottom: (domNode: HTMLElement, bottom: number) => void;
    setRight: (domNode: HTMLElement, right: number) => void;
    setFontSize: (domNode: HTMLElement, fontSize: number) => void;
    setLineHeight: (domNode: HTMLElement, lineHeight: number) => void;
    setTransform: any;
    setDisplay: (domNode: HTMLElement, desiredValue: string) => void;
    setVisibility: (domNode: HTMLElement, desiredValue: string) => void;
};
