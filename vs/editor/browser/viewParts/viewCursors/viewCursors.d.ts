import 'vs/css!./viewCursors';
import * as editorCommon from 'vs/editor/common/editorCommon';
import { ViewPart } from 'vs/editor/browser/view/viewPart';
import { ViewContext } from 'vs/editor/common/view/viewContext';
import { IRenderingContext, IRestrictedRenderingContext } from 'vs/editor/common/view/renderingContext';
export declare class ViewCursors extends ViewPart {
    static BLINK_INTERVAL: number;
    private _readOnly;
    private _cursorBlinking;
    private _cursorStyle;
    private _isVisible;
    private _domNode;
    private _startCursorBlinkAnimation;
    private _compatBlink;
    private _blinkingEnabled;
    private _editorHasFocus;
    private _primaryCursor;
    private _secondaryCursors;
    constructor(context: ViewContext);
    dispose(): void;
    getDomNode(): HTMLElement;
    onModelFlushed(): boolean;
    onModelDecorationsChanged(e: editorCommon.IViewDecorationsChangedEvent): boolean;
    onModelLinesDeleted(e: editorCommon.IViewLinesDeletedEvent): boolean;
    onModelLineChanged(e: editorCommon.IViewLineChangedEvent): boolean;
    onModelLinesInserted(e: editorCommon.IViewLinesInsertedEvent): boolean;
    onModelTokensChanged(e: editorCommon.IViewTokensChangedEvent): boolean;
    onCursorPositionChanged(e: editorCommon.IViewCursorPositionChangedEvent): boolean;
    onCursorSelectionChanged(e: editorCommon.IViewCursorSelectionChangedEvent): boolean;
    onConfigurationChanged(e: editorCommon.IConfigurationChangedEvent): boolean;
    onLayoutChanged(layoutInfo: editorCommon.EditorLayoutInfo): boolean;
    onScrollChanged(e: editorCommon.IScrollEvent): boolean;
    onZonesChanged(): boolean;
    onViewFocusChanged(isFocused: boolean): boolean;
    getPosition(): editorCommon.IPosition;
    private _getCursorBlinking();
    private _updateBlinking();
    private _updateDomClassName();
    private _getClassName();
    private _compatBlinkUpdate();
    private _show();
    private _hide();
    prepareRender(ctx: IRenderingContext): void;
    render(ctx: IRestrictedRenderingContext): void;
}
