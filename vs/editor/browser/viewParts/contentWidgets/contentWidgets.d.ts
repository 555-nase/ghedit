import 'vs/css!./contentWidgets';
import * as editorCommon from 'vs/editor/common/editorCommon';
import { ContentWidgetPositionPreference, IContentWidget } from 'vs/editor/browser/editorBrowser';
import { ViewPart } from 'vs/editor/browser/view/viewPart';
import { ViewContext } from 'vs/editor/common/view/viewContext';
import { IRenderingContext, IRestrictedRenderingContext } from 'vs/editor/common/view/renderingContext';
export declare class ViewContentWidgets extends ViewPart {
    private _widgets;
    private _contentWidth;
    private _contentLeft;
    private _lineHeight;
    private _renderData;
    domNode: HTMLElement;
    overflowingContentWidgetsDomNode: HTMLElement;
    private _viewDomNode;
    constructor(context: ViewContext, viewDomNode: HTMLElement);
    dispose(): void;
    onModelFlushed(): boolean;
    onModelDecorationsChanged(e: editorCommon.IViewDecorationsChangedEvent): boolean;
    onModelLinesDeleted(e: editorCommon.IViewLinesDeletedEvent): boolean;
    onModelLineChanged(e: editorCommon.IViewLineChangedEvent): boolean;
    onModelLinesInserted(e: editorCommon.IViewLinesInsertedEvent): boolean;
    onCursorPositionChanged(e: editorCommon.IViewCursorPositionChangedEvent): boolean;
    onCursorSelectionChanged(e: editorCommon.IViewCursorSelectionChangedEvent): boolean;
    onCursorRevealRange(e: editorCommon.IViewRevealRangeEvent): boolean;
    onConfigurationChanged(e: editorCommon.IConfigurationChangedEvent): boolean;
    onLayoutChanged(layoutInfo: editorCommon.EditorLayoutInfo): boolean;
    onScrollChanged(e: editorCommon.IScrollEvent): boolean;
    onZonesChanged(): boolean;
    addWidget(widget: IContentWidget): void;
    setWidgetPosition(widget: IContentWidget, position: editorCommon.IPosition, preference: ContentWidgetPositionPreference[]): void;
    removeWidget(widget: IContentWidget): void;
    private _layoutBoxInViewport(position, domNode, ctx);
    private _layoutBoxInPage(position, domNode, ctx);
    private _prepareRenderWidgetAtExactPosition(position, ctx);
    private _prepareRenderWidget(widgetData, ctx);
    prepareRender(ctx: IRenderingContext): void;
    render(ctx: IRestrictedRenderingContext): void;
}
