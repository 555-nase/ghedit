import 'vs/css!./selections';
import * as editorCommon from 'vs/editor/common/editorCommon';
import { DynamicViewOverlay } from 'vs/editor/browser/view/dynamicViewOverlay';
import { ViewContext } from 'vs/editor/common/view/viewContext';
import { IRenderingContext } from 'vs/editor/common/view/renderingContext';
export declare class SelectionsOverlay extends DynamicViewOverlay {
    private static SELECTION_CLASS_NAME;
    private static SELECTION_TOP_LEFT;
    private static SELECTION_BOTTOM_LEFT;
    private static SELECTION_TOP_RIGHT;
    private static SELECTION_BOTTOM_RIGHT;
    private static EDITOR_BACKGROUND_CLASS_NAME;
    private static ROUNDED_PIECE_WIDTH;
    private _context;
    private _lineHeight;
    private _roundedSelection;
    private _selections;
    private _renderResult;
    constructor(context: ViewContext);
    dispose(): void;
    onModelFlushed(): boolean;
    onModelDecorationsChanged(e: editorCommon.IViewDecorationsChangedEvent): boolean;
    onModelLinesDeleted(e: editorCommon.IViewLinesDeletedEvent): boolean;
    onModelLineChanged(e: editorCommon.IViewLineChangedEvent): boolean;
    onModelLinesInserted(e: editorCommon.IViewLinesInsertedEvent): boolean;
    onCursorPositionChanged(e: editorCommon.IViewCursorPositionChangedEvent): boolean;
    onCursorSelectionChanged(e: editorCommon.IViewCursorSelectionChangedEvent): boolean;
    onCursorRevealRange(e: editorCommon.IViewRevealRangeEvent): boolean;
    onConfigurationChanged(e: editorCommon.IConfigurationChangedEvent): boolean;
    onLayoutChanged(layoutInfo: editorCommon.EditorLayoutInfo): boolean;
    onScrollChanged(e: editorCommon.IScrollEvent): boolean;
    onZonesChanged(): boolean;
    private _visibleRangesHaveGaps(linesVisibleRanges);
    private _enrichVisibleRangesWithStyle(linesVisibleRanges, previousFrame);
    private _getVisibleRangesWithStyle(selection, ctx, previousFrame);
    private _createSelectionPiece(top, height, className, left, width);
    private _actualRenderOneSelection(output2, visibleStartLineNumber, hasMultipleSelections, visibleRanges);
    private _previousFrameVisibleRangesWithStyle;
    prepareRender(ctx: IRenderingContext): void;
    render(startLineNumber: number, lineNumber: number): string;
}
