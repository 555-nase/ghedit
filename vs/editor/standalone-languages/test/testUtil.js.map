{"version":3,"file":"vs/editor/standalone-languages/test/testUtil.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/editor/standalone-languages/test/testUtil.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;IAEhG,YAAY,CAAC;IAwBb,0BAAiC,IAAW,EAAE,QAAmB,EAAE,KAAmB;QACrF,KAAK,CAAC,QAAQ,CAAC,WAAW,IAAI,IAAI,EAAE;YACnC,IAAI,CAAC,cAAc,EAAE;gBACpB,2CAA+B,CAAC,IAAI,EAAE,QAAQ,EAAO,KAAK,CAAC,CAAC;YAC7D,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;IACJ,CAAC;IANe,wBAAgB,mBAM/B,CAAA;IAED,qBAA4B,IAAW,EAAE,QAAmB,EAAE,QAAgD;QAC7G,KAAK,CAAC,QAAQ,CAAC,WAAW,IAAI,IAAI,EAAE;YACnC,IAAI,CAAC,SAAS,EAAE;gBACf,IAAI,KAAK,GAAG,wBAAO,CAAC,QAAQ,CAAC,CAAC;gBAC9B,IAAI,eAAe,GAAG,IAAI,iCAAe,CAAC,MAAM,EAAE,IAAI,EAAE,yCAAqB,CAAC,KAAK,CAAC,CAAC,CAAC;gBACtF,QAAQ,CAAC,iCAAqB,CAAC,MAAM,EAAE,eAAe,CAAC,CAAC,CAAC;YAC1D,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;IACJ,CAAC;IARe,mBAAW,cAQ1B,CAAA","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport {compile} from 'vs/editor/common/modes/monarch/monarchCompile';\nimport {createRichEditSupport} from 'vs/editor/common/modes/monarch/monarchDefinition';\nimport {RichEditSupport} from 'vs/editor/common/modes/supports/richEditSupport';\nimport {createOnEnterAsserter, executeMonarchTokenizationTests} from 'vs/editor/test/common/modesUtil';\nimport {ILanguage} from '../types';\n\nexport interface IRelaxedToken {\n\tstartIndex: number;\n\ttype: string;\n}\nexport interface ITestItem {\n\tline: string;\n\ttokens: IRelaxedToken[];\n}\n\nexport interface IOnEnterAsserter {\n\tnothing(oneLineAboveText:string, beforeText:string, afterText:string): void;\n\tindents(oneLineAboveText:string, beforeText:string, afterText:string): void;\n\toutdents(oneLineAboveText:string, beforeText:string, afterText:string): void;\n\tindentsOutdents(oneLineAboveText:string, beforeText:string, afterText:string): void;\n}\n\nexport function testTokenization(name:string, language: ILanguage, tests:ITestItem[][]): void {\n\tsuite(language.displayName || name, () => {\n\t\ttest('Tokenization', () => {\n\t\t\texecuteMonarchTokenizationTests(name, language, <any>tests);\n\t\t});\n\t});\n}\n\nexport function testOnEnter(name:string, language: ILanguage, callback:(assertOnEnter: IOnEnterAsserter)=>void): void {\n\tsuite(language.displayName || name, () => {\n\t\ttest('onEnter', () => {\n\t\t\tvar lexer = compile(language);\n\t\t\tvar richEditSupport = new RichEditSupport('test', null, createRichEditSupport(lexer));\n\t\t\tcallback(createOnEnterAsserter('test', richEditSupport));\n\t\t});\n\t});\n}\n"]}