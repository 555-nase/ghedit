{"version":3,"file":"vs/editor/standalone-languages/lua.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/editor/standalone-languages/lua.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport {ILanguage} from './types';\n\nexport var language = <ILanguage> {\n\tdisplayName: 'Lua',\n\tname:        'lua',\n\tdefaultToken: '',\n\n\tlineComment:      '--',\n\tblockCommentStart: '--[[',\n\tblockCommentEnd:   ']]',\n\n\tkeywords: [\n\t\t'and', 'break', 'do', 'else', 'elseif',\n\t'end', 'false', 'for', 'function', 'goto', 'if',\n\t'in', 'local', 'nil', 'not', 'or',\n\t'repeat', 'return', 'then', 'true', 'until',\n\t'while'\n\t],\n\n\tbrackets: [\n\t\t\t{ token: 'delimiter.bracket', open: '{', close: '}'},\n\t\t\t{ token: 'delimiter.array', open: '[', close: ']'},\n\t\t\t{ token: 'delimiter.parenthesis', open: '(', close: ')'}\n\t],\n\n\toperators: [\n\t\t'+', '-', '*', '/', '%', '^', '#', '==', '~=', '<=', '>=', '<', '>', '=',\n\t';', ':', ',', '.', '..', '...'\n\t],\n\n\t// we include these common regular expressions\n\tsymbols:  /[=><!~?:&|+\\-*\\/\\^%]+/,\n\tescapes:  /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n\n\t// The main tokenizer for our languages\n\ttokenizer: {\n\t\troot: [\n\t\t\t// identifiers and keywords\n\t\t\t[/[a-zA-Z_]\\w*/, { cases: { '@keywords': {token:'keyword.$0'},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'@default': 'identifier' } }],\n\t\t\t// whitespace\n\t\t\t{ include: '@whitespace' },\n\n\t\t// keys\n\t\t[/(,)(\\s*)([a-zA-Z_]\\w*)(\\s*)(:)(?!:)/, ['delimiter', '', 'key', '', 'delimiter']],\n\t\t[/({)(\\s*)([a-zA-Z_]\\w*)(\\s*)(:)(?!:)/, ['@brackets', '', 'key', '', 'delimiter']],\n\n\t\t\t// delimiters and operators\n\t\t\t[/[{}()\\[\\]]/, '@brackets'],\n\t\t\t[/@symbols/, { cases: { '@operators': 'delimiter',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'@default'  : '' } } ],\n\n\t\t\t// numbers\n\t\t\t[/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float'],\n\t\t\t[/0[xX][0-9a-fA-F_]*[0-9a-fA-F]/, 'number.hex'],\n\t\t\t[/\\d+?/, 'number'],\n\n\t\t\t// delimiter: after number because of .\\d floats\n\t\t\t[/[;,.]/, 'delimiter'],\n\n\t\t\t// strings: recover on non-terminated strings\n\t\t\t[/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid' ],  // non-teminated string\n\t\t\t[/'([^'\\\\]|\\\\.)*$/, 'string.invalid' ],  // non-teminated string\n\t\t\t[/\"/,  'string', '@string.\"' ],\n\t\t\t[/'/, 'string', '@string.\\''],\n\t\t],\n\n\t\twhitespace: [\n\t\t\t[/[ \\t\\r\\n]+/, ''],\n\t\t\t[/--\\[([=]*)\\[/,  'comment', '@comment.$1' ],\n\t\t\t[/--.*$/,        'comment'],\n\t\t],\n\n\t\tcomment: [\n\t\t\t[/[^\\]]+/, 'comment'],\n\t\t\t[/\\]([=]*)\\]/, { cases: { '$1==$S2': { token: 'comment', next: '@pop' }, '@default' : 'comment' } } ],\n\t\t\t[/./,   'comment' ]\n\t\t],\n\n\t\tstring: [\n\t\t\t[/[^\\\\\"']+/, 'string'],\n\t\t\t[/@escapes/, 'string.escape'],\n\t\t\t[/\\\\./,      'string.escape.invalid'],\n\t\t\t[/[\"']/,     { cases: { '$#==$S2' : { token: 'string', next: '@pop' },\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'@default': 'string' }} ]\n\t\t],\n\n\t},\n};"]}