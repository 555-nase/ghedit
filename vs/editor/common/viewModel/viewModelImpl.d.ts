import { EventEmitter, IEventEmitter } from 'vs/base/common/eventEmitter';
import { Position } from 'vs/editor/common/core/position';
import { Range } from 'vs/editor/common/core/range';
import { Selection } from 'vs/editor/common/core/selection';
import * as editorCommon from 'vs/editor/common/editorCommon';
import { IDecorationsViewportData, IViewModel } from 'vs/editor/common/viewModel/viewModel';
import { ViewLineTokens } from 'vs/editor/common/core/viewLineToken';
export interface ILinesCollection {
    setTabSize(newTabSize: number, emit: (evenType: string, payload: any) => void): boolean;
    setWrappingColumn(newWrappingColumn: number, columnsForFullWidthChar: number, emit: (evenType: string, payload: any) => void): boolean;
    setWrappingIndent(newWrappingIndent: editorCommon.WrappingIndent, emit: (evenType: string, payload: any) => void): boolean;
    onModelFlushed(versionId: number, emit: (evenType: string, payload: any) => void): void;
    onModelLinesDeleted(versionId: number, fromLineNumber: number, toLineNumber: number, emit: (evenType: string, payload: any) => void): void;
    onModelLinesInserted(versionId: number, fromLineNumber: number, toLineNumber: number, text: string[], emit: (evenType: string, payload: any) => void): void;
    onModelLineChanged(versionId: number, lineNumber: number, newText: string, emit: (evenType: string, payload: any) => void): boolean;
    getOutputLineCount(): number;
    getOutputLineContent(outputLineNumber: number): string;
    getOutputIndentGuide(outputLineNumber: number): number;
    getOutputLineMinColumn(outputLineNumber: number): number;
    getOutputLineMaxColumn(outputLineNumber: number): number;
    getOutputLineTokens(outputLineNumber: number): ViewLineTokens;
    convertOutputPositionToInputPosition(viewLineNumber: number, viewColumn: number): Position;
    convertInputPositionToOutputPosition(inputLineNumber: number, inputColumn: number): Position;
    setHiddenAreas(ranges: editorCommon.IRange[], emit: (evenType: string, payload: any) => void): void;
    inputPositionIsVisible(inputLineNumber: number, inputColumn: number): boolean;
    dispose(): void;
}
export declare class ViewModel extends EventEmitter implements IViewModel {
    private editorId;
    private configuration;
    private model;
    private listenersToRemove;
    private _toDispose;
    private lines;
    private decorations;
    private cursors;
    private getCurrentCenteredModelRange;
    constructor(lines: ILinesCollection, editorId: number, configuration: editorCommon.IConfiguration, model: editorCommon.IModel, getCurrentCenteredModelRange: () => Range);
    setHiddenAreas(ranges: editorCommon.IRange[]): void;
    dispose(): void;
    private _onTabSizeChange(newTabSize);
    private _onWrappingIndentChange(newWrappingIndent);
    private _restoreCenteredModelRange(range);
    private _onWrappingColumnChange(newWrappingColumn, columnsForFullWidthChar);
    addEventSource(eventSource: IEventEmitter): void;
    private onEvents(events);
    private onModelFlushed(e);
    private onModelDecorationsChanged(e);
    private onModelLinesDeleted(e);
    private onModelTokensChanged(e);
    private onModelLineChanged(e);
    private onModelLinesInserted(e);
    validateViewRange(viewStartLineNumber: number, viewStartColumn: number, viewEndLineNumber: number, viewEndColumn: number, modelRange: Range): Range;
    validateViewPosition(viewLineNumber: number, viewColumn: number, modelPosition: Position): Position;
    validateViewSelection(viewSelection: Selection, modelSelection: Selection): Selection;
    private onCursorPositionChanged(e);
    private onCursorSelectionChanged(e);
    private onCursorRevealRange(e);
    private onCursorScrollRequest(e);
    getTabSize(): number;
    getLineCount(): number;
    getLineContent(lineNumber: number): string;
    getLineIndentGuide(lineNumber: number): number;
    getLineMinColumn(lineNumber: number): number;
    getLineMaxColumn(lineNumber: number): number;
    getLineFirstNonWhitespaceColumn(lineNumber: number): number;
    getLineLastNonWhitespaceColumn(lineNumber: number): number;
    getLineTokens(lineNumber: number): ViewLineTokens;
    getLineRenderLineNumber(viewLineNumber: number): string;
    getMaxLineNumber(): number;
    getDecorationsViewportData(startLineNumber: number, endLineNumber: number): IDecorationsViewportData;
    getAllDecorations(): editorCommon.IModelDecoration[];
    getEOL(): string;
    getValueInRange(range: editorCommon.IRange, eol: editorCommon.EndOfLinePreference): string;
    getSelections(): Selection[];
    convertViewPositionToModelPosition(viewLineNumber: number, viewColumn: number): Position;
    convertViewRangeToModelRange(viewRange: editorCommon.IRange): Range;
    convertViewSelectionToModelSelection(viewSelection: editorCommon.ISelection): Selection;
    getModelLineContent(modelLineNumber: number): string;
    getModelLineMaxColumn(modelLineNumber: number): number;
    validateModelPosition(position: editorCommon.IPosition): Position;
    convertModelPositionToViewPosition(modelLineNumber: number, modelColumn: number): Position;
    convertModelRangeToViewRange(modelRange: editorCommon.IRange): Range;
    convertWholeLineModelRangeToViewRange(modelRange: editorCommon.IRange): Range;
    convertModelSelectionToViewSelection(modelSelection: Selection): Selection;
    modelPositionIsVisible(position: editorCommon.IPosition): boolean;
}
