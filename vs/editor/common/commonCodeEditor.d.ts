import { IAction } from 'vs/base/common/actions';
import { EventEmitter, IEventEmitter } from 'vs/base/common/eventEmitter';
import { IDisposable } from 'vs/base/common/lifecycle';
import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
import { ICommandService } from 'vs/platform/commands/common/commands';
import { IKeybindingContextKey, IKeybindingScopeLocation, IKeybindingService } from 'vs/platform/keybinding/common/keybinding';
import { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';
import { CommonEditorConfiguration } from 'vs/editor/common/config/commonEditorConfig';
import { Cursor } from 'vs/editor/common/controller/cursor';
import { Position } from 'vs/editor/common/core/position';
import { Range } from 'vs/editor/common/core/range';
import { Selection } from 'vs/editor/common/core/selection';
import * as editorCommon from 'vs/editor/common/editorCommon';
import { ICodeEditorService } from 'vs/editor/common/services/codeEditorService';
import { ViewModel } from 'vs/editor/common/viewModel/viewModelImpl';
export declare abstract class CommonCodeEditor extends EventEmitter implements editorCommon.ICommonCodeEditor {
    onDidChangeModelRawContent(listener: (e: editorCommon.IModelContentChangedEvent) => void): IDisposable;
    onDidChangeModelContent(listener: (e: editorCommon.IModelContentChangedEvent2) => void): IDisposable;
    onDidChangeModelMode(listener: (e: editorCommon.IModelModeChangedEvent) => void): IDisposable;
    onDidChangeModelOptions(listener: (e: editorCommon.IModelOptionsChangedEvent) => void): IDisposable;
    onDidChangeModelModeSupport(listener: (e: editorCommon.IModeSupportChangedEvent) => void): IDisposable;
    onDidChangeModelDecorations(listener: (e: editorCommon.IModelDecorationsChangedEvent) => void): IDisposable;
    onDidChangeConfiguration(listener: (e: editorCommon.IConfigurationChangedEvent) => void): IDisposable;
    onDidChangeModel(listener: (e: editorCommon.IModelChangedEvent) => void): IDisposable;
    onDidChangeCursorPosition(listener: (e: editorCommon.ICursorPositionChangedEvent) => void): IDisposable;
    onDidChangeCursorSelection(listener: (e: editorCommon.ICursorSelectionChangedEvent) => void): IDisposable;
    onDidFocusEditorText(listener: () => void): IDisposable;
    onDidBlurEditorText(listener: () => void): IDisposable;
    onDidFocusEditor(listener: () => void): IDisposable;
    onDidBlurEditor(listener: () => void): IDisposable;
    onDidDispose(listener: () => void): IDisposable;
    protected domElement: IKeybindingScopeLocation;
    protected id: number;
    _lifetimeDispose: IDisposable[];
    _configuration: CommonEditorConfiguration;
    _telemetryService: ITelemetryService;
    protected contributions: {
        [key: string]: editorCommon.IEditorContribution;
    };
    protected model: editorCommon.IModel;
    protected listenersToRemove: IDisposable[];
    protected hasView: boolean;
    protected viewModel: ViewModel;
    protected cursor: Cursor;
    protected _instantiationService: IInstantiationService;
    protected _commandService: ICommandService;
    protected _keybindingService: IKeybindingService;
    /**
     * map from "parent" decoration type to live decoration ids.
     */
    private _decorationTypeKeysToIds;
    private _decorationTypeSubtypes;
    private _codeEditorService;
    private _editorIdContextKey;
    protected _editorFocusContextKey: IKeybindingContextKey<boolean>;
    private _editorTabMovesFocusKey;
    private _editorReadonly;
    private _hasMultipleSelectionsKey;
    private _hasNonEmptySelectionKey;
    private _langIdKey;
    constructor(domElement: IKeybindingScopeLocation, options: editorCommon.IEditorOptions, instantiationService: IInstantiationService, codeEditorService: ICodeEditorService, commandService: ICommandService, keybindingService: IKeybindingService, telemetryService: ITelemetryService);
    protected abstract _createConfiguration(options: editorCommon.ICodeEditorWidgetCreationOptions): CommonEditorConfiguration;
    getId(): string;
    getEditorType(): string;
    destroy(): void;
    dispose(): void;
    captureState(...flags: editorCommon.CodeEditorStateFlag[]): editorCommon.ICodeEditorState;
    updateOptions(newOptions: editorCommon.IEditorOptions): void;
    getConfiguration(): editorCommon.InternalEditorOptions;
    getRawConfiguration(): editorCommon.IEditorOptions;
    getValue(options?: {
        preserveBOM: boolean;
        lineEnding: string;
    }): string;
    setValue(newValue: string): void;
    getModel(): editorCommon.IModel;
    setModel(model?: editorCommon.IModel): void;
    abstract getCenteredRangeInViewport(): Range;
    abstract getVisibleRangeInViewport(): Range;
    getVisibleColumnFromPosition(rawPosition: editorCommon.IPosition): number;
    getPosition(): Position;
    setPosition(position: editorCommon.IPosition, reveal?: boolean, revealVerticalInCenter?: boolean, revealHorizontal?: boolean): void;
    private _sendRevealRange(range, verticalType, revealHorizontal);
    revealLine(lineNumber: number): void;
    revealLineInCenter(lineNumber: number): void;
    revealLineInCenterIfOutsideViewport(lineNumber: number): void;
    revealPosition(position: editorCommon.IPosition, revealVerticalInCenter?: boolean, revealHorizontal?: boolean): void;
    revealPositionInCenter(position: editorCommon.IPosition): void;
    revealPositionInCenterIfOutsideViewport(position: editorCommon.IPosition): void;
    getSelection(): Selection;
    getSelections(): Selection[];
    setSelection(range: editorCommon.IRange, reveal?: boolean, revealVerticalInCenter?: boolean, revealHorizontal?: boolean): void;
    setSelection(editorRange: Range, reveal?: boolean, revealVerticalInCenter?: boolean, revealHorizontal?: boolean): void;
    setSelection(selection: editorCommon.ISelection, reveal?: boolean, revealVerticalInCenter?: boolean, revealHorizontal?: boolean): void;
    setSelection(editorSelection: Selection, reveal?: boolean, revealVerticalInCenter?: boolean, revealHorizontal?: boolean): void;
    private _setSelectionImpl(sel, reveal, revealVerticalInCenter, revealHorizontal);
    revealLines(startLineNumber: number, endLineNumber: number): void;
    revealLinesInCenter(startLineNumber: number, endLineNumber: number): void;
    revealLinesInCenterIfOutsideViewport(startLineNumber: number, endLineNumber: number): void;
    revealRange(range: editorCommon.IRange, revealVerticalInCenter?: boolean, revealHorizontal?: boolean): void;
    revealRangeInCenter(range: editorCommon.IRange): void;
    revealRangeInCenterIfOutsideViewport(range: editorCommon.IRange): void;
    setSelections(ranges: editorCommon.ISelection[]): void;
    abstract getScrollWidth(): number;
    abstract getScrollLeft(): number;
    abstract getScrollHeight(): number;
    abstract getScrollTop(): number;
    abstract setScrollLeft(newScrollLeft: number): void;
    abstract setScrollTop(newScrollTop: number): void;
    abstract setScrollPosition(position: editorCommon.INewScrollPosition): void;
    abstract saveViewState(): editorCommon.ICodeEditorViewState;
    abstract restoreViewState(state: editorCommon.IEditorViewState): void;
    onVisible(): void;
    onHide(): void;
    abstract layout(dimension?: editorCommon.IDimension): void;
    abstract focus(): void;
    abstract beginForcedWidgetFocus(): void;
    abstract endForcedWidgetFocus(): void;
    abstract isFocused(): boolean;
    abstract hasWidgetFocus(): boolean;
    getContribution(id: string): editorCommon.IEditorContribution;
    addAction(descriptor: editorCommon.IActionDescriptor): void;
    getActions(): IAction[];
    getAction(id: string): IAction;
    trigger(source: string, handlerId: string, payload: any): void;
    executeCommand(source: string, command: editorCommon.ICommand): void;
    pushUndoStop(): boolean;
    executeEdits(source: string, edits: editorCommon.IIdentifiedSingleEditOperation[]): boolean;
    executeCommands(source: string, commands: editorCommon.ICommand[]): void;
    changeDecorations(callback: (changeAccessor: editorCommon.IModelDecorationsChangeAccessor) => any): any;
    getLineDecorations(lineNumber: number): editorCommon.IModelDecoration[];
    deltaDecorations(oldDecorations: string[], newDecorations: editorCommon.IModelDeltaDecoration[]): string[];
    setDecorations(decorationTypeKey: string, decorationOptions: editorCommon.IDecorationOptions[]): void;
    removeDecorations(decorationTypeKey: string): void;
    addTypingListener(character: string, callback: () => void): IDisposable;
    getLayoutInfo(): editorCommon.EditorLayoutInfo;
    _attachModel(model: editorCommon.IModel): void;
    protected abstract _enableEmptySelectionClipboard(): boolean;
    protected abstract _createView(): void;
    protected abstract _getViewInternalEventBus(): IEventEmitter;
    _postDetachModelCleanup(detachedModel: editorCommon.IModel): void;
    protected _detachModel(): editorCommon.IModel;
}
