{"version":3,"sources":["vs/editor/node/textMate/TMSnippets.ts"],"names":[],"mappings":"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","file":"vs/editor/node/textMate/TMSnippets.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport * as nls from 'vs/nls';\nimport {parse} from 'vs/base/common/json';\nimport * as paths from 'vs/base/common/paths';\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport {readFile} from 'vs/base/node/pfs';\nimport {IExtensionMessageCollector, ExtensionsRegistry} from 'vs/platform/extensions/common/extensionsRegistry';\nimport {ISuggestion} from 'vs/editor/common/modes';\nimport {SnippetsRegistry} from 'vs/editor/common/modes/supports';\nimport {IModeService} from 'vs/editor/common/services/modeService';\nimport {IModelService} from 'vs/editor/common/services/modelService';\nimport {CodeSnippet, ExternalSnippetType} from 'vs/editor/contrib/snippet/common/snippet';\n\nexport interface ITMSnippetsExtensionPoint {\n\tlanguage: string;\n\tpath: string;\n}\n\nexport function snippetUpdated(modeId: string, filePath: string): TPromise<void> {\n\treturn readFile(filePath).then((fileContents) => {\n\t\tvar errors: string[] = [];\n\t\tvar snippetsObj = parse(fileContents.toString(), errors);\n\t\tvar adaptedSnippets = TMSnippetsAdaptor.adapt(snippetsObj);\n\t\tSnippetsRegistry.registerSnippets(modeId, filePath, adaptedSnippets);\n\t});\n}\n\nlet snippetsExtensionPoint = ExtensionsRegistry.registerExtensionPoint<ITMSnippetsExtensionPoint[]>('snippets', {\n\tdescription: nls.localize('vscode.extension.contributes.snippets', 'Contributes TextMate snippets.'),\n\ttype: 'array',\n\tdefaultSnippets: [ { body: [{ language: '', path: '' }] }],\n\titems: {\n\t\ttype: 'object',\n\t\tdefaultSnippets: [ { body: { language: '{{id}}', path: './snippets/{{id}}.json.'} }] ,\n\t\tproperties: {\n\t\t\tlanguage: {\n\t\t\t\tdescription: nls.localize('vscode.extension.contributes.snippets-language', 'Language id for which this snippet is contributed to.'),\n\t\t\t\ttype: 'string'\n\t\t\t},\n\t\t\tpath: {\n\t\t\t\tdescription: nls.localize('vscode.extension.contributes.snippets-path', 'Path of the snippets file. The path is relative to the extension folder and typically starts with \\'./snippets/\\'.'),\n\t\t\t\ttype: 'string'\n\t\t\t}\n\t\t}\n\t}\n});\n\nexport class MainProcessTextMateSnippet {\n\tprivate _modelService: IModelService;\n\tprivate _modeService: IModeService;\n\n\tconstructor(\n\t\t@IModelService modelService: IModelService,\n\t\t@IModeService modeService: IModeService\n\t) {\n\t\tthis._modelService = modelService;\n\t\tthis._modeService = modeService;\n\n\t\tsnippetsExtensionPoint.setHandler((extensions) => {\n\t\t\tfor (let i = 0; i < extensions.length; i++) {\n\t\t\t\tlet tmSnippets = extensions[i].value;\n\t\t\t\tfor (let j = 0; j < tmSnippets.length; j++) {\n\t\t\t\t\tthis._withTMSnippetContribution(extensions[i].description.extensionFolderPath, tmSnippets[j], extensions[i].collector);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate _withTMSnippetContribution(extensionFolderPath:string, snippet:ITMSnippetsExtensionPoint, collector:IExtensionMessageCollector): void {\n\t\tif (!snippet.language || (typeof snippet.language !== 'string') || !this._modeService.isRegisteredMode(snippet.language)) {\n\t\t\tcollector.error(nls.localize('invalid.language', \"Unknown language in `contributes.{0}.language`. Provided value: {1}\", snippetsExtensionPoint.name, String(snippet.language)));\n\t\t\treturn;\n\t\t}\n\t\tif (!snippet.path || (typeof snippet.path !== 'string')) {\n\t\t\tcollector.error(nls.localize('invalid.path.0', \"Expected string in `contributes.{0}.path`. Provided value: {1}\", snippetsExtensionPoint.name, String(snippet.path)));\n\t\t\treturn;\n\t\t}\n\t\tlet normalizedAbsolutePath = paths.normalize(paths.join(extensionFolderPath, snippet.path));\n\n\t\tif (normalizedAbsolutePath.indexOf(extensionFolderPath) !== 0) {\n\t\t\tcollector.warn(nls.localize('invalid.path.1', \"Expected `contributes.{0}.path` ({1}) to be included inside extension's folder ({2}). This might make the extension non-portable.\", snippetsExtensionPoint.name, normalizedAbsolutePath, extensionFolderPath));\n\t\t}\n\n\t\tlet modeId = snippet.language;\n\t\tlet disposable = this._modeService.onDidCreateMode((mode) => {\n\t\t\tif (mode.getId() !== modeId) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.registerDefinition(modeId, normalizedAbsolutePath);\n\t\t\tdisposable.dispose();\n\t\t});\n\t}\n\n\tpublic registerDefinition(modeId: string, filePath: string): void {\n\t\treadFile(filePath).then((fileContents) => {\n\t\t\tvar errors: string[] = [];\n\t\t\tvar snippetsObj = parse(fileContents.toString(), errors);\n\t\t\tvar adaptedSnippets = TMSnippetsAdaptor.adapt(snippetsObj);\n\t\t\tSnippetsRegistry.registerDefaultSnippets(modeId, adaptedSnippets);\n\t\t});\n\t}\n}\n\nclass TMSnippetsAdaptor {\n\n\tpublic static adapt(snippetsObj: any): ISuggestion[]{\n\t\tvar topLevelProperties = Object.keys(snippetsObj),\n\t\t\tresult: ISuggestion[] = [];\n\n\t\tvar processSnippet = (snippet: any, description: string) => {\n\t\t\tvar prefix = snippet['prefix'];\n\t\t\tvar bodyStringOrArray = snippet['body'];\n\n\t\t\tif (Array.isArray(bodyStringOrArray)) {\n\t\t\t\tbodyStringOrArray = bodyStringOrArray.join('\\n');\n\t\t\t}\n\n\t\t\tif (typeof prefix === 'string' && typeof bodyStringOrArray === 'string') {\n\t\t\t\tvar convertedSnippet = TMSnippetsAdaptor.convertSnippet(bodyStringOrArray);\n\t\t\t\tif (convertedSnippet !== null) {\n\t\t\t\t\tresult.push({\n\t\t\t\t\t\ttype: 'snippet',\n\t\t\t\t\t\tlabel: prefix,\n\t\t\t\t\t\tdocumentationLabel: snippet['description'] || description,\n\t\t\t\t\t\tcodeSnippet: convertedSnippet,\n\t\t\t\t\t\tnoAutoAccept: true\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\ttopLevelProperties.forEach(topLevelProperty => {\n\t\t\tvar scopeOrTemplate = snippetsObj[topLevelProperty];\n\t\t\tif (scopeOrTemplate['body'] && scopeOrTemplate['prefix']) {\n\t\t\t\tprocessSnippet(scopeOrTemplate, topLevelProperty);\n\t\t\t} else {\n\t\t\t\tvar snippetNames = Object.keys(scopeOrTemplate);\n\t\t\t\tsnippetNames.forEach(name => {\n\t\t\t\t\tprocessSnippet(scopeOrTemplate[name], name);\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t\treturn result;\n\t}\n\n\tprivate static convertSnippet(textMateSnippet: string): string {\n\t\treturn CodeSnippet.convertExternalSnippet(textMateSnippet, ExternalSnippetType.TextMateSnippet);\n\t}\n}\n"]}