{"version":3,"sources":["vs/editor/node/languageConfiguration.ts"],"names":[],"mappings":"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","file":"vs/editor/node/languageConfiguration.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport * as nls from 'vs/nls';\nimport {parse} from 'vs/base/common/json';\nimport {readFile} from 'vs/base/node/pfs';\nimport {IRichEditConfiguration} from 'vs/editor/common/modes/supports/richEditSupport';\nimport {IModeService} from 'vs/editor/common/services/modeService';\n\ntype CharacterPair = [string, string];\n\ninterface ICommentRule {\n\tlineComment?: string;\n\tblockComment?: CharacterPair;\n}\n\ninterface ILanguageConfiguration {\n\tcomments?: ICommentRule;\n\tbrackets?: CharacterPair[];\n}\n\nexport class LanguageConfigurationFileHandler {\n\n\tprivate _modeService: IModeService;\n\n\tconstructor(\n\t\t@IModeService modeService: IModeService\n\t) {\n\t\tthis._modeService = modeService;\n\n\t\tthis._handleModes(this._modeService.getRegisteredModes());\n\t\tthis._modeService.onDidAddModes((modes) => this._handleModes(modes));\n\t}\n\n\tprivate _handleModes(modes:string[]): void {\n\t\tmodes.forEach(modeId => this._handleMode(modeId));\n\t}\n\n\tprivate _handleMode(modeId:string): void {\n\t\tlet disposable = this._modeService.onDidCreateMode((mode) => {\n\t\t\tif (mode.getId() !== modeId) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet configurationFiles = this._modeService.getConfigurationFiles(modeId);\n\t\t\tconfigurationFiles.forEach((configFilePath) => this._handleConfigFile(modeId, configFilePath));\n\n\t\t\tdisposable.dispose();\n\t\t});\n\t}\n\n\tprivate _handleConfigFile(modeId:string, configFilePath:string): void {\n\t\treadFile(configFilePath).then((fileContents) => {\n\t\t\tvar errors = [];\n\t\t\tvar configuration = <ILanguageConfiguration>parse(fileContents.toString(), errors);\n\t\t\tif (errors.length) {\n\t\t\t\tconsole.error(nls.localize('parseErrors', \"Errors parsing {0}: {1}\", configFilePath, errors.join('\\n')));\n\t\t\t}\n\t\t\tthis._handleConfig(modeId, configuration);\n\t\t}, (err) => {\n\t\t\tconsole.error(err);\n\t\t});\n\t}\n\n\tprivate _handleConfig(modeId:string, configuration:ILanguageConfiguration): void {\n\n\t\tlet richEditConfig:IRichEditConfiguration = {};\n\n\t\tif (configuration.comments) {\n\t\t\trichEditConfig.comments = configuration.comments;\n\t\t}\n\n\t\tif (configuration.brackets) {\n\t\t\trichEditConfig.brackets = configuration.brackets;\n\n\t\t\trichEditConfig.__characterPairSupport = {\n\t\t\t\tautoClosingPairs: configuration.brackets.map(pair => {\n\t\t\t\t\tlet [open, close] = pair;\n\t\t\t\t\treturn { open: open, close: close };\n\t\t\t\t})\n\t\t\t};\n\t\t}\n\n\t\tthis._modeService.registerRichEditSupport(modeId, richEditConfig);\n\t}\n}\n"]}