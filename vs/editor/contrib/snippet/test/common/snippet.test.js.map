{"version":3,"file":"vs/editor/contrib/snippet/test/common/snippet.test.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/editor/contrib/snippet/test/common/snippet.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport * as assert from 'assert';\nimport {Range} from 'vs/editor/common/core/range';\nimport {CodeSnippet, ExternalSnippetType} from 'vs/editor/contrib/snippet/common/snippet';\n\nsuite('Editor Contrib - Snippets', () => {\n\n\ttest('bug #17541:[snippets] Support default text in mirrors', () => {\n\n\t\tvar external = [\n\t\t\t'begin{${1:enumerate}}',\n\t\t\t'\\t$0',\n\t\t\t'end{$1}'\n\t\t].join('\\n');\n\n\t\tvar internal = CodeSnippet.convertExternalSnippet(external, ExternalSnippetType.TextMateSnippet);\n\n\t\tassert.equal(internal, [\n\t\t\t'begin\\\\{{{1:enumerate}}\\\\}',\n\t\t\t'\\t{{}}',\n\t\t\t'end\\\\{{{1:}}\\\\}'\n\t\t].join('\\n'));\n\n\t\tvar snippet = new CodeSnippet(internal);\n\n\t\tassert.deepEqual(snippet.lines, [\n\t\t\t'begin{enumerate}',\n\t\t\t'\\t',\n\t\t\t'end{enumerate}'\n\t\t]);\n\t\tassert.equal(snippet.placeHolders.length, 2);\n\t\tassert.equal(snippet.placeHolders[0].id, '1');\n\t\tassert.equal(snippet.placeHolders[0].occurences.length, 2);\n\t\tassert.deepEqual(snippet.placeHolders[0].occurences[0], new Range(1, 7, 1, 16));\n\t\tassert.deepEqual(snippet.placeHolders[0].occurences[1], new Range(3, 5, 3, 14));\n\t\tassert.equal(snippet.placeHolders[1].id, '');\n\t\tassert.equal(snippet.placeHolders[1].occurences.length, 1);\n\t\tassert.deepEqual(snippet.placeHolders[1].occurences[0], new Range(2, 2, 2, 2));\n\t});\n\n\ttest('bug #17487:[snippets] four backslashes are required to get one backslash in the inserted text', () => {\n\n\t\tvar external = [\n\t\t\t'\\\\begin{${1:enumerate}}',\n\t\t\t'\\t$0',\n\t\t\t'\\\\end{$1}'\n\t\t].join('\\n');\n\n\t\tvar internal = CodeSnippet.convertExternalSnippet(external, ExternalSnippetType.TextMateSnippet);\n\n\t\tassert.equal(internal, [\n\t\t\t'\\\\begin\\\\{{{1:enumerate}}\\\\}',\n\t\t\t'\\t{{}}',\n\t\t\t'\\\\end\\\\{{{1:}}\\\\}'\n\t\t].join('\\n'));\n\n\t\tvar snippet = new CodeSnippet(internal);\n\n\t\tassert.deepEqual(snippet.lines, [\n\t\t\t'\\\\begin{enumerate}',\n\t\t\t'\\t',\n\t\t\t'\\\\end{enumerate}'\n\t\t]);\n\t\tassert.equal(snippet.placeHolders.length, 2);\n\t\tassert.equal(snippet.placeHolders[0].id, '1');\n\t\tassert.equal(snippet.placeHolders[0].occurences.length, 2);\n\t\tassert.deepEqual(snippet.placeHolders[0].occurences[0], new Range(1, 8, 1, 17));\n\t\tassert.deepEqual(snippet.placeHolders[0].occurences[1], new Range(3, 6, 3, 15));\n\t\tassert.equal(snippet.placeHolders[1].id, '');\n\t\tassert.equal(snippet.placeHolders[1].occurences.length, 1);\n\t\tassert.deepEqual(snippet.placeHolders[1].occurences[0], new Range(2, 2, 2, 2));\n\t});\n\n\ttest('issue #3552: Snippet Converted Not Working for literal Dollar Sign', () => {\n\n\t\tlet external = '\\n\\\\$scope.\\\\$broadcast(\\'scroll.infiniteScrollComplete\\');\\n';\n\t\tlet internal = CodeSnippet.convertExternalSnippet(external, ExternalSnippetType.TextMateSnippet);\n\n\t\tassert.equal(internal, '\\n$scope.$broadcast(\\'scroll.infiniteScrollComplete\\');\\n');\n\t});\n});\n\n"]}