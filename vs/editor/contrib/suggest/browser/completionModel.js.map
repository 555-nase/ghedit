{"version":3,"file":"vs/editor/contrib/suggest/browser/completionModel.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/editor/contrib/suggest/browser/completionModel.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport {isFalsyOrEmpty} from 'vs/base/common/arrays';\nimport {assign} from 'vs/base/common/objects';\nimport URI from 'vs/base/common/uri';\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport {IPosition} from 'vs/editor/common/editorCommon';\nimport {IFilter, IMatch, fuzzyContiguousFilter} from 'vs/base/common/filters';\nimport {ISuggestResult, ISuggestSupport, ISuggestion} from 'vs/editor/common/modes';\nimport {ISuggestResult2} from '../common/suggest';\n\nexport class CompletionItem {\n\n\tsuggestion: ISuggestion;\n\thighlights: IMatch[];\n\tcontainer: ISuggestResult;\n\tfilter: IFilter;\n\n\tprivate _support: ISuggestSupport;\n\n\tconstructor(suggestion: ISuggestion, container: ISuggestResult2) {\n\t\tthis._support = container.support;\n\t\tthis.suggestion = suggestion;\n\t\tthis.container = container;\n\t\tthis.filter = container.support && container.support.filter || fuzzyContiguousFilter;\n\t}\n\n\tresolveDetails(resource: URI, position: IPosition): TPromise<ISuggestion> {\n\t\tif (!this._support || typeof this._support.getSuggestionDetails !== 'function') {\n\t\t\treturn TPromise.as(this.suggestion);\n\t\t}\n\n\t\treturn this._support.getSuggestionDetails(resource, position, this.suggestion);\n\t}\n\n\tupdateDetails(value: ISuggestion): void {\n\t\tthis.suggestion = assign(this.suggestion, value);\n\t}\n\n\tstatic compare(item: CompletionItem, otherItem: CompletionItem): number {\n\t\tconst suggestion = item.suggestion;\n\t\tconst otherSuggestion = otherItem.suggestion;\n\n\t\tif (typeof suggestion.sortText === 'string' && typeof otherSuggestion.sortText === 'string') {\n\t\t\tconst one = suggestion.sortText.toLowerCase();\n\t\t\tconst other = otherSuggestion.sortText.toLowerCase();\n\n\t\t\tif (one < other) {\n\t\t\t\treturn -1;\n\t\t\t} else if (one > other) {\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t}\n\n\t\treturn suggestion.label.toLowerCase() < otherSuggestion.label.toLowerCase() ? -1 : 1;\n\t}\n}\n\nexport class LineContext {\n\tleadingLineContent: string;\n\tcharacterCountDelta: number;\n}\n\nexport class CompletionModel {\n\n\tprivate _lineContext: LineContext;\n\tprivate _items: CompletionItem[] = [];\n\tprivate _filteredItems: CompletionItem[] = undefined;\n\n\tconstructor(public raw: ISuggestResult2[], leadingLineContent:string) {\n\t\tthis._lineContext = { leadingLineContent, characterCountDelta: 0 };\n\t\tfor (let container of raw) {\n\t\t\tfor (let suggestion of container.suggestions) {\n\t\t\t\tthis._items.push(new CompletionItem(suggestion, container));\n\t\t\t}\n\t\t}\n\t\tthis._items.sort(CompletionItem.compare);\n\t}\n\n\tget lineContext(): LineContext {\n\t\treturn this._lineContext;\n\t}\n\n\tset lineContext(value: LineContext) {\n\t\tif (this._lineContext !== value) {\n\t\t\tthis._filteredItems = undefined;\n\t\t\tthis._lineContext = value;\n\t\t}\n\t}\n\n\tget items(): CompletionItem[] {\n\t\tif (!this._filteredItems) {\n\t\t\tthis._filter();\n\t\t}\n\t\treturn this._filteredItems;\n\t}\n\n\n\tprivate _filter(): void {\n\t\tthis._filteredItems = [];\n\t\tconst {leadingLineContent, characterCountDelta} = this._lineContext;\n\t\tfor (let item of this._items) {\n\n\t\t\tlet {overwriteBefore} = item.suggestion;\n\t\t\tif (typeof overwriteBefore !== 'number') {\n\t\t\t\toverwriteBefore = item.container.currentWord.length;\n\t\t\t}\n\n\t\t\tconst start = leadingLineContent.length - (overwriteBefore + characterCountDelta);\n\t\t\tconst word = leadingLineContent.substr(start);\n\n\t\t\tconst {filter, suggestion} = item;\n\t\t\tlet match = false;\n\n\t\t\t// compute highlights based on 'label'\n\t\t\titem.highlights = filter(word, suggestion.label);\n\t\t\tmatch = item.highlights !== null;\n\n\t\t\t// no match on label -> check on codeSnippet\n\t\t\tif (!match && suggestion.codeSnippet !== suggestion.label) {\n\t\t\t\tmatch = !isFalsyOrEmpty((filter(word, suggestion.codeSnippet.replace(/{{.+?}}/g, '')))); // filters {{text}}-snippet syntax\n\t\t\t}\n\n\t\t\t// no match on label nor codeSnippet -> check on filterText\n\t\t\tif(!match && typeof suggestion.filterText === 'string') {\n\t\t\t\tmatch = !isFalsyOrEmpty(filter(word, suggestion.filterText));\n\t\t\t}\n\n\t\t\tif (match) {\n\t\t\t\tthis._filteredItems.push(item);\n\t\t\t}\n\t\t}\n\t}\n}\n"]}