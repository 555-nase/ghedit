import 'vs/css!./suggest';
import { IDisposable } from 'vs/base/common/lifecycle';
import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
import { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';
import { ICodeEditor, IContentWidget, IContentWidgetPosition } from 'vs/editor/browser/editorBrowser';
import { SuggestModel } from '../common/suggestModel';
import { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';
export declare class SuggestWidget implements IContentWidget, IDisposable {
    private editor;
    private model;
    private telemetryService;
    static ID: string;
    static WIDTH: number;
    static LOADING_MESSAGE: string;
    static NO_SUGGESTIONS_MESSAGE: string;
    allowEditorOverflow: boolean;
    private state;
    private isAuto;
    private loadingTimeout;
    private currentSuggestionDetails;
    private focusedItem;
    private completionModel;
    private element;
    private messageElement;
    private listElement;
    private details;
    private delegate;
    private list;
    private suggestWidgetVisible;
    private suggestWidgetMultipleSuggestions;
    private suggestionSupportsAutoAccept;
    private editorBlurTimeout;
    private showTimeout;
    private toDispose;
    constructor(editor: ICodeEditor, model: SuggestModel, telemetryService: ITelemetryService, keybindingService: IKeybindingService, instantiationService: IInstantiationService);
    private onCursorSelectionChanged();
    private onEditorBlur();
    private onListSelection(e);
    private _getSuggestionAriaAlertLabel(item);
    private _lastAriaAlertLabel;
    private _ariaAlert(newAriaAlertLabel);
    private onListFocus(e);
    private setState(state);
    private onDidTrigger(e);
    private onDidSuggest(e);
    private onDidCancel(e);
    selectNextPage(): boolean;
    selectNext(): boolean;
    selectPreviousPage(): boolean;
    selectPrevious(): boolean;
    acceptSelectedSuggestion(): boolean;
    toggleDetails(): void;
    private show();
    private hide();
    cancel(): void;
    getPosition(): IContentWidgetPosition;
    getDomNode(): HTMLElement;
    getId(): string;
    private updateWidgetHeight();
    private renderDetails();
    dispose(): void;
}
