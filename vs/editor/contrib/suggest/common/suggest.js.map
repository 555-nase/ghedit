{"version":3,"file":"vs/editor/contrib/suggest/common/suggest.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/editor/contrib/suggest/common/suggest.ts"],"names":[],"mappings":";IAAA;;;oGAGgG;IAChG,YAAY,CAAC;IAWF,sCAA8B,GAAG,sBAAsB,CAAC;IACxD,iDAAyC,GAAG,+BAA+B,CAAC;IAC5E,sCAA8B,GAAG,0BAA0B,CAAC;IAMvE,iBAAwB,KAAa,EAAE,QAAmB,EAAE,gBAAwB,EAAE,MAA4B;QAEjH,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;YACb,MAAM,GAAG,uBAAe,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAC/C,CAAC;QAED,IAAM,QAAQ,GAAG,KAAK,CAAC,qBAAqB,EAAE,CAAC;QAC/C,IAAM,MAAM,GAAsB,EAAE,CAAC;QAErC,IAAM,OAAO,GAAG,MAAM,CAAC,GAAG,CAAC,UAAC,QAAQ,EAAE,KAAK;YAC1C,MAAM,CAAC;gBAEN,4CAA4C;gBAC5C,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;oBACvB,MAAM,CAAC;gBACR,CAAC;gBAED,oDAAoD;gBACpD,MAAM,CAAC,qBAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAA,OAAO;oBACxC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,EAAE,QAAQ,EAAE,gBAAgB,CAAC,CAAC,IAAI,CAAC,UAAA,MAAM;wBAEvE,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;4BACb,MAAM,CAAC;wBACR,CAAC;wBAED,GAAG,CAAC,CAAsB,UAAM,EAAN,iBAAM,EAAN,oBAAM,EAAN,IAAM,CAAC;4BAA5B,IAAI,aAAa,eAAA;4BAErB,EAAE,CAAC,CAAC,CAAC,aAAa,IAAI,uBAAc,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;gCACjE,QAAQ,CAAC;4BACV,CAAC;4BAED,MAAM,CAAC,IAAI,CAAC;gCACX,SAAA,OAAO;gCACP,WAAW,EAAE,aAAa,CAAC,WAAW;gCACtC,UAAU,EAAE,aAAa,CAAC,UAAU;gCACpC,WAAW,EAAE,aAAa,CAAC,WAAW;6BACtC,CAAC,CAAC;yBACH;oBAEF,CAAC,EAAE,0BAAiB,CAAC,CAAC;gBACvB,CAAC,CAAC,CAAC,CAAC;YACL,CAAC,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,gBAAQ,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC;YAC7B,kCAAkC;YAClC,IAAM,QAAQ,GAAG,2BAAgB,CAAC,WAAW,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;YAC/D,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACtB,MAAM,CAAC,MAAM,CAAC;QACf,CAAC,CAAC,CAAC;IACJ,CAAC;IAlDe,eAAO,UAkDtB,CAAA;IAED,6CAAoB,CAAC,8BAA8B,CAAC,gCAAgC,EAAE,UAAC,KAAK,EAAE,QAAQ,EAAE,IAAI;QAE3G,IAAI,gBAAgB,GAAG,IAAI,CAAC,kBAAkB,CAAC,CAAC;QAChD,EAAE,CAAC,CAAC,OAAO,gBAAgB,KAAK,WAAW,IAAI,OAAO,gBAAgB,KAAK,QAAQ,CAAC,CAAC,CAAC;YACrF,MAAM,wBAAe,CAAC,kBAAkB,CAAC,CAAC;QAC3C,CAAC;QAED,MAAM,CAAC,OAAO,CAAC,KAAK,EAAE,QAAQ,EAAE,gBAAgB,CAAC,CAAC;IACnD,CAAC,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {sequence} from 'vs/base/common/async';\nimport {isFalsyOrEmpty} from 'vs/base/common/arrays';\nimport {illegalArgument, onUnexpectedError} from 'vs/base/common/errors';\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport {IModel, IPosition} from 'vs/editor/common/editorCommon';\nimport {CommonEditorRegistry} from 'vs/editor/common/editorCommonExtensions';\nimport {ISuggestResult, ISuggestSupport, SuggestRegistry} from 'vs/editor/common/modes';\nimport {SnippetsRegistry} from 'vs/editor/common/modes/supports';\n\nexport var CONTEXT_SUGGEST_WIDGET_VISIBLE = 'suggestWidgetVisible';\nexport var CONTEXT_SUGGESTION_SUPPORTS_ACCEPT_ON_KEY = 'suggestionSupportsAcceptOnKey';\nexport var ACCEPT_SELECTED_SUGGESTION_CMD = 'acceptSelectedSuggestion';\n\nexport interface ISuggestResult2 extends ISuggestResult {\n\tsupport?: ISuggestSupport;\n}\n\nexport function suggest(model: IModel, position: IPosition, triggerCharacter: string, groups?: ISuggestSupport[][]): TPromise<ISuggestResult2[]> {\n\n\tif (!groups) {\n\t\tgroups = SuggestRegistry.orderedGroups(model);\n\t}\n\n\tconst resource = model.getAssociatedResource();\n\tconst result: ISuggestResult2[] = [];\n\n\tconst factory = groups.map((supports, index) => {\n\t\treturn () => {\n\n\t\t\t// stop as soon as a group produced a result\n\t\t\tif (result.length > 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// for each support in the group ask for suggestions\n\t\t\treturn TPromise.join(supports.map(support => {\n\t\t\t\treturn support.suggest(resource, position, triggerCharacter).then(values => {\n\n\t\t\t\t\tif (!values) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (let suggestResult of values) {\n\n\t\t\t\t\t\tif (!suggestResult || isFalsyOrEmpty(suggestResult.suggestions)) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresult.push({\n\t\t\t\t\t\t\tsupport,\n\t\t\t\t\t\t\tcurrentWord: suggestResult.currentWord,\n\t\t\t\t\t\t\tincomplete: suggestResult.incomplete,\n\t\t\t\t\t\t\tsuggestions: suggestResult.suggestions\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t}, onUnexpectedError);\n\t\t\t}));\n\t\t};\n\t});\n\n\treturn sequence(factory).then(() => {\n\t\t// add snippets to the first group\n\t\tconst snippets = SnippetsRegistry.getSnippets(model, position);\n\t\tresult.push(snippets);\n\t\treturn result;\n\t});\n}\n\nCommonEditorRegistry.registerDefaultLanguageCommand('_executeCompletionItemProvider', (model, position, args) => {\n\n\tlet triggerCharacter = args['triggerCharacter'];\n\tif (typeof triggerCharacter !== 'undefined' && typeof triggerCharacter !== 'string') {\n\t\tthrow illegalArgument('triggerCharacter');\n\t}\n\n\treturn suggest(model, position, triggerCharacter);\n});\n"]}