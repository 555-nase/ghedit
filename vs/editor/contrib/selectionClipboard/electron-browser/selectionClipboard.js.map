{"version":3,"file":"vs/editor/contrib/selectionClipboard/electron-browser/selectionClipboard.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/editor/contrib/selectionClipboard/electron-browser/selectionClipboard.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;;;IAEhG,YAAY,CAAC;IAYb;QAAiC,sCAAU;QAI1C,4BAAY,MAAkB,EAAsB,iBAAoC;YACvF,iBAAO,CAAC;YAER,EAAE,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;gBACtB,IAAI,SAAS,GAAG,MAAM,CAAC,gBAAgB,EAAE,CAAC,kBAAkB,CAAC;gBAE7D,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,YAAY,CAAC,wBAAS,CAAC,oBAAoB,EAAE,UAAC,CAA4B;oBAC/F,EAAE,CAAC,CAAC,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC;wBAC1B,SAAS,GAAG,MAAM,CAAC,gBAAgB,EAAE,CAAC,kBAAkB,CAAC;oBAC1D,CAAC;gBACF,CAAC,CAAC,CAAC,CAAC;gBAEJ,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,YAAY,CAAC,wBAAS,CAAC,SAAS,EAAE,UAAC,CAAmB;oBAC3E,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;wBAChB,MAAM,CAAC;oBACR,CAAC;oBACD,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;wBACxB,MAAM,CAAC;oBACR,CAAC;oBACD,EAAE,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC;wBAC1B,CAAC,CAAC,KAAK,CAAC,cAAc,EAAE,CAAC;wBACzB,MAAM,CAAC,KAAK,EAAE,CAAC;wBAEf,EAAE,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC;4BACvB,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;wBACvC,CAAC;wBAED,OAAO,CAAC,QAAQ,CAAC;4BAChB,wIAAwI;4BACxI,oBAAS,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;4BAChC,oDAAoD;4BACpD,0CAA0C;4BAC1C,yBAAyB;4BACzB,MAAM;wBACP,CAAC,CAAC,CAAC;oBACJ,CAAC;gBACF,CAAC,CAAC,CAAC,CAAC;gBAEJ,IAAI,yBAAuB,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,wBAAgB,CAAC;oBACjE,IAAI,KAAK,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC;oBAC9B,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;wBACZ,MAAM,CAAC;oBACR,CAAC;oBAED,IAAI,UAAU,GAAG,MAAM,CAAC,aAAa,EAAE,CAAC;oBACxC,UAAU,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;oBACjC,UAAU,CAAC,IAAI,CAAC,aAAK,CAAC,wBAAwB,CAAC,CAAC;oBAEhD,IAAI,MAAM,GAAa,EAAE,CAAC;oBAC1B,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;wBAC5C,IAAI,GAAG,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC;wBACxB,EAAE,CAAC,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;4BACnB,2CAA2C;4BAC3C,MAAM,CAAC;wBACR,CAAC;wBACD,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,GAAG,EAAE,kCAAmB,CAAC,WAAW,CAAC,CAAC,CAAC;oBAC1E,CAAC;oBAED,IAAI,UAAU,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC;oBAC7C,oBAAS,CAAC,SAAS,CAAC,UAAU,EAAE,WAAW,CAAC,CAAC;gBAC9C,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;gBAET,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,YAAY,CAAC,wBAAS,CAAC,sBAAsB,EAAE,UAAC,CAA8B;oBACnG,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;wBAChB,MAAM,CAAC;oBACR,CAAC;oBACD,yBAAuB,CAAC,QAAQ,EAAE,CAAC;gBACpC,CAAC,CAAC,CAAC,CAAC;YACL,CAAC;QACF,CAAC;QAEM,kCAAK,GAAZ;YACC,MAAM,CAAC,kBAAkB,CAAC,EAAE,CAAC;QAC9B,CAAC;QAEM,oCAAO,GAAd;YACC,gBAAK,CAAC,OAAO,WAAE,CAAC;QACjB,CAAC;QA/EM,qBAAE,GAAG,mCAAmC,CAAC;QAEhB;uBAAC,sCAAkB;8BAAA;QA8EpD,yBAAC;IAAD,CAAC,AAlFD,CAAiC,sBAAU,GAkF1C;IAED,+CAAqB,CAAC,0BAA0B,CAAC,kBAAkB,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport {clipboard} from 'electron';\nimport * as platform from 'vs/base/common/platform';\nimport {ICodeEditor, IEditorMouseEvent} from 'vs/editor/browser/editorBrowser';\nimport {Disposable} from 'vs/base/common/lifecycle';\nimport {EndOfLinePreference, EventType, IEditorContribution, ICursorSelectionChangedEvent, IConfigurationChangedEvent} from 'vs/editor/common/editorCommon';\nimport {EditorBrowserRegistry} from 'vs/editor/browser/editorBrowserExtensions';\nimport {IKeybindingService} from 'vs/platform/keybinding/common/keybindingService';\nimport {RunOnceScheduler} from 'vs/base/common/async';\nimport {Range} from 'vs/editor/common/core/range';\n\nclass SelectionClipboard extends Disposable implements IEditorContribution {\n\n\tstatic ID = 'editor.contrib.selectionClipboard';\n\n\tconstructor(editor:ICodeEditor, @IKeybindingService keybindingService:IKeybindingService) {\n\t\tsuper();\n\n\t\tif (platform.isLinux) {\n\t\t\tvar isEnabled = editor.getConfiguration().selectionClipboard;\n\n\t\t\tthis._register(editor.addListener2(EventType.ConfigurationChanged, (e:IConfigurationChangedEvent) => {\n\t\t\t\tif (e.selectionClipboard) {\n\t\t\t\t\tisEnabled = editor.getConfiguration().selectionClipboard;\n\t\t\t\t}\n\t\t\t}));\n\n\t\t\tthis._register(editor.addListener2(EventType.MouseDown, (e:IEditorMouseEvent) => {\n\t\t\t\tif (!isEnabled) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (!editor.getModel()) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (e.event.middleButton) {\n\t\t\t\t\te.event.preventDefault();\n\t\t\t\t\teditor.focus();\n\n\t\t\t\t\tif (e.target.position) {\n\t\t\t\t\t\teditor.setPosition(e.target.position);\n\t\t\t\t\t}\n\n\t\t\t\t\tprocess.nextTick(() => {\n\t\t\t\t\t\t// TODO@Alex: electron weirdness: calling clipboard.readText('selection') generates a paste event, so no need to execute paste ourselves\n\t\t\t\t\t\tclipboard.readText('selection');\n\t\t\t\t\t\t// keybindingService.executeCommand(Handler.Paste, {\n\t\t\t\t\t\t// \ttext: clipboard.readText('selection'),\n\t\t\t\t\t\t// \tpasteOnNewLine: false\n\t\t\t\t\t\t// });\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}));\n\n\t\t\tlet setSelectionToClipboard = this._register(new RunOnceScheduler(() => {\n\t\t\t\tlet model = editor.getModel();\n\t\t\t\tif (!model) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tlet selections = editor.getSelections();\n\t\t\t\tselections = selections.slice(0);\n\t\t\t\tselections.sort(Range.compareRangesUsingStarts);\n\n\t\t\t\tlet result: string[] = [];\n\t\t\t\tfor (let i = 0; i < selections.length; i++) {\n\t\t\t\t\tlet sel = selections[i];\n\t\t\t\t\tif (sel.isEmpty()) {\n\t\t\t\t\t\t// Only write if all cursors have selection\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tresult.push(model.getValueInRange(sel, EndOfLinePreference.TextDefined));\n\t\t\t\t}\n\n\t\t\t\tlet textToCopy = result.join(model.getEOL());\n\t\t\t\tclipboard.writeText(textToCopy, 'selection');\n\t\t\t}, 100));\n\n\t\t\tthis._register(editor.addListener2(EventType.CursorSelectionChanged, (e:ICursorSelectionChangedEvent) => {\n\t\t\t\tif (!isEnabled) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tsetSelectionToClipboard.schedule();\n\t\t\t}));\n\t\t}\n\t}\n\n\tpublic getId(): string {\n\t\treturn SelectionClipboard.ID;\n\t}\n\n\tpublic dispose(): void {\n\t\tsuper.dispose();\n\t}\n}\n\nEditorBrowserRegistry.registerEditorContribution(SelectionClipboard);\n"]}