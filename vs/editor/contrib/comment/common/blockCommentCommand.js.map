{"version":3,"file":"vs/editor/contrib/comment/common/blockCommentCommand.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/editor/contrib/comment/common/blockCommentCommand.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {EditOperation} from 'vs/editor/common/core/editOperation';\nimport {Position} from 'vs/editor/common/core/position';\nimport {Range} from 'vs/editor/common/core/range';\nimport {Selection} from 'vs/editor/common/core/selection';\nimport * as editorCommon from 'vs/editor/common/editorCommon';\nimport {ICommentsConfiguration} from 'vs/editor/common/modes';\n\nexport class BlockCommentCommand implements editorCommon.ICommand {\n\n\tprivate _selection: editorCommon.IEditorSelection;\n\tprivate _usedEndToken: string;\n\n\tconstructor(selection:editorCommon.IEditorSelection) {\n\t\tthis._selection = selection;\n\t\tthis._usedEndToken = null;\n\t}\n\n\tpublic static _haystackHasNeedleAtOffset(haystack: string, needle: string, offset: number): boolean {\n\t\tif (offset < 0) {\n\t\t\treturn false;\n\t\t}\n\t\tvar needleLength = needle.length;\n\t\tvar haystackLength = haystack.length;\n\t\tif (offset + needleLength > haystackLength) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (var i = 0; i < needleLength; i++) {\n\t\t\tif (haystack.charCodeAt(offset + i) !== needle.charCodeAt(i)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\tprivate _createOperationsForBlockComment(selection:editorCommon.IRange, config:ICommentsConfiguration, model:editorCommon.ITokenizedModel, builder:editorCommon.IEditOperationBuilder): void {\n\t\tvar startLineNumber = selection.startLineNumber;\n\t\tvar startColumn = selection.startColumn;\n\t\tvar endLineNumber = selection.endLineNumber;\n\t\tvar endColumn = selection.endColumn;\n\n\t\tvar startToken = config.blockCommentStartToken;\n\t\tvar endToken = config.blockCommentEndToken;\n\n\t\tvar startTokenIndex = model.getLineContent(startLineNumber).lastIndexOf(startToken, startColumn - 1 + startToken.length);\n\t\tvar endTokenIndex = model.getLineContent(endLineNumber).indexOf(endToken, endColumn - 1 - endToken.length);\n\n\t\tvar ops: editorCommon.IIdentifiedSingleEditOperation[];\n\n\t\tif (startTokenIndex !== -1 && endTokenIndex !== -1) {\n\t\t\tops = BlockCommentCommand._createRemoveBlockCommentOperations({\n\t\t\t\tstartLineNumber: startLineNumber,\n\t\t\t\tstartColumn: startTokenIndex + 1 + startToken.length,\n\t\t\t\tendLineNumber: endLineNumber,\n\t\t\t\tendColumn: endTokenIndex + 1\n\t\t\t}, startToken, endToken);\n\t\t} else {\n\t\t\tops = BlockCommentCommand._createAddBlockCommentOperations(selection, startToken, endToken);\n\t\t\tthis._usedEndToken = ops.length === 1 ? endToken : null;\n\t\t}\n\n\t\tfor (var i = 0; i < ops.length; i++) {\n\t\t\tbuilder.addEditOperation(ops[i].range, ops[i].text);\n\t\t}\n\t}\n\n\tpublic static _createRemoveBlockCommentOperations(r:editorCommon.IRange, startToken:string, endToken:string): editorCommon.IIdentifiedSingleEditOperation[] {\n\t\tvar res: editorCommon.IIdentifiedSingleEditOperation[] = [];\n\n\t\tif (!Range.isEmpty(r)) {\n\t\t\t// Remove block comment start\n\t\t\tres.push(EditOperation.delete(new Range(\n\t\t\t\tr.startLineNumber, r.startColumn - startToken.length,\n\t\t\t\tr.startLineNumber, r.startColumn\n\t\t\t)));\n\n\t\t\t// Remove block comment end\n\t\t\tres.push(EditOperation.delete(new Range(\n\t\t\t\tr.endLineNumber, r.endColumn,\n\t\t\t\tr.endLineNumber, r.endColumn + endToken.length\n\t\t\t)));\n\t\t} else {\n\t\t\t// Remove both continuously\n\t\t\tres.push(EditOperation.delete(new Range(\n\t\t\t\tr.startLineNumber, r.startColumn - startToken.length,\n\t\t\t\tr.endLineNumber, r.endColumn + endToken.length\n\t\t\t)));\n\t\t}\n\n\t\treturn res;\n\t}\n\n\tpublic static _createAddBlockCommentOperations(r:editorCommon.IRange, startToken:string, endToken:string): editorCommon.IIdentifiedSingleEditOperation[] {\n\t\tvar res: editorCommon.IIdentifiedSingleEditOperation[] = [];\n\n\t\tif (!Range.isEmpty(r)) {\n\t\t\t// Insert block comment start\n\t\t\tres.push(EditOperation.insert(new Position(r.startLineNumber, r.startColumn), startToken));\n\n\t\t\t// Insert block comment end\n\t\t\tres.push(EditOperation.insert(new Position(r.endLineNumber, r.endColumn), endToken));\n\t\t} else {\n\t\t\t// Insert both continuously\n\t\t\tres.push(EditOperation.replace(new Range(\n\t\t\t\tr.startLineNumber, r.startColumn,\n\t\t\t\tr.endLineNumber, r.endColumn\n\t\t\t), startToken + endToken));\n\t\t}\n\n\t\treturn res;\n\t}\n\n\tpublic getEditOperations(model:editorCommon.ITokenizedModel, builder:editorCommon.IEditOperationBuilder): void {\n\t\tvar startLineNumber = this._selection.startLineNumber;\n\t\tvar startColumn = this._selection.startColumn;\n\t\tvar endLineNumber = this._selection.endLineNumber;\n\t\tvar endColumn = this._selection.endColumn;\n\n\t\tlet richEditSupport = model.getModeAtPosition(startLineNumber, startColumn).richEditSupport;\n\t\tlet config = richEditSupport ? richEditSupport.comments : null;\n\t\tif (!config || !config.blockCommentStartToken || !config.blockCommentEndToken) {\n\t\t\t// Mode does not support block comments\n\t\t\treturn;\n\t\t}\n\n\t\tthis._createOperationsForBlockComment({\n\t\t\tstartLineNumber: startLineNumber,\n\t\t\tstartColumn: startColumn,\n\t\t\tendLineNumber: endLineNumber,\n\t\t\tendColumn: endColumn\n\t\t}, config, model, builder);\n\t}\n\n\tpublic computeCursorState(model:editorCommon.ITokenizedModel, helper: editorCommon.ICursorStateComputerData): editorCommon.IEditorSelection {\n\t\tvar inverseEditOperations = helper.getInverseEditOperations();\n\t\tif (inverseEditOperations.length === 2) {\n\t\t\tvar startTokenEditOperation = inverseEditOperations[0];\n\t\t\tvar endTokenEditOperation = inverseEditOperations[1];\n\n\t\t\treturn Selection.createSelection(\n\t\t\t\tstartTokenEditOperation.range.endLineNumber,\n\t\t\t\tstartTokenEditOperation.range.endColumn,\n\t\t\t\tendTokenEditOperation.range.startLineNumber,\n\t\t\t\tendTokenEditOperation.range.startColumn\n\t\t\t);\n\t\t} else {\n\t\t\tvar srcRange = inverseEditOperations[0].range;\n\t\t\tvar deltaColumn = this._usedEndToken ? -this._usedEndToken.length : 0;\n\t\t\treturn Selection.createSelection(\n\t\t\t\tsrcRange.endLineNumber,\n\t\t\t\tsrcRange.endColumn + deltaColumn,\n\t\t\t\tsrcRange.endLineNumber,\n\t\t\t\tsrcRange.endColumn + deltaColumn\n\t\t\t);\n\t\t}\n\t}\n}\n"]}