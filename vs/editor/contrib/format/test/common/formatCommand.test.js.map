{"version":3,"file":"vs/editor/contrib/format/test/common/formatCommand.test.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/editor/contrib/format/test/common/formatCommand.test.ts"],"names":[],"mappings":";IAAA;;;oGAGgG;IAChG,YAAY,CAAC;IAUb,gBAAgB,eAAuB,EAAE,WAAmB,EAAE,aAAqB,EAAE,SAAiB,EAAE,IAAa;QACpH,MAAM,CAAC;YACN,KAAK,EAAE,IAAI,aAAK,CAAC,eAAe,EAAE,WAAW,EAAE,aAAa,EAAE,SAAS,CAAC;YACxE,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;YACrB,gBAAgB,EAAE,KAAK;SACvB,CAAC;IACH,CAAC;IAED,KAAK,CAAC,wBAAwB,EAAE;QAC/B,sBAAsB,KAAe,EAAE,IAAyB,EAAE,QAA6B;YAC9F,IAAI,KAAK,GAAG,IAAI,aAAK,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,aAAK,CAAC,wBAAwB,EAAE,IAAI,CAAC,CAAC;YAC9E,IAAI,MAAM,GAAG,qCAAqB,CAAC,QAAQ,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;YACzD,MAAM,CAAC,SAAS,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;YACnC,KAAK,CAAC,OAAO,EAAE,CAAC;QACjB,CAAC;QAED,IAAI,CAAC,mBAAmB,EAAE;YACzB,YAAY,CACX;gBACC,WAAW;gBACX,iBAAiB;aACjB,EACD,MAAM,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAE;gBAChB,WAAW;aACX,CAAC,EACF,IAAI,CACJ,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,oBAAoB,EAAE;YAC1B,YAAY,CACX;gBACC,WAAW;gBACX,iBAAiB;aACjB,EACD,MAAM,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAE;gBAChB,WAAW;gBACX,iBAAiB;aACjB,CAAC,EACF,IAAI,CACJ,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,oBAAoB,EAAE;YAC1B,YAAY,CACX;gBACC,WAAW;gBACX,iBAAiB;aACjB,EACD,MAAM,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAE;gBACf,WAAW;gBACX,EAAE;aACF,CAAC,EACF,IAAI,CACJ,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,0BAA0B,EAAE;YAChC,YAAY,CACX;gBACC,WAAW;gBACX,iBAAiB;aACjB,EACD,MAAM,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAE;gBAChB,wBAAwB;aACxB,CAAC,EACF,MAAM,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAE;gBAChB,mBAAmB;aACnB,CAAC,CACF,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,8BAA8B,EAAE;YACpC,YAAY,CACX;gBACC,WAAW;gBACX,iBAAiB;aACjB,EACD,MAAM,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAE;gBAChB,WAAW;gBACX,mBAAmB;aACnB,CAAC,EACF,MAAM,CAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAE;gBACjB,EAAE;gBACF,mBAAmB;aACnB,CAAC,CACF,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,8BAA8B,EAAE;YACpC,YAAY,CACX;gBACC,WAAW;gBACX,iBAAiB;aACjB,EACD,MAAM,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAE;gBAChB,WAAW;gBACX,8BAA8B;aAC9B,CAAC,EACF,MAAM,CAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAE;gBACjB,mBAAmB;aACnB,CAAC,CACF,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,0BAA0B,EAAE;YAChC,YAAY,CACX;gBACC,WAAW;gBACX,iBAAiB;aACjB,EACD,MAAM,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAE;gBAChB,kBAAkB;aAClB,CAAC,EACF,MAAM,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAE;gBACf,aAAa;aACb,CAAC,CACF,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,8BAA8B,EAAE;YACpC,YAAY,CACX;gBACC,WAAW;gBACX,iBAAiB;aACjB,EACD,MAAM,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAE;gBAChB,mBAAmB;gBACnB,WAAW;aACX,CAAC,EACF,MAAM,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAE;gBACf,mBAAmB;gBACnB,EAAE;aACF,CAAC,CACF,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,8BAA8B,EAAE;YACpC,YAAY,CACX;gBACC,WAAW;gBACX,iBAAiB;aACjB,EACD,MAAM,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAE;gBAChB,wBAAwB;gBACxB,iBAAiB;aACjB,CAAC,EACF,MAAM,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAE;gBACf,mBAAmB;aACnB,CAAC,CACF,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,gCAAgC,EAAE;YACtC,YAAY,CACX;gBACC,gBAAgB;aAChB,EACD,MAAM,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAE;gBAChB,uBAAuB;aACvB,CAAC,EACF,MAAM,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAE;gBAChB,aAAa;aACb,CAAC,CACF,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,+BAA+B,EAAE;YACrC,YAAY,CACX;gBACC,gBAAgB;aAChB,EACD,MAAM,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAE;gBAChB,qBAAqB;aACrB,CAAC,EACF,MAAM,CAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAE;gBACjB,OAAO;aACP,CAAC,CACF,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,+BAA+B,EAAE;YACrC,YAAY,CACX;gBACC,qBAAqB;aACrB,EACD,MAAM,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAE;gBAChB,gBAAgB;aAChB,CAAC,EACF,MAAM,CAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAE;gBACjB,EAAE;aACF,CAAC,CACF,CAAC;QACH,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,KAAK,CAAC,eAAe,EAAE;QACtB,2BAA2B,KAAe,EAAE,SAAoB,EAAE,KAA4B,EAAE,aAAuB,EAAE,iBAA4B;YACpJ,8BAAW,CAAC,KAAK,EAAE,IAAI,EAAE,SAAS,EAAE,UAAC,GAAG,IAAK,OAAA,IAAI,qCAAqB,CAAC,KAAK,EAAE,GAAG,CAAC,EAArC,CAAqC,EAAE,aAAa,EAAE,iBAAiB,CAAC,CAAC;QACvH,CAAC;QAED,IAAI,CAAC,OAAO,EAAE;YACb,iBAAiB,CAChB;gBACC,WAAW;gBACX,iBAAiB;aACjB,EACD,IAAI,qBAAS,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,EACtB;gBACC,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE;oBACnB,WAAW;oBACX,iBAAiB;iBACjB,CAAC;aACF,EACD;gBACC,WAAW;gBACX,iBAAiB;aACjB,EACD,IAAI,qBAAS,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,CACtB,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,gBAAgB,EAAE;YACtB,iBAAiB,CAChB;gBACC,WAAW;gBACX,iBAAiB;aACjB,EACD,IAAI,qBAAS,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,EACtB;gBACC,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE;oBACnB,WAAW;oBACX,qBAAqB;iBACrB,CAAC;aACF,EACD;gBACC,WAAW;gBACX,qBAAqB;aACrB,EACD,IAAI,qBAAS,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,CACtB,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,YAAY,EAAE;YAClB,iBAAiB,CAChB;gBACC,eAAe;gBACf,EAAE;gBACF,eAAe;gBACf,kCAAkC;gBAClC,GAAG;gBACH,EAAE;aACF,EACD,IAAI,qBAAS,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,EACtB;gBACC,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE;oBAClB,eAAe;oBACf,EAAE;oBACF,cAAc;oBACd,EAAE;oBACF,eAAe;oBACf,kCAAkC;oBAClC,GAAG;oBACH,EAAE;iBACF,CAAC;aACF,EACD;gBACC,eAAe;gBACf,EAAE;gBACF,cAAc;gBACd,EAAE;gBACF,eAAe;gBACf,kCAAkC;gBAClC,GAAG;gBACH,EAAE;aACF,EACD,IAAI,qBAAS,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,CACtB,CAAC;QACH,CAAC,CAAC,CAAC;IAEJ,CAAC,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport * as assert from 'assert';\nimport {Range} from 'vs/editor/common/core/range';\nimport {Selection} from 'vs/editor/common/core/selection';\nimport {ISingleEditOperation} from 'vs/editor/common/editorCommon';\nimport {Model} from 'vs/editor/common/model/model';\nimport {EditOperationsCommand} from 'vs/editor/contrib/format/common/formatCommand';\nimport {testCommand} from 'vs/editor/test/common/commands/commandTestUtils';\n\nfunction editOp(startLineNumber: number, startColumn: number, endLineNumber: number, endColumn: number, text:string[]): ISingleEditOperation {\n\treturn {\n\t\trange: new Range(startLineNumber, startColumn, endLineNumber, endColumn),\n\t\ttext: text.join('\\n'),\n\t\tforceMoveMarkers: false\n\t};\n}\n\nsuite('FormatCommand.trimEdit', () => {\n\tfunction testTrimEdit(lines: string[], edit:ISingleEditOperation, expected:ISingleEditOperation): void {\n\t\tlet model = new Model(lines.join('\\n'), Model.DEFAULT_CREATION_OPTIONS, null);\n\t\tlet actual = EditOperationsCommand.trimEdit(edit, model);\n\t\tassert.deepEqual(actual, expected);\n\t\tmodel.dispose();\n\t}\n\n\ttest('single-line no-op', () => {\n\t\ttestTrimEdit(\n\t\t\t[\n\t\t\t\t'some text',\n\t\t\t\t'some other text'\n\t\t\t],\n\t\t\teditOp(1,1,1,10, [\n\t\t\t\t'some text'\n\t\t\t]),\n\t\t\tnull\n\t\t);\n\t});\n\n\ttest('multi-line no-op 1', () => {\n\t\ttestTrimEdit(\n\t\t\t[\n\t\t\t\t'some text',\n\t\t\t\t'some other text'\n\t\t\t],\n\t\t\teditOp(1,1,2,16, [\n\t\t\t\t'some text',\n\t\t\t\t'some other text'\n\t\t\t]),\n\t\t\tnull\n\t\t);\n\t});\n\n\ttest('multi-line no-op 2', () => {\n\t\ttestTrimEdit(\n\t\t\t[\n\t\t\t\t'some text',\n\t\t\t\t'some other text'\n\t\t\t],\n\t\t\teditOp(1,1,2,1, [\n\t\t\t\t'some text',\n\t\t\t\t''\n\t\t\t]),\n\t\t\tnull\n\t\t);\n\t});\n\n\ttest('simple prefix, no suffix', () => {\n\t\ttestTrimEdit(\n\t\t\t[\n\t\t\t\t'some text',\n\t\t\t\t'some other text'\n\t\t\t],\n\t\t\teditOp(1,1,1,10, [\n\t\t\t\t'some interesting thing'\n\t\t\t]),\n\t\t\teditOp(1,6,1,10, [\n\t\t\t\t'interesting thing'\n\t\t\t])\n\t\t);\n\t});\n\n\ttest('whole line prefix, no suffix', () => {\n\t\ttestTrimEdit(\n\t\t\t[\n\t\t\t\t'some text',\n\t\t\t\t'some other text'\n\t\t\t],\n\t\t\teditOp(1,1,1,10, [\n\t\t\t\t'some text',\n\t\t\t\t'interesting thing'\n\t\t\t]),\n\t\t\teditOp(1,10,1,10, [\n\t\t\t\t'',\n\t\t\t\t'interesting thing'\n\t\t\t])\n\t\t);\n\t});\n\n\ttest('multi-line prefix, no suffix', () => {\n\t\ttestTrimEdit(\n\t\t\t[\n\t\t\t\t'some text',\n\t\t\t\t'some other text'\n\t\t\t],\n\t\t\teditOp(1,1,2,16, [\n\t\t\t\t'some text',\n\t\t\t\t'some other interesting thing'\n\t\t\t]),\n\t\t\teditOp(2,12,2,16, [\n\t\t\t\t'interesting thing'\n\t\t\t])\n\t\t);\n\t});\n\n\ttest('no prefix, simple suffix', () => {\n\t\ttestTrimEdit(\n\t\t\t[\n\t\t\t\t'some text',\n\t\t\t\t'some other text'\n\t\t\t],\n\t\t\teditOp(1,1,1,10, [\n\t\t\t\t'interesting text'\n\t\t\t]),\n\t\t\teditOp(1,1,1,5, [\n\t\t\t\t'interesting'\n\t\t\t])\n\t\t);\n\t});\n\n\ttest('no prefix, whole line suffix', () => {\n\t\ttestTrimEdit(\n\t\t\t[\n\t\t\t\t'some text',\n\t\t\t\t'some other text'\n\t\t\t],\n\t\t\teditOp(1,1,1,10, [\n\t\t\t\t'interesting thing',\n\t\t\t\t'some text'\n\t\t\t]),\n\t\t\teditOp(1,1,1,1, [\n\t\t\t\t'interesting thing',\n\t\t\t\t''\n\t\t\t])\n\t\t);\n\t});\n\n\ttest('no prefix, multi-line suffix', () => {\n\t\ttestTrimEdit(\n\t\t\t[\n\t\t\t\t'some text',\n\t\t\t\t'some other text'\n\t\t\t],\n\t\t\teditOp(1,1,2,16, [\n\t\t\t\t'interesting thing text',\n\t\t\t\t'some other text'\n\t\t\t]),\n\t\t\teditOp(1,1,1,5, [\n\t\t\t\t'interesting thing'\n\t\t\t])\n\t\t);\n\t});\n\n\ttest('no overlapping prefix & suffix', () => {\n\t\ttestTrimEdit(\n\t\t\t[\n\t\t\t\t'some cool text'\n\t\t\t],\n\t\t\teditOp(1,1,1,15, [\n\t\t\t\t'some interesting text'\n\t\t\t]),\n\t\t\teditOp(1,6,1,10, [\n\t\t\t\t'interesting'\n\t\t\t])\n\t\t);\n\t});\n\n\ttest('overlapping prefix & suffix 1', () => {\n\t\ttestTrimEdit(\n\t\t\t[\n\t\t\t\t'some cool text'\n\t\t\t],\n\t\t\teditOp(1,1,1,15, [\n\t\t\t\t'some cool cool text'\n\t\t\t]),\n\t\t\teditOp(1,11,1,11, [\n\t\t\t\t'cool '\n\t\t\t])\n\t\t);\n\t});\n\n\ttest('overlapping prefix & suffix 2', () => {\n\t\ttestTrimEdit(\n\t\t\t[\n\t\t\t\t'some cool cool text'\n\t\t\t],\n\t\t\teditOp(1,1,1,29, [\n\t\t\t\t'some cool text'\n\t\t\t]),\n\t\t\teditOp(1,11,1,16, [\n\t\t\t\t''\n\t\t\t])\n\t\t);\n\t});\n});\n\nsuite('FormatCommand', () => {\n\tfunction testFormatCommand(lines: string[], selection: Selection, edits:ISingleEditOperation[], expectedLines: string[], expectedSelection: Selection): void {\n\t\ttestCommand(lines, null, selection, (sel) => new EditOperationsCommand(edits, sel), expectedLines, expectedSelection);\n\t}\n\n\ttest('no-op', () => {\n\t\ttestFormatCommand(\n\t\t\t[\n\t\t\t\t'some text',\n\t\t\t\t'some other text'\n\t\t\t],\n\t\t\tnew Selection(2,1,2,5),\n\t\t\t[\n\t\t\t\teditOp(1, 1, 2, 16, [\n\t\t\t\t\t'some text',\n\t\t\t\t\t'some other text'\n\t\t\t\t])\n\t\t\t],\n\t\t\t[\n\t\t\t\t'some text',\n\t\t\t\t'some other text'\n\t\t\t],\n\t\t\tnew Selection(2,1,2,5)\n\t\t);\n\t});\n\n\ttest('trim beginning', () => {\n\t\ttestFormatCommand(\n\t\t\t[\n\t\t\t\t'some text',\n\t\t\t\t'some other text'\n\t\t\t],\n\t\t\tnew Selection(2,1,2,5),\n\t\t\t[\n\t\t\t\teditOp(1, 1, 2, 16, [\n\t\t\t\t\t'some text',\n\t\t\t\t\t'some new other text'\n\t\t\t\t])\n\t\t\t],\n\t\t\t[\n\t\t\t\t'some text',\n\t\t\t\t'some new other text'\n\t\t\t],\n\t\t\tnew Selection(2,1,2,5)\n\t\t);\n\t});\n\n\ttest('issue #144', () => {\n\t\ttestFormatCommand(\n\t\t\t[\n\t\t\t\t'package caddy',\n\t\t\t\t'',\n\t\t\t\t'func main() {',\n\t\t\t\t'\\tfmt.Println(\"Hello World! :)\")',\n\t\t\t\t'}',\n\t\t\t\t''\n\t\t\t],\n\t\t\tnew Selection(1,1,1,1),\n\t\t\t[\n\t\t\t\teditOp(1, 1, 6, 1, [\n\t\t\t\t\t'package caddy',\n\t\t\t\t\t'',\n\t\t\t\t\t'import \"fmt\"',\n\t\t\t\t\t'',\n\t\t\t\t\t'func main() {',\n\t\t\t\t\t'\\tfmt.Println(\"Hello World! :)\")',\n\t\t\t\t\t'}',\n\t\t\t\t\t''\n\t\t\t\t])\n\t\t\t],\n\t\t\t[\n\t\t\t\t'package caddy',\n\t\t\t\t'',\n\t\t\t\t'import \"fmt\"',\n\t\t\t\t'',\n\t\t\t\t'func main() {',\n\t\t\t\t'\\tfmt.Println(\"Hello World! :)\")',\n\t\t\t\t'}',\n\t\t\t\t''\n\t\t\t],\n\t\t\tnew Selection(1,1,1,1)\n\t\t);\n\t});\n\n});"]}