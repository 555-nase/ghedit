{"version":3,"file":"vs/editor/contrib/goToDeclaration/common/goToDeclaration.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/editor/contrib/goToDeclaration/common/goToDeclaration.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;IAEhG,YAAY,CAAC;IASb,mCAA0C,KAAa,EAAE,QAAmB;QAE3E,IAAM,QAAQ,GAAG,KAAK,CAAC,qBAAqB,EAAE,CAAC;QAC/C,IAAM,QAAQ,GAAG,2BAAmB,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAEpD,cAAc;QACd,IAAM,QAAQ,GAAG,QAAQ,CAAC,GAAG,CAAC,UAAC,QAAQ,EAAE,GAAG;YAC3C,MAAM,CAAC,QAAQ,CAAC,eAAe,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,UAAA,MAAM;gBAC9D,MAAM,CAAC,MAAM,CAAC;YACf,CAAC,EAAE,UAAA,GAAG;gBACL,0BAAiB,CAAC,GAAG,CAAC,CAAC;YACxB,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,qBAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,UAAA,aAAa;YAChD,IAAI,MAAM,GAAiB,EAAE,CAAC;YAC9B,GAAG,CAAC,CAAmB,UAAa,EAAb,+BAAa,EAAb,2BAAa,EAAb,IAAa,CAAC;gBAAhC,IAAI,UAAU,sBAAA;gBAClB,EAAE,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;oBAC/B,MAAM,CAAC,IAAI,OAAX,MAAM,EAAS,UAAU,CAAC,CAAC;gBAC5B,CAAC;gBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;oBACvB,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;gBACzB,CAAC;aACD;YACD,MAAM,CAAC,MAAM,CAAC;QACf,CAAC,CAAC,CAAC;IACJ,CAAC;IAzBe,iCAAyB,4BAyBxC,CAAA;IAED,6CAAoB,CAAC,8BAA8B,CAAC,4BAA4B,EAAE,yBAAyB,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport {onUnexpectedError} from 'vs/base/common/errors';\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport {IModel, IPosition} from 'vs/editor/common/editorCommon';\nimport {CommonEditorRegistry} from 'vs/editor/common/editorCommonExtensions';\nimport {DeclarationRegistry} from 'vs/editor/common/modes';\nimport {IReference} from 'vs/editor/common/modes';\n\nexport function getDeclarationsAtPosition(model: IModel, position: IPosition): TPromise<IReference[]> {\n\n\tconst resource = model.getAssociatedResource();\n\tconst provider = DeclarationRegistry.ordered(model);\n\n\t// get results\n\tconst promises = provider.map((provider, idx) => {\n\t\treturn provider.findDeclaration(resource, position).then(result => {\n\t\t\treturn result;\n\t\t}, err => {\n\t\t\tonUnexpectedError(err);\n\t\t});\n\t});\n\n\treturn TPromise.join(promises).then(allReferences => {\n\t\tlet result: IReference[] = [];\n\t\tfor (let references of allReferences) {\n\t\t\tif (Array.isArray(references)) {\n\t\t\t\tresult.push(...references);\n\t\t\t} else if (references) {\n\t\t\t\tresult.push(references);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t});\n}\n\nCommonEditorRegistry.registerDefaultLanguageCommand('_executeDefinitionProvider', getDeclarationsAtPosition);"]}