{"version":3,"file":"vs/editor/test/common/services/languagesRegistry.test.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/editor/test/common/services/languagesRegistry.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport * as assert from 'assert';\nimport {LanguagesRegistry} from 'vs/editor/common/services/languagesRegistry';\n\nsuite('LanguagesRegistry', () => {\n\n\ttest('output mode does not have a name', () => {\n\t\tlet registry = new LanguagesRegistry(false);\n\n\t\tregistry._registerCompatModes([{\n\t\t\tid: 'outputModeId',\n\t\t\textensions: [],\n\t\t\taliases: [null],\n\t\t\tmimetypes: ['outputModeMimeType'],\n\t\t\tmoduleId: 'outputModeModuleId',\n\t\t\tctorName: 'outputModeCtorName'\n\t\t}]);\n\n\t\tassert.deepEqual(registry.getRegisteredLanguageNames(), []);\n\t});\n\n\ttest('mode with alias does have a name', () => {\n\t\tlet registry = new LanguagesRegistry(false);\n\n\t\tregistry._registerCompatModes([{\n\t\t\tid: 'modeId',\n\t\t\textensions: [],\n\t\t\taliases: ['ModeName'],\n\t\t\tmimetypes: ['bla'],\n\t\t\tmoduleId: 'bla',\n\t\t\tctorName: 'bla'\n\t\t}]);\n\n\t\tassert.deepEqual(registry.getRegisteredLanguageNames(), ['ModeName']);\n\t\tassert.deepEqual(registry.getLanguageName('modeId'), 'ModeName');\n\t});\n\n\ttest('mode without alias gets a name', () => {\n\t\tlet registry = new LanguagesRegistry(false);\n\n\t\tregistry._registerCompatModes([{\n\t\t\tid: 'modeId',\n\t\t\textensions: [],\n\t\t\taliases: [],\n\t\t\tmimetypes: ['bla'],\n\t\t\tmoduleId: 'bla',\n\t\t\tctorName: 'bla'\n\t\t}]);\n\n\t\tassert.deepEqual(registry.getRegisteredLanguageNames(), ['modeId']);\n\t\tassert.deepEqual(registry.getLanguageName('modeId'), 'modeId');\n\t});\n\n\ttest('bug #4360: f# not shown in status bar', () => {\n\t\tlet registry = new LanguagesRegistry(false);\n\n\t\tregistry._registerCompatModes([{\n\t\t\tid: 'modeId',\n\t\t\textensions: ['.ext1'],\n\t\t\taliases: ['ModeName'],\n\t\t\tmimetypes: ['bla'],\n\t\t\tmoduleId: 'bla',\n\t\t\tctorName: 'bla'\n\t\t}]);\n\n\t\tregistry._registerCompatModes([{\n\t\t\tid: 'modeId',\n\t\t\textensions: ['.ext2'],\n\t\t\taliases: [],\n\t\t\tmimetypes: ['bla'],\n\t\t\tmoduleId: 'bla',\n\t\t\tctorName: 'bla'\n\t\t}]);\n\n\t\tassert.deepEqual(registry.getRegisteredLanguageNames(), ['ModeName']);\n\t\tassert.deepEqual(registry.getLanguageName('modeId'), 'ModeName');\n\t});\n\n});"]}