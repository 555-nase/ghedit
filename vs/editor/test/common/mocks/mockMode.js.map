{"version":3,"file":"vs/editor/test/common/mocks/mockMode.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/editor/test/common/mocks/mockMode.ts"],"names":[],"mappings":";;;;;;IAAA;;;oGAGgG;IAChG,YAAY,CAAC;IAMb;QAIC,kBAAY,EAAsB;YAAtB,kBAAsB,GAAtB,eAAsB;YACjC,IAAI,CAAC,GAAG,GAAG,EAAE,CAAC;QACf,CAAC;QAEM,wBAAK,GAAZ;YACC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC;QACjB,CAAC;QAEM,mCAAgB,GAAvB;YACC,MAAM,CAAC,IAAI,CAAC;QACb,CAAC;QACF,eAAC;IAAD,CAAC,AAfD,IAeC;IAfY,gBAAQ,WAepB,CAAA;IAED;QAAgD,8CAAa;QAI5D,oCAAY,IAAU,EAAE,SAAgB;YACvC,kBAAM,IAAI,CAAC,CAAC;YACZ,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;QAC7B,CAAC;QAEM,8CAAS,GAAhB;YACC,MAAM,CAAC,IAAI,CAAC;QACb,CAAC;QAEM,2CAAM,GAAb,UAAc,KAAY;YACzB,MAAM,CAAC,IAAI,CAAC;QACb,CAAC;QAEM,6CAAQ,GAAf,UAAgB,MAAc;YAC7B,MAAM,CAAC,YAAY,EAAE,CAAC;YACtB,MAAM,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC,UAAU,EAAE,CAAC;QAClC,CAAC;QACF,iCAAC;IAAD,CAAC,AArBD,CAAgD,6BAAa,GAqB5D;IArBY,kCAA0B,6BAqBtC,CAAA;IAED;QAAwC,sCAAQ;QAI/C,4BAAY,EAAS,EAAE,SAAgB;YAJxC,iBAWC;YANC,kBAAM,EAAE,CAAC,CAAC;YAEV,IAAI,CAAC,mBAAmB,GAAG,IAAI,yCAAmB,CAAC,IAAI,EAAE;gBACxD,eAAe,EAAE,cAAM,OAAA,IAAI,0BAA0B,CAAC,KAAI,EAAE,SAAS,CAAC,EAA/C,CAA+C;aACtE,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;QAClB,CAAC;QACF,yBAAC;IAAD,CAAC,AAXD,CAAwC,QAAQ,GAW/C;IAXY,0BAAkB,qBAW9B,CAAA","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {IMode, IState, IStream, ITokenizationResult, ITokenizationSupport} from 'vs/editor/common/modes';\nimport {AbstractState} from 'vs/editor/common/modes/abstractState';\nimport {TokenizationSupport} from 'vs/editor/common/modes/supports/tokenizationSupport';\n\nexport class MockMode implements IMode {\n\n\tprivate _id:string;\n\n\tconstructor(id:string = 'mockMode') {\n\t\tthis._id = id;\n\t}\n\n\tpublic getId():string {\n\t\treturn this._id;\n\t}\n\n\tpublic toSimplifiedMode(): IMode {\n\t\treturn this;\n\t}\n}\n\nexport class StateForMockTokenizingMode extends AbstractState {\n\n\tprivate _tokenType: string;\n\n\tconstructor(mode:IMode, tokenType:string) {\n\t\tsuper(mode);\n\t\tthis._tokenType = tokenType;\n\t}\n\n\tpublic makeClone():StateForMockTokenizingMode {\n\t\treturn this;\n\t}\n\n\tpublic equals(other:IState):boolean {\n\t\treturn true;\n\t}\n\n\tpublic tokenize(stream:IStream):ITokenizationResult {\n\t\tstream.advanceToEOS();\n\t\treturn { type: this._tokenType };\n\t}\n}\n\nexport class MockTokenizingMode extends MockMode {\n\n\tpublic tokenizationSupport: ITokenizationSupport;\n\n\tconstructor(id:string, tokenType:string) {\n\t\tsuper(id);\n\n\t\tthis.tokenizationSupport = new TokenizationSupport(this, {\n\t\t\tgetInitialState: () => new StateForMockTokenizingMode(this, tokenType)\n\t\t}, false, false);\n\t}\n}\n"]}