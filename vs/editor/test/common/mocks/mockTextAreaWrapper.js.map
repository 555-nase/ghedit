{"version":3,"file":"vs/editor/test/common/mocks/mockTextAreaWrapper.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/editor/test/common/mocks/mockTextAreaWrapper.ts"],"names":[],"mappings":";;;;;;IAAA;;;oGAGgG;IAChG,YAAY,CAAC;IAMb;QAAyC,uCAAU;QAkClD;YACC,iBAAO,CAAC;YAjCD,eAAU,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,eAAO,EAAyB,CAAC,CAAC;YACnE,cAAS,GAAiC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC;YAE/D,aAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,eAAO,EAAyB,CAAC,CAAC;YACjE,YAAO,GAAiC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC;YAE3D,gBAAW,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,eAAO,EAAyB,CAAC,CAAC;YACpE,eAAU,GAAiC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;YAEjE,wBAAmB,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,eAAO,EAAQ,CAAC,CAAC;YAC3D,uBAAkB,GAAgB,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC;YAEhE,sBAAiB,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,eAAO,EAAQ,CAAC,CAAC;YACzD,qBAAgB,GAAgB,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC;YAE5D,aAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,eAAO,EAAQ,CAAC,CAAC;YAChD,YAAO,GAAgB,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC;YAE1C,WAAM,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,eAAO,EAAmB,CAAC,CAAC;YACzD,UAAK,GAA2B,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC;YAEjD,YAAO,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,eAAO,EAAmB,CAAC,CAAC;YAC1D,WAAM,GAA2B,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC;YAEnD,aAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,eAAO,EAAmB,CAAC,CAAC;YAC3D,YAAO,GAA2B,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC;YAS5D,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;YACjB,IAAI,CAAC,eAAe,GAAG,CAAC,CAAC;YACzB,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC;YACvB,IAAI,CAAC,kBAAkB,GAAG,KAAK,CAAC;QACjC,CAAC;QAEM,sCAAQ,GAAf;YACC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;QACpB,CAAC;QAEM,sCAAQ,GAAf,UAAgB,MAAa,EAAE,KAAY;YAC1C,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;YACpB,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;YAC1C,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;QACzC,CAAC;QAEM,+CAAiB,GAAxB;YACC,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC;QAC7B,CAAC;QAEM,6CAAe,GAAtB;YACC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC;QAC3B,CAAC;QAEM,+CAAiB,GAAxB,UAAyB,cAAqB,EAAE,YAAmB;YAClE,EAAE,CAAC,CAAC,cAAc,GAAG,CAAC,CAAC,CAAC,CAAC;gBACxB,cAAc,GAAG,CAAC,CAAC;YACpB,CAAC;YACD,EAAE,CAAC,CAAC,cAAc,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;gBACzC,cAAc,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;YACrC,CAAC;YACD,EAAE,CAAC,CAAC,YAAY,GAAG,CAAC,CAAC,CAAC,CAAC;gBACtB,YAAY,GAAG,CAAC,CAAC;YAClB,CAAC;YACD,EAAE,CAAC,CAAC,YAAY,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;gBACvC,YAAY,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;YACnC,CAAC;YACD,IAAI,CAAC,eAAe,GAAG,cAAc,CAAC;YACtC,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;QACnC,CAAC;QAEM,+CAAiB,GAAxB;YACC,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC;QAChC,CAAC;QACF,0BAAC;IAAD,CAAC,AAhFD,CAAyC,sBAAU,GAgFlD;IAhFY,2BAAmB,sBAgF/B,CAAA","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport Event, {Emitter} from 'vs/base/common/event';\nimport {Disposable} from 'vs/base/common/lifecycle';\nimport {IClipboardEvent, IKeyboardEventWrapper, ITextAreaWrapper} from 'vs/editor/common/controller/textAreaState';\n\nexport class MockTextAreaWrapper extends Disposable implements ITextAreaWrapper {\n\n\tprivate _onKeyDown = this._register(new Emitter<IKeyboardEventWrapper>());\n\tpublic onKeyDown: Event<IKeyboardEventWrapper> = this._onKeyDown.event;\n\n\tprivate _onKeyUp = this._register(new Emitter<IKeyboardEventWrapper>());\n\tpublic onKeyUp: Event<IKeyboardEventWrapper> = this._onKeyUp.event;\n\n\tprivate _onKeyPress = this._register(new Emitter<IKeyboardEventWrapper>());\n\tpublic onKeyPress: Event<IKeyboardEventWrapper> = this._onKeyPress.event;\n\n\tprivate _onCompositionStart = this._register(new Emitter<void>());\n\tpublic onCompositionStart: Event<void> = this._onCompositionStart.event;\n\n\tprivate _onCompositionEnd = this._register(new Emitter<void>());\n\tpublic onCompositionEnd: Event<void> = this._onCompositionEnd.event;\n\n\tprivate _onInput = this._register(new Emitter<void>());\n\tpublic onInput: Event<void> = this._onInput.event;\n\n\tprivate _onCut = this._register(new Emitter<IClipboardEvent>());\n\tpublic onCut: Event<IClipboardEvent> = this._onCut.event;\n\n\tprivate _onCopy = this._register(new Emitter<IClipboardEvent>());\n\tpublic onCopy: Event<IClipboardEvent> = this._onCopy.event;\n\n\tprivate _onPaste = this._register(new Emitter<IClipboardEvent>());\n\tpublic onPaste: Event<IClipboardEvent> = this._onPaste.event;\n\n\tpublic _value: string;\n\tpublic _selectionStart: number;\n\tpublic _selectionEnd: number;\n\tpublic _isInOverwriteMode: boolean;\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis._value = '';\n\t\tthis._selectionStart = 0;\n\t\tthis._selectionEnd = 0;\n\t\tthis._isInOverwriteMode = false;\n\t}\n\n\tpublic getValue(): string {\n\t\treturn this._value;\n\t}\n\n\tpublic setValue(reason:string, value:string): void {\n\t\tthis._value = value;\n\t\tthis._selectionStart = this._value.length;\n\t\tthis._selectionEnd = this._value.length;\n\t}\n\n\tpublic getSelectionStart(): number {\n\t\treturn this._selectionStart;\n\t}\n\n\tpublic getSelectionEnd(): number {\n\t\treturn this._selectionEnd;\n\t}\n\n\tpublic setSelectionRange(selectionStart:number, selectionEnd:number): void {\n\t\tif (selectionStart < 0) {\n\t\t\tselectionStart = 0;\n\t\t}\n\t\tif (selectionStart > this._value.length) {\n\t\t\tselectionStart = this._value.length;\n\t\t}\n\t\tif (selectionEnd < 0) {\n\t\t\tselectionEnd = 0;\n\t\t}\n\t\tif (selectionEnd > this._value.length) {\n\t\t\tselectionEnd = this._value.length;\n\t\t}\n\t\tthis._selectionStart = selectionStart;\n\t\tthis._selectionEnd = selectionEnd;\n\t}\n\n\tpublic isInOverwriteMode(): boolean {\n\t\treturn this._isInOverwriteMode;\n\t}\n}\n"]}