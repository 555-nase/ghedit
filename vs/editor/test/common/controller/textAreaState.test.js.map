{"version":3,"file":"vs/editor/test/common/controller/textAreaState.test.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/editor/test/common/controller/textAreaState.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport * as assert from 'assert';\nimport {IENarratorTextAreaState, ISimpleModel, TextAreaState} from 'vs/editor/common/controller/textAreaState';\nimport {Position} from 'vs/editor/common/core/position';\nimport {Range} from 'vs/editor/common/core/range';\nimport {EndOfLinePreference, IEditorPosition, IRange} from 'vs/editor/common/editorCommon';\nimport {MockTextAreaWrapper} from 'vs/editor/test/common/mocks/mockTextAreaWrapper';\n\nsuite('TextAreaState', () => {\n\n\tfunction assertTextAreaState(actual:TextAreaState, value:string, selectionStart:number, selectionEnd:number, isInOverwriteMode:boolean, selectionToken:number): void {\n\t\tlet desired = new IENarratorTextAreaState(null, value, selectionStart, selectionEnd, isInOverwriteMode, selectionToken);\n\t\tassert.ok(desired.equals(actual), desired.toString() + ' == ' + actual.toString());\n\t}\n\n\ttest('fromTextArea', () => {\n\t\tlet textArea = new MockTextAreaWrapper();\n\t\ttextArea._value = 'Hello world!';\n\t\ttextArea._selectionStart = 1;\n\t\ttextArea._selectionEnd = 12;\n\t\ttextArea._isInOverwriteMode = false;\n\t\tlet actual = IENarratorTextAreaState.EMPTY.fromTextArea(textArea);\n\n\t\tassertTextAreaState(actual, 'Hello world!', 1, 12, false, 0);\n\t\tassert.equal(actual.getValue(), 'Hello world!');\n\t\tassert.equal(actual.getSelectionStart(), 1);\n\n\t\tactual = actual.resetSelection();\n\t\tassertTextAreaState(actual, 'Hello world!', 12, 12, false, 0);\n\n\t\ttextArea.dispose();\n\t});\n\n\ttest('applyToTextArea', () => {\n\t\tlet textArea = new MockTextAreaWrapper();\n\t\ttextArea._value = 'Hello world!';\n\t\ttextArea._selectionStart = 1;\n\t\ttextArea._selectionEnd = 12;\n\t\ttextArea._isInOverwriteMode = false;\n\n\t\tlet state = new IENarratorTextAreaState(null, 'Hi world!', 2, 2, false, 0);\n\t\tstate.applyToTextArea('test', textArea, false);\n\n\t\tassert.equal(textArea._value, 'Hi world!');\n\t\tassert.equal(textArea._selectionStart, 9);\n\t\tassert.equal(textArea._selectionEnd, 9);\n\n\t\tstate = new IENarratorTextAreaState(null, 'Hi world!', 3, 3, false, 0);\n\t\tstate.applyToTextArea('test', textArea, false);\n\n\t\tassert.equal(textArea._value, 'Hi world!');\n\t\tassert.equal(textArea._selectionStart, 9);\n\t\tassert.equal(textArea._selectionEnd, 9);\n\n\t\tstate = new IENarratorTextAreaState(null, 'Hi world!', 0, 2, false, 0);\n\t\tstate.applyToTextArea('test', textArea, true);\n\n\t\tassert.equal(textArea._value, 'Hi world!');\n\t\tassert.equal(textArea._selectionStart, 0);\n\t\tassert.equal(textArea._selectionEnd, 2);\n\n\t\ttextArea.dispose();\n\t});\n\n\tfunction testDeduceInput(prevState:TextAreaState, value:string, selectionStart:number, selectionEnd:number, isInOverwriteMode: boolean, expected:string, expectedCharReplaceCnt: number): void {\n\t\tlet textArea = new MockTextAreaWrapper();\n\t\ttextArea._value = value;\n\t\ttextArea._selectionStart = selectionStart;\n\t\ttextArea._selectionEnd = selectionEnd;\n\t\ttextArea._isInOverwriteMode = isInOverwriteMode;\n\n\t\tlet newState = (prevState || IENarratorTextAreaState.EMPTY).fromTextArea(textArea);\n\n\t\tlet actual = newState.deduceInput();\n\n\t\tassert.equal(actual.text, expected);\n\t\tassert.equal(actual.replaceCharCnt, expectedCharReplaceCnt);\n\n\t\ttextArea.dispose();\n\t}\n\n\ttest('deduceInput - Japanese typing sennsei and accepting', () => {\n\t\t// manual test:\n\t\t// - choose keyboard layout: Japanese -> Hiragama\n\t\t// - type sennsei\n\t\t// - accept with Enter\n\t\t// - expected: せんせい\n\n\t\t// s\n\t\t// PREVIOUS STATE: [ <>, selectionStart: 0, selectionEnd: 0, isInOverwriteMode: false, selectionToken: 0]\n\t\t// CURRENT STATE: [ <ｓ>, selectionStart: 0, selectionEnd: 1, isInOverwriteMode: false, selectionToken: 0]\n\t\ttestDeduceInput(\n\t\t\tnew IENarratorTextAreaState(null, '', 0, 0, false, 0),\n\t\t\t'ｓ',\n\t\t\t0, 1, false,\n\t\t\t'ｓ', 0\n\t\t);\n\n\t\t// e\n\t\t// PREVIOUS STATE: [ <ｓ>, selectionStart: 0, selectionEnd: 1, isInOverwriteMode: false, selectionToken: 0]\n\t\t// CURRENT STATE: [ <せ>, selectionStart: 0, selectionEnd: 1, isInOverwriteMode: false, selectionToken: 0]\n\t\ttestDeduceInput(\n\t\t\tnew IENarratorTextAreaState(null, 'ｓ', 0, 1, false, 0),\n\t\t\t'せ',\n\t\t\t0, 1, false,\n\t\t\t'せ', 1\n\t\t);\n\n\t\t// n\n\t\t// PREVIOUS STATE: [ <せ>, selectionStart: 0, selectionEnd: 1, isInOverwriteMode: false, selectionToken: 0]\n\t\t// CURRENT STATE: [ <せｎ>, selectionStart: 0, selectionEnd: 2, isInOverwriteMode: false, selectionToken: 0]\n\t\ttestDeduceInput(\n\t\t\tnew IENarratorTextAreaState(null, 'せ', 0, 1, false, 0),\n\t\t\t'せｎ',\n\t\t\t0, 2, false,\n\t\t\t'せｎ', 1\n\t\t);\n\n\t\t// n\n\t\t// PREVIOUS STATE: [ <せｎ>, selectionStart: 0, selectionEnd: 2, isInOverwriteMode: false, selectionToken: 0]\n\t\t// CURRENT STATE: [ <せん>, selectionStart: 0, selectionEnd: 2, isInOverwriteMode: false, selectionToken: 0]\n\t\ttestDeduceInput(\n\t\t\tnew IENarratorTextAreaState(null, 'せｎ', 0, 2, false, 0),\n\t\t\t'せん',\n\t\t\t0, 2, false,\n\t\t\t'せん', 2\n\t\t);\n\n\t\t// s\n\t\t// PREVIOUS STATE: [ <せん>, selectionStart: 0, selectionEnd: 2, isInOverwriteMode: false, selectionToken: 0]\n\t\t// CURRENT STATE: [ <せんｓ>, selectionStart: 0, selectionEnd: 3, isInOverwriteMode: false, selectionToken: 0]\n\t\ttestDeduceInput(\n\t\t\tnew IENarratorTextAreaState(null, 'せん', 0, 2, false, 0),\n\t\t\t'せんｓ',\n\t\t\t0, 3, false,\n\t\t\t'せんｓ', 2\n\t\t);\n\n\t\t// e\n\t\t// PREVIOUS STATE: [ <せんｓ>, selectionStart: 0, selectionEnd: 3, isInOverwriteMode: false, selectionToken: 0]\n\t\t// CURRENT STATE: [ <せんせ>, selectionStart: 0, selectionEnd: 3, isInOverwriteMode: false, selectionToken: 0]\n\t\ttestDeduceInput(\n\t\t\tnew IENarratorTextAreaState(null, 'せんｓ', 0, 3, false, 0),\n\t\t\t'せんせ',\n\t\t\t0, 3, false,\n\t\t\t'せんせ', 3\n\t\t);\n\n\t\t// no-op? [was recorded]\n\t\t// PREVIOUS STATE: [ <せんせ>, selectionStart: 0, selectionEnd: 3, isInOverwriteMode: false, selectionToken: 0]\n\t\t// CURRENT STATE: [ <せんせ>, selectionStart: 0, selectionEnd: 3, isInOverwriteMode: false, selectionToken: 0]\n\t\ttestDeduceInput(\n\t\t\tnew IENarratorTextAreaState(null, 'せんせ', 0, 3, false, 0),\n\t\t\t'せんせ',\n\t\t\t0, 3, false,\n\t\t\t'せんせ', 3\n\t\t);\n\n\t\t// i\n\t\t// PREVIOUS STATE: [ <せんせ>, selectionStart: 0, selectionEnd: 3, isInOverwriteMode: false, selectionToken: 0]\n\t\t// CURRENT STATE: [ <せんせい>, selectionStart: 0, selectionEnd: 4, isInOverwriteMode: false, selectionToken: 0]\n\t\ttestDeduceInput(\n\t\t\tnew IENarratorTextAreaState(null, 'せんせ', 0, 3, false, 0),\n\t\t\t'せんせい',\n\t\t\t0, 4, false,\n\t\t\t'せんせい', 3\n\t\t);\n\n\t\t// ENTER (accept)\n\t\t// PREVIOUS STATE: [ <せんせい>, selectionStart: 0, selectionEnd: 4, isInOverwriteMode: false, selectionToken: 0]\n\t\t// CURRENT STATE: [ <せんせい>, selectionStart: 4, selectionEnd: 4, isInOverwriteMode: false, selectionToken: 0]\n\t\ttestDeduceInput(\n\t\t\tnew IENarratorTextAreaState(null, 'せんせい', 0, 4, false, 0),\n\t\t\t'せんせい',\n\t\t\t4, 4, false,\n\t\t\t'', 0\n\t\t);\n\t});\n\n\ttest('deduceInput - Japanese typing sennsei and choosing different suggestion', () => {\n\t\t// manual test:\n\t\t// - choose keyboard layout: Japanese -> Hiragama\n\t\t// - type sennsei\n\t\t// - arrow down (choose next suggestion)\n\t\t// - accept with Enter\n\t\t// - expected: せんせい\n\n\t\t// sennsei\n\t\t// PREVIOUS STATE: [ <せんせい>, selectionStart: 0, selectionEnd: 4, isInOverwriteMode: false, selectionToken: 0]\n\t\t// CURRENT STATE: [ <せんせい>, selectionStart: 0, selectionEnd: 4, isInOverwriteMode: false, selectionToken: 0]\n\t\ttestDeduceInput(\n\t\t\tnew IENarratorTextAreaState(null, 'せんせい', 0, 4, false, 0),\n\t\t\t'せんせい',\n\t\t\t0, 4, false,\n\t\t\t'せんせい', 4\n\t\t);\n\n\t\t// arrow down\n\t\t// CURRENT STATE: [ <先生>, selectionStart: 0, selectionEnd: 2, isInOverwriteMode: false, selectionToken: 0]\n\t\t// PREVIOUS STATE: [ <せんせい>, selectionStart: 0, selectionEnd: 4, isInOverwriteMode: false, selectionToken: 0]\n\t\ttestDeduceInput(\n\t\t\tnew IENarratorTextAreaState(null, 'せんせい', 0, 4, false, 0),\n\t\t\t'先生',\n\t\t\t0, 2, false,\n\t\t\t'先生', 4\n\t\t);\n\n\t\t// ENTER (accept)\n\t\t// PREVIOUS STATE: [ <先生>, selectionStart: 0, selectionEnd: 2, isInOverwriteMode: false, selectionToken: 0]\n\t\t// CURRENT STATE: [ <先生>, selectionStart: 2, selectionEnd: 2, isInOverwriteMode: false, selectionToken: 0]\n\t\ttestDeduceInput(\n\t\t\tnew IENarratorTextAreaState(null, '先生', 0, 2, false, 0),\n\t\t\t'先生',\n\t\t\t2, 2, false,\n\t\t\t'', 0\n\t\t);\n\t});\n\n\ttest('extractNewText - no previous state with selection', () => {\n\t\ttestDeduceInput(\n\t\t\tnull,\n\t\t\t'a',\n\t\t\t0, 1, false,\n\t\t\t'a', 0\n\t\t);\n\t});\n\n\ttest('issue #2586: Replacing selected end-of-line with newline locks up the document', () => {\n\t\ttestDeduceInput(\n\t\t\tnew IENarratorTextAreaState(null, ']\\n', 1, 2, false, 0),\n\t\t\t']\\n',\n\t\t\t2, 2, false,\n\t\t\t'\\n', 0\n\t\t);\n\t});\n\n\ttest('extractNewText - no previous state without selection', () => {\n\t\ttestDeduceInput(\n\t\t\tnull,\n\t\t\t'a',\n\t\t\t1, 1, false,\n\t\t\t'a', 0\n\t\t);\n\t});\n\n\ttest('extractNewText - typing does not cause a selection', () => {\n\t\ttestDeduceInput(\n\t\t\tnew IENarratorTextAreaState(null, '', 0, 0, false, 0),\n\t\t\t'a',\n\t\t\t0, 1, false,\n\t\t\t'a', 0\n\t\t);\n\t});\n\n\ttest('extractNewText - had the textarea empty', () => {\n\t\ttestDeduceInput(\n\t\t\tnew IENarratorTextAreaState(null, '', 0, 0, false, 0),\n\t\t\t'a',\n\t\t\t1, 1, false,\n\t\t\t'a', 0\n\t\t);\n\t});\n\n\ttest('extractNewText - had the entire line selected', () => {\n\t\ttestDeduceInput(\n\t\t\tnew IENarratorTextAreaState(null, 'Hello world!', 0, 12, false, 0),\n\t\t\t'H',\n\t\t\t1, 1, false,\n\t\t\t'H', 0\n\t\t);\n\t});\n\n\ttest('extractNewText - had previous text 1', () => {\n\t\ttestDeduceInput(\n\t\t\tnew IENarratorTextAreaState(null, 'Hello world!', 12, 12, false, 0),\n\t\t\t'Hello world!a',\n\t\t\t13, 13, false,\n\t\t\t'a', 0\n\t\t);\n\t});\n\n\ttest('extractNewText - had previous text 2', () => {\n\t\ttestDeduceInput(\n\t\t\tnew IENarratorTextAreaState(null, 'Hello world!', 0, 0, false, 0),\n\t\t\t'aHello world!',\n\t\t\t1, 1, false,\n\t\t\t'a', 0\n\t\t);\n\t});\n\n\ttest('extractNewText - had previous text 3', () => {\n\t\ttestDeduceInput(\n\t\t\tnew IENarratorTextAreaState(null, 'Hello world!', 6, 11, false, 0),\n\t\t\t'Hello other!',\n\t\t\t11, 11, false,\n\t\t\t'other', 0\n\t\t);\n\t});\n\n\ttest('extractNewText - IME', () => {\n\t\ttestDeduceInput(\n\t\t\tnew IENarratorTextAreaState(null, '', 0, 0, false, 0),\n\t\t\t'これは',\n\t\t\t3, 3, false,\n\t\t\t'これは', 0\n\t\t);\n\t});\n\n\ttest('extractNewText - isInOverwriteMode', () => {\n\t\ttestDeduceInput(\n\t\t\tnew IENarratorTextAreaState(null, 'Hello world!', 0, 0, false, 0),\n\t\t\t'Aello world!',\n\t\t\t1, 1, true,\n\t\t\t'A', 0\n\t\t);\n\t});\n\n\ttest('extractMacReplacedText - does nothing if there is selection', () => {\n\t\ttestDeduceInput(\n\t\t\tnew IENarratorTextAreaState(null, 'Hello world!', 5, 5, false, 0),\n\t\t\t'Hellö world!',\n\t\t\t4, 5, false,\n\t\t\t'ö', 0\n\t\t);\n\t});\n\n\ttest('extractMacReplacedText - does nothing if there is more than one extra char', () => {\n\t\ttestDeduceInput(\n\t\t\tnew IENarratorTextAreaState(null, 'Hello world!', 5, 5, false, 0),\n\t\t\t'Hellöö world!',\n\t\t\t5, 5, false,\n\t\t\t'öö', 1\n\t\t);\n\t});\n\n\ttest('extractMacReplacedText - does nothing if there is more than one changed char', () => {\n\t\ttestDeduceInput(\n\t\t\tnew IENarratorTextAreaState(null, 'Hello world!', 5, 5, false, 0),\n\t\t\t'Helöö world!',\n\t\t\t5, 5, false,\n\t\t\t'öö', 2\n\t\t);\n\t});\n\n\ttest('extractMacReplacedText', () => {\n\t\ttestDeduceInput(\n\t\t\tnew IENarratorTextAreaState(null, 'Hello world!', 5, 5, false, 0),\n\t\t\t'Hellö world!',\n\t\t\t5, 5, false,\n\t\t\t'ö', 1\n\t\t);\n\t});\n\n\tfunction testFromEditorSelectionAndPreviousState(eol:string, lines:string[], range:Range, prevSelectionToken:number): TextAreaState {\n\t\tlet model = new SimpleModel(lines, eol);\n\t\tlet previousState = new IENarratorTextAreaState(null, '', 0, 0, false, prevSelectionToken);\n\t\treturn previousState.fromEditorSelection(model, range);\n\t}\n\n\ttest('fromEditorSelectionAndPreviousState - no selection on first line', () => {\n\t\tlet actual = testFromEditorSelectionAndPreviousState('\\n', [\n\t\t\t'Just a line',\n\t\t\t'And another line'\n\t\t], new Range(1,1,1,1), 0);\n\t\tassertTextAreaState(actual, 'Just a line', 0, 11, false, 1);\n\t});\n\n\ttest('fromEditorSelectionAndPreviousState - no selection on second line', () => {\n\t\tlet actual = testFromEditorSelectionAndPreviousState('\\n', [\n\t\t\t'Just a line',\n\t\t\t'And another line',\n\t\t\t'And yet another line',\n\t\t], new Range(2,1,2,1), 0);\n\t\tassertTextAreaState(actual, 'And another line', 0, 16, false, 2);\n\t});\n\n\ttest('fromEditorSelectionAndPreviousState - on a long line with selectionToken mismatch', () => {\n\t\tlet aLongLine = 'a';\n\t\tfor (let i = 0; i < 10; i++) {\n\t\t\taLongLine = aLongLine + aLongLine;\n\t\t}\n\t\tlet actual = testFromEditorSelectionAndPreviousState('\\n', [\n\t\t\t'Just a line',\n\t\t\taLongLine,\n\t\t\t'And yet another line',\n\t\t], new Range(2,500,2,500), 0);\n\t\tassertTextAreaState(actual, 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa…aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 0, 201, false, 2);\n\t});\n\n\ttest('fromEditorSelectionAndPreviousState - on a long line with same selectionToken', () => {\n\t\tlet aLongLine = 'a';\n\t\tfor (let i = 0; i < 10; i++) {\n\t\t\taLongLine = aLongLine + aLongLine;\n\t\t}\n\t\tlet actual = testFromEditorSelectionAndPreviousState('\\n', [\n\t\t\t'Just a line',\n\t\t\taLongLine,\n\t\t\t'And yet another line',\n\t\t], new Range(2,500,2,500), 2);\n\t\tassertTextAreaState(actual, 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 100, 100, false, 2);\n\t});\n});\n\nclass SimpleModel implements ISimpleModel {\n\n\tprivate _lines: string[];\n\tprivate _eol: string;\n\n\tconstructor(lines:string[], eol:string) {\n\t\tthis._lines = lines;\n\t\tthis._eol = eol;\n\t}\n\n\tpublic getLineMaxColumn(lineNumber:number): number {\n\t\treturn this._lines[lineNumber - 1].length + 1;\n\t}\n\n\tprivate _getEndOfLine(eol:EndOfLinePreference): string {\n\t\tswitch (eol) {\n\t\t\tcase EndOfLinePreference.LF:\n\t\t\t\treturn '\\n';\n\t\t\tcase EndOfLinePreference.CRLF:\n\t\t\t\treturn '\\r\\n';\n\t\t\tcase EndOfLinePreference.TextDefined:\n\t\t\t\treturn this._eol;\n\t\t}\n\t\tthrow new Error('Unknown EOL preference');\n\t}\n\n\tpublic getEOL(): string {\n\t\treturn this._eol;\n\t}\n\n\tpublic getValueInRange(range:IRange, eol:EndOfLinePreference): string {\n\t\tif (Range.isEmpty(range)) {\n\t\t\treturn '';\n\t\t}\n\n\t\tif (range.startLineNumber === range.endLineNumber) {\n\t\t\treturn this._lines[range.startLineNumber - 1].substring(range.startColumn - 1, range.endColumn - 1);\n\t\t}\n\n\t\tvar lineEnding = this._getEndOfLine(eol),\n\t\t\tstartLineIndex = range.startLineNumber - 1,\n\t\t\tendLineIndex = range.endLineNumber - 1,\n\t\t\tresultLines:string[] = [];\n\n\t\tresultLines.push(this._lines[startLineIndex].substring(range.startColumn - 1));\n\t\tfor (var i = startLineIndex + 1; i < endLineIndex; i++) {\n\t\t\tresultLines.push(this._lines[i]);\n\t\t}\n\t\tresultLines.push(this._lines[endLineIndex].substring(0, range.endColumn - 1));\n\n\t\treturn resultLines.join(lineEnding);\n\t}\n\n\tpublic getModelLineContent(lineNumber:number): string {\n\t\treturn this._lines[lineNumber - 1];\n\t}\n\n\tpublic getLineCount(): number {\n\t\treturn this._lines.length;\n\t}\n\n\tpublic convertViewPositionToModelPosition(viewLineNumber:number, viewColumn:number): IEditorPosition {\n\t\treturn new Position(viewLineNumber, viewColumn);\n\t}\n}\n"]}