{"version":3,"file":"vs/editor/test/common/modes/textToHtmlTokenizer.test.js","sourceRoot":"file:///Users/darrin/src/vscode/src","sources":["vs/editor/test/common/modes/textToHtmlTokenizer.test.ts"],"names":[],"mappings":";;;;;;IAAA;;;oGAGgG;IAChG,YAAY,CAAC;IASb,KAAK,CAAC,oCAAoC,EAAE;QAC3C,IAAI,CAAC,qBAAqB,EAAE;YAC3B,IAAI,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;YACtB,IAAI,MAAM,GAAG,2CAAqB,CAAC,gBAAgB,EAAE,IAAI,CAAC,CAAC;YAE3D,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;YAEpB,IAAI,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC;YAC/B,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YAEjC,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;YACpC,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;YAC7C,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;YAE1C,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;YACtC,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,YAAY,CAAC,CAAC;YAClD,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;YAE1C,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;YACrC,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;YAC7C,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;YAE1C,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;YACtC,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,YAAY,CAAC,CAAC;YAClD,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;YAE1C,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;YACtC,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;YAC7C,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;YAE1C,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;YACrC,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,YAAY,CAAC,CAAC;YAClD,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;YAE1C,MAAM,GAAG,2CAAqB,CAAC,gCAAgC,EAAE,IAAI,CAAC,CAAC;YAEvE,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;YAEpB,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC;YAC3B,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,EAAE,EAAE,GAAG,CAAC,CAAC,2BAA2B,CAAC,CAAC;YAElE,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;QACzC,CAAC,CAAC,CAAC;IAEJ,CAAC,CAAC,CAAC;IAEH;QAAoB,yBAAa;QAEhC,eAAY,IAAU;YACrB,kBAAM,IAAI,CAAC,CAAC;QACb,CAAC;QAEM,yBAAS,GAAhB;YACC,MAAM,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;QAClC,CAAC;QAEM,wBAAQ,GAAf,UAAgB,MAAc;YAC7B,MAAM,CAAC,EAAE,IAAI,EAAE,MAAM,CAAC,IAAI,EAAE,KAAK,GAAG,GAAG,EAAE,GAAG,MAAM,EAAE,CAAC;QACtD,CAAC;QACF,YAAC;IAAD,CAAC,AAbD,CAAoB,6BAAa,GAahC;IAED;QAAmB,wBAAQ;QAI1B;YAJD,iBAUC;YALC,iBAAO,CAAC;YACR,IAAI,CAAC,mBAAmB,GAAG,IAAI,yCAAmB,CAAC,IAAI,EAAE;gBACxD,eAAe,EAAE,cAAM,OAAA,IAAI,KAAK,CAAC,KAAI,CAAC,EAAf,CAAe;aACtC,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;QAClB,CAAC;QACF,WAAC;IAAD,CAAC,AAVD,CAAmB,mBAAQ,GAU1B","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport * as assert from 'assert';\nimport {IMode, IStream, ITokenizationResult, ITokenizationSupport} from 'vs/editor/common/modes';\nimport {AbstractState} from 'vs/editor/common/modes/abstractState';\nimport {TokenizationSupport} from 'vs/editor/common/modes/supports/tokenizationSupport';\nimport {tokenizeToHtmlContent} from 'vs/editor/common/modes/textToHtmlTokenizer';\nimport {MockMode} from 'vs/editor/test/common/mocks/mockMode';\n\nsuite('Editor Modes - textToHtmlTokenizer', () => {\n\ttest('TextToHtmlTokenizer', () => {\n\t\tvar mode = new Mode();\n\t\tvar result = tokenizeToHtmlContent('.abc..def...gh', mode);\n\n\t\tassert.ok(!!result);\n\n\t\tvar children = result.children;\n\t\tassert.equal(children.length, 6);\n\n\t\tassert.equal(children[0].text, '.');\n\t\tassert.equal(children[0].className, 'token');\n\t\tassert.equal(children[0].tagName, 'span');\n\n\t\tassert.equal(children[1].text, 'abc');\n\t\tassert.equal(children[1].className, 'token text');\n\t\tassert.equal(children[1].tagName, 'span');\n\n\t\tassert.equal(children[2].text, '..');\n\t\tassert.equal(children[2].className, 'token');\n\t\tassert.equal(children[2].tagName, 'span');\n\n\t\tassert.equal(children[3].text, 'def');\n\t\tassert.equal(children[3].className, 'token text');\n\t\tassert.equal(children[3].tagName, 'span');\n\n\t\tassert.equal(children[4].text, '...');\n\t\tassert.equal(children[4].className, 'token');\n\t\tassert.equal(children[4].tagName, 'span');\n\n\t\tassert.equal(children[5].text, 'gh');\n\t\tassert.equal(children[5].className, 'token text');\n\t\tassert.equal(children[5].tagName, 'span');\n\n\t\tresult = tokenizeToHtmlContent('.abc..def...gh\\n.abc..def...gh', mode);\n\n\t\tassert.ok(!!result);\n\n\t\tchildren = result.children;\n\t\tassert.equal(children.length, 12 + 1 /* +1 for the line break */);\n\n\t\tassert.equal(children[6].tagName, 'br');\n\t});\n\n});\n\nclass State extends AbstractState {\n\n\tconstructor(mode:IMode) {\n\t\tsuper(mode);\n\t}\n\n\tpublic makeClone() : AbstractState {\n\t\treturn new State(this.getMode());\n\t}\n\n\tpublic tokenize(stream:IStream):ITokenizationResult {\n\t\treturn { type: stream.next() === '.' ? '' : 'text' };\n\t}\n}\n\nclass Mode extends MockMode {\n\n\tpublic tokenizationSupport: ITokenizationSupport;\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.tokenizationSupport = new TokenizationSupport(this, {\n\t\t\tgetInitialState: () => new State(this)\n\t\t}, false, false);\n\t}\n}\n"]}